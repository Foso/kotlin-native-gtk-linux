plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
}

ext.applicationName = "kavanmevada"
ext.applicationId = "org.gtk.$applicationName"

repositories {
    mavenCentral()
}

kotlin {

    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    linuxX64("linux") {

        compilations.main.cinterops {
            libgtk3 {
                ['/opt/local/include',
                 '/usr/include',
                 '/usr/local/include',
                ].each {
                    includeDirs "$it/atk-1.0",
                            "$it/gdk-pixbuf-2.0",
                            "$it/cairo",
                            "$it/pango-1.0",
                            "$it/harfbuzz",
                            "$it/gtk-3.0",
                            "$it/glib-2.0", "$it"
                }

                includeDirs '/opt/local/lib/glib-2.0/include',
                        '/usr/lib/x86_64-linux-gnu/glib-2.0/include',
                        '/usr/local/lib/glib-2.0/include'
            }

            glibresources {
                includeDirs "$buildDir/g_resources", "/usr/include/glib-2.0", "/usr/lib64/glib-2.0/include"
            }

        }

        binaries {
            executable {
                // Change to specify fully qualified name of your application's entry point:
               entryPoint = 'sample.main'
                // Specify command-line arguments, if necessary:
                runTask?.args('')
            }
        }


    }


    sourceSets {
        linuxMain {

            resources.exclude '**/*'
            dependencies {
                //implementation fileTree(include: ['*.klib'], dir: 'libs')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.2'
            }
        }

        // And do the same for the other target:
        linuxX64().compilations.main.defaultSourceSet {
            dependsOn commonMain
        }
    }

}





build {

    //Generate Resource File
    mkdir("$buildDir/g_resources/")
    ext.outputFile = file("$buildDir/g_resources/glibresources.gresource.xml")
    outputFile.text = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    outputFile.text += "\n<gresources>"
    outputFile.text += "\n  <gresource prefix=\"/org/gtk/example\">"
    kotlin.sourceSets.linuxMain.resources.srcDirs.each {
        file(it).eachFile { file ->
            copy {
                from file.path
                into "$buildDir/g_resources"
            }
            outputFile.text += "\n    <file>${file.name}</file>"
        }
    }
    outputFile.text += "\n  </gresource>"
    outputFile.text += "\n</gresources>"



    exec { executable 'echo' args 'Helloworld' }

    exec {
        workingDir "$buildDir/g_resources"
        executable 'glib-compile-resources' args "glibresources.gresource.xml", "--generate-source", "--target=glibresources.c"
    }

    exec {
        workingDir "$buildDir/g_resources"
        executable 'glib-compile-resources' args "glibresources.gresource.xml", "--generate-header", "--target=glibresources.h"
    }


    exec {
        workingDir "$buildDir/g_resources"
        executable 'bash' args '-c', 'sed -i -e "s:gio.h>:gio.h>\\n#include \\"glibresources.h\\":" glibresources.c'
    }


    exec {
        workingDir "$buildDir/g_resources"
        executable 'gcc' args '-c', "-I$buildDir/g_resources", '-c', "-I/usr/include/glib-2.0", '-c', "-I/usr/lib64/glib-2.0/include", 'glibresources.c', '-o', 'glibresources.o'
    }


    exec {
        workingDir "$buildDir/g_resources"
        executable 'ar' args 'rcs', 'glibresources.a', 'glibresources.o'
    }


    //println kotlin.sourceSets.linuxMain.kotlin.srcDirs
    ext.genrateDef = file("src/nativeInterop/cinterop/glibresources.def")
    genrateDef.text = "headers = glibresources.h"
    genrateDef.text += "\nstaticLibraries = glibresources.a"
    genrateDef.text += "\nlibraryPaths = $buildDir/g_resources"
}



// Use the following Gradle tasks to run your application:
// :runReleaseExecutableLinux - without debug symbols
// :runDebugExecutableLinux - with debug symbols