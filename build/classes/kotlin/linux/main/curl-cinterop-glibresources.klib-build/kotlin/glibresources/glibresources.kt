@file:kotlinx.cinterop.InteropStubs
@file:Suppress("UNUSED_VARIABLE", "UNUSED_EXPRESSION")
package glibresources

import kotlin.native.SymbolName
import kotlinx.cinterop.internal.*
import kotlinx.cinterop.*
import cnames.structs.GTestCase
import cnames.structs.GTestSuite
import cnames.structs._GAction
import cnames.structs._GActionGroup
import cnames.structs._GActionMap
import cnames.structs._GAllocator
import cnames.structs._GAppInfo
import cnames.structs._GAppInfoMonitor
import cnames.structs._GAppLaunchContextPrivate
import cnames.structs._GApplicationCommandLinePrivate
import cnames.structs._GApplicationPrivate
import cnames.structs._GAsyncInitable
import cnames.structs._GAsyncQueue
import cnames.structs._GAsyncResult
import cnames.structs._GBinding
import cnames.structs._GBookmarkFile
import cnames.structs._GBufferedInputStreamPrivate
import cnames.structs._GBufferedOutputStreamPrivate
import cnames.structs._GBytes
import cnames.structs._GBytesIcon
import cnames.structs._GCache
import cnames.structs._GCancellablePrivate
import cnames.structs._GCharsetConverter
import cnames.structs._GChecksum
import cnames.structs._GConverter
import cnames.structs._GConverterInputStreamPrivate
import cnames.structs._GConverterOutputStreamPrivate
import cnames.structs._GCredentials
import cnames.structs._GCredentialsClass
import cnames.structs._GDBusActionGroup
import cnames.structs._GDBusAuthObserver
import cnames.structs._GDBusConnection
import cnames.structs._GDBusInterface
import cnames.structs._GDBusInterfaceSkeletonPrivate
import cnames.structs._GDBusMenuModel
import cnames.structs._GDBusMessage
import cnames.structs._GDBusMethodInvocation
import cnames.structs._GDBusObject
import cnames.structs._GDBusObjectManager
import cnames.structs._GDBusObjectManagerClientPrivate
import cnames.structs._GDBusObjectManagerServerPrivate
import cnames.structs._GDBusObjectProxyPrivate
import cnames.structs._GDBusObjectSkeletonPrivate
import cnames.structs._GDBusProxyPrivate
import cnames.structs._GDBusServer
import cnames.structs._GData
import cnames.structs._GDataInputStreamPrivate
import cnames.structs._GDataOutputStreamPrivate
import cnames.structs._GDatagramBased
import cnames.structs._GDateTime
import cnames.structs._GDir
import cnames.structs._GDrive
import cnames.structs._GDtlsClientConnection
import cnames.structs._GDtlsConnection
import cnames.structs._GDtlsServerConnection
import cnames.structs._GEmblem
import cnames.structs._GEmblemClass
import cnames.structs._GEmblemedIconPrivate
import cnames.structs._GFile
import cnames.structs._GFileAttributeMatcher
import cnames.structs._GFileDescriptorBased
import cnames.structs._GFileEnumeratorPrivate
import cnames.structs._GFileIOStreamPrivate
import cnames.structs._GFileIcon
import cnames.structs._GFileIconClass
import cnames.structs._GFileInfo
import cnames.structs._GFileInfoClass
import cnames.structs._GFileInputStreamPrivate
import cnames.structs._GFileMonitorPrivate
import cnames.structs._GFileOutputStreamPrivate
import cnames.structs._GFilenameCompleter
import cnames.structs._GHashTable
import cnames.structs._GHmac
import cnames.structs._GIConv
import cnames.structs._GIOExtension
import cnames.structs._GIOExtensionPoint
import cnames.structs._GIOModule
import cnames.structs._GIOModuleClass
import cnames.structs._GIOModuleScope
import cnames.structs._GIOSchedulerJob
import cnames.structs._GIOStreamAdapter
import cnames.structs._GIOStreamPrivate
import cnames.structs._GIcon
import cnames.structs._GInetAddressMaskPrivate
import cnames.structs._GInetAddressPrivate
import cnames.structs._GInetSocketAddressPrivate
import cnames.structs._GInitable
import cnames.structs._GInputStreamPrivate
import cnames.structs._GKeyFile
import cnames.structs._GListModel
import cnames.structs._GListStore
import cnames.structs._GLoadableIcon
import cnames.structs._GMainContext
import cnames.structs._GMainLoop
import cnames.structs._GMappedFile
import cnames.structs._GMarkupParseContext
import cnames.structs._GMatchInfo
import cnames.structs._GMemChunk
import cnames.structs._GMemoryInputStreamPrivate
import cnames.structs._GMemoryOutputStreamPrivate
import cnames.structs._GMenu
import cnames.structs._GMenuAttributeIterPrivate
import cnames.structs._GMenuItem
import cnames.structs._GMenuLinkIterPrivate
import cnames.structs._GMenuModelPrivate
import cnames.structs._GModule
import cnames.structs._GMount
import cnames.structs._GMountOperationPrivate
import cnames.structs._GNativeSocketAddressPrivate
import cnames.structs._GNetworkAddressPrivate
import cnames.structs._GNetworkMonitor
import cnames.structs._GNetworkServicePrivate
import cnames.structs._GNotification
import cnames.structs._GOptionContext
import cnames.structs._GOptionGroup
import cnames.structs._GOutputStreamPrivate
import cnames.structs._GParamSpecPool
import cnames.structs._GPatternSpec
import cnames.structs._GPermissionPrivate
import cnames.structs._GPollableInputStream
import cnames.structs._GPollableOutputStream
import cnames.structs._GPropertyAction
import cnames.structs._GProxy
import cnames.structs._GProxyAddressEnumeratorPrivate
import cnames.structs._GProxyAddressPrivate
import cnames.structs._GProxyResolver
import cnames.structs._GRand
import cnames.structs._GRegex
import cnames.structs._GRelation
import cnames.structs._GRemoteActionGroup
import cnames.structs._GResolverPrivate
import cnames.structs._GResource
import cnames.structs._GSeekable
import cnames.structs._GSequence
import cnames.structs._GSequenceNode
import cnames.structs._GSettingsBackend
import cnames.structs._GSettingsPrivate
import cnames.structs._GSettingsSchema
import cnames.structs._GSettingsSchemaKey
import cnames.structs._GSettingsSchemaSource
import cnames.structs._GSimpleAction
import cnames.structs._GSimpleActionGroupPrivate
import cnames.structs._GSimpleAsyncResult
import cnames.structs._GSimpleAsyncResultClass
import cnames.structs._GSimpleIOStream
import cnames.structs._GSimplePermission
import cnames.structs._GSimpleProxyResolverPrivate
import cnames.structs._GSocketClientPrivate
import cnames.structs._GSocketConnectable
import cnames.structs._GSocketConnectionPrivate
import cnames.structs._GSocketControlMessagePrivate
import cnames.structs._GSocketListenerPrivate
import cnames.structs._GSocketPrivate
import cnames.structs._GSocketServicePrivate
import cnames.structs._GSourcePrivate
import cnames.structs._GSrvTarget
import cnames.structs._GStringChunk
import cnames.structs._GSubprocess
import cnames.structs._GSubprocessLauncher
import cnames.structs._GTask
import cnames.structs._GTaskClass
import cnames.structs._GTcpConnectionPrivate
import cnames.structs._GTcpWrapperConnectionPrivate
import cnames.structs._GTestDBus
import cnames.structs._GThemedIcon
import cnames.structs._GThemedIconClass
import cnames.structs._GThreadedSocketServicePrivate
import cnames.structs._GTimeZone
import cnames.structs._GTimer
import cnames.structs._GTlsBackend
import cnames.structs._GTlsCertificatePrivate
import cnames.structs._GTlsClientConnection
import cnames.structs._GTlsConnectionPrivate
import cnames.structs._GTlsDatabasePrivate
import cnames.structs._GTlsFileDatabase
import cnames.structs._GTlsInteractionPrivate
import cnames.structs._GTlsPasswordPrivate
import cnames.structs._GTlsServerConnection
import cnames.structs._GTree
import cnames.structs._GTypeCValue
import cnames.structs._GTypePlugin
import cnames.structs._GUnixCredentialsMessage
import cnames.structs._GUnixFDList
import cnames.structs._GVariant
import cnames.structs._GVariantType
import cnames.structs._GVolume
import cnames.structs._GZlibCompressor
import cnames.structs._GZlibDecompressor
import platform.posix.pid_t
import platform.posix.pthread_mutex_t
import platform.posix.pthread_t
import platform.posix.pthread_tVar
import platform.posix.time_t
import platform.posix.time_tVar
import platform.posix.tm
import platform.posix.uid_t
import platform.posix.va_list

// NOTE THIS FILE IS AUTO-GENERATED

@CStruct("union { double p0; null p1; }")
class _GDoubleIEEE754(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var v_double: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    val mpn: anonymousStruct1
        get() = memberAt(0)
}

class anonymousStruct1(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var mantissa_low: guint
        get() = readBits(this.rawPtr, 0, 32, false).toUInt()
        set(value) { writeBits(this.rawPtr, 0, 32, value.toLong()) }
    
    var mantissa_high: guint
        get() = readBits(this.rawPtr, 32, 20, false).toUInt()
        set(value) { writeBits(this.rawPtr, 32, 20, value.toLong()) }
    
    var biased_exponent: guint
        get() = readBits(this.rawPtr, 52, 11, false).toUInt()
        set(value) { writeBits(this.rawPtr, 52, 11, value.toLong()) }
    
    var sign: guint
        get() = readBits(this.rawPtr, 63, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 63, 1, value.toLong()) }
}

@CStruct("union { float p0; null p1; }")
class _GFloatIEEE754(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var v_float: gfloat
        get() = memberAt<gfloatVar>(0).value
        set(value) { memberAt<gfloatVar>(0).value = value }
    
    val mpn: anonymousStruct2
        get() = memberAt(0)
}

class anonymousStruct2(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var mantissa: guint
        get() = readBits(this.rawPtr, 0, 23, false).toUInt()
        set(value) { writeBits(this.rawPtr, 0, 23, value.toLong()) }
    
    var biased_exponent: guint
        get() = readBits(this.rawPtr, 23, 8, false).toUInt()
        set(value) { writeBits(this.rawPtr, 23, 8, value.toLong()) }
    
    var sign: guint
        get() = readBits(this.rawPtr, 31, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 31, 1, value.toLong()) }
}

@CStruct("struct { long p0; long p1; }")
class _GTimeVal(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var tv_sec: glong
        get() = memberAt<glongVar>(0).value
        set(value) { memberAt<glongVar>(0).value = value }
    
    var tv_usec: glong
        get() = memberAt<glongVar>(8).value
        set(value) { memberAt<glongVar>(8).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var len: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GByteArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: CPointer<guint8Var>?
        get() = memberAt<CPointerVar<guint8Var>>(0).value
        set(value) { memberAt<CPointerVar<guint8Var>>(0).value = value }
    
    var len: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GPtrArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var pdata: CPointer<gpointerVar>?
        get() = memberAt<CPointerVar<gpointerVar>>(0).value
        set(value) { memberAt<CPointerVar<gpointerVar>>(0).value = value }
    
    var len: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { unsigned int p0; int p1; void* p2; }")
class _GError(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var domain: GQuark
        get() = memberAt<GQuarkVar>(0).value
        set(value) { memberAt<GQuarkVar>(0).value = value }
    
    var code: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
    
    var message: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GDebugKey(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var key: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var value: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; int p2; unsigned int p3; }")
class _GThread(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var func: GThreadFunc?
        get() = memberAt<GThreadFuncVar>(0).value
        set(value) { memberAt<GThreadFuncVar>(0).value = value }
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(8).value
        set(value) { memberAt<gpointerVar>(8).value = value }
    
    var joinable: gboolean
        get() = memberAt<gbooleanVar>(16).value
        set(value) { memberAt<gbooleanVar>(16).value = value }
    
    var priority: GThreadPriority
        get() = memberAt<GThreadPriority.Var>(20).value
        set(value) { memberAt<GThreadPriority.Var>(20).value = value }
}

@CStruct("union { void* p0; unsigned int p1[2]; }")
class _GMutex(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    val i: CArrayPointer<guintVar>
        get() = arrayMemberAt(0)
}

@CStruct("struct { void* p0; unsigned int p1[2]; }")
class _GRecMutex(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    val i: CArrayPointer<guintVar>
        get() = arrayMemberAt(8)
}

@CStruct("struct { void* p0; unsigned int p1[2]; }")
class _GRWLock(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    val i: CArrayPointer<guintVar>
        get() = arrayMemberAt(8)
}

@CStruct("struct { void* p0; unsigned int p1[2]; }")
class _GCond(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    val i: CArrayPointer<guintVar>
        get() = arrayMemberAt(8)
}

@CStruct("struct { void* p0; void* p1; void* p2[2]; }")
class _GPrivate(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var notify: GDestroyNotify?
        get() = memberAt<GDestroyNotifyVar>(8).value
        set(value) { memberAt<GDestroyNotifyVar>(8).value = value }
    
    val future: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { unsigned int p0; void* p1; }")
class _GOnce(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var status: GOnceStatus
        get() = memberAt<GOnceStatus.Var>(0).value
        set(value) { memberAt<GOnceStatus.Var>(0).value = value }
    
    var retval: gpointer?
        get() = memberAt<gpointerVar>(8).value
        set(value) { memberAt<gpointerVar>(8).value = value }
}

class _GDate(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var julian_days: guint
        get() = readBits(this.rawPtr, 0, 32, false).toUInt()
        set(value) { writeBits(this.rawPtr, 0, 32, value.toLong()) }
    
    var julian: guint
        get() = readBits(this.rawPtr, 32, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 32, 1, value.toLong()) }
    
    var dmy: guint
        get() = readBits(this.rawPtr, 33, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 33, 1, value.toLong()) }
    
    var day: guint
        get() = readBits(this.rawPtr, 34, 6, false).toUInt()
        set(value) { writeBits(this.rawPtr, 34, 6, value.toLong()) }
    
    var month: guint
        get() = readBits(this.rawPtr, 40, 4, false).toUInt()
        set(value) { writeBits(this.rawPtr, 40, 4, value.toLong()) }
    
    var year: guint
        get() = readBits(this.rawPtr, 44, 16, false).toUInt()
        set(value) { writeBits(this.rawPtr, 44, 16, value.toLong()) }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GMemVTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var malloc: CPointer<CFunction<(gsize) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(gsize) -> gpointer?>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(gsize) -> gpointer?>>>(0).value = value }
    
    var realloc: CPointer<CFunction<(gpointer?, gsize) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?, gsize) -> gpointer?>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?, gsize) -> gpointer?>>>(8).value = value }
    
    var free: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(16).value = value }
    
    var calloc: CPointer<CFunction<(gsize, gsize) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(gsize, gsize) -> gpointer?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(gsize, gsize) -> gpointer?>>>(24).value = value }
    
    var try_malloc: CPointer<CFunction<(gsize) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(gsize) -> gpointer?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(gsize) -> gpointer?>>>(32).value = value }
    
    var try_realloc: CPointer<CFunction<(gpointer?, gsize) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?, gsize) -> gpointer?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?, gsize) -> gpointer?>>>(40).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; }")
class _GNode(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var next: CPointer<GNode>?
        get() = memberAt<CPointerVar<GNode>>(8).value
        set(value) { memberAt<CPointerVar<GNode>>(8).value = value }
    
    var prev: CPointer<GNode>?
        get() = memberAt<CPointerVar<GNode>>(16).value
        set(value) { memberAt<CPointerVar<GNode>>(16).value = value }
    
    var parent: CPointer<GNode>?
        get() = memberAt<CPointerVar<GNode>>(24).value
        set(value) { memberAt<CPointerVar<GNode>>(24).value = value }
    
    var children: CPointer<GNode>?
        get() = memberAt<CPointerVar<GNode>>(32).value
        set(value) { memberAt<CPointerVar<GNode>>(32).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; }")
class _GList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var next: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(8).value
        set(value) { memberAt<CPointerVar<GList>>(8).value = value }
    
    var prev: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(16).value
        set(value) { memberAt<CPointerVar<GList>>(16).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; int p3; int p4; void* p5; }")
class _GHashTableIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var dummy1: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var dummy2: gpointer?
        get() = memberAt<gpointerVar>(8).value
        set(value) { memberAt<gpointerVar>(8).value = value }
    
    var dummy3: gpointer?
        get() = memberAt<gpointerVar>(16).value
        set(value) { memberAt<gpointerVar>(16).value = value }
    
    var dummy4: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var dummy5: gboolean
        get() = memberAt<gbooleanVar>(28).value
        set(value) { memberAt<gbooleanVar>(28).value = value }
    
    var dummy6: gpointer?
        get() = memberAt<gpointerVar>(32).value
        set(value) { memberAt<gpointerVar>(32).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; unsigned int p3; unsigned long p4; unsigned int p5; void* p6; void* p7; }")
class _GHook(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var next: CPointer<GHook>?
        get() = memberAt<CPointerVar<GHook>>(8).value
        set(value) { memberAt<CPointerVar<GHook>>(8).value = value }
    
    var prev: CPointer<GHook>?
        get() = memberAt<CPointerVar<GHook>>(16).value
        set(value) { memberAt<CPointerVar<GHook>>(16).value = value }
    
    var ref_count: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var hook_id: gulong
        get() = memberAt<gulongVar>(32).value
        set(value) { memberAt<gulongVar>(32).value = value }
    
    var flags: guint
        get() = memberAt<guintVar>(40).value
        set(value) { memberAt<guintVar>(40).value = value }
    
    var func: gpointer?
        get() = memberAt<gpointerVar>(48).value
        set(value) { memberAt<gpointerVar>(48).value = value }
    
    var destroy: GDestroyNotify?
        get() = memberAt<GDestroyNotifyVar>(56).value
        set(value) { memberAt<GDestroyNotifyVar>(56).value = value }
}

class _GHookList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var seq_id: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var hooks: CPointer<GHook>?
        get() = memberAt<CPointerVar<GHook>>(16).value
        set(value) { memberAt<CPointerVar<GHook>>(16).value = value }
    
    var dummy3: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
    
    var finalize_hook: GHookFinalizeFunc?
        get() = memberAt<GHookFinalizeFuncVar>(32).value
        set(value) { memberAt<GHookFinalizeFuncVar>(32).value = value }
    
    val dummy: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(40)
    
    var hook_size: guint
        get() = readBits(this.rawPtr, 64, 16, false).toUInt()
        set(value) { writeBits(this.rawPtr, 64, 16, value.toLong()) }
    
    var is_setup: guint
        get() = readBits(this.rawPtr, 80, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 80, 1, value.toLong()) }
}

@CStruct("struct { int p0; unsigned short p1; unsigned short p2; }")
class _GPollFD(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var fd: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var events: gushort
        get() = memberAt<gushortVar>(4).value
        set(value) { memberAt<gushortVar>(4).value = value }
    
    var revents: gushort
        get() = memberAt<gushortVar>(6).value
        set(value) { memberAt<gushortVar>(6).value = value }
}

@CStruct("struct { void* p0; void* p1; }")
class _GSList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var next: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(8).value
        set(value) { memberAt<CPointerVar<GSList>>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; unsigned int p3; void* p4; int p5; unsigned int p6; unsigned int p7; void* p8; void* p9; void* p10; void* p11; void* p12; }")
class _GSource(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var callback_data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var callback_funcs: CPointer<GSourceCallbackFuncs>?
        get() = memberAt<CPointerVar<GSourceCallbackFuncs>>(8).value
        set(value) { memberAt<CPointerVar<GSourceCallbackFuncs>>(8).value = value }
    
    var source_funcs: CPointer<GSourceFuncs>?
        get() = memberAt<CPointerVar<GSourceFuncs>>(16).value
        set(value) { memberAt<CPointerVar<GSourceFuncs>>(16).value = value }
    
    var ref_count: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var context: CPointer<GMainContext>?
        get() = memberAt<CPointerVar<GMainContext>>(32).value
        set(value) { memberAt<CPointerVar<GMainContext>>(32).value = value }
    
    var priority: gint
        get() = memberAt<gintVar>(40).value
        set(value) { memberAt<gintVar>(40).value = value }
    
    var flags: guint
        get() = memberAt<guintVar>(44).value
        set(value) { memberAt<guintVar>(44).value = value }
    
    var source_id: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    var poll_fds: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(56).value
        set(value) { memberAt<CPointerVar<GSList>>(56).value = value }
    
    var prev: CPointer<GSource>?
        get() = memberAt<CPointerVar<GSource>>(64).value
        set(value) { memberAt<CPointerVar<GSource>>(64).value = value }
    
    var next: CPointer<GSource>?
        get() = memberAt<CPointerVar<GSource>>(72).value
        set(value) { memberAt<CPointerVar<GSource>>(72).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(80).value
        set(value) { memberAt<CPointerVar<ByteVar>>(80).value = value }
    
    var priv: CPointer<GSourcePrivate>?
        get() = memberAt<CPointerVar<GSourcePrivate>>(88).value
        set(value) { memberAt<CPointerVar<GSourcePrivate>>(88).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; }")
class _GSourceCallbackFuncs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var ref: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(0).value = value }
    
    var unref: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(8).value = value }
    
    var get: CPointer<CFunction<(gpointer?, CPointer<GSource>?, CPointer<GSourceFuncVar>?, CPointer<gpointerVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?, CPointer<GSource>?, CPointer<GSourceFuncVar>?, CPointer<gpointerVar>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?, CPointer<GSource>?, CPointer<GSourceFuncVar>?, CPointer<gpointerVar>?) -> Unit>>>(16).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSourceFuncs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var prepare: CPointer<CFunction<(CPointer<GSource>?, CPointer<gintVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?, CPointer<gintVar>?) -> gboolean>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?, CPointer<gintVar>?) -> gboolean>>>(0).value = value }
    
    var check: CPointer<CFunction<(CPointer<GSource>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> gboolean>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> gboolean>>>(8).value = value }
    
    var dispatch: CPointer<CFunction<(CPointer<GSource>?, GSourceFunc?, gpointer?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?, GSourceFunc?, gpointer?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?, GSourceFunc?, gpointer?) -> gboolean>>>(16).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GSource>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> Unit>>>(24).value = value }
    
    var closure_callback: GSourceFunc?
        get() = memberAt<GSourceFuncVar>(32).value
        set(value) { memberAt<GSourceFuncVar>(32).value = value }
    
    var closure_marshal: GSourceDummyMarshal?
        get() = memberAt<GSourceDummyMarshalVar>(40).value
        set(value) { memberAt<GSourceDummyMarshalVar>(40).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; unsigned long p2; }")
class _GString(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var str: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var len: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
    
    var allocated_len: gsize
        get() = memberAt<gsizeVar>(16).value
        set(value) { memberAt<gsizeVar>(16).value = value }
}

class _GIOChannel(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(112, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var funcs: CPointer<GIOFuncs>?
        get() = memberAt<CPointerVar<GIOFuncs>>(8).value
        set(value) { memberAt<CPointerVar<GIOFuncs>>(8).value = value }
    
    var encoding: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var read_cd: GIConv?
        get() = memberAt<GIConvVar>(24).value
        set(value) { memberAt<GIConvVar>(24).value = value }
    
    var write_cd: GIConv?
        get() = memberAt<GIConvVar>(32).value
        set(value) { memberAt<GIConvVar>(32).value = value }
    
    var line_term: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(40).value
        set(value) { memberAt<CPointerVar<gcharVar>>(40).value = value }
    
    var line_term_len: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    var buf_size: gsize
        get() = memberAt<gsizeVar>(56).value
        set(value) { memberAt<gsizeVar>(56).value = value }
    
    var read_buf: CPointer<GString>?
        get() = memberAt<CPointerVar<GString>>(64).value
        set(value) { memberAt<CPointerVar<GString>>(64).value = value }
    
    var encoded_read_buf: CPointer<GString>?
        get() = memberAt<CPointerVar<GString>>(72).value
        set(value) { memberAt<CPointerVar<GString>>(72).value = value }
    
    var write_buf: CPointer<GString>?
        get() = memberAt<CPointerVar<GString>>(80).value
        set(value) { memberAt<CPointerVar<GString>>(80).value = value }
    
    val partial_write_buf: CArrayPointer<gcharVar>
        get() = arrayMemberAt(88)
    
    var reserved1: gpointer?
        get() = memberAt<gpointerVar>(96).value
        set(value) { memberAt<gpointerVar>(96).value = value }
    
    var reserved2: gpointer?
        get() = memberAt<gpointerVar>(104).value
        set(value) { memberAt<gpointerVar>(104).value = value }
    
    var use_buffer: guint
        get() = readBits(this.rawPtr, 752, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 752, 1, value.toLong()) }
    
    var do_encode: guint
        get() = readBits(this.rawPtr, 753, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 753, 1, value.toLong()) }
    
    var close_on_unref: guint
        get() = readBits(this.rawPtr, 754, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 754, 1, value.toLong()) }
    
    var is_readable: guint
        get() = readBits(this.rawPtr, 755, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 755, 1, value.toLong()) }
    
    var is_writeable: guint
        get() = readBits(this.rawPtr, 756, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 756, 1, value.toLong()) }
    
    var is_seekable: guint
        get() = readBits(this.rawPtr, 757, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 757, 1, value.toLong()) }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GIOFuncs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var io_read: CPointer<CFunction<(CPointer<GIOChannel>?, CPointer<gcharVar>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, CPointer<gcharVar>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, CPointer<gcharVar>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(0).value = value }
    
    var io_write: CPointer<CFunction<(CPointer<GIOChannel>?, CPointer<gcharVar>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, CPointer<gcharVar>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, CPointer<gcharVar>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(8).value = value }
    
    var io_seek: CPointer<CFunction<(CPointer<GIOChannel>?, gint64, GSeekType, CPointer<CPointerVar<GError>>?) -> GIOStatus>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, gint64, GSeekType, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, gint64, GSeekType, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(16).value = value }
    
    var io_close: CPointer<CFunction<(CPointer<GIOChannel>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(24).value = value }
    
    var io_create_watch: CPointer<CFunction<(CPointer<GIOChannel>?, GIOCondition) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, GIOCondition) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, GIOCondition) -> CPointer<GSource>?>>>(32).value = value }
    
    var io_free: CPointer<CFunction<(CPointer<GIOChannel>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?) -> Unit>>>(40).value = value }
    
    var io_set_flags: CPointer<CFunction<(CPointer<GIOChannel>?, GIOFlags, CPointer<CPointerVar<GError>>?) -> GIOStatus>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, GIOFlags, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?, GIOFlags, CPointer<CPointerVar<GError>>?) -> GIOStatus>>>(48).value = value }
    
    var io_get_flags: CPointer<CFunction<(CPointer<GIOChannel>?) -> GIOFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?) -> GIOFlags>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOChannel>?) -> GIOFlags>>>(56).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; }")
class _GMarkupParser(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var start_element: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<gcharVar>>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<gcharVar>>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<gcharVar>>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(0).value = value }
    
    var end_element: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(8).value = value }
    
    var text: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(16).value = value }
    
    var passthrough: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(24).value = value }
    
    var error: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<GError>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<GError>?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<GError>?, gpointer?) -> Unit>>>(32).value = value }
}

@CStruct("struct { unsigned long p0[16]; }")
class _GVariantIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val x: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(0)
}

@CStruct("struct { union { struct { unsigned long p0; void* p1; unsigned long p2[14]; } p0; unsigned long p1[16]; } p0; }")
class _GVariantBuilder(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val u: anonymousStruct3
        get() = memberAt(0)
}

@CStruct("union { struct { unsigned long p0; void* p1; unsigned long p2[14]; } p0; unsigned long p1[16]; }")
class anonymousStruct3(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val s: anonymousStruct4
        get() = memberAt(0)
    
    val x: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(0)
}

@CStruct("struct { unsigned long p0; void* p1; unsigned long p2[14]; }")
class anonymousStruct4(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    var partial_magic: gsize
        get() = memberAt<gsizeVar>(0).value
        set(value) { memberAt<gsizeVar>(0).value = value }
    
    var type: CPointer<GVariantType>?
        get() = memberAt<CPointerVar<GVariantType>>(8).value
        set(value) { memberAt<CPointerVar<GVariantType>>(8).value = value }
    
    val y: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { union { struct { void* p0; unsigned long p1; unsigned long p2[14]; } p0; unsigned long p1[16]; } p0; }")
class _GVariantDict(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val u: anonymousStruct5
        get() = memberAt(0)
}

@CStruct("union { struct { void* p0; unsigned long p1; unsigned long p2[14]; } p0; unsigned long p1[16]; }")
class anonymousStruct5(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val s: anonymousStruct6
        get() = memberAt(0)
    
    val x: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(0)
}

@CStruct("struct { void* p0; unsigned long p1; unsigned long p2[14]; }")
class anonymousStruct6(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    var asv: CPointer<GVariant>?
        get() = memberAt<CPointerVar<GVariant>>(0).value
        set(value) { memberAt<CPointerVar<GVariant>>(0).value = value }
    
    var partial_magic: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
    
    val y: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { void* p0; void* p1; long p2; }")
class _GLogField(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var key: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var value: gconstpointer?
        get() = memberAt<gconstpointerVar>(8).value
        set(value) { memberAt<gconstpointerVar>(8).value = value }
    
    var length: gssize
        get() = memberAt<gssizeVar>(16).value
        set(value) { memberAt<gssizeVar>(16).value = value }
}

@CStruct("struct { void* p0; char p1; int p2; unsigned int p3; void* p4; void* p5; void* p6; }")
class _GOptionEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var long_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var short_name: gchar
        get() = memberAt<gcharVar>(8).value
        set(value) { memberAt<gcharVar>(8).value = value }
    
    var flags: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
    
    var arg: GOptionArg
        get() = memberAt<GOptionArg.Var>(16).value
        set(value) { memberAt<GOptionArg.Var>(16).value = value }
    
    var arg_data: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
    
    var description: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
    
    var arg_description: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(40).value
        set(value) { memberAt<CPointerVar<gcharVar>>(40).value = value }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; }")
class _GQueue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var head: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(0).value
        set(value) { memberAt<CPointerVar<GList>>(0).value = value }
    
    var tail: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(8).value
        set(value) { memberAt<CPointerVar<GList>>(8).value = value }
    
    var length: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; unsigned int p2; void* p3; void* p4; void* p5; unsigned int p6; union { void* p0; void* p1; unsigned long p2; unsigned long p3; unsigned long p4; unsigned long p5; double p6; unsigned long p7; void* p8; void* p9; unsigned char p10; unsigned int p11; } p7; unsigned int p8; unsigned int p9; unsigned int p10; union { void* p0; void* p1; unsigned long p2; unsigned long p3; unsigned long p4; unsigned long p5; double p6; unsigned long p7; void* p8; void* p9; unsigned char p10; unsigned int p11; } p11; unsigned int p12; unsigned int p13; void* p14; int p15; void* p16; void* p17; void* p18; unsigned int p19; void* p20; }")
class _GScanner(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    var user_data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var max_parse_errors: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var parse_errors: guint
        get() = memberAt<guintVar>(12).value
        set(value) { memberAt<guintVar>(12).value = value }
    
    var input_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var qdata: CPointer<GData>?
        get() = memberAt<CPointerVar<GData>>(24).value
        set(value) { memberAt<CPointerVar<GData>>(24).value = value }
    
    var config: CPointer<GScannerConfig>?
        get() = memberAt<CPointerVar<GScannerConfig>>(32).value
        set(value) { memberAt<CPointerVar<GScannerConfig>>(32).value = value }
    
    var token: GTokenType
        get() = memberAt<GTokenTypeVar>(40).value
        set(value) { memberAt<GTokenTypeVar>(40).value = value }
    
    val value: GTokenValue
        get() = memberAt(48)
    
    var line: guint
        get() = memberAt<guintVar>(56).value
        set(value) { memberAt<guintVar>(56).value = value }
    
    var position: guint
        get() = memberAt<guintVar>(60).value
        set(value) { memberAt<guintVar>(60).value = value }
    
    var next_token: GTokenType
        get() = memberAt<GTokenTypeVar>(64).value
        set(value) { memberAt<GTokenTypeVar>(64).value = value }
    
    val next_value: GTokenValue
        get() = memberAt(72)
    
    var next_line: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
    
    var next_position: guint
        get() = memberAt<guintVar>(84).value
        set(value) { memberAt<guintVar>(84).value = value }
    
    var symbol_table: CPointer<GHashTable>?
        get() = memberAt<CPointerVar<GHashTable>>(88).value
        set(value) { memberAt<CPointerVar<GHashTable>>(88).value = value }
    
    var input_fd: gint
        get() = memberAt<gintVar>(96).value
        set(value) { memberAt<gintVar>(96).value = value }
    
    var text: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(104).value
        set(value) { memberAt<CPointerVar<gcharVar>>(104).value = value }
    
    var text_end: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(112).value
        set(value) { memberAt<CPointerVar<gcharVar>>(112).value = value }
    
    var buffer: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(120).value
        set(value) { memberAt<CPointerVar<gcharVar>>(120).value = value }
    
    var scope_id: guint
        get() = memberAt<guintVar>(128).value
        set(value) { memberAt<guintVar>(128).value = value }
    
    var msg_handler: GScannerMsgFunc?
        get() = memberAt<GScannerMsgFuncVar>(136).value
        set(value) { memberAt<GScannerMsgFuncVar>(136).value = value }
}

class _GScannerConfig(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var cset_skip_characters: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var cset_identifier_first: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var cset_identifier_nth: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var cpair_comment_single: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var padding_dummy: guint
        get() = memberAt<guintVar>(36).value
        set(value) { memberAt<guintVar>(36).value = value }
    
    var case_sensitive: guint
        get() = readBits(this.rawPtr, 256, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 256, 1, value.toLong()) }
    
    var skip_comment_multi: guint
        get() = readBits(this.rawPtr, 257, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 257, 1, value.toLong()) }
    
    var skip_comment_single: guint
        get() = readBits(this.rawPtr, 258, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 258, 1, value.toLong()) }
    
    var scan_comment_multi: guint
        get() = readBits(this.rawPtr, 259, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 259, 1, value.toLong()) }
    
    var scan_identifier: guint
        get() = readBits(this.rawPtr, 260, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 260, 1, value.toLong()) }
    
    var scan_identifier_1char: guint
        get() = readBits(this.rawPtr, 261, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 261, 1, value.toLong()) }
    
    var scan_identifier_NULL: guint
        get() = readBits(this.rawPtr, 262, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 262, 1, value.toLong()) }
    
    var scan_symbols: guint
        get() = readBits(this.rawPtr, 263, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 263, 1, value.toLong()) }
    
    var scan_binary: guint
        get() = readBits(this.rawPtr, 264, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 264, 1, value.toLong()) }
    
    var scan_octal: guint
        get() = readBits(this.rawPtr, 265, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 265, 1, value.toLong()) }
    
    var scan_float: guint
        get() = readBits(this.rawPtr, 266, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 266, 1, value.toLong()) }
    
    var scan_hex: guint
        get() = readBits(this.rawPtr, 267, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 267, 1, value.toLong()) }
    
    var scan_hex_dollar: guint
        get() = readBits(this.rawPtr, 268, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 268, 1, value.toLong()) }
    
    var scan_string_sq: guint
        get() = readBits(this.rawPtr, 269, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 269, 1, value.toLong()) }
    
    var scan_string_dq: guint
        get() = readBits(this.rawPtr, 270, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 270, 1, value.toLong()) }
    
    var numbers_2_int: guint
        get() = readBits(this.rawPtr, 271, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 271, 1, value.toLong()) }
    
    var int_2_float: guint
        get() = readBits(this.rawPtr, 272, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 272, 1, value.toLong()) }
    
    var identifier_2_string: guint
        get() = readBits(this.rawPtr, 273, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 273, 1, value.toLong()) }
    
    var char_2_token: guint
        get() = readBits(this.rawPtr, 274, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 274, 1, value.toLong()) }
    
    var symbol_2_token: guint
        get() = readBits(this.rawPtr, 275, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 275, 1, value.toLong()) }
    
    var scope_0_fallback: guint
        get() = readBits(this.rawPtr, 276, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 276, 1, value.toLong()) }
    
    var store_int64: guint
        get() = readBits(this.rawPtr, 277, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 277, 1, value.toLong()) }
}

@CStruct("union { void* p0; void* p1; unsigned long p2; unsigned long p3; unsigned long p4; unsigned long p5; double p6; unsigned long p7; void* p8; void* p9; unsigned char p10; unsigned int p11; }")
class _GTokenValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var v_symbol: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var v_identifier: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var v_binary: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_octal: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_int: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_int64: guint64
        get() = memberAt<guint64Var>(0).value
        set(value) { memberAt<guint64Var>(0).value = value }
    
    var v_float: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    var v_hex: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_string: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var v_comment: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var v_char: guchar
        get() = memberAt<gucharVar>(0).value
        set(value) { memberAt<gucharVar>(0).value = value }
    
    var v_error: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
}

@CStruct("struct { int p0; int p1; int p2; int p3; int p4; int p5; }")
class GTestConfig(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 4)
    
    var test_initialized: gboolean
        get() = memberAt<gbooleanVar>(0).value
        set(value) { memberAt<gbooleanVar>(0).value = value }
    
    var test_quick: gboolean
        get() = memberAt<gbooleanVar>(4).value
        set(value) { memberAt<gbooleanVar>(4).value = value }
    
    var test_perf: gboolean
        get() = memberAt<gbooleanVar>(8).value
        set(value) { memberAt<gbooleanVar>(8).value = value }
    
    var test_verbose: gboolean
        get() = memberAt<gbooleanVar>(12).value
        set(value) { memberAt<gbooleanVar>(12).value = value }
    
    var test_quiet: gboolean
        get() = memberAt<gbooleanVar>(16).value
        set(value) { memberAt<gbooleanVar>(16).value = value }
    
    var test_undefined: gboolean
        get() = memberAt<gbooleanVar>(20).value
        set(value) { memberAt<gbooleanVar>(20).value = value }
}

@CStruct("struct { unsigned int p0; unsigned int p1; void* p2; unsigned int p3; void* p4; }")
class GTestLogMsg(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var log_type: GTestLogType
        get() = memberAt<GTestLogType.Var>(0).value
        set(value) { memberAt<GTestLogType.Var>(0).value = value }
    
    var n_strings: guint
        get() = memberAt<guintVar>(4).value
        set(value) { memberAt<guintVar>(4).value = value }
    
    var strings: CPointer<CPointerVar<gcharVar>>?
        get() = memberAt<CPointerVar<CPointerVar<gcharVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<gcharVar>>>(8).value = value }
    
    var n_nums: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var nums: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(24).value
        set(value) { memberAt<COpaquePointerVar>(24).value = value }
}

@CStruct("struct { void* p0; void* p1; }")
class GTestLogBuffer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: CPointer<GString>?
        get() = memberAt<CPointerVar<GString>>(0).value
        set(value) { memberAt<CPointerVar<GString>>(0).value = value }
    
    var msgs: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(8).value
        set(value) { memberAt<CPointerVar<GSList>>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; int p2; }")
class _GThreadPool(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var func: GFunc?
        get() = memberAt<GFuncVar>(0).value
        set(value) { memberAt<GFuncVar>(0).value = value }
    
    var user_data: gpointer?
        get() = memberAt<gpointerVar>(8).value
        set(value) { memberAt<gpointerVar>(8).value = value }
    
    var exclusive: gboolean
        get() = memberAt<gbooleanVar>(16).value
        set(value) { memberAt<gbooleanVar>(16).value = value }
}

@CStruct("struct { void* p0; }")
class _GTrashStack(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var next: CPointer<GTrashStack>?
        get() = memberAt<CPointerVar<GTrashStack>>(0).value
        set(value) { memberAt<CPointerVar<GTrashStack>>(0).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; }")
class _GCompletion(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var items: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(0).value
        set(value) { memberAt<CPointerVar<GList>>(0).value = value }
    
    var func: GCompletionFunc?
        get() = memberAt<GCompletionFuncVar>(8).value
        set(value) { memberAt<GCompletionFuncVar>(8).value = value }
    
    var prefix: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var cache: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(24).value
        set(value) { memberAt<CPointerVar<GList>>(24).value = value }
    
    var strncmp_func: GCompletionStrncmpFunc?
        get() = memberAt<GCompletionStrncmpFuncVar>(32).value
        set(value) { memberAt<GCompletionStrncmpFuncVar>(32).value = value }
}

@CStruct("struct { unsigned int p0; }")
class _GTuples(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var len: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; }")
class _GThreadFunctions(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    var mutex_new: CPointer<CFunction<() -> CPointer<GMutex>?>>?
        get() = memberAt<CPointerVar<CFunction<() -> CPointer<GMutex>?>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<() -> CPointer<GMutex>?>>>(0).value = value }
    
    var mutex_lock: CPointer<CFunction<(CPointer<GMutex>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> Unit>>>(8).value = value }
    
    var mutex_trylock: CPointer<CFunction<(CPointer<GMutex>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> gboolean>>>(16).value = value }
    
    var mutex_unlock: CPointer<CFunction<(CPointer<GMutex>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> Unit>>>(24).value = value }
    
    var mutex_free: CPointer<CFunction<(CPointer<GMutex>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMutex>?) -> Unit>>>(32).value = value }
    
    var cond_new: CPointer<CFunction<() -> CPointer<GCond>?>>?
        get() = memberAt<CPointerVar<CFunction<() -> CPointer<GCond>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<() -> CPointer<GCond>?>>>(40).value = value }
    
    var cond_signal: CPointer<CFunction<(CPointer<GCond>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCond>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCond>?) -> Unit>>>(48).value = value }
    
    var cond_broadcast: CPointer<CFunction<(CPointer<GCond>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCond>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCond>?) -> Unit>>>(56).value = value }
    
    var cond_wait: CPointer<CFunction<(CPointer<GCond>?, CPointer<GMutex>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCond>?, CPointer<GMutex>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCond>?, CPointer<GMutex>?) -> Unit>>>(64).value = value }
    
    var cond_timed_wait: CPointer<CFunction<(CPointer<GCond>?, CPointer<GMutex>?, CPointer<GTimeVal>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCond>?, CPointer<GMutex>?, CPointer<GTimeVal>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCond>?, CPointer<GMutex>?, CPointer<GTimeVal>?) -> gboolean>>>(72).value = value }
    
    var cond_free: CPointer<CFunction<(CPointer<GCond>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCond>?) -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCond>?) -> Unit>>>(80).value = value }
    
    var private_new: CPointer<CFunction<(GDestroyNotify?) -> CPointer<GPrivate>?>>?
        get() = memberAt<CPointerVar<CFunction<(GDestroyNotify?) -> CPointer<GPrivate>?>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(GDestroyNotify?) -> CPointer<GPrivate>?>>>(88).value = value }
    
    var private_get: CPointer<CFunction<(CPointer<GPrivate>?) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPrivate>?) -> gpointer?>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPrivate>?) -> gpointer?>>>(96).value = value }
    
    var private_set: CPointer<CFunction<(CPointer<GPrivate>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPrivate>?, gpointer?) -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPrivate>?, gpointer?) -> Unit>>>(104).value = value }
    
    var thread_create: CPointer<CFunction<(GThreadFunc?, gpointer?, gulong, gboolean, gboolean, GThreadPriority, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(GThreadFunc?, gpointer?, gulong, gboolean, gboolean, GThreadPriority, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(GThreadFunc?, gpointer?, gulong, gboolean, gboolean, GThreadPriority, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(112).value = value }
    
    var thread_yield: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(120).value = value }
    
    var thread_join: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(128).value = value }
    
    var thread_exit: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var thread_set_priority: CPointer<CFunction<(gpointer?, GThreadPriority) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?, GThreadPriority) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?, GThreadPriority) -> Unit>>>(144).value = value }
    
    var thread_self: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(152).value = value }
    
    var thread_equal: CPointer<CFunction<(gpointer?, gpointer?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?, gpointer?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?, gpointer?) -> gboolean>>>(160).value = value }
}

@CStruct("struct { void* p0; union { struct { int p0; unsigned int p1; int p2; unsigned int p3; int p4; short p5; short p6; struct { void* p0; void* p1; } p7; } p0; char p1[40]; long p2; } p1; }")
class GStaticMutex(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var mutex: CPointer<GMutex>?
        get() = memberAt<CPointerVar<GMutex>>(0).value
        set(value) { memberAt<CPointerVar<GMutex>>(0).value = value }
    
    val unused: pthread_mutex_t
        get() = memberAt(8)
}

@CStruct("struct { struct { void* p0; union { struct { int p0; unsigned int p1; int p2; unsigned int p3; int p4; short p5; short p6; struct { void* p0; void* p1; } p7; } p0; char p1[40]; long p2; } p1; } p0; unsigned int p1; union { unsigned long p0; double p1; } p2; }")
class _GStaticRecMutex(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val mutex: GStaticMutex
        get() = memberAt(0)
    
    var depth: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    val unused: anonymousStruct7
        get() = memberAt(56)
}

@CStruct("union { unsigned long p0; double p1; }")
class anonymousStruct7(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var owner: pthread_t
        get() = memberAt<pthread_tVar>(0).value
        set(value) { memberAt<pthread_tVar>(0).value = value }
    
    var dummy: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
}

@CStruct("struct { struct { void* p0; union { struct { int p0; unsigned int p1; int p2; unsigned int p3; int p4; short p5; short p6; struct { void* p0; void* p1; } p7; } p0; char p1[40]; long p2; } p1; } p0; void* p1; void* p2; unsigned int p3; int p4; unsigned int p5; unsigned int p6; }")
class _GStaticRWLock(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val mutex: GStaticMutex
        get() = memberAt(0)
    
    var read_cond: CPointer<GCond>?
        get() = memberAt<CPointerVar<GCond>>(48).value
        set(value) { memberAt<CPointerVar<GCond>>(48).value = value }
    
    var write_cond: CPointer<GCond>?
        get() = memberAt<CPointerVar<GCond>>(56).value
        set(value) { memberAt<CPointerVar<GCond>>(56).value = value }
    
    var read_counter: guint
        get() = memberAt<guintVar>(64).value
        set(value) { memberAt<guintVar>(64).value = value }
    
    var have_writer: gboolean
        get() = memberAt<gbooleanVar>(68).value
        set(value) { memberAt<gbooleanVar>(68).value = value }
    
    var want_to_read: guint
        get() = memberAt<guintVar>(72).value
        set(value) { memberAt<guintVar>(72).value = value }
    
    var want_to_write: guint
        get() = memberAt<guintVar>(76).value
        set(value) { memberAt<guintVar>(76).value = value }
}

@CStruct("struct { unsigned int p0; }")
class _GStaticPrivate(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var index: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
}

@CStruct("struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; }")
class _GValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var g_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    val data: CArrayPointer<anonymousStruct8>
        get() = arrayMemberAt(8)
}

@CStruct("union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; }")
class anonymousStruct8(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var v_int: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var v_uint: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var v_long: glong
        get() = memberAt<glongVar>(0).value
        set(value) { memberAt<glongVar>(0).value = value }
    
    var v_ulong: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_int64: gint64
        get() = memberAt<gint64Var>(0).value
        set(value) { memberAt<gint64Var>(0).value = value }
    
    var v_uint64: guint64
        get() = memberAt<guint64Var>(0).value
        set(value) { memberAt<guint64Var>(0).value = value }
    
    var v_float: gfloat
        get() = memberAt<gfloatVar>(0).value
        set(value) { memberAt<gfloatVar>(0).value = value }
    
    var v_double: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    var v_pointer: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
}

@CStruct("struct { unsigned long p0; }")
class _GTypeClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var g_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
}

@CStruct("struct { unsigned long p0; unsigned long p1; }")
class _GTypeInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var g_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    var g_instance_type: GType
        get() = memberAt<GTypeVar>(8).value
        set(value) { memberAt<GTypeVar>(8).value = value }
}

@CStruct("struct { void* p0; }")
class _GTypeInstance(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var g_class: CPointer<GTypeClass>?
        get() = memberAt<CPointerVar<GTypeClass>>(0).value
        set(value) { memberAt<CPointerVar<GTypeClass>>(0).value = value }
}

@CStruct("struct { unsigned short p0; void* p1; void* p2; void* p3; void* p4; void* p5; unsigned short p6; unsigned short p7; void* p8; void* p9; }")
class _GTypeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    var class_size: guint16
        get() = memberAt<guint16Var>(0).value
        set(value) { memberAt<guint16Var>(0).value = value }
    
    var base_init: GBaseInitFunc?
        get() = memberAt<GBaseInitFuncVar>(8).value
        set(value) { memberAt<GBaseInitFuncVar>(8).value = value }
    
    var base_finalize: GBaseFinalizeFunc?
        get() = memberAt<GBaseFinalizeFuncVar>(16).value
        set(value) { memberAt<GBaseFinalizeFuncVar>(16).value = value }
    
    var class_init: GClassInitFunc?
        get() = memberAt<GClassInitFuncVar>(24).value
        set(value) { memberAt<GClassInitFuncVar>(24).value = value }
    
    var class_finalize: GClassFinalizeFunc?
        get() = memberAt<GClassFinalizeFuncVar>(32).value
        set(value) { memberAt<GClassFinalizeFuncVar>(32).value = value }
    
    var class_data: gconstpointer?
        get() = memberAt<gconstpointerVar>(40).value
        set(value) { memberAt<gconstpointerVar>(40).value = value }
    
    var instance_size: guint16
        get() = memberAt<guint16Var>(48).value
        set(value) { memberAt<guint16Var>(48).value = value }
    
    var n_preallocs: guint16
        get() = memberAt<guint16Var>(50).value
        set(value) { memberAt<guint16Var>(50).value = value }
    
    var instance_init: GInstanceInitFunc?
        get() = memberAt<GInstanceInitFuncVar>(56).value
        set(value) { memberAt<GInstanceInitFuncVar>(56).value = value }
    
    var value_table: CPointer<GTypeValueTable>?
        get() = memberAt<CPointerVar<GTypeValueTable>>(64).value
        set(value) { memberAt<CPointerVar<GTypeValueTable>>(64).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GTypeValueTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var value_init: CPointer<CFunction<(CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(0).value = value }
    
    var value_free: CPointer<CFunction<(CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(8).value = value }
    
    var value_copy: CPointer<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>>(16).value = value }
    
    var value_peek_pointer: CPointer<CFunction<(CPointer<GValue>?) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> gpointer?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> gpointer?>>>(24).value = value }
    
    var collect_format: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
    
    var collect_value: CPointer<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(40).value = value }
    
    var lcopy_format: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(48).value
        set(value) { memberAt<CPointerVar<gcharVar>>(48).value = value }
    
    var lcopy_value: CPointer<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(56).value = value }
}

@CStruct("struct { unsigned int p0; }")
class _GTypeFundamentalInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var type_flags: GTypeFundamentalFlags
        get() = memberAt<GTypeFundamentalFlagsVar>(0).value
        set(value) { memberAt<GTypeFundamentalFlagsVar>(0).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; }")
class _GInterfaceInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var interface_init: GInterfaceInitFunc?
        get() = memberAt<GInterfaceInitFuncVar>(0).value
        set(value) { memberAt<GInterfaceInitFuncVar>(0).value = value }
    
    var interface_finalize: GInterfaceFinalizeFunc?
        get() = memberAt<GInterfaceFinalizeFuncVar>(8).value
        set(value) { memberAt<GInterfaceFinalizeFuncVar>(8).value = value }
    
    var interface_data: gpointer?
        get() = memberAt<gpointerVar>(16).value
        set(value) { memberAt<gpointerVar>(16).value = value }
}

@CStruct("struct { unsigned long p0; void* p1; unsigned int p2; unsigned int p3; }")
class _GTypeQuery(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    var type_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var class_size: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var instance_size: guint
        get() = memberAt<guintVar>(20).value
        set(value) { memberAt<guintVar>(20).value = value }
}

@CStruct("struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; }")
class _GParamSpec(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val g_type_instance: GTypeInstance
        get() = memberAt(0)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var flags: GParamFlags
        get() = memberAt<GParamFlagsVar>(16).value
        set(value) { memberAt<GParamFlagsVar>(16).value = value }
    
    var value_type: GType
        get() = memberAt<GTypeVar>(24).value
        set(value) { memberAt<GTypeVar>(24).value = value }
    
    var owner_type: GType
        get() = memberAt<GTypeVar>(32).value
        set(value) { memberAt<GTypeVar>(32).value = value }
    
    var _nick: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(40).value
        set(value) { memberAt<CPointerVar<gcharVar>>(40).value = value }
    
    var _blurb: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(48).value
        set(value) { memberAt<CPointerVar<gcharVar>>(48).value = value }
    
    var qdata: CPointer<GData>?
        get() = memberAt<CPointerVar<GData>>(56).value
        set(value) { memberAt<CPointerVar<GData>>(56).value = value }
    
    var ref_count: guint
        get() = memberAt<guintVar>(64).value
        set(value) { memberAt<guintVar>(64).value = value }
    
    var param_id: guint
        get() = memberAt<guintVar>(68).value
        set(value) { memberAt<guintVar>(68).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; unsigned long p1; void* p2; void* p3; void* p4; void* p5; void* p6[4]; }")
class _GParamSpecClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var value_type: GType
        get() = memberAt<GTypeVar>(8).value
        set(value) { memberAt<GTypeVar>(8).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(16).value = value }
    
    var value_set_default: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(24).value = value }
    
    var value_validate: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(32).value = value }
    
    var values_cmp: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(40).value = value }
    
    val dummy: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(48)
}

@CStruct("struct { void* p0; struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; } p1; }")
class _GParameter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    val value: GValue
        get() = memberAt(8)
}

@CStruct("struct { unsigned short p0; unsigned short p1; void* p2; unsigned long p3; void* p4; void* p5; void* p6; void* p7; }")
class _GParamSpecTypeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var instance_size: guint16
        get() = memberAt<guint16Var>(0).value
        set(value) { memberAt<guint16Var>(0).value = value }
    
    var n_preallocs: guint16
        get() = memberAt<guint16Var>(2).value
        set(value) { memberAt<guint16Var>(2).value = value }
    
    var instance_init: CPointer<CFunction<(CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(8).value = value }
    
    var value_type: GType
        get() = memberAt<GTypeVar>(16).value
        set(value) { memberAt<GTypeVar>(16).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(24).value = value }
    
    var value_set_default: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(32).value = value }
    
    var value_validate: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(40).value = value }
    
    var values_cmp: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(48).value = value }
}

class _GClosure(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var marshal: CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>>(8).value = value }
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(16).value
        set(value) { memberAt<gpointerVar>(16).value = value }
    
    var notifiers: CPointer<GClosureNotifyData>?
        get() = memberAt<CPointerVar<GClosureNotifyData>>(24).value
        set(value) { memberAt<CPointerVar<GClosureNotifyData>>(24).value = value }
    
    var ref_count: guint
        get() = readBits(this.rawPtr, 0, 15, false).toUInt()
        set(value) { writeBits(this.rawPtr, 0, 15, value.toLong()) }
    
    var meta_marshal_nouse: guint
        get() = readBits(this.rawPtr, 15, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 15, 1, value.toLong()) }
    
    var n_guards: guint
        get() = readBits(this.rawPtr, 16, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 16, 1, value.toLong()) }
    
    var n_fnotifiers: guint
        get() = readBits(this.rawPtr, 17, 2, false).toUInt()
        set(value) { writeBits(this.rawPtr, 17, 2, value.toLong()) }
    
    var n_inotifiers: guint
        get() = readBits(this.rawPtr, 19, 8, false).toUInt()
        set(value) { writeBits(this.rawPtr, 19, 8, value.toLong()) }
    
    var in_inotify: guint
        get() = readBits(this.rawPtr, 27, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 27, 1, value.toLong()) }
    
    var floating: guint
        get() = readBits(this.rawPtr, 28, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 28, 1, value.toLong()) }
    
    var derivative_flag: guint
        get() = readBits(this.rawPtr, 29, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 29, 1, value.toLong()) }
    
    var in_marshal: guint
        get() = readBits(this.rawPtr, 30, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 30, 1, value.toLong()) }
    
    var is_invalid: guint
        get() = readBits(this.rawPtr, 31, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 31, 1, value.toLong()) }
}

@CStruct("struct { void* p0; void* p1; }")
class _GClosureNotifyData(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var notify: GClosureNotify?
        get() = memberAt<GClosureNotifyVar>(8).value
        set(value) { memberAt<GClosureNotifyVar>(8).value = value }
}

@CStruct("struct { null p0; void* p1; }")
class _GCClosure(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val closure: GClosure
        get() = memberAt(0)
    
    var callback: gpointer?
        get() = memberAt<gpointerVar>(32).value
        set(value) { memberAt<gpointerVar>(32).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; unsigned long p2; unsigned int p3; unsigned long p4; unsigned int p5; void* p6; }")
class _GSignalQuery(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var signal_id: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var signal_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var itype: GType
        get() = memberAt<GTypeVar>(16).value
        set(value) { memberAt<GTypeVar>(16).value = value }
    
    var signal_flags: GSignalFlags
        get() = memberAt<GSignalFlagsVar>(24).value
        set(value) { memberAt<GSignalFlagsVar>(24).value = value }
    
    var return_type: GType
        get() = memberAt<GTypeVar>(32).value
        set(value) { memberAt<GTypeVar>(32).value = value }
    
    var n_params: guint
        get() = memberAt<guintVar>(40).value
        set(value) { memberAt<guintVar>(40).value = value }
    
    var param_types: CPointer<GTypeVar>?
        get() = memberAt<CPointerVar<GTypeVar>>(48).value
        set(value) { memberAt<CPointerVar<GTypeVar>>(48).value = value }
}

@CStruct("struct { unsigned int p0; unsigned int p1; unsigned int p2; }")
class _GSignalInvocationHint(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var signal_id: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var detail: GQuark
        get() = memberAt<GQuarkVar>(4).value
        set(value) { memberAt<GQuarkVar>(4).value = value }
    
    var run_type: GSignalFlags
        get() = memberAt<GSignalFlagsVar>(8).value
        set(value) { memberAt<GSignalFlagsVar>(8).value = value }
}

@CStruct("struct { struct { void* p0; } p0; unsigned int p1; void* p2; }")
class _GObject(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_type_instance: GTypeInstance
        get() = memberAt(0)
    
    var ref_count: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var qdata: CPointer<GData>?
        get() = memberAt<CPointerVar<GData>>(16).value
        set(value) { memberAt<CPointerVar<GData>>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; }")
class _GObjectClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var construct_properties: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(8).value
        set(value) { memberAt<CPointerVar<GSList>>(8).value = value }
    
    var constructor: CPointer<CFunction<(GType, guint, CPointer<GObjectConstructParam>?) -> CPointer<GObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(GType, guint, CPointer<GObjectConstructParam>?) -> CPointer<GObject>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(GType, guint, CPointer<GObjectConstructParam>?) -> CPointer<GObject>?>>>(16).value = value }
    
    var set_property: CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(24).value = value }
    
    var get_property: CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(32).value = value }
    
    var dispose: CPointer<CFunction<(CPointer<GObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(40).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(48).value = value }
    
    var dispatch_properties_changed: CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>>(56).value = value }
    
    var notify: CPointer<CFunction<(CPointer<GObject>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, CPointer<GParamSpec>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, CPointer<GParamSpec>?) -> Unit>>>(64).value = value }
    
    var constructed: CPointer<CFunction<(CPointer<GObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(72).value = value }
    
    var flags: gsize
        get() = memberAt<gsizeVar>(80).value
        set(value) { memberAt<gsizeVar>(80).value = value }
    
    val pdummy: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(88)
}

@CStruct("struct { void* p0; void* p1; }")
class _GObjectConstructParam(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var pspec: CPointer<GParamSpec>?
        get() = memberAt<CPointerVar<GParamSpec>>(0).value
        set(value) { memberAt<CPointerVar<GParamSpec>>(0).value = value }
    
    var value: CPointer<GValue>?
        get() = memberAt<CPointerVar<GValue>>(8).value
        set(value) { memberAt<CPointerVar<GValue>>(8).value = value }
}

@CStruct("struct { union { void* p0; } p0; }")
class GWeakRef(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    val priv: anonymousStruct9
        get() = memberAt(0)
}

@CStruct("union { void* p0; }")
class anonymousStruct9(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; int p1; int p2; unsigned int p3; void* p4; }")
class _GEnumClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var minimum: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var maximum: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
    
    var n_values: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var values: CPointer<GEnumValue>?
        get() = memberAt<CPointerVar<GEnumValue>>(24).value
        set(value) { memberAt<CPointerVar<GEnumValue>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; }")
class _GEnumValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var value: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var value_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var value_nick: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; unsigned int p1; unsigned int p2; void* p3; }")
class _GFlagsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var mask: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var n_values: guint
        get() = memberAt<guintVar>(12).value
        set(value) { memberAt<guintVar>(12).value = value }
    
    var values: CPointer<GFlagsValue>?
        get() = memberAt<CPointerVar<GFlagsValue>>(16).value
        set(value) { memberAt<CPointerVar<GFlagsValue>>(16).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; void* p2; }")
class _GFlagsValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var value: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var value_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var value_nick: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; signed char p1; signed char p2; signed char p3; }")
class _GParamSpecChar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gint8
        get() = memberAt<gint8Var>(72).value
        set(value) { memberAt<gint8Var>(72).value = value }
    
    var maximum: gint8
        get() = memberAt<gint8Var>(73).value
        set(value) { memberAt<gint8Var>(73).value = value }
    
    var default_value: gint8
        get() = memberAt<gint8Var>(74).value
        set(value) { memberAt<gint8Var>(74).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned char p1; unsigned char p2; unsigned char p3; }")
class _GParamSpecUChar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: guint8
        get() = memberAt<guint8Var>(72).value
        set(value) { memberAt<guint8Var>(72).value = value }
    
    var maximum: guint8
        get() = memberAt<guint8Var>(73).value
        set(value) { memberAt<guint8Var>(73).value = value }
    
    var default_value: guint8
        get() = memberAt<guint8Var>(74).value
        set(value) { memberAt<guint8Var>(74).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; int p1; }")
class _GParamSpecBoolean(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var default_value: gboolean
        get() = memberAt<gbooleanVar>(72).value
        set(value) { memberAt<gbooleanVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; int p1; int p2; int p3; }")
class _GParamSpecInt(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gint
        get() = memberAt<gintVar>(72).value
        set(value) { memberAt<gintVar>(72).value = value }
    
    var maximum: gint
        get() = memberAt<gintVar>(76).value
        set(value) { memberAt<gintVar>(76).value = value }
    
    var default_value: gint
        get() = memberAt<gintVar>(80).value
        set(value) { memberAt<gintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned int p1; unsigned int p2; unsigned int p3; }")
class _GParamSpecUInt(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: guint
        get() = memberAt<guintVar>(72).value
        set(value) { memberAt<guintVar>(72).value = value }
    
    var maximum: guint
        get() = memberAt<guintVar>(76).value
        set(value) { memberAt<guintVar>(76).value = value }
    
    var default_value: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; long p1; long p2; long p3; }")
class _GParamSpecLong(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: glong
        get() = memberAt<glongVar>(72).value
        set(value) { memberAt<glongVar>(72).value = value }
    
    var maximum: glong
        get() = memberAt<glongVar>(80).value
        set(value) { memberAt<glongVar>(80).value = value }
    
    var default_value: glong
        get() = memberAt<glongVar>(88).value
        set(value) { memberAt<glongVar>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned long p1; unsigned long p2; unsigned long p3; }")
class _GParamSpecULong(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gulong
        get() = memberAt<gulongVar>(72).value
        set(value) { memberAt<gulongVar>(72).value = value }
    
    var maximum: gulong
        get() = memberAt<gulongVar>(80).value
        set(value) { memberAt<gulongVar>(80).value = value }
    
    var default_value: gulong
        get() = memberAt<gulongVar>(88).value
        set(value) { memberAt<gulongVar>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; long p1; long p2; long p3; }")
class _GParamSpecInt64(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gint64
        get() = memberAt<gint64Var>(72).value
        set(value) { memberAt<gint64Var>(72).value = value }
    
    var maximum: gint64
        get() = memberAt<gint64Var>(80).value
        set(value) { memberAt<gint64Var>(80).value = value }
    
    var default_value: gint64
        get() = memberAt<gint64Var>(88).value
        set(value) { memberAt<gint64Var>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned long p1; unsigned long p2; unsigned long p3; }")
class _GParamSpecUInt64(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: guint64
        get() = memberAt<guint64Var>(72).value
        set(value) { memberAt<guint64Var>(72).value = value }
    
    var maximum: guint64
        get() = memberAt<guint64Var>(80).value
        set(value) { memberAt<guint64Var>(80).value = value }
    
    var default_value: guint64
        get() = memberAt<guint64Var>(88).value
        set(value) { memberAt<guint64Var>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned int p1; }")
class _GParamSpecUnichar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var default_value: gunichar
        get() = memberAt<gunicharVar>(72).value
        set(value) { memberAt<gunicharVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; int p2; }")
class _GParamSpecEnum(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var enum_class: CPointer<GEnumClass>?
        get() = memberAt<CPointerVar<GEnumClass>>(72).value
        set(value) { memberAt<CPointerVar<GEnumClass>>(72).value = value }
    
    var default_value: gint
        get() = memberAt<gintVar>(80).value
        set(value) { memberAt<gintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; unsigned int p2; }")
class _GParamSpecFlags(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var flags_class: CPointer<GFlagsClass>?
        get() = memberAt<CPointerVar<GFlagsClass>>(72).value
        set(value) { memberAt<CPointerVar<GFlagsClass>>(72).value = value }
    
    var default_value: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; float p1; float p2; float p3; float p4; }")
class _GParamSpecFloat(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gfloat
        get() = memberAt<gfloatVar>(72).value
        set(value) { memberAt<gfloatVar>(72).value = value }
    
    var maximum: gfloat
        get() = memberAt<gfloatVar>(76).value
        set(value) { memberAt<gfloatVar>(76).value = value }
    
    var default_value: gfloat
        get() = memberAt<gfloatVar>(80).value
        set(value) { memberAt<gfloatVar>(80).value = value }
    
    var epsilon: gfloat
        get() = memberAt<gfloatVar>(84).value
        set(value) { memberAt<gfloatVar>(84).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; double p1; double p2; double p3; double p4; }")
class _GParamSpecDouble(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(104, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
    
    var maximum: gdouble
        get() = memberAt<gdoubleVar>(80).value
        set(value) { memberAt<gdoubleVar>(80).value = value }
    
    var default_value: gdouble
        get() = memberAt<gdoubleVar>(88).value
        set(value) { memberAt<gdoubleVar>(88).value = value }
    
    var epsilon: gdouble
        get() = memberAt<gdoubleVar>(96).value
        set(value) { memberAt<gdoubleVar>(96).value = value }
}

class _GParamSpecString(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(104, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var default_value: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(72).value
        set(value) { memberAt<CPointerVar<gcharVar>>(72).value = value }
    
    var cset_first: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(80).value
        set(value) { memberAt<CPointerVar<gcharVar>>(80).value = value }
    
    var cset_nth: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(88).value
        set(value) { memberAt<CPointerVar<gcharVar>>(88).value = value }
    
    var substitutor: gchar
        get() = memberAt<gcharVar>(96).value
        set(value) { memberAt<gcharVar>(96).value = value }
    
    var null_fold_if_empty: guint
        get() = readBits(this.rawPtr, 776, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 776, 1, value.toLong()) }
    
    var ensure_non_null: guint
        get() = readBits(this.rawPtr, 777, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 777, 1, value.toLong()) }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecParam(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecBoxed(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecPointer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; unsigned int p2; }")
class _GParamSpecValueArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var element_spec: CPointer<GParamSpec>?
        get() = memberAt<CPointerVar<GParamSpec>>(72).value
        set(value) { memberAt<CPointerVar<GParamSpec>>(72).value = value }
    
    var fixed_n_elements: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecObject(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; }")
class _GParamSpecOverride(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var overridden: CPointer<GParamSpec>?
        get() = memberAt<CPointerVar<GParamSpec>>(72).value
        set(value) { memberAt<CPointerVar<GParamSpec>>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned long p1; }")
class _GParamSpecGType(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var is_a_type: GType
        get() = memberAt<GTypeVar>(72).value
        set(value) { memberAt<GTypeVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; void* p2; void* p3[4]; }")
class _GParamSpecVariant(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(120, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var type: CPointer<GVariantType>?
        get() = memberAt<CPointerVar<GVariantType>>(72).value
        set(value) { memberAt<CPointerVar<GVariantType>>(72).value = value }
    
    var default_value: CPointer<GVariant>?
        get() = memberAt<CPointerVar<GVariant>>(80).value
        set(value) { memberAt<CPointerVar<GVariant>>(80).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(88)
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; unsigned int p1; void* p2; void* p3; void* p4; }")
class _GTypeModule(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var use_count: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var type_infos: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(32).value
        set(value) { memberAt<CPointerVar<GSList>>(32).value = value }
    
    var interface_infos: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(40).value
        set(value) { memberAt<CPointerVar<GSList>>(40).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(48).value
        set(value) { memberAt<CPointerVar<gcharVar>>(48).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GTypeModuleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var load: CPointer<CFunction<(CPointer<GTypeModule>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> gboolean>>>(136).value = value }
    
    var unload: CPointer<CFunction<(CPointer<GTypeModule>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> Unit>>>(144).value = value }
    
    var reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GTypePluginClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
    
    var use_plugin: GTypePluginUse?
        get() = memberAt<GTypePluginUseVar>(16).value
        set(value) { memberAt<GTypePluginUseVar>(16).value = value }
    
    var unuse_plugin: GTypePluginUnuse?
        get() = memberAt<GTypePluginUnuseVar>(24).value
        set(value) { memberAt<GTypePluginUnuseVar>(24).value = value }
    
    var complete_type_info: GTypePluginCompleteTypeInfo?
        get() = memberAt<GTypePluginCompleteTypeInfoVar>(32).value
        set(value) { memberAt<GTypePluginCompleteTypeInfoVar>(32).value = value }
    
    var complete_interface_info: GTypePluginCompleteInterfaceInfo?
        get() = memberAt<GTypePluginCompleteInterfaceInfoVar>(40).value
        set(value) { memberAt<GTypePluginCompleteInterfaceInfoVar>(40).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; unsigned int p2; }")
class _GValueArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var n_values: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var values: CPointer<GValue>?
        get() = memberAt<CPointerVar<GValue>>(8).value
        set(value) { memberAt<CPointerVar<GValue>>(8).value = value }
    
    var n_prealloced: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GAppLaunchContext(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GAppLaunchContextPrivate>?
        get() = memberAt<CPointerVar<GAppLaunchContextPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GAppLaunchContextPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GBufferedInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GBufferedInputStreamPrivate>?
        get() = memberAt<CPointerVar<GBufferedInputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GBufferedInputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFilterInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInputStream
        get() = memberAt(0)
    
    var base_stream: CPointer<GInputStream>?
        get() = memberAt<CPointerVar<GInputStream>>(32).value
        set(value) { memberAt<CPointerVar<GInputStream>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GInputStreamPrivate>?
        get() = memberAt<CPointerVar<GInputStreamPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInputStreamPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GBufferedOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GBufferedOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GBufferedOutputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GBufferedOutputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFilterOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GOutputStream
        get() = memberAt(0)
    
    var base_stream: CPointer<GOutputStream>?
        get() = memberAt<CPointerVar<GOutputStream>>(32).value
        set(value) { memberAt<CPointerVar<GOutputStream>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GOutputStreamPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GOutputStreamPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GCancellable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GCancellablePrivate>?
        get() = memberAt<CPointerVar<GCancellablePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GCancellablePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GConverterInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GConverterInputStreamPrivate>?
        get() = memberAt<CPointerVar<GConverterInputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GConverterInputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GConverterOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GConverterOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GConverterOutputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GConverterOutputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GDataInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GBufferedInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GDataInputStreamPrivate>?
        get() = memberAt<CPointerVar<GDataInputStreamPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GDataInputStreamPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSimpleActionGroup(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSimpleActionGroupPrivate>?
        get() = memberAt<CPointerVar<GSimpleActionGroupPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSimpleActionGroupPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GApplication(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GApplicationPrivate>?
        get() = memberAt<CPointerVar<GApplicationPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GApplicationPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GApplicationCommandLine(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GApplicationCommandLinePrivate>?
        get() = memberAt<CPointerVar<GApplicationCommandLinePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GApplicationCommandLinePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSettings(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSettingsPrivate>?
        get() = memberAt<CPointerVar<GSettingsPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSettingsPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GPermission(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GPermissionPrivate>?
        get() = memberAt<CPointerVar<GPermissionPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GPermissionPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMenuModel(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMenuModelPrivate>?
        get() = memberAt<CPointerVar<GMenuModelPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMenuModelPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GFileEnumerator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GFileEnumeratorPrivate>?
        get() = memberAt<CPointerVar<GFileEnumeratorPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GFileEnumeratorPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GFileMonitor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GFileMonitorPrivate>?
        get() = memberAt<CPointerVar<GFileMonitorPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GFileMonitorPrivate>>(24).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; unsigned int p2; }")
class _GFileAttributeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var type: GFileAttributeType
        get() = memberAt<GFileAttributeTypeVar>(8).value
        set(value) { memberAt<GFileAttributeTypeVar>(8).value = value }
    
    var flags: GFileAttributeInfoFlags
        get() = memberAt<GFileAttributeInfoFlagsVar>(12).value
        set(value) { memberAt<GFileAttributeInfoFlagsVar>(12).value = value }
}

@CStruct("struct { void* p0; int p1; }")
class _GFileAttributeInfoList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var infos: CPointer<GFileAttributeInfo>?
        get() = memberAt<CPointerVar<GFileAttributeInfo>>(0).value
        set(value) { memberAt<CPointerVar<GFileAttributeInfo>>(0).value = value }
    
    var n_infos: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFileInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GFileInputStreamPrivate>?
        get() = memberAt<CPointerVar<GFileInputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GFileInputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFileOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GFileOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GFileOutputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GFileOutputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFileIOStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GIOStream
        get() = memberAt(0)
    
    var priv: CPointer<GFileIOStreamPrivate>?
        get() = memberAt<CPointerVar<GFileIOStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GFileIOStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GIOStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GIOStreamPrivate>?
        get() = memberAt<CPointerVar<GIOStreamPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GIOStreamPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GInetAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GInetAddressPrivate>?
        get() = memberAt<CPointerVar<GInetAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInetAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GInetAddressMask(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GInetAddressMaskPrivate>?
        get() = memberAt<CPointerVar<GInetAddressMaskPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInetAddressMaskPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GInetSocketAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GSocketAddress
        get() = memberAt(0)
    
    var priv: CPointer<GInetSocketAddressPrivate>?
        get() = memberAt<CPointerVar<GInetSocketAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInetSocketAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GSocketAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GNativeSocketAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GSocketAddress
        get() = memberAt(0)
    
    var priv: CPointer<GNativeSocketAddressPrivate>?
        get() = memberAt<CPointerVar<GNativeSocketAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GNativeSocketAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GMemoryInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GMemoryInputStreamPrivate>?
        get() = memberAt<CPointerVar<GMemoryInputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GMemoryInputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GMemoryOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GMemoryOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GMemoryOutputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GMemoryOutputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMountOperation(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMountOperationPrivate>?
        get() = memberAt<CPointerVar<GMountOperationPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMountOperationPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GNetworkAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GNetworkAddressPrivate>?
        get() = memberAt<CPointerVar<GNetworkAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GNetworkAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GNetworkService(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GNetworkServicePrivate>?
        get() = memberAt<CPointerVar<GNetworkServicePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GNetworkServicePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GResolver(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GResolverPrivate>?
        get() = memberAt<CPointerVar<GResolverPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GResolverPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocket(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketPrivate>?
        get() = memberAt<CPointerVar<GSocketPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocketControlMessage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketControlMessagePrivate>?
        get() = memberAt<CPointerVar<GSocketControlMessagePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketControlMessagePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocketClient(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketClientPrivate>?
        get() = memberAt<CPointerVar<GSocketClientPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketClientPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GSocketConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GIOStream
        get() = memberAt(0)
    
    var priv: CPointer<GSocketConnectionPrivate>?
        get() = memberAt<CPointerVar<GSocketConnectionPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GSocketConnectionPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocketListener(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketListenerPrivate>?
        get() = memberAt<CPointerVar<GSocketListenerPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketListenerPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GSocketService(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GSocketListener
        get() = memberAt(0)
    
    var priv: CPointer<GSocketServicePrivate>?
        get() = memberAt<CPointerVar<GSocketServicePrivate>>(32).value
        set(value) { memberAt<CPointerVar<GSocketServicePrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GSocketAddressEnumerator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GTcpConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GSocketConnection
        get() = memberAt(0)
    
    var priv: CPointer<GTcpConnectionPrivate>?
        get() = memberAt<CPointerVar<GTcpConnectionPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GTcpConnectionPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GTcpWrapperConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GTcpConnection
        get() = memberAt(0)
    
    var priv: CPointer<GTcpWrapperConnectionPrivate>?
        get() = memberAt<CPointerVar<GTcpWrapperConnectionPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GTcpWrapperConnectionPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GThreadedSocketService(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GSocketService
        get() = memberAt(0)
    
    var priv: CPointer<GThreadedSocketServicePrivate>?
        get() = memberAt<CPointerVar<GThreadedSocketServicePrivate>>(40).value
        set(value) { memberAt<CPointerVar<GThreadedSocketServicePrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsCertificate(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsCertificatePrivate>?
        get() = memberAt<CPointerVar<GTlsCertificatePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsCertificatePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GTlsConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GIOStream
        get() = memberAt(0)
    
    var priv: CPointer<GTlsConnectionPrivate>?
        get() = memberAt<CPointerVar<GTlsConnectionPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GTlsConnectionPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsDatabase(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsDatabasePrivate>?
        get() = memberAt<CPointerVar<GTlsDatabasePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsDatabasePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsInteraction(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsInteractionPrivate>?
        get() = memberAt<CPointerVar<GTlsInteractionPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsInteractionPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsPassword(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsPasswordPrivate>?
        get() = memberAt<CPointerVar<GTlsPasswordPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsPasswordPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GVfs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; } p0; void* p1; }")
class _GProxyAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInetSocketAddress
        get() = memberAt(0)
    
    var priv: CPointer<GProxyAddressPrivate>?
        get() = memberAt<CPointerVar<GProxyAddressPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GProxyAddressPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GProxyAddressEnumerator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GSocketAddressEnumerator
        get() = memberAt(0)
    
    var priv: CPointer<GProxyAddressEnumeratorPrivate>?
        get() = memberAt<CPointerVar<GProxyAddressEnumeratorPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GProxyAddressEnumeratorPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GVolumeMonitor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; }")
class _GInputVector(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var buffer: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var size: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; unsigned long p3; int p4; void* p5; void* p6; }")
class _GInputMessage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var address: CPointer<CPointerVar<GSocketAddress>>?
        get() = memberAt<CPointerVar<CPointerVar<GSocketAddress>>>(0).value
        set(value) { memberAt<CPointerVar<CPointerVar<GSocketAddress>>>(0).value = value }
    
    var vectors: CPointer<GInputVector>?
        get() = memberAt<CPointerVar<GInputVector>>(8).value
        set(value) { memberAt<CPointerVar<GInputVector>>(8).value = value }
    
    var num_vectors: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var bytes_received: gsize
        get() = memberAt<gsizeVar>(24).value
        set(value) { memberAt<gsizeVar>(24).value = value }
    
    var flags: gint
        get() = memberAt<gintVar>(32).value
        set(value) { memberAt<gintVar>(32).value = value }
    
    var control_messages: CPointer<CPointerVar<CPointerVar<GSocketControlMessage>>>?
        get() = memberAt<CPointerVar<CPointerVar<CPointerVar<GSocketControlMessage>>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<CPointerVar<GSocketControlMessage>>>>(40).value = value }
    
    var num_control_messages: CPointer<guintVar>?
        get() = memberAt<CPointerVar<guintVar>>(48).value
        set(value) { memberAt<CPointerVar<guintVar>>(48).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; }")
class _GOutputVector(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var buffer: gconstpointer?
        get() = memberAt<gconstpointerVar>(0).value
        set(value) { memberAt<gconstpointerVar>(0).value = value }
    
    var size: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; unsigned int p3; void* p4; unsigned int p5; }")
class _GOutputMessage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var address: CPointer<GSocketAddress>?
        get() = memberAt<CPointerVar<GSocketAddress>>(0).value
        set(value) { memberAt<CPointerVar<GSocketAddress>>(0).value = value }
    
    var vectors: CPointer<GOutputVector>?
        get() = memberAt<CPointerVar<GOutputVector>>(8).value
        set(value) { memberAt<CPointerVar<GOutputVector>>(8).value = value }
    
    var num_vectors: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var bytes_sent: guint
        get() = memberAt<guintVar>(20).value
        set(value) { memberAt<guintVar>(20).value = value }
    
    var control_messages: CPointer<CPointerVar<GSocketControlMessage>>?
        get() = memberAt<CPointerVar<CPointerVar<GSocketControlMessage>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GSocketControlMessage>>>(24).value = value }
    
    var num_control_messages: guint
        get() = memberAt<guintVar>(32).value
        set(value) { memberAt<guintVar>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusProxy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusProxyPrivate>?
        get() = memberAt<CPointerVar<GDBusProxyPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusProxyPrivate>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; }")
class _GDBusErrorEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var error_code: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var dbus_error_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3[8]; }")
class _GDBusInterfaceVTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    var method_call: GDBusInterfaceMethodCallFunc?
        get() = memberAt<GDBusInterfaceMethodCallFuncVar>(0).value
        set(value) { memberAt<GDBusInterfaceMethodCallFuncVar>(0).value = value }
    
    var get_property: GDBusInterfaceGetPropertyFunc?
        get() = memberAt<GDBusInterfaceGetPropertyFuncVar>(8).value
        set(value) { memberAt<GDBusInterfaceGetPropertyFuncVar>(8).value = value }
    
    var set_property: GDBusInterfaceSetPropertyFunc?
        get() = memberAt<GDBusInterfaceSetPropertyFuncVar>(16).value
        set(value) { memberAt<GDBusInterfaceSetPropertyFuncVar>(16).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(24)
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3[8]; }")
class _GDBusSubtreeVTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    var enumerate: GDBusSubtreeEnumerateFunc?
        get() = memberAt<GDBusSubtreeEnumerateFuncVar>(0).value
        set(value) { memberAt<GDBusSubtreeEnumerateFuncVar>(0).value = value }
    
    var introspect: GDBusSubtreeIntrospectFunc?
        get() = memberAt<GDBusSubtreeIntrospectFuncVar>(8).value
        set(value) { memberAt<GDBusSubtreeIntrospectFuncVar>(8).value = value }
    
    var dispatch: GDBusSubtreeDispatchFunc?
        get() = memberAt<GDBusSubtreeDispatchFuncVar>(16).value
        set(value) { memberAt<GDBusSubtreeDispatchFuncVar>(16).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(24)
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDBusInterfaceInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var methods: CPointer<CPointerVar<GDBusMethodInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusMethodInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusMethodInfo>>>(16).value = value }
    
    var signals: CPointer<CPointerVar<GDBusSignalInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusSignalInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusSignalInfo>>>(24).value = value }
    
    var properties: CPointer<CPointerVar<GDBusPropertyInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusPropertyInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusPropertyInfo>>>(32).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(40).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; void* p4; }")
class _GDBusMethodInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var in_args: CPointer<CPointerVar<GDBusArgInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value = value }
    
    var out_args: CPointer<CPointerVar<GDBusArgInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(24).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GDBusArgInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var signature: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GDBusAnnotationInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var key: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var value: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GDBusSignalInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var args: CPointer<CPointerVar<GDBusArgInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; unsigned int p3; void* p4; }")
class _GDBusPropertyInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var signature: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var flags: GDBusPropertyInfoFlags
        get() = memberAt<GDBusPropertyInfoFlagsVar>(24).value
        set(value) { memberAt<GDBusPropertyInfoFlagsVar>(24).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; void* p4; }")
class _GDBusNodeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var path: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var interfaces: CPointer<CPointerVar<GDBusInterfaceInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusInterfaceInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusInterfaceInfo>>>(16).value = value }
    
    var nodes: CPointer<CPointerVar<GDBusNodeInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusNodeInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusNodeInfo>>>(24).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusInterfaceSkeleton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusInterfaceSkeletonPrivate>?
        get() = memberAt<CPointerVar<GDBusInterfaceSkeletonPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusInterfaceSkeletonPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectSkeleton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectSkeletonPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectSkeletonPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectSkeletonPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectProxy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectProxyPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectProxyPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectProxyPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectManagerClient(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectManagerClientPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectManagerClientPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectManagerClientPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectManagerServer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectManagerServerPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectManagerServerPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectManagerServerPrivate>>(24).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GActionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_name: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var get_parameter_type: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(24).value = value }
    
    var get_state_type: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(32).value = value }
    
    var get_state_hint: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(40).value = value }
    
    var get_enabled: CPointer<CFunction<(CPointer<GAction>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> gboolean>>>(48).value = value }
    
    var get_state: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(56).value = value }
    
    var change_state: CPointer<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(64).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(72).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GActionGroupInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var has_action: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(16).value = value }
    
    var list_actions: CPointer<CFunction<(CPointer<GActionGroup>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value = value }
    
    var get_action_enabled: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(32).value = value }
    
    var get_action_parameter_type: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(40).value = value }
    
    var get_action_state_type: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(48).value = value }
    
    var get_action_state_hint: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(56).value = value }
    
    var get_action_state: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(64).value = value }
    
    var change_action_state: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(72).value = value }
    
    var activate_action: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(80).value = value }
    
    var action_added: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(88).value = value }
    
    var action_removed: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(96).value = value }
    
    var action_enabled_changed: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, gboolean) -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, gboolean) -> Unit>>>(104).value = value }
    
    var action_state_changed: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(112).value = value }
    
    var query_action: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<gbooleanVar>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariant>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<gbooleanVar>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariant>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<gbooleanVar>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariant>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(120).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GActionMapInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var lookup_action: CPointer<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> CPointer<GAction>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> CPointer<GAction>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> CPointer<GAction>?>>>(16).value = value }
    
    var add_action: CPointer<CFunction<(CPointer<GActionMap>?, CPointer<GAction>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<GAction>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<GAction>?) -> Unit>>>(24).value = value }
    
    var remove_action: CPointer<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> Unit>>>(32).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; unsigned long p5[3]; }")
class _GActionEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(8).value = value }
    
    var parameter_type: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var state: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var change_state: CPointer<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(32).value = value }
    
    val padding: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(40)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GAppLaunchContextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_display: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(136).value = value }
    
    var get_startup_notify_id: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(144).value = value }
    
    var launch_failed: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<ByteVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<ByteVar>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<ByteVar>?) -> Unit>>>(152).value = value }
    
    var launched: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GVariant>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GVariant>?) -> Unit>>>(160).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; }")
class _GAppInfoIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var dup: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<GAppInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GAppInfo>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GAppInfo>?>>>(16).value = value }
    
    var equal: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAppInfo>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAppInfo>?) -> gboolean>>>(24).value = value }
    
    var get_id: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(32).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(40).value = value }
    
    var get_description: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(48).value = value }
    
    var get_executable: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(56).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GIcon>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GIcon>?>>>(64).value = value }
    
    var launch: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(72).value = value }
    
    var supports_uris: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(80).value = value }
    
    var supports_files: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(88).value = value }
    
    var launch_uris: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value = value }
    
    var should_show: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(104).value = value }
    
    var set_as_default_for_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value = value }
    
    var set_as_default_for_extension: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value = value }
    
    var add_supports_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(128).value = value }
    
    var can_remove_supports_type: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(136).value = value }
    
    var remove_supports_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value = value }
    
    var can_delete: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(152).value = value }
    
    var do_delete: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(160).value = value }
    
    var get_commandline: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(168).value = value }
    
    var get_display_name: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(176).value = value }
    
    var set_as_last_used_for_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value = value }
    
    var get_supported_types: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<CPointerVar<ByteVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<CPointerVar<ByteVar>>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<CPointerVar<ByteVar>>?>>>(192).value = value }
    
    var launch_uris_async: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var launch_uris_finish: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16[7]; }")
class _GApplicationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var startup: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(136).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(144).value = value }
    
    var open: CPointer<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<GFile>>?, gint, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<GFile>>?, gint, CPointer<gcharVar>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<GFile>>?, gint, CPointer<gcharVar>?) -> Unit>>>(152).value = value }
    
    var command_line: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GApplicationCommandLine>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GApplicationCommandLine>?) -> Int>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GApplicationCommandLine>?) -> Int>>>(160).value = value }
    
    var local_command_line: CPointer<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?, CPointer<IntVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?, CPointer<IntVar>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?, CPointer<IntVar>?) -> gboolean>>>(168).value = value }
    
    var before_emit: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(176).value = value }
    
    var after_emit: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(184).value = value }
    
    var add_platform_data: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariantBuilder>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantBuilder>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantBuilder>?) -> Unit>>>(192).value = value }
    
    var quit_mainloop: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(200).value = value }
    
    var run_mainloop: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(208).value = value }
    
    var shutdown: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(216).value = value }
    
    var dbus_register: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value = value }
    
    var dbus_unregister: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?) -> Unit>>>(232).value = value }
    
    var handle_local_options: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariantDict>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantDict>?) -> gint>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantDict>?) -> gint>>>(240).value = value }
    
    var name_lost: CPointer<CFunction<(CPointer<GApplication>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> gboolean>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> gboolean>>>(248).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(256)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4[11]; }")
class _GApplicationCommandLineClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var print_literal: CPointer<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(136).value = value }
    
    var printerr_literal: CPointer<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(144).value = value }
    
    var get_stdin: CPointer<CFunction<(CPointer<GApplicationCommandLine>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?) -> CPointer<GInputStream>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?) -> CPointer<GInputStream>?>>>(152).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(160)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; }")
class _GInitableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var init: CPointer<CFunction<(CPointer<GInitable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInitable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInitable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GAsyncInitableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var init_async: CPointer<CFunction<(CPointer<GAsyncInitable>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(16).value = value }
    
    var init_finish: CPointer<CFunction<(CPointer<GAsyncInitable>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GAsyncResultIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_user_data: CPointer<CFunction<(CPointer<GAsyncResult>?) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> gpointer?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> gpointer?>>>(16).value = value }
    
    var get_source_object: CPointer<CFunction<(CPointer<GAsyncResult>?) -> CPointer<GObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> CPointer<GObject>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> CPointer<GObject>?>>>(24).value = value }
    
    var is_tagged: CPointer<CFunction<(CPointer<GAsyncResult>?, gpointer?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?, gpointer?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?, gpointer?) -> gboolean>>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var read_fn: CPointer<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value = value }
    
    var skip: CPointer<CFunction<(CPointer<GInputStream>?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var read_async: CPointer<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value = value }
    
    var read_finish: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(168).value = value }
    
    var skip_async: CPointer<CFunction<(CPointer<GInputStream>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var skip_finish: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(184).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GInputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; }")
class _GFilterInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val parent_class: GInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GBufferedInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GFilterInputStreamClass
        get() = memberAt(0)
    
    var fill: CPointer<CFunction<(CPointer<GBufferedInputStream>?, gssize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(272).value = value }
    
    var fill_async: CPointer<CFunction<(CPointer<GBufferedInputStream>?, gssize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value = value }
    
    var fill_finish: CPointer<CFunction<(CPointer<GBufferedInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(288).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; }")
class _GOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var write_fn: CPointer<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value = value }
    
    var splice: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value = value }
    
    var flush: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value = value }
    
    var write_async: CPointer<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var write_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(176).value = value }
    
    var splice_async: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value = value }
    
    var splice_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(192).value = value }
    
    var flush_async: CPointer<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var flush_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value = value }
    
    var writev_fn: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(232).value = value }
    
    var writev_async: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value = value }
    
    var writev_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(248).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; }")
class _GFilterOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(320, 8)
    
    val parent_class: GOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; }")
class _GBufferedOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GFilterOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GCancellableClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var cancelled: CPointer<CFunction<(CPointer<GCancellable>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCancellable>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCancellable>?) -> Unit>>>(136).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GConverterIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var convert: CPointer<CFunction<(CPointer<GConverter>?, COpaquePointer?, gsize, COpaquePointer?, gsize, GConverterFlags, CPointer<gsizeVar>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GConverterResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GConverter>?, COpaquePointer?, gsize, COpaquePointer?, gsize, GConverterFlags, CPointer<gsizeVar>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GConverterResult>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GConverter>?, COpaquePointer?, gsize, COpaquePointer?, gsize, GConverterFlags, CPointer<gsizeVar>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GConverterResult>>>(16).value = value }
    
    var reset: CPointer<CFunction<(CPointer<GConverter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GConverter>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GConverter>?) -> Unit>>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GCharsetConverterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GConverterInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GFilterInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GConverterOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(360, 8)
    
    val parent_class: GFilterOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDatagramBasedInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var receive_messages: CPointer<CFunction<(CPointer<GDatagramBased>?, CPointer<GInputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GInputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GInputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(16).value = value }
    
    var send_messages: CPointer<CFunction<(CPointer<GDatagramBased>?, CPointer<GOutputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GOutputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GOutputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(24).value = value }
    
    var create_source: CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition, CPointer<GCancellable>?) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value = value }
    
    var condition_check: CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition) -> GIOCondition>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition) -> GIOCondition>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition) -> GIOCondition>>>(40).value = value }
    
    var condition_wait: CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDataInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(376, 8)
    
    val parent_class: GBufferedInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GDataOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GDataOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GDataOutputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GDataOutputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDataOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(360, 8)
    
    val parent_class: GFilterOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3[32]; }")
class _GDBusProxyClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(408, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var g_properties_changed: CPointer<CFunction<(CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(136).value = value }
    
    var g_signal: CPointer<CFunction<(CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(144).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(152)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; }")
class _GDriveIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(16).value = value }
    
    var disconnected: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(24).value = value }
    
    var eject_button: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(32).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<ByteVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<ByteVar>?>>>(40).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(48).value = value }
    
    var has_volumes: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(56).value = value }
    
    var get_volumes: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GList>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GList>?>>>(64).value = value }
    
    var is_media_removable: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(72).value = value }
    
    var has_media: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(80).value = value }
    
    var is_media_check_automatic: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(88).value = value }
    
    var can_eject: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(96).value = value }
    
    var can_poll_for_media: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(104).value = value }
    
    var eject: CPointer<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value = value }
    
    var eject_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value = value }
    
    var poll_for_media: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value = value }
    
    var poll_for_media_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value = value }
    
    var get_identifier: CPointer<CFunction<(CPointer<GDrive>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(144).value = value }
    
    var enumerate_identifiers: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<CPointerVar<ByteVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<CPointerVar<ByteVar>>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<CPointerVar<ByteVar>>?>>>(152).value = value }
    
    var get_start_stop_type: CPointer<CFunction<(CPointer<GDrive>?) -> GDriveStartStopType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> GDriveStartStopType>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> GDriveStartStopType>>>(160).value = value }
    
    var can_start: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(168).value = value }
    
    var can_start_degraded: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(176).value = value }
    
    var start: CPointer<CFunction<(CPointer<GDrive>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value = value }
    
    var start_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value = value }
    
    var can_stop: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(200).value = value }
    
    var stop: CPointer<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(208).value = value }
    
    var stop_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(216).value = value }
    
    var stop_button: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(224).value = value }
    
    var eject_with_operation: CPointer<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(232).value = value }
    
    var eject_with_operation_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(240).value = value }
    
    var get_sort_key: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<gcharVar>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<gcharVar>?>>>(248).value = value }
    
    var get_symbolic_icon: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(256).value = value }
    
    var is_removable: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(264).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GDtlsConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var accept_certificate: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(16).value = value }
    
    var handshake: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value = value }
    
    var handshake_async: CPointer<CFunction<(CPointer<GDtlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value = value }
    
    var handshake_finish: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value = value }
    
    var shutdown: CPointer<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value = value }
    
    var shutdown_async: CPointer<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(56).value = value }
    
    var shutdown_finish: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(64).value = value }
    
    var set_advertised_protocols: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(72).value = value }
    
    var get_negotiated_protocol: CPointer<CFunction<(CPointer<GDtlsConnection>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?) -> CPointer<gcharVar>?>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?) -> CPointer<gcharVar>?>>>(80).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GDtlsClientConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GDtlsServerConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GIconIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var hash: CPointer<CFunction<(CPointer<GIcon>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> guint>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> guint>>>(16).value = value }
    
    var equal: CPointer<CFunction<(CPointer<GIcon>?, CPointer<GIcon>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GIcon>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GIcon>?) -> gboolean>>>(24).value = value }
    
    var to_tokens: CPointer<CFunction<(CPointer<GIcon>?, CPointer<GPtrArray>?, CPointer<gintVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GPtrArray>?, CPointer<gintVar>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GPtrArray>?, CPointer<gintVar>?) -> gboolean>>>(32).value = value }
    
    var from_tokens: CPointer<CFunction<(CPointer<CPointerVar<gcharVar>>?, gint, gint, CPointer<CPointerVar<GError>>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<CPointerVar<gcharVar>>?, gint, gint, CPointer<CPointerVar<GError>>?) -> CPointer<GIcon>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<CPointerVar<gcharVar>>?, gint, gint, CPointer<CPointerVar<GError>>?) -> CPointer<GIcon>?>>>(40).value = value }
    
    var serialize: CPointer<CFunction<(CPointer<GIcon>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> CPointer<GVariant>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> CPointer<GVariant>?>>>(48).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GEmblemedIcon(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GEmblemedIconPrivate>?
        get() = memberAt<CPointerVar<GEmblemedIconPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GEmblemedIconPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GEmblemedIconClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; }")
class _GFileEnumeratorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(240, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var next_file: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(136).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value = value }
    
    var next_files_async: CPointer<CFunction<(CPointer<GFileEnumerator>?, Int, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var next_files_finish: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GFileEnumerator>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; void* p87; void* p88; void* p89; void* p90; void* p91; void* p92; void* p93; int p94; void* p95; void* p96; void* p97; void* p98; void* p99; void* p100; void* p101; void* p102; void* p103; }")
class _GFileIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(840, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var dup: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(16).value = value }
    
    var hash: CPointer<CFunction<(CPointer<GFile>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> guint>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> guint>>>(24).value = value }
    
    var equal: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(32).value = value }
    
    var is_native: CPointer<CFunction<(CPointer<GFile>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> gboolean>>>(40).value = value }
    
    var has_uri_scheme: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> gboolean>>>(48).value = value }
    
    var get_uri_scheme: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(56).value = value }
    
    var get_basename: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(64).value = value }
    
    var get_path: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(72).value = value }
    
    var get_uri: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(80).value = value }
    
    var get_parse_name: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(88).value = value }
    
    var get_parent: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(96).value = value }
    
    var prefix_matches: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(104).value = value }
    
    var get_relative_path: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> CPointer<ByteVar>?>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> CPointer<ByteVar>?>>>(112).value = value }
    
    var resolve_relative_path: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(120).value = value }
    
    var get_child_for_display_name: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(128).value = value }
    
    var enumerate_children: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(136).value = value }
    
    var enumerate_children_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var enumerate_children_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(152).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(160).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(176).value = value }
    
    var query_filesystem_info: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(184).value = value }
    
    var query_filesystem_info_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value = value }
    
    var query_filesystem_info_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(200).value = value }
    
    var find_enclosing_mount: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(208).value = value }
    
    var find_enclosing_mount_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value = value }
    
    var find_enclosing_mount_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(224).value = value }
    
    var set_display_name: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(232).value = value }
    
    var set_display_name_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value = value }
    
    var set_display_name_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(248).value = value }
    
    var query_settable_attributes: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(256).value = value }
    
    var _query_settable_attributes_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _query_settable_attributes_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var query_writable_namespaces: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(280).value = value }
    
    var _query_writable_namespaces_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _query_writable_namespaces_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var set_attribute: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileAttributeType, gpointer?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileAttributeType, gpointer?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileAttributeType, gpointer?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(304).value = value }
    
    var set_attributes_from_info: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value = value }
    
    var set_attributes_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(320).value = value }
    
    var set_attributes_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GFileInfo>>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GFileInfo>>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GFileInfo>>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value = value }
    
    var read_fn: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(336).value = value }
    
    var read_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value = value }
    
    var read_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(352).value = value }
    
    var append_to: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(360).value = value }
    
    var append_to_async: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(368).value = value }
    
    var append_to_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(376).value = value }
    
    var create: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(384).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(384).value = value }
    
    var create_async: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(392).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(392).value = value }
    
    var create_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(400).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(400).value = value }
    
    var replace: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(408).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(408).value = value }
    
    var replace_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(416).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(416).value = value }
    
    var replace_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(424).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(424).value = value }
    
    var delete_file: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(432).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(432).value = value }
    
    var delete_file_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(440).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(440).value = value }
    
    var delete_file_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(448).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(448).value = value }
    
    var trash: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(456).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(456).value = value }
    
    var trash_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(464).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(464).value = value }
    
    var trash_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(472).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(472).value = value }
    
    var make_directory: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(480).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(480).value = value }
    
    var make_directory_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(488).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(488).value = value }
    
    var make_directory_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(496).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(496).value = value }
    
    var make_symbolic_link: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(504).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(504).value = value }
    
    var _make_symbolic_link_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(512).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(512).value = value }
    
    var _make_symbolic_link_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(520).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(520).value = value }
    
    var copy: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(528).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(528).value = value }
    
    var copy_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, Int, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, Int, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(536).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, Int, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(536).value = value }
    
    var copy_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(544).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(544).value = value }
    
    var move: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(552).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(552).value = value }
    
    var _move_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(560).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(560).value = value }
    
    var _move_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(568).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(568).value = value }
    
    var mount_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(576).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(576).value = value }
    
    var mount_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(584).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(584).value = value }
    
    var unmount_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(592).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(592).value = value }
    
    var unmount_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(600).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(600).value = value }
    
    var eject_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(608).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(608).value = value }
    
    var eject_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(616).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(616).value = value }
    
    var mount_enclosing_volume: CPointer<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(624).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(624).value = value }
    
    var mount_enclosing_volume_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(632).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(632).value = value }
    
    var monitor_dir: CPointer<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(640).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(640).value = value }
    
    var monitor_file: CPointer<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(648).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(648).value = value }
    
    var open_readwrite: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(656).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(656).value = value }
    
    var open_readwrite_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(664).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(664).value = value }
    
    var open_readwrite_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(672).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(672).value = value }
    
    var create_readwrite: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(680).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(680).value = value }
    
    var create_readwrite_async: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(688).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(688).value = value }
    
    var create_readwrite_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(696).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(696).value = value }
    
    var replace_readwrite: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(704).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(704).value = value }
    
    var replace_readwrite_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(712).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(712).value = value }
    
    var replace_readwrite_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(720).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(720).value = value }
    
    var start_mountable: CPointer<CFunction<(CPointer<GFile>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(728).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(728).value = value }
    
    var start_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(736).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(736).value = value }
    
    var stop_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(744).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(744).value = value }
    
    var stop_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(752).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(752).value = value }
    
    var supports_thread_contexts: gboolean
        get() = memberAt<gbooleanVar>(760).value
        set(value) { memberAt<gbooleanVar>(760).value = value }
    
    var unmount_mountable_with_operation: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(768).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(768).value = value }
    
    var unmount_mountable_with_operation_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(776).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(776).value = value }
    
    var eject_mountable_with_operation: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(784).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(784).value = value }
    
    var eject_mountable_with_operation_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(792).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(792).value = value }
    
    var poll_mountable: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(800).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(800).value = value }
    
    var poll_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(808).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(808).value = value }
    
    var measure_disk_usage: CPointer<CFunction<(CPointer<GFile>?, GFileMeasureFlags, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(816).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(816).value = value }
    
    var measure_disk_usage_async: CPointer<CFunction<(CPointer<GFile>?, GFileMeasureFlags, gint, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, gint, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, gint, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(824).value = value }
    
    var measure_disk_usage_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(832).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; }")
class _GFileInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GInputStreamClass
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GFileInputStream>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> goffset>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> goffset>>>(248).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GFileInputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> gboolean>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> gboolean>>>(256).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GFileInputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(272).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFileInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(288).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; }")
class _GIOStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(256, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_input_stream: CPointer<CFunction<(CPointer<GIOStream>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GInputStream>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GInputStream>?>>>(136).value = value }
    
    var get_output_stream: CPointer<CFunction<(CPointer<GIOStream>?) -> CPointer<GOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GOutputStream>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GOutputStream>?>>>(144).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GIOStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GIOStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(168).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved9: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _g_reserved10: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GFileIOStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(368, 8)
    
    val parent_class: GIOStreamClass
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GFileIOStream>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> goffset>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> goffset>>>(256).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(264).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GFileIOStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(272).value = value }
    
    var can_truncate: CPointer<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(280).value = value }
    
    var truncate_fn: CPointer<CFunction<(CPointer<GFileIOStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(288).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(296).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(304).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFileIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(312).value = value }
    
    var get_etag: CPointer<CFunction<(CPointer<GFileIOStream>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> CPointer<ByteVar>?>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> CPointer<ByteVar>?>>>(320).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GFileMonitorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GFileMonitor>?, CPointer<GFile>?, CPointer<GFile>?, GFileMonitorEvent) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?, CPointer<GFile>?, CPointer<GFile>?, GFileMonitorEvent) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?, CPointer<GFile>?, CPointer<GFile>?, GFileMonitorEvent) -> Unit>>>(136).value = value }
    
    var cancel: CPointer<CFunction<(CPointer<GFileMonitor>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?) -> gboolean>>>(144).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GFilenameCompleterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var got_completion_data: CPointer<CFunction<(CPointer<GFilenameCompleter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFilenameCompleter>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFilenameCompleter>?) -> Unit>>>(136).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GFileOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(408, 8)
    
    val parent_class: GOutputStreamClass
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> goffset>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> goffset>>>(296).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(304).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GFileOutputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value = value }
    
    var can_truncate: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(320).value = value }
    
    var truncate_fn: CPointer<CFunction<(CPointer<GFileOutputStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(336).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFileOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(352).value = value }
    
    var get_etag: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> CPointer<ByteVar>?>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> CPointer<ByteVar>?>>>(360).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(384).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(384).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(392).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(392).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(400).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(400).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; }")
class _GInetAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(152, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var to_string: CPointer<CFunction<(CPointer<GInetAddress>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<gcharVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<gcharVar>?>>>(136).value = value }
    
    var to_bytes: CPointer<CFunction<(CPointer<GInetAddress>?) -> CPointer<guint8Var>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<guint8Var>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<guint8Var>?>>>(144).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GInetAddressMaskClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; }")
class _GSocketAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_family: CPointer<CFunction<(CPointer<GSocketAddress>?) -> GSocketFamily>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> GSocketFamily>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> GSocketFamily>>>(136).value = value }
    
    var get_native_size: CPointer<CFunction<(CPointer<GSocketAddress>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> gssize>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> gssize>>>(144).value = value }
    
    var to_native: CPointer<CFunction<(CPointer<GSocketAddress>?, gpointer?, gsize, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?, gpointer?, gsize, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?, gpointer?, gsize, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; }")
class _GInetSocketAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GSocketAddressClass
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GLoadableIconIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var load: CPointer<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<CPointerVar<ByteVar>>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<CPointerVar<ByteVar>>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<CPointerVar<ByteVar>>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(16).value = value }
    
    var load_async: CPointer<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value = value }
    
    var load_finish: CPointer<CFunction<(CPointer<GLoadableIcon>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GMemoryInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(288, 8)
    
    val parent_class: GInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GMemoryOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; }")
class _GMountIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(232, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(16).value = value }
    
    var unmounted: CPointer<CFunction<(CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(24).value = value }
    
    var get_root: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(32).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(40).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(48).value = value }
    
    var get_uuid: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(56).value = value }
    
    var get_volume: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GVolume>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GVolume>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GVolume>?>>>(64).value = value }
    
    var get_drive: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GDrive>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GDrive>?>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GDrive>?>>>(72).value = value }
    
    var can_unmount: CPointer<CFunction<(CPointer<GMount>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(80).value = value }
    
    var can_eject: CPointer<CFunction<(CPointer<GMount>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(88).value = value }
    
    var unmount: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(96).value = value }
    
    var unmount_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(104).value = value }
    
    var eject: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value = value }
    
    var eject_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value = value }
    
    var remount: CPointer<CFunction<(CPointer<GMount>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value = value }
    
    var remount_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value = value }
    
    var guess_content_type: CPointer<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var guess_content_type_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(152).value = value }
    
    var guess_content_type_sync: CPointer<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value = value }
    
    var pre_unmount: CPointer<CFunction<(CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(168).value = value }
    
    var unmount_with_operation: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var unmount_with_operation_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value = value }
    
    var eject_with_operation: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value = value }
    
    var eject_with_operation_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value = value }
    
    var get_default_location: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(208).value = value }
    
    var get_sort_key: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<gcharVar>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<gcharVar>?>>>(216).value = value }
    
    var get_symbolic_icon: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(224).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; }")
class _GMountOperationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(256, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var ask_password: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, GAskPasswordFlags) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, GAskPasswordFlags) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, GAskPasswordFlags) -> Unit>>>(136).value = value }
    
    var ask_question: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CArrayPointer<CPointerVar<ByteVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CArrayPointer<CPointerVar<ByteVar>>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CArrayPointer<CPointerVar<ByteVar>>?) -> Unit>>>(144).value = value }
    
    var reply: CPointer<CFunction<(CPointer<GMountOperation>?, GMountOperationResult) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, GMountOperationResult) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, GMountOperationResult) -> Unit>>>(152).value = value }
    
    var aborted: CPointer<CFunction<(CPointer<GMountOperation>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?) -> Unit>>>(160).value = value }
    
    var show_processes: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, CPointer<GArray>?, CArrayPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, CPointer<GArray>?, CArrayPointer<CPointerVar<gcharVar>>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, CPointer<GArray>?, CArrayPointer<CPointerVar<gcharVar>>?) -> Unit>>>(168).value = value }
    
    var show_unmount_progress: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, gint64, gint64) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, gint64, gint64) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, gint64, gint64) -> Unit>>>(176).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _g_reserved9: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; }")
class _GNativeSocketAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GSocketAddressClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; }")
class _GVolumeMonitorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var volume_added: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(136).value = value }
    
    var volume_removed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(144).value = value }
    
    var volume_changed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(152).value = value }
    
    var mount_added: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(160).value = value }
    
    var mount_removed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(168).value = value }
    
    var mount_pre_unmount: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(176).value = value }
    
    var mount_changed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(184).value = value }
    
    var drive_connected: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(192).value = value }
    
    var drive_disconnected: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(200).value = value }
    
    var drive_changed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(208).value = value }
    
    var is_supported: CPointer<CFunction<() -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<() -> gboolean>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> gboolean>>>(216).value = value }
    
    var get_connected_drives: CPointer<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(224).value = value }
    
    var get_volumes: CPointer<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(232).value = value }
    
    var get_mounts: CPointer<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(240).value = value }
    
    var get_volume_for_uuid: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GVolume>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GVolume>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GVolume>?>>>(248).value = value }
    
    var get_mount_for_uuid: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GMount>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GMount>?>>>(256).value = value }
    
    var adopt_orphan_mount: CPointer<CFunction<(CPointer<GMount>?, CPointer<GVolumeMonitor>?) -> CPointer<GVolume>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GVolumeMonitor>?) -> CPointer<GVolume>?>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GVolumeMonitor>?) -> CPointer<GVolume>?>>>(264).value = value }
    
    var drive_eject_button: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(272).value = value }
    
    var drive_stop_button: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(280).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; }")
class _GNativeVolumeMonitor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GVolumeMonitor
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; } p0; void* p1; }")
class _GNativeVolumeMonitorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(344, 8)
    
    val parent_class: GVolumeMonitorClass
        get() = memberAt(0)
    
    var get_mount_for_mount_path: CPointer<CFunction<(CPointer<ByteVar>?, CPointer<GCancellable>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<ByteVar>?, CPointer<GCancellable>?) -> CPointer<GMount>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<ByteVar>?, CPointer<GCancellable>?) -> CPointer<GMount>?>>>(336).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GNetworkAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GNetworkMonitorInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var network_changed: CPointer<CFunction<(CPointer<GNetworkMonitor>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, gboolean) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, gboolean) -> Unit>>>(16).value = value }
    
    var can_reach: CPointer<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value = value }
    
    var can_reach_async: CPointer<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value = value }
    
    var can_reach_finish: CPointer<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GNetworkServiceClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7[16]; }")
class _GPermissionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var acquire: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value = value }
    
    var acquire_async: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var acquire_finish: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var release: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value = value }
    
    var release_async: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var release_finish: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value = value }
    
    val reserved: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(184)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GPollableInputStreamInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var can_poll: CPointer<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(16).value = value }
    
    var is_readable: CPointer<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(24).value = value }
    
    var create_source: CPointer<CFunction<(CPointer<GPollableInputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value = value }
    
    var read_nonblocking: CPointer<CFunction<(CPointer<GPollableInputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GPollableOutputStreamInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var can_poll: CPointer<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(16).value = value }
    
    var is_writable: CPointer<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(24).value = value }
    
    var create_source: CPointer<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value = value }
    
    var write_nonblocking: CPointer<CFunction<(CPointer<GPollableOutputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value = value }
    
    var writev_nonblocking: CPointer<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GPollableReturn>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GPollableReturn>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GPollableReturn>>>(48).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GProxyInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var connect: CPointer<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(16).value = value }
    
    var connect_async: CPointer<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value = value }
    
    var connect_finish: CPointer<CFunction<(CPointer<GProxy>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(32).value = value }
    
    var supports_hostname: CPointer<CFunction<(CPointer<GProxy>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?) -> gboolean>>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; } p0; }")
class _GProxyAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GInetSocketAddressClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; }")
class _GSocketAddressEnumeratorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var next: CPointer<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(136).value = value }
    
    var next_async: CPointer<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var next_finish: CPointer<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(152).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GProxyAddressEnumeratorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GSocketAddressEnumeratorClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GProxyResolverInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var is_supported: CPointer<CFunction<(CPointer<GProxyResolver>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?) -> gboolean>>>(16).value = value }
    
    var lookup: CPointer<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value = value }
    
    var lookup_async: CPointer<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value = value }
    
    var lookup_finish: CPointer<CFunction<(CPointer<GProxyResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; }")
class _GResolverClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(264, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var reload: CPointer<CFunction<(CPointer<GResolver>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?) -> Unit>>>(136).value = value }
    
    var lookup_by_name: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(144).value = value }
    
    var lookup_by_name_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var lookup_by_name_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value = value }
    
    var lookup_by_address: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(168).value = value }
    
    var lookup_by_address_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var lookup_by_address_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(184).value = value }
    
    var lookup_service: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(192).value = value }
    
    var lookup_service_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var lookup_service_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(208).value = value }
    
    var lookup_records: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value = value }
    
    var lookup_records_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value = value }
    
    var lookup_records_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value = value }
    
    var lookup_by_name_with_flags_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value = value }
    
    var lookup_by_name_with_flags_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(248).value = value }
    
    var lookup_by_name_with_flags: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(256).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; void* p2; void* p3; void* p4; }")
class _GStaticResource(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var data: CPointer<guint8Var>?
        get() = memberAt<CPointerVar<guint8Var>>(0).value
        set(value) { memberAt<CPointerVar<guint8Var>>(0).value = value }
    
    var data_len: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
    
    var resource: CPointer<GResource>?
        get() = memberAt<CPointerVar<GResource>>(16).value
        set(value) { memberAt<CPointerVar<GResource>>(16).value = value }
    
    var next: CPointer<GStaticResource>?
        get() = memberAt<CPointerVar<GStaticResource>>(24).value
        set(value) { memberAt<CPointerVar<GStaticResource>>(24).value = value }
    
    var padding: gpointer?
        get() = memberAt<gpointerVar>(32).value
        set(value) { memberAt<gpointerVar>(32).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSeekableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GSeekable>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> goffset>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> goffset>>>(16).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GSeekable>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(24).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GSeekable>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(32).value = value }
    
    var can_truncate: CPointer<CFunction<(CPointer<GSeekable>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(40).value = value }
    
    var truncate_fn: CPointer<CFunction<(CPointer<GSeekable>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[20]; }")
class _GSettingsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(328, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var writable_changed: CPointer<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(136).value = value }
    
    var changed: CPointer<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(144).value = value }
    
    var writable_change_event: CPointer<CFunction<(CPointer<GSettings>?, GQuark) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, GQuark) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, GQuark) -> gboolean>>>(152).value = value }
    
    var change_event: CPointer<CFunction<(CPointer<GSettings>?, CPointer<GQuarkVar>?, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<GQuarkVar>?, gint) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<GQuarkVar>?, gint) -> gboolean>>>(160).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(168)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1[12]; }")
class _GSimpleActionGroupClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(232, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(136)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSocketClientClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var event: CPointer<CFunction<(CPointer<GSocketClient>?, GSocketClientEvent, CPointer<GSocketConnectable>?, CPointer<GIOStream>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketClient>?, GSocketClientEvent, CPointer<GSocketConnectable>?, CPointer<GIOStream>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketClient>?, GSocketClientEvent, CPointer<GSocketConnectable>?, CPointer<GIOStream>?) -> Unit>>>(136).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GSocketConnectableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var enumerate: CPointer<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(16).value = value }
    
    var proxy_enumerate: CPointer<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(24).value = value }
    
    var to_string: CPointer<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<gcharVar>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<gcharVar>?>>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GSocketClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved9: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved10: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GSocketConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GIOStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GSocketControlMessageClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_size: CPointer<CFunction<(CPointer<GSocketControlMessage>?) -> gsize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> gsize>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> gsize>>>(136).value = value }
    
    var get_level: CPointer<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(144).value = value }
    
    var get_type: CPointer<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(152).value = value }
    
    var serialize: CPointer<CFunction<(CPointer<GSocketControlMessage>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?, gpointer?) -> Unit>>>(160).value = value }
    
    var deserialize: CPointer<CFunction<(Int, Int, gsize, gpointer?) -> CPointer<GSocketControlMessage>?>>?
        get() = memberAt<CPointerVar<CFunction<(Int, Int, gsize, gpointer?) -> CPointer<GSocketControlMessage>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(Int, Int, gsize, gpointer?) -> CPointer<GSocketControlMessage>?>>>(168).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GSocketListenerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GSocketListener>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?) -> Unit>>>(136).value = value }
    
    var event: CPointer<CFunction<(CPointer<GSocketListener>?, GSocketListenerEvent, CPointer<GSocket>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?, GSocketListenerEvent, CPointer<GSocket>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?, GSocketListenerEvent, CPointer<GSocket>?) -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GSocketServiceClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GSocketListenerClass
        get() = memberAt(0)
    
    var incoming: CPointer<CFunction<(CPointer<GSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(192).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSimpleProxyResolver(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSimpleProxyResolverPrivate>?
        get() = memberAt<CPointerVar<GSimpleProxyResolverPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSimpleProxyResolverPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSimpleProxyResolverClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; }")
class _GTcpConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GSocketConnectionClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; } p0; }")
class _GTcpWrapperConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GTcpConnectionClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GThreadedSocketServiceClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GSocketServiceClass
        get() = memberAt(0)
    
    var run: CPointer<CFunction<(CPointer<GThreadedSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GThreadedSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GThreadedSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(248).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GTlsBackendInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var supports_tls: CPointer<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(16).value = value }
    
    var get_certificate_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(24).value = value }
    
    var get_client_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(32).value = value }
    
    var get_server_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(40).value = value }
    
    var get_file_database_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(48).value = value }
    
    var get_default_database: CPointer<CFunction<(CPointer<GTlsBackend>?) -> CPointer<GTlsDatabase>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> CPointer<GTlsDatabase>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> CPointer<GTlsDatabase>?>>>(56).value = value }
    
    var supports_dtls: CPointer<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(64).value = value }
    
    var get_dtls_client_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(72).value = value }
    
    var get_dtls_server_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(80).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2[8]; }")
class _GTlsCertificateClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(208, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var verify: CPointer<CFunction<(CPointer<GTlsCertificate>?, CPointer<GSocketConnectable>?, CPointer<GTlsCertificate>?) -> GTlsCertificateFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsCertificate>?, CPointer<GSocketConnectable>?, CPointer<GTlsCertificate>?) -> GTlsCertificateFlags>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsCertificate>?, CPointer<GSocketConnectable>?, CPointer<GTlsCertificate>?) -> GTlsCertificateFlags>>>(136).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(144)
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[8]; }")
class _GTlsConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(352, 8)
    
    val parent_class: GIOStreamClass
        get() = memberAt(0)
    
    var accept_certificate: CPointer<CFunction<(CPointer<GTlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(256).value = value }
    
    var handshake: CPointer<CFunction<(CPointer<GTlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value = value }
    
    var handshake_async: CPointer<CFunction<(CPointer<GTlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(272).value = value }
    
    var handshake_finish: CPointer<CFunction<(CPointer<GTlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(280).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(288)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; }")
class _GTlsClientConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var copy_session_state: CPointer<CFunction<(CPointer<GTlsClientConnection>?, CPointer<GTlsClientConnection>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsClientConnection>?, CPointer<GTlsClientConnection>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsClientConnection>?, CPointer<GTlsClientConnection>?) -> Unit>>>(16).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14[16]; }")
class _GTlsDatabaseClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(368, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var verify_chain: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(136).value = value }
    
    var verify_chain_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var verify_chain_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(152).value = value }
    
    var create_certificate_handle: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?) -> CPointer<gcharVar>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?) -> CPointer<gcharVar>?>>>(160).value = value }
    
    var lookup_certificate_for_handle: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(168).value = value }
    
    var lookup_certificate_for_handle_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var lookup_certificate_for_handle_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(184).value = value }
    
    var lookup_certificate_issuer: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(192).value = value }
    
    var lookup_certificate_issuer_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var lookup_certificate_issuer_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(208).value = value }
    
    var lookup_certificates_issued_by: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value = value }
    
    var lookup_certificates_issued_by_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value = value }
    
    var lookup_certificates_issued_by_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(240)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1[8]; }")
class _GTlsFileDatabaseInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7[21]; }")
class _GTlsInteractionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(352, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var ask_password: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(136).value = value }
    
    var ask_password_async: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var ask_password_finish: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(152).value = value }
    
    var request_certificate: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(160).value = value }
    
    var request_certificate_async: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var request_certificate_finish: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(176).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(184)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GTlsServerConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4[4]; }")
class _GTlsPasswordClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_value: CPointer<CFunction<(CPointer<GTlsPassword>?, CPointer<gsizeVar>?) -> CPointer<gucharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gsizeVar>?) -> CPointer<gucharVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gsizeVar>?) -> CPointer<gucharVar>?>>>(136).value = value }
    
    var set_value: CPointer<CFunction<(CPointer<GTlsPassword>?, CPointer<gucharVar>?, gssize, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gucharVar>?, gssize, GDestroyNotify?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gucharVar>?, gssize, GDestroyNotify?) -> Unit>>>(144).value = value }
    
    var get_default_warning: CPointer<CFunction<(CPointer<GTlsPassword>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?) -> CPointer<gcharVar>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?) -> CPointer<gcharVar>?>>>(152).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(160)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; }")
class _GVfsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var is_active: CPointer<CFunction<(CPointer<GVfs>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> gboolean>>>(136).value = value }
    
    var get_file_for_path: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(144).value = value }
    
    var get_file_for_uri: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(152).value = value }
    
    var get_supported_uri_schemes: CPointer<CFunction<(CPointer<GVfs>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value = value }
    
    var parse_name: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(168).value = value }
    
    var local_file_add_info: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, guint64, CPointer<GFileAttributeMatcher>?, CPointer<GFileInfo>?, CPointer<GCancellable>?, CPointer<gpointerVar>?, CPointer<GDestroyNotifyVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, guint64, CPointer<GFileAttributeMatcher>?, CPointer<GFileInfo>?, CPointer<GCancellable>?, CPointer<gpointerVar>?, CPointer<GDestroyNotifyVar>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, guint64, CPointer<GFileAttributeMatcher>?, CPointer<GFileInfo>?, CPointer<GCancellable>?, CPointer<gpointerVar>?, CPointer<GDestroyNotifyVar>?) -> Unit>>>(176).value = value }
    
    var add_writable_namespaces: CPointer<CFunction<(CPointer<GVfs>?, CPointer<GFileAttributeInfoList>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GFileAttributeInfoList>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GFileAttributeInfoList>?) -> Unit>>>(184).value = value }
    
    var local_file_set_attributes: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value = value }
    
    var local_file_removed: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> Unit>>>(200).value = value }
    
    var local_file_moved: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Unit>>>(208).value = value }
    
    var deserialize_icon: CPointer<CFunction<(CPointer<GVfs>?, CPointer<GVariant>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GVariant>?) -> CPointer<GIcon>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GVariant>?) -> CPointer<GIcon>?>>>(216).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; }")
class _GVolumeIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(16).value = value }
    
    var removed: CPointer<CFunction<(CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(24).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(32).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(40).value = value }
    
    var get_uuid: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(48).value = value }
    
    var get_drive: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GDrive>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GDrive>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GDrive>?>>>(56).value = value }
    
    var get_mount: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GMount>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GMount>?>>>(64).value = value }
    
    var can_mount: CPointer<CFunction<(CPointer<GVolume>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(72).value = value }
    
    var can_eject: CPointer<CFunction<(CPointer<GVolume>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(80).value = value }
    
    var mount_fn: CPointer<CFunction<(CPointer<GVolume>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(88).value = value }
    
    var mount_finish: CPointer<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value = value }
    
    var eject: CPointer<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(104).value = value }
    
    var eject_finish: CPointer<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value = value }
    
    var get_identifier: CPointer<CFunction<(CPointer<GVolume>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(120).value = value }
    
    var enumerate_identifiers: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<CPointerVar<ByteVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<CPointerVar<ByteVar>>?>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<CPointerVar<ByteVar>>?>>>(128).value = value }
    
    var should_automount: CPointer<CFunction<(CPointer<GVolume>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(136).value = value }
    
    var get_activation_root: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GFile>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GFile>?>>>(144).value = value }
    
    var eject_with_operation: CPointer<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var eject_with_operation_finish: CPointer<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value = value }
    
    var get_sort_key: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<gcharVar>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<gcharVar>?>>>(168).value = value }
    
    var get_symbolic_icon: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(176).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GZlibCompressorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GZlibDecompressorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GDBusInterfaceIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_info: CPointer<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusInterfaceInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusInterfaceInfo>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusInterfaceInfo>?>>>(16).value = value }
    
    var get_object: CPointer<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(24).value = value }
    
    var set_object: CPointer<CFunction<(CPointer<GDBusInterface>?, CPointer<GDBusObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?, CPointer<GDBusObject>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?, CPointer<GDBusObject>?) -> Unit>>>(32).value = value }
    
    var dup_object: CPointer<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[8]; void* p6; void* p7[8]; }")
class _GDBusInterfaceSkeletonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_info: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceInfo>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceInfo>?>>>(136).value = value }
    
    var get_vtable: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceVTable>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceVTable>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceVTable>?>>>(144).value = value }
    
    var get_properties: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GVariant>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GVariant>?>>>(152).value = value }
    
    var flush: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> Unit>>>(160).value = value }
    
    val vfunc_padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(168)
    
    var g_authorize_method: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(232).value = value }
    
    val signal_padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(240)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDBusObjectIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_object_path: CPointer<CFunction<(CPointer<GDBusObject>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var get_interfaces: CPointer<CFunction<(CPointer<GDBusObject>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<GList>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<GList>?>>>(24).value = value }
    
    var get_interface: CPointer<CFunction<(CPointer<GDBusObject>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(32).value = value }
    
    var interface_added: CPointer<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(40).value = value }
    
    var interface_removed: CPointer<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(48).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2[8]; }")
class _GDBusObjectSkeletonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(208, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var authorize_method: CPointer<CFunction<(CPointer<GDBusObjectSkeleton>?, CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectSkeleton>?, CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectSkeleton>?, CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(136).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(144)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1[8]; }")
class _GDBusObjectProxyClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(136)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GDBusObjectManagerIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_object_path: CPointer<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var get_objects: CPointer<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<GList>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<GList>?>>>(24).value = value }
    
    var get_object: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?) -> CPointer<GDBusObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?) -> CPointer<GDBusObject>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?) -> CPointer<GDBusObject>?>>>(32).value = value }
    
    var get_interface: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(40).value = value }
    
    var object_added: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(48).value = value }
    
    var object_removed: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(56).value = value }
    
    var interface_added: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(64).value = value }
    
    var interface_removed: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(72).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3[8]; }")
class _GDBusObjectManagerClientClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var interface_proxy_signal: CPointer<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(136).value = value }
    
    var interface_proxy_properties_changed: CPointer<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(144).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(152)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1[8]; }")
class _GDBusObjectManagerServerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(136)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GRemoteActionGroupInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var activate_action_full: CPointer<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(16).value = value }
    
    var change_action_state_full: CPointer<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GMenuModelClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var is_mutable: CPointer<CFunction<(CPointer<GMenuModel>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gboolean>>>(136).value = value }
    
    var get_n_items: CPointer<CFunction<(CPointer<GMenuModel>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gint>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gint>>>(144).value = value }
    
    var get_item_attributes: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(152).value = value }
    
    var iterate_item_attributes: CPointer<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuAttributeIter>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuAttributeIter>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuAttributeIter>?>>>(160).value = value }
    
    var get_item_attribute_value: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?, CPointer<GVariantType>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?, CPointer<GVariantType>?) -> CPointer<GVariant>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?, CPointer<GVariantType>?) -> CPointer<GVariant>?>>>(168).value = value }
    
    var get_item_links: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(176).value = value }
    
    var iterate_item_links: CPointer<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuLinkIter>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuLinkIter>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuLinkIter>?>>>(184).value = value }
    
    var get_item_link: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?) -> CPointer<GMenuModel>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?) -> CPointer<GMenuModel>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?) -> CPointer<GMenuModel>?>>>(192).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMenuAttributeIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMenuAttributeIterPrivate>?
        get() = memberAt<CPointerVar<GMenuAttributeIterPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMenuAttributeIterPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMenuLinkIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMenuLinkIterPrivate>?
        get() = memberAt<CPointerVar<GMenuLinkIterPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMenuLinkIterPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; }")
class _GMenuAttributeIterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_next: CPointer<CFunction<(CPointer<GMenuAttributeIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuAttributeIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuAttributeIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(136).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; }")
class _GMenuLinkIterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_next: CPointer<CFunction<(CPointer<GMenuLinkIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GMenuModel>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuLinkIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GMenuModel>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuLinkIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GMenuModel>>?) -> gboolean>>>(136).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GListModelInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_item_type: CPointer<CFunction<(CPointer<GListModel>?) -> GType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> GType>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> GType>>>(16).value = value }
    
    var get_n_items: CPointer<CFunction<(CPointer<GListModel>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> guint>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> guint>>>(24).value = value }
    
    var get_item: CPointer<CFunction<(CPointer<GListModel>?, guint) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GListModel>?, guint) -> gpointer?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GListModel>?, guint) -> gpointer?>>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class GListStoreClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

enum class GUserDirectory(override val value: UInt) : CEnum {
    G_USER_DIRECTORY_DESKTOP(0u),
    G_USER_DIRECTORY_DOCUMENTS(1u),
    G_USER_DIRECTORY_DOWNLOAD(2u),
    G_USER_DIRECTORY_MUSIC(3u),
    G_USER_DIRECTORY_PICTURES(4u),
    G_USER_DIRECTORY_PUBLIC_SHARE(5u),
    G_USER_DIRECTORY_TEMPLATES(6u),
    G_USER_DIRECTORY_VIDEOS(7u),
    G_USER_N_DIRECTORIES(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GUserDirectory.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GUserDirectory
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GThreadError(override val value: UInt) : CEnum {
    G_THREAD_ERROR_AGAIN(0u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GThreadError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GThreadError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GThreadPriority(override val value: UInt) : CEnum {
    G_THREAD_PRIORITY_LOW(0u),
    G_THREAD_PRIORITY_NORMAL(1u),
    G_THREAD_PRIORITY_HIGH(2u),
    G_THREAD_PRIORITY_URGENT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GThreadPriority.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GThreadPriority
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GOnceStatus(override val value: UInt) : CEnum {
    G_ONCE_STATUS_NOTCALLED(0u),
    G_ONCE_STATUS_PROGRESS(1u),
    G_ONCE_STATUS_READY(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GOnceStatus.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GOnceStatus
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GBookmarkFileError(override val value: UInt) : CEnum {
    G_BOOKMARK_FILE_ERROR_INVALID_URI(0u),
    G_BOOKMARK_FILE_ERROR_INVALID_VALUE(1u),
    G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED(2u),
    G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND(3u),
    G_BOOKMARK_FILE_ERROR_READ(4u),
    G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING(5u),
    G_BOOKMARK_FILE_ERROR_WRITE(6u),
    G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GBookmarkFileError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GBookmarkFileError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GChecksumType(override val value: UInt) : CEnum {
    G_CHECKSUM_MD5(0u),
    G_CHECKSUM_SHA1(1u),
    G_CHECKSUM_SHA256(2u),
    G_CHECKSUM_SHA512(3u),
    G_CHECKSUM_SHA384(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GChecksumType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GChecksumType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GConvertError(override val value: UInt) : CEnum {
    G_CONVERT_ERROR_NO_CONVERSION(0u),
    G_CONVERT_ERROR_ILLEGAL_SEQUENCE(1u),
    G_CONVERT_ERROR_FAILED(2u),
    G_CONVERT_ERROR_PARTIAL_INPUT(3u),
    G_CONVERT_ERROR_BAD_URI(4u),
    G_CONVERT_ERROR_NOT_ABSOLUTE_PATH(5u),
    G_CONVERT_ERROR_NO_MEMORY(6u),
    G_CONVERT_ERROR_EMBEDDED_NUL(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GConvertError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GConvertError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTimeType(override val value: UInt) : CEnum {
    G_TIME_TYPE_STANDARD(0u),
    G_TIME_TYPE_DAYLIGHT(1u),
    G_TIME_TYPE_UNIVERSAL(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTimeType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTimeType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GFileError(override val value: UInt) : CEnum {
    G_FILE_ERROR_EXIST(0u),
    G_FILE_ERROR_ISDIR(1u),
    G_FILE_ERROR_ACCES(2u),
    G_FILE_ERROR_NAMETOOLONG(3u),
    G_FILE_ERROR_NOENT(4u),
    G_FILE_ERROR_NOTDIR(5u),
    G_FILE_ERROR_NXIO(6u),
    G_FILE_ERROR_NODEV(7u),
    G_FILE_ERROR_ROFS(8u),
    G_FILE_ERROR_TXTBSY(9u),
    G_FILE_ERROR_FAULT(10u),
    G_FILE_ERROR_LOOP(11u),
    G_FILE_ERROR_NOSPC(12u),
    G_FILE_ERROR_NOMEM(13u),
    G_FILE_ERROR_MFILE(14u),
    G_FILE_ERROR_NFILE(15u),
    G_FILE_ERROR_BADF(16u),
    G_FILE_ERROR_INVAL(17u),
    G_FILE_ERROR_PIPE(18u),
    G_FILE_ERROR_AGAIN(19u),
    G_FILE_ERROR_INTR(20u),
    G_FILE_ERROR_IO(21u),
    G_FILE_ERROR_PERM(22u),
    G_FILE_ERROR_NOSYS(23u),
    G_FILE_ERROR_FAILED(24u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GFileError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GFileError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTraverseType(override val value: UInt) : CEnum {
    G_IN_ORDER(0u),
    G_PRE_ORDER(1u),
    G_POST_ORDER(2u),
    G_LEVEL_ORDER(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTraverseType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTraverseType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GUnicodeType(override val value: UInt) : CEnum {
    G_UNICODE_CONTROL(0u),
    G_UNICODE_FORMAT(1u),
    G_UNICODE_UNASSIGNED(2u),
    G_UNICODE_PRIVATE_USE(3u),
    G_UNICODE_SURROGATE(4u),
    G_UNICODE_LOWERCASE_LETTER(5u),
    G_UNICODE_MODIFIER_LETTER(6u),
    G_UNICODE_OTHER_LETTER(7u),
    G_UNICODE_TITLECASE_LETTER(8u),
    G_UNICODE_UPPERCASE_LETTER(9u),
    G_UNICODE_SPACING_MARK(10u),
    G_UNICODE_ENCLOSING_MARK(11u),
    G_UNICODE_NON_SPACING_MARK(12u),
    G_UNICODE_DECIMAL_NUMBER(13u),
    G_UNICODE_LETTER_NUMBER(14u),
    G_UNICODE_OTHER_NUMBER(15u),
    G_UNICODE_CONNECT_PUNCTUATION(16u),
    G_UNICODE_DASH_PUNCTUATION(17u),
    G_UNICODE_CLOSE_PUNCTUATION(18u),
    G_UNICODE_FINAL_PUNCTUATION(19u),
    G_UNICODE_INITIAL_PUNCTUATION(20u),
    G_UNICODE_OTHER_PUNCTUATION(21u),
    G_UNICODE_OPEN_PUNCTUATION(22u),
    G_UNICODE_CURRENCY_SYMBOL(23u),
    G_UNICODE_MODIFIER_SYMBOL(24u),
    G_UNICODE_MATH_SYMBOL(25u),
    G_UNICODE_OTHER_SYMBOL(26u),
    G_UNICODE_LINE_SEPARATOR(27u),
    G_UNICODE_PARAGRAPH_SEPARATOR(28u),
    G_UNICODE_SPACE_SEPARATOR(29u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GUnicodeType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GUnicodeType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GUnicodeBreakType(override val value: UInt) : CEnum {
    G_UNICODE_BREAK_MANDATORY(0u),
    G_UNICODE_BREAK_CARRIAGE_RETURN(1u),
    G_UNICODE_BREAK_LINE_FEED(2u),
    G_UNICODE_BREAK_COMBINING_MARK(3u),
    G_UNICODE_BREAK_SURROGATE(4u),
    G_UNICODE_BREAK_ZERO_WIDTH_SPACE(5u),
    G_UNICODE_BREAK_INSEPARABLE(6u),
    G_UNICODE_BREAK_NON_BREAKING_GLUE(7u),
    G_UNICODE_BREAK_CONTINGENT(8u),
    G_UNICODE_BREAK_SPACE(9u),
    G_UNICODE_BREAK_AFTER(10u),
    G_UNICODE_BREAK_BEFORE(11u),
    G_UNICODE_BREAK_BEFORE_AND_AFTER(12u),
    G_UNICODE_BREAK_HYPHEN(13u),
    G_UNICODE_BREAK_NON_STARTER(14u),
    G_UNICODE_BREAK_OPEN_PUNCTUATION(15u),
    G_UNICODE_BREAK_CLOSE_PUNCTUATION(16u),
    G_UNICODE_BREAK_QUOTATION(17u),
    G_UNICODE_BREAK_EXCLAMATION(18u),
    G_UNICODE_BREAK_IDEOGRAPHIC(19u),
    G_UNICODE_BREAK_NUMERIC(20u),
    G_UNICODE_BREAK_INFIX_SEPARATOR(21u),
    G_UNICODE_BREAK_SYMBOL(22u),
    G_UNICODE_BREAK_ALPHABETIC(23u),
    G_UNICODE_BREAK_PREFIX(24u),
    G_UNICODE_BREAK_POSTFIX(25u),
    G_UNICODE_BREAK_COMPLEX_CONTEXT(26u),
    G_UNICODE_BREAK_AMBIGUOUS(27u),
    G_UNICODE_BREAK_UNKNOWN(28u),
    G_UNICODE_BREAK_NEXT_LINE(29u),
    G_UNICODE_BREAK_WORD_JOINER(30u),
    G_UNICODE_BREAK_HANGUL_L_JAMO(31u),
    G_UNICODE_BREAK_HANGUL_V_JAMO(32u),
    G_UNICODE_BREAK_HANGUL_T_JAMO(33u),
    G_UNICODE_BREAK_HANGUL_LV_SYLLABLE(34u),
    G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE(35u),
    G_UNICODE_BREAK_CLOSE_PARANTHESIS(36u),
    G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER(37u),
    G_UNICODE_BREAK_HEBREW_LETTER(38u),
    G_UNICODE_BREAK_REGIONAL_INDICATOR(39u),
    G_UNICODE_BREAK_EMOJI_BASE(40u),
    G_UNICODE_BREAK_EMOJI_MODIFIER(41u),
    G_UNICODE_BREAK_ZERO_WIDTH_JOINER(42u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GUnicodeBreakType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GUnicodeBreakType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GIOStatus(override val value: UInt) : CEnum {
    G_IO_STATUS_ERROR(0u),
    G_IO_STATUS_NORMAL(1u),
    G_IO_STATUS_EOF(2u),
    G_IO_STATUS_AGAIN(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GIOStatus.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GIOStatus
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSeekType(override val value: UInt) : CEnum {
    G_SEEK_CUR(0u),
    G_SEEK_SET(1u),
    G_SEEK_END(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSeekType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSeekType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GIOError(override val value: UInt) : CEnum {
    G_IO_ERROR_NONE(0u),
    G_IO_ERROR_AGAIN(1u),
    G_IO_ERROR_INVAL(2u),
    G_IO_ERROR_UNKNOWN(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GIOError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GIOError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GIOChannelError(override val value: UInt) : CEnum {
    G_IO_CHANNEL_ERROR_FBIG(0u),
    G_IO_CHANNEL_ERROR_INVAL(1u),
    G_IO_CHANNEL_ERROR_IO(2u),
    G_IO_CHANNEL_ERROR_ISDIR(3u),
    G_IO_CHANNEL_ERROR_NOSPC(4u),
    G_IO_CHANNEL_ERROR_NXIO(5u),
    G_IO_CHANNEL_ERROR_OVERFLOW(6u),
    G_IO_CHANNEL_ERROR_PIPE(7u),
    G_IO_CHANNEL_ERROR_FAILED(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GIOChannelError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GIOChannelError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GKeyFileError(override val value: UInt) : CEnum {
    G_KEY_FILE_ERROR_UNKNOWN_ENCODING(0u),
    G_KEY_FILE_ERROR_PARSE(1u),
    G_KEY_FILE_ERROR_NOT_FOUND(2u),
    G_KEY_FILE_ERROR_KEY_NOT_FOUND(3u),
    G_KEY_FILE_ERROR_GROUP_NOT_FOUND(4u),
    G_KEY_FILE_ERROR_INVALID_VALUE(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GKeyFileError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GKeyFileError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GMarkupError(override val value: UInt) : CEnum {
    G_MARKUP_ERROR_BAD_UTF8(0u),
    G_MARKUP_ERROR_EMPTY(1u),
    G_MARKUP_ERROR_PARSE(2u),
    G_MARKUP_ERROR_UNKNOWN_ELEMENT(3u),
    G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE(4u),
    G_MARKUP_ERROR_INVALID_CONTENT(5u),
    G_MARKUP_ERROR_MISSING_ATTRIBUTE(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GMarkupError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GMarkupError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GVariantParseError(override val value: UInt) : CEnum {
    G_VARIANT_PARSE_ERROR_FAILED(0u),
    G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED(1u),
    G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE(2u),
    G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED(3u),
    G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END(4u),
    G_VARIANT_PARSE_ERROR_INVALID_CHARACTER(5u),
    G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING(6u),
    G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH(7u),
    G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE(8u),
    G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING(9u),
    G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE(10u),
    G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE(11u),
    G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG(12u),
    G_VARIANT_PARSE_ERROR_TYPE_ERROR(13u),
    G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN(14u),
    G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD(15u),
    G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT(16u),
    G_VARIANT_PARSE_ERROR_VALUE_EXPECTED(17u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GVariantParseError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GVariantParseError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GOptionArg(override val value: UInt) : CEnum {
    G_OPTION_ARG_NONE(0u),
    G_OPTION_ARG_STRING(1u),
    G_OPTION_ARG_INT(2u),
    G_OPTION_ARG_CALLBACK(3u),
    G_OPTION_ARG_FILENAME(4u),
    G_OPTION_ARG_STRING_ARRAY(5u),
    G_OPTION_ARG_FILENAME_ARRAY(6u),
    G_OPTION_ARG_DOUBLE(7u),
    G_OPTION_ARG_INT64(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GOptionArg.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GOptionArg
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GOptionError(override val value: UInt) : CEnum {
    G_OPTION_ERROR_UNKNOWN_OPTION(0u),
    G_OPTION_ERROR_BAD_VALUE(1u),
    G_OPTION_ERROR_FAILED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GOptionError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GOptionError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GErrorType(override val value: UInt) : CEnum {
    G_ERR_UNKNOWN(0u),
    G_ERR_UNEXP_EOF(1u),
    G_ERR_UNEXP_EOF_IN_STRING(2u),
    G_ERR_UNEXP_EOF_IN_COMMENT(3u),
    G_ERR_NON_DIGIT_IN_CONST(4u),
    G_ERR_DIGIT_RADIX(5u),
    G_ERR_FLOAT_RADIX(6u),
    G_ERR_FLOAT_MALFORMED(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GErrorType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GErrorType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GShellError(override val value: UInt) : CEnum {
    G_SHELL_ERROR_BAD_QUOTING(0u),
    G_SHELL_ERROR_EMPTY_STRING(1u),
    G_SHELL_ERROR_FAILED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GShellError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GShellError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GNumberParserError(override val value: UInt) : CEnum {
    G_NUMBER_PARSER_ERROR_INVALID(0u),
    G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GNumberParserError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GNumberParserError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTestResult(override val value: UInt) : CEnum {
    G_TEST_RUN_SUCCESS(0u),
    G_TEST_RUN_SKIPPED(1u),
    G_TEST_RUN_FAILURE(2u),
    G_TEST_RUN_INCOMPLETE(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTestResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTestResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTestLogType(override val value: UInt) : CEnum {
    G_TEST_LOG_NONE(0u),
    G_TEST_LOG_ERROR(1u),
    G_TEST_LOG_START_BINARY(2u),
    G_TEST_LOG_LIST_CASE(3u),
    G_TEST_LOG_SKIP_CASE(4u),
    G_TEST_LOG_START_CASE(5u),
    G_TEST_LOG_STOP_CASE(6u),
    G_TEST_LOG_MIN_RESULT(7u),
    G_TEST_LOG_MAX_RESULT(8u),
    G_TEST_LOG_MESSAGE(9u),
    G_TEST_LOG_START_SUITE(10u),
    G_TEST_LOG_STOP_SUITE(11u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTestLogType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTestLogType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTestFileType(override val value: UInt) : CEnum {
    G_TEST_DIST(0u),
    G_TEST_BUILT(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTestFileType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTestFileType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDataStreamByteOrder(override val value: UInt) : CEnum {
    G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN(0u),
    G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN(1u),
    G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDataStreamByteOrder.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDataStreamByteOrder
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDataStreamNewlineType(override val value: UInt) : CEnum {
    G_DATA_STREAM_NEWLINE_TYPE_LF(0u),
    G_DATA_STREAM_NEWLINE_TYPE_CR(1u),
    G_DATA_STREAM_NEWLINE_TYPE_CR_LF(2u),
    G_DATA_STREAM_NEWLINE_TYPE_ANY(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDataStreamNewlineType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDataStreamNewlineType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDriveStartStopType(override val value: UInt) : CEnum {
    G_DRIVE_START_STOP_TYPE_UNKNOWN(0u),
    G_DRIVE_START_STOP_TYPE_SHUTDOWN(1u),
    G_DRIVE_START_STOP_TYPE_NETWORK(2u),
    G_DRIVE_START_STOP_TYPE_MULTIDISK(3u),
    G_DRIVE_START_STOP_TYPE_PASSWORD(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDriveStartStopType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDriveStartStopType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GFileMonitorEvent(override val value: UInt) : CEnum {
    G_FILE_MONITOR_EVENT_CHANGED(0u),
    G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT(1u),
    G_FILE_MONITOR_EVENT_DELETED(2u),
    G_FILE_MONITOR_EVENT_CREATED(3u),
    G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED(4u),
    G_FILE_MONITOR_EVENT_PRE_UNMOUNT(5u),
    G_FILE_MONITOR_EVENT_UNMOUNTED(6u),
    G_FILE_MONITOR_EVENT_MOVED(7u),
    G_FILE_MONITOR_EVENT_RENAMED(8u),
    G_FILE_MONITOR_EVENT_MOVED_IN(9u),
    G_FILE_MONITOR_EVENT_MOVED_OUT(10u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GFileMonitorEvent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GFileMonitorEvent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GPasswordSave(override val value: UInt) : CEnum {
    G_PASSWORD_SAVE_NEVER(0u),
    G_PASSWORD_SAVE_FOR_SESSION(1u),
    G_PASSWORD_SAVE_PERMANENTLY(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GPasswordSave.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GPasswordSave
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GMountOperationResult(override val value: UInt) : CEnum {
    G_MOUNT_OPERATION_HANDLED(0u),
    G_MOUNT_OPERATION_ABORTED(1u),
    G_MOUNT_OPERATION_UNHANDLED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GMountOperationResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GMountOperationResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GEmblemOrigin(override val value: UInt) : CEnum {
    G_EMBLEM_ORIGIN_UNKNOWN(0u),
    G_EMBLEM_ORIGIN_DEVICE(1u),
    G_EMBLEM_ORIGIN_LIVEMETADATA(2u),
    G_EMBLEM_ORIGIN_TAG(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GEmblemOrigin.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GEmblemOrigin
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GResolverError(override val value: UInt) : CEnum {
    G_RESOLVER_ERROR_NOT_FOUND(0u),
    G_RESOLVER_ERROR_TEMPORARY_FAILURE(1u),
    G_RESOLVER_ERROR_INTERNAL(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GResolverError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GResolverError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GResourceError(override val value: UInt) : CEnum {
    G_RESOURCE_ERROR_NOT_FOUND(0u),
    G_RESOURCE_ERROR_INTERNAL(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GResourceError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GResourceError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSocketType(override val value: UInt) : CEnum {
    G_SOCKET_TYPE_INVALID(0u),
    G_SOCKET_TYPE_STREAM(1u),
    G_SOCKET_TYPE_DATAGRAM(2u),
    G_SOCKET_TYPE_SEQPACKET(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSocketType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSocketType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GZlibCompressorFormat(override val value: UInt) : CEnum {
    G_ZLIB_COMPRESSOR_FORMAT_ZLIB(0u),
    G_ZLIB_COMPRESSOR_FORMAT_GZIP(1u),
    G_ZLIB_COMPRESSOR_FORMAT_RAW(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GZlibCompressorFormat.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GZlibCompressorFormat
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GUnixSocketAddressType(override val value: UInt) : CEnum {
    G_UNIX_SOCKET_ADDRESS_INVALID(0u),
    G_UNIX_SOCKET_ADDRESS_ANONYMOUS(1u),
    G_UNIX_SOCKET_ADDRESS_PATH(2u),
    G_UNIX_SOCKET_ADDRESS_ABSTRACT(3u),
    G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GUnixSocketAddressType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GUnixSocketAddressType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDBusError(override val value: UInt) : CEnum {
    G_DBUS_ERROR_FAILED(0u),
    G_DBUS_ERROR_NO_MEMORY(1u),
    G_DBUS_ERROR_SERVICE_UNKNOWN(2u),
    G_DBUS_ERROR_NAME_HAS_NO_OWNER(3u),
    G_DBUS_ERROR_NO_REPLY(4u),
    G_DBUS_ERROR_IO_ERROR(5u),
    G_DBUS_ERROR_BAD_ADDRESS(6u),
    G_DBUS_ERROR_NOT_SUPPORTED(7u),
    G_DBUS_ERROR_LIMITS_EXCEEDED(8u),
    G_DBUS_ERROR_ACCESS_DENIED(9u),
    G_DBUS_ERROR_AUTH_FAILED(10u),
    G_DBUS_ERROR_NO_SERVER(11u),
    G_DBUS_ERROR_TIMEOUT(12u),
    G_DBUS_ERROR_NO_NETWORK(13u),
    G_DBUS_ERROR_ADDRESS_IN_USE(14u),
    G_DBUS_ERROR_DISCONNECTED(15u),
    G_DBUS_ERROR_INVALID_ARGS(16u),
    G_DBUS_ERROR_FILE_NOT_FOUND(17u),
    G_DBUS_ERROR_FILE_EXISTS(18u),
    G_DBUS_ERROR_UNKNOWN_METHOD(19u),
    G_DBUS_ERROR_TIMED_OUT(20u),
    G_DBUS_ERROR_MATCH_RULE_NOT_FOUND(21u),
    G_DBUS_ERROR_MATCH_RULE_INVALID(22u),
    G_DBUS_ERROR_SPAWN_EXEC_FAILED(23u),
    G_DBUS_ERROR_SPAWN_FORK_FAILED(24u),
    G_DBUS_ERROR_SPAWN_CHILD_EXITED(25u),
    G_DBUS_ERROR_SPAWN_CHILD_SIGNALED(26u),
    G_DBUS_ERROR_SPAWN_FAILED(27u),
    G_DBUS_ERROR_SPAWN_SETUP_FAILED(28u),
    G_DBUS_ERROR_SPAWN_CONFIG_INVALID(29u),
    G_DBUS_ERROR_SPAWN_SERVICE_INVALID(30u),
    G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND(31u),
    G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID(32u),
    G_DBUS_ERROR_SPAWN_FILE_INVALID(33u),
    G_DBUS_ERROR_SPAWN_NO_MEMORY(34u),
    G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN(35u),
    G_DBUS_ERROR_INVALID_SIGNATURE(36u),
    G_DBUS_ERROR_INVALID_FILE_CONTENT(37u),
    G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN(38u),
    G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN(39u),
    G_DBUS_ERROR_OBJECT_PATH_IN_USE(40u),
    G_DBUS_ERROR_UNKNOWN_OBJECT(41u),
    G_DBUS_ERROR_UNKNOWN_INTERFACE(42u),
    G_DBUS_ERROR_UNKNOWN_PROPERTY(43u),
    G_DBUS_ERROR_PROPERTY_READ_ONLY(44u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDBusError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDBusError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDBusMessageType(override val value: UInt) : CEnum {
    G_DBUS_MESSAGE_TYPE_INVALID(0u),
    G_DBUS_MESSAGE_TYPE_METHOD_CALL(1u),
    G_DBUS_MESSAGE_TYPE_METHOD_RETURN(2u),
    G_DBUS_MESSAGE_TYPE_ERROR(3u),
    G_DBUS_MESSAGE_TYPE_SIGNAL(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDBusMessageType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDBusMessageType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDBusMessageHeaderField(override val value: UInt) : CEnum {
    G_DBUS_MESSAGE_HEADER_FIELD_INVALID(0u),
    G_DBUS_MESSAGE_HEADER_FIELD_PATH(1u),
    G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE(2u),
    G_DBUS_MESSAGE_HEADER_FIELD_MEMBER(3u),
    G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME(4u),
    G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL(5u),
    G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION(6u),
    G_DBUS_MESSAGE_HEADER_FIELD_SENDER(7u),
    G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE(8u),
    G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS(9u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDBusMessageHeaderField.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDBusMessageHeaderField
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GCredentialsType(override val value: UInt) : CEnum {
    G_CREDENTIALS_TYPE_INVALID(0u),
    G_CREDENTIALS_TYPE_LINUX_UCRED(1u),
    G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED(2u),
    G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED(3u),
    G_CREDENTIALS_TYPE_SOLARIS_UCRED(4u),
    G_CREDENTIALS_TYPE_NETBSD_UNPCBID(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GCredentialsType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GCredentialsType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsError(override val value: UInt) : CEnum {
    G_TLS_ERROR_UNAVAILABLE(0u),
    G_TLS_ERROR_MISC(1u),
    G_TLS_ERROR_BAD_CERTIFICATE(2u),
    G_TLS_ERROR_NOT_TLS(3u),
    G_TLS_ERROR_HANDSHAKE(4u),
    G_TLS_ERROR_CERTIFICATE_REQUIRED(5u),
    G_TLS_ERROR_EOF(6u),
    G_TLS_ERROR_INAPPROPRIATE_FALLBACK(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsAuthenticationMode(override val value: UInt) : CEnum {
    G_TLS_AUTHENTICATION_NONE(0u),
    G_TLS_AUTHENTICATION_REQUESTED(1u),
    G_TLS_AUTHENTICATION_REQUIRED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsAuthenticationMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsAuthenticationMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsRehandshakeMode(override val value: UInt) : CEnum {
    G_TLS_REHANDSHAKE_NEVER(0u),
    G_TLS_REHANDSHAKE_SAFELY(1u),
    G_TLS_REHANDSHAKE_UNSAFELY(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsRehandshakeMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsRehandshakeMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsInteractionResult(override val value: UInt) : CEnum {
    G_TLS_INTERACTION_UNHANDLED(0u),
    G_TLS_INTERACTION_HANDLED(1u),
    G_TLS_INTERACTION_FAILED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsInteractionResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsInteractionResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GIOModuleScopeFlags(override val value: UInt) : CEnum {
    G_IO_MODULE_SCOPE_NONE(0u),
    G_IO_MODULE_SCOPE_BLOCK_DUPLICATES(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GIOModuleScopeFlags.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GIOModuleScopeFlags
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSocketClientEvent(override val value: UInt) : CEnum {
    G_SOCKET_CLIENT_RESOLVING(0u),
    G_SOCKET_CLIENT_RESOLVED(1u),
    G_SOCKET_CLIENT_CONNECTING(2u),
    G_SOCKET_CLIENT_CONNECTED(3u),
    G_SOCKET_CLIENT_PROXY_NEGOTIATING(4u),
    G_SOCKET_CLIENT_PROXY_NEGOTIATED(5u),
    G_SOCKET_CLIENT_TLS_HANDSHAKING(6u),
    G_SOCKET_CLIENT_TLS_HANDSHAKED(7u),
    G_SOCKET_CLIENT_COMPLETE(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSocketClientEvent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSocketClientEvent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSocketListenerEvent(override val value: UInt) : CEnum {
    G_SOCKET_LISTENER_BINDING(0u),
    G_SOCKET_LISTENER_BOUND(1u),
    G_SOCKET_LISTENER_LISTENING(2u),
    G_SOCKET_LISTENER_LISTENED(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSocketListenerEvent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSocketListenerEvent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GNotificationPriority(override val value: UInt) : CEnum {
    G_NOTIFICATION_PRIORITY_NORMAL(0u),
    G_NOTIFICATION_PRIORITY_LOW(1u),
    G_NOTIFICATION_PRIORITY_HIGH(2u),
    G_NOTIFICATION_PRIORITY_URGENT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GNotificationPriority.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GNotificationPriority
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

fun _GLIB_CHECKED_ADD_U32(dest: CValuesRef<guint32Var>?, a: guint32, b: guint32): gboolean {
    memScoped {
        return kniBridge0(dest?.getPointer(memScope).rawValue, a, b)
    }
}

fun _GLIB_CHECKED_MUL_U32(dest: CValuesRef<guint32Var>?, a: guint32, b: guint32): gboolean {
    memScoped {
        return kniBridge1(dest?.getPointer(memScope).rawValue, a, b)
    }
}

fun _GLIB_CHECKED_ADD_U64(dest: CValuesRef<guint64Var>?, a: guint64, b: guint64): gboolean {
    memScoped {
        return kniBridge2(dest?.getPointer(memScope).rawValue, a, b)
    }
}

fun _GLIB_CHECKED_MUL_U64(dest: CValuesRef<guint64Var>?, a: guint64, b: guint64): gboolean {
    memScoped {
        return kniBridge3(dest?.getPointer(memScope).rawValue, a, b)
    }
}

fun g_array_new(zero_terminated: gboolean, clear_: gboolean, element_size: guint): CPointer<GArray>? {
    return interpretCPointer<GArray>(kniBridge4(zero_terminated, clear_, element_size))
}

fun g_array_sized_new(zero_terminated: gboolean, clear_: gboolean, element_size: guint, reserved_size: guint): CPointer<GArray>? {
    return interpretCPointer<GArray>(kniBridge5(zero_terminated, clear_, element_size, reserved_size))
}

fun g_array_copy(array: CValuesRef<GArray>?): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge6(array?.getPointer(memScope).rawValue))
    }
}

fun g_array_free(array: CValuesRef<GArray>?, free_segment: gboolean): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge7(array?.getPointer(memScope).rawValue, free_segment))
    }
}

fun g_array_ref(array: CValuesRef<GArray>?): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge8(array?.getPointer(memScope).rawValue))
    }
}

fun g_array_unref(array: CValuesRef<GArray>?): Unit {
    memScoped {
        return kniBridge9(array?.getPointer(memScope).rawValue)
    }
}

fun g_array_get_element_size(array: CValuesRef<GArray>?): guint {
    memScoped {
        return kniBridge10(array?.getPointer(memScope).rawValue)
    }
}

fun g_array_append_vals(array: CValuesRef<GArray>?, data: gconstpointer?, len: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge11(array?.getPointer(memScope).rawValue, data.rawValue, len))
    }
}

fun g_array_prepend_vals(array: CValuesRef<GArray>?, data: gconstpointer?, len: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge12(array?.getPointer(memScope).rawValue, data.rawValue, len))
    }
}

fun g_array_insert_vals(array: CValuesRef<GArray>?, index_: guint, data: gconstpointer?, len: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge13(array?.getPointer(memScope).rawValue, index_, data.rawValue, len))
    }
}

fun g_array_set_size(array: CValuesRef<GArray>?, length: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge14(array?.getPointer(memScope).rawValue, length))
    }
}

fun g_array_remove_index(array: CValuesRef<GArray>?, index_: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge15(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_array_remove_index_fast(array: CValuesRef<GArray>?, index_: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge16(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_array_remove_range(array: CValuesRef<GArray>?, index_: guint, length: guint): CPointer<GArray>? {
    memScoped {
        return interpretCPointer<GArray>(kniBridge17(array?.getPointer(memScope).rawValue, index_, length))
    }
}

fun g_array_sort(array: CValuesRef<GArray>?, compare_func: GCompareFunc?): Unit {
    memScoped {
        return kniBridge18(array?.getPointer(memScope).rawValue, compare_func.rawValue)
    }
}

fun g_array_sort_with_data(array: CValuesRef<GArray>?, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge19(array?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_array_binary_search(array: CValuesRef<GArray>?, target: gconstpointer?, compare_func: GCompareFunc?, out_match_index: CValuesRef<guintVar>?): gboolean {
    memScoped {
        return kniBridge20(array?.getPointer(memScope).rawValue, target.rawValue, compare_func.rawValue, out_match_index?.getPointer(memScope).rawValue)
    }
}

fun g_array_set_clear_func(array: CValuesRef<GArray>?, clear_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge21(array?.getPointer(memScope).rawValue, clear_func.rawValue)
    }
}

fun g_ptr_array_new(): CPointer<GPtrArray>? {
    return interpretCPointer<GPtrArray>(kniBridge22())
}

fun g_ptr_array_new_with_free_func(element_free_func: GDestroyNotify?): CPointer<GPtrArray>? {
    return interpretCPointer<GPtrArray>(kniBridge23(element_free_func.rawValue))
}

fun g_ptr_array_copy(array: CValuesRef<GPtrArray>?, func: GCopyFunc?, user_data: gpointer?): CPointer<GPtrArray>? {
    memScoped {
        return interpretCPointer<GPtrArray>(kniBridge24(array?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue))
    }
}

fun g_ptr_array_sized_new(reserved_size: guint): CPointer<GPtrArray>? {
    return interpretCPointer<GPtrArray>(kniBridge25(reserved_size))
}

fun g_ptr_array_new_full(reserved_size: guint, element_free_func: GDestroyNotify?): CPointer<GPtrArray>? {
    return interpretCPointer<GPtrArray>(kniBridge26(reserved_size, element_free_func.rawValue))
}

fun g_ptr_array_free(array: CValuesRef<GPtrArray>?, free_seg: gboolean): CPointer<gpointerVar>? {
    memScoped {
        return interpretCPointer<gpointerVar>(kniBridge27(array?.getPointer(memScope).rawValue, free_seg))
    }
}

fun g_ptr_array_ref(array: CValuesRef<GPtrArray>?): CPointer<GPtrArray>? {
    memScoped {
        return interpretCPointer<GPtrArray>(kniBridge28(array?.getPointer(memScope).rawValue))
    }
}

fun g_ptr_array_unref(array: CValuesRef<GPtrArray>?): Unit {
    memScoped {
        return kniBridge29(array?.getPointer(memScope).rawValue)
    }
}

fun g_ptr_array_set_free_func(array: CValuesRef<GPtrArray>?, element_free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge30(array?.getPointer(memScope).rawValue, element_free_func.rawValue)
    }
}

fun g_ptr_array_set_size(array: CValuesRef<GPtrArray>?, length: gint): Unit {
    memScoped {
        return kniBridge31(array?.getPointer(memScope).rawValue, length)
    }
}

fun g_ptr_array_remove_index(array: CValuesRef<GPtrArray>?, index_: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge32(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_ptr_array_remove_index_fast(array: CValuesRef<GPtrArray>?, index_: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge33(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_ptr_array_steal_index(array: CValuesRef<GPtrArray>?, index_: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge34(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_ptr_array_steal_index_fast(array: CValuesRef<GPtrArray>?, index_: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge35(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_ptr_array_remove(array: CValuesRef<GPtrArray>?, data: gpointer?): gboolean {
    memScoped {
        return kniBridge36(array?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_ptr_array_remove_fast(array: CValuesRef<GPtrArray>?, data: gpointer?): gboolean {
    memScoped {
        return kniBridge37(array?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_ptr_array_remove_range(array: CValuesRef<GPtrArray>?, index_: guint, length: guint): CPointer<GPtrArray>? {
    memScoped {
        return interpretCPointer<GPtrArray>(kniBridge38(array?.getPointer(memScope).rawValue, index_, length))
    }
}

fun g_ptr_array_add(array: CValuesRef<GPtrArray>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge39(array?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_ptr_array_extend(array_to_extend: CValuesRef<GPtrArray>?, array: CValuesRef<GPtrArray>?, func: GCopyFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge40(array_to_extend?.getPointer(memScope).rawValue, array?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_ptr_array_extend_and_steal(array_to_extend: CValuesRef<GPtrArray>?, array: CValuesRef<GPtrArray>?): Unit {
    memScoped {
        return kniBridge41(array_to_extend?.getPointer(memScope).rawValue, array?.getPointer(memScope).rawValue)
    }
}

fun g_ptr_array_insert(array: CValuesRef<GPtrArray>?, index_: gint, data: gpointer?): Unit {
    memScoped {
        return kniBridge42(array?.getPointer(memScope).rawValue, index_, data.rawValue)
    }
}

fun g_ptr_array_sort(array: CValuesRef<GPtrArray>?, compare_func: GCompareFunc?): Unit {
    memScoped {
        return kniBridge43(array?.getPointer(memScope).rawValue, compare_func.rawValue)
    }
}

fun g_ptr_array_sort_with_data(array: CValuesRef<GPtrArray>?, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge44(array?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_ptr_array_foreach(array: CValuesRef<GPtrArray>?, func: GFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge45(array?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_ptr_array_find(haystack: CValuesRef<GPtrArray>?, needle: gconstpointer?, index_: CValuesRef<guintVar>?): gboolean {
    memScoped {
        return kniBridge46(haystack?.getPointer(memScope).rawValue, needle.rawValue, index_?.getPointer(memScope).rawValue)
    }
}

fun g_ptr_array_find_with_equal_func(haystack: CValuesRef<GPtrArray>?, needle: gconstpointer?, equal_func: GEqualFunc?, index_: CValuesRef<guintVar>?): gboolean {
    memScoped {
        return kniBridge47(haystack?.getPointer(memScope).rawValue, needle.rawValue, equal_func.rawValue, index_?.getPointer(memScope).rawValue)
    }
}

fun g_byte_array_new(): CPointer<GByteArray>? {
    return interpretCPointer<GByteArray>(kniBridge48())
}

fun g_byte_array_new_take(data: CValuesRef<guint8Var>?, len: gsize): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge49(data?.getPointer(memScope).rawValue, len))
    }
}

fun g_byte_array_sized_new(reserved_size: guint): CPointer<GByteArray>? {
    return interpretCPointer<GByteArray>(kniBridge50(reserved_size))
}

fun g_byte_array_free(array: CValuesRef<GByteArray>?, free_segment: gboolean): CPointer<guint8Var>? {
    memScoped {
        return interpretCPointer<guint8Var>(kniBridge51(array?.getPointer(memScope).rawValue, free_segment))
    }
}

fun g_byte_array_free_to_bytes(array: CValuesRef<GByteArray>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge52(array?.getPointer(memScope).rawValue))
    }
}

fun g_byte_array_ref(array: CValuesRef<GByteArray>?): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge53(array?.getPointer(memScope).rawValue))
    }
}

fun g_byte_array_unref(array: CValuesRef<GByteArray>?): Unit {
    memScoped {
        return kniBridge54(array?.getPointer(memScope).rawValue)
    }
}

fun g_byte_array_append(array: CValuesRef<GByteArray>?, data: CValuesRef<guint8Var>?, len: guint): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge55(array?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len))
    }
}

fun g_byte_array_prepend(array: CValuesRef<GByteArray>?, data: CValuesRef<guint8Var>?, len: guint): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge56(array?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len))
    }
}

fun g_byte_array_set_size(array: CValuesRef<GByteArray>?, length: guint): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge57(array?.getPointer(memScope).rawValue, length))
    }
}

fun g_byte_array_remove_index(array: CValuesRef<GByteArray>?, index_: guint): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge58(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_byte_array_remove_index_fast(array: CValuesRef<GByteArray>?, index_: guint): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge59(array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_byte_array_remove_range(array: CValuesRef<GByteArray>?, index_: guint, length: guint): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge60(array?.getPointer(memScope).rawValue, index_, length))
    }
}

fun g_byte_array_sort(array: CValuesRef<GByteArray>?, compare_func: GCompareFunc?): Unit {
    memScoped {
        return kniBridge61(array?.getPointer(memScope).rawValue, compare_func.rawValue)
    }
}

fun g_byte_array_sort_with_data(array: CValuesRef<GByteArray>?, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge62(array?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_atomic_int_get(atomic: CValuesRef<gintVar>?): gint {
    memScoped {
        return kniBridge63(atomic?.getPointer(memScope).rawValue)
    }
}

fun g_atomic_int_set(atomic: CValuesRef<gintVar>?, newval: gint): Unit {
    memScoped {
        return kniBridge64(atomic?.getPointer(memScope).rawValue, newval)
    }
}

fun g_atomic_int_inc(atomic: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge65(atomic?.getPointer(memScope).rawValue)
    }
}

fun g_atomic_int_dec_and_test(atomic: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge66(atomic?.getPointer(memScope).rawValue)
    }
}

fun g_atomic_int_compare_and_exchange(atomic: CValuesRef<gintVar>?, oldval: gint, newval: gint): gboolean {
    memScoped {
        return kniBridge67(atomic?.getPointer(memScope).rawValue, oldval, newval)
    }
}

fun g_atomic_int_add(atomic: CValuesRef<gintVar>?, `val`: gint): gint {
    memScoped {
        return kniBridge68(atomic?.getPointer(memScope).rawValue, `val`)
    }
}

fun g_atomic_int_and(atomic: CValuesRef<guintVar>?, `val`: guint): guint {
    memScoped {
        return kniBridge69(atomic?.getPointer(memScope).rawValue, `val`)
    }
}

fun g_atomic_int_or(atomic: CValuesRef<guintVar>?, `val`: guint): guint {
    memScoped {
        return kniBridge70(atomic?.getPointer(memScope).rawValue, `val`)
    }
}

fun g_atomic_int_xor(atomic: CValuesRef<guintVar>?, `val`: guint): guint {
    memScoped {
        return kniBridge71(atomic?.getPointer(memScope).rawValue, `val`)
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_get(atomic: CValuesRef<*>?): gpointer? = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_set(atomic: CValuesRef<*>?, newval: gpointer?): Unit = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_compare_and_exchange(atomic: CValuesRef<*>?, oldval: gpointer?, newval: gpointer?): gboolean = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_add(atomic: CValuesRef<*>?, `val`: gssize): gssize = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_and(atomic: CValuesRef<*>?, `val`: gsize): gsize = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_or(atomic: CValuesRef<*>?, `val`: gsize): gsize = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_atomic_pointer_xor(atomic: CValuesRef<*>?, `val`: gsize): gsize = throw UnsupportedOperationException()

fun g_atomic_int_exchange_and_add(atomic: CValuesRef<gintVar>?, `val`: gint): gint {
    memScoped {
        return kniBridge79(atomic?.getPointer(memScope).rawValue, `val`)
    }
}

fun g_quark_try_string(@CCall.CString string: String?): GQuark {
    memScoped {
        return kniBridge80(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_quark_from_static_string(@CCall.CString string: String?): GQuark {
    memScoped {
        return kniBridge81(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_quark_from_string(@CCall.CString string: String?): GQuark {
    memScoped {
        return kniBridge82(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_quark_to_string(quark: GQuark): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge83(quark))
}

fun g_intern_string(@CCall.CString string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge84(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_intern_static_string(@CCall.CString string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge85(string?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources0")
external fun g_error_new(domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): CPointer<GError>?

fun g_error_new_literal(domain: GQuark, code: gint, @CCall.CString message: String?): CPointer<GError>? {
    memScoped {
        return interpretCPointer<GError>(kniBridge86(domain, code, message?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_error_new_valist(domain: GQuark, code: gint, @CCall.CString format: String?, args: va_list?): CPointer<GError>? {
    memScoped {
        return interpretCPointer<GError>(kniBridge87(domain, code, format?.cstr?.getPointer(memScope).rawValue, args.rawValue))
    }
}

fun g_error_free(error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge88(error?.getPointer(memScope).rawValue)
    }
}

fun g_error_copy(error: CValuesRef<GError>?): CPointer<GError>? {
    memScoped {
        return interpretCPointer<GError>(kniBridge89(error?.getPointer(memScope).rawValue))
    }
}

fun g_error_matches(error: CValuesRef<GError>?, domain: GQuark, code: gint): gboolean {
    memScoped {
        return kniBridge90(error?.getPointer(memScope).rawValue, domain, code)
    }
}

@CCall("knifunptr_glibresources1")
external fun g_set_error(err: CValuesRef<CPointerVar<GError>>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_set_error_literal(err: CValuesRef<CPointerVar<GError>>?, domain: GQuark, code: gint, @CCall.CString message: String?): Unit {
    memScoped {
        return kniBridge91(err?.getPointer(memScope).rawValue, domain, code, message?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_propagate_error(dest: CValuesRef<CPointerVar<GError>>?, src: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge92(dest?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue)
    }
}

fun g_clear_error(err: CValuesRef<CPointerVar<GError>>?): Unit {
    memScoped {
        return kniBridge93(err?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources2")
external fun g_prefix_error(err: CValuesRef<CPointerVar<GError>>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources3")
external fun g_propagate_prefixed_error(dest: CValuesRef<CPointerVar<GError>>?, src: CValuesRef<GError>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_get_user_name(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge94())
}

fun g_get_real_name(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge95())
}

fun g_get_home_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge96())
}

fun g_get_tmp_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge97())
}

fun g_get_host_name(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge98())
}

fun g_get_prgname(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge99())
}

fun g_set_prgname(@CCall.CString prgname: String?): Unit {
    memScoped {
        return kniBridge100(prgname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_get_application_name(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge101())
}

fun g_set_application_name(@CCall.CString application_name: String?): Unit {
    memScoped {
        return kniBridge102(application_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_reload_user_special_dirs_cache(): Unit {
    return kniBridge103()
}

fun g_get_user_data_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge104())
}

fun g_get_user_config_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge105())
}

fun g_get_user_cache_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge106())
}

fun g_get_system_data_dirs(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge107())
}

fun g_get_system_config_dirs(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge108())
}

fun g_get_user_runtime_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge109())
}

fun g_get_user_special_dir(directory: GUserDirectory): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge110(directory.value))
}

fun g_parse_debug_string(@CCall.CString string: String?, keys: CValuesRef<GDebugKey>?, nkeys: guint): guint {
    memScoped {
        return kniBridge111(string?.cstr?.getPointer(memScope).rawValue, keys?.getPointer(memScope).rawValue, nkeys)
    }
}

@CCall("knifunptr_glibresources4")
external fun g_snprintf(string: CValuesRef<gcharVar>?, n: gulong, @CCall.CString format: String?, vararg variadicArguments: Any?): gint

fun g_vsnprintf(string: CValuesRef<gcharVar>?, n: gulong, @CCall.CString format: String?, args: va_list?): gint {
    memScoped {
        return kniBridge112(string?.getPointer(memScope).rawValue, n, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_nullify_pointer(nullify_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge113(nullify_location?.getPointer(memScope).rawValue)
    }
}

fun g_format_size_full(size: guint64, flags: GFormatSizeFlags): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge114(size, flags))
}

fun g_format_size(size: guint64): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge115(size))
}

fun g_format_size_for_display(size: goffset): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge116(size))
}

fun g_atexit(func: GVoidFunc?): Unit {
    return kniBridge117(func.rawValue)
}

fun g_find_program_in_path(@CCall.CString program: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge118(program?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_bit_nth_lsf(mask: gulong, nth_bit: gint): gint {
    return kniBridge119(mask, nth_bit)
}

fun g_bit_nth_msf(mask: gulong, nth_bit: gint): gint {
    return kniBridge120(mask, nth_bit)
}

fun g_bit_storage(number: gulong): guint {
    return kniBridge121(number)
}

fun g_bit_nth_lsf_impl(mask: gulong, nth_bit: gint): gint {
    return kniBridge122(mask, nth_bit)
}

fun g_bit_nth_msf_impl(mask: gulong, nth_bit: gint): gint {
    return kniBridge123(mask, nth_bit)
}

fun g_bit_storage_impl(number: gulong): guint {
    return kniBridge124(number)
}

fun g_thread_error_quark(): GQuark {
    return kniBridge125()
}

fun g_thread_ref(thread: CValuesRef<GThread>?): CPointer<GThread>? {
    memScoped {
        return interpretCPointer<GThread>(kniBridge126(thread?.getPointer(memScope).rawValue))
    }
}

fun g_thread_unref(thread: CValuesRef<GThread>?): Unit {
    memScoped {
        return kniBridge127(thread?.getPointer(memScope).rawValue)
    }
}

fun g_thread_new(@CCall.CString name: String?, func: GThreadFunc?, data: gpointer?): CPointer<GThread>? {
    memScoped {
        return interpretCPointer<GThread>(kniBridge128(name?.cstr?.getPointer(memScope).rawValue, func.rawValue, data.rawValue))
    }
}

fun g_thread_try_new(@CCall.CString name: String?, func: GThreadFunc?, data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GThread>? {
    memScoped {
        return interpretCPointer<GThread>(kniBridge129(name?.cstr?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_thread_self(): CPointer<GThread>? {
    return interpretCPointer<GThread>(kniBridge130())
}

fun g_thread_exit(retval: gpointer?): Unit {
    return kniBridge131(retval.rawValue)
}

fun g_thread_join(thread: CValuesRef<GThread>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge132(thread?.getPointer(memScope).rawValue))
    }
}

fun g_thread_yield(): Unit {
    return kniBridge133()
}

fun g_mutex_init(mutex: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge134(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_mutex_clear(mutex: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge135(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_mutex_lock(mutex: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge136(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_mutex_trylock(mutex: CValuesRef<GMutex>?): gboolean {
    memScoped {
        return kniBridge137(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_mutex_unlock(mutex: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge138(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_init(rw_lock: CValuesRef<GRWLock>?): Unit {
    memScoped {
        return kniBridge139(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_clear(rw_lock: CValuesRef<GRWLock>?): Unit {
    memScoped {
        return kniBridge140(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_writer_lock(rw_lock: CValuesRef<GRWLock>?): Unit {
    memScoped {
        return kniBridge141(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_writer_trylock(rw_lock: CValuesRef<GRWLock>?): gboolean {
    memScoped {
        return kniBridge142(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_writer_unlock(rw_lock: CValuesRef<GRWLock>?): Unit {
    memScoped {
        return kniBridge143(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_reader_lock(rw_lock: CValuesRef<GRWLock>?): Unit {
    memScoped {
        return kniBridge144(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_reader_trylock(rw_lock: CValuesRef<GRWLock>?): gboolean {
    memScoped {
        return kniBridge145(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_reader_unlock(rw_lock: CValuesRef<GRWLock>?): Unit {
    memScoped {
        return kniBridge146(rw_lock?.getPointer(memScope).rawValue)
    }
}

fun g_rec_mutex_init(rec_mutex: CValuesRef<GRecMutex>?): Unit {
    memScoped {
        return kniBridge147(rec_mutex?.getPointer(memScope).rawValue)
    }
}

fun g_rec_mutex_clear(rec_mutex: CValuesRef<GRecMutex>?): Unit {
    memScoped {
        return kniBridge148(rec_mutex?.getPointer(memScope).rawValue)
    }
}

fun g_rec_mutex_lock(rec_mutex: CValuesRef<GRecMutex>?): Unit {
    memScoped {
        return kniBridge149(rec_mutex?.getPointer(memScope).rawValue)
    }
}

fun g_rec_mutex_trylock(rec_mutex: CValuesRef<GRecMutex>?): gboolean {
    memScoped {
        return kniBridge150(rec_mutex?.getPointer(memScope).rawValue)
    }
}

fun g_rec_mutex_unlock(rec_mutex: CValuesRef<GRecMutex>?): Unit {
    memScoped {
        return kniBridge151(rec_mutex?.getPointer(memScope).rawValue)
    }
}

fun g_cond_init(cond: CValuesRef<GCond>?): Unit {
    memScoped {
        return kniBridge152(cond?.getPointer(memScope).rawValue)
    }
}

fun g_cond_clear(cond: CValuesRef<GCond>?): Unit {
    memScoped {
        return kniBridge153(cond?.getPointer(memScope).rawValue)
    }
}

fun g_cond_wait(cond: CValuesRef<GCond>?, mutex: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge154(cond?.getPointer(memScope).rawValue, mutex?.getPointer(memScope).rawValue)
    }
}

fun g_cond_signal(cond: CValuesRef<GCond>?): Unit {
    memScoped {
        return kniBridge155(cond?.getPointer(memScope).rawValue)
    }
}

fun g_cond_broadcast(cond: CValuesRef<GCond>?): Unit {
    memScoped {
        return kniBridge156(cond?.getPointer(memScope).rawValue)
    }
}

fun g_cond_wait_until(cond: CValuesRef<GCond>?, mutex: CValuesRef<GMutex>?, end_time: gint64): gboolean {
    memScoped {
        return kniBridge157(cond?.getPointer(memScope).rawValue, mutex?.getPointer(memScope).rawValue, end_time)
    }
}

fun g_private_get(key: CValuesRef<GPrivate>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge158(key?.getPointer(memScope).rawValue))
    }
}

fun g_private_set(key: CValuesRef<GPrivate>?, value: gpointer?): Unit {
    memScoped {
        return kniBridge159(key?.getPointer(memScope).rawValue, value.rawValue)
    }
}

fun g_private_replace(key: CValuesRef<GPrivate>?, value: gpointer?): Unit {
    memScoped {
        return kniBridge160(key?.getPointer(memScope).rawValue, value.rawValue)
    }
}

fun g_once_impl(once: CValuesRef<GOnce>?, func: GThreadFunc?, arg: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge161(once?.getPointer(memScope).rawValue, func.rawValue, arg.rawValue))
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_once_init_enter(location: CValuesRef<*>?): gboolean = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_once_init_leave(location: CValuesRef<*>?, result: gsize): Unit = throw UnsupportedOperationException()

fun g_get_num_processors(): guint {
    return kniBridge164()
}

fun g_mutex_locker_new(mutex: CValuesRef<GMutex>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge165(mutex?.getPointer(memScope).rawValue))
    }
}

fun g_mutex_locker_free(locker: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge166(locker?.getPointer(memScope).rawValue)
    }
}

fun g_rec_mutex_locker_new(rec_mutex: CValuesRef<GRecMutex>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge167(rec_mutex?.getPointer(memScope).rawValue))
    }
}

fun g_rec_mutex_locker_free(locker: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge168(locker?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_writer_locker_new(rw_lock: CValuesRef<GRWLock>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge169(rw_lock?.getPointer(memScope).rawValue))
    }
}

fun g_rw_lock_writer_locker_free(locker: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge170(locker?.getPointer(memScope).rawValue)
    }
}

fun g_rw_lock_reader_locker_new(rw_lock: CValuesRef<GRWLock>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge171(rw_lock?.getPointer(memScope).rawValue))
    }
}

fun g_rw_lock_reader_locker_free(locker: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge172(locker?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_new(): CPointer<GAsyncQueue>? {
    return interpretCPointer<GAsyncQueue>(kniBridge173())
}

fun g_async_queue_new_full(item_free_func: GDestroyNotify?): CPointer<GAsyncQueue>? {
    return interpretCPointer<GAsyncQueue>(kniBridge174(item_free_func.rawValue))
}

fun g_async_queue_lock(queue: CValuesRef<GAsyncQueue>?): Unit {
    memScoped {
        return kniBridge175(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_unlock(queue: CValuesRef<GAsyncQueue>?): Unit {
    memScoped {
        return kniBridge176(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_ref(queue: CValuesRef<GAsyncQueue>?): CPointer<GAsyncQueue>? {
    memScoped {
        return interpretCPointer<GAsyncQueue>(kniBridge177(queue?.getPointer(memScope).rawValue))
    }
}

fun g_async_queue_unref(queue: CValuesRef<GAsyncQueue>?): Unit {
    memScoped {
        return kniBridge178(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_ref_unlocked(queue: CValuesRef<GAsyncQueue>?): Unit {
    memScoped {
        return kniBridge179(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_unref_and_unlock(queue: CValuesRef<GAsyncQueue>?): Unit {
    memScoped {
        return kniBridge180(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_push(queue: CValuesRef<GAsyncQueue>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge181(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_async_queue_push_unlocked(queue: CValuesRef<GAsyncQueue>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge182(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_async_queue_push_sorted(queue: CValuesRef<GAsyncQueue>?, data: gpointer?, func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge183(queue?.getPointer(memScope).rawValue, data.rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_async_queue_push_sorted_unlocked(queue: CValuesRef<GAsyncQueue>?, data: gpointer?, func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge184(queue?.getPointer(memScope).rawValue, data.rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_async_queue_pop(queue: CValuesRef<GAsyncQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge185(queue?.getPointer(memScope).rawValue))
    }
}

fun g_async_queue_pop_unlocked(queue: CValuesRef<GAsyncQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge186(queue?.getPointer(memScope).rawValue))
    }
}

fun g_async_queue_try_pop(queue: CValuesRef<GAsyncQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge187(queue?.getPointer(memScope).rawValue))
    }
}

fun g_async_queue_try_pop_unlocked(queue: CValuesRef<GAsyncQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge188(queue?.getPointer(memScope).rawValue))
    }
}

fun g_async_queue_timeout_pop(queue: CValuesRef<GAsyncQueue>?, timeout: guint64): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge189(queue?.getPointer(memScope).rawValue, timeout))
    }
}

fun g_async_queue_timeout_pop_unlocked(queue: CValuesRef<GAsyncQueue>?, timeout: guint64): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge190(queue?.getPointer(memScope).rawValue, timeout))
    }
}

fun g_async_queue_length(queue: CValuesRef<GAsyncQueue>?): gint {
    memScoped {
        return kniBridge191(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_length_unlocked(queue: CValuesRef<GAsyncQueue>?): gint {
    memScoped {
        return kniBridge192(queue?.getPointer(memScope).rawValue)
    }
}

fun g_async_queue_sort(queue: CValuesRef<GAsyncQueue>?, func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge193(queue?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_async_queue_sort_unlocked(queue: CValuesRef<GAsyncQueue>?, func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge194(queue?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_async_queue_remove(queue: CValuesRef<GAsyncQueue>?, item: gpointer?): gboolean {
    memScoped {
        return kniBridge195(queue?.getPointer(memScope).rawValue, item.rawValue)
    }
}

fun g_async_queue_remove_unlocked(queue: CValuesRef<GAsyncQueue>?, item: gpointer?): gboolean {
    memScoped {
        return kniBridge196(queue?.getPointer(memScope).rawValue, item.rawValue)
    }
}

fun g_async_queue_push_front(queue: CValuesRef<GAsyncQueue>?, item: gpointer?): Unit {
    memScoped {
        return kniBridge197(queue?.getPointer(memScope).rawValue, item.rawValue)
    }
}

fun g_async_queue_push_front_unlocked(queue: CValuesRef<GAsyncQueue>?, item: gpointer?): Unit {
    memScoped {
        return kniBridge198(queue?.getPointer(memScope).rawValue, item.rawValue)
    }
}

fun g_async_queue_timed_pop(queue: CValuesRef<GAsyncQueue>?, end_time: CValuesRef<GTimeVal>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge199(queue?.getPointer(memScope).rawValue, end_time?.getPointer(memScope).rawValue))
    }
}

fun g_async_queue_timed_pop_unlocked(queue: CValuesRef<GAsyncQueue>?, end_time: CValuesRef<GTimeVal>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge200(queue?.getPointer(memScope).rawValue, end_time?.getPointer(memScope).rawValue))
    }
}

fun g_on_error_query(@CCall.CString prg_name: String?): Unit {
    memScoped {
        return kniBridge201(prg_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_on_error_stack_trace(@CCall.CString prg_name: String?): Unit {
    memScoped {
        return kniBridge202(prg_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_base64_encode_step(`in`: CValuesRef<gucharVar>?, len: gsize, break_lines: gboolean, out: CValuesRef<gcharVar>?, state: CValuesRef<gintVar>?, save: CValuesRef<gintVar>?): gsize {
    memScoped {
        return kniBridge203(`in`?.getPointer(memScope).rawValue, len, break_lines, out?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue, save?.getPointer(memScope).rawValue)
    }
}

fun g_base64_encode_close(break_lines: gboolean, out: CValuesRef<gcharVar>?, state: CValuesRef<gintVar>?, save: CValuesRef<gintVar>?): gsize {
    memScoped {
        return kniBridge204(break_lines, out?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue, save?.getPointer(memScope).rawValue)
    }
}

fun g_base64_encode(data: CValuesRef<gucharVar>?, len: gsize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge205(data?.getPointer(memScope).rawValue, len))
    }
}

fun g_base64_decode_step(@CCall.CString `in`: String?, len: gsize, out: CValuesRef<gucharVar>?, state: CValuesRef<gintVar>?, save: CValuesRef<guintVar>?): gsize {
    memScoped {
        return kniBridge206(`in`?.cstr?.getPointer(memScope).rawValue, len, out?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue, save?.getPointer(memScope).rawValue)
    }
}

fun g_base64_decode(@CCall.CString text: String?, out_len: CValuesRef<gsizeVar>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge207(text?.cstr?.getPointer(memScope).rawValue, out_len?.getPointer(memScope).rawValue))
    }
}

fun g_base64_decode_inplace(text: CValuesRef<gcharVar>?, out_len: CValuesRef<gsizeVar>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge208(text?.getPointer(memScope).rawValue, out_len?.getPointer(memScope).rawValue))
    }
}

fun g_bit_lock(address: CValuesRef<gintVar>?, lock_bit: gint): Unit {
    memScoped {
        return kniBridge209(address?.getPointer(memScope).rawValue, lock_bit)
    }
}

fun g_bit_trylock(address: CValuesRef<gintVar>?, lock_bit: gint): gboolean {
    memScoped {
        return kniBridge210(address?.getPointer(memScope).rawValue, lock_bit)
    }
}

fun g_bit_unlock(address: CValuesRef<gintVar>?, lock_bit: gint): Unit {
    memScoped {
        return kniBridge211(address?.getPointer(memScope).rawValue, lock_bit)
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_pointer_bit_lock(address: CValuesRef<*>?, lock_bit: gint): Unit = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_pointer_bit_trylock(address: CValuesRef<*>?, lock_bit: gint): gboolean = throw UnsupportedOperationException()

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_pointer_bit_unlock(address: CValuesRef<*>?, lock_bit: gint): Unit = throw UnsupportedOperationException()

fun g_bookmark_file_error_quark(): GQuark {
    return kniBridge215()
}

fun g_bookmark_file_new(): CPointer<GBookmarkFile>? {
    return interpretCPointer<GBookmarkFile>(kniBridge216())
}

fun g_bookmark_file_free(bookmark: CValuesRef<GBookmarkFile>?): Unit {
    memScoped {
        return kniBridge217(bookmark?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_load_from_file(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge218(bookmark?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_load_from_data(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString data: String?, length: gsize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge219(bookmark?.getPointer(memScope).rawValue, data?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_load_from_data_dirs(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString file: String?, full_path: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge220(bookmark?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, full_path?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_to_data(bookmark: CValuesRef<GBookmarkFile>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge221(bookmark?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_to_file(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge222(bookmark?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_set_title(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge223(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_title(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge224(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_set_description(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString description: String?): Unit {
    memScoped {
        return kniBridge225(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_description(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge226(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_set_mime_type(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString mime_type: String?): Unit {
    memScoped {
        return kniBridge227(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_mime_type(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge228(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_set_groups(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, groups: CValuesRef<CPointerVar<gcharVar>>?, length: gsize): Unit {
    memScoped {
        return kniBridge229(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, groups?.getPointer(memScope).rawValue, length)
    }
}

fun g_bookmark_file_add_group(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString group: String?): Unit {
    memScoped {
        return kniBridge230(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, group?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_has_group(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString group: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge231(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, group?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_groups(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge232(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_add_application(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString name: String?, @CCall.CString exec: String?): Unit {
    memScoped {
        return kniBridge233(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, exec?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_has_application(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge234(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_applications(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge235(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_set_app_info(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString name: String?, @CCall.CString exec: String?, count: gint, stamp: time_t, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge236(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, exec?.cstr?.getPointer(memScope).rawValue, count, stamp, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_app_info(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString name: String?, exec: CValuesRef<CPointerVar<gcharVar>>?, count: CValuesRef<guintVar>?, stamp: CValuesRef<time_tVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge237(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, exec?.getPointer(memScope).rawValue, count?.getPointer(memScope).rawValue, stamp?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_set_is_private(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, is_private: gboolean): Unit {
    memScoped {
        return kniBridge238(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, is_private)
    }
}

fun g_bookmark_file_get_is_private(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge239(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_set_icon(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString href: String?, @CCall.CString mime_type: String?): Unit {
    memScoped {
        return kniBridge240(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, href?.cstr?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_icon(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, href: CValuesRef<CPointerVar<gcharVar>>?, mime_type: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge241(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, href?.getPointer(memScope).rawValue, mime_type?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_set_added(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, added: time_t): Unit {
    memScoped {
        return kniBridge242(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, added)
    }
}

fun g_bookmark_file_get_added(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): time_t {
    memScoped {
        return kniBridge243(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_set_modified(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, modified: time_t): Unit {
    memScoped {
        return kniBridge244(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, modified)
    }
}

fun g_bookmark_file_get_modified(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): time_t {
    memScoped {
        return kniBridge245(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_set_visited(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, visited: time_t): Unit {
    memScoped {
        return kniBridge246(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, visited)
    }
}

fun g_bookmark_file_get_visited(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): time_t {
    memScoped {
        return kniBridge247(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_has_item(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?): gboolean {
    memScoped {
        return kniBridge248(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_size(bookmark: CValuesRef<GBookmarkFile>?): gint {
    memScoped {
        return kniBridge249(bookmark?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_get_uris(bookmark: CValuesRef<GBookmarkFile>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge250(bookmark?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_bookmark_file_remove_group(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString group: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge251(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, group?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_remove_application(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, @CCall.CString name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge252(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_remove_item(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge253(bookmark?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bookmark_file_move_item(bookmark: CValuesRef<GBookmarkFile>?, @CCall.CString old_uri: String?, @CCall.CString new_uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge254(bookmark?.getPointer(memScope).rawValue, old_uri?.cstr?.getPointer(memScope).rawValue, new_uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_bytes_new(data: gconstpointer?, size: gsize): CPointer<GBytes>? {
    return interpretCPointer<GBytes>(kniBridge255(data.rawValue, size))
}

fun g_bytes_new_take(data: gpointer?, size: gsize): CPointer<GBytes>? {
    return interpretCPointer<GBytes>(kniBridge256(data.rawValue, size))
}

fun g_bytes_new_static(data: gconstpointer?, size: gsize): CPointer<GBytes>? {
    return interpretCPointer<GBytes>(kniBridge257(data.rawValue, size))
}

fun g_bytes_new_with_free_func(data: gconstpointer?, size: gsize, free_func: GDestroyNotify?, user_data: gpointer?): CPointer<GBytes>? {
    return interpretCPointer<GBytes>(kniBridge258(data.rawValue, size, free_func.rawValue, user_data.rawValue))
}

fun g_bytes_new_from_bytes(bytes: CValuesRef<GBytes>?, offset: gsize, length: gsize): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge259(bytes?.getPointer(memScope).rawValue, offset, length))
    }
}

fun g_bytes_get_data(bytes: CValuesRef<GBytes>?, size: CValuesRef<gsizeVar>?): gconstpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge260(bytes?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue))
    }
}

fun g_bytes_get_size(bytes: CValuesRef<GBytes>?): gsize {
    memScoped {
        return kniBridge261(bytes?.getPointer(memScope).rawValue)
    }
}

fun g_bytes_ref(bytes: CValuesRef<GBytes>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge262(bytes?.getPointer(memScope).rawValue))
    }
}

fun g_bytes_unref(bytes: CValuesRef<GBytes>?): Unit {
    memScoped {
        return kniBridge263(bytes?.getPointer(memScope).rawValue)
    }
}

fun g_bytes_unref_to_data(bytes: CValuesRef<GBytes>?, size: CValuesRef<gsizeVar>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge264(bytes?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue))
    }
}

fun g_bytes_unref_to_array(bytes: CValuesRef<GBytes>?): CPointer<GByteArray>? {
    memScoped {
        return interpretCPointer<GByteArray>(kniBridge265(bytes?.getPointer(memScope).rawValue))
    }
}

fun g_bytes_hash(bytes: gconstpointer?): guint {
    return kniBridge266(bytes.rawValue)
}

fun g_bytes_equal(bytes1: gconstpointer?, bytes2: gconstpointer?): gboolean {
    return kniBridge267(bytes1.rawValue, bytes2.rawValue)
}

fun g_bytes_compare(bytes1: gconstpointer?, bytes2: gconstpointer?): gint {
    return kniBridge268(bytes1.rawValue, bytes2.rawValue)
}

fun g_get_charset(charset: CValuesRef<CPointerVar<ByteVar>>?): gboolean {
    memScoped {
        return kniBridge269(charset?.getPointer(memScope).rawValue)
    }
}

fun g_get_codeset(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge270())
}

fun g_get_console_charset(charset: CValuesRef<CPointerVar<ByteVar>>?): gboolean {
    memScoped {
        return kniBridge271(charset?.getPointer(memScope).rawValue)
    }
}

fun g_get_language_names(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge272())
}

fun g_get_language_names_with_category(@CCall.CString category_name: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge273(category_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_get_locale_variants(@CCall.CString locale: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge274(locale?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_checksum_type_get_length(checksum_type: GChecksumType): gssize {
    return kniBridge275(checksum_type.value)
}

fun g_checksum_new(checksum_type: GChecksumType): CPointer<GChecksum>? {
    return interpretCPointer<GChecksum>(kniBridge276(checksum_type.value))
}

fun g_checksum_reset(checksum: CValuesRef<GChecksum>?): Unit {
    memScoped {
        return kniBridge277(checksum?.getPointer(memScope).rawValue)
    }
}

fun g_checksum_copy(checksum: CValuesRef<GChecksum>?): CPointer<GChecksum>? {
    memScoped {
        return interpretCPointer<GChecksum>(kniBridge278(checksum?.getPointer(memScope).rawValue))
    }
}

fun g_checksum_free(checksum: CValuesRef<GChecksum>?): Unit {
    memScoped {
        return kniBridge279(checksum?.getPointer(memScope).rawValue)
    }
}

fun g_checksum_update(checksum: CValuesRef<GChecksum>?, data: CValuesRef<gucharVar>?, length: gssize): Unit {
    memScoped {
        return kniBridge280(checksum?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, length)
    }
}

fun g_checksum_get_string(checksum: CValuesRef<GChecksum>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge281(checksum?.getPointer(memScope).rawValue))
    }
}

fun g_checksum_get_digest(checksum: CValuesRef<GChecksum>?, buffer: CValuesRef<guint8Var>?, digest_len: CValuesRef<gsizeVar>?): Unit {
    memScoped {
        return kniBridge282(checksum?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, digest_len?.getPointer(memScope).rawValue)
    }
}

fun g_compute_checksum_for_data(checksum_type: GChecksumType, data: CValuesRef<gucharVar>?, length: gsize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge283(checksum_type.value, data?.getPointer(memScope).rawValue, length))
    }
}

fun g_compute_checksum_for_string(checksum_type: GChecksumType, @CCall.CString str: String?, length: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge284(checksum_type.value, str?.cstr?.getPointer(memScope).rawValue, length))
    }
}

fun g_compute_checksum_for_bytes(checksum_type: GChecksumType, data: CValuesRef<GBytes>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge285(checksum_type.value, data?.getPointer(memScope).rawValue))
    }
}

fun g_convert_error_quark(): GQuark {
    return kniBridge286()
}

fun g_iconv_open(@CCall.CString to_codeset: String?, @CCall.CString from_codeset: String?): GIConv? {
    memScoped {
        return interpretCPointer<_GIConv>(kniBridge287(to_codeset?.cstr?.getPointer(memScope).rawValue, from_codeset?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_iconv(converter: GIConv?, inbuf: CValuesRef<CPointerVar<gcharVar>>?, inbytes_left: CValuesRef<gsizeVar>?, outbuf: CValuesRef<CPointerVar<gcharVar>>?, outbytes_left: CValuesRef<gsizeVar>?): gsize {
    memScoped {
        return kniBridge288(converter.rawValue, inbuf?.getPointer(memScope).rawValue, inbytes_left?.getPointer(memScope).rawValue, outbuf?.getPointer(memScope).rawValue, outbytes_left?.getPointer(memScope).rawValue)
    }
}

fun g_iconv_close(converter: GIConv?): gint {
    return kniBridge289(converter.rawValue)
}

fun g_convert(@CCall.CString str: String?, len: gssize, @CCall.CString to_codeset: String?, @CCall.CString from_codeset: String?, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge290(str?.cstr?.getPointer(memScope).rawValue, len, to_codeset?.cstr?.getPointer(memScope).rawValue, from_codeset?.cstr?.getPointer(memScope).rawValue, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_convert_with_iconv(@CCall.CString str: String?, len: gssize, converter: GIConv?, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge291(str?.cstr?.getPointer(memScope).rawValue, len, converter.rawValue, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_convert_with_fallback(@CCall.CString str: String?, len: gssize, @CCall.CString to_codeset: String?, @CCall.CString from_codeset: String?, @CCall.CString fallback: String?, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge292(str?.cstr?.getPointer(memScope).rawValue, len, to_codeset?.cstr?.getPointer(memScope).rawValue, from_codeset?.cstr?.getPointer(memScope).rawValue, fallback?.cstr?.getPointer(memScope).rawValue, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_locale_to_utf8(@CCall.CString opsysstring: String?, len: gssize, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge293(opsysstring?.cstr?.getPointer(memScope).rawValue, len, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_locale_from_utf8(@CCall.CString utf8string: String?, len: gssize, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge294(utf8string?.cstr?.getPointer(memScope).rawValue, len, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_filename_to_utf8(@CCall.CString opsysstring: String?, len: gssize, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge295(opsysstring?.cstr?.getPointer(memScope).rawValue, len, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_filename_from_utf8(@CCall.CString utf8string: String?, len: gssize, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge296(utf8string?.cstr?.getPointer(memScope).rawValue, len, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_filename_from_uri(@CCall.CString uri: String?, hostname: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge297(uri?.cstr?.getPointer(memScope).rawValue, hostname?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_filename_to_uri(@CCall.CString filename: String?, @CCall.CString hostname: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge298(filename?.cstr?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_filename_display_name(@CCall.CString filename: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge299(filename?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_get_filename_charsets(filename_charsets: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?): gboolean {
    memScoped {
        return kniBridge300(filename_charsets?.getPointer(memScope).rawValue)
    }
}

fun g_filename_display_basename(@CCall.CString filename: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge301(filename?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_uri_list_extract_uris(@CCall.CString uri_list: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge302(uri_list?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_datalist_init(datalist: CValuesRef<CPointerVar<GData>>?): Unit {
    memScoped {
        return kniBridge303(datalist?.getPointer(memScope).rawValue)
    }
}

fun g_datalist_clear(datalist: CValuesRef<CPointerVar<GData>>?): Unit {
    memScoped {
        return kniBridge304(datalist?.getPointer(memScope).rawValue)
    }
}

fun g_datalist_id_get_data(datalist: CValuesRef<CPointerVar<GData>>?, key_id: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge305(datalist?.getPointer(memScope).rawValue, key_id))
    }
}

fun g_datalist_id_set_data_full(datalist: CValuesRef<CPointerVar<GData>>?, key_id: GQuark, data: gpointer?, destroy_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge306(datalist?.getPointer(memScope).rawValue, key_id, data.rawValue, destroy_func.rawValue)
    }
}

fun g_datalist_id_dup_data(datalist: CValuesRef<CPointerVar<GData>>?, key_id: GQuark, dup_func: GDuplicateFunc?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge307(datalist?.getPointer(memScope).rawValue, key_id, dup_func.rawValue, user_data.rawValue))
    }
}

fun g_datalist_id_replace_data(datalist: CValuesRef<CPointerVar<GData>>?, key_id: GQuark, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, old_destroy: CValuesRef<GDestroyNotifyVar>?): gboolean {
    memScoped {
        return kniBridge308(datalist?.getPointer(memScope).rawValue, key_id, oldval.rawValue, newval.rawValue, destroy.rawValue, old_destroy?.getPointer(memScope).rawValue)
    }
}

fun g_datalist_id_remove_no_notify(datalist: CValuesRef<CPointerVar<GData>>?, key_id: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge309(datalist?.getPointer(memScope).rawValue, key_id))
    }
}

fun g_datalist_foreach(datalist: CValuesRef<CPointerVar<GData>>?, func: GDataForeachFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge310(datalist?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_datalist_set_flags(datalist: CValuesRef<CPointerVar<GData>>?, flags: guint): Unit {
    memScoped {
        return kniBridge311(datalist?.getPointer(memScope).rawValue, flags)
    }
}

fun g_datalist_unset_flags(datalist: CValuesRef<CPointerVar<GData>>?, flags: guint): Unit {
    memScoped {
        return kniBridge312(datalist?.getPointer(memScope).rawValue, flags)
    }
}

fun g_datalist_get_flags(datalist: CValuesRef<CPointerVar<GData>>?): guint {
    memScoped {
        return kniBridge313(datalist?.getPointer(memScope).rawValue)
    }
}

fun g_dataset_destroy(dataset_location: gconstpointer?): Unit {
    return kniBridge314(dataset_location.rawValue)
}

fun g_dataset_id_get_data(dataset_location: gconstpointer?, key_id: GQuark): gpointer? {
    return interpretCPointer<COpaque>(kniBridge315(dataset_location.rawValue, key_id))
}

fun g_datalist_get_data(datalist: CValuesRef<CPointerVar<GData>>?, @CCall.CString key: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge316(datalist?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dataset_id_set_data_full(dataset_location: gconstpointer?, key_id: GQuark, data: gpointer?, destroy_func: GDestroyNotify?): Unit {
    return kniBridge317(dataset_location.rawValue, key_id, data.rawValue, destroy_func.rawValue)
}

fun g_dataset_id_remove_no_notify(dataset_location: gconstpointer?, key_id: GQuark): gpointer? {
    return interpretCPointer<COpaque>(kniBridge318(dataset_location.rawValue, key_id))
}

fun g_dataset_foreach(dataset_location: gconstpointer?, func: GDataForeachFunc?, user_data: gpointer?): Unit {
    return kniBridge319(dataset_location.rawValue, func.rawValue, user_data.rawValue)
}

fun g_date_new(): CPointer<GDate>? {
    return interpretCPointer<GDate>(kniBridge320())
}

fun g_date_new_dmy(day: GDateDay, month: GDateMonth, year: GDateYear): CPointer<GDate>? {
    return interpretCPointer<GDate>(kniBridge321(day, month, year))
}

fun g_date_new_julian(julian_day: guint32): CPointer<GDate>? {
    return interpretCPointer<GDate>(kniBridge322(julian_day))
}

fun g_date_free(date: CValuesRef<GDate>?): Unit {
    memScoped {
        return kniBridge323(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_copy(date: CValuesRef<GDate>?): CPointer<GDate>? {
    memScoped {
        return interpretCPointer<GDate>(kniBridge324(date?.getPointer(memScope).rawValue))
    }
}

fun g_date_valid(date: CValuesRef<GDate>?): gboolean {
    memScoped {
        return kniBridge325(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_valid_day(day: GDateDay): gboolean {
    return kniBridge326(day)
}

fun g_date_valid_month(month: GDateMonth): gboolean {
    return kniBridge327(month)
}

fun g_date_valid_year(year: GDateYear): gboolean {
    return kniBridge328(year)
}

fun g_date_valid_weekday(weekday: GDateWeekday): gboolean {
    return kniBridge329(weekday)
}

fun g_date_valid_julian(julian_date: guint32): gboolean {
    return kniBridge330(julian_date)
}

fun g_date_valid_dmy(day: GDateDay, month: GDateMonth, year: GDateYear): gboolean {
    return kniBridge331(day, month, year)
}

fun g_date_get_weekday(date: CValuesRef<GDate>?): GDateWeekday {
    memScoped {
        return kniBridge332(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_month(date: CValuesRef<GDate>?): GDateMonth {
    memScoped {
        return kniBridge333(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_year(date: CValuesRef<GDate>?): GDateYear {
    memScoped {
        return kniBridge334(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_day(date: CValuesRef<GDate>?): GDateDay {
    memScoped {
        return kniBridge335(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_julian(date: CValuesRef<GDate>?): guint32 {
    memScoped {
        return kniBridge336(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_day_of_year(date: CValuesRef<GDate>?): guint {
    memScoped {
        return kniBridge337(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_monday_week_of_year(date: CValuesRef<GDate>?): guint {
    memScoped {
        return kniBridge338(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_sunday_week_of_year(date: CValuesRef<GDate>?): guint {
    memScoped {
        return kniBridge339(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_get_iso8601_week_of_year(date: CValuesRef<GDate>?): guint {
    memScoped {
        return kniBridge340(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_clear(date: CValuesRef<GDate>?, n_dates: guint): Unit {
    memScoped {
        return kniBridge341(date?.getPointer(memScope).rawValue, n_dates)
    }
}

fun g_date_set_parse(date: CValuesRef<GDate>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge342(date?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_date_set_time_t(date: CValuesRef<GDate>?, timet: time_t): Unit {
    memScoped {
        return kniBridge343(date?.getPointer(memScope).rawValue, timet)
    }
}

fun g_date_set_time_val(date: CValuesRef<GDate>?, timeval: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge344(date?.getPointer(memScope).rawValue, timeval?.getPointer(memScope).rawValue)
    }
}

fun g_date_set_time(date: CValuesRef<GDate>?, time_: GTime): Unit {
    memScoped {
        return kniBridge345(date?.getPointer(memScope).rawValue, time_)
    }
}

fun g_date_set_month(date: CValuesRef<GDate>?, month: GDateMonth): Unit {
    memScoped {
        return kniBridge346(date?.getPointer(memScope).rawValue, month)
    }
}

fun g_date_set_day(date: CValuesRef<GDate>?, day: GDateDay): Unit {
    memScoped {
        return kniBridge347(date?.getPointer(memScope).rawValue, day)
    }
}

fun g_date_set_year(date: CValuesRef<GDate>?, year: GDateYear): Unit {
    memScoped {
        return kniBridge348(date?.getPointer(memScope).rawValue, year)
    }
}

fun g_date_set_dmy(date: CValuesRef<GDate>?, day: GDateDay, month: GDateMonth, y: GDateYear): Unit {
    memScoped {
        return kniBridge349(date?.getPointer(memScope).rawValue, day, month, y)
    }
}

fun g_date_set_julian(date: CValuesRef<GDate>?, julian_date: guint32): Unit {
    memScoped {
        return kniBridge350(date?.getPointer(memScope).rawValue, julian_date)
    }
}

fun g_date_is_first_of_month(date: CValuesRef<GDate>?): gboolean {
    memScoped {
        return kniBridge351(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_is_last_of_month(date: CValuesRef<GDate>?): gboolean {
    memScoped {
        return kniBridge352(date?.getPointer(memScope).rawValue)
    }
}

fun g_date_add_days(date: CValuesRef<GDate>?, n_days: guint): Unit {
    memScoped {
        return kniBridge353(date?.getPointer(memScope).rawValue, n_days)
    }
}

fun g_date_subtract_days(date: CValuesRef<GDate>?, n_days: guint): Unit {
    memScoped {
        return kniBridge354(date?.getPointer(memScope).rawValue, n_days)
    }
}

fun g_date_add_months(date: CValuesRef<GDate>?, n_months: guint): Unit {
    memScoped {
        return kniBridge355(date?.getPointer(memScope).rawValue, n_months)
    }
}

fun g_date_subtract_months(date: CValuesRef<GDate>?, n_months: guint): Unit {
    memScoped {
        return kniBridge356(date?.getPointer(memScope).rawValue, n_months)
    }
}

fun g_date_add_years(date: CValuesRef<GDate>?, n_years: guint): Unit {
    memScoped {
        return kniBridge357(date?.getPointer(memScope).rawValue, n_years)
    }
}

fun g_date_subtract_years(date: CValuesRef<GDate>?, n_years: guint): Unit {
    memScoped {
        return kniBridge358(date?.getPointer(memScope).rawValue, n_years)
    }
}

fun g_date_is_leap_year(year: GDateYear): gboolean {
    return kniBridge359(year)
}

fun g_date_get_days_in_month(month: GDateMonth, year: GDateYear): guint8 {
    return kniBridge360(month, year)
}

fun g_date_get_monday_weeks_in_year(year: GDateYear): guint8 {
    return kniBridge361(year)
}

fun g_date_get_sunday_weeks_in_year(year: GDateYear): guint8 {
    return kniBridge362(year)
}

fun g_date_days_between(date1: CValuesRef<GDate>?, date2: CValuesRef<GDate>?): gint {
    memScoped {
        return kniBridge363(date1?.getPointer(memScope).rawValue, date2?.getPointer(memScope).rawValue)
    }
}

fun g_date_compare(lhs: CValuesRef<GDate>?, rhs: CValuesRef<GDate>?): gint {
    memScoped {
        return kniBridge364(lhs?.getPointer(memScope).rawValue, rhs?.getPointer(memScope).rawValue)
    }
}

fun g_date_to_struct_tm(date: CValuesRef<GDate>?, tm: CValuesRef<tm>?): Unit {
    memScoped {
        return kniBridge365(date?.getPointer(memScope).rawValue, tm?.getPointer(memScope).rawValue)
    }
}

fun g_date_clamp(date: CValuesRef<GDate>?, min_date: CValuesRef<GDate>?, max_date: CValuesRef<GDate>?): Unit {
    memScoped {
        return kniBridge366(date?.getPointer(memScope).rawValue, min_date?.getPointer(memScope).rawValue, max_date?.getPointer(memScope).rawValue)
    }
}

fun g_date_order(date1: CValuesRef<GDate>?, date2: CValuesRef<GDate>?): Unit {
    memScoped {
        return kniBridge367(date1?.getPointer(memScope).rawValue, date2?.getPointer(memScope).rawValue)
    }
}

fun g_date_strftime(s: CValuesRef<gcharVar>?, slen: gsize, @CCall.CString format: String?, date: CValuesRef<GDate>?): gsize {
    memScoped {
        return kniBridge368(s?.getPointer(memScope).rawValue, slen, format?.cstr?.getPointer(memScope).rawValue, date?.getPointer(memScope).rawValue)
    }
}

fun g_time_zone_new(@CCall.CString identifier: String?): CPointer<GTimeZone>? {
    memScoped {
        return interpretCPointer<GTimeZone>(kniBridge369(identifier?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_time_zone_new_utc(): CPointer<GTimeZone>? {
    return interpretCPointer<GTimeZone>(kniBridge370())
}

fun g_time_zone_new_local(): CPointer<GTimeZone>? {
    return interpretCPointer<GTimeZone>(kniBridge371())
}

fun g_time_zone_new_offset(seconds: gint32): CPointer<GTimeZone>? {
    return interpretCPointer<GTimeZone>(kniBridge372(seconds))
}

fun g_time_zone_ref(tz: CValuesRef<GTimeZone>?): CPointer<GTimeZone>? {
    memScoped {
        return interpretCPointer<GTimeZone>(kniBridge373(tz?.getPointer(memScope).rawValue))
    }
}

fun g_time_zone_unref(tz: CValuesRef<GTimeZone>?): Unit {
    memScoped {
        return kniBridge374(tz?.getPointer(memScope).rawValue)
    }
}

fun g_time_zone_find_interval(tz: CValuesRef<GTimeZone>?, type: GTimeType, time_: gint64): gint {
    memScoped {
        return kniBridge375(tz?.getPointer(memScope).rawValue, type.value, time_)
    }
}

fun g_time_zone_adjust_time(tz: CValuesRef<GTimeZone>?, type: GTimeType, time_: CValuesRef<gint64Var>?): gint {
    memScoped {
        return kniBridge376(tz?.getPointer(memScope).rawValue, type.value, time_?.getPointer(memScope).rawValue)
    }
}

fun g_time_zone_get_abbreviation(tz: CValuesRef<GTimeZone>?, interval: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge377(tz?.getPointer(memScope).rawValue, interval))
    }
}

fun g_time_zone_get_offset(tz: CValuesRef<GTimeZone>?, interval: gint): gint32 {
    memScoped {
        return kniBridge378(tz?.getPointer(memScope).rawValue, interval)
    }
}

fun g_time_zone_is_dst(tz: CValuesRef<GTimeZone>?, interval: gint): gboolean {
    memScoped {
        return kniBridge379(tz?.getPointer(memScope).rawValue, interval)
    }
}

fun g_time_zone_get_identifier(tz: CValuesRef<GTimeZone>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge380(tz?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_unref(datetime: CValuesRef<GDateTime>?): Unit {
    memScoped {
        return kniBridge381(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_ref(datetime: CValuesRef<GDateTime>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge382(datetime?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_new_now(tz: CValuesRef<GTimeZone>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge383(tz?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_new_now_local(): CPointer<GDateTime>? {
    return interpretCPointer<GDateTime>(kniBridge384())
}

fun g_date_time_new_now_utc(): CPointer<GDateTime>? {
    return interpretCPointer<GDateTime>(kniBridge385())
}

fun g_date_time_new_from_unix_local(t: gint64): CPointer<GDateTime>? {
    return interpretCPointer<GDateTime>(kniBridge386(t))
}

fun g_date_time_new_from_unix_utc(t: gint64): CPointer<GDateTime>? {
    return interpretCPointer<GDateTime>(kniBridge387(t))
}

fun g_date_time_new_from_timeval_local(tv: CValuesRef<GTimeVal>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge388(tv?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_new_from_timeval_utc(tv: CValuesRef<GTimeVal>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge389(tv?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_new_from_iso8601(@CCall.CString text: String?, default_tz: CValuesRef<GTimeZone>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge390(text?.cstr?.getPointer(memScope).rawValue, default_tz?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_new(tz: CValuesRef<GTimeZone>?, year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge391(tz?.getPointer(memScope).rawValue, year, month, day, hour, minute, seconds))
    }
}

fun g_date_time_new_local(year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble): CPointer<GDateTime>? {
    return interpretCPointer<GDateTime>(kniBridge392(year, month, day, hour, minute, seconds))
}

fun g_date_time_new_utc(year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble): CPointer<GDateTime>? {
    return interpretCPointer<GDateTime>(kniBridge393(year, month, day, hour, minute, seconds))
}

fun g_date_time_add(datetime: CValuesRef<GDateTime>?, timespan: GTimeSpan): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge394(datetime?.getPointer(memScope).rawValue, timespan))
    }
}

fun g_date_time_add_years(datetime: CValuesRef<GDateTime>?, years: gint): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge395(datetime?.getPointer(memScope).rawValue, years))
    }
}

fun g_date_time_add_months(datetime: CValuesRef<GDateTime>?, months: gint): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge396(datetime?.getPointer(memScope).rawValue, months))
    }
}

fun g_date_time_add_weeks(datetime: CValuesRef<GDateTime>?, weeks: gint): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge397(datetime?.getPointer(memScope).rawValue, weeks))
    }
}

fun g_date_time_add_days(datetime: CValuesRef<GDateTime>?, days: gint): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge398(datetime?.getPointer(memScope).rawValue, days))
    }
}

fun g_date_time_add_hours(datetime: CValuesRef<GDateTime>?, hours: gint): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge399(datetime?.getPointer(memScope).rawValue, hours))
    }
}

fun g_date_time_add_minutes(datetime: CValuesRef<GDateTime>?, minutes: gint): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge400(datetime?.getPointer(memScope).rawValue, minutes))
    }
}

fun g_date_time_add_seconds(datetime: CValuesRef<GDateTime>?, seconds: gdouble): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge401(datetime?.getPointer(memScope).rawValue, seconds))
    }
}

fun g_date_time_add_full(datetime: CValuesRef<GDateTime>?, years: gint, months: gint, days: gint, hours: gint, minutes: gint, seconds: gdouble): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge402(datetime?.getPointer(memScope).rawValue, years, months, days, hours, minutes, seconds))
    }
}

fun g_date_time_compare(dt1: gconstpointer?, dt2: gconstpointer?): gint {
    return kniBridge403(dt1.rawValue, dt2.rawValue)
}

fun g_date_time_difference(end: CValuesRef<GDateTime>?, begin: CValuesRef<GDateTime>?): GTimeSpan {
    memScoped {
        return kniBridge404(end?.getPointer(memScope).rawValue, begin?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_hash(datetime: gconstpointer?): guint {
    return kniBridge405(datetime.rawValue)
}

fun g_date_time_equal(dt1: gconstpointer?, dt2: gconstpointer?): gboolean {
    return kniBridge406(dt1.rawValue, dt2.rawValue)
}

fun g_date_time_get_ymd(datetime: CValuesRef<GDateTime>?, year: CValuesRef<gintVar>?, month: CValuesRef<gintVar>?, day: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge407(datetime?.getPointer(memScope).rawValue, year?.getPointer(memScope).rawValue, month?.getPointer(memScope).rawValue, day?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_year(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge408(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_month(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge409(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_day_of_month(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge410(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_week_numbering_year(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge411(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_week_of_year(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge412(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_day_of_week(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge413(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_day_of_year(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge414(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_hour(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge415(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_minute(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge416(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_second(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge417(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_microsecond(datetime: CValuesRef<GDateTime>?): gint {
    memScoped {
        return kniBridge418(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_seconds(datetime: CValuesRef<GDateTime>?): gdouble {
    memScoped {
        return kniBridge419(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_to_unix(datetime: CValuesRef<GDateTime>?): gint64 {
    memScoped {
        return kniBridge420(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_to_timeval(datetime: CValuesRef<GDateTime>?, tv: CValuesRef<GTimeVal>?): gboolean {
    memScoped {
        return kniBridge421(datetime?.getPointer(memScope).rawValue, tv?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_utc_offset(datetime: CValuesRef<GDateTime>?): GTimeSpan {
    memScoped {
        return kniBridge422(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_get_timezone(datetime: CValuesRef<GDateTime>?): CPointer<GTimeZone>? {
    memScoped {
        return interpretCPointer<GTimeZone>(kniBridge423(datetime?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_get_timezone_abbreviation(datetime: CValuesRef<GDateTime>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge424(datetime?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_is_daylight_savings(datetime: CValuesRef<GDateTime>?): gboolean {
    memScoped {
        return kniBridge425(datetime?.getPointer(memScope).rawValue)
    }
}

fun g_date_time_to_timezone(datetime: CValuesRef<GDateTime>?, tz: CValuesRef<GTimeZone>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge426(datetime?.getPointer(memScope).rawValue, tz?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_to_local(datetime: CValuesRef<GDateTime>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge427(datetime?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_to_utc(datetime: CValuesRef<GDateTime>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge428(datetime?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_format(datetime: CValuesRef<GDateTime>?, @CCall.CString format: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge429(datetime?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_date_time_format_iso8601(datetime: CValuesRef<GDateTime>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge430(datetime?.getPointer(memScope).rawValue))
    }
}

fun g_dir_open(@CCall.CString path: String?, flags: guint, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDir>? {
    memScoped {
        return interpretCPointer<GDir>(kniBridge431(path?.cstr?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_dir_read_name(dir: CValuesRef<GDir>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge432(dir?.getPointer(memScope).rawValue))
    }
}

fun g_dir_rewind(dir: CValuesRef<GDir>?): Unit {
    memScoped {
        return kniBridge433(dir?.getPointer(memScope).rawValue)
    }
}

fun g_dir_close(dir: CValuesRef<GDir>?): Unit {
    memScoped {
        return kniBridge434(dir?.getPointer(memScope).rawValue)
    }
}

fun g_getenv(@CCall.CString variable: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge435(variable?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_setenv(@CCall.CString variable: String?, @CCall.CString value: String?, overwrite: gboolean): gboolean {
    memScoped {
        return kniBridge436(variable?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, overwrite)
    }
}

fun g_unsetenv(@CCall.CString variable: String?): Unit {
    memScoped {
        return kniBridge437(variable?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_listenv(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge438())
}

fun g_get_environ(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge439())
}

fun g_environ_getenv(envp: CValuesRef<CPointerVar<gcharVar>>?, @CCall.CString variable: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge440(envp?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_environ_setenv(envp: CValuesRef<CPointerVar<gcharVar>>?, @CCall.CString variable: String?, @CCall.CString value: String?, overwrite: gboolean): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge441(envp?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, overwrite))
    }
}

fun g_environ_unsetenv(envp: CValuesRef<CPointerVar<gcharVar>>?, @CCall.CString variable: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge442(envp?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_error_quark(): GQuark {
    return kniBridge443()
}

fun g_file_error_from_errno(err_no: gint): GFileError {
    return GFileError.byValue(kniBridge444(err_no))
}

fun g_file_test(@CCall.CString filename: String?, test: GFileTest): gboolean {
    memScoped {
        return kniBridge445(filename?.cstr?.getPointer(memScope).rawValue, test)
    }
}

fun g_file_get_contents(@CCall.CString filename: String?, contents: CValuesRef<CPointerVar<gcharVar>>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge446(filename?.cstr?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_contents(@CCall.CString filename: String?, @CCall.CString contents: String?, length: gssize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge447(filename?.cstr?.getPointer(memScope).rawValue, contents?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_read_link(@CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge448(filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_mkdtemp(tmpl: CValuesRef<gcharVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge449(tmpl?.getPointer(memScope).rawValue))
    }
}

fun g_mkdtemp_full(tmpl: CValuesRef<gcharVar>?, mode: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge450(tmpl?.getPointer(memScope).rawValue, mode))
    }
}

fun g_mkstemp(tmpl: CValuesRef<gcharVar>?): gint {
    memScoped {
        return kniBridge451(tmpl?.getPointer(memScope).rawValue)
    }
}

fun g_mkstemp_full(tmpl: CValuesRef<gcharVar>?, flags: gint, mode: gint): gint {
    memScoped {
        return kniBridge452(tmpl?.getPointer(memScope).rawValue, flags, mode)
    }
}

fun g_file_open_tmp(@CCall.CString tmpl: String?, name_used: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge453(tmpl?.cstr?.getPointer(memScope).rawValue, name_used?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dir_make_tmp(@CCall.CString tmpl: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge454(tmpl?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources5")
external fun g_build_path(@CCall.CString separator: String?, @CCall.CString first_element: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_build_pathv(@CCall.CString separator: String?, args: CValuesRef<CPointerVar<gcharVar>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge455(separator?.cstr?.getPointer(memScope).rawValue, args?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources6")
external fun g_build_filename(@CCall.CString first_element: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_build_filenamev(args: CValuesRef<CPointerVar<gcharVar>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge456(args?.getPointer(memScope).rawValue))
    }
}

fun g_build_filename_valist(@CCall.CString first_element: String?, args: va_list?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge457(first_element?.cstr?.getPointer(memScope).rawValue, args.rawValue))
    }
}

fun g_mkdir_with_parents(@CCall.CString pathname: String?, mode: gint): gint {
    memScoped {
        return kniBridge458(pathname?.cstr?.getPointer(memScope).rawValue, mode)
    }
}

fun g_path_is_absolute(@CCall.CString file_name: String?): gboolean {
    memScoped {
        return kniBridge459(file_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_path_skip_root(@CCall.CString file_name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge460(file_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_basename(@CCall.CString file_name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge461(file_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_get_current_dir(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge462())
}

fun g_path_get_basename(@CCall.CString file_name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge463(file_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_path_get_dirname(@CCall.CString file_name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge464(file_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_canonicalize_filename(@CCall.CString filename: String?, @CCall.CString relative_to: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge465(filename?.cstr?.getPointer(memScope).rawValue, relative_to?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_strip_context(@CCall.CString msgid: String?, @CCall.CString msgval: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge466(msgid?.cstr?.getPointer(memScope).rawValue, msgval?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dgettext(@CCall.CString domain: String?, @CCall.CString msgid: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge467(domain?.cstr?.getPointer(memScope).rawValue, msgid?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dcgettext(@CCall.CString domain: String?, @CCall.CString msgid: String?, category: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge468(domain?.cstr?.getPointer(memScope).rawValue, msgid?.cstr?.getPointer(memScope).rawValue, category))
    }
}

fun g_dngettext(@CCall.CString domain: String?, @CCall.CString msgid: String?, @CCall.CString msgid_plural: String?, n: gulong): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge469(domain?.cstr?.getPointer(memScope).rawValue, msgid?.cstr?.getPointer(memScope).rawValue, msgid_plural?.cstr?.getPointer(memScope).rawValue, n))
    }
}

fun g_dpgettext(@CCall.CString domain: String?, @CCall.CString msgctxtid: String?, msgidoffset: gsize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge470(domain?.cstr?.getPointer(memScope).rawValue, msgctxtid?.cstr?.getPointer(memScope).rawValue, msgidoffset))
    }
}

fun g_dpgettext2(@CCall.CString domain: String?, @CCall.CString context: String?, @CCall.CString msgid: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge471(domain?.cstr?.getPointer(memScope).rawValue, context?.cstr?.getPointer(memScope).rawValue, msgid?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_free(mem: gpointer?): Unit {
    return kniBridge472(mem.rawValue)
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_clear_pointer(pp: CValuesRef<gpointerVar>?, destroy: GDestroyNotify?): Unit = throw UnsupportedOperationException()

fun g_malloc(n_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge474(n_bytes))
}

fun g_malloc0(n_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge475(n_bytes))
}

fun g_realloc(mem: gpointer?, n_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge476(mem.rawValue, n_bytes))
}

fun g_try_malloc(n_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge477(n_bytes))
}

fun g_try_malloc0(n_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge478(n_bytes))
}

fun g_try_realloc(mem: gpointer?, n_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge479(mem.rawValue, n_bytes))
}

fun g_malloc_n(n_blocks: gsize, n_block_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge480(n_blocks, n_block_bytes))
}

fun g_malloc0_n(n_blocks: gsize, n_block_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge481(n_blocks, n_block_bytes))
}

fun g_realloc_n(mem: gpointer?, n_blocks: gsize, n_block_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge482(mem.rawValue, n_blocks, n_block_bytes))
}

fun g_try_malloc_n(n_blocks: gsize, n_block_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge483(n_blocks, n_block_bytes))
}

fun g_try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge484(n_blocks, n_block_bytes))
}

fun g_try_realloc_n(mem: gpointer?, n_blocks: gsize, n_block_bytes: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge485(mem.rawValue, n_blocks, n_block_bytes))
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_steal_pointer(pp: gpointer?): gpointer? = throw UnsupportedOperationException()

fun g_mem_set_vtable(vtable: CValuesRef<GMemVTable>?): Unit {
    memScoped {
        return kniBridge487(vtable?.getPointer(memScope).rawValue)
    }
}

fun g_mem_is_system_malloc(): gboolean {
    return kniBridge488()
}

fun g_mem_profile(): Unit {
    return kniBridge489()
}

fun g_node_new(data: gpointer?): CPointer<GNode>? {
    return interpretCPointer<GNode>(kniBridge490(data.rawValue))
}

fun g_node_destroy(root: CValuesRef<GNode>?): Unit {
    memScoped {
        return kniBridge491(root?.getPointer(memScope).rawValue)
    }
}

fun g_node_unlink(node: CValuesRef<GNode>?): Unit {
    memScoped {
        return kniBridge492(node?.getPointer(memScope).rawValue)
    }
}

fun g_node_copy_deep(node: CValuesRef<GNode>?, copy_func: GCopyFunc?, data: gpointer?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge493(node?.getPointer(memScope).rawValue, copy_func.rawValue, data.rawValue))
    }
}

fun g_node_copy(node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge494(node?.getPointer(memScope).rawValue))
    }
}

fun g_node_insert(parent: CValuesRef<GNode>?, position: gint, node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge495(parent?.getPointer(memScope).rawValue, position, node?.getPointer(memScope).rawValue))
    }
}

fun g_node_insert_before(parent: CValuesRef<GNode>?, sibling: CValuesRef<GNode>?, node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge496(parent?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, node?.getPointer(memScope).rawValue))
    }
}

fun g_node_insert_after(parent: CValuesRef<GNode>?, sibling: CValuesRef<GNode>?, node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge497(parent?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, node?.getPointer(memScope).rawValue))
    }
}

fun g_node_prepend(parent: CValuesRef<GNode>?, node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge498(parent?.getPointer(memScope).rawValue, node?.getPointer(memScope).rawValue))
    }
}

fun g_node_n_nodes(root: CValuesRef<GNode>?, flags: GTraverseFlags): guint {
    memScoped {
        return kniBridge499(root?.getPointer(memScope).rawValue, flags)
    }
}

fun g_node_get_root(node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge500(node?.getPointer(memScope).rawValue))
    }
}

fun g_node_is_ancestor(node: CValuesRef<GNode>?, descendant: CValuesRef<GNode>?): gboolean {
    memScoped {
        return kniBridge501(node?.getPointer(memScope).rawValue, descendant?.getPointer(memScope).rawValue)
    }
}

fun g_node_depth(node: CValuesRef<GNode>?): guint {
    memScoped {
        return kniBridge502(node?.getPointer(memScope).rawValue)
    }
}

fun g_node_find(root: CValuesRef<GNode>?, order: GTraverseType, flags: GTraverseFlags, data: gpointer?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge503(root?.getPointer(memScope).rawValue, order.value, flags, data.rawValue))
    }
}

fun g_node_traverse(root: CValuesRef<GNode>?, order: GTraverseType, flags: GTraverseFlags, max_depth: gint, func: GNodeTraverseFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge504(root?.getPointer(memScope).rawValue, order.value, flags, max_depth, func.rawValue, data.rawValue)
    }
}

fun g_node_max_height(root: CValuesRef<GNode>?): guint {
    memScoped {
        return kniBridge505(root?.getPointer(memScope).rawValue)
    }
}

fun g_node_children_foreach(node: CValuesRef<GNode>?, flags: GTraverseFlags, func: GNodeForeachFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge506(node?.getPointer(memScope).rawValue, flags, func.rawValue, data.rawValue)
    }
}

fun g_node_reverse_children(node: CValuesRef<GNode>?): Unit {
    memScoped {
        return kniBridge507(node?.getPointer(memScope).rawValue)
    }
}

fun g_node_n_children(node: CValuesRef<GNode>?): guint {
    memScoped {
        return kniBridge508(node?.getPointer(memScope).rawValue)
    }
}

fun g_node_nth_child(node: CValuesRef<GNode>?, n: guint): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge509(node?.getPointer(memScope).rawValue, n))
    }
}

fun g_node_last_child(node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge510(node?.getPointer(memScope).rawValue))
    }
}

fun g_node_find_child(node: CValuesRef<GNode>?, flags: GTraverseFlags, data: gpointer?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge511(node?.getPointer(memScope).rawValue, flags, data.rawValue))
    }
}

fun g_node_child_position(node: CValuesRef<GNode>?, child: CValuesRef<GNode>?): gint {
    memScoped {
        return kniBridge512(node?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun g_node_child_index(node: CValuesRef<GNode>?, data: gpointer?): gint {
    memScoped {
        return kniBridge513(node?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_node_first_sibling(node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge514(node?.getPointer(memScope).rawValue))
    }
}

fun g_node_last_sibling(node: CValuesRef<GNode>?): CPointer<GNode>? {
    memScoped {
        return interpretCPointer<GNode>(kniBridge515(node?.getPointer(memScope).rawValue))
    }
}

fun g_list_alloc(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge516())
}

fun g_list_free(list: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge517(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_free_1(list: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge518(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_free_full(list: CValuesRef<GList>?, free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge519(list?.getPointer(memScope).rawValue, free_func.rawValue)
    }
}

fun g_list_append(list: CValuesRef<GList>?, data: gpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge520(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_list_prepend(list: CValuesRef<GList>?, data: gpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge521(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_list_insert(list: CValuesRef<GList>?, data: gpointer?, position: gint): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge522(list?.getPointer(memScope).rawValue, data.rawValue, position))
    }
}

fun g_list_insert_sorted(list: CValuesRef<GList>?, data: gpointer?, func: GCompareFunc?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge523(list?.getPointer(memScope).rawValue, data.rawValue, func.rawValue))
    }
}

fun g_list_insert_sorted_with_data(list: CValuesRef<GList>?, data: gpointer?, func: GCompareDataFunc?, user_data: gpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge524(list?.getPointer(memScope).rawValue, data.rawValue, func.rawValue, user_data.rawValue))
    }
}

fun g_list_insert_before(list: CValuesRef<GList>?, sibling: CValuesRef<GList>?, data: gpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge525(list?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_list_insert_before_link(list: CValuesRef<GList>?, sibling: CValuesRef<GList>?, link_: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge526(list?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue))
    }
}

fun g_list_concat(list1: CValuesRef<GList>?, list2: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge527(list1?.getPointer(memScope).rawValue, list2?.getPointer(memScope).rawValue))
    }
}

fun g_list_remove(list: CValuesRef<GList>?, data: gconstpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge528(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_list_remove_all(list: CValuesRef<GList>?, data: gconstpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge529(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_list_remove_link(list: CValuesRef<GList>?, llink: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge530(list?.getPointer(memScope).rawValue, llink?.getPointer(memScope).rawValue))
    }
}

fun g_list_delete_link(list: CValuesRef<GList>?, link_: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge531(list?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue))
    }
}

fun g_list_reverse(list: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge532(list?.getPointer(memScope).rawValue))
    }
}

fun g_list_copy(list: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge533(list?.getPointer(memScope).rawValue))
    }
}

fun g_list_copy_deep(list: CValuesRef<GList>?, func: GCopyFunc?, user_data: gpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge534(list?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue))
    }
}

fun g_list_nth(list: CValuesRef<GList>?, n: guint): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge535(list?.getPointer(memScope).rawValue, n))
    }
}

fun g_list_nth_prev(list: CValuesRef<GList>?, n: guint): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge536(list?.getPointer(memScope).rawValue, n))
    }
}

fun g_list_find(list: CValuesRef<GList>?, data: gconstpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge537(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_list_find_custom(list: CValuesRef<GList>?, data: gconstpointer?, func: GCompareFunc?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge538(list?.getPointer(memScope).rawValue, data.rawValue, func.rawValue))
    }
}

fun g_list_position(list: CValuesRef<GList>?, llink: CValuesRef<GList>?): gint {
    memScoped {
        return kniBridge539(list?.getPointer(memScope).rawValue, llink?.getPointer(memScope).rawValue)
    }
}

fun g_list_index(list: CValuesRef<GList>?, data: gconstpointer?): gint {
    memScoped {
        return kniBridge540(list?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_list_last(list: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge541(list?.getPointer(memScope).rawValue))
    }
}

fun g_list_first(list: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge542(list?.getPointer(memScope).rawValue))
    }
}

fun g_list_length(list: CValuesRef<GList>?): guint {
    memScoped {
        return kniBridge543(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_foreach(list: CValuesRef<GList>?, func: GFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge544(list?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_list_sort(list: CValuesRef<GList>?, compare_func: GCompareFunc?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge545(list?.getPointer(memScope).rawValue, compare_func.rawValue))
    }
}

fun g_list_sort_with_data(list: CValuesRef<GList>?, compare_func: GCompareDataFunc?, user_data: gpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge546(list?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue))
    }
}

fun g_list_nth_data(list: CValuesRef<GList>?, n: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge547(list?.getPointer(memScope).rawValue, n))
    }
}

fun g_hash_table_new(hash_func: GHashFunc?, key_equal_func: GEqualFunc?): CPointer<GHashTable>? {
    return interpretCPointer<GHashTable>(kniBridge548(hash_func.rawValue, key_equal_func.rawValue))
}

fun g_hash_table_new_full(hash_func: GHashFunc?, key_equal_func: GEqualFunc?, key_destroy_func: GDestroyNotify?, value_destroy_func: GDestroyNotify?): CPointer<GHashTable>? {
    return interpretCPointer<GHashTable>(kniBridge549(hash_func.rawValue, key_equal_func.rawValue, key_destroy_func.rawValue, value_destroy_func.rawValue))
}

fun g_hash_table_destroy(hash_table: CValuesRef<GHashTable>?): Unit {
    memScoped {
        return kniBridge550(hash_table?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_insert(hash_table: CValuesRef<GHashTable>?, key: gpointer?, value: gpointer?): gboolean {
    memScoped {
        return kniBridge551(hash_table?.getPointer(memScope).rawValue, key.rawValue, value.rawValue)
    }
}

fun g_hash_table_replace(hash_table: CValuesRef<GHashTable>?, key: gpointer?, value: gpointer?): gboolean {
    memScoped {
        return kniBridge552(hash_table?.getPointer(memScope).rawValue, key.rawValue, value.rawValue)
    }
}

fun g_hash_table_add(hash_table: CValuesRef<GHashTable>?, key: gpointer?): gboolean {
    memScoped {
        return kniBridge553(hash_table?.getPointer(memScope).rawValue, key.rawValue)
    }
}

fun g_hash_table_remove(hash_table: CValuesRef<GHashTable>?, key: gconstpointer?): gboolean {
    memScoped {
        return kniBridge554(hash_table?.getPointer(memScope).rawValue, key.rawValue)
    }
}

fun g_hash_table_remove_all(hash_table: CValuesRef<GHashTable>?): Unit {
    memScoped {
        return kniBridge555(hash_table?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_steal(hash_table: CValuesRef<GHashTable>?, key: gconstpointer?): gboolean {
    memScoped {
        return kniBridge556(hash_table?.getPointer(memScope).rawValue, key.rawValue)
    }
}

fun g_hash_table_steal_extended(hash_table: CValuesRef<GHashTable>?, lookup_key: gconstpointer?, stolen_key: CValuesRef<gpointerVar>?, stolen_value: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge557(hash_table?.getPointer(memScope).rawValue, lookup_key.rawValue, stolen_key?.getPointer(memScope).rawValue, stolen_value?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_steal_all(hash_table: CValuesRef<GHashTable>?): Unit {
    memScoped {
        return kniBridge558(hash_table?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_lookup(hash_table: CValuesRef<GHashTable>?, key: gconstpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge559(hash_table?.getPointer(memScope).rawValue, key.rawValue))
    }
}

fun g_hash_table_contains(hash_table: CValuesRef<GHashTable>?, key: gconstpointer?): gboolean {
    memScoped {
        return kniBridge560(hash_table?.getPointer(memScope).rawValue, key.rawValue)
    }
}

fun g_hash_table_lookup_extended(hash_table: CValuesRef<GHashTable>?, lookup_key: gconstpointer?, orig_key: CValuesRef<gpointerVar>?, value: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge561(hash_table?.getPointer(memScope).rawValue, lookup_key.rawValue, orig_key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_foreach(hash_table: CValuesRef<GHashTable>?, func: GHFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge562(hash_table?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_hash_table_find(hash_table: CValuesRef<GHashTable>?, predicate: GHRFunc?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge563(hash_table?.getPointer(memScope).rawValue, predicate.rawValue, user_data.rawValue))
    }
}

fun g_hash_table_foreach_remove(hash_table: CValuesRef<GHashTable>?, func: GHRFunc?, user_data: gpointer?): guint {
    memScoped {
        return kniBridge564(hash_table?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_hash_table_foreach_steal(hash_table: CValuesRef<GHashTable>?, func: GHRFunc?, user_data: gpointer?): guint {
    memScoped {
        return kniBridge565(hash_table?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_hash_table_size(hash_table: CValuesRef<GHashTable>?): guint {
    memScoped {
        return kniBridge566(hash_table?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_get_keys(hash_table: CValuesRef<GHashTable>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge567(hash_table?.getPointer(memScope).rawValue))
    }
}

fun g_hash_table_get_values(hash_table: CValuesRef<GHashTable>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge568(hash_table?.getPointer(memScope).rawValue))
    }
}

fun g_hash_table_get_keys_as_array(hash_table: CValuesRef<GHashTable>?, length: CValuesRef<guintVar>?): CPointer<gpointerVar>? {
    memScoped {
        return interpretCPointer<gpointerVar>(kniBridge569(hash_table?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_hash_table_iter_init(iter: CValuesRef<GHashTableIter>?, hash_table: CValuesRef<GHashTable>?): Unit {
    memScoped {
        return kniBridge570(iter?.getPointer(memScope).rawValue, hash_table?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_iter_next(iter: CValuesRef<GHashTableIter>?, key: CValuesRef<gpointerVar>?, value: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge571(iter?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_iter_get_hash_table(iter: CValuesRef<GHashTableIter>?): CPointer<GHashTable>? {
    memScoped {
        return interpretCPointer<GHashTable>(kniBridge572(iter?.getPointer(memScope).rawValue))
    }
}

fun g_hash_table_iter_remove(iter: CValuesRef<GHashTableIter>?): Unit {
    memScoped {
        return kniBridge573(iter?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_iter_replace(iter: CValuesRef<GHashTableIter>?, value: gpointer?): Unit {
    memScoped {
        return kniBridge574(iter?.getPointer(memScope).rawValue, value.rawValue)
    }
}

fun g_hash_table_iter_steal(iter: CValuesRef<GHashTableIter>?): Unit {
    memScoped {
        return kniBridge575(iter?.getPointer(memScope).rawValue)
    }
}

fun g_hash_table_ref(hash_table: CValuesRef<GHashTable>?): CPointer<GHashTable>? {
    memScoped {
        return interpretCPointer<GHashTable>(kniBridge576(hash_table?.getPointer(memScope).rawValue))
    }
}

fun g_hash_table_unref(hash_table: CValuesRef<GHashTable>?): Unit {
    memScoped {
        return kniBridge577(hash_table?.getPointer(memScope).rawValue)
    }
}

fun g_str_equal(v1: gconstpointer?, v2: gconstpointer?): gboolean {
    return kniBridge578(v1.rawValue, v2.rawValue)
}

fun g_str_hash(v: gconstpointer?): guint {
    return kniBridge579(v.rawValue)
}

fun g_int_equal(v1: gconstpointer?, v2: gconstpointer?): gboolean {
    return kniBridge580(v1.rawValue, v2.rawValue)
}

fun g_int_hash(v: gconstpointer?): guint {
    return kniBridge581(v.rawValue)
}

fun g_int64_equal(v1: gconstpointer?, v2: gconstpointer?): gboolean {
    return kniBridge582(v1.rawValue, v2.rawValue)
}

fun g_int64_hash(v: gconstpointer?): guint {
    return kniBridge583(v.rawValue)
}

fun g_double_equal(v1: gconstpointer?, v2: gconstpointer?): gboolean {
    return kniBridge584(v1.rawValue, v2.rawValue)
}

fun g_double_hash(v: gconstpointer?): guint {
    return kniBridge585(v.rawValue)
}

fun g_direct_hash(v: gconstpointer?): guint {
    return kniBridge586(v.rawValue)
}

fun g_direct_equal(v1: gconstpointer?, v2: gconstpointer?): gboolean {
    return kniBridge587(v1.rawValue, v2.rawValue)
}

fun g_hmac_new(digest_type: GChecksumType, key: CValuesRef<gucharVar>?, key_len: gsize): CPointer<GHmac>? {
    memScoped {
        return interpretCPointer<GHmac>(kniBridge588(digest_type.value, key?.getPointer(memScope).rawValue, key_len))
    }
}

fun g_hmac_copy(hmac: CValuesRef<GHmac>?): CPointer<GHmac>? {
    memScoped {
        return interpretCPointer<GHmac>(kniBridge589(hmac?.getPointer(memScope).rawValue))
    }
}

fun g_hmac_ref(hmac: CValuesRef<GHmac>?): CPointer<GHmac>? {
    memScoped {
        return interpretCPointer<GHmac>(kniBridge590(hmac?.getPointer(memScope).rawValue))
    }
}

fun g_hmac_unref(hmac: CValuesRef<GHmac>?): Unit {
    memScoped {
        return kniBridge591(hmac?.getPointer(memScope).rawValue)
    }
}

fun g_hmac_update(hmac: CValuesRef<GHmac>?, data: CValuesRef<gucharVar>?, length: gssize): Unit {
    memScoped {
        return kniBridge592(hmac?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, length)
    }
}

fun g_hmac_get_string(hmac: CValuesRef<GHmac>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge593(hmac?.getPointer(memScope).rawValue))
    }
}

fun g_hmac_get_digest(hmac: CValuesRef<GHmac>?, buffer: CValuesRef<guint8Var>?, digest_len: CValuesRef<gsizeVar>?): Unit {
    memScoped {
        return kniBridge594(hmac?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, digest_len?.getPointer(memScope).rawValue)
    }
}

fun g_compute_hmac_for_data(digest_type: GChecksumType, key: CValuesRef<gucharVar>?, key_len: gsize, data: CValuesRef<gucharVar>?, length: gsize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge595(digest_type.value, key?.getPointer(memScope).rawValue, key_len, data?.getPointer(memScope).rawValue, length))
    }
}

fun g_compute_hmac_for_string(digest_type: GChecksumType, key: CValuesRef<gucharVar>?, key_len: gsize, @CCall.CString str: String?, length: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge596(digest_type.value, key?.getPointer(memScope).rawValue, key_len, str?.cstr?.getPointer(memScope).rawValue, length))
    }
}

fun g_compute_hmac_for_bytes(digest_type: GChecksumType, key: CValuesRef<GBytes>?, data: CValuesRef<GBytes>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge597(digest_type.value, key?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue))
    }
}

fun g_hook_list_init(hook_list: CValuesRef<GHookList>?, hook_size: guint): Unit {
    memScoped {
        return kniBridge598(hook_list?.getPointer(memScope).rawValue, hook_size)
    }
}

fun g_hook_list_clear(hook_list: CValuesRef<GHookList>?): Unit {
    memScoped {
        return kniBridge599(hook_list?.getPointer(memScope).rawValue)
    }
}

fun g_hook_alloc(hook_list: CValuesRef<GHookList>?): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge600(hook_list?.getPointer(memScope).rawValue))
    }
}

fun g_hook_free(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?): Unit {
    memScoped {
        return kniBridge601(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue)
    }
}

fun g_hook_ref(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge602(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue))
    }
}

fun g_hook_unref(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?): Unit {
    memScoped {
        return kniBridge603(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue)
    }
}

fun g_hook_destroy(hook_list: CValuesRef<GHookList>?, hook_id: gulong): gboolean {
    memScoped {
        return kniBridge604(hook_list?.getPointer(memScope).rawValue, hook_id)
    }
}

fun g_hook_destroy_link(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?): Unit {
    memScoped {
        return kniBridge605(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue)
    }
}

fun g_hook_prepend(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?): Unit {
    memScoped {
        return kniBridge606(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue)
    }
}

fun g_hook_insert_before(hook_list: CValuesRef<GHookList>?, sibling: CValuesRef<GHook>?, hook: CValuesRef<GHook>?): Unit {
    memScoped {
        return kniBridge607(hook_list?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue)
    }
}

fun g_hook_insert_sorted(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?, func: GHookCompareFunc?): Unit {
    memScoped {
        return kniBridge608(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue, func.rawValue)
    }
}

fun g_hook_get(hook_list: CValuesRef<GHookList>?, hook_id: gulong): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge609(hook_list?.getPointer(memScope).rawValue, hook_id))
    }
}

fun g_hook_find(hook_list: CValuesRef<GHookList>?, need_valids: gboolean, func: GHookFindFunc?, data: gpointer?): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge610(hook_list?.getPointer(memScope).rawValue, need_valids, func.rawValue, data.rawValue))
    }
}

fun g_hook_find_data(hook_list: CValuesRef<GHookList>?, need_valids: gboolean, data: gpointer?): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge611(hook_list?.getPointer(memScope).rawValue, need_valids, data.rawValue))
    }
}

fun g_hook_find_func(hook_list: CValuesRef<GHookList>?, need_valids: gboolean, func: gpointer?): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge612(hook_list?.getPointer(memScope).rawValue, need_valids, func.rawValue))
    }
}

fun g_hook_find_func_data(hook_list: CValuesRef<GHookList>?, need_valids: gboolean, func: gpointer?, data: gpointer?): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge613(hook_list?.getPointer(memScope).rawValue, need_valids, func.rawValue, data.rawValue))
    }
}

fun g_hook_first_valid(hook_list: CValuesRef<GHookList>?, may_be_in_call: gboolean): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge614(hook_list?.getPointer(memScope).rawValue, may_be_in_call))
    }
}

fun g_hook_next_valid(hook_list: CValuesRef<GHookList>?, hook: CValuesRef<GHook>?, may_be_in_call: gboolean): CPointer<GHook>? {
    memScoped {
        return interpretCPointer<GHook>(kniBridge615(hook_list?.getPointer(memScope).rawValue, hook?.getPointer(memScope).rawValue, may_be_in_call))
    }
}

fun g_hook_compare_ids(new_hook: CValuesRef<GHook>?, sibling: CValuesRef<GHook>?): gint {
    memScoped {
        return kniBridge616(new_hook?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

fun g_hook_list_invoke(hook_list: CValuesRef<GHookList>?, may_recurse: gboolean): Unit {
    memScoped {
        return kniBridge617(hook_list?.getPointer(memScope).rawValue, may_recurse)
    }
}

fun g_hook_list_invoke_check(hook_list: CValuesRef<GHookList>?, may_recurse: gboolean): Unit {
    memScoped {
        return kniBridge618(hook_list?.getPointer(memScope).rawValue, may_recurse)
    }
}

fun g_hook_list_marshal(hook_list: CValuesRef<GHookList>?, may_recurse: gboolean, marshaller: GHookMarshaller?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge619(hook_list?.getPointer(memScope).rawValue, may_recurse, marshaller.rawValue, marshal_data.rawValue)
    }
}

fun g_hook_list_marshal_check(hook_list: CValuesRef<GHookList>?, may_recurse: gboolean, marshaller: GHookCheckMarshaller?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge620(hook_list?.getPointer(memScope).rawValue, may_recurse, marshaller.rawValue, marshal_data.rawValue)
    }
}

fun g_hostname_is_non_ascii(@CCall.CString hostname: String?): gboolean {
    memScoped {
        return kniBridge621(hostname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_hostname_is_ascii_encoded(@CCall.CString hostname: String?): gboolean {
    memScoped {
        return kniBridge622(hostname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_hostname_is_ip_address(@CCall.CString hostname: String?): gboolean {
    memScoped {
        return kniBridge623(hostname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_hostname_to_ascii(@CCall.CString hostname: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge624(hostname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_hostname_to_unicode(@CCall.CString hostname: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge625(hostname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_poll(fds: CValuesRef<GPollFD>?, nfds: guint, timeout: gint): gint {
    memScoped {
        return kniBridge626(fds?.getPointer(memScope).rawValue, nfds, timeout)
    }
}

fun g_slist_alloc(): CPointer<GSList>? {
    return interpretCPointer<GSList>(kniBridge627())
}

fun g_slist_free(list: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge628(list?.getPointer(memScope).rawValue)
    }
}

fun g_slist_free_1(list: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge629(list?.getPointer(memScope).rawValue)
    }
}

fun g_slist_free_full(list: CValuesRef<GSList>?, free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge630(list?.getPointer(memScope).rawValue, free_func.rawValue)
    }
}

fun g_slist_append(list: CValuesRef<GSList>?, data: gpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge631(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_slist_prepend(list: CValuesRef<GSList>?, data: gpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge632(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_slist_insert(list: CValuesRef<GSList>?, data: gpointer?, position: gint): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge633(list?.getPointer(memScope).rawValue, data.rawValue, position))
    }
}

fun g_slist_insert_sorted(list: CValuesRef<GSList>?, data: gpointer?, func: GCompareFunc?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge634(list?.getPointer(memScope).rawValue, data.rawValue, func.rawValue))
    }
}

fun g_slist_insert_sorted_with_data(list: CValuesRef<GSList>?, data: gpointer?, func: GCompareDataFunc?, user_data: gpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge635(list?.getPointer(memScope).rawValue, data.rawValue, func.rawValue, user_data.rawValue))
    }
}

fun g_slist_insert_before(slist: CValuesRef<GSList>?, sibling: CValuesRef<GSList>?, data: gpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge636(slist?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_slist_concat(list1: CValuesRef<GSList>?, list2: CValuesRef<GSList>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge637(list1?.getPointer(memScope).rawValue, list2?.getPointer(memScope).rawValue))
    }
}

fun g_slist_remove(list: CValuesRef<GSList>?, data: gconstpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge638(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_slist_remove_all(list: CValuesRef<GSList>?, data: gconstpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge639(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_slist_remove_link(list: CValuesRef<GSList>?, link_: CValuesRef<GSList>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge640(list?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue))
    }
}

fun g_slist_delete_link(list: CValuesRef<GSList>?, link_: CValuesRef<GSList>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge641(list?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue))
    }
}

fun g_slist_reverse(list: CValuesRef<GSList>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge642(list?.getPointer(memScope).rawValue))
    }
}

fun g_slist_copy(list: CValuesRef<GSList>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge643(list?.getPointer(memScope).rawValue))
    }
}

fun g_slist_copy_deep(list: CValuesRef<GSList>?, func: GCopyFunc?, user_data: gpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge644(list?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue))
    }
}

fun g_slist_nth(list: CValuesRef<GSList>?, n: guint): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge645(list?.getPointer(memScope).rawValue, n))
    }
}

fun g_slist_find(list: CValuesRef<GSList>?, data: gconstpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge646(list?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_slist_find_custom(list: CValuesRef<GSList>?, data: gconstpointer?, func: GCompareFunc?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge647(list?.getPointer(memScope).rawValue, data.rawValue, func.rawValue))
    }
}

fun g_slist_position(list: CValuesRef<GSList>?, llink: CValuesRef<GSList>?): gint {
    memScoped {
        return kniBridge648(list?.getPointer(memScope).rawValue, llink?.getPointer(memScope).rawValue)
    }
}

fun g_slist_index(list: CValuesRef<GSList>?, data: gconstpointer?): gint {
    memScoped {
        return kniBridge649(list?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_slist_last(list: CValuesRef<GSList>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge650(list?.getPointer(memScope).rawValue))
    }
}

fun g_slist_length(list: CValuesRef<GSList>?): guint {
    memScoped {
        return kniBridge651(list?.getPointer(memScope).rawValue)
    }
}

fun g_slist_foreach(list: CValuesRef<GSList>?, func: GFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge652(list?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_slist_sort(list: CValuesRef<GSList>?, compare_func: GCompareFunc?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge653(list?.getPointer(memScope).rawValue, compare_func.rawValue))
    }
}

fun g_slist_sort_with_data(list: CValuesRef<GSList>?, compare_func: GCompareDataFunc?, user_data: gpointer?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge654(list?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue))
    }
}

fun g_slist_nth_data(list: CValuesRef<GSList>?, n: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge655(list?.getPointer(memScope).rawValue, n))
    }
}

fun g_main_context_new(): CPointer<GMainContext>? {
    return interpretCPointer<GMainContext>(kniBridge656())
}

fun g_main_context_ref(context: CValuesRef<GMainContext>?): CPointer<GMainContext>? {
    memScoped {
        return interpretCPointer<GMainContext>(kniBridge657(context?.getPointer(memScope).rawValue))
    }
}

fun g_main_context_unref(context: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge658(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_default(): CPointer<GMainContext>? {
    return interpretCPointer<GMainContext>(kniBridge659())
}

fun g_main_context_iteration(context: CValuesRef<GMainContext>?, may_block: gboolean): gboolean {
    memScoped {
        return kniBridge660(context?.getPointer(memScope).rawValue, may_block)
    }
}

fun g_main_context_pending(context: CValuesRef<GMainContext>?): gboolean {
    memScoped {
        return kniBridge661(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_find_source_by_id(context: CValuesRef<GMainContext>?, source_id: guint): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge662(context?.getPointer(memScope).rawValue, source_id))
    }
}

fun g_main_context_find_source_by_user_data(context: CValuesRef<GMainContext>?, user_data: gpointer?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge663(context?.getPointer(memScope).rawValue, user_data.rawValue))
    }
}

fun g_main_context_find_source_by_funcs_user_data(context: CValuesRef<GMainContext>?, funcs: CValuesRef<GSourceFuncs>?, user_data: gpointer?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge664(context?.getPointer(memScope).rawValue, funcs?.getPointer(memScope).rawValue, user_data.rawValue))
    }
}

fun g_main_context_wakeup(context: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge665(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_acquire(context: CValuesRef<GMainContext>?): gboolean {
    memScoped {
        return kniBridge666(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_release(context: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge667(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_is_owner(context: CValuesRef<GMainContext>?): gboolean {
    memScoped {
        return kniBridge668(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_wait(context: CValuesRef<GMainContext>?, cond: CValuesRef<GCond>?, mutex: CValuesRef<GMutex>?): gboolean {
    memScoped {
        return kniBridge669(context?.getPointer(memScope).rawValue, cond?.getPointer(memScope).rawValue, mutex?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_prepare(context: CValuesRef<GMainContext>?, priority: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge670(context?.getPointer(memScope).rawValue, priority?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_query(context: CValuesRef<GMainContext>?, max_priority: gint, timeout_: CValuesRef<gintVar>?, fds: CValuesRef<GPollFD>?, n_fds: gint): gint {
    memScoped {
        return kniBridge671(context?.getPointer(memScope).rawValue, max_priority, timeout_?.getPointer(memScope).rawValue, fds?.getPointer(memScope).rawValue, n_fds)
    }
}

fun g_main_context_check(context: CValuesRef<GMainContext>?, max_priority: gint, fds: CValuesRef<GPollFD>?, n_fds: gint): gboolean {
    memScoped {
        return kniBridge672(context?.getPointer(memScope).rawValue, max_priority, fds?.getPointer(memScope).rawValue, n_fds)
    }
}

fun g_main_context_dispatch(context: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge673(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_set_poll_func(context: CValuesRef<GMainContext>?, func: GPollFunc?): Unit {
    memScoped {
        return kniBridge674(context?.getPointer(memScope).rawValue, func.rawValue)
    }
}

fun g_main_context_get_poll_func(context: CValuesRef<GMainContext>?): GPollFunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<GPollFD>?, guint, gint) -> gint>>(kniBridge675(context?.getPointer(memScope).rawValue))
    }
}

fun g_main_context_add_poll(context: CValuesRef<GMainContext>?, fd: CValuesRef<GPollFD>?, priority: gint): Unit {
    memScoped {
        return kniBridge676(context?.getPointer(memScope).rawValue, fd?.getPointer(memScope).rawValue, priority)
    }
}

fun g_main_context_remove_poll(context: CValuesRef<GMainContext>?, fd: CValuesRef<GPollFD>?): Unit {
    memScoped {
        return kniBridge677(context?.getPointer(memScope).rawValue, fd?.getPointer(memScope).rawValue)
    }
}

fun g_main_depth(): gint {
    return kniBridge678()
}

fun g_main_current_source(): CPointer<GSource>? {
    return interpretCPointer<GSource>(kniBridge679())
}

fun g_main_context_push_thread_default(context: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge680(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_pop_thread_default(context: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge681(context?.getPointer(memScope).rawValue)
    }
}

fun g_main_context_get_thread_default(): CPointer<GMainContext>? {
    return interpretCPointer<GMainContext>(kniBridge682())
}

fun g_main_context_ref_thread_default(): CPointer<GMainContext>? {
    return interpretCPointer<GMainContext>(kniBridge683())
}

fun g_main_loop_new(context: CValuesRef<GMainContext>?, is_running: gboolean): CPointer<GMainLoop>? {
    memScoped {
        return interpretCPointer<GMainLoop>(kniBridge684(context?.getPointer(memScope).rawValue, is_running))
    }
}

fun g_main_loop_run(loop: CValuesRef<GMainLoop>?): Unit {
    memScoped {
        return kniBridge685(loop?.getPointer(memScope).rawValue)
    }
}

fun g_main_loop_quit(loop: CValuesRef<GMainLoop>?): Unit {
    memScoped {
        return kniBridge686(loop?.getPointer(memScope).rawValue)
    }
}

fun g_main_loop_ref(loop: CValuesRef<GMainLoop>?): CPointer<GMainLoop>? {
    memScoped {
        return interpretCPointer<GMainLoop>(kniBridge687(loop?.getPointer(memScope).rawValue))
    }
}

fun g_main_loop_unref(loop: CValuesRef<GMainLoop>?): Unit {
    memScoped {
        return kniBridge688(loop?.getPointer(memScope).rawValue)
    }
}

fun g_main_loop_is_running(loop: CValuesRef<GMainLoop>?): gboolean {
    memScoped {
        return kniBridge689(loop?.getPointer(memScope).rawValue)
    }
}

fun g_main_loop_get_context(loop: CValuesRef<GMainLoop>?): CPointer<GMainContext>? {
    memScoped {
        return interpretCPointer<GMainContext>(kniBridge690(loop?.getPointer(memScope).rawValue))
    }
}

fun g_source_new(source_funcs: CValuesRef<GSourceFuncs>?, struct_size: guint): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge691(source_funcs?.getPointer(memScope).rawValue, struct_size))
    }
}

fun g_source_ref(source: CValuesRef<GSource>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge692(source?.getPointer(memScope).rawValue))
    }
}

fun g_source_unref(source: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge693(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_attach(source: CValuesRef<GSource>?, context: CValuesRef<GMainContext>?): guint {
    memScoped {
        return kniBridge694(source?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue)
    }
}

fun g_source_destroy(source: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge695(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_set_priority(source: CValuesRef<GSource>?, priority: gint): Unit {
    memScoped {
        return kniBridge696(source?.getPointer(memScope).rawValue, priority)
    }
}

fun g_source_get_priority(source: CValuesRef<GSource>?): gint {
    memScoped {
        return kniBridge697(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_set_can_recurse(source: CValuesRef<GSource>?, can_recurse: gboolean): Unit {
    memScoped {
        return kniBridge698(source?.getPointer(memScope).rawValue, can_recurse)
    }
}

fun g_source_get_can_recurse(source: CValuesRef<GSource>?): gboolean {
    memScoped {
        return kniBridge699(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_get_id(source: CValuesRef<GSource>?): guint {
    memScoped {
        return kniBridge700(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_get_context(source: CValuesRef<GSource>?): CPointer<GMainContext>? {
    memScoped {
        return interpretCPointer<GMainContext>(kniBridge701(source?.getPointer(memScope).rawValue))
    }
}

fun g_source_set_callback(source: CValuesRef<GSource>?, func: GSourceFunc?, data: gpointer?, notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge702(source?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, notify.rawValue)
    }
}

fun g_source_set_funcs(source: CValuesRef<GSource>?, funcs: CValuesRef<GSourceFuncs>?): Unit {
    memScoped {
        return kniBridge703(source?.getPointer(memScope).rawValue, funcs?.getPointer(memScope).rawValue)
    }
}

fun g_source_is_destroyed(source: CValuesRef<GSource>?): gboolean {
    memScoped {
        return kniBridge704(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_set_name(source: CValuesRef<GSource>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge705(source?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_source_get_name(source: CValuesRef<GSource>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge706(source?.getPointer(memScope).rawValue))
    }
}

fun g_source_set_name_by_id(tag: guint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge707(tag, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_source_set_ready_time(source: CValuesRef<GSource>?, ready_time: gint64): Unit {
    memScoped {
        return kniBridge708(source?.getPointer(memScope).rawValue, ready_time)
    }
}

fun g_source_get_ready_time(source: CValuesRef<GSource>?): gint64 {
    memScoped {
        return kniBridge709(source?.getPointer(memScope).rawValue)
    }
}

fun g_source_add_unix_fd(source: CValuesRef<GSource>?, fd: gint, events: GIOCondition): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge710(source?.getPointer(memScope).rawValue, fd, events))
    }
}

fun g_source_modify_unix_fd(source: CValuesRef<GSource>?, tag: gpointer?, new_events: GIOCondition): Unit {
    memScoped {
        return kniBridge711(source?.getPointer(memScope).rawValue, tag.rawValue, new_events)
    }
}

fun g_source_remove_unix_fd(source: CValuesRef<GSource>?, tag: gpointer?): Unit {
    memScoped {
        return kniBridge712(source?.getPointer(memScope).rawValue, tag.rawValue)
    }
}

fun g_source_query_unix_fd(source: CValuesRef<GSource>?, tag: gpointer?): GIOCondition {
    memScoped {
        return kniBridge713(source?.getPointer(memScope).rawValue, tag.rawValue)
    }
}

fun g_source_set_callback_indirect(source: CValuesRef<GSource>?, callback_data: gpointer?, callback_funcs: CValuesRef<GSourceCallbackFuncs>?): Unit {
    memScoped {
        return kniBridge714(source?.getPointer(memScope).rawValue, callback_data.rawValue, callback_funcs?.getPointer(memScope).rawValue)
    }
}

fun g_source_add_poll(source: CValuesRef<GSource>?, fd: CValuesRef<GPollFD>?): Unit {
    memScoped {
        return kniBridge715(source?.getPointer(memScope).rawValue, fd?.getPointer(memScope).rawValue)
    }
}

fun g_source_remove_poll(source: CValuesRef<GSource>?, fd: CValuesRef<GPollFD>?): Unit {
    memScoped {
        return kniBridge716(source?.getPointer(memScope).rawValue, fd?.getPointer(memScope).rawValue)
    }
}

fun g_source_add_child_source(source: CValuesRef<GSource>?, child_source: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge717(source?.getPointer(memScope).rawValue, child_source?.getPointer(memScope).rawValue)
    }
}

fun g_source_remove_child_source(source: CValuesRef<GSource>?, child_source: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge718(source?.getPointer(memScope).rawValue, child_source?.getPointer(memScope).rawValue)
    }
}

fun g_source_get_current_time(source: CValuesRef<GSource>?, timeval: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge719(source?.getPointer(memScope).rawValue, timeval?.getPointer(memScope).rawValue)
    }
}

fun g_source_get_time(source: CValuesRef<GSource>?): gint64 {
    memScoped {
        return kniBridge720(source?.getPointer(memScope).rawValue)
    }
}

fun g_idle_source_new(): CPointer<GSource>? {
    return interpretCPointer<GSource>(kniBridge721())
}

fun g_child_watch_source_new(pid: GPid): CPointer<GSource>? {
    return interpretCPointer<GSource>(kniBridge722(pid))
}

fun g_timeout_source_new(interval: guint): CPointer<GSource>? {
    return interpretCPointer<GSource>(kniBridge723(interval))
}

fun g_timeout_source_new_seconds(interval: guint): CPointer<GSource>? {
    return interpretCPointer<GSource>(kniBridge724(interval))
}

fun g_get_current_time(result: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge725(result?.getPointer(memScope).rawValue)
    }
}

fun g_get_monotonic_time(): gint64 {
    return kniBridge726()
}

fun g_get_real_time(): gint64 {
    return kniBridge727()
}

fun g_source_remove(tag: guint): gboolean {
    return kniBridge728(tag)
}

fun g_source_remove_by_user_data(user_data: gpointer?): gboolean {
    return kniBridge729(user_data.rawValue)
}

fun g_source_remove_by_funcs_user_data(funcs: CValuesRef<GSourceFuncs>?, user_data: gpointer?): gboolean {
    memScoped {
        return kniBridge730(funcs?.getPointer(memScope).rawValue, user_data.rawValue)
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_clear_handle_id(tag_ptr: CValuesRef<guintVar>?, clear_func: GClearHandleFunc?): Unit = throw UnsupportedOperationException()

fun g_timeout_add_full(priority: gint, interval: guint, function: GSourceFunc?, data: gpointer?, notify: GDestroyNotify?): guint {
    return kniBridge732(priority, interval, function.rawValue, data.rawValue, notify.rawValue)
}

fun g_timeout_add(interval: guint, function: GSourceFunc?, data: gpointer?): guint {
    return kniBridge733(interval, function.rawValue, data.rawValue)
}

fun g_timeout_add_seconds_full(priority: gint, interval: guint, function: GSourceFunc?, data: gpointer?, notify: GDestroyNotify?): guint {
    return kniBridge734(priority, interval, function.rawValue, data.rawValue, notify.rawValue)
}

fun g_timeout_add_seconds(interval: guint, function: GSourceFunc?, data: gpointer?): guint {
    return kniBridge735(interval, function.rawValue, data.rawValue)
}

fun g_child_watch_add_full(priority: gint, pid: GPid, function: GChildWatchFunc?, data: gpointer?, notify: GDestroyNotify?): guint {
    return kniBridge736(priority, pid, function.rawValue, data.rawValue, notify.rawValue)
}

fun g_child_watch_add(pid: GPid, function: GChildWatchFunc?, data: gpointer?): guint {
    return kniBridge737(pid, function.rawValue, data.rawValue)
}

fun g_idle_add(function: GSourceFunc?, data: gpointer?): guint {
    return kniBridge738(function.rawValue, data.rawValue)
}

fun g_idle_add_full(priority: gint, function: GSourceFunc?, data: gpointer?, notify: GDestroyNotify?): guint {
    return kniBridge739(priority, function.rawValue, data.rawValue, notify.rawValue)
}

fun g_idle_remove_by_data(data: gpointer?): gboolean {
    return kniBridge740(data.rawValue)
}

fun g_main_context_invoke_full(context: CValuesRef<GMainContext>?, priority: gint, function: GSourceFunc?, data: gpointer?, notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge741(context?.getPointer(memScope).rawValue, priority, function.rawValue, data.rawValue, notify.rawValue)
    }
}

fun g_main_context_invoke(context: CValuesRef<GMainContext>?, function: GSourceFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge742(context?.getPointer(memScope).rawValue, function.rawValue, data.rawValue)
    }
}

fun g_unicode_script_to_iso15924(script: GUnicodeScript): guint32 {
    return kniBridge743(script)
}

fun g_unicode_script_from_iso15924(iso15924: guint32): GUnicodeScript {
    return kniBridge744(iso15924)
}

fun g_unichar_isalnum(c: gunichar): gboolean {
    return kniBridge745(c)
}

fun g_unichar_isalpha(c: gunichar): gboolean {
    return kniBridge746(c)
}

fun g_unichar_iscntrl(c: gunichar): gboolean {
    return kniBridge747(c)
}

fun g_unichar_isdigit(c: gunichar): gboolean {
    return kniBridge748(c)
}

fun g_unichar_isgraph(c: gunichar): gboolean {
    return kniBridge749(c)
}

fun g_unichar_islower(c: gunichar): gboolean {
    return kniBridge750(c)
}

fun g_unichar_isprint(c: gunichar): gboolean {
    return kniBridge751(c)
}

fun g_unichar_ispunct(c: gunichar): gboolean {
    return kniBridge752(c)
}

fun g_unichar_isspace(c: gunichar): gboolean {
    return kniBridge753(c)
}

fun g_unichar_isupper(c: gunichar): gboolean {
    return kniBridge754(c)
}

fun g_unichar_isxdigit(c: gunichar): gboolean {
    return kniBridge755(c)
}

fun g_unichar_istitle(c: gunichar): gboolean {
    return kniBridge756(c)
}

fun g_unichar_isdefined(c: gunichar): gboolean {
    return kniBridge757(c)
}

fun g_unichar_iswide(c: gunichar): gboolean {
    return kniBridge758(c)
}

fun g_unichar_iswide_cjk(c: gunichar): gboolean {
    return kniBridge759(c)
}

fun g_unichar_iszerowidth(c: gunichar): gboolean {
    return kniBridge760(c)
}

fun g_unichar_ismark(c: gunichar): gboolean {
    return kniBridge761(c)
}

fun g_unichar_toupper(c: gunichar): gunichar {
    return kniBridge762(c)
}

fun g_unichar_tolower(c: gunichar): gunichar {
    return kniBridge763(c)
}

fun g_unichar_totitle(c: gunichar): gunichar {
    return kniBridge764(c)
}

fun g_unichar_digit_value(c: gunichar): gint {
    return kniBridge765(c)
}

fun g_unichar_xdigit_value(c: gunichar): gint {
    return kniBridge766(c)
}

fun g_unichar_type(c: gunichar): GUnicodeType {
    return GUnicodeType.byValue(kniBridge767(c))
}

fun g_unichar_break_type(c: gunichar): GUnicodeBreakType {
    return GUnicodeBreakType.byValue(kniBridge768(c))
}

fun g_unichar_combining_class(uc: gunichar): gint {
    return kniBridge769(uc)
}

fun g_unichar_get_mirror_char(ch: gunichar, mirrored_ch: CValuesRef<gunicharVar>?): gboolean {
    memScoped {
        return kniBridge770(ch, mirrored_ch?.getPointer(memScope).rawValue)
    }
}

fun g_unichar_get_script(ch: gunichar): GUnicodeScript {
    return kniBridge771(ch)
}

fun g_unichar_validate(ch: gunichar): gboolean {
    return kniBridge772(ch)
}

fun g_unichar_compose(a: gunichar, b: gunichar, ch: CValuesRef<gunicharVar>?): gboolean {
    memScoped {
        return kniBridge773(a, b, ch?.getPointer(memScope).rawValue)
    }
}

fun g_unichar_decompose(ch: gunichar, a: CValuesRef<gunicharVar>?, b: CValuesRef<gunicharVar>?): gboolean {
    memScoped {
        return kniBridge774(ch, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun g_unichar_fully_decompose(ch: gunichar, compat: gboolean, result: CValuesRef<gunicharVar>?, result_len: gsize): gsize {
    memScoped {
        return kniBridge775(ch, compat, result?.getPointer(memScope).rawValue, result_len)
    }
}

fun g_unicode_canonical_ordering(string: CValuesRef<gunicharVar>?, len: gsize): Unit {
    memScoped {
        return kniBridge776(string?.getPointer(memScope).rawValue, len)
    }
}

fun g_unicode_canonical_decomposition(ch: gunichar, result_len: CValuesRef<gsizeVar>?): CPointer<gunicharVar>? {
    memScoped {
        return interpretCPointer<gunicharVar>(kniBridge777(ch, result_len?.getPointer(memScope).rawValue))
    }
}

fun g_utf8_get_char(@CCall.CString p: String?): gunichar {
    memScoped {
        return kniBridge778(p?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_utf8_get_char_validated(@CCall.CString p: String?, max_len: gssize): gunichar {
    memScoped {
        return kniBridge779(p?.cstr?.getPointer(memScope).rawValue, max_len)
    }
}

fun g_utf8_offset_to_pointer(@CCall.CString str: String?, offset: glong): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge780(str?.cstr?.getPointer(memScope).rawValue, offset))
    }
}

fun g_utf8_pointer_to_offset(@CCall.CString str: String?, @CCall.CString pos: String?): glong {
    memScoped {
        return kniBridge781(str?.cstr?.getPointer(memScope).rawValue, pos?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_utf8_prev_char(@CCall.CString p: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge782(p?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_utf8_find_next_char(@CCall.CString p: String?, @CCall.CString end: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge783(p?.cstr?.getPointer(memScope).rawValue, end?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_utf8_find_prev_char(@CCall.CString str: String?, @CCall.CString p: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge784(str?.cstr?.getPointer(memScope).rawValue, p?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_utf8_strlen(@CCall.CString p: String?, max: gssize): glong {
    memScoped {
        return kniBridge785(p?.cstr?.getPointer(memScope).rawValue, max)
    }
}

fun g_utf8_substring(@CCall.CString str: String?, start_pos: glong, end_pos: glong): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge786(str?.cstr?.getPointer(memScope).rawValue, start_pos, end_pos))
    }
}

fun g_utf8_strncpy(dest: CValuesRef<gcharVar>?, @CCall.CString src: String?, n: gsize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge787(dest?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue, n))
    }
}

fun g_utf8_strchr(@CCall.CString p: String?, len: gssize, c: gunichar): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge788(p?.cstr?.getPointer(memScope).rawValue, len, c))
    }
}

fun g_utf8_strrchr(@CCall.CString p: String?, len: gssize, c: gunichar): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge789(p?.cstr?.getPointer(memScope).rawValue, len, c))
    }
}

fun g_utf8_strreverse(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge790(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_utf8_to_utf16(@CCall.CString str: String?, len: glong, items_read: CValuesRef<glongVar>?, items_written: CValuesRef<glongVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gunichar2Var>? {
    memScoped {
        return interpretCPointer<gunichar2Var>(kniBridge791(str?.cstr?.getPointer(memScope).rawValue, len, items_read?.getPointer(memScope).rawValue, items_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_utf8_to_ucs4(@CCall.CString str: String?, len: glong, items_read: CValuesRef<glongVar>?, items_written: CValuesRef<glongVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gunicharVar>? {
    memScoped {
        return interpretCPointer<gunicharVar>(kniBridge792(str?.cstr?.getPointer(memScope).rawValue, len, items_read?.getPointer(memScope).rawValue, items_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_utf8_to_ucs4_fast(@CCall.CString str: String?, len: glong, items_written: CValuesRef<glongVar>?): CPointer<gunicharVar>? {
    memScoped {
        return interpretCPointer<gunicharVar>(kniBridge793(str?.cstr?.getPointer(memScope).rawValue, len, items_written?.getPointer(memScope).rawValue))
    }
}

fun g_utf16_to_ucs4(str: CValuesRef<gunichar2Var>?, len: glong, items_read: CValuesRef<glongVar>?, items_written: CValuesRef<glongVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gunicharVar>? {
    memScoped {
        return interpretCPointer<gunicharVar>(kniBridge794(str?.getPointer(memScope).rawValue, len, items_read?.getPointer(memScope).rawValue, items_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_utf16_to_utf8(str: CValuesRef<gunichar2Var>?, len: glong, items_read: CValuesRef<glongVar>?, items_written: CValuesRef<glongVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge795(str?.getPointer(memScope).rawValue, len, items_read?.getPointer(memScope).rawValue, items_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_ucs4_to_utf16(str: CValuesRef<gunicharVar>?, len: glong, items_read: CValuesRef<glongVar>?, items_written: CValuesRef<glongVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gunichar2Var>? {
    memScoped {
        return interpretCPointer<gunichar2Var>(kniBridge796(str?.getPointer(memScope).rawValue, len, items_read?.getPointer(memScope).rawValue, items_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_ucs4_to_utf8(str: CValuesRef<gunicharVar>?, len: glong, items_read: CValuesRef<glongVar>?, items_written: CValuesRef<glongVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge797(str?.getPointer(memScope).rawValue, len, items_read?.getPointer(memScope).rawValue, items_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_unichar_to_utf8(c: gunichar, outbuf: CValuesRef<gcharVar>?): gint {
    memScoped {
        return kniBridge798(c, outbuf?.getPointer(memScope).rawValue)
    }
}

fun g_utf8_validate(@CCall.CString str: String?, max_len: gssize, end: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge799(str?.cstr?.getPointer(memScope).rawValue, max_len, end?.getPointer(memScope).rawValue)
    }
}

fun g_utf8_validate_len(@CCall.CString str: String?, max_len: gsize, end: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge800(str?.cstr?.getPointer(memScope).rawValue, max_len, end?.getPointer(memScope).rawValue)
    }
}

fun g_utf8_strup(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge801(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_utf8_strdown(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge802(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_utf8_casefold(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge803(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_utf8_normalize(@CCall.CString str: String?, len: gssize, mode: GNormalizeMode): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge804(str?.cstr?.getPointer(memScope).rawValue, len, mode))
    }
}

fun g_utf8_collate(@CCall.CString str1: String?, @CCall.CString str2: String?): gint {
    memScoped {
        return kniBridge805(str1?.cstr?.getPointer(memScope).rawValue, str2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_utf8_collate_key(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge806(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_utf8_collate_key_for_filename(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge807(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_utf8_make_valid(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge808(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_new(@CCall.CString init: String?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge809(init?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_new_len(@CCall.CString init: String?, len: gssize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge810(init?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_sized_new(dfl_size: gsize): CPointer<GString>? {
    return interpretCPointer<GString>(kniBridge811(dfl_size))
}

fun g_string_free(string: CValuesRef<GString>?, free_segment: gboolean): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge812(string?.getPointer(memScope).rawValue, free_segment))
    }
}

fun g_string_free_to_bytes(string: CValuesRef<GString>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge813(string?.getPointer(memScope).rawValue))
    }
}

fun g_string_equal(v: CValuesRef<GString>?, v2: CValuesRef<GString>?): gboolean {
    memScoped {
        return kniBridge814(v?.getPointer(memScope).rawValue, v2?.getPointer(memScope).rawValue)
    }
}

fun g_string_hash(str: CValuesRef<GString>?): guint {
    memScoped {
        return kniBridge815(str?.getPointer(memScope).rawValue)
    }
}

fun g_string_assign(string: CValuesRef<GString>?, @CCall.CString rval: String?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge816(string?.getPointer(memScope).rawValue, rval?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_truncate(string: CValuesRef<GString>?, len: gsize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge817(string?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_set_size(string: CValuesRef<GString>?, len: gsize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge818(string?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_insert_len(string: CValuesRef<GString>?, pos: gssize, @CCall.CString `val`: String?, len: gssize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge819(string?.getPointer(memScope).rawValue, pos, `val`?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_append(string: CValuesRef<GString>?, @CCall.CString `val`: String?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge820(string?.getPointer(memScope).rawValue, `val`?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_append_len(string: CValuesRef<GString>?, @CCall.CString `val`: String?, len: gssize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge821(string?.getPointer(memScope).rawValue, `val`?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_append_c(string: CValuesRef<GString>?, c: gchar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge822(string?.getPointer(memScope).rawValue, c))
    }
}

fun g_string_append_unichar(string: CValuesRef<GString>?, wc: gunichar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge823(string?.getPointer(memScope).rawValue, wc))
    }
}

fun g_string_prepend(string: CValuesRef<GString>?, @CCall.CString `val`: String?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge824(string?.getPointer(memScope).rawValue, `val`?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_prepend_c(string: CValuesRef<GString>?, c: gchar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge825(string?.getPointer(memScope).rawValue, c))
    }
}

fun g_string_prepend_unichar(string: CValuesRef<GString>?, wc: gunichar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge826(string?.getPointer(memScope).rawValue, wc))
    }
}

fun g_string_prepend_len(string: CValuesRef<GString>?, @CCall.CString `val`: String?, len: gssize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge827(string?.getPointer(memScope).rawValue, `val`?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_insert(string: CValuesRef<GString>?, pos: gssize, @CCall.CString `val`: String?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge828(string?.getPointer(memScope).rawValue, pos, `val`?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_insert_c(string: CValuesRef<GString>?, pos: gssize, c: gchar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge829(string?.getPointer(memScope).rawValue, pos, c))
    }
}

fun g_string_insert_unichar(string: CValuesRef<GString>?, pos: gssize, wc: gunichar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge830(string?.getPointer(memScope).rawValue, pos, wc))
    }
}

fun g_string_overwrite(string: CValuesRef<GString>?, pos: gsize, @CCall.CString `val`: String?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge831(string?.getPointer(memScope).rawValue, pos, `val`?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_overwrite_len(string: CValuesRef<GString>?, pos: gsize, @CCall.CString `val`: String?, len: gssize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge832(string?.getPointer(memScope).rawValue, pos, `val`?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_erase(string: CValuesRef<GString>?, pos: gssize, len: gssize): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge833(string?.getPointer(memScope).rawValue, pos, len))
    }
}

fun g_string_ascii_down(string: CValuesRef<GString>?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge834(string?.getPointer(memScope).rawValue))
    }
}

fun g_string_ascii_up(string: CValuesRef<GString>?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge835(string?.getPointer(memScope).rawValue))
    }
}

fun g_string_vprintf(string: CValuesRef<GString>?, @CCall.CString format: String?, args: va_list?): Unit {
    memScoped {
        return kniBridge836(string?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

@CCall("knifunptr_glibresources7")
external fun g_string_printf(string: CValuesRef<GString>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_string_append_vprintf(string: CValuesRef<GString>?, @CCall.CString format: String?, args: va_list?): Unit {
    memScoped {
        return kniBridge837(string?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

@CCall("knifunptr_glibresources8")
external fun g_string_append_printf(string: CValuesRef<GString>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_string_append_uri_escaped(string: CValuesRef<GString>?, @CCall.CString unescaped: String?, @CCall.CString reserved_chars_allowed: String?, allow_utf8: gboolean): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge838(string?.getPointer(memScope).rawValue, unescaped?.cstr?.getPointer(memScope).rawValue, reserved_chars_allowed?.cstr?.getPointer(memScope).rawValue, allow_utf8))
    }
}

fun g_string_append_c_inline(gstring: CValuesRef<GString>?, c: gchar): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge839(gstring?.getPointer(memScope).rawValue, c))
    }
}

fun g_string_down(string: CValuesRef<GString>?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge840(string?.getPointer(memScope).rawValue))
    }
}

fun g_string_up(string: CValuesRef<GString>?): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge841(string?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_init(channel: CValuesRef<GIOChannel>?): Unit {
    memScoped {
        return kniBridge842(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_ref(channel: CValuesRef<GIOChannel>?): CPointer<GIOChannel>? {
    memScoped {
        return interpretCPointer<GIOChannel>(kniBridge843(channel?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_unref(channel: CValuesRef<GIOChannel>?): Unit {
    memScoped {
        return kniBridge844(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_read(channel: CValuesRef<GIOChannel>?, buf: CValuesRef<gcharVar>?, count: gsize, bytes_read: CValuesRef<gsizeVar>?): GIOError {
    memScoped {
        return GIOError.byValue(kniBridge845(channel?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, count, bytes_read?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_write(channel: CValuesRef<GIOChannel>?, @CCall.CString buf: String?, count: gsize, bytes_written: CValuesRef<gsizeVar>?): GIOError {
    memScoped {
        return GIOError.byValue(kniBridge846(channel?.getPointer(memScope).rawValue, buf?.cstr?.getPointer(memScope).rawValue, count, bytes_written?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_seek(channel: CValuesRef<GIOChannel>?, offset: gint64, type: GSeekType): GIOError {
    memScoped {
        return GIOError.byValue(kniBridge847(channel?.getPointer(memScope).rawValue, offset, type.value))
    }
}

fun g_io_channel_close(channel: CValuesRef<GIOChannel>?): Unit {
    memScoped {
        return kniBridge848(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_shutdown(channel: CValuesRef<GIOChannel>?, flush: gboolean, err: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge849(channel?.getPointer(memScope).rawValue, flush, err?.getPointer(memScope).rawValue))
    }
}

fun g_io_add_watch_full(channel: CValuesRef<GIOChannel>?, priority: gint, condition: GIOCondition, func: GIOFunc?, user_data: gpointer?, notify: GDestroyNotify?): guint {
    memScoped {
        return kniBridge850(channel?.getPointer(memScope).rawValue, priority, condition, func.rawValue, user_data.rawValue, notify.rawValue)
    }
}

fun g_io_create_watch(channel: CValuesRef<GIOChannel>?, condition: GIOCondition): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge851(channel?.getPointer(memScope).rawValue, condition))
    }
}

fun g_io_add_watch(channel: CValuesRef<GIOChannel>?, condition: GIOCondition, func: GIOFunc?, user_data: gpointer?): guint {
    memScoped {
        return kniBridge852(channel?.getPointer(memScope).rawValue, condition, func.rawValue, user_data.rawValue)
    }
}

fun g_io_channel_set_buffer_size(channel: CValuesRef<GIOChannel>?, size: gsize): Unit {
    memScoped {
        return kniBridge853(channel?.getPointer(memScope).rawValue, size)
    }
}

fun g_io_channel_get_buffer_size(channel: CValuesRef<GIOChannel>?): gsize {
    memScoped {
        return kniBridge854(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_get_buffer_condition(channel: CValuesRef<GIOChannel>?): GIOCondition {
    memScoped {
        return kniBridge855(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_set_flags(channel: CValuesRef<GIOChannel>?, flags: GIOFlags, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge856(channel?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_get_flags(channel: CValuesRef<GIOChannel>?): GIOFlags {
    memScoped {
        return kniBridge857(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_set_line_term(channel: CValuesRef<GIOChannel>?, @CCall.CString line_term: String?, length: gint): Unit {
    memScoped {
        return kniBridge858(channel?.getPointer(memScope).rawValue, line_term?.cstr?.getPointer(memScope).rawValue, length)
    }
}

fun g_io_channel_get_line_term(channel: CValuesRef<GIOChannel>?, length: CValuesRef<gintVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge859(channel?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_set_buffered(channel: CValuesRef<GIOChannel>?, buffered: gboolean): Unit {
    memScoped {
        return kniBridge860(channel?.getPointer(memScope).rawValue, buffered)
    }
}

fun g_io_channel_get_buffered(channel: CValuesRef<GIOChannel>?): gboolean {
    memScoped {
        return kniBridge861(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_set_encoding(channel: CValuesRef<GIOChannel>?, @CCall.CString encoding: String?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge862(channel?.getPointer(memScope).rawValue, encoding?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_get_encoding(channel: CValuesRef<GIOChannel>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge863(channel?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_set_close_on_unref(channel: CValuesRef<GIOChannel>?, do_close: gboolean): Unit {
    memScoped {
        return kniBridge864(channel?.getPointer(memScope).rawValue, do_close)
    }
}

fun g_io_channel_get_close_on_unref(channel: CValuesRef<GIOChannel>?): gboolean {
    memScoped {
        return kniBridge865(channel?.getPointer(memScope).rawValue)
    }
}

fun g_io_channel_flush(channel: CValuesRef<GIOChannel>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge866(channel?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_read_line(channel: CValuesRef<GIOChannel>?, str_return: CValuesRef<CPointerVar<gcharVar>>?, length: CValuesRef<gsizeVar>?, terminator_pos: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge867(channel?.getPointer(memScope).rawValue, str_return?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, terminator_pos?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_read_line_string(channel: CValuesRef<GIOChannel>?, buffer: CValuesRef<GString>?, terminator_pos: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge868(channel?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, terminator_pos?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_read_to_end(channel: CValuesRef<GIOChannel>?, str_return: CValuesRef<CPointerVar<gcharVar>>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge869(channel?.getPointer(memScope).rawValue, str_return?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_read_chars(channel: CValuesRef<GIOChannel>?, buf: CValuesRef<gcharVar>?, count: gsize, bytes_read: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge870(channel?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, count, bytes_read?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_read_unichar(channel: CValuesRef<GIOChannel>?, thechar: CValuesRef<gunicharVar>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge871(channel?.getPointer(memScope).rawValue, thechar?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_write_chars(channel: CValuesRef<GIOChannel>?, @CCall.CString buf: String?, count: gssize, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge872(channel?.getPointer(memScope).rawValue, buf?.cstr?.getPointer(memScope).rawValue, count, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_write_unichar(channel: CValuesRef<GIOChannel>?, thechar: gunichar, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge873(channel?.getPointer(memScope).rawValue, thechar, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_seek_position(channel: CValuesRef<GIOChannel>?, offset: gint64, type: GSeekType, error: CValuesRef<CPointerVar<GError>>?): GIOStatus {
    memScoped {
        return GIOStatus.byValue(kniBridge874(channel?.getPointer(memScope).rawValue, offset, type.value, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_new_file(@CCall.CString filename: String?, @CCall.CString mode: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOChannel>? {
    memScoped {
        return interpretCPointer<GIOChannel>(kniBridge875(filename?.cstr?.getPointer(memScope).rawValue, mode?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_channel_error_quark(): GQuark {
    return kniBridge876()
}

fun g_io_channel_error_from_errno(en: gint): GIOChannelError {
    return GIOChannelError.byValue(kniBridge877(en))
}

fun g_io_channel_unix_new(fd: Int): CPointer<GIOChannel>? {
    return interpretCPointer<GIOChannel>(kniBridge878(fd))
}

fun g_io_channel_unix_get_fd(channel: CValuesRef<GIOChannel>?): gint {
    memScoped {
        return kniBridge879(channel?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_error_quark(): GQuark {
    return kniBridge880()
}

fun g_key_file_new(): CPointer<GKeyFile>? {
    return interpretCPointer<GKeyFile>(kniBridge881())
}

fun g_key_file_ref(key_file: CValuesRef<GKeyFile>?): CPointer<GKeyFile>? {
    memScoped {
        return interpretCPointer<GKeyFile>(kniBridge882(key_file?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_unref(key_file: CValuesRef<GKeyFile>?): Unit {
    memScoped {
        return kniBridge883(key_file?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_free(key_file: CValuesRef<GKeyFile>?): Unit {
    memScoped {
        return kniBridge884(key_file?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_set_list_separator(key_file: CValuesRef<GKeyFile>?, separator: gchar): Unit {
    memScoped {
        return kniBridge885(key_file?.getPointer(memScope).rawValue, separator)
    }
}

fun g_key_file_load_from_file(key_file: CValuesRef<GKeyFile>?, @CCall.CString file: String?, flags: GKeyFileFlags, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge886(key_file?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_load_from_data(key_file: CValuesRef<GKeyFile>?, @CCall.CString data: String?, length: gsize, flags: GKeyFileFlags, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge887(key_file?.getPointer(memScope).rawValue, data?.cstr?.getPointer(memScope).rawValue, length, flags, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_load_from_bytes(key_file: CValuesRef<GKeyFile>?, bytes: CValuesRef<GBytes>?, flags: GKeyFileFlags, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge888(key_file?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_load_from_dirs(key_file: CValuesRef<GKeyFile>?, @CCall.CString file: String?, search_dirs: CValuesRef<CPointerVar<gcharVar>>?, full_path: CValuesRef<CPointerVar<gcharVar>>?, flags: GKeyFileFlags, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge889(key_file?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, search_dirs?.getPointer(memScope).rawValue, full_path?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_load_from_data_dirs(key_file: CValuesRef<GKeyFile>?, @CCall.CString file: String?, full_path: CValuesRef<CPointerVar<gcharVar>>?, flags: GKeyFileFlags, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge890(key_file?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, full_path?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_to_data(key_file: CValuesRef<GKeyFile>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge891(key_file?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_save_to_file(key_file: CValuesRef<GKeyFile>?, @CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge892(key_file?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_get_start_group(key_file: CValuesRef<GKeyFile>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge893(key_file?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_get_groups(key_file: CValuesRef<GKeyFile>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge894(key_file?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_get_keys(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge895(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_has_group(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?): gboolean {
    memScoped {
        return kniBridge896(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_has_key(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge897(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_get_value(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge898(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_value(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge899(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_get_string(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge900(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_string(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString string: String?): Unit {
    memScoped {
        return kniBridge901(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_get_locale_string(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString locale: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge902(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, locale?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_get_locale_for_key(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString locale: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge903(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, locale?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_locale_string(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString locale: String?, @CCall.CString string: String?): Unit {
    memScoped {
        return kniBridge904(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, locale?.cstr?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_get_boolean(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge905(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_set_boolean(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, value: gboolean): Unit {
    memScoped {
        return kniBridge906(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_key_file_get_integer(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge907(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_set_integer(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, value: gint): Unit {
    memScoped {
        return kniBridge908(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_key_file_get_int64(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gint64 {
    memScoped {
        return kniBridge909(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_set_int64(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, value: gint64): Unit {
    memScoped {
        return kniBridge910(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_key_file_get_uint64(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): guint64 {
    memScoped {
        return kniBridge911(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_set_uint64(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, value: guint64): Unit {
    memScoped {
        return kniBridge912(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_key_file_get_double(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gdouble {
    memScoped {
        return kniBridge913(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_set_double(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, value: gdouble): Unit {
    memScoped {
        return kniBridge914(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_key_file_get_string_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge915(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_string_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, list: CValuesRef<CPointerVar<gcharVar>>?, length: gsize): Unit {
    memScoped {
        return kniBridge916(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, list?.getPointer(memScope).rawValue, length)
    }
}

fun g_key_file_get_locale_string_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString locale: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge917(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, locale?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_locale_string_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString locale: String?, list: CValuesRef<CPointerVar<gcharVar>>?, length: gsize): Unit {
    memScoped {
        return kniBridge918(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, locale?.cstr?.getPointer(memScope).rawValue, list?.getPointer(memScope).rawValue, length)
    }
}

fun g_key_file_get_boolean_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gbooleanVar>? {
    memScoped {
        return interpretCPointer<gbooleanVar>(kniBridge919(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_boolean_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, list: CValuesRef<gbooleanVar>?, length: gsize): Unit {
    memScoped {
        return kniBridge920(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, list?.getPointer(memScope).rawValue, length)
    }
}

fun g_key_file_get_integer_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gintVar>? {
    memScoped {
        return interpretCPointer<gintVar>(kniBridge921(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_double_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, list: CValuesRef<gdoubleVar>?, length: gsize): Unit {
    memScoped {
        return kniBridge922(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, list?.getPointer(memScope).rawValue, length)
    }
}

fun g_key_file_get_double_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gdoubleVar>? {
    memScoped {
        return interpretCPointer<gdoubleVar>(kniBridge923(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_set_integer_list(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, list: CValuesRef<gintVar>?, length: gsize): Unit {
    memScoped {
        return kniBridge924(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, list?.getPointer(memScope).rawValue, length)
    }
}

fun g_key_file_set_comment(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, @CCall.CString comment: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge925(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, comment?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_get_comment(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge926(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_key_file_remove_comment(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge927(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_remove_key(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, @CCall.CString key: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge928(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_key_file_remove_group(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge929(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mapped_file_new(@CCall.CString filename: String?, writable: gboolean, error: CValuesRef<CPointerVar<GError>>?): CPointer<GMappedFile>? {
    memScoped {
        return interpretCPointer<GMappedFile>(kniBridge930(filename?.cstr?.getPointer(memScope).rawValue, writable, error?.getPointer(memScope).rawValue))
    }
}

fun g_mapped_file_new_from_fd(fd: gint, writable: gboolean, error: CValuesRef<CPointerVar<GError>>?): CPointer<GMappedFile>? {
    memScoped {
        return interpretCPointer<GMappedFile>(kniBridge931(fd, writable, error?.getPointer(memScope).rawValue))
    }
}

fun g_mapped_file_get_length(file: CValuesRef<GMappedFile>?): gsize {
    memScoped {
        return kniBridge932(file?.getPointer(memScope).rawValue)
    }
}

fun g_mapped_file_get_contents(file: CValuesRef<GMappedFile>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge933(file?.getPointer(memScope).rawValue))
    }
}

fun g_mapped_file_get_bytes(file: CValuesRef<GMappedFile>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge934(file?.getPointer(memScope).rawValue))
    }
}

fun g_mapped_file_ref(file: CValuesRef<GMappedFile>?): CPointer<GMappedFile>? {
    memScoped {
        return interpretCPointer<GMappedFile>(kniBridge935(file?.getPointer(memScope).rawValue))
    }
}

fun g_mapped_file_unref(file: CValuesRef<GMappedFile>?): Unit {
    memScoped {
        return kniBridge936(file?.getPointer(memScope).rawValue)
    }
}

fun g_mapped_file_free(file: CValuesRef<GMappedFile>?): Unit {
    memScoped {
        return kniBridge937(file?.getPointer(memScope).rawValue)
    }
}

fun g_markup_error_quark(): GQuark {
    return kniBridge938()
}

fun g_markup_parse_context_new(parser: CValuesRef<GMarkupParser>?, flags: GMarkupParseFlags, user_data: gpointer?, user_data_dnotify: GDestroyNotify?): CPointer<GMarkupParseContext>? {
    memScoped {
        return interpretCPointer<GMarkupParseContext>(kniBridge939(parser?.getPointer(memScope).rawValue, flags, user_data.rawValue, user_data_dnotify.rawValue))
    }
}

fun g_markup_parse_context_ref(context: CValuesRef<GMarkupParseContext>?): CPointer<GMarkupParseContext>? {
    memScoped {
        return interpretCPointer<GMarkupParseContext>(kniBridge940(context?.getPointer(memScope).rawValue))
    }
}

fun g_markup_parse_context_unref(context: CValuesRef<GMarkupParseContext>?): Unit {
    memScoped {
        return kniBridge941(context?.getPointer(memScope).rawValue)
    }
}

fun g_markup_parse_context_free(context: CValuesRef<GMarkupParseContext>?): Unit {
    memScoped {
        return kniBridge942(context?.getPointer(memScope).rawValue)
    }
}

fun g_markup_parse_context_parse(context: CValuesRef<GMarkupParseContext>?, @CCall.CString text: String?, text_len: gssize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge943(context?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, text_len, error?.getPointer(memScope).rawValue)
    }
}

fun g_markup_parse_context_push(context: CValuesRef<GMarkupParseContext>?, parser: CValuesRef<GMarkupParser>?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge944(context?.getPointer(memScope).rawValue, parser?.getPointer(memScope).rawValue, user_data.rawValue)
    }
}

fun g_markup_parse_context_pop(context: CValuesRef<GMarkupParseContext>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge945(context?.getPointer(memScope).rawValue))
    }
}

fun g_markup_parse_context_end_parse(context: CValuesRef<GMarkupParseContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge946(context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_markup_parse_context_get_element(context: CValuesRef<GMarkupParseContext>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge947(context?.getPointer(memScope).rawValue))
    }
}

fun g_markup_parse_context_get_element_stack(context: CValuesRef<GMarkupParseContext>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge948(context?.getPointer(memScope).rawValue))
    }
}

fun g_markup_parse_context_get_position(context: CValuesRef<GMarkupParseContext>?, line_number: CValuesRef<gintVar>?, char_number: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge949(context?.getPointer(memScope).rawValue, line_number?.getPointer(memScope).rawValue, char_number?.getPointer(memScope).rawValue)
    }
}

fun g_markup_parse_context_get_user_data(context: CValuesRef<GMarkupParseContext>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge950(context?.getPointer(memScope).rawValue))
    }
}

fun g_markup_escape_text(@CCall.CString text: String?, length: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge951(text?.cstr?.getPointer(memScope).rawValue, length))
    }
}

@CCall("knifunptr_glibresources9")
external fun g_markup_printf_escaped(@CCall.CString format: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_markup_vprintf_escaped(@CCall.CString format: String?, args: va_list?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge952(format?.cstr?.getPointer(memScope).rawValue, args.rawValue))
    }
}

@CCall("knifunptr_glibresources10")
external fun g_markup_collect_attributes(@CCall.CString element_name: String?, attribute_names: CValuesRef<CPointerVar<gcharVar>>?, attribute_values: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?, first_type: GMarkupCollectType, @CCall.CString first_attr: String?, vararg variadicArguments: Any?): gboolean

fun g_variant_type_string_is_valid(@CCall.CString type_string: String?): gboolean {
    memScoped {
        return kniBridge953(type_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_string_scan(@CCall.CString string: String?, @CCall.CString limit: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge954(string?.cstr?.getPointer(memScope).rawValue, limit?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_free(type: CValuesRef<GVariantType>?): Unit {
    memScoped {
        return kniBridge955(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_copy(type: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge956(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_new(@CCall.CString type_string: String?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge957(type_string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_get_string_length(type: CValuesRef<GVariantType>?): gsize {
    memScoped {
        return kniBridge958(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_peek_string(type: CValuesRef<GVariantType>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge959(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_dup_string(type: CValuesRef<GVariantType>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge960(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_is_definite(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge961(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_container(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge962(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_basic(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge963(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_maybe(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge964(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_array(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge965(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_tuple(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge966(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_dict_entry(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge967(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_is_variant(type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge968(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_hash(type: gconstpointer?): guint {
    return kniBridge969(type.rawValue)
}

fun g_variant_type_equal(type1: gconstpointer?, type2: gconstpointer?): gboolean {
    return kniBridge970(type1.rawValue, type2.rawValue)
}

fun g_variant_type_is_subtype_of(type: CValuesRef<GVariantType>?, supertype: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge971(type?.getPointer(memScope).rawValue, supertype?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_element(type: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge972(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_first(type: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge973(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_next(type: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge974(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_n_items(type: CValuesRef<GVariantType>?): gsize {
    memScoped {
        return kniBridge975(type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_type_key(type: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge976(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_value(type: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge977(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_new_array(element: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge978(element?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_new_maybe(element: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge979(element?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_new_tuple(items: CValuesRef<CPointerVar<GVariantType>>?, length: gint): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge980(items?.getPointer(memScope).rawValue, length))
    }
}

fun g_variant_type_new_dict_entry(key: CValuesRef<GVariantType>?, value: CValuesRef<GVariantType>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge981(key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_checked_(@CCall.CString arg0: String?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge982(arg0?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_type_string_get_depth_(@CCall.CString type_string: String?): gsize {
    memScoped {
        return kniBridge983(type_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_variant_unref(value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge984(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_ref(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge985(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_ref_sink(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge986(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_is_floating(value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge987(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_take_ref(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge988(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_type(value: CValuesRef<GVariant>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge989(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_type_string(value: CValuesRef<GVariant>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge990(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_is_of_type(value: CValuesRef<GVariant>?, type: CValuesRef<GVariantType>?): gboolean {
    memScoped {
        return kniBridge991(value?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_is_container(value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge992(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_classify(value: CValuesRef<GVariant>?): GVariantClass {
    memScoped {
        return kniBridge993(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_new_boolean(value: gboolean): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge994(value))
}

fun g_variant_new_byte(value: guint8): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge995(value))
}

fun g_variant_new_int16(value: gint16): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge996(value))
}

fun g_variant_new_uint16(value: guint16): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge997(value))
}

fun g_variant_new_int32(value: gint32): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge998(value))
}

fun g_variant_new_uint32(value: guint32): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge999(value))
}

fun g_variant_new_int64(value: gint64): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge1000(value))
}

fun g_variant_new_uint64(value: guint64): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge1001(value))
}

fun g_variant_new_handle(value: gint32): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge1002(value))
}

fun g_variant_new_double(value: gdouble): CPointer<GVariant>? {
    return interpretCPointer<GVariant>(kniBridge1003(value))
}

fun g_variant_new_string(@CCall.CString string: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1004(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_new_take_string(string: CValuesRef<gcharVar>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1005(string?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources11")
external fun g_variant_new_printf(@CCall.CString format_string: String?, vararg variadicArguments: Any?): CPointer<GVariant>?

fun g_variant_new_object_path(@CCall.CString object_path: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1006(object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_is_object_path(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1007(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_variant_new_signature(@CCall.CString signature: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1008(signature?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_is_signature(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1009(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_variant_new_variant(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1010(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_new_strv(strv: CValuesRef<CPointerVar<gcharVar>>?, length: gssize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1011(strv?.getPointer(memScope).rawValue, length))
    }
}

fun g_variant_new_objv(strv: CValuesRef<CPointerVar<gcharVar>>?, length: gssize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1012(strv?.getPointer(memScope).rawValue, length))
    }
}

fun g_variant_new_bytestring(@CCall.CString string: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1013(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_new_bytestring_array(strv: CValuesRef<CPointerVar<gcharVar>>?, length: gssize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1014(strv?.getPointer(memScope).rawValue, length))
    }
}

fun g_variant_new_fixed_array(element_type: CValuesRef<GVariantType>?, elements: gconstpointer?, n_elements: gsize, element_size: gsize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1015(element_type?.getPointer(memScope).rawValue, elements.rawValue, n_elements, element_size))
    }
}

fun g_variant_get_boolean(value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge1016(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_byte(value: CValuesRef<GVariant>?): guint8 {
    memScoped {
        return kniBridge1017(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_int16(value: CValuesRef<GVariant>?): gint16 {
    memScoped {
        return kniBridge1018(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_uint16(value: CValuesRef<GVariant>?): guint16 {
    memScoped {
        return kniBridge1019(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_int32(value: CValuesRef<GVariant>?): gint32 {
    memScoped {
        return kniBridge1020(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_uint32(value: CValuesRef<GVariant>?): guint32 {
    memScoped {
        return kniBridge1021(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_int64(value: CValuesRef<GVariant>?): gint64 {
    memScoped {
        return kniBridge1022(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_uint64(value: CValuesRef<GVariant>?): guint64 {
    memScoped {
        return kniBridge1023(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_handle(value: CValuesRef<GVariant>?): gint32 {
    memScoped {
        return kniBridge1024(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_double(value: CValuesRef<GVariant>?): gdouble {
    memScoped {
        return kniBridge1025(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_variant(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1026(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_string(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1027(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dup_string(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1028(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_strv(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1029(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dup_strv(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1030(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_objv(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1031(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dup_objv(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1032(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_bytestring(value: CValuesRef<GVariant>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1033(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dup_bytestring(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1034(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_bytestring_array(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1035(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dup_bytestring_array(value: CValuesRef<GVariant>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1036(value?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_variant_new_maybe(child_type: CValuesRef<GVariantType>?, child: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1037(child_type?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue))
    }
}

fun g_variant_new_array(child_type: CValuesRef<GVariantType>?, children: CValuesRef<CPointerVar<GVariant>>?, n_children: gsize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1038(child_type?.getPointer(memScope).rawValue, children?.getPointer(memScope).rawValue, n_children))
    }
}

fun g_variant_new_tuple(children: CValuesRef<CPointerVar<GVariant>>?, n_children: gsize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1039(children?.getPointer(memScope).rawValue, n_children))
    }
}

fun g_variant_new_dict_entry(key: CValuesRef<GVariant>?, value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1040(key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_maybe(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1041(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_n_children(value: CValuesRef<GVariant>?): gsize {
    memScoped {
        return kniBridge1042(value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources12")
external fun g_variant_get_child(value: CValuesRef<GVariant>?, index_: gsize, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_variant_get_child_value(value: CValuesRef<GVariant>?, index_: gsize): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1043(value?.getPointer(memScope).rawValue, index_))
    }
}

@CCall("knifunptr_glibresources13")
external fun g_variant_lookup(dictionary: CValuesRef<GVariant>?, @CCall.CString key: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_variant_lookup_value(dictionary: CValuesRef<GVariant>?, @CCall.CString key: String?, expected_type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1044(dictionary?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, expected_type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_fixed_array(value: CValuesRef<GVariant>?, n_elements: CValuesRef<gsizeVar>?, element_size: gsize): gconstpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1045(value?.getPointer(memScope).rawValue, n_elements?.getPointer(memScope).rawValue, element_size))
    }
}

fun g_variant_get_size(value: CValuesRef<GVariant>?): gsize {
    memScoped {
        return kniBridge1046(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_get_data(value: CValuesRef<GVariant>?): gconstpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1047(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_get_data_as_bytes(value: CValuesRef<GVariant>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge1048(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_store(value: CValuesRef<GVariant>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1049(value?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_variant_print(value: CValuesRef<GVariant>?, type_annotate: gboolean): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1050(value?.getPointer(memScope).rawValue, type_annotate))
    }
}

fun g_variant_print_string(value: CValuesRef<GVariant>?, string: CValuesRef<GString>?, type_annotate: gboolean): CPointer<GString>? {
    memScoped {
        return interpretCPointer<GString>(kniBridge1051(value?.getPointer(memScope).rawValue, string?.getPointer(memScope).rawValue, type_annotate))
    }
}

fun g_variant_hash(value: gconstpointer?): guint {
    return kniBridge1052(value.rawValue)
}

fun g_variant_equal(one: gconstpointer?, two: gconstpointer?): gboolean {
    return kniBridge1053(one.rawValue, two.rawValue)
}

fun g_variant_get_normal_form(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1054(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_is_normal_form(value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge1055(value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_byteswap(value: CValuesRef<GVariant>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1056(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_new_from_bytes(type: CValuesRef<GVariantType>?, bytes: CValuesRef<GBytes>?, trusted: gboolean): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1057(type?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue, trusted))
    }
}

fun g_variant_new_from_data(type: CValuesRef<GVariantType>?, data: gconstpointer?, size: gsize, trusted: gboolean, notify: GDestroyNotify?, user_data: gpointer?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1058(type?.getPointer(memScope).rawValue, data.rawValue, size, trusted, notify.rawValue, user_data.rawValue))
    }
}

fun g_variant_iter_new(value: CValuesRef<GVariant>?): CPointer<GVariantIter>? {
    memScoped {
        return interpretCPointer<GVariantIter>(kniBridge1059(value?.getPointer(memScope).rawValue))
    }
}

fun g_variant_iter_init(iter: CValuesRef<GVariantIter>?, value: CValuesRef<GVariant>?): gsize {
    memScoped {
        return kniBridge1060(iter?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_iter_copy(iter: CValuesRef<GVariantIter>?): CPointer<GVariantIter>? {
    memScoped {
        return interpretCPointer<GVariantIter>(kniBridge1061(iter?.getPointer(memScope).rawValue))
    }
}

fun g_variant_iter_n_children(iter: CValuesRef<GVariantIter>?): gsize {
    memScoped {
        return kniBridge1062(iter?.getPointer(memScope).rawValue)
    }
}

fun g_variant_iter_free(iter: CValuesRef<GVariantIter>?): Unit {
    memScoped {
        return kniBridge1063(iter?.getPointer(memScope).rawValue)
    }
}

fun g_variant_iter_next_value(iter: CValuesRef<GVariantIter>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1064(iter?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources14")
external fun g_variant_iter_next(iter: CValuesRef<GVariantIter>?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

@CCall("knifunptr_glibresources15")
external fun g_variant_iter_loop(iter: CValuesRef<GVariantIter>?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_variant_parser_get_error_quark(): GQuark {
    return kniBridge1065()
}

fun g_variant_parse_error_quark(): GQuark {
    return kniBridge1066()
}

fun g_variant_builder_new(type: CValuesRef<GVariantType>?): CPointer<GVariantBuilder>? {
    memScoped {
        return interpretCPointer<GVariantBuilder>(kniBridge1067(type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_builder_unref(builder: CValuesRef<GVariantBuilder>?): Unit {
    memScoped {
        return kniBridge1068(builder?.getPointer(memScope).rawValue)
    }
}

fun g_variant_builder_ref(builder: CValuesRef<GVariantBuilder>?): CPointer<GVariantBuilder>? {
    memScoped {
        return interpretCPointer<GVariantBuilder>(kniBridge1069(builder?.getPointer(memScope).rawValue))
    }
}

fun g_variant_builder_init(builder: CValuesRef<GVariantBuilder>?, type: CValuesRef<GVariantType>?): Unit {
    memScoped {
        return kniBridge1070(builder?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_builder_end(builder: CValuesRef<GVariantBuilder>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1071(builder?.getPointer(memScope).rawValue))
    }
}

fun g_variant_builder_clear(builder: CValuesRef<GVariantBuilder>?): Unit {
    memScoped {
        return kniBridge1072(builder?.getPointer(memScope).rawValue)
    }
}

fun g_variant_builder_open(builder: CValuesRef<GVariantBuilder>?, type: CValuesRef<GVariantType>?): Unit {
    memScoped {
        return kniBridge1073(builder?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun g_variant_builder_close(builder: CValuesRef<GVariantBuilder>?): Unit {
    memScoped {
        return kniBridge1074(builder?.getPointer(memScope).rawValue)
    }
}

fun g_variant_builder_add_value(builder: CValuesRef<GVariantBuilder>?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1075(builder?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources16")
external fun g_variant_builder_add(builder: CValuesRef<GVariantBuilder>?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources17")
external fun g_variant_builder_add_parsed(builder: CValuesRef<GVariantBuilder>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources18")
external fun g_variant_new(@CCall.CString format_string: String?, vararg variadicArguments: Any?): CPointer<GVariant>?

@CCall("knifunptr_glibresources19")
external fun g_variant_get(value: CValuesRef<GVariant>?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_variant_new_va(@CCall.CString format_string: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?, app: va_list?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1076(format_string?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue, app.rawValue))
    }
}

fun g_variant_get_va(value: CValuesRef<GVariant>?, @CCall.CString format_string: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?, app: va_list?): Unit {
    memScoped {
        return kniBridge1077(value?.getPointer(memScope).rawValue, format_string?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue, app.rawValue)
    }
}

fun g_variant_check_format_string(value: CValuesRef<GVariant>?, @CCall.CString format_string: String?, copy_only: gboolean): gboolean {
    memScoped {
        return kniBridge1078(value?.getPointer(memScope).rawValue, format_string?.cstr?.getPointer(memScope).rawValue, copy_only)
    }
}

fun g_variant_parse(type: CValuesRef<GVariantType>?, @CCall.CString text: String?, @CCall.CString limit: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1079(type?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, limit?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources20")
external fun g_variant_new_parsed(@CCall.CString format: String?, vararg variadicArguments: Any?): CPointer<GVariant>?

fun g_variant_new_parsed_va(@CCall.CString format: String?, app: va_list?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1080(format?.cstr?.getPointer(memScope).rawValue, app.rawValue))
    }
}

fun g_variant_parse_error_print_context(error: CValuesRef<GError>?, @CCall.CString source_str: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1081(error?.getPointer(memScope).rawValue, source_str?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_variant_compare(one: gconstpointer?, two: gconstpointer?): gint {
    return kniBridge1082(one.rawValue, two.rawValue)
}

fun g_variant_dict_new(from_asv: CValuesRef<GVariant>?): CPointer<GVariantDict>? {
    memScoped {
        return interpretCPointer<GVariantDict>(kniBridge1083(from_asv?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dict_init(dict: CValuesRef<GVariantDict>?, from_asv: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1084(dict?.getPointer(memScope).rawValue, from_asv?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources21")
external fun g_variant_dict_lookup(dict: CValuesRef<GVariantDict>?, @CCall.CString key: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_variant_dict_lookup_value(dict: CValuesRef<GVariantDict>?, @CCall.CString key: String?, expected_type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1085(dict?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, expected_type?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dict_contains(dict: CValuesRef<GVariantDict>?, @CCall.CString key: String?): gboolean {
    memScoped {
        return kniBridge1086(dict?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources22")
external fun g_variant_dict_insert(dict: CValuesRef<GVariantDict>?, @CCall.CString key: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_variant_dict_insert_value(dict: CValuesRef<GVariantDict>?, @CCall.CString key: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1087(dict?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_variant_dict_remove(dict: CValuesRef<GVariantDict>?, @CCall.CString key: String?): gboolean {
    memScoped {
        return kniBridge1088(dict?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_variant_dict_clear(dict: CValuesRef<GVariantDict>?): Unit {
    memScoped {
        return kniBridge1089(dict?.getPointer(memScope).rawValue)
    }
}

fun g_variant_dict_end(dict: CValuesRef<GVariantDict>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1090(dict?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dict_ref(dict: CValuesRef<GVariantDict>?): CPointer<GVariantDict>? {
    memScoped {
        return interpretCPointer<GVariantDict>(kniBridge1091(dict?.getPointer(memScope).rawValue))
    }
}

fun g_variant_dict_unref(dict: CValuesRef<GVariantDict>?): Unit {
    memScoped {
        return kniBridge1092(dict?.getPointer(memScope).rawValue)
    }
}

fun g_printf_string_upper_bound(@CCall.CString format: String?, args: va_list?): gsize {
    memScoped {
        return kniBridge1093(format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_log_set_handler(@CCall.CString log_domain: String?, log_levels: GLogLevelFlags, log_func: GLogFunc?, user_data: gpointer?): guint {
    memScoped {
        return kniBridge1094(log_domain?.cstr?.getPointer(memScope).rawValue, log_levels, log_func.rawValue, user_data.rawValue)
    }
}

fun g_log_set_handler_full(@CCall.CString log_domain: String?, log_levels: GLogLevelFlags, log_func: GLogFunc?, user_data: gpointer?, destroy: GDestroyNotify?): guint {
    memScoped {
        return kniBridge1095(log_domain?.cstr?.getPointer(memScope).rawValue, log_levels, log_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun g_log_remove_handler(@CCall.CString log_domain: String?, handler_id: guint): Unit {
    memScoped {
        return kniBridge1096(log_domain?.cstr?.getPointer(memScope).rawValue, handler_id)
    }
}

fun g_log_default_handler(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, @CCall.CString message: String?, unused_data: gpointer?): Unit {
    memScoped {
        return kniBridge1097(log_domain?.cstr?.getPointer(memScope).rawValue, log_level, message?.cstr?.getPointer(memScope).rawValue, unused_data.rawValue)
    }
}

fun g_log_set_default_handler(log_func: GLogFunc?, user_data: gpointer?): GLogFunc? {
    return interpretCPointer<CFunction<(CPointer<gcharVar>?, GLogLevelFlags, CPointer<gcharVar>?, gpointer?) -> Unit>>(kniBridge1098(log_func.rawValue, user_data.rawValue))
}

@CCall("knifunptr_glibresources23")
external fun g_log(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_logv(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, @CCall.CString format: String?, args: va_list?): Unit {
    memScoped {
        return kniBridge1099(log_domain?.cstr?.getPointer(memScope).rawValue, log_level, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_log_set_fatal_mask(@CCall.CString log_domain: String?, fatal_mask: GLogLevelFlags): GLogLevelFlags {
    memScoped {
        return kniBridge1100(log_domain?.cstr?.getPointer(memScope).rawValue, fatal_mask)
    }
}

fun g_log_set_always_fatal(fatal_mask: GLogLevelFlags): GLogLevelFlags {
    return kniBridge1101(fatal_mask)
}

@CCall("knifunptr_glibresources24")
external fun g_log_structured(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, vararg variadicArguments: Any?): Unit

fun g_log_structured_array(log_level: GLogLevelFlags, fields: CValuesRef<GLogField>?, n_fields: gsize): Unit {
    memScoped {
        return kniBridge1102(log_level, fields?.getPointer(memScope).rawValue, n_fields)
    }
}

fun g_log_variant(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, fields: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1103(log_domain?.cstr?.getPointer(memScope).rawValue, log_level, fields?.getPointer(memScope).rawValue)
    }
}

fun g_log_set_writer_func(func: GLogWriterFunc?, user_data: gpointer?, user_data_free: GDestroyNotify?): Unit {
    return kniBridge1104(func.rawValue, user_data.rawValue, user_data_free.rawValue)
}

fun g_log_writer_supports_color(output_fd: gint): gboolean {
    return kniBridge1105(output_fd)
}

fun g_log_writer_is_journald(output_fd: gint): gboolean {
    return kniBridge1106(output_fd)
}

fun g_log_writer_format_fields(log_level: GLogLevelFlags, fields: CValuesRef<GLogField>?, n_fields: gsize, use_color: gboolean): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1107(log_level, fields?.getPointer(memScope).rawValue, n_fields, use_color))
    }
}

fun g_log_writer_journald(log_level: GLogLevelFlags, fields: CValuesRef<GLogField>?, n_fields: gsize, user_data: gpointer?): GLogWriterOutput {
    memScoped {
        return kniBridge1108(log_level, fields?.getPointer(memScope).rawValue, n_fields, user_data.rawValue)
    }
}

fun g_log_writer_standard_streams(log_level: GLogLevelFlags, fields: CValuesRef<GLogField>?, n_fields: gsize, user_data: gpointer?): GLogWriterOutput {
    memScoped {
        return kniBridge1109(log_level, fields?.getPointer(memScope).rawValue, n_fields, user_data.rawValue)
    }
}

fun g_log_writer_default(log_level: GLogLevelFlags, fields: CValuesRef<GLogField>?, n_fields: gsize, user_data: gpointer?): GLogWriterOutput {
    memScoped {
        return kniBridge1110(log_level, fields?.getPointer(memScope).rawValue, n_fields, user_data.rawValue)
    }
}

fun _g_log_fallback_handler(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, @CCall.CString message: String?, unused_data: gpointer?): Unit {
    memScoped {
        return kniBridge1111(log_domain?.cstr?.getPointer(memScope).rawValue, log_level, message?.cstr?.getPointer(memScope).rawValue, unused_data.rawValue)
    }
}

fun g_return_if_fail_warning(@CCall.CString log_domain: String?, @CCall.CString pretty_function: String?, @CCall.CString expression: String?): Unit {
    memScoped {
        return kniBridge1112(log_domain?.cstr?.getPointer(memScope).rawValue, pretty_function?.cstr?.getPointer(memScope).rawValue, expression?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_warn_message(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?, @CCall.CString warnexpr: String?): Unit {
    memScoped {
        return kniBridge1113(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue, warnexpr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_assert_warning(@CCall.CString log_domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString pretty_function: String?, @CCall.CString expression: String?): Unit {
    memScoped {
        return kniBridge1114(log_domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, pretty_function?.cstr?.getPointer(memScope).rawValue, expression?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources25")
external fun g_log_structured_standard(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, @CCall.CString file: String?, @CCall.CString line: String?, @CCall.CString func: String?, @CCall.CString message_format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources26")
external fun g_print(@CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_set_print_handler(func: GPrintFunc?): GPrintFunc? {
    return interpretCPointer<CFunction<(CPointer<gcharVar>?) -> Unit>>(kniBridge1115(func.rawValue))
}

@CCall("knifunptr_glibresources27")
external fun g_printerr(@CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_set_printerr_handler(func: GPrintFunc?): GPrintFunc? {
    return interpretCPointer<CFunction<(CPointer<gcharVar>?) -> Unit>>(kniBridge1116(func.rawValue))
}

fun g_option_error_quark(): GQuark {
    return kniBridge1117()
}

fun g_option_context_new(@CCall.CString parameter_string: String?): CPointer<GOptionContext>? {
    memScoped {
        return interpretCPointer<GOptionContext>(kniBridge1118(parameter_string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_option_context_set_summary(context: CValuesRef<GOptionContext>?, @CCall.CString summary: String?): Unit {
    memScoped {
        return kniBridge1119(context?.getPointer(memScope).rawValue, summary?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_get_summary(context: CValuesRef<GOptionContext>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1120(context?.getPointer(memScope).rawValue))
    }
}

fun g_option_context_set_description(context: CValuesRef<GOptionContext>?, @CCall.CString description: String?): Unit {
    memScoped {
        return kniBridge1121(context?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_get_description(context: CValuesRef<GOptionContext>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1122(context?.getPointer(memScope).rawValue))
    }
}

fun g_option_context_free(context: CValuesRef<GOptionContext>?): Unit {
    memScoped {
        return kniBridge1123(context?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_set_help_enabled(context: CValuesRef<GOptionContext>?, help_enabled: gboolean): Unit {
    memScoped {
        return kniBridge1124(context?.getPointer(memScope).rawValue, help_enabled)
    }
}

fun g_option_context_get_help_enabled(context: CValuesRef<GOptionContext>?): gboolean {
    memScoped {
        return kniBridge1125(context?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_set_ignore_unknown_options(context: CValuesRef<GOptionContext>?, ignore_unknown: gboolean): Unit {
    memScoped {
        return kniBridge1126(context?.getPointer(memScope).rawValue, ignore_unknown)
    }
}

fun g_option_context_get_ignore_unknown_options(context: CValuesRef<GOptionContext>?): gboolean {
    memScoped {
        return kniBridge1127(context?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_set_strict_posix(context: CValuesRef<GOptionContext>?, strict_posix: gboolean): Unit {
    memScoped {
        return kniBridge1128(context?.getPointer(memScope).rawValue, strict_posix)
    }
}

fun g_option_context_get_strict_posix(context: CValuesRef<GOptionContext>?): gboolean {
    memScoped {
        return kniBridge1129(context?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_add_main_entries(context: CValuesRef<GOptionContext>?, entries: CValuesRef<GOptionEntry>?, @CCall.CString translation_domain: String?): Unit {
    memScoped {
        return kniBridge1130(context?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, translation_domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_parse(context: CValuesRef<GOptionContext>?, argc: CValuesRef<gintVar>?, argv: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1131(context?.getPointer(memScope).rawValue, argc?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_parse_strv(context: CValuesRef<GOptionContext>?, arguments: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1132(context?.getPointer(memScope).rawValue, arguments?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_set_translate_func(context: CValuesRef<GOptionContext>?, func: GTranslateFunc?, data: gpointer?, destroy_notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1133(context?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy_notify.rawValue)
    }
}

fun g_option_context_set_translation_domain(context: CValuesRef<GOptionContext>?, @CCall.CString domain: String?): Unit {
    memScoped {
        return kniBridge1134(context?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_add_group(context: CValuesRef<GOptionContext>?, group: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge1135(context?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_set_main_group(context: CValuesRef<GOptionContext>?, group: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge1136(context?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun g_option_context_get_main_group(context: CValuesRef<GOptionContext>?): CPointer<GOptionGroup>? {
    memScoped {
        return interpretCPointer<GOptionGroup>(kniBridge1137(context?.getPointer(memScope).rawValue))
    }
}

fun g_option_context_get_help(context: CValuesRef<GOptionContext>?, main_help: gboolean, group: CValuesRef<GOptionGroup>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1138(context?.getPointer(memScope).rawValue, main_help, group?.getPointer(memScope).rawValue))
    }
}

fun g_option_group_new(@CCall.CString name: String?, @CCall.CString description: String?, @CCall.CString help_description: String?, user_data: gpointer?, destroy: GDestroyNotify?): CPointer<GOptionGroup>? {
    memScoped {
        return interpretCPointer<GOptionGroup>(kniBridge1139(name?.cstr?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue, help_description?.cstr?.getPointer(memScope).rawValue, user_data.rawValue, destroy.rawValue))
    }
}

fun g_option_group_set_parse_hooks(group: CValuesRef<GOptionGroup>?, pre_parse_func: GOptionParseFunc?, post_parse_func: GOptionParseFunc?): Unit {
    memScoped {
        return kniBridge1140(group?.getPointer(memScope).rawValue, pre_parse_func.rawValue, post_parse_func.rawValue)
    }
}

fun g_option_group_set_error_hook(group: CValuesRef<GOptionGroup>?, error_func: GOptionErrorFunc?): Unit {
    memScoped {
        return kniBridge1141(group?.getPointer(memScope).rawValue, error_func.rawValue)
    }
}

fun g_option_group_free(group: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge1142(group?.getPointer(memScope).rawValue)
    }
}

fun g_option_group_ref(group: CValuesRef<GOptionGroup>?): CPointer<GOptionGroup>? {
    memScoped {
        return interpretCPointer<GOptionGroup>(kniBridge1143(group?.getPointer(memScope).rawValue))
    }
}

fun g_option_group_unref(group: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge1144(group?.getPointer(memScope).rawValue)
    }
}

fun g_option_group_add_entries(group: CValuesRef<GOptionGroup>?, entries: CValuesRef<GOptionEntry>?): Unit {
    memScoped {
        return kniBridge1145(group?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue)
    }
}

fun g_option_group_set_translate_func(group: CValuesRef<GOptionGroup>?, func: GTranslateFunc?, data: gpointer?, destroy_notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1146(group?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy_notify.rawValue)
    }
}

fun g_option_group_set_translation_domain(group: CValuesRef<GOptionGroup>?, @CCall.CString domain: String?): Unit {
    memScoped {
        return kniBridge1147(group?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_pattern_spec_new(@CCall.CString pattern: String?): CPointer<GPatternSpec>? {
    memScoped {
        return interpretCPointer<GPatternSpec>(kniBridge1148(pattern?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_pattern_spec_free(pspec: CValuesRef<GPatternSpec>?): Unit {
    memScoped {
        return kniBridge1149(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_pattern_spec_equal(pspec1: CValuesRef<GPatternSpec>?, pspec2: CValuesRef<GPatternSpec>?): gboolean {
    memScoped {
        return kniBridge1150(pspec1?.getPointer(memScope).rawValue, pspec2?.getPointer(memScope).rawValue)
    }
}

fun g_pattern_match(pspec: CValuesRef<GPatternSpec>?, string_length: guint, @CCall.CString string: String?, @CCall.CString string_reversed: String?): gboolean {
    memScoped {
        return kniBridge1151(pspec?.getPointer(memScope).rawValue, string_length, string?.cstr?.getPointer(memScope).rawValue, string_reversed?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_pattern_match_string(pspec: CValuesRef<GPatternSpec>?, @CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1152(pspec?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_pattern_match_simple(@CCall.CString pattern: String?, @CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1153(pattern?.cstr?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_spaced_primes_closest(num: guint): guint {
    return kniBridge1154(num)
}

fun g_qsort_with_data(pbase: gconstpointer?, total_elems: gint, size: gsize, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    return kniBridge1155(pbase.rawValue, total_elems, size, compare_func.rawValue, user_data.rawValue)
}

fun g_queue_new(): CPointer<GQueue>? {
    return interpretCPointer<GQueue>(kniBridge1156())
}

fun g_queue_free(queue: CValuesRef<GQueue>?): Unit {
    memScoped {
        return kniBridge1157(queue?.getPointer(memScope).rawValue)
    }
}

fun g_queue_free_full(queue: CValuesRef<GQueue>?, free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1158(queue?.getPointer(memScope).rawValue, free_func.rawValue)
    }
}

fun g_queue_init(queue: CValuesRef<GQueue>?): Unit {
    memScoped {
        return kniBridge1159(queue?.getPointer(memScope).rawValue)
    }
}

fun g_queue_clear(queue: CValuesRef<GQueue>?): Unit {
    memScoped {
        return kniBridge1160(queue?.getPointer(memScope).rawValue)
    }
}

fun g_queue_is_empty(queue: CValuesRef<GQueue>?): gboolean {
    memScoped {
        return kniBridge1161(queue?.getPointer(memScope).rawValue)
    }
}

fun g_queue_clear_full(queue: CValuesRef<GQueue>?, free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1162(queue?.getPointer(memScope).rawValue, free_func.rawValue)
    }
}

fun g_queue_get_length(queue: CValuesRef<GQueue>?): guint {
    memScoped {
        return kniBridge1163(queue?.getPointer(memScope).rawValue)
    }
}

fun g_queue_reverse(queue: CValuesRef<GQueue>?): Unit {
    memScoped {
        return kniBridge1164(queue?.getPointer(memScope).rawValue)
    }
}

fun g_queue_copy(queue: CValuesRef<GQueue>?): CPointer<GQueue>? {
    memScoped {
        return interpretCPointer<GQueue>(kniBridge1165(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_foreach(queue: CValuesRef<GQueue>?, func: GFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1166(queue?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_queue_find(queue: CValuesRef<GQueue>?, data: gconstpointer?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1167(queue?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_queue_find_custom(queue: CValuesRef<GQueue>?, data: gconstpointer?, func: GCompareFunc?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1168(queue?.getPointer(memScope).rawValue, data.rawValue, func.rawValue))
    }
}

fun g_queue_sort(queue: CValuesRef<GQueue>?, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1169(queue?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_queue_push_head(queue: CValuesRef<GQueue>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1170(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_push_tail(queue: CValuesRef<GQueue>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1171(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_push_nth(queue: CValuesRef<GQueue>?, data: gpointer?, n: gint): Unit {
    memScoped {
        return kniBridge1172(queue?.getPointer(memScope).rawValue, data.rawValue, n)
    }
}

fun g_queue_pop_head(queue: CValuesRef<GQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1173(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_pop_tail(queue: CValuesRef<GQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1174(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_pop_nth(queue: CValuesRef<GQueue>?, n: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1175(queue?.getPointer(memScope).rawValue, n))
    }
}

fun g_queue_peek_head(queue: CValuesRef<GQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1176(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_peek_tail(queue: CValuesRef<GQueue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1177(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_peek_nth(queue: CValuesRef<GQueue>?, n: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1178(queue?.getPointer(memScope).rawValue, n))
    }
}

fun g_queue_index(queue: CValuesRef<GQueue>?, data: gconstpointer?): gint {
    memScoped {
        return kniBridge1179(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_remove(queue: CValuesRef<GQueue>?, data: gconstpointer?): gboolean {
    memScoped {
        return kniBridge1180(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_remove_all(queue: CValuesRef<GQueue>?, data: gconstpointer?): guint {
    memScoped {
        return kniBridge1181(queue?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_insert_before(queue: CValuesRef<GQueue>?, sibling: CValuesRef<GList>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1182(queue?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_insert_before_link(queue: CValuesRef<GQueue>?, sibling: CValuesRef<GList>?, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1183(queue?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_insert_after(queue: CValuesRef<GQueue>?, sibling: CValuesRef<GList>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1184(queue?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_queue_insert_after_link(queue: CValuesRef<GQueue>?, sibling: CValuesRef<GList>?, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1185(queue?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_insert_sorted(queue: CValuesRef<GQueue>?, data: gpointer?, func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1186(queue?.getPointer(memScope).rawValue, data.rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_queue_push_head_link(queue: CValuesRef<GQueue>?, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1187(queue?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_push_tail_link(queue: CValuesRef<GQueue>?, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1188(queue?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_push_nth_link(queue: CValuesRef<GQueue>?, n: gint, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1189(queue?.getPointer(memScope).rawValue, n, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_pop_head_link(queue: CValuesRef<GQueue>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1190(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_pop_tail_link(queue: CValuesRef<GQueue>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1191(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_pop_nth_link(queue: CValuesRef<GQueue>?, n: guint): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1192(queue?.getPointer(memScope).rawValue, n))
    }
}

fun g_queue_peek_head_link(queue: CValuesRef<GQueue>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1193(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_peek_tail_link(queue: CValuesRef<GQueue>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1194(queue?.getPointer(memScope).rawValue))
    }
}

fun g_queue_peek_nth_link(queue: CValuesRef<GQueue>?, n: guint): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1195(queue?.getPointer(memScope).rawValue, n))
    }
}

fun g_queue_link_index(queue: CValuesRef<GQueue>?, link_: CValuesRef<GList>?): gint {
    memScoped {
        return kniBridge1196(queue?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_unlink(queue: CValuesRef<GQueue>?, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1197(queue?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_queue_delete_link(queue: CValuesRef<GQueue>?, link_: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1198(queue?.getPointer(memScope).rawValue, link_?.getPointer(memScope).rawValue)
    }
}

fun g_rand_new_with_seed(seed: guint32): CPointer<GRand>? {
    return interpretCPointer<GRand>(kniBridge1199(seed))
}

fun g_rand_new_with_seed_array(seed: CValuesRef<guint32Var>?, seed_length: guint): CPointer<GRand>? {
    memScoped {
        return interpretCPointer<GRand>(kniBridge1200(seed?.getPointer(memScope).rawValue, seed_length))
    }
}

fun g_rand_new(): CPointer<GRand>? {
    return interpretCPointer<GRand>(kniBridge1201())
}

fun g_rand_free(rand_: CValuesRef<GRand>?): Unit {
    memScoped {
        return kniBridge1202(rand_?.getPointer(memScope).rawValue)
    }
}

fun g_rand_copy(rand_: CValuesRef<GRand>?): CPointer<GRand>? {
    memScoped {
        return interpretCPointer<GRand>(kniBridge1203(rand_?.getPointer(memScope).rawValue))
    }
}

fun g_rand_set_seed(rand_: CValuesRef<GRand>?, seed: guint32): Unit {
    memScoped {
        return kniBridge1204(rand_?.getPointer(memScope).rawValue, seed)
    }
}

fun g_rand_set_seed_array(rand_: CValuesRef<GRand>?, seed: CValuesRef<guint32Var>?, seed_length: guint): Unit {
    memScoped {
        return kniBridge1205(rand_?.getPointer(memScope).rawValue, seed?.getPointer(memScope).rawValue, seed_length)
    }
}

fun g_rand_int(rand_: CValuesRef<GRand>?): guint32 {
    memScoped {
        return kniBridge1206(rand_?.getPointer(memScope).rawValue)
    }
}

fun g_rand_int_range(rand_: CValuesRef<GRand>?, begin: gint32, end: gint32): gint32 {
    memScoped {
        return kniBridge1207(rand_?.getPointer(memScope).rawValue, begin, end)
    }
}

fun g_rand_double(rand_: CValuesRef<GRand>?): gdouble {
    memScoped {
        return kniBridge1208(rand_?.getPointer(memScope).rawValue)
    }
}

fun g_rand_double_range(rand_: CValuesRef<GRand>?, begin: gdouble, end: gdouble): gdouble {
    memScoped {
        return kniBridge1209(rand_?.getPointer(memScope).rawValue, begin, end)
    }
}

fun g_random_set_seed(seed: guint32): Unit {
    return kniBridge1210(seed)
}

fun g_random_int(): guint32 {
    return kniBridge1211()
}

fun g_random_int_range(begin: gint32, end: gint32): gint32 {
    return kniBridge1212(begin, end)
}

fun g_random_double(): gdouble {
    return kniBridge1213()
}

fun g_random_double_range(begin: gdouble, end: gdouble): gdouble {
    return kniBridge1214(begin, end)
}

fun g_rc_box_alloc(block_size: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1215(block_size))
}

fun g_rc_box_alloc0(block_size: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1216(block_size))
}

fun g_rc_box_dup(block_size: gsize, mem_block: gconstpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1217(block_size, mem_block.rawValue))
}

fun g_rc_box_acquire(mem_block: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1218(mem_block.rawValue))
}

fun g_rc_box_release(mem_block: gpointer?): Unit {
    return kniBridge1219(mem_block.rawValue)
}

fun g_rc_box_release_full(mem_block: gpointer?, clear_func: GDestroyNotify?): Unit {
    return kniBridge1220(mem_block.rawValue, clear_func.rawValue)
}

fun g_rc_box_get_size(mem_block: gpointer?): gsize {
    return kniBridge1221(mem_block.rawValue)
}

fun g_atomic_rc_box_alloc(block_size: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1222(block_size))
}

fun g_atomic_rc_box_alloc0(block_size: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1223(block_size))
}

fun g_atomic_rc_box_dup(block_size: gsize, mem_block: gconstpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1224(block_size, mem_block.rawValue))
}

fun g_atomic_rc_box_acquire(mem_block: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1225(mem_block.rawValue))
}

fun g_atomic_rc_box_release(mem_block: gpointer?): Unit {
    return kniBridge1226(mem_block.rawValue)
}

fun g_atomic_rc_box_release_full(mem_block: gpointer?, clear_func: GDestroyNotify?): Unit {
    return kniBridge1227(mem_block.rawValue, clear_func.rawValue)
}

fun g_atomic_rc_box_get_size(mem_block: gpointer?): gsize {
    return kniBridge1228(mem_block.rawValue)
}

fun g_ref_count_init(rc: CValuesRef<grefcountVar>?): Unit {
    memScoped {
        return kniBridge1229(rc?.getPointer(memScope).rawValue)
    }
}

fun g_ref_count_inc(rc: CValuesRef<grefcountVar>?): Unit {
    memScoped {
        return kniBridge1230(rc?.getPointer(memScope).rawValue)
    }
}

fun g_ref_count_dec(rc: CValuesRef<grefcountVar>?): gboolean {
    memScoped {
        return kniBridge1231(rc?.getPointer(memScope).rawValue)
    }
}

fun g_ref_count_compare(rc: CValuesRef<grefcountVar>?, `val`: gint): gboolean {
    memScoped {
        return kniBridge1232(rc?.getPointer(memScope).rawValue, `val`)
    }
}

fun g_atomic_ref_count_init(arc: CValuesRef<gatomicrefcountVar>?): Unit {
    memScoped {
        return kniBridge1233(arc?.getPointer(memScope).rawValue)
    }
}

fun g_atomic_ref_count_inc(arc: CValuesRef<gatomicrefcountVar>?): Unit {
    memScoped {
        return kniBridge1234(arc?.getPointer(memScope).rawValue)
    }
}

fun g_atomic_ref_count_dec(arc: CValuesRef<gatomicrefcountVar>?): gboolean {
    memScoped {
        return kniBridge1235(arc?.getPointer(memScope).rawValue)
    }
}

fun g_atomic_ref_count_compare(arc: CValuesRef<gatomicrefcountVar>?, `val`: gint): gboolean {
    memScoped {
        return kniBridge1236(arc?.getPointer(memScope).rawValue, `val`)
    }
}

fun g_ref_string_new(@CCall.CString str: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1237(str?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_ref_string_new_len(@CCall.CString str: String?, len: gssize): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1238(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_ref_string_new_intern(@CCall.CString str: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1239(str?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_ref_string_acquire(str: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1240(str?.getPointer(memScope).rawValue))
    }
}

fun g_ref_string_release(str: CValuesRef<ByteVar>?): Unit {
    memScoped {
        return kniBridge1241(str?.getPointer(memScope).rawValue)
    }
}

fun g_ref_string_length(str: CValuesRef<ByteVar>?): gsize {
    memScoped {
        return kniBridge1242(str?.getPointer(memScope).rawValue)
    }
}

fun g_regex_error_quark(): GQuark {
    return kniBridge1243()
}

fun g_regex_new(@CCall.CString pattern: String?, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GRegex>? {
    memScoped {
        return interpretCPointer<GRegex>(kniBridge1244(pattern?.cstr?.getPointer(memScope).rawValue, compile_options, match_options, error?.getPointer(memScope).rawValue))
    }
}

fun g_regex_ref(regex: CValuesRef<GRegex>?): CPointer<GRegex>? {
    memScoped {
        return interpretCPointer<GRegex>(kniBridge1245(regex?.getPointer(memScope).rawValue))
    }
}

fun g_regex_unref(regex: CValuesRef<GRegex>?): Unit {
    memScoped {
        return kniBridge1246(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_get_pattern(regex: CValuesRef<GRegex>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1247(regex?.getPointer(memScope).rawValue))
    }
}

fun g_regex_get_max_backref(regex: CValuesRef<GRegex>?): gint {
    memScoped {
        return kniBridge1248(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_get_capture_count(regex: CValuesRef<GRegex>?): gint {
    memScoped {
        return kniBridge1249(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_get_has_cr_or_lf(regex: CValuesRef<GRegex>?): gboolean {
    memScoped {
        return kniBridge1250(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_get_max_lookbehind(regex: CValuesRef<GRegex>?): gint {
    memScoped {
        return kniBridge1251(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_get_string_number(regex: CValuesRef<GRegex>?, @CCall.CString name: String?): gint {
    memScoped {
        return kniBridge1252(regex?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_regex_escape_string(@CCall.CString string: String?, length: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1253(string?.cstr?.getPointer(memScope).rawValue, length))
    }
}

fun g_regex_escape_nul(@CCall.CString string: String?, length: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1254(string?.cstr?.getPointer(memScope).rawValue, length))
    }
}

fun g_regex_get_compile_flags(regex: CValuesRef<GRegex>?): GRegexCompileFlags {
    memScoped {
        return kniBridge1255(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_get_match_flags(regex: CValuesRef<GRegex>?): GRegexMatchFlags {
    memScoped {
        return kniBridge1256(regex?.getPointer(memScope).rawValue)
    }
}

fun g_regex_match_simple(@CCall.CString pattern: String?, @CCall.CString string: String?, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags): gboolean {
    memScoped {
        return kniBridge1257(pattern?.cstr?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, compile_options, match_options)
    }
}

fun g_regex_match(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, match_options: GRegexMatchFlags, match_info: CValuesRef<CPointerVar<GMatchInfo>>?): gboolean {
    memScoped {
        return kniBridge1258(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, match_options, match_info?.getPointer(memScope).rawValue)
    }
}

fun g_regex_match_full(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, match_info: CValuesRef<CPointerVar<GMatchInfo>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1259(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, string_len, start_position, match_options, match_info?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_regex_match_all(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, match_options: GRegexMatchFlags, match_info: CValuesRef<CPointerVar<GMatchInfo>>?): gboolean {
    memScoped {
        return kniBridge1260(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, match_options, match_info?.getPointer(memScope).rawValue)
    }
}

fun g_regex_match_all_full(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, match_info: CValuesRef<CPointerVar<GMatchInfo>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1261(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, string_len, start_position, match_options, match_info?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_regex_split_simple(@CCall.CString pattern: String?, @CCall.CString string: String?, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1262(pattern?.cstr?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, compile_options, match_options))
    }
}

fun g_regex_split(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, match_options: GRegexMatchFlags): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1263(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, match_options))
    }
}

fun g_regex_split_full(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, max_tokens: gint, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1264(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, string_len, start_position, match_options, max_tokens, error?.getPointer(memScope).rawValue))
    }
}

fun g_regex_replace(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, string_len: gssize, start_position: gint, @CCall.CString replacement: String?, match_options: GRegexMatchFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1265(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, string_len, start_position, replacement?.cstr?.getPointer(memScope).rawValue, match_options, error?.getPointer(memScope).rawValue))
    }
}

fun g_regex_replace_literal(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, string_len: gssize, start_position: gint, @CCall.CString replacement: String?, match_options: GRegexMatchFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1266(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, string_len, start_position, replacement?.cstr?.getPointer(memScope).rawValue, match_options, error?.getPointer(memScope).rawValue))
    }
}

fun g_regex_replace_eval(regex: CValuesRef<GRegex>?, @CCall.CString string: String?, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, eval: GRegexEvalCallback?, user_data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1267(regex?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, string_len, start_position, match_options, eval.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_regex_check_replacement(@CCall.CString replacement: String?, has_references: CValuesRef<gbooleanVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1268(replacement?.cstr?.getPointer(memScope).rawValue, has_references?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_get_regex(match_info: CValuesRef<GMatchInfo>?): CPointer<GRegex>? {
    memScoped {
        return interpretCPointer<GRegex>(kniBridge1269(match_info?.getPointer(memScope).rawValue))
    }
}

fun g_match_info_get_string(match_info: CValuesRef<GMatchInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1270(match_info?.getPointer(memScope).rawValue))
    }
}

fun g_match_info_ref(match_info: CValuesRef<GMatchInfo>?): CPointer<GMatchInfo>? {
    memScoped {
        return interpretCPointer<GMatchInfo>(kniBridge1271(match_info?.getPointer(memScope).rawValue))
    }
}

fun g_match_info_unref(match_info: CValuesRef<GMatchInfo>?): Unit {
    memScoped {
        return kniBridge1272(match_info?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_free(match_info: CValuesRef<GMatchInfo>?): Unit {
    memScoped {
        return kniBridge1273(match_info?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_next(match_info: CValuesRef<GMatchInfo>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1274(match_info?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_matches(match_info: CValuesRef<GMatchInfo>?): gboolean {
    memScoped {
        return kniBridge1275(match_info?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_get_match_count(match_info: CValuesRef<GMatchInfo>?): gint {
    memScoped {
        return kniBridge1276(match_info?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_is_partial_match(match_info: CValuesRef<GMatchInfo>?): gboolean {
    memScoped {
        return kniBridge1277(match_info?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_expand_references(match_info: CValuesRef<GMatchInfo>?, @CCall.CString string_to_expand: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1278(match_info?.getPointer(memScope).rawValue, string_to_expand?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_match_info_fetch(match_info: CValuesRef<GMatchInfo>?, match_num: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1279(match_info?.getPointer(memScope).rawValue, match_num))
    }
}

fun g_match_info_fetch_pos(match_info: CValuesRef<GMatchInfo>?, match_num: gint, start_pos: CValuesRef<gintVar>?, end_pos: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge1280(match_info?.getPointer(memScope).rawValue, match_num, start_pos?.getPointer(memScope).rawValue, end_pos?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_fetch_named(match_info: CValuesRef<GMatchInfo>?, @CCall.CString name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1281(match_info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_match_info_fetch_named_pos(match_info: CValuesRef<GMatchInfo>?, @CCall.CString name: String?, start_pos: CValuesRef<gintVar>?, end_pos: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge1282(match_info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, start_pos?.getPointer(memScope).rawValue, end_pos?.getPointer(memScope).rawValue)
    }
}

fun g_match_info_fetch_all(match_info: CValuesRef<GMatchInfo>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1283(match_info?.getPointer(memScope).rawValue))
    }
}

fun g_scanner_new(config_templ: CValuesRef<GScannerConfig>?): CPointer<GScanner>? {
    memScoped {
        return interpretCPointer<GScanner>(kniBridge1284(config_templ?.getPointer(memScope).rawValue))
    }
}

fun g_scanner_destroy(scanner: CValuesRef<GScanner>?): Unit {
    memScoped {
        return kniBridge1285(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_input_file(scanner: CValuesRef<GScanner>?, input_fd: gint): Unit {
    memScoped {
        return kniBridge1286(scanner?.getPointer(memScope).rawValue, input_fd)
    }
}

fun g_scanner_sync_file_offset(scanner: CValuesRef<GScanner>?): Unit {
    memScoped {
        return kniBridge1287(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_input_text(scanner: CValuesRef<GScanner>?, @CCall.CString text: String?, text_len: guint): Unit {
    memScoped {
        return kniBridge1288(scanner?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, text_len)
    }
}

fun g_scanner_get_next_token(scanner: CValuesRef<GScanner>?): GTokenType {
    memScoped {
        return kniBridge1289(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_peek_next_token(scanner: CValuesRef<GScanner>?): GTokenType {
    memScoped {
        return kniBridge1290(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_cur_token(scanner: CValuesRef<GScanner>?): GTokenType {
    memScoped {
        return kniBridge1291(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_cur_value(scanner: CValuesRef<GScanner>?): CValue<GTokenValue> {
    memScoped {
        val kniRetVal = nativeHeap.alloc<GTokenValue>()
        try {
            kniBridge1292(scanner?.getPointer(memScope).rawValue, kniRetVal.rawPtr)
            return kniRetVal.readValue()
        } finally { nativeHeap.free(kniRetVal) }
    }
}

fun g_scanner_cur_line(scanner: CValuesRef<GScanner>?): guint {
    memScoped {
        return kniBridge1293(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_cur_position(scanner: CValuesRef<GScanner>?): guint {
    memScoped {
        return kniBridge1294(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_eof(scanner: CValuesRef<GScanner>?): gboolean {
    memScoped {
        return kniBridge1295(scanner?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_set_scope(scanner: CValuesRef<GScanner>?, scope_id: guint): guint {
    memScoped {
        return kniBridge1296(scanner?.getPointer(memScope).rawValue, scope_id)
    }
}

fun g_scanner_scope_add_symbol(scanner: CValuesRef<GScanner>?, scope_id: guint, @CCall.CString symbol: String?, value: gpointer?): Unit {
    memScoped {
        return kniBridge1297(scanner?.getPointer(memScope).rawValue, scope_id, symbol?.cstr?.getPointer(memScope).rawValue, value.rawValue)
    }
}

fun g_scanner_scope_remove_symbol(scanner: CValuesRef<GScanner>?, scope_id: guint, @CCall.CString symbol: String?): Unit {
    memScoped {
        return kniBridge1298(scanner?.getPointer(memScope).rawValue, scope_id, symbol?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_scanner_scope_lookup_symbol(scanner: CValuesRef<GScanner>?, scope_id: guint, @CCall.CString symbol: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1299(scanner?.getPointer(memScope).rawValue, scope_id, symbol?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_scanner_scope_foreach_symbol(scanner: CValuesRef<GScanner>?, scope_id: guint, func: GHFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1300(scanner?.getPointer(memScope).rawValue, scope_id, func.rawValue, user_data.rawValue)
    }
}

fun g_scanner_lookup_symbol(scanner: CValuesRef<GScanner>?, @CCall.CString symbol: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1301(scanner?.getPointer(memScope).rawValue, symbol?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_scanner_unexp_token(scanner: CValuesRef<GScanner>?, expected_token: GTokenType, @CCall.CString identifier_spec: String?, @CCall.CString symbol_spec: String?, @CCall.CString symbol_name: String?, @CCall.CString message: String?, is_error: gint): Unit {
    memScoped {
        return kniBridge1302(scanner?.getPointer(memScope).rawValue, expected_token, identifier_spec?.cstr?.getPointer(memScope).rawValue, symbol_spec?.cstr?.getPointer(memScope).rawValue, symbol_name?.cstr?.getPointer(memScope).rawValue, message?.cstr?.getPointer(memScope).rawValue, is_error)
    }
}

@CCall("knifunptr_glibresources28")
external fun g_scanner_error(scanner: CValuesRef<GScanner>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources29")
external fun g_scanner_warn(scanner: CValuesRef<GScanner>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_sequence_new(data_destroy: GDestroyNotify?): CPointer<GSequence>? {
    return interpretCPointer<GSequence>(kniBridge1303(data_destroy.rawValue))
}

fun g_sequence_free(seq: CValuesRef<GSequence>?): Unit {
    memScoped {
        return kniBridge1304(seq?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_get_length(seq: CValuesRef<GSequence>?): gint {
    memScoped {
        return kniBridge1305(seq?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_foreach(seq: CValuesRef<GSequence>?, func: GFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1306(seq?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_sequence_foreach_range(begin: CValuesRef<GSequenceIter>?, end: CValuesRef<GSequenceIter>?, func: GFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1307(begin?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_sequence_sort(seq: CValuesRef<GSequence>?, cmp_func: GCompareDataFunc?, cmp_data: gpointer?): Unit {
    memScoped {
        return kniBridge1308(seq?.getPointer(memScope).rawValue, cmp_func.rawValue, cmp_data.rawValue)
    }
}

fun g_sequence_sort_iter(seq: CValuesRef<GSequence>?, cmp_func: GSequenceIterCompareFunc?, cmp_data: gpointer?): Unit {
    memScoped {
        return kniBridge1309(seq?.getPointer(memScope).rawValue, cmp_func.rawValue, cmp_data.rawValue)
    }
}

fun g_sequence_is_empty(seq: CValuesRef<GSequence>?): gboolean {
    memScoped {
        return kniBridge1310(seq?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_get_begin_iter(seq: CValuesRef<GSequence>?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1311(seq?.getPointer(memScope).rawValue))
    }
}

fun g_sequence_get_end_iter(seq: CValuesRef<GSequence>?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1312(seq?.getPointer(memScope).rawValue))
    }
}

fun g_sequence_get_iter_at_pos(seq: CValuesRef<GSequence>?, pos: gint): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1313(seq?.getPointer(memScope).rawValue, pos))
    }
}

fun g_sequence_append(seq: CValuesRef<GSequence>?, data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1314(seq?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_sequence_prepend(seq: CValuesRef<GSequence>?, data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1315(seq?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_sequence_insert_before(iter: CValuesRef<GSequenceIter>?, data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1316(iter?.getPointer(memScope).rawValue, data.rawValue))
    }
}

fun g_sequence_move(src: CValuesRef<GSequenceIter>?, dest: CValuesRef<GSequenceIter>?): Unit {
    memScoped {
        return kniBridge1317(src?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_swap(a: CValuesRef<GSequenceIter>?, b: CValuesRef<GSequenceIter>?): Unit {
    memScoped {
        return kniBridge1318(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_insert_sorted(seq: CValuesRef<GSequence>?, data: gpointer?, cmp_func: GCompareDataFunc?, cmp_data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1319(seq?.getPointer(memScope).rawValue, data.rawValue, cmp_func.rawValue, cmp_data.rawValue))
    }
}

fun g_sequence_insert_sorted_iter(seq: CValuesRef<GSequence>?, data: gpointer?, iter_cmp: GSequenceIterCompareFunc?, cmp_data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1320(seq?.getPointer(memScope).rawValue, data.rawValue, iter_cmp.rawValue, cmp_data.rawValue))
    }
}

fun g_sequence_sort_changed(iter: CValuesRef<GSequenceIter>?, cmp_func: GCompareDataFunc?, cmp_data: gpointer?): Unit {
    memScoped {
        return kniBridge1321(iter?.getPointer(memScope).rawValue, cmp_func.rawValue, cmp_data.rawValue)
    }
}

fun g_sequence_sort_changed_iter(iter: CValuesRef<GSequenceIter>?, iter_cmp: GSequenceIterCompareFunc?, cmp_data: gpointer?): Unit {
    memScoped {
        return kniBridge1322(iter?.getPointer(memScope).rawValue, iter_cmp.rawValue, cmp_data.rawValue)
    }
}

fun g_sequence_remove(iter: CValuesRef<GSequenceIter>?): Unit {
    memScoped {
        return kniBridge1323(iter?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_remove_range(begin: CValuesRef<GSequenceIter>?, end: CValuesRef<GSequenceIter>?): Unit {
    memScoped {
        return kniBridge1324(begin?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_move_range(dest: CValuesRef<GSequenceIter>?, begin: CValuesRef<GSequenceIter>?, end: CValuesRef<GSequenceIter>?): Unit {
    memScoped {
        return kniBridge1325(dest?.getPointer(memScope).rawValue, begin?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_search(seq: CValuesRef<GSequence>?, data: gpointer?, cmp_func: GCompareDataFunc?, cmp_data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1326(seq?.getPointer(memScope).rawValue, data.rawValue, cmp_func.rawValue, cmp_data.rawValue))
    }
}

fun g_sequence_search_iter(seq: CValuesRef<GSequence>?, data: gpointer?, iter_cmp: GSequenceIterCompareFunc?, cmp_data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1327(seq?.getPointer(memScope).rawValue, data.rawValue, iter_cmp.rawValue, cmp_data.rawValue))
    }
}

fun g_sequence_lookup(seq: CValuesRef<GSequence>?, data: gpointer?, cmp_func: GCompareDataFunc?, cmp_data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1328(seq?.getPointer(memScope).rawValue, data.rawValue, cmp_func.rawValue, cmp_data.rawValue))
    }
}

fun g_sequence_lookup_iter(seq: CValuesRef<GSequence>?, data: gpointer?, iter_cmp: GSequenceIterCompareFunc?, cmp_data: gpointer?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1329(seq?.getPointer(memScope).rawValue, data.rawValue, iter_cmp.rawValue, cmp_data.rawValue))
    }
}

fun g_sequence_get(iter: CValuesRef<GSequenceIter>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1330(iter?.getPointer(memScope).rawValue))
    }
}

fun g_sequence_set(iter: CValuesRef<GSequenceIter>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1331(iter?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_sequence_iter_is_begin(iter: CValuesRef<GSequenceIter>?): gboolean {
    memScoped {
        return kniBridge1332(iter?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_iter_is_end(iter: CValuesRef<GSequenceIter>?): gboolean {
    memScoped {
        return kniBridge1333(iter?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_iter_next(iter: CValuesRef<GSequenceIter>?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1334(iter?.getPointer(memScope).rawValue))
    }
}

fun g_sequence_iter_prev(iter: CValuesRef<GSequenceIter>?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1335(iter?.getPointer(memScope).rawValue))
    }
}

fun g_sequence_iter_get_position(iter: CValuesRef<GSequenceIter>?): gint {
    memScoped {
        return kniBridge1336(iter?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_iter_move(iter: CValuesRef<GSequenceIter>?, delta: gint): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1337(iter?.getPointer(memScope).rawValue, delta))
    }
}

fun g_sequence_iter_get_sequence(iter: CValuesRef<GSequenceIter>?): CPointer<GSequence>? {
    memScoped {
        return interpretCPointer<GSequence>(kniBridge1338(iter?.getPointer(memScope).rawValue))
    }
}

fun g_sequence_iter_compare(a: CValuesRef<GSequenceIter>?, b: CValuesRef<GSequenceIter>?): gint {
    memScoped {
        return kniBridge1339(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun g_sequence_range_get_midpoint(begin: CValuesRef<GSequenceIter>?, end: CValuesRef<GSequenceIter>?): CPointer<GSequenceIter>? {
    memScoped {
        return interpretCPointer<GSequenceIter>(kniBridge1340(begin?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue))
    }
}

fun g_shell_error_quark(): GQuark {
    return kniBridge1341()
}

fun g_shell_quote(@CCall.CString unquoted_string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1342(unquoted_string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_shell_unquote(@CCall.CString quoted_string: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1343(quoted_string?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_shell_parse_argv(@CCall.CString command_line: String?, argcp: CValuesRef<gintVar>?, argvp: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1344(command_line?.cstr?.getPointer(memScope).rawValue, argcp?.getPointer(memScope).rawValue, argvp?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_slice_alloc(block_size: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1345(block_size))
}

fun g_slice_alloc0(block_size: gsize): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1346(block_size))
}

fun g_slice_copy(block_size: gsize, mem_block: gconstpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1347(block_size, mem_block.rawValue))
}

fun g_slice_free1(block_size: gsize, mem_block: gpointer?): Unit {
    return kniBridge1348(block_size, mem_block.rawValue)
}

fun g_slice_free_chain_with_offset(block_size: gsize, mem_chain: gpointer?, next_offset: gsize): Unit {
    return kniBridge1349(block_size, mem_chain.rawValue, next_offset)
}

fun g_slice_set_config(ckey: GSliceConfig, value: gint64): Unit {
    return kniBridge1350(ckey, value)
}

fun g_slice_get_config(ckey: GSliceConfig): gint64 {
    return kniBridge1351(ckey)
}

fun g_slice_get_config_state(ckey: GSliceConfig, address: gint64, n_values: CValuesRef<guintVar>?): CPointer<gint64Var>? {
    memScoped {
        return interpretCPointer<gint64Var>(kniBridge1352(ckey, address, n_values?.getPointer(memScope).rawValue))
    }
}

fun g_spawn_error_quark(): GQuark {
    return kniBridge1353()
}

fun g_spawn_exit_error_quark(): GQuark {
    return kniBridge1354()
}

fun g_spawn_async(@CCall.CString working_directory: String?, argv: CValuesRef<CPointerVar<gcharVar>>?, envp: CValuesRef<CPointerVar<gcharVar>>?, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc?, user_data: gpointer?, child_pid: CValuesRef<GPidVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1355(working_directory?.cstr?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, envp?.getPointer(memScope).rawValue, flags, child_setup.rawValue, user_data.rawValue, child_pid?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_async_with_pipes(@CCall.CString working_directory: String?, argv: CValuesRef<CPointerVar<gcharVar>>?, envp: CValuesRef<CPointerVar<gcharVar>>?, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc?, user_data: gpointer?, child_pid: CValuesRef<GPidVar>?, standard_input: CValuesRef<gintVar>?, standard_output: CValuesRef<gintVar>?, standard_error: CValuesRef<gintVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1356(working_directory?.cstr?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, envp?.getPointer(memScope).rawValue, flags, child_setup.rawValue, user_data.rawValue, child_pid?.getPointer(memScope).rawValue, standard_input?.getPointer(memScope).rawValue, standard_output?.getPointer(memScope).rawValue, standard_error?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_async_with_fds(@CCall.CString working_directory: String?, argv: CValuesRef<CPointerVar<gcharVar>>?, envp: CValuesRef<CPointerVar<gcharVar>>?, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc?, user_data: gpointer?, child_pid: CValuesRef<GPidVar>?, stdin_fd: gint, stdout_fd: gint, stderr_fd: gint, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1357(working_directory?.cstr?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, envp?.getPointer(memScope).rawValue, flags, child_setup.rawValue, user_data.rawValue, child_pid?.getPointer(memScope).rawValue, stdin_fd, stdout_fd, stderr_fd, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_sync(@CCall.CString working_directory: String?, argv: CValuesRef<CPointerVar<gcharVar>>?, envp: CValuesRef<CPointerVar<gcharVar>>?, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc?, user_data: gpointer?, standard_output: CValuesRef<CPointerVar<gcharVar>>?, standard_error: CValuesRef<CPointerVar<gcharVar>>?, exit_status: CValuesRef<gintVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1358(working_directory?.cstr?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, envp?.getPointer(memScope).rawValue, flags, child_setup.rawValue, user_data.rawValue, standard_output?.getPointer(memScope).rawValue, standard_error?.getPointer(memScope).rawValue, exit_status?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_command_line_sync(@CCall.CString command_line: String?, standard_output: CValuesRef<CPointerVar<gcharVar>>?, standard_error: CValuesRef<CPointerVar<gcharVar>>?, exit_status: CValuesRef<gintVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1359(command_line?.cstr?.getPointer(memScope).rawValue, standard_output?.getPointer(memScope).rawValue, standard_error?.getPointer(memScope).rawValue, exit_status?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_command_line_async(@CCall.CString command_line: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1360(command_line?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_check_exit_status(exit_status: gint, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1361(exit_status, error?.getPointer(memScope).rawValue)
    }
}

fun g_spawn_close_pid(pid: GPid): Unit {
    return kniBridge1362(pid)
}

fun g_ascii_tolower(c: gchar): gchar {
    return kniBridge1363(c)
}

fun g_ascii_toupper(c: gchar): gchar {
    return kniBridge1364(c)
}

fun g_ascii_digit_value(c: gchar): gint {
    return kniBridge1365(c)
}

fun g_ascii_xdigit_value(c: gchar): gint {
    return kniBridge1366(c)
}

fun g_strdelimit(string: CValuesRef<gcharVar>?, @CCall.CString delimiters: String?, new_delimiter: gchar): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1367(string?.getPointer(memScope).rawValue, delimiters?.cstr?.getPointer(memScope).rawValue, new_delimiter))
    }
}

fun g_strcanon(string: CValuesRef<gcharVar>?, @CCall.CString valid_chars: String?, substitutor: gchar): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1368(string?.getPointer(memScope).rawValue, valid_chars?.cstr?.getPointer(memScope).rawValue, substitutor))
    }
}

fun g_strerror(errnum: gint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1369(errnum))
}

fun g_strsignal(signum: gint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1370(signum))
}

fun g_strreverse(string: CValuesRef<gcharVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1371(string?.getPointer(memScope).rawValue))
    }
}

fun g_strlcpy(dest: CValuesRef<gcharVar>?, @CCall.CString src: String?, dest_size: gsize): gsize {
    memScoped {
        return kniBridge1372(dest?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue, dest_size)
    }
}

fun g_strlcat(dest: CValuesRef<gcharVar>?, @CCall.CString src: String?, dest_size: gsize): gsize {
    memScoped {
        return kniBridge1373(dest?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue, dest_size)
    }
}

fun g_strstr_len(@CCall.CString haystack: String?, haystack_len: gssize, @CCall.CString needle: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1374(haystack?.cstr?.getPointer(memScope).rawValue, haystack_len, needle?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_strrstr(@CCall.CString haystack: String?, @CCall.CString needle: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1375(haystack?.cstr?.getPointer(memScope).rawValue, needle?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_strrstr_len(@CCall.CString haystack: String?, haystack_len: gssize, @CCall.CString needle: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1376(haystack?.cstr?.getPointer(memScope).rawValue, haystack_len, needle?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_str_has_suffix(@CCall.CString str: String?, @CCall.CString suffix: String?): gboolean {
    memScoped {
        return kniBridge1377(str?.cstr?.getPointer(memScope).rawValue, suffix?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_str_has_prefix(@CCall.CString str: String?, @CCall.CString prefix: String?): gboolean {
    memScoped {
        return kniBridge1378(str?.cstr?.getPointer(memScope).rawValue, prefix?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_strtod(@CCall.CString nptr: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?): gdouble {
    memScoped {
        return kniBridge1379(nptr?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue)
    }
}

fun g_ascii_strtod(@CCall.CString nptr: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?): gdouble {
    memScoped {
        return kniBridge1380(nptr?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue)
    }
}

fun g_ascii_strtoull(@CCall.CString nptr: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?, base: guint): guint64 {
    memScoped {
        return kniBridge1381(nptr?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue, base)
    }
}

fun g_ascii_strtoll(@CCall.CString nptr: String?, endptr: CValuesRef<CPointerVar<gcharVar>>?, base: guint): gint64 {
    memScoped {
        return kniBridge1382(nptr?.cstr?.getPointer(memScope).rawValue, endptr?.getPointer(memScope).rawValue, base)
    }
}

fun g_ascii_dtostr(buffer: CValuesRef<gcharVar>?, buf_len: gint, d: gdouble): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1383(buffer?.getPointer(memScope).rawValue, buf_len, d))
    }
}

fun g_ascii_formatd(buffer: CValuesRef<gcharVar>?, buf_len: gint, @CCall.CString format: String?, d: gdouble): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1384(buffer?.getPointer(memScope).rawValue, buf_len, format?.cstr?.getPointer(memScope).rawValue, d))
    }
}

fun g_strchug(string: CValuesRef<gcharVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1385(string?.getPointer(memScope).rawValue))
    }
}

fun g_strchomp(string: CValuesRef<gcharVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1386(string?.getPointer(memScope).rawValue))
    }
}

fun g_ascii_strcasecmp(@CCall.CString s1: String?, @CCall.CString s2: String?): gint {
    memScoped {
        return kniBridge1387(s1?.cstr?.getPointer(memScope).rawValue, s2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_ascii_strncasecmp(@CCall.CString s1: String?, @CCall.CString s2: String?, n: gsize): gint {
    memScoped {
        return kniBridge1388(s1?.cstr?.getPointer(memScope).rawValue, s2?.cstr?.getPointer(memScope).rawValue, n)
    }
}

fun g_ascii_strdown(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1389(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_ascii_strup(@CCall.CString str: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1390(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_str_is_ascii(@CCall.CString str: String?): gboolean {
    memScoped {
        return kniBridge1391(str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_strcasecmp(@CCall.CString s1: String?, @CCall.CString s2: String?): gint {
    memScoped {
        return kniBridge1392(s1?.cstr?.getPointer(memScope).rawValue, s2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_strncasecmp(@CCall.CString s1: String?, @CCall.CString s2: String?, n: guint): gint {
    memScoped {
        return kniBridge1393(s1?.cstr?.getPointer(memScope).rawValue, s2?.cstr?.getPointer(memScope).rawValue, n)
    }
}

fun g_strdown(string: CValuesRef<gcharVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1394(string?.getPointer(memScope).rawValue))
    }
}

fun g_strup(string: CValuesRef<gcharVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1395(string?.getPointer(memScope).rawValue))
    }
}

fun g_strdup(@CCall.CString str: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1396(str?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources30")
external fun g_strdup_printf(@CCall.CString format: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_strdup_vprintf(@CCall.CString format: String?, args: va_list?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1397(format?.cstr?.getPointer(memScope).rawValue, args.rawValue))
    }
}

fun g_strndup(@CCall.CString str: String?, n: gsize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1398(str?.cstr?.getPointer(memScope).rawValue, n))
    }
}

fun g_strnfill(length: gsize, fill_char: gchar): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1399(length, fill_char))
}

@CCall("knifunptr_glibresources31")
external fun g_strconcat(@CCall.CString string1: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

@CCall("knifunptr_glibresources32")
external fun g_strjoin(@CCall.CString separator: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_strcompress(@CCall.CString source: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1400(source?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_strescape(@CCall.CString source: String?, @CCall.CString exceptions: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1401(source?.cstr?.getPointer(memScope).rawValue, exceptions?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_memdup(mem: gconstpointer?, byte_size: guint): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1402(mem.rawValue, byte_size))
}

fun g_strsplit(@CCall.CString string: String?, @CCall.CString delimiter: String?, max_tokens: gint): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1403(string?.cstr?.getPointer(memScope).rawValue, delimiter?.cstr?.getPointer(memScope).rawValue, max_tokens))
    }
}

fun g_strsplit_set(@CCall.CString string: String?, @CCall.CString delimiters: String?, max_tokens: gint): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1404(string?.cstr?.getPointer(memScope).rawValue, delimiters?.cstr?.getPointer(memScope).rawValue, max_tokens))
    }
}

fun g_strjoinv(@CCall.CString separator: String?, str_array: CValuesRef<CPointerVar<gcharVar>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1405(separator?.cstr?.getPointer(memScope).rawValue, str_array?.getPointer(memScope).rawValue))
    }
}

fun g_strfreev(str_array: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge1406(str_array?.getPointer(memScope).rawValue)
    }
}

fun g_strdupv(str_array: CValuesRef<CPointerVar<gcharVar>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1407(str_array?.getPointer(memScope).rawValue))
    }
}

fun g_strv_length(str_array: CValuesRef<CPointerVar<gcharVar>>?): guint {
    memScoped {
        return kniBridge1408(str_array?.getPointer(memScope).rawValue)
    }
}

fun g_stpcpy(dest: CValuesRef<gcharVar>?, @CCall.CString src: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1409(dest?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_str_to_ascii(@CCall.CString str: String?, @CCall.CString from_locale: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1410(str?.cstr?.getPointer(memScope).rawValue, from_locale?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_str_tokenize_and_fold(@CCall.CString string: String?, @CCall.CString translit_locale: String?, ascii_alternates: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1411(string?.cstr?.getPointer(memScope).rawValue, translit_locale?.cstr?.getPointer(memScope).rawValue, ascii_alternates?.getPointer(memScope).rawValue))
    }
}

fun g_str_match_string(@CCall.CString search_term: String?, @CCall.CString potential_hit: String?, accept_alternates: gboolean): gboolean {
    memScoped {
        return kniBridge1412(search_term?.cstr?.getPointer(memScope).rawValue, potential_hit?.cstr?.getPointer(memScope).rawValue, accept_alternates)
    }
}

fun g_strv_contains(strv: CValuesRef<CPointerVar<gcharVar>>?, @CCall.CString str: String?): gboolean {
    memScoped {
        return kniBridge1413(strv?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_strv_equal(strv1: CValuesRef<CPointerVar<gcharVar>>?, strv2: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge1414(strv1?.getPointer(memScope).rawValue, strv2?.getPointer(memScope).rawValue)
    }
}

fun g_number_parser_error_quark(): GQuark {
    return kniBridge1415()
}

fun g_ascii_string_to_signed(@CCall.CString str: String?, base: guint, min: gint64, max: gint64, out_num: CValuesRef<gint64Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1416(str?.cstr?.getPointer(memScope).rawValue, base, min, max, out_num?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_ascii_string_to_unsigned(@CCall.CString str: String?, base: guint, min: guint64, max: guint64, out_num: CValuesRef<guint64Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1417(str?.cstr?.getPointer(memScope).rawValue, base, min, max, out_num?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_string_chunk_new(size: gsize): CPointer<GStringChunk>? {
    return interpretCPointer<GStringChunk>(kniBridge1418(size))
}

fun g_string_chunk_free(chunk: CValuesRef<GStringChunk>?): Unit {
    memScoped {
        return kniBridge1419(chunk?.getPointer(memScope).rawValue)
    }
}

fun g_string_chunk_clear(chunk: CValuesRef<GStringChunk>?): Unit {
    memScoped {
        return kniBridge1420(chunk?.getPointer(memScope).rawValue)
    }
}

fun g_string_chunk_insert(chunk: CValuesRef<GStringChunk>?, @CCall.CString string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1421(chunk?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_string_chunk_insert_len(chunk: CValuesRef<GStringChunk>?, @CCall.CString string: String?, len: gssize): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1422(chunk?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun g_string_chunk_insert_const(chunk: CValuesRef<GStringChunk>?, @CCall.CString string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1423(chunk?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_strcmp0(@CCall.CString str1: String?, @CCall.CString str2: String?): Int {
    memScoped {
        return kniBridge1424(str1?.cstr?.getPointer(memScope).rawValue, str2?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources33")
external fun g_test_minimized_result(minimized_quantity: Double, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources34")
external fun g_test_maximized_result(maximized_quantity: Double, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources35")
external fun g_test_init(argc: CValuesRef<IntVar>?, argv: CValuesRef<CPointerVar<CPointerVar<ByteVar>>>?, vararg variadicArguments: Any?): Unit

fun g_test_subprocess(): gboolean {
    return kniBridge1425()
}

fun g_test_run(): Int {
    return kniBridge1426()
}

fun g_test_add_func(@CCall.CString testpath: String?, test_func: GTestFunc?): Unit {
    memScoped {
        return kniBridge1427(testpath?.cstr?.getPointer(memScope).rawValue, test_func.rawValue)
    }
}

fun g_test_add_data_func(@CCall.CString testpath: String?, test_data: gconstpointer?, test_func: GTestDataFunc?): Unit {
    memScoped {
        return kniBridge1428(testpath?.cstr?.getPointer(memScope).rawValue, test_data.rawValue, test_func.rawValue)
    }
}

fun g_test_add_data_func_full(@CCall.CString testpath: String?, test_data: gpointer?, test_func: GTestDataFunc?, data_free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1429(testpath?.cstr?.getPointer(memScope).rawValue, test_data.rawValue, test_func.rawValue, data_free_func.rawValue)
    }
}

fun g_test_fail(): Unit {
    return kniBridge1430()
}

fun g_test_incomplete(@CCall.CString msg: String?): Unit {
    memScoped {
        return kniBridge1431(msg?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_skip(@CCall.CString msg: String?): Unit {
    memScoped {
        return kniBridge1432(msg?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_failed(): gboolean {
    return kniBridge1433()
}

fun g_test_set_nonfatal_assertions(): Unit {
    return kniBridge1434()
}

@CCall("knifunptr_glibresources36")
external fun g_test_message(@CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_test_bug_base(@CCall.CString uri_pattern: String?): Unit {
    memScoped {
        return kniBridge1435(uri_pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_bug(@CCall.CString bug_uri_snippet: String?): Unit {
    memScoped {
        return kniBridge1436(bug_uri_snippet?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_summary(@CCall.CString summary: String?): Unit {
    memScoped {
        return kniBridge1437(summary?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_timer_start(): Unit {
    return kniBridge1438()
}

fun g_test_timer_elapsed(): Double {
    return kniBridge1439()
}

fun g_test_timer_last(): Double {
    return kniBridge1440()
}

fun g_test_queue_free(gfree_pointer: gpointer?): Unit {
    return kniBridge1441(gfree_pointer.rawValue)
}

fun g_test_queue_destroy(destroy_func: GDestroyNotify?, destroy_data: gpointer?): Unit {
    return kniBridge1442(destroy_func.rawValue, destroy_data.rawValue)
}

fun g_test_trap_fork(usec_timeout: guint64, test_trap_flags: GTestTrapFlags): gboolean {
    return kniBridge1443(usec_timeout, test_trap_flags)
}

fun g_test_trap_subprocess(@CCall.CString test_path: String?, usec_timeout: guint64, test_flags: GTestSubprocessFlags): Unit {
    memScoped {
        return kniBridge1444(test_path?.cstr?.getPointer(memScope).rawValue, usec_timeout, test_flags)
    }
}

fun g_test_trap_has_passed(): gboolean {
    return kniBridge1445()
}

fun g_test_trap_reached_timeout(): gboolean {
    return kniBridge1446()
}

fun g_test_rand_int(): gint32 {
    return kniBridge1447()
}

fun g_test_rand_int_range(begin: gint32, end: gint32): gint32 {
    return kniBridge1448(begin, end)
}

fun g_test_rand_double(): Double {
    return kniBridge1449()
}

fun g_test_rand_double_range(range_start: Double, range_end: Double): Double {
    return kniBridge1450(range_start, range_end)
}

fun g_test_create_case(@CCall.CString test_name: String?, data_size: gsize, test_data: gconstpointer?, data_setup: GTestFixtureFunc?, data_test: GTestFixtureFunc?, data_teardown: GTestFixtureFunc?): CPointer<GTestCase>? {
    memScoped {
        return interpretCPointer<GTestCase>(kniBridge1451(test_name?.cstr?.getPointer(memScope).rawValue, data_size, test_data.rawValue, data_setup.rawValue, data_test.rawValue, data_teardown.rawValue))
    }
}

fun g_test_create_suite(@CCall.CString suite_name: String?): CPointer<GTestSuite>? {
    memScoped {
        return interpretCPointer<GTestSuite>(kniBridge1452(suite_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_test_get_root(): CPointer<GTestSuite>? {
    return interpretCPointer<GTestSuite>(kniBridge1453())
}

fun g_test_suite_add(suite: CValuesRef<GTestSuite>?, test_case: CValuesRef<GTestCase>?): Unit {
    memScoped {
        return kniBridge1454(suite?.getPointer(memScope).rawValue, test_case?.getPointer(memScope).rawValue)
    }
}

fun g_test_suite_add_suite(suite: CValuesRef<GTestSuite>?, nestedsuite: CValuesRef<GTestSuite>?): Unit {
    memScoped {
        return kniBridge1455(suite?.getPointer(memScope).rawValue, nestedsuite?.getPointer(memScope).rawValue)
    }
}

fun g_test_run_suite(suite: CValuesRef<GTestSuite>?): Int {
    memScoped {
        return kniBridge1456(suite?.getPointer(memScope).rawValue)
    }
}

fun g_test_trap_assertions(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?, assertion_flags: guint64, @CCall.CString pattern: String?): Unit {
    memScoped {
        return kniBridge1457(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue, assertion_flags, pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_assertion_message(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?, @CCall.CString message: String?): Unit {
    memScoped {
        return kniBridge1458(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue, message?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_assertion_message_expr(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?, @CCall.CString expr: String?): Unit {
    memScoped {
        return kniBridge1459(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue, expr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_assertion_message_cmpstr(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?, @CCall.CString expr: String?, @CCall.CString arg1: String?, @CCall.CString cmp: String?, @CCall.CString arg2: String?): Unit {
    memScoped {
        return kniBridge1460(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue, expr?.cstr?.getPointer(memScope).rawValue, arg1?.cstr?.getPointer(memScope).rawValue, cmp?.cstr?.getPointer(memScope).rawValue, arg2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_assertion_message_error(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?, @CCall.CString expr: String?, error: CValuesRef<GError>?, error_domain: GQuark, error_code: Int): Unit {
    memScoped {
        return kniBridge1461(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue, expr?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue, error_domain, error_code)
    }
}

fun g_test_add_vtable(@CCall.CString testpath: String?, data_size: gsize, test_data: gconstpointer?, data_setup: GTestFixtureFunc?, data_test: GTestFixtureFunc?, data_teardown: GTestFixtureFunc?): Unit {
    memScoped {
        return kniBridge1462(testpath?.cstr?.getPointer(memScope).rawValue, data_size, test_data.rawValue, data_setup.rawValue, data_test.rawValue, data_teardown.rawValue)
    }
}

fun g_test_log_type_name(log_type: GTestLogType): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge1463(log_type.value))
}

fun g_test_log_buffer_new(): CPointer<GTestLogBuffer>? {
    return interpretCPointer<GTestLogBuffer>(kniBridge1464())
}

fun g_test_log_buffer_free(tbuffer: CValuesRef<GTestLogBuffer>?): Unit {
    memScoped {
        return kniBridge1465(tbuffer?.getPointer(memScope).rawValue)
    }
}

fun g_test_log_buffer_push(tbuffer: CValuesRef<GTestLogBuffer>?, n_bytes: guint, bytes: CValuesRef<guint8Var>?): Unit {
    memScoped {
        return kniBridge1466(tbuffer?.getPointer(memScope).rawValue, n_bytes, bytes?.getPointer(memScope).rawValue)
    }
}

fun g_test_log_buffer_pop(tbuffer: CValuesRef<GTestLogBuffer>?): CPointer<GTestLogMsg>? {
    memScoped {
        return interpretCPointer<GTestLogMsg>(kniBridge1467(tbuffer?.getPointer(memScope).rawValue))
    }
}

fun g_test_log_msg_free(tmsg: CValuesRef<GTestLogMsg>?): Unit {
    memScoped {
        return kniBridge1468(tmsg?.getPointer(memScope).rawValue)
    }
}

fun g_test_log_set_fatal_handler(log_func: GTestLogFatalFunc?, user_data: gpointer?): Unit {
    return kniBridge1469(log_func.rawValue, user_data.rawValue)
}

fun g_test_expect_message(@CCall.CString log_domain: String?, log_level: GLogLevelFlags, @CCall.CString pattern: String?): Unit {
    memScoped {
        return kniBridge1470(log_domain?.cstr?.getPointer(memScope).rawValue, log_level, pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_assert_expected_messages_internal(@CCall.CString domain: String?, @CCall.CString file: String?, line: Int, @CCall.CString func: String?): Unit {
    memScoped {
        return kniBridge1471(domain?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line, func?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources37")
external fun g_test_build_filename(file_type: GTestFileType, @CCall.CString first_path: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_test_get_dir(file_type: GTestFileType): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1472(file_type.value))
}

@CCall("knifunptr_glibresources38")
external fun g_test_get_filename(file_type: GTestFileType, @CCall.CString first_path: String?, vararg variadicArguments: Any?): CPointer<gcharVar>?

fun g_thread_pool_new(func: GFunc?, user_data: gpointer?, max_threads: gint, exclusive: gboolean, error: CValuesRef<CPointerVar<GError>>?): CPointer<GThreadPool>? {
    memScoped {
        return interpretCPointer<GThreadPool>(kniBridge1473(func.rawValue, user_data.rawValue, max_threads, exclusive, error?.getPointer(memScope).rawValue))
    }
}

fun g_thread_pool_free(pool: CValuesRef<GThreadPool>?, immediate: gboolean, wait_: gboolean): Unit {
    memScoped {
        return kniBridge1474(pool?.getPointer(memScope).rawValue, immediate, wait_)
    }
}

fun g_thread_pool_push(pool: CValuesRef<GThreadPool>?, data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1475(pool?.getPointer(memScope).rawValue, data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_thread_pool_unprocessed(pool: CValuesRef<GThreadPool>?): guint {
    memScoped {
        return kniBridge1476(pool?.getPointer(memScope).rawValue)
    }
}

fun g_thread_pool_set_sort_function(pool: CValuesRef<GThreadPool>?, func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1477(pool?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_thread_pool_move_to_front(pool: CValuesRef<GThreadPool>?, data: gpointer?): gboolean {
    memScoped {
        return kniBridge1478(pool?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_thread_pool_set_max_threads(pool: CValuesRef<GThreadPool>?, max_threads: gint, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1479(pool?.getPointer(memScope).rawValue, max_threads, error?.getPointer(memScope).rawValue)
    }
}

fun g_thread_pool_get_max_threads(pool: CValuesRef<GThreadPool>?): gint {
    memScoped {
        return kniBridge1480(pool?.getPointer(memScope).rawValue)
    }
}

fun g_thread_pool_get_num_threads(pool: CValuesRef<GThreadPool>?): guint {
    memScoped {
        return kniBridge1481(pool?.getPointer(memScope).rawValue)
    }
}

fun g_thread_pool_set_max_unused_threads(max_threads: gint): Unit {
    return kniBridge1482(max_threads)
}

fun g_thread_pool_get_max_unused_threads(): gint {
    return kniBridge1483()
}

fun g_thread_pool_get_num_unused_threads(): guint {
    return kniBridge1484()
}

fun g_thread_pool_stop_unused_threads(): Unit {
    return kniBridge1485()
}

fun g_thread_pool_set_max_idle_time(interval: guint): Unit {
    return kniBridge1486(interval)
}

fun g_thread_pool_get_max_idle_time(): guint {
    return kniBridge1487()
}

fun g_timer_new(): CPointer<GTimer>? {
    return interpretCPointer<GTimer>(kniBridge1488())
}

fun g_timer_destroy(timer: CValuesRef<GTimer>?): Unit {
    memScoped {
        return kniBridge1489(timer?.getPointer(memScope).rawValue)
    }
}

fun g_timer_start(timer: CValuesRef<GTimer>?): Unit {
    memScoped {
        return kniBridge1490(timer?.getPointer(memScope).rawValue)
    }
}

fun g_timer_stop(timer: CValuesRef<GTimer>?): Unit {
    memScoped {
        return kniBridge1491(timer?.getPointer(memScope).rawValue)
    }
}

fun g_timer_reset(timer: CValuesRef<GTimer>?): Unit {
    memScoped {
        return kniBridge1492(timer?.getPointer(memScope).rawValue)
    }
}

fun g_timer_continue(timer: CValuesRef<GTimer>?): Unit {
    memScoped {
        return kniBridge1493(timer?.getPointer(memScope).rawValue)
    }
}

fun g_timer_elapsed(timer: CValuesRef<GTimer>?, microseconds: CValuesRef<gulongVar>?): gdouble {
    memScoped {
        return kniBridge1494(timer?.getPointer(memScope).rawValue, microseconds?.getPointer(memScope).rawValue)
    }
}

fun g_timer_is_active(timer: CValuesRef<GTimer>?): gboolean {
    memScoped {
        return kniBridge1495(timer?.getPointer(memScope).rawValue)
    }
}

fun g_usleep(microseconds: gulong): Unit {
    return kniBridge1496(microseconds)
}

fun g_time_val_add(time_: CValuesRef<GTimeVal>?, microseconds: glong): Unit {
    memScoped {
        return kniBridge1497(time_?.getPointer(memScope).rawValue, microseconds)
    }
}

fun g_time_val_from_iso8601(@CCall.CString iso_date: String?, time_: CValuesRef<GTimeVal>?): gboolean {
    memScoped {
        return kniBridge1498(iso_date?.cstr?.getPointer(memScope).rawValue, time_?.getPointer(memScope).rawValue)
    }
}

fun g_time_val_to_iso8601(time_: CValuesRef<GTimeVal>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1499(time_?.getPointer(memScope).rawValue))
    }
}

fun g_trash_stack_push(stack_p: CValuesRef<CPointerVar<GTrashStack>>?, data_p: gpointer?): Unit {
    memScoped {
        return kniBridge1500(stack_p?.getPointer(memScope).rawValue, data_p.rawValue)
    }
}

fun g_trash_stack_pop(stack_p: CValuesRef<CPointerVar<GTrashStack>>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1501(stack_p?.getPointer(memScope).rawValue))
    }
}

fun g_trash_stack_peek(stack_p: CValuesRef<CPointerVar<GTrashStack>>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1502(stack_p?.getPointer(memScope).rawValue))
    }
}

fun g_trash_stack_height(stack_p: CValuesRef<CPointerVar<GTrashStack>>?): guint {
    memScoped {
        return kniBridge1503(stack_p?.getPointer(memScope).rawValue)
    }
}

fun g_tree_new(key_compare_func: GCompareFunc?): CPointer<GTree>? {
    return interpretCPointer<GTree>(kniBridge1504(key_compare_func.rawValue))
}

fun g_tree_new_with_data(key_compare_func: GCompareDataFunc?, key_compare_data: gpointer?): CPointer<GTree>? {
    return interpretCPointer<GTree>(kniBridge1505(key_compare_func.rawValue, key_compare_data.rawValue))
}

fun g_tree_new_full(key_compare_func: GCompareDataFunc?, key_compare_data: gpointer?, key_destroy_func: GDestroyNotify?, value_destroy_func: GDestroyNotify?): CPointer<GTree>? {
    return interpretCPointer<GTree>(kniBridge1506(key_compare_func.rawValue, key_compare_data.rawValue, key_destroy_func.rawValue, value_destroy_func.rawValue))
}

fun g_tree_ref(tree: CValuesRef<GTree>?): CPointer<GTree>? {
    memScoped {
        return interpretCPointer<GTree>(kniBridge1507(tree?.getPointer(memScope).rawValue))
    }
}

fun g_tree_unref(tree: CValuesRef<GTree>?): Unit {
    memScoped {
        return kniBridge1508(tree?.getPointer(memScope).rawValue)
    }
}

fun g_tree_destroy(tree: CValuesRef<GTree>?): Unit {
    memScoped {
        return kniBridge1509(tree?.getPointer(memScope).rawValue)
    }
}

fun g_tree_insert(tree: CValuesRef<GTree>?, key: gpointer?, value: gpointer?): Unit {
    memScoped {
        return kniBridge1510(tree?.getPointer(memScope).rawValue, key.rawValue, value.rawValue)
    }
}

fun g_tree_replace(tree: CValuesRef<GTree>?, key: gpointer?, value: gpointer?): Unit {
    memScoped {
        return kniBridge1511(tree?.getPointer(memScope).rawValue, key.rawValue, value.rawValue)
    }
}

fun g_tree_remove(tree: CValuesRef<GTree>?, key: gconstpointer?): gboolean {
    memScoped {
        return kniBridge1512(tree?.getPointer(memScope).rawValue, key.rawValue)
    }
}

fun g_tree_steal(tree: CValuesRef<GTree>?, key: gconstpointer?): gboolean {
    memScoped {
        return kniBridge1513(tree?.getPointer(memScope).rawValue, key.rawValue)
    }
}

fun g_tree_lookup(tree: CValuesRef<GTree>?, key: gconstpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1514(tree?.getPointer(memScope).rawValue, key.rawValue))
    }
}

fun g_tree_lookup_extended(tree: CValuesRef<GTree>?, lookup_key: gconstpointer?, orig_key: CValuesRef<gpointerVar>?, value: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge1515(tree?.getPointer(memScope).rawValue, lookup_key.rawValue, orig_key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_tree_foreach(tree: CValuesRef<GTree>?, func: GTraverseFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1516(tree?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_tree_traverse(tree: CValuesRef<GTree>?, traverse_func: GTraverseFunc?, traverse_type: GTraverseType, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1517(tree?.getPointer(memScope).rawValue, traverse_func.rawValue, traverse_type.value, user_data.rawValue)
    }
}

fun g_tree_search(tree: CValuesRef<GTree>?, search_func: GCompareFunc?, user_data: gconstpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1518(tree?.getPointer(memScope).rawValue, search_func.rawValue, user_data.rawValue))
    }
}

fun g_tree_height(tree: CValuesRef<GTree>?): gint {
    memScoped {
        return kniBridge1519(tree?.getPointer(memScope).rawValue)
    }
}

fun g_tree_nnodes(tree: CValuesRef<GTree>?): gint {
    memScoped {
        return kniBridge1520(tree?.getPointer(memScope).rawValue)
    }
}

fun g_uri_unescape_string(@CCall.CString escaped_string: String?, @CCall.CString illegal_characters: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1521(escaped_string?.cstr?.getPointer(memScope).rawValue, illegal_characters?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_uri_unescape_segment(@CCall.CString escaped_string: String?, @CCall.CString escaped_string_end: String?, @CCall.CString illegal_characters: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1522(escaped_string?.cstr?.getPointer(memScope).rawValue, escaped_string_end?.cstr?.getPointer(memScope).rawValue, illegal_characters?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_uri_parse_scheme(@CCall.CString uri: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1523(uri?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_uri_escape_string(@CCall.CString unescaped: String?, @CCall.CString reserved_chars_allowed: String?, allow_utf8: gboolean): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1524(unescaped?.cstr?.getPointer(memScope).rawValue, reserved_chars_allowed?.cstr?.getPointer(memScope).rawValue, allow_utf8))
    }
}

fun g_uuid_string_is_valid(@CCall.CString str: String?): gboolean {
    memScoped {
        return kniBridge1525(str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_uuid_string_random(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1526())
}

fun glib_check_version(required_major: guint, required_minor: guint, required_micro: guint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1527(required_major, required_minor, required_micro))
}

fun g_mem_chunk_new(@CCall.CString name: String?, atom_size: gint, area_size: gsize, type: gint): CPointer<GMemChunk>? {
    memScoped {
        return interpretCPointer<GMemChunk>(kniBridge1528(name?.cstr?.getPointer(memScope).rawValue, atom_size, area_size, type))
    }
}

fun g_mem_chunk_destroy(mem_chunk: CValuesRef<GMemChunk>?): Unit {
    memScoped {
        return kniBridge1529(mem_chunk?.getPointer(memScope).rawValue)
    }
}

fun g_mem_chunk_alloc(mem_chunk: CValuesRef<GMemChunk>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1530(mem_chunk?.getPointer(memScope).rawValue))
    }
}

fun g_mem_chunk_alloc0(mem_chunk: CValuesRef<GMemChunk>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1531(mem_chunk?.getPointer(memScope).rawValue))
    }
}

fun g_mem_chunk_free(mem_chunk: CValuesRef<GMemChunk>?, mem: gpointer?): Unit {
    memScoped {
        return kniBridge1532(mem_chunk?.getPointer(memScope).rawValue, mem.rawValue)
    }
}

fun g_mem_chunk_clean(mem_chunk: CValuesRef<GMemChunk>?): Unit {
    memScoped {
        return kniBridge1533(mem_chunk?.getPointer(memScope).rawValue)
    }
}

fun g_mem_chunk_reset(mem_chunk: CValuesRef<GMemChunk>?): Unit {
    memScoped {
        return kniBridge1534(mem_chunk?.getPointer(memScope).rawValue)
    }
}

fun g_mem_chunk_print(mem_chunk: CValuesRef<GMemChunk>?): Unit {
    memScoped {
        return kniBridge1535(mem_chunk?.getPointer(memScope).rawValue)
    }
}

fun g_mem_chunk_info(): Unit {
    return kniBridge1536()
}

fun g_blow_chunks(): Unit {
    return kniBridge1537()
}

fun g_allocator_new(@CCall.CString name: String?, n_preallocs: guint): CPointer<GAllocator>? {
    memScoped {
        return interpretCPointer<GAllocator>(kniBridge1538(name?.cstr?.getPointer(memScope).rawValue, n_preallocs))
    }
}

fun g_allocator_free(allocator: CValuesRef<GAllocator>?): Unit {
    memScoped {
        return kniBridge1539(allocator?.getPointer(memScope).rawValue)
    }
}

fun g_list_push_allocator(allocator: CValuesRef<GAllocator>?): Unit {
    memScoped {
        return kniBridge1540(allocator?.getPointer(memScope).rawValue)
    }
}

fun g_list_pop_allocator(): Unit {
    return kniBridge1541()
}

fun g_slist_push_allocator(allocator: CValuesRef<GAllocator>?): Unit {
    memScoped {
        return kniBridge1542(allocator?.getPointer(memScope).rawValue)
    }
}

fun g_slist_pop_allocator(): Unit {
    return kniBridge1543()
}

fun g_node_push_allocator(allocator: CValuesRef<GAllocator>?): Unit {
    memScoped {
        return kniBridge1544(allocator?.getPointer(memScope).rawValue)
    }
}

fun g_node_pop_allocator(): Unit {
    return kniBridge1545()
}

fun g_cache_new(value_new_func: GCacheNewFunc?, value_destroy_func: GCacheDestroyFunc?, key_dup_func: GCacheDupFunc?, key_destroy_func: GCacheDestroyFunc?, hash_key_func: GHashFunc?, hash_value_func: GHashFunc?, key_equal_func: GEqualFunc?): CPointer<GCache>? {
    return interpretCPointer<GCache>(kniBridge1546(value_new_func.rawValue, value_destroy_func.rawValue, key_dup_func.rawValue, key_destroy_func.rawValue, hash_key_func.rawValue, hash_value_func.rawValue, key_equal_func.rawValue))
}

fun g_cache_destroy(cache: CValuesRef<GCache>?): Unit {
    memScoped {
        return kniBridge1547(cache?.getPointer(memScope).rawValue)
    }
}

fun g_cache_insert(cache: CValuesRef<GCache>?, key: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1548(cache?.getPointer(memScope).rawValue, key.rawValue))
    }
}

fun g_cache_remove(cache: CValuesRef<GCache>?, value: gconstpointer?): Unit {
    memScoped {
        return kniBridge1549(cache?.getPointer(memScope).rawValue, value.rawValue)
    }
}

fun g_cache_key_foreach(cache: CValuesRef<GCache>?, func: GHFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1550(cache?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_cache_value_foreach(cache: CValuesRef<GCache>?, func: GHFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1551(cache?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun g_completion_new(func: GCompletionFunc?): CPointer<GCompletion>? {
    return interpretCPointer<GCompletion>(kniBridge1552(func.rawValue))
}

fun g_completion_add_items(cmp: CValuesRef<GCompletion>?, items: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1553(cmp?.getPointer(memScope).rawValue, items?.getPointer(memScope).rawValue)
    }
}

fun g_completion_remove_items(cmp: CValuesRef<GCompletion>?, items: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1554(cmp?.getPointer(memScope).rawValue, items?.getPointer(memScope).rawValue)
    }
}

fun g_completion_clear_items(cmp: CValuesRef<GCompletion>?): Unit {
    memScoped {
        return kniBridge1555(cmp?.getPointer(memScope).rawValue)
    }
}

fun g_completion_complete(cmp: CValuesRef<GCompletion>?, @CCall.CString prefix: String?, new_prefix: CValuesRef<CPointerVar<gcharVar>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1556(cmp?.getPointer(memScope).rawValue, prefix?.cstr?.getPointer(memScope).rawValue, new_prefix?.getPointer(memScope).rawValue))
    }
}

fun g_completion_complete_utf8(cmp: CValuesRef<GCompletion>?, @CCall.CString prefix: String?, new_prefix: CValuesRef<CPointerVar<gcharVar>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1557(cmp?.getPointer(memScope).rawValue, prefix?.cstr?.getPointer(memScope).rawValue, new_prefix?.getPointer(memScope).rawValue))
    }
}

fun g_completion_set_compare(cmp: CValuesRef<GCompletion>?, strncmp_func: GCompletionStrncmpFunc?): Unit {
    memScoped {
        return kniBridge1558(cmp?.getPointer(memScope).rawValue, strncmp_func.rawValue)
    }
}

fun g_completion_free(cmp: CValuesRef<GCompletion>?): Unit {
    memScoped {
        return kniBridge1559(cmp?.getPointer(memScope).rawValue)
    }
}

fun g_relation_new(fields: gint): CPointer<GRelation>? {
    return interpretCPointer<GRelation>(kniBridge1560(fields))
}

fun g_relation_destroy(relation: CValuesRef<GRelation>?): Unit {
    memScoped {
        return kniBridge1561(relation?.getPointer(memScope).rawValue)
    }
}

fun g_relation_index(relation: CValuesRef<GRelation>?, field: gint, hash_func: GHashFunc?, key_equal_func: GEqualFunc?): Unit {
    memScoped {
        return kniBridge1562(relation?.getPointer(memScope).rawValue, field, hash_func.rawValue, key_equal_func.rawValue)
    }
}

@CCall("knifunptr_glibresources39")
external fun g_relation_insert(relation: CValuesRef<GRelation>?, vararg variadicArguments: Any?): Unit

fun g_relation_delete(relation: CValuesRef<GRelation>?, key: gconstpointer?, field: gint): gint {
    memScoped {
        return kniBridge1563(relation?.getPointer(memScope).rawValue, key.rawValue, field)
    }
}

fun g_relation_select(relation: CValuesRef<GRelation>?, key: gconstpointer?, field: gint): CPointer<GTuples>? {
    memScoped {
        return interpretCPointer<GTuples>(kniBridge1564(relation?.getPointer(memScope).rawValue, key.rawValue, field))
    }
}

fun g_relation_count(relation: CValuesRef<GRelation>?, key: gconstpointer?, field: gint): gint {
    memScoped {
        return kniBridge1565(relation?.getPointer(memScope).rawValue, key.rawValue, field)
    }
}

@CCall("knifunptr_glibresources40")
external fun g_relation_exists(relation: CValuesRef<GRelation>?, vararg variadicArguments: Any?): gboolean

fun g_relation_print(relation: CValuesRef<GRelation>?): Unit {
    memScoped {
        return kniBridge1566(relation?.getPointer(memScope).rawValue)
    }
}

fun g_tuples_destroy(tuples: CValuesRef<GTuples>?): Unit {
    memScoped {
        return kniBridge1567(tuples?.getPointer(memScope).rawValue)
    }
}

fun g_tuples_index(tuples: CValuesRef<GTuples>?, index_: gint, field: gint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1568(tuples?.getPointer(memScope).rawValue, index_, field))
    }
}

fun g_thread_create(func: GThreadFunc?, data: gpointer?, joinable: gboolean, error: CValuesRef<CPointerVar<GError>>?): CPointer<GThread>? {
    memScoped {
        return interpretCPointer<GThread>(kniBridge1569(func.rawValue, data.rawValue, joinable, error?.getPointer(memScope).rawValue))
    }
}

fun g_thread_create_full(func: GThreadFunc?, data: gpointer?, stack_size: gulong, joinable: gboolean, bound: gboolean, priority: GThreadPriority, error: CValuesRef<CPointerVar<GError>>?): CPointer<GThread>? {
    memScoped {
        return interpretCPointer<GThread>(kniBridge1570(func.rawValue, data.rawValue, stack_size, joinable, bound, priority.value, error?.getPointer(memScope).rawValue))
    }
}

fun g_thread_set_priority(thread: CValuesRef<GThread>?, priority: GThreadPriority): Unit {
    memScoped {
        return kniBridge1571(thread?.getPointer(memScope).rawValue, priority.value)
    }
}

fun g_thread_foreach(thread_func: GFunc?, user_data: gpointer?): Unit {
    return kniBridge1572(thread_func.rawValue, user_data.rawValue)
}

fun g_static_mutex_init(mutex: CValuesRef<GStaticMutex>?): Unit {
    memScoped {
        return kniBridge1573(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_mutex_free(mutex: CValuesRef<GStaticMutex>?): Unit {
    memScoped {
        return kniBridge1574(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_mutex_get_mutex_impl(mutex: CValuesRef<GStaticMutex>?): CPointer<GMutex>? {
    memScoped {
        return interpretCPointer<GMutex>(kniBridge1575(mutex?.getPointer(memScope).rawValue))
    }
}

fun g_static_rec_mutex_init(mutex: CValuesRef<GStaticRecMutex>?): Unit {
    memScoped {
        return kniBridge1576(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_rec_mutex_lock(mutex: CValuesRef<GStaticRecMutex>?): Unit {
    memScoped {
        return kniBridge1577(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_rec_mutex_trylock(mutex: CValuesRef<GStaticRecMutex>?): gboolean {
    memScoped {
        return kniBridge1578(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_rec_mutex_unlock(mutex: CValuesRef<GStaticRecMutex>?): Unit {
    memScoped {
        return kniBridge1579(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_rec_mutex_lock_full(mutex: CValuesRef<GStaticRecMutex>?, depth: guint): Unit {
    memScoped {
        return kniBridge1580(mutex?.getPointer(memScope).rawValue, depth)
    }
}

fun g_static_rec_mutex_unlock_full(mutex: CValuesRef<GStaticRecMutex>?): guint {
    memScoped {
        return kniBridge1581(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_rec_mutex_free(mutex: CValuesRef<GStaticRecMutex>?): Unit {
    memScoped {
        return kniBridge1582(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_init(lock: CValuesRef<GStaticRWLock>?): Unit {
    memScoped {
        return kniBridge1583(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_reader_lock(lock: CValuesRef<GStaticRWLock>?): Unit {
    memScoped {
        return kniBridge1584(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_reader_trylock(lock: CValuesRef<GStaticRWLock>?): gboolean {
    memScoped {
        return kniBridge1585(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_reader_unlock(lock: CValuesRef<GStaticRWLock>?): Unit {
    memScoped {
        return kniBridge1586(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_writer_lock(lock: CValuesRef<GStaticRWLock>?): Unit {
    memScoped {
        return kniBridge1587(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_writer_trylock(lock: CValuesRef<GStaticRWLock>?): gboolean {
    memScoped {
        return kniBridge1588(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_writer_unlock(lock: CValuesRef<GStaticRWLock>?): Unit {
    memScoped {
        return kniBridge1589(lock?.getPointer(memScope).rawValue)
    }
}

fun g_static_rw_lock_free(lock: CValuesRef<GStaticRWLock>?): Unit {
    memScoped {
        return kniBridge1590(lock?.getPointer(memScope).rawValue)
    }
}

fun g_private_new(notify: GDestroyNotify?): CPointer<GPrivate>? {
    return interpretCPointer<GPrivate>(kniBridge1591(notify.rawValue))
}

fun g_static_private_init(private_key: CValuesRef<GStaticPrivate>?): Unit {
    memScoped {
        return kniBridge1592(private_key?.getPointer(memScope).rawValue)
    }
}

fun g_static_private_get(private_key: CValuesRef<GStaticPrivate>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1593(private_key?.getPointer(memScope).rawValue))
    }
}

fun g_static_private_set(private_key: CValuesRef<GStaticPrivate>?, data: gpointer?, notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1594(private_key?.getPointer(memScope).rawValue, data.rawValue, notify.rawValue)
    }
}

fun g_static_private_free(private_key: CValuesRef<GStaticPrivate>?): Unit {
    memScoped {
        return kniBridge1595(private_key?.getPointer(memScope).rawValue)
    }
}

fun g_once_init_enter_impl(location: CValuesRef<gsizeVar>?): gboolean {
    memScoped {
        return kniBridge1596(location?.getPointer(memScope).rawValue)
    }
}

fun g_thread_init(vtable: gpointer?): Unit {
    return kniBridge1597(vtable.rawValue)
}

fun g_thread_init_with_errorcheck_mutexes(vtable: gpointer?): Unit {
    return kniBridge1598(vtable.rawValue)
}

fun g_thread_get_initialized(): gboolean {
    return kniBridge1599()
}

fun g_mutex_new(): CPointer<GMutex>? {
    return interpretCPointer<GMutex>(kniBridge1600())
}

fun g_mutex_free(mutex: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge1601(mutex?.getPointer(memScope).rawValue)
    }
}

fun g_cond_new(): CPointer<GCond>? {
    return interpretCPointer<GCond>(kniBridge1602())
}

fun g_cond_free(cond: CValuesRef<GCond>?): Unit {
    memScoped {
        return kniBridge1603(cond?.getPointer(memScope).rawValue)
    }
}

fun g_cond_timed_wait(cond: CValuesRef<GCond>?, mutex: CValuesRef<GMutex>?, timeval: CValuesRef<GTimeVal>?): gboolean {
    memScoped {
        return kniBridge1604(cond?.getPointer(memScope).rawValue, mutex?.getPointer(memScope).rawValue, timeval?.getPointer(memScope).rawValue)
    }
}

fun g_autoptr_cleanup_generic_gfree(p: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1605(p?.getPointer(memScope).rawValue)
    }
}

fun g_autoptr_cleanup_gstring_free(string: CValuesRef<GString>?): Unit {
    memScoped {
        return kniBridge1606(string?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAsyncQueue(_ptr: CValuesRef<GAsyncQueue>?): Unit {
    memScoped {
        return kniBridge1607(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAsyncQueue(_ptr: CValuesRef<CPointerVar<GAsyncQueue>>?): Unit {
    memScoped {
        return kniBridge1608(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAsyncQueue(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1609(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAsyncQueue(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1610(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAsyncQueue(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1611(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBookmarkFile(_ptr: CValuesRef<GBookmarkFile>?): Unit {
    memScoped {
        return kniBridge1612(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBookmarkFile(_ptr: CValuesRef<CPointerVar<GBookmarkFile>>?): Unit {
    memScoped {
        return kniBridge1613(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBookmarkFile(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1614(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBookmarkFile(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1615(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBookmarkFile(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1616(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBytes(_ptr: CValuesRef<GBytes>?): Unit {
    memScoped {
        return kniBridge1617(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBytes(_ptr: CValuesRef<CPointerVar<GBytes>>?): Unit {
    memScoped {
        return kniBridge1618(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBytes(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1619(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBytes(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1620(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBytes(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1621(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GChecksum(_ptr: CValuesRef<GChecksum>?): Unit {
    memScoped {
        return kniBridge1622(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GChecksum(_ptr: CValuesRef<CPointerVar<GChecksum>>?): Unit {
    memScoped {
        return kniBridge1623(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GChecksum(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1624(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GChecksum(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1625(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GChecksum(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1626(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDateTime(_ptr: CValuesRef<GDateTime>?): Unit {
    memScoped {
        return kniBridge1627(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDateTime(_ptr: CValuesRef<CPointerVar<GDateTime>>?): Unit {
    memScoped {
        return kniBridge1628(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDateTime(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1629(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDateTime(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1630(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDateTime(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1631(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDir(_ptr: CValuesRef<GDir>?): Unit {
    memScoped {
        return kniBridge1632(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDir(_ptr: CValuesRef<CPointerVar<GDir>>?): Unit {
    memScoped {
        return kniBridge1633(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDir(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1634(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDir(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1635(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDir(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1636(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GError(_ptr: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge1637(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GError(_ptr: CValuesRef<CPointerVar<GError>>?): Unit {
    memScoped {
        return kniBridge1638(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GError(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1639(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GError(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1640(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GError(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1641(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GHashTable(_ptr: CValuesRef<GHashTable>?): Unit {
    memScoped {
        return kniBridge1642(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GHashTable(_ptr: CValuesRef<CPointerVar<GHashTable>>?): Unit {
    memScoped {
        return kniBridge1643(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GHashTable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1644(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GHashTable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1645(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GHashTable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1646(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GHmac(_ptr: CValuesRef<GHmac>?): Unit {
    memScoped {
        return kniBridge1647(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GHmac(_ptr: CValuesRef<CPointerVar<GHmac>>?): Unit {
    memScoped {
        return kniBridge1648(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GHmac(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1649(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GHmac(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1650(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GHmac(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1651(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIOChannel(_ptr: CValuesRef<GIOChannel>?): Unit {
    memScoped {
        return kniBridge1652(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIOChannel(_ptr: CValuesRef<CPointerVar<GIOChannel>>?): Unit {
    memScoped {
        return kniBridge1653(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIOChannel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1654(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIOChannel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1655(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIOChannel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1656(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GKeyFile(_ptr: CValuesRef<GKeyFile>?): Unit {
    memScoped {
        return kniBridge1657(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GKeyFile(_ptr: CValuesRef<CPointerVar<GKeyFile>>?): Unit {
    memScoped {
        return kniBridge1658(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GKeyFile(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1659(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GKeyFile(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1660(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GKeyFile(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1661(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GList(_ptr: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1662(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GList(_ptr: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1663(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GList(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1664(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GList(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1665(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GList(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1666(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GArray(_ptr: CValuesRef<GArray>?): Unit {
    memScoped {
        return kniBridge1667(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GArray(_ptr: CValuesRef<CPointerVar<GArray>>?): Unit {
    memScoped {
        return kniBridge1668(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GArray(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1669(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GArray(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1670(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GArray(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1671(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPtrArray(_ptr: CValuesRef<GPtrArray>?): Unit {
    memScoped {
        return kniBridge1672(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPtrArray(_ptr: CValuesRef<CPointerVar<GPtrArray>>?): Unit {
    memScoped {
        return kniBridge1673(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPtrArray(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1674(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPtrArray(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1675(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPtrArray(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1676(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GByteArray(_ptr: CValuesRef<GByteArray>?): Unit {
    memScoped {
        return kniBridge1677(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GByteArray(_ptr: CValuesRef<CPointerVar<GByteArray>>?): Unit {
    memScoped {
        return kniBridge1678(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GByteArray(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1679(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GByteArray(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1680(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GByteArray(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1681(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMainContext(_ptr: CValuesRef<GMainContext>?): Unit {
    memScoped {
        return kniBridge1682(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMainContext(_ptr: CValuesRef<CPointerVar<GMainContext>>?): Unit {
    memScoped {
        return kniBridge1683(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMainContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1684(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMainContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1685(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMainContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1686(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMainLoop(_ptr: CValuesRef<GMainLoop>?): Unit {
    memScoped {
        return kniBridge1687(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMainLoop(_ptr: CValuesRef<CPointerVar<GMainLoop>>?): Unit {
    memScoped {
        return kniBridge1688(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMainLoop(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1689(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMainLoop(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1690(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMainLoop(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1691(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSource(_ptr: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge1692(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSource(_ptr: CValuesRef<CPointerVar<GSource>>?): Unit {
    memScoped {
        return kniBridge1693(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSource(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1694(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSource(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1695(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSource(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1696(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMappedFile(_ptr: CValuesRef<GMappedFile>?): Unit {
    memScoped {
        return kniBridge1697(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMappedFile(_ptr: CValuesRef<CPointerVar<GMappedFile>>?): Unit {
    memScoped {
        return kniBridge1698(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMappedFile(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1699(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMappedFile(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1700(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMappedFile(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1701(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMarkupParseContext(_ptr: CValuesRef<GMarkupParseContext>?): Unit {
    memScoped {
        return kniBridge1702(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMarkupParseContext(_ptr: CValuesRef<CPointerVar<GMarkupParseContext>>?): Unit {
    memScoped {
        return kniBridge1703(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMarkupParseContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1704(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMarkupParseContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1705(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMarkupParseContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1706(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNode(_ptr: CValuesRef<GNode>?): Unit {
    memScoped {
        return kniBridge1707(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNode(_ptr: CValuesRef<CPointerVar<GNode>>?): Unit {
    memScoped {
        return kniBridge1708(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNode(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1709(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNode(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1710(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNode(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1711(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GOptionContext(_ptr: CValuesRef<GOptionContext>?): Unit {
    memScoped {
        return kniBridge1712(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GOptionContext(_ptr: CValuesRef<CPointerVar<GOptionContext>>?): Unit {
    memScoped {
        return kniBridge1713(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GOptionContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1714(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GOptionContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1715(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GOptionContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1716(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GOptionGroup(_ptr: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge1717(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GOptionGroup(_ptr: CValuesRef<CPointerVar<GOptionGroup>>?): Unit {
    memScoped {
        return kniBridge1718(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GOptionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1719(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GOptionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1720(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GOptionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1721(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPatternSpec(_ptr: CValuesRef<GPatternSpec>?): Unit {
    memScoped {
        return kniBridge1722(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPatternSpec(_ptr: CValuesRef<CPointerVar<GPatternSpec>>?): Unit {
    memScoped {
        return kniBridge1723(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPatternSpec(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1724(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPatternSpec(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1725(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPatternSpec(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1726(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GQueue(_ptr: CValuesRef<GQueue>?): Unit {
    memScoped {
        return kniBridge1727(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GQueue(_ptr: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1728(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GQueue(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1729(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GQueue(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1730(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GQueue(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1731(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GQueue(_ptr: CValuesRef<GQueue>?): Unit {
    memScoped {
        return kniBridge1732(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRand(_ptr: CValuesRef<GRand>?): Unit {
    memScoped {
        return kniBridge1733(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRand(_ptr: CValuesRef<CPointerVar<GRand>>?): Unit {
    memScoped {
        return kniBridge1734(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRand(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1735(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRand(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1736(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRand(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1737(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRegex(_ptr: CValuesRef<GRegex>?): Unit {
    memScoped {
        return kniBridge1738(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRegex(_ptr: CValuesRef<CPointerVar<GRegex>>?): Unit {
    memScoped {
        return kniBridge1739(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRegex(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1740(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRegex(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1741(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRegex(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1742(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMatchInfo(_ptr: CValuesRef<GMatchInfo>?): Unit {
    memScoped {
        return kniBridge1743(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMatchInfo(_ptr: CValuesRef<CPointerVar<GMatchInfo>>?): Unit {
    memScoped {
        return kniBridge1744(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMatchInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1745(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMatchInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1746(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMatchInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1747(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GScanner(_ptr: CValuesRef<GScanner>?): Unit {
    memScoped {
        return kniBridge1748(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GScanner(_ptr: CValuesRef<CPointerVar<GScanner>>?): Unit {
    memScoped {
        return kniBridge1749(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GScanner(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1750(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GScanner(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1751(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GScanner(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1752(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSequence(_ptr: CValuesRef<GSequence>?): Unit {
    memScoped {
        return kniBridge1753(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSequence(_ptr: CValuesRef<CPointerVar<GSequence>>?): Unit {
    memScoped {
        return kniBridge1754(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSequence(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1755(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSequence(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1756(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSequence(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1757(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSList(_ptr: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge1758(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSList(_ptr: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1759(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSList(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1760(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSList(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1761(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSList(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1762(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GString(_ptr: CValuesRef<GString>?): Unit {
    memScoped {
        return kniBridge1763(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GString(_ptr: CValuesRef<CPointerVar<GString>>?): Unit {
    memScoped {
        return kniBridge1764(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GString(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1765(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GString(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1766(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GString(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1767(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GStringChunk(_ptr: CValuesRef<GStringChunk>?): Unit {
    memScoped {
        return kniBridge1768(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GStringChunk(_ptr: CValuesRef<CPointerVar<GStringChunk>>?): Unit {
    memScoped {
        return kniBridge1769(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GStringChunk(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1770(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GStringChunk(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1771(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GStringChunk(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1772(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GThread(_ptr: CValuesRef<GThread>?): Unit {
    memScoped {
        return kniBridge1773(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GThread(_ptr: CValuesRef<CPointerVar<GThread>>?): Unit {
    memScoped {
        return kniBridge1774(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GThread(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1775(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GThread(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1776(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GThread(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1777(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GMutex(_ptr: CValuesRef<GMutex>?): Unit {
    memScoped {
        return kniBridge1778(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMutexLocker(_ptr: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1779(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMutexLocker(_ptr: CValuesRef<COpaquePointerVar>?): Unit {
    memScoped {
        return kniBridge1780(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMutexLocker(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1781(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMutexLocker(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1782(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMutexLocker(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1783(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRecMutexLocker(_ptr: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1784(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRecMutexLocker(_ptr: CValuesRef<COpaquePointerVar>?): Unit {
    memScoped {
        return kniBridge1785(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRecMutexLocker(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1786(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRecMutexLocker(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1787(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRecMutexLocker(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1788(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRWLockWriterLocker(_ptr: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1789(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRWLockWriterLocker(_ptr: CValuesRef<COpaquePointerVar>?): Unit {
    memScoped {
        return kniBridge1790(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRWLockWriterLocker(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1791(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRWLockWriterLocker(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1792(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRWLockWriterLocker(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1793(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRWLockReaderLocker(_ptr: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1794(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRWLockReaderLocker(_ptr: CValuesRef<COpaquePointerVar>?): Unit {
    memScoped {
        return kniBridge1795(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRWLockReaderLocker(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1796(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRWLockReaderLocker(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1797(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRWLockReaderLocker(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1798(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GCond(_ptr: CValuesRef<GCond>?): Unit {
    memScoped {
        return kniBridge1799(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTimer(_ptr: CValuesRef<GTimer>?): Unit {
    memScoped {
        return kniBridge1800(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTimer(_ptr: CValuesRef<CPointerVar<GTimer>>?): Unit {
    memScoped {
        return kniBridge1801(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTimer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1802(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTimer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1803(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTimer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1804(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTimeZone(_ptr: CValuesRef<GTimeZone>?): Unit {
    memScoped {
        return kniBridge1805(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTimeZone(_ptr: CValuesRef<CPointerVar<GTimeZone>>?): Unit {
    memScoped {
        return kniBridge1806(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTimeZone(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1807(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTimeZone(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1808(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTimeZone(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1809(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTree(_ptr: CValuesRef<GTree>?): Unit {
    memScoped {
        return kniBridge1810(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTree(_ptr: CValuesRef<CPointerVar<GTree>>?): Unit {
    memScoped {
        return kniBridge1811(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTree(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1812(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTree(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1813(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTree(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1814(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVariant(_ptr: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1815(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVariant(_ptr: CValuesRef<CPointerVar<GVariant>>?): Unit {
    memScoped {
        return kniBridge1816(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVariant(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1817(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVariant(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1818(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVariant(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1819(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVariantBuilder(_ptr: CValuesRef<GVariantBuilder>?): Unit {
    memScoped {
        return kniBridge1820(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVariantBuilder(_ptr: CValuesRef<CPointerVar<GVariantBuilder>>?): Unit {
    memScoped {
        return kniBridge1821(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVariantBuilder(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1822(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVariantBuilder(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1823(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVariantBuilder(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1824(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GVariantBuilder(_ptr: CValuesRef<GVariantBuilder>?): Unit {
    memScoped {
        return kniBridge1825(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVariantIter(_ptr: CValuesRef<GVariantIter>?): Unit {
    memScoped {
        return kniBridge1826(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVariantIter(_ptr: CValuesRef<CPointerVar<GVariantIter>>?): Unit {
    memScoped {
        return kniBridge1827(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVariantIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1828(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVariantIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1829(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVariantIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1830(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVariantDict(_ptr: CValuesRef<GVariantDict>?): Unit {
    memScoped {
        return kniBridge1831(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVariantDict(_ptr: CValuesRef<CPointerVar<GVariantDict>>?): Unit {
    memScoped {
        return kniBridge1832(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVariantDict(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1833(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVariantDict(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1834(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVariantDict(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1835(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GVariantDict(_ptr: CValuesRef<GVariantDict>?): Unit {
    memScoped {
        return kniBridge1836(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVariantType(_ptr: CValuesRef<GVariantType>?): Unit {
    memScoped {
        return kniBridge1837(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVariantType(_ptr: CValuesRef<CPointerVar<GVariantType>>?): Unit {
    memScoped {
        return kniBridge1838(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVariantType(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1839(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVariantType(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1840(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVariantType(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1841(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GStrv(_ptr: CValuesRef<GStrvVar>?): Unit {
    memScoped {
        return kniBridge1842(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRefString(_ptr: CValuesRef<GRefStringVar>?): Unit {
    memScoped {
        return kniBridge1843(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRefString(_ptr: CValuesRef<CPointerVar<GRefStringVar>>?): Unit {
    memScoped {
        return kniBridge1844(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRefString(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge1845(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRefString(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge1846(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRefString(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge1847(_q?.getPointer(memScope).rawValue)
    }
}

fun g_type_init(): Unit {
    return kniBridge1848()
}

fun g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags): Unit {
    return kniBridge1849(debug_flags)
}

fun g_type_name(type: GType): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1850(type))
}

fun g_type_qname(type: GType): GQuark {
    return kniBridge1851(type)
}

fun g_type_from_name(@CCall.CString name: String?): GType {
    memScoped {
        return kniBridge1852(name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_type_parent(type: GType): GType {
    return kniBridge1853(type)
}

fun g_type_depth(type: GType): guint {
    return kniBridge1854(type)
}

fun g_type_next_base(leaf_type: GType, root_type: GType): GType {
    return kniBridge1855(leaf_type, root_type)
}

fun g_type_is_a(type: GType, is_a_type: GType): gboolean {
    return kniBridge1856(type, is_a_type)
}

fun g_type_class_ref(type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1857(type))
}

fun g_type_class_peek(type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1858(type))
}

fun g_type_class_peek_static(type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1859(type))
}

fun g_type_class_unref(g_class: gpointer?): Unit {
    return kniBridge1860(g_class.rawValue)
}

fun g_type_class_peek_parent(g_class: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1861(g_class.rawValue))
}

fun g_type_interface_peek(instance_class: gpointer?, iface_type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1862(instance_class.rawValue, iface_type))
}

fun g_type_interface_peek_parent(g_iface: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1863(g_iface.rawValue))
}

fun g_type_default_interface_ref(g_type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1864(g_type))
}

fun g_type_default_interface_peek(g_type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1865(g_type))
}

fun g_type_default_interface_unref(g_iface: gpointer?): Unit {
    return kniBridge1866(g_iface.rawValue)
}

fun g_type_children(type: GType, n_children: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge1867(type, n_children?.getPointer(memScope).rawValue))
    }
}

fun g_type_interfaces(type: GType, n_interfaces: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge1868(type, n_interfaces?.getPointer(memScope).rawValue))
    }
}

fun g_type_set_qdata(type: GType, quark: GQuark, data: gpointer?): Unit {
    return kniBridge1869(type, quark, data.rawValue)
}

fun g_type_get_qdata(type: GType, quark: GQuark): gpointer? {
    return interpretCPointer<COpaque>(kniBridge1870(type, quark))
}

fun g_type_query(type: GType, query: CValuesRef<GTypeQuery>?): Unit {
    memScoped {
        return kniBridge1871(type, query?.getPointer(memScope).rawValue)
    }
}

fun g_type_get_instance_count(type: GType): Int {
    return kniBridge1872(type)
}

fun g_type_register_static(parent_type: GType, @CCall.CString type_name: String?, info: CValuesRef<GTypeInfo>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge1873(parent_type, type_name?.cstr?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_register_static_simple(parent_type: GType, @CCall.CString type_name: String?, class_size: guint, class_init: GClassInitFunc?, instance_size: guint, instance_init: GInstanceInitFunc?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge1874(parent_type, type_name?.cstr?.getPointer(memScope).rawValue, class_size, class_init.rawValue, instance_size, instance_init.rawValue, flags)
    }
}

fun g_type_register_dynamic(parent_type: GType, @CCall.CString type_name: String?, plugin: CValuesRef<GTypePlugin>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge1875(parent_type, type_name?.cstr?.getPointer(memScope).rawValue, plugin?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_register_fundamental(type_id: GType, @CCall.CString type_name: String?, info: CValuesRef<GTypeInfo>?, finfo: CValuesRef<GTypeFundamentalInfo>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge1876(type_id, type_name?.cstr?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, finfo?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_add_interface_static(instance_type: GType, interface_type: GType, info: CValuesRef<GInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge1877(instance_type, interface_type, info?.getPointer(memScope).rawValue)
    }
}

fun g_type_add_interface_dynamic(instance_type: GType, interface_type: GType, plugin: CValuesRef<GTypePlugin>?): Unit {
    memScoped {
        return kniBridge1878(instance_type, interface_type, plugin?.getPointer(memScope).rawValue)
    }
}

fun g_type_interface_add_prerequisite(interface_type: GType, prerequisite_type: GType): Unit {
    return kniBridge1879(interface_type, prerequisite_type)
}

fun g_type_interface_prerequisites(interface_type: GType, n_prerequisites: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge1880(interface_type, n_prerequisites?.getPointer(memScope).rawValue))
    }
}

fun g_type_class_add_private(g_class: gpointer?, private_size: gsize): Unit {
    return kniBridge1881(g_class.rawValue, private_size)
}

fun g_type_add_instance_private(class_type: GType, private_size: gsize): gint {
    return kniBridge1882(class_type, private_size)
}

fun g_type_instance_get_private(instance: CValuesRef<GTypeInstance>?, private_type: GType): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1883(instance?.getPointer(memScope).rawValue, private_type))
    }
}

fun g_type_class_adjust_private_offset(g_class: gpointer?, private_size_or_offset: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge1884(g_class.rawValue, private_size_or_offset?.getPointer(memScope).rawValue)
    }
}

fun g_type_add_class_private(class_type: GType, private_size: gsize): Unit {
    return kniBridge1885(class_type, private_size)
}

fun g_type_class_get_private(klass: CValuesRef<GTypeClass>?, private_type: GType): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1886(klass?.getPointer(memScope).rawValue, private_type))
    }
}

fun g_type_class_get_instance_private_offset(g_class: gpointer?): gint {
    return kniBridge1887(g_class.rawValue)
}

fun g_type_ensure(type: GType): Unit {
    return kniBridge1888(type)
}

fun g_type_get_type_registration_serial(): guint {
    return kniBridge1889()
}

fun g_type_get_plugin(type: GType): CPointer<GTypePlugin>? {
    return interpretCPointer<GTypePlugin>(kniBridge1890(type))
}

fun g_type_interface_get_plugin(instance_type: GType, interface_type: GType): CPointer<GTypePlugin>? {
    return interpretCPointer<GTypePlugin>(kniBridge1891(instance_type, interface_type))
}

fun g_type_fundamental_next(): GType {
    return kniBridge1892()
}

fun g_type_fundamental(type_id: GType): GType {
    return kniBridge1893(type_id)
}

fun g_type_create_instance(type: GType): CPointer<GTypeInstance>? {
    return interpretCPointer<GTypeInstance>(kniBridge1894(type))
}

fun g_type_free_instance(instance: CValuesRef<GTypeInstance>?): Unit {
    memScoped {
        return kniBridge1895(instance?.getPointer(memScope).rawValue)
    }
}

fun g_type_add_class_cache_func(cache_data: gpointer?, cache_func: GTypeClassCacheFunc?): Unit {
    return kniBridge1896(cache_data.rawValue, cache_func.rawValue)
}

fun g_type_remove_class_cache_func(cache_data: gpointer?, cache_func: GTypeClassCacheFunc?): Unit {
    return kniBridge1897(cache_data.rawValue, cache_func.rawValue)
}

fun g_type_class_unref_uncached(g_class: gpointer?): Unit {
    return kniBridge1898(g_class.rawValue)
}

fun g_type_add_interface_check(check_data: gpointer?, check_func: GTypeInterfaceCheckFunc?): Unit {
    return kniBridge1899(check_data.rawValue, check_func.rawValue)
}

fun g_type_remove_interface_check(check_data: gpointer?, check_func: GTypeInterfaceCheckFunc?): Unit {
    return kniBridge1900(check_data.rawValue, check_func.rawValue)
}

fun g_type_value_table_peek(type: GType): CPointer<GTypeValueTable>? {
    return interpretCPointer<GTypeValueTable>(kniBridge1901(type))
}

fun g_type_check_instance(instance: CValuesRef<GTypeInstance>?): gboolean {
    memScoped {
        return kniBridge1902(instance?.getPointer(memScope).rawValue)
    }
}

fun g_type_check_instance_cast(instance: CValuesRef<GTypeInstance>?, iface_type: GType): CPointer<GTypeInstance>? {
    memScoped {
        return interpretCPointer<GTypeInstance>(kniBridge1903(instance?.getPointer(memScope).rawValue, iface_type))
    }
}

fun g_type_check_instance_is_a(instance: CValuesRef<GTypeInstance>?, iface_type: GType): gboolean {
    memScoped {
        return kniBridge1904(instance?.getPointer(memScope).rawValue, iface_type)
    }
}

fun g_type_check_instance_is_fundamentally_a(instance: CValuesRef<GTypeInstance>?, fundamental_type: GType): gboolean {
    memScoped {
        return kniBridge1905(instance?.getPointer(memScope).rawValue, fundamental_type)
    }
}

fun g_type_check_class_cast(g_class: CValuesRef<GTypeClass>?, is_a_type: GType): CPointer<GTypeClass>? {
    memScoped {
        return interpretCPointer<GTypeClass>(kniBridge1906(g_class?.getPointer(memScope).rawValue, is_a_type))
    }
}

fun g_type_check_class_is_a(g_class: CValuesRef<GTypeClass>?, is_a_type: GType): gboolean {
    memScoped {
        return kniBridge1907(g_class?.getPointer(memScope).rawValue, is_a_type)
    }
}

fun g_type_check_is_value_type(type: GType): gboolean {
    return kniBridge1908(type)
}

fun g_type_check_value(value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge1909(value?.getPointer(memScope).rawValue)
    }
}

fun g_type_check_value_holds(value: CValuesRef<GValue>?, type: GType): gboolean {
    memScoped {
        return kniBridge1910(value?.getPointer(memScope).rawValue, type)
    }
}

fun g_type_test_flags(type: GType, flags: guint): gboolean {
    return kniBridge1911(type, flags)
}

fun g_type_name_from_instance(instance: CValuesRef<GTypeInstance>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1912(instance?.getPointer(memScope).rawValue))
    }
}

fun g_type_name_from_class(g_class: CValuesRef<GTypeClass>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1913(g_class?.getPointer(memScope).rawValue))
    }
}

fun g_value_init(value: CValuesRef<GValue>?, g_type: GType): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge1914(value?.getPointer(memScope).rawValue, g_type))
    }
}

fun g_value_copy(src_value: CValuesRef<GValue>?, dest_value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge1915(src_value?.getPointer(memScope).rawValue, dest_value?.getPointer(memScope).rawValue)
    }
}

fun g_value_reset(value: CValuesRef<GValue>?): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge1916(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_unset(value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge1917(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_instance(value: CValuesRef<GValue>?, instance: gpointer?): Unit {
    memScoped {
        return kniBridge1918(value?.getPointer(memScope).rawValue, instance.rawValue)
    }
}

fun g_value_init_from_instance(value: CValuesRef<GValue>?, instance: gpointer?): Unit {
    memScoped {
        return kniBridge1919(value?.getPointer(memScope).rawValue, instance.rawValue)
    }
}

fun g_value_fits_pointer(value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge1920(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_peek_pointer(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1921(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_type_compatible(src_type: GType, dest_type: GType): gboolean {
    return kniBridge1922(src_type, dest_type)
}

fun g_value_type_transformable(src_type: GType, dest_type: GType): gboolean {
    return kniBridge1923(src_type, dest_type)
}

fun g_value_transform(src_value: CValuesRef<GValue>?, dest_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge1924(src_value?.getPointer(memScope).rawValue, dest_value?.getPointer(memScope).rawValue)
    }
}

fun g_value_register_transform_func(src_type: GType, dest_type: GType, transform_func: GValueTransform?): Unit {
    return kniBridge1925(src_type, dest_type, transform_func.rawValue)
}

fun g_param_spec_ref(pspec: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge1926(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_unref(pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge1927(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_sink(pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge1928(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_ref_sink(pspec: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge1929(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_qdata(pspec: CValuesRef<GParamSpec>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1930(pspec?.getPointer(memScope).rawValue, quark))
    }
}

fun g_param_spec_set_qdata(pspec: CValuesRef<GParamSpec>?, quark: GQuark, data: gpointer?): Unit {
    memScoped {
        return kniBridge1931(pspec?.getPointer(memScope).rawValue, quark, data.rawValue)
    }
}

fun g_param_spec_set_qdata_full(pspec: CValuesRef<GParamSpec>?, quark: GQuark, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1932(pspec?.getPointer(memScope).rawValue, quark, data.rawValue, destroy.rawValue)
    }
}

fun g_param_spec_steal_qdata(pspec: CValuesRef<GParamSpec>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1933(pspec?.getPointer(memScope).rawValue, quark))
    }
}

fun g_param_spec_get_redirect_target(pspec: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge1934(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_value_set_default(pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge1935(pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_param_value_defaults(pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge1936(pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_param_value_validate(pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge1937(pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_param_value_convert(pspec: CValuesRef<GParamSpec>?, src_value: CValuesRef<GValue>?, dest_value: CValuesRef<GValue>?, strict_validation: gboolean): gboolean {
    memScoped {
        return kniBridge1938(pspec?.getPointer(memScope).rawValue, src_value?.getPointer(memScope).rawValue, dest_value?.getPointer(memScope).rawValue, strict_validation)
    }
}

fun g_param_values_cmp(pspec: CValuesRef<GParamSpec>?, value1: CValuesRef<GValue>?, value2: CValuesRef<GValue>?): gint {
    memScoped {
        return kniBridge1939(pspec?.getPointer(memScope).rawValue, value1?.getPointer(memScope).rawValue, value2?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_get_name(pspec: CValuesRef<GParamSpec>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1940(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_nick(pspec: CValuesRef<GParamSpec>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1941(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_blurb(pspec: CValuesRef<GParamSpec>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1942(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_value_set_param(value: CValuesRef<GValue>?, param: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge1943(value?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun g_value_get_param(value: CValuesRef<GValue>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge1944(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_param(value: CValuesRef<GValue>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge1945(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_take_param(value: CValuesRef<GValue>?, param: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge1946(value?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_param_take_ownership(value: CValuesRef<GValue>?, param: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge1947(value?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_get_default_value(pspec: CValuesRef<GParamSpec>?): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge1948(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_name_quark(pspec: CValuesRef<GParamSpec>?): GQuark {
    memScoped {
        return kniBridge1949(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_type_register_static(@CCall.CString name: String?, pspec_info: CValuesRef<GParamSpecTypeInfo>?): GType {
    memScoped {
        return kniBridge1950(name?.cstr?.getPointer(memScope).rawValue, pspec_info?.getPointer(memScope).rawValue)
    }
}

fun _g_param_type_register_static_constant(@CCall.CString name: String?, pspec_info: CValuesRef<GParamSpecTypeInfo>?, opt_type: GType): GType {
    memScoped {
        return kniBridge1951(name?.cstr?.getPointer(memScope).rawValue, pspec_info?.getPointer(memScope).rawValue, opt_type)
    }
}

fun g_param_spec_internal(param_type: GType, @CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, flags: GParamFlags): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1952(param_type, name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_pool_new(type_prefixing: gboolean): CPointer<GParamSpecPool>? {
    return interpretCPointer<GParamSpecPool>(kniBridge1953(type_prefixing))
}

fun g_param_spec_pool_insert(pool: CValuesRef<GParamSpecPool>?, pspec: CValuesRef<GParamSpec>?, owner_type: GType): Unit {
    memScoped {
        return kniBridge1954(pool?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue, owner_type)
    }
}

fun g_param_spec_pool_remove(pool: CValuesRef<GParamSpecPool>?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge1955(pool?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_pool_lookup(pool: CValuesRef<GParamSpecPool>?, @CCall.CString param_name: String?, owner_type: GType, walk_ancestors: gboolean): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge1956(pool?.getPointer(memScope).rawValue, param_name?.cstr?.getPointer(memScope).rawValue, owner_type, walk_ancestors))
    }
}

fun g_param_spec_pool_list_owned(pool: CValuesRef<GParamSpecPool>?, owner_type: GType): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1957(pool?.getPointer(memScope).rawValue, owner_type))
    }
}

fun g_param_spec_pool_list(pool: CValuesRef<GParamSpecPool>?, owner_type: GType, n_pspecs_p: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge1958(pool?.getPointer(memScope).rawValue, owner_type, n_pspecs_p?.getPointer(memScope).rawValue))
    }
}

fun g_cclosure_new(callback_func: GCallback?, user_data: gpointer?, destroy_data: GClosureNotify?): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge1959(callback_func.rawValue, user_data.rawValue, destroy_data.rawValue))
}

fun g_cclosure_new_swap(callback_func: GCallback?, user_data: gpointer?, destroy_data: GClosureNotify?): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge1960(callback_func.rawValue, user_data.rawValue, destroy_data.rawValue))
}

fun g_signal_type_cclosure_new(itype: GType, struct_offset: guint): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge1961(itype, struct_offset))
}

fun g_closure_ref(closure: CValuesRef<GClosure>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge1962(closure?.getPointer(memScope).rawValue))
    }
}

fun g_closure_sink(closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge1963(closure?.getPointer(memScope).rawValue)
    }
}

fun g_closure_unref(closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge1964(closure?.getPointer(memScope).rawValue)
    }
}

fun g_closure_new_simple(sizeof_closure: guint, data: gpointer?): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge1965(sizeof_closure, data.rawValue))
}

fun g_closure_add_finalize_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge1966(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_remove_finalize_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge1967(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_add_invalidate_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge1968(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_remove_invalidate_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge1969(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_add_marshal_guards(closure: CValuesRef<GClosure>?, pre_marshal_data: gpointer?, pre_marshal_notify: GClosureNotify?, post_marshal_data: gpointer?, post_marshal_notify: GClosureNotify?): Unit {
    memScoped {
        return kniBridge1970(closure?.getPointer(memScope).rawValue, pre_marshal_data.rawValue, pre_marshal_notify.rawValue, post_marshal_data.rawValue, post_marshal_notify.rawValue)
    }
}

fun g_closure_set_marshal(closure: CValuesRef<GClosure>?, marshal: GClosureMarshal?): Unit {
    memScoped {
        return kniBridge1971(closure?.getPointer(memScope).rawValue, marshal.rawValue)
    }
}

fun g_closure_set_meta_marshal(closure: CValuesRef<GClosure>?, marshal_data: gpointer?, meta_marshal: GClosureMarshal?): Unit {
    memScoped {
        return kniBridge1972(closure?.getPointer(memScope).rawValue, marshal_data.rawValue, meta_marshal.rawValue)
    }
}

fun g_closure_invalidate(closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge1973(closure?.getPointer(memScope).rawValue)
    }
}

fun g_closure_invoke(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?): Unit {
    memScoped {
        return kniBridge1974(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue)
    }
}

fun g_cclosure_marshal_generic(closure: CValuesRef<GClosure>?, return_gvalue: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1975(closure?.getPointer(memScope).rawValue, return_gvalue?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_generic_va(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args_list: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1976(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args_list.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__VOID(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1977(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__VOIDv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1978(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOOLEAN(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1979(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOOLEANv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1980(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__CHAR(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1981(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__CHARv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1982(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__UCHAR(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1983(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__UCHARv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1984(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__INT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1985(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__INTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1986(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1987(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1988(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__LONG(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1989(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__LONGv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1990(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__ULONG(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1991(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__ULONGv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1992(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__ENUM(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1993(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__ENUMv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1994(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLAGS(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1995(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLAGSv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1996(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLOAT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1997(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLOATv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge1998(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__DOUBLE(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge1999(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__DOUBLEv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2000(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__STRING(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2001(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__STRINGv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2002(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__PARAM(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2003(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__PARAMv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2004(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOXED(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2005(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOXEDv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2006(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__POINTER(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2007(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__POINTERv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2008(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__OBJECT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2009(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__OBJECTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2010(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__VARIANT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2011(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__VARIANTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2012(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINT_POINTER(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2013(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINT_POINTERv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2014(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__FLAGS(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2015(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__FLAGSv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2016(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_STRING__OBJECT_POINTER(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2017(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2018(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge2019(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge2020(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_signal_newv(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_closure: CValuesRef<GClosure>?, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, param_types: CValuesRef<GTypeVar>?): guint {
    memScoped {
        return kniBridge2021(signal_name?.cstr?.getPointer(memScope).rawValue, itype, signal_flags, class_closure?.getPointer(memScope).rawValue, accumulator.rawValue, accu_data.rawValue, c_marshaller.rawValue, return_type, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_signal_new_valist(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_closure: CValuesRef<GClosure>?, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, args: va_list?): guint {
    memScoped {
        return kniBridge2022(signal_name?.cstr?.getPointer(memScope).rawValue, itype, signal_flags, class_closure?.getPointer(memScope).rawValue, accumulator.rawValue, accu_data.rawValue, c_marshaller.rawValue, return_type, n_params, args.rawValue)
    }
}

@CCall("knifunptr_glibresources41")
external fun g_signal_new(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_offset: guint, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, vararg variadicArguments: Any?): guint

@CCall("knifunptr_glibresources42")
external fun g_signal_new_class_handler(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_handler: GCallback?, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, vararg variadicArguments: Any?): guint

fun g_signal_set_va_marshaller(signal_id: guint, instance_type: GType, va_marshaller: GSignalCVaMarshaller?): Unit {
    return kniBridge2023(signal_id, instance_type, va_marshaller.rawValue)
}

fun g_signal_emitv(instance_and_params: CValuesRef<GValue>?, signal_id: guint, detail: GQuark, return_value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2024(instance_and_params?.getPointer(memScope).rawValue, signal_id, detail, return_value?.getPointer(memScope).rawValue)
    }
}

fun g_signal_emit_valist(instance: gpointer?, signal_id: guint, detail: GQuark, var_args: va_list?): Unit {
    return kniBridge2025(instance.rawValue, signal_id, detail, var_args.rawValue)
}

@CCall("knifunptr_glibresources43")
external fun g_signal_emit(instance: gpointer?, signal_id: guint, detail: GQuark, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources44")
external fun g_signal_emit_by_name(instance: gpointer?, @CCall.CString detailed_signal: String?, vararg variadicArguments: Any?): Unit

fun g_signal_lookup(@CCall.CString name: String?, itype: GType): guint {
    memScoped {
        return kniBridge2026(name?.cstr?.getPointer(memScope).rawValue, itype)
    }
}

fun g_signal_name(signal_id: guint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge2027(signal_id))
}

fun g_signal_query(signal_id: guint, query: CValuesRef<GSignalQuery>?): Unit {
    memScoped {
        return kniBridge2028(signal_id, query?.getPointer(memScope).rawValue)
    }
}

fun g_signal_list_ids(itype: GType, n_ids: CValuesRef<guintVar>?): CPointer<guintVar>? {
    memScoped {
        return interpretCPointer<guintVar>(kniBridge2029(itype, n_ids?.getPointer(memScope).rawValue))
    }
}

fun g_signal_parse_name(@CCall.CString detailed_signal: String?, itype: GType, signal_id_p: CValuesRef<guintVar>?, detail_p: CValuesRef<GQuarkVar>?, force_detail_quark: gboolean): gboolean {
    memScoped {
        return kniBridge2030(detailed_signal?.cstr?.getPointer(memScope).rawValue, itype, signal_id_p?.getPointer(memScope).rawValue, detail_p?.getPointer(memScope).rawValue, force_detail_quark)
    }
}

fun g_signal_get_invocation_hint(instance: gpointer?): CPointer<GSignalInvocationHint>? {
    return interpretCPointer<GSignalInvocationHint>(kniBridge2031(instance.rawValue))
}

fun g_signal_stop_emission(instance: gpointer?, signal_id: guint, detail: GQuark): Unit {
    return kniBridge2032(instance.rawValue, signal_id, detail)
}

fun g_signal_stop_emission_by_name(instance: gpointer?, @CCall.CString detailed_signal: String?): Unit {
    memScoped {
        return kniBridge2033(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_signal_add_emission_hook(signal_id: guint, detail: GQuark, hook_func: GSignalEmissionHook?, hook_data: gpointer?, data_destroy: GDestroyNotify?): gulong {
    return kniBridge2034(signal_id, detail, hook_func.rawValue, hook_data.rawValue, data_destroy.rawValue)
}

fun g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong): Unit {
    return kniBridge2035(signal_id, hook_id)
}

fun g_signal_has_handler_pending(instance: gpointer?, signal_id: guint, detail: GQuark, may_be_blocked: gboolean): gboolean {
    return kniBridge2036(instance.rawValue, signal_id, detail, may_be_blocked)
}

fun g_signal_connect_closure_by_id(instance: gpointer?, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, after: gboolean): gulong {
    memScoped {
        return kniBridge2037(instance.rawValue, signal_id, detail, closure?.getPointer(memScope).rawValue, after)
    }
}

fun g_signal_connect_closure(instance: gpointer?, @CCall.CString detailed_signal: String?, closure: CValuesRef<GClosure>?, after: gboolean): gulong {
    memScoped {
        return kniBridge2038(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue, after)
    }
}

fun g_signal_connect_data(instance: gpointer?, @CCall.CString detailed_signal: String?, c_handler: GCallback?, data: gpointer?, destroy_data: GClosureNotify?, connect_flags: GConnectFlags): gulong {
    memScoped {
        return kniBridge2039(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue, c_handler.rawValue, data.rawValue, destroy_data.rawValue, connect_flags)
    }
}

fun g_signal_handler_block(instance: gpointer?, handler_id: gulong): Unit {
    return kniBridge2040(instance.rawValue, handler_id)
}

fun g_signal_handler_unblock(instance: gpointer?, handler_id: gulong): Unit {
    return kniBridge2041(instance.rawValue, handler_id)
}

fun g_signal_handler_disconnect(instance: gpointer?, handler_id: gulong): Unit {
    return kniBridge2042(instance.rawValue, handler_id)
}

fun g_signal_handler_is_connected(instance: gpointer?, handler_id: gulong): gboolean {
    return kniBridge2043(instance.rawValue, handler_id)
}

fun g_signal_handler_find(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): gulong {
    memScoped {
        return kniBridge2044(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_signal_handlers_block_matched(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): guint {
    memScoped {
        return kniBridge2045(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_signal_handlers_unblock_matched(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): guint {
    memScoped {
        return kniBridge2046(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_signal_handlers_disconnect_matched(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): guint {
    memScoped {
        return kniBridge2047(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_clear_signal_handler(handler_id_ptr: CValuesRef<gulongVar>?, instance: gpointer?): Unit {
    memScoped {
        return kniBridge2048(handler_id_ptr?.getPointer(memScope).rawValue, instance.rawValue)
    }
}

fun g_signal_override_class_closure(signal_id: guint, instance_type: GType, class_closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge2049(signal_id, instance_type, class_closure?.getPointer(memScope).rawValue)
    }
}

fun g_signal_override_class_handler(@CCall.CString signal_name: String?, instance_type: GType, class_handler: GCallback?): Unit {
    memScoped {
        return kniBridge2050(signal_name?.cstr?.getPointer(memScope).rawValue, instance_type, class_handler.rawValue)
    }
}

fun g_signal_chain_from_overridden(instance_and_params: CValuesRef<GValue>?, return_value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2051(instance_and_params?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources45")
external fun g_signal_chain_from_overridden_handler(instance: gpointer?, vararg variadicArguments: Any?): Unit

fun g_signal_accumulator_true_handled(ihint: CValuesRef<GSignalInvocationHint>?, return_accu: CValuesRef<GValue>?, handler_return: CValuesRef<GValue>?, dummy: gpointer?): gboolean {
    memScoped {
        return kniBridge2052(ihint?.getPointer(memScope).rawValue, return_accu?.getPointer(memScope).rawValue, handler_return?.getPointer(memScope).rawValue, dummy.rawValue)
    }
}

fun g_signal_accumulator_first_wins(ihint: CValuesRef<GSignalInvocationHint>?, return_accu: CValuesRef<GValue>?, handler_return: CValuesRef<GValue>?, dummy: gpointer?): gboolean {
    memScoped {
        return kniBridge2053(ihint?.getPointer(memScope).rawValue, return_accu?.getPointer(memScope).rawValue, handler_return?.getPointer(memScope).rawValue, dummy.rawValue)
    }
}

fun g_signal_handlers_destroy(instance: gpointer?): Unit {
    return kniBridge2054(instance.rawValue)
}

fun _g_signals_destroy(itype: GType): Unit {
    return kniBridge2055(itype)
}

fun g_date_get_type(): GType {
    return kniBridge2056()
}

fun g_strv_get_type(): GType {
    return kniBridge2057()
}

fun g_gstring_get_type(): GType {
    return kniBridge2058()
}

fun g_hash_table_get_type(): GType {
    return kniBridge2059()
}

fun g_array_get_type(): GType {
    return kniBridge2060()
}

fun g_byte_array_get_type(): GType {
    return kniBridge2061()
}

fun g_ptr_array_get_type(): GType {
    return kniBridge2062()
}

fun g_bytes_get_type(): GType {
    return kniBridge2063()
}

fun g_variant_type_get_gtype(): GType {
    return kniBridge2064()
}

fun g_regex_get_type(): GType {
    return kniBridge2065()
}

fun g_match_info_get_type(): GType {
    return kniBridge2066()
}

fun g_error_get_type(): GType {
    return kniBridge2067()
}

fun g_date_time_get_type(): GType {
    return kniBridge2068()
}

fun g_time_zone_get_type(): GType {
    return kniBridge2069()
}

fun g_io_channel_get_type(): GType {
    return kniBridge2070()
}

fun g_io_condition_get_type(): GType {
    return kniBridge2071()
}

fun g_variant_builder_get_type(): GType {
    return kniBridge2072()
}

fun g_variant_dict_get_type(): GType {
    return kniBridge2073()
}

fun g_key_file_get_type(): GType {
    return kniBridge2074()
}

fun g_main_loop_get_type(): GType {
    return kniBridge2075()
}

fun g_main_context_get_type(): GType {
    return kniBridge2076()
}

fun g_source_get_type(): GType {
    return kniBridge2077()
}

fun g_pollfd_get_type(): GType {
    return kniBridge2078()
}

fun g_thread_get_type(): GType {
    return kniBridge2079()
}

fun g_checksum_get_type(): GType {
    return kniBridge2080()
}

fun g_markup_parse_context_get_type(): GType {
    return kniBridge2081()
}

fun g_mapped_file_get_type(): GType {
    return kniBridge2082()
}

fun g_option_group_get_type(): GType {
    return kniBridge2083()
}

fun g_variant_get_gtype(): GType {
    return kniBridge2084()
}

fun g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge2085(boxed_type, src_boxed.rawValue))
}

fun g_boxed_free(boxed_type: GType, boxed: gpointer?): Unit {
    return kniBridge2086(boxed_type, boxed.rawValue)
}

fun g_value_set_boxed(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge2087(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_set_static_boxed(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge2088(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_take_boxed(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge2089(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_set_boxed_take_ownership(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge2090(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_get_boxed(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2091(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_boxed(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2092(value?.getPointer(memScope).rawValue))
    }
}

fun g_boxed_type_register_static(@CCall.CString name: String?, boxed_copy: GBoxedCopyFunc?, boxed_free: GBoxedFreeFunc?): GType {
    memScoped {
        return kniBridge2093(name?.cstr?.getPointer(memScope).rawValue, boxed_copy.rawValue, boxed_free.rawValue)
    }
}

fun g_closure_get_type(): GType {
    return kniBridge2094()
}

fun g_value_get_type(): GType {
    return kniBridge2095()
}

fun g_initially_unowned_get_type(): GType {
    return kniBridge2096()
}

fun g_object_class_install_property(oclass: CValuesRef<GObjectClass>?, property_id: guint, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge2097(oclass?.getPointer(memScope).rawValue, property_id, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_object_class_find_property(oclass: CValuesRef<GObjectClass>?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2098(oclass?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_class_list_properties(oclass: CValuesRef<GObjectClass>?, n_properties: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge2099(oclass?.getPointer(memScope).rawValue, n_properties?.getPointer(memScope).rawValue))
    }
}

fun g_object_class_override_property(oclass: CValuesRef<GObjectClass>?, property_id: guint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge2100(oclass?.getPointer(memScope).rawValue, property_id, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_object_class_install_properties(oclass: CValuesRef<GObjectClass>?, n_pspecs: guint, pspecs: CValuesRef<CPointerVar<GParamSpec>>?): Unit {
    memScoped {
        return kniBridge2101(oclass?.getPointer(memScope).rawValue, n_pspecs, pspecs?.getPointer(memScope).rawValue)
    }
}

fun g_object_interface_install_property(g_iface: gpointer?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge2102(g_iface.rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_object_interface_find_property(g_iface: gpointer?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2103(g_iface.rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_interface_list_properties(g_iface: gpointer?, n_properties_p: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge2104(g_iface.rawValue, n_properties_p?.getPointer(memScope).rawValue))
    }
}

fun g_object_get_type(): GType {
    return kniBridge2105()
}

@CCall("knifunptr_glibresources46")
external fun g_object_new(object_type: GType, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): gpointer?

fun g_object_new_with_properties(object_type: GType, n_properties: guint, names: CValuesRef<CPointerVar<ByteVar>>?, values: CValuesRef<GValue>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2106(object_type, n_properties, names?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue))
    }
}

fun g_object_newv(object_type: GType, n_parameters: guint, parameters: CValuesRef<GParameter>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2107(object_type, n_parameters, parameters?.getPointer(memScope).rawValue))
    }
}

fun g_object_new_valist(object_type: GType, @CCall.CString first_property_name: String?, var_args: va_list?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2108(object_type, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue))
    }
}

@CCall("knifunptr_glibresources47")
external fun g_object_set(`object`: gpointer?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources48")
external fun g_object_get(`object`: gpointer?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources49")
external fun g_object_connect(`object`: gpointer?, @CCall.CString signal_spec: String?, vararg variadicArguments: Any?): gpointer?

@CCall("knifunptr_glibresources50")
external fun g_object_disconnect(`object`: gpointer?, @CCall.CString signal_spec: String?, vararg variadicArguments: Any?): Unit

fun g_object_setv(`object`: CValuesRef<GObject>?, n_properties: guint, names: CValuesRef<CPointerVar<gcharVar>>?, values: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2109(`object`?.getPointer(memScope).rawValue, n_properties, names?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue)
    }
}

fun g_object_set_valist(`object`: CValuesRef<GObject>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge2110(`object`?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_object_getv(`object`: CValuesRef<GObject>?, n_properties: guint, names: CValuesRef<CPointerVar<gcharVar>>?, values: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2111(`object`?.getPointer(memScope).rawValue, n_properties, names?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue)
    }
}

fun g_object_get_valist(`object`: CValuesRef<GObject>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge2112(`object`?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_object_set_property(`object`: CValuesRef<GObject>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2113(`object`?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_object_get_property(`object`: CValuesRef<GObject>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2114(`object`?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_object_freeze_notify(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge2115(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_object_notify(`object`: CValuesRef<GObject>?, @CCall.CString property_name: String?): Unit {
    memScoped {
        return kniBridge2116(`object`?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_object_notify_by_pspec(`object`: CValuesRef<GObject>?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge2117(`object`?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_object_thaw_notify(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge2118(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_object_is_floating(`object`: gpointer?): gboolean {
    return kniBridge2119(`object`.rawValue)
}

fun g_object_ref_sink(`object`: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge2120(`object`.rawValue))
}

fun g_object_ref(`object`: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge2121(`object`.rawValue))
}

fun g_object_unref(`object`: gpointer?): Unit {
    return kniBridge2122(`object`.rawValue)
}

fun g_object_weak_ref(`object`: CValuesRef<GObject>?, notify: GWeakNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge2123(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_weak_unref(`object`: CValuesRef<GObject>?, notify: GWeakNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge2124(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_add_weak_pointer(`object`: CValuesRef<GObject>?, weak_pointer_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge2125(`object`?.getPointer(memScope).rawValue, weak_pointer_location?.getPointer(memScope).rawValue)
    }
}

fun g_object_remove_weak_pointer(`object`: CValuesRef<GObject>?, weak_pointer_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge2126(`object`?.getPointer(memScope).rawValue, weak_pointer_location?.getPointer(memScope).rawValue)
    }
}

fun g_object_add_toggle_ref(`object`: CValuesRef<GObject>?, notify: GToggleNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge2127(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_remove_toggle_ref(`object`: CValuesRef<GObject>?, notify: GToggleNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge2128(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_get_qdata(`object`: CValuesRef<GObject>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2129(`object`?.getPointer(memScope).rawValue, quark))
    }
}

fun g_object_set_qdata(`object`: CValuesRef<GObject>?, quark: GQuark, data: gpointer?): Unit {
    memScoped {
        return kniBridge2130(`object`?.getPointer(memScope).rawValue, quark, data.rawValue)
    }
}

fun g_object_set_qdata_full(`object`: CValuesRef<GObject>?, quark: GQuark, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge2131(`object`?.getPointer(memScope).rawValue, quark, data.rawValue, destroy.rawValue)
    }
}

fun g_object_steal_qdata(`object`: CValuesRef<GObject>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2132(`object`?.getPointer(memScope).rawValue, quark))
    }
}

fun g_object_dup_qdata(`object`: CValuesRef<GObject>?, quark: GQuark, dup_func: GDuplicateFunc?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2133(`object`?.getPointer(memScope).rawValue, quark, dup_func.rawValue, user_data.rawValue))
    }
}

fun g_object_replace_qdata(`object`: CValuesRef<GObject>?, quark: GQuark, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, old_destroy: CValuesRef<GDestroyNotifyVar>?): gboolean {
    memScoped {
        return kniBridge2134(`object`?.getPointer(memScope).rawValue, quark, oldval.rawValue, newval.rawValue, destroy.rawValue, old_destroy?.getPointer(memScope).rawValue)
    }
}

fun g_object_get_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2135(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_set_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, data: gpointer?): Unit {
    memScoped {
        return kniBridge2136(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_object_set_data_full(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge2137(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, data.rawValue, destroy.rawValue)
    }
}

fun g_object_steal_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2138(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_dup_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, dup_func: GDuplicateFunc?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2139(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, dup_func.rawValue, user_data.rawValue))
    }
}

fun g_object_replace_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, old_destroy: CValuesRef<GDestroyNotifyVar>?): gboolean {
    memScoped {
        return kniBridge2140(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, oldval.rawValue, newval.rawValue, destroy.rawValue, old_destroy?.getPointer(memScope).rawValue)
    }
}

fun g_object_watch_closure(`object`: CValuesRef<GObject>?, closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge2141(`object`?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_new_object(callback_func: GCallback?, `object`: CValuesRef<GObject>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge2142(callback_func.rawValue, `object`?.getPointer(memScope).rawValue))
    }
}

fun g_cclosure_new_object_swap(callback_func: GCallback?, `object`: CValuesRef<GObject>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge2143(callback_func.rawValue, `object`?.getPointer(memScope).rawValue))
    }
}

fun g_closure_new_object(sizeof_closure: guint, `object`: CValuesRef<GObject>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge2144(sizeof_closure, `object`?.getPointer(memScope).rawValue))
    }
}

fun g_value_set_object(value: CValuesRef<GValue>?, v_object: gpointer?): Unit {
    memScoped {
        return kniBridge2145(value?.getPointer(memScope).rawValue, v_object.rawValue)
    }
}

fun g_value_get_object(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2146(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_object(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2147(value?.getPointer(memScope).rawValue))
    }
}

fun g_signal_connect_object(instance: gpointer?, @CCall.CString detailed_signal: String?, c_handler: GCallback?, gobject: gpointer?, connect_flags: GConnectFlags): gulong {
    memScoped {
        return kniBridge2148(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue, c_handler.rawValue, gobject.rawValue, connect_flags)
    }
}

fun g_object_force_floating(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge2149(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_object_run_dispose(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge2150(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_value_take_object(value: CValuesRef<GValue>?, v_object: gpointer?): Unit {
    memScoped {
        return kniBridge2151(value?.getPointer(memScope).rawValue, v_object.rawValue)
    }
}

fun g_value_set_object_take_ownership(value: CValuesRef<GValue>?, v_object: gpointer?): Unit {
    memScoped {
        return kniBridge2152(value?.getPointer(memScope).rawValue, v_object.rawValue)
    }
}

fun g_object_compat_control(what: gsize, data: gpointer?): gsize {
    return kniBridge2153(what, data.rawValue)
}

fun g_clear_object(object_ptr: CValuesRef<CPointerVar<GObject>>?): Unit {
    memScoped {
        return kniBridge2154(object_ptr?.getPointer(memScope).rawValue)
    }
}

fun g_set_object(object_ptr: CValuesRef<CPointerVar<GObject>>?, new_object: CValuesRef<GObject>?): gboolean {
    memScoped {
        return kniBridge2155(object_ptr?.getPointer(memScope).rawValue, new_object?.getPointer(memScope).rawValue)
    }
}

fun g_assert_finalize_object(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge2156(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_clear_weak_pointer(weak_pointer_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge2157(weak_pointer_location?.getPointer(memScope).rawValue)
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_set_weak_pointer(weak_pointer_location: CValuesRef<gpointerVar>?, new_object: CValuesRef<GObject>?): gboolean = throw UnsupportedOperationException()

fun g_weak_ref_init(weak_ref: CValuesRef<GWeakRef>?, `object`: gpointer?): Unit {
    memScoped {
        return kniBridge2159(weak_ref?.getPointer(memScope).rawValue, `object`.rawValue)
    }
}

fun g_weak_ref_clear(weak_ref: CValuesRef<GWeakRef>?): Unit {
    memScoped {
        return kniBridge2160(weak_ref?.getPointer(memScope).rawValue)
    }
}

fun g_weak_ref_get(weak_ref: CValuesRef<GWeakRef>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2161(weak_ref?.getPointer(memScope).rawValue))
    }
}

fun g_weak_ref_set(weak_ref: CValuesRef<GWeakRef>?, `object`: gpointer?): Unit {
    memScoped {
        return kniBridge2162(weak_ref?.getPointer(memScope).rawValue, `object`.rawValue)
    }
}

fun g_binding_flags_get_type(): GType {
    return kniBridge2163()
}

fun g_binding_get_type(): GType {
    return kniBridge2164()
}

fun g_binding_get_flags(binding: CValuesRef<GBinding>?): GBindingFlags {
    memScoped {
        return kniBridge2165(binding?.getPointer(memScope).rawValue)
    }
}

fun g_binding_get_source(binding: CValuesRef<GBinding>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2166(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_get_target(binding: CValuesRef<GBinding>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2167(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_get_source_property(binding: CValuesRef<GBinding>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2168(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_get_target_property(binding: CValuesRef<GBinding>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2169(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_unbind(binding: CValuesRef<GBinding>?): Unit {
    memScoped {
        return kniBridge2170(binding?.getPointer(memScope).rawValue)
    }
}

fun g_object_bind_property(source: gpointer?, @CCall.CString source_property: String?, target: gpointer?, @CCall.CString target_property: String?, flags: GBindingFlags): CPointer<GBinding>? {
    memScoped {
        return interpretCPointer<GBinding>(kniBridge2171(source.rawValue, source_property?.cstr?.getPointer(memScope).rawValue, target.rawValue, target_property?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_object_bind_property_full(source: gpointer?, @CCall.CString source_property: String?, target: gpointer?, @CCall.CString target_property: String?, flags: GBindingFlags, transform_to: GBindingTransformFunc?, transform_from: GBindingTransformFunc?, user_data: gpointer?, notify: GDestroyNotify?): CPointer<GBinding>? {
    memScoped {
        return interpretCPointer<GBinding>(kniBridge2172(source.rawValue, source_property?.cstr?.getPointer(memScope).rawValue, target.rawValue, target_property?.cstr?.getPointer(memScope).rawValue, flags, transform_to.rawValue, transform_from.rawValue, user_data.rawValue, notify.rawValue))
    }
}

fun g_object_bind_property_with_closures(source: gpointer?, @CCall.CString source_property: String?, target: gpointer?, @CCall.CString target_property: String?, flags: GBindingFlags, transform_to: CValuesRef<GClosure>?, transform_from: CValuesRef<GClosure>?): CPointer<GBinding>? {
    memScoped {
        return interpretCPointer<GBinding>(kniBridge2173(source.rawValue, source_property?.cstr?.getPointer(memScope).rawValue, target.rawValue, target_property?.cstr?.getPointer(memScope).rawValue, flags, transform_to?.getPointer(memScope).rawValue, transform_from?.getPointer(memScope).rawValue))
    }
}

fun g_enum_get_value(enum_class: CValuesRef<GEnumClass>?, value: gint): CPointer<GEnumValue>? {
    memScoped {
        return interpretCPointer<GEnumValue>(kniBridge2174(enum_class?.getPointer(memScope).rawValue, value))
    }
}

fun g_enum_get_value_by_name(enum_class: CValuesRef<GEnumClass>?, @CCall.CString name: String?): CPointer<GEnumValue>? {
    memScoped {
        return interpretCPointer<GEnumValue>(kniBridge2175(enum_class?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_enum_get_value_by_nick(enum_class: CValuesRef<GEnumClass>?, @CCall.CString nick: String?): CPointer<GEnumValue>? {
    memScoped {
        return interpretCPointer<GEnumValue>(kniBridge2176(enum_class?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_flags_get_first_value(flags_class: CValuesRef<GFlagsClass>?, value: guint): CPointer<GFlagsValue>? {
    memScoped {
        return interpretCPointer<GFlagsValue>(kniBridge2177(flags_class?.getPointer(memScope).rawValue, value))
    }
}

fun g_flags_get_value_by_name(flags_class: CValuesRef<GFlagsClass>?, @CCall.CString name: String?): CPointer<GFlagsValue>? {
    memScoped {
        return interpretCPointer<GFlagsValue>(kniBridge2178(flags_class?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_flags_get_value_by_nick(flags_class: CValuesRef<GFlagsClass>?, @CCall.CString nick: String?): CPointer<GFlagsValue>? {
    memScoped {
        return interpretCPointer<GFlagsValue>(kniBridge2179(flags_class?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_enum_to_string(g_enum_type: GType, value: gint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge2180(g_enum_type, value))
}

fun g_flags_to_string(flags_type: GType, value: guint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge2181(flags_type, value))
}

fun g_value_set_enum(value: CValuesRef<GValue>?, v_enum: gint): Unit {
    memScoped {
        return kniBridge2182(value?.getPointer(memScope).rawValue, v_enum)
    }
}

fun g_value_get_enum(value: CValuesRef<GValue>?): gint {
    memScoped {
        return kniBridge2183(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_flags(value: CValuesRef<GValue>?, v_flags: guint): Unit {
    memScoped {
        return kniBridge2184(value?.getPointer(memScope).rawValue, v_flags)
    }
}

fun g_value_get_flags(value: CValuesRef<GValue>?): guint {
    memScoped {
        return kniBridge2185(value?.getPointer(memScope).rawValue)
    }
}

fun g_enum_register_static(@CCall.CString name: String?, const_static_values: CValuesRef<GEnumValue>?): GType {
    memScoped {
        return kniBridge2186(name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_flags_register_static(@CCall.CString name: String?, const_static_values: CValuesRef<GFlagsValue>?): GType {
    memScoped {
        return kniBridge2187(name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_enum_complete_type_info(g_enum_type: GType, info: CValuesRef<GTypeInfo>?, const_values: CValuesRef<GEnumValue>?): Unit {
    memScoped {
        return kniBridge2188(g_enum_type, info?.getPointer(memScope).rawValue, const_values?.getPointer(memScope).rawValue)
    }
}

fun g_flags_complete_type_info(g_flags_type: GType, info: CValuesRef<GTypeInfo>?, const_values: CValuesRef<GFlagsValue>?): Unit {
    memScoped {
        return kniBridge2189(g_flags_type, info?.getPointer(memScope).rawValue, const_values?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_char(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gint8, maximum: gint8, default_value: gint8, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2190(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_uchar(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: guint8, maximum: guint8, default_value: guint8, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2191(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_boolean(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, default_value: gboolean, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2192(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, default_value, flags))
    }
}

fun g_param_spec_int(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gint, maximum: gint, default_value: gint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2193(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_uint(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: guint, maximum: guint, default_value: guint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2194(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_long(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: glong, maximum: glong, default_value: glong, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2195(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_ulong(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gulong, maximum: gulong, default_value: gulong, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2196(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_int64(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gint64, maximum: gint64, default_value: gint64, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2197(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_uint64(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: guint64, maximum: guint64, default_value: guint64, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2198(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_unichar(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, default_value: gunichar, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2199(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, default_value, flags))
    }
}

fun g_param_spec_enum(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, enum_type: GType, default_value: gint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2200(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, enum_type, default_value, flags))
    }
}

fun g_param_spec_flags(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, flags_type: GType, default_value: guint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2201(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, flags_type, default_value, flags))
    }
}

fun g_param_spec_float(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gfloat, maximum: gfloat, default_value: gfloat, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2202(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_double(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gdouble, maximum: gdouble, default_value: gdouble, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2203(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_string(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, @CCall.CString default_value: String?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2204(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, default_value?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_param(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, param_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2205(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, param_type, flags))
    }
}

fun g_param_spec_boxed(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, boxed_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2206(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, boxed_type, flags))
    }
}

fun g_param_spec_pointer(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2207(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_value_array(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, element_spec: CValuesRef<GParamSpec>?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2208(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, element_spec?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_object(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, object_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2209(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, object_type, flags))
    }
}

fun g_param_spec_override(@CCall.CString name: String?, overridden: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2210(name?.cstr?.getPointer(memScope).rawValue, overridden?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_gtype(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, is_a_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2211(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, is_a_type, flags))
    }
}

fun g_param_spec_variant(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, type: CValuesRef<GVariantType>?, default_value: CValuesRef<GVariant>?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge2212(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, default_value?.getPointer(memScope).rawValue, flags))
    }
}

fun g_source_set_closure(source: CValuesRef<GSource>?, closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge2213(source?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue)
    }
}

fun g_source_set_dummy_callback(source: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge2214(source?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTypeModule(_ptr: CValuesRef<GTypeModule>?): Unit {
    memScoped {
        return kniBridge2215(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTypeModule(_ptr: CValuesRef<CPointerVar<GTypeModule>>?): Unit {
    memScoped {
        return kniBridge2216(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTypeModule(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2217(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTypeModule(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2218(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTypeModule(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2219(_q?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_get_type(): GType {
    return kniBridge2220()
}

fun g_type_module_use(module: CValuesRef<GTypeModule>?): gboolean {
    memScoped {
        return kniBridge2221(module?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_unuse(module: CValuesRef<GTypeModule>?): Unit {
    memScoped {
        return kniBridge2222(module?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_set_name(module: CValuesRef<GTypeModule>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge2223(module?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_register_type(module: CValuesRef<GTypeModule>?, parent_type: GType, @CCall.CString type_name: String?, type_info: CValuesRef<GTypeInfo>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge2224(module?.getPointer(memScope).rawValue, parent_type, type_name?.cstr?.getPointer(memScope).rawValue, type_info?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_module_add_interface(module: CValuesRef<GTypeModule>?, instance_type: GType, interface_type: GType, interface_info: CValuesRef<GInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge2225(module?.getPointer(memScope).rawValue, instance_type, interface_type, interface_info?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_register_enum(module: CValuesRef<GTypeModule>?, @CCall.CString name: String?, const_static_values: CValuesRef<GEnumValue>?): GType {
    memScoped {
        return kniBridge2226(module?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_register_flags(module: CValuesRef<GTypeModule>?, @CCall.CString name: String?, const_static_values: CValuesRef<GFlagsValue>?): GType {
    memScoped {
        return kniBridge2227(module?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_get_type(): GType {
    return kniBridge2228()
}

fun g_type_plugin_use(plugin: CValuesRef<GTypePlugin>?): Unit {
    memScoped {
        return kniBridge2229(plugin?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_unuse(plugin: CValuesRef<GTypePlugin>?): Unit {
    memScoped {
        return kniBridge2230(plugin?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_complete_type_info(plugin: CValuesRef<GTypePlugin>?, g_type: GType, info: CValuesRef<GTypeInfo>?, value_table: CValuesRef<GTypeValueTable>?): Unit {
    memScoped {
        return kniBridge2231(plugin?.getPointer(memScope).rawValue, g_type, info?.getPointer(memScope).rawValue, value_table?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_complete_interface_info(plugin: CValuesRef<GTypePlugin>?, instance_type: GType, interface_type: GType, info: CValuesRef<GInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge2232(plugin?.getPointer(memScope).rawValue, instance_type, interface_type, info?.getPointer(memScope).rawValue)
    }
}

fun g_value_array_get_type(): GType {
    return kniBridge2233()
}

fun g_value_array_get_nth(value_array: CValuesRef<GValueArray>?, index_: guint): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge2234(value_array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_value_array_new(n_prealloced: guint): CPointer<GValueArray>? {
    return interpretCPointer<GValueArray>(kniBridge2235(n_prealloced))
}

fun g_value_array_free(value_array: CValuesRef<GValueArray>?): Unit {
    memScoped {
        return kniBridge2236(value_array?.getPointer(memScope).rawValue)
    }
}

fun g_value_array_copy(value_array: CValuesRef<GValueArray>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2237(value_array?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_prepend(value_array: CValuesRef<GValueArray>?, value: CValuesRef<GValue>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2238(value_array?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_append(value_array: CValuesRef<GValueArray>?, value: CValuesRef<GValue>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2239(value_array?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_insert(value_array: CValuesRef<GValueArray>?, index_: guint, value: CValuesRef<GValue>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2240(value_array?.getPointer(memScope).rawValue, index_, value?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_remove(value_array: CValuesRef<GValueArray>?, index_: guint): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2241(value_array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_value_array_sort(value_array: CValuesRef<GValueArray>?, compare_func: GCompareFunc?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2242(value_array?.getPointer(memScope).rawValue, compare_func.rawValue))
    }
}

fun g_value_array_sort_with_data(value_array: CValuesRef<GValueArray>?, compare_func: GCompareDataFunc?, user_data: gpointer?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge2243(value_array?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue))
    }
}

fun g_value_set_char(value: CValuesRef<GValue>?, v_char: gchar): Unit {
    memScoped {
        return kniBridge2244(value?.getPointer(memScope).rawValue, v_char)
    }
}

fun g_value_get_char(value: CValuesRef<GValue>?): gchar {
    memScoped {
        return kniBridge2245(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_schar(value: CValuesRef<GValue>?, v_char: gint8): Unit {
    memScoped {
        return kniBridge2246(value?.getPointer(memScope).rawValue, v_char)
    }
}

fun g_value_get_schar(value: CValuesRef<GValue>?): gint8 {
    memScoped {
        return kniBridge2247(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_uchar(value: CValuesRef<GValue>?, v_uchar: guchar): Unit {
    memScoped {
        return kniBridge2248(value?.getPointer(memScope).rawValue, v_uchar)
    }
}

fun g_value_get_uchar(value: CValuesRef<GValue>?): guchar {
    memScoped {
        return kniBridge2249(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_boolean(value: CValuesRef<GValue>?, v_boolean: gboolean): Unit {
    memScoped {
        return kniBridge2250(value?.getPointer(memScope).rawValue, v_boolean)
    }
}

fun g_value_get_boolean(value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge2251(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_int(value: CValuesRef<GValue>?, v_int: gint): Unit {
    memScoped {
        return kniBridge2252(value?.getPointer(memScope).rawValue, v_int)
    }
}

fun g_value_get_int(value: CValuesRef<GValue>?): gint {
    memScoped {
        return kniBridge2253(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_uint(value: CValuesRef<GValue>?, v_uint: guint): Unit {
    memScoped {
        return kniBridge2254(value?.getPointer(memScope).rawValue, v_uint)
    }
}

fun g_value_get_uint(value: CValuesRef<GValue>?): guint {
    memScoped {
        return kniBridge2255(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_long(value: CValuesRef<GValue>?, v_long: glong): Unit {
    memScoped {
        return kniBridge2256(value?.getPointer(memScope).rawValue, v_long)
    }
}

fun g_value_get_long(value: CValuesRef<GValue>?): glong {
    memScoped {
        return kniBridge2257(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_ulong(value: CValuesRef<GValue>?, v_ulong: gulong): Unit {
    memScoped {
        return kniBridge2258(value?.getPointer(memScope).rawValue, v_ulong)
    }
}

fun g_value_get_ulong(value: CValuesRef<GValue>?): gulong {
    memScoped {
        return kniBridge2259(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_int64(value: CValuesRef<GValue>?, v_int64: gint64): Unit {
    memScoped {
        return kniBridge2260(value?.getPointer(memScope).rawValue, v_int64)
    }
}

fun g_value_get_int64(value: CValuesRef<GValue>?): gint64 {
    memScoped {
        return kniBridge2261(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_uint64(value: CValuesRef<GValue>?, v_uint64: guint64): Unit {
    memScoped {
        return kniBridge2262(value?.getPointer(memScope).rawValue, v_uint64)
    }
}

fun g_value_get_uint64(value: CValuesRef<GValue>?): guint64 {
    memScoped {
        return kniBridge2263(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_float(value: CValuesRef<GValue>?, v_float: gfloat): Unit {
    memScoped {
        return kniBridge2264(value?.getPointer(memScope).rawValue, v_float)
    }
}

fun g_value_get_float(value: CValuesRef<GValue>?): gfloat {
    memScoped {
        return kniBridge2265(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_double(value: CValuesRef<GValue>?, v_double: gdouble): Unit {
    memScoped {
        return kniBridge2266(value?.getPointer(memScope).rawValue, v_double)
    }
}

fun g_value_get_double(value: CValuesRef<GValue>?): gdouble {
    memScoped {
        return kniBridge2267(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_string(value: CValuesRef<GValue>?, @CCall.CString v_string: String?): Unit {
    memScoped {
        return kniBridge2268(value?.getPointer(memScope).rawValue, v_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_static_string(value: CValuesRef<GValue>?, @CCall.CString v_string: String?): Unit {
    memScoped {
        return kniBridge2269(value?.getPointer(memScope).rawValue, v_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_value_get_string(value: CValuesRef<GValue>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2270(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_string(value: CValuesRef<GValue>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2271(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_set_pointer(value: CValuesRef<GValue>?, v_pointer: gpointer?): Unit {
    memScoped {
        return kniBridge2272(value?.getPointer(memScope).rawValue, v_pointer.rawValue)
    }
}

fun g_value_get_pointer(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2273(value?.getPointer(memScope).rawValue))
    }
}

fun g_gtype_get_type(): GType {
    return kniBridge2274()
}

fun g_value_set_gtype(value: CValuesRef<GValue>?, v_gtype: GType): Unit {
    memScoped {
        return kniBridge2275(value?.getPointer(memScope).rawValue, v_gtype)
    }
}

fun g_value_get_gtype(value: CValuesRef<GValue>?): GType {
    memScoped {
        return kniBridge2276(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_variant(value: CValuesRef<GValue>?, variant: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2277(value?.getPointer(memScope).rawValue, variant?.getPointer(memScope).rawValue)
    }
}

fun g_value_take_variant(value: CValuesRef<GValue>?, variant: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2278(value?.getPointer(memScope).rawValue, variant?.getPointer(memScope).rawValue)
    }
}

fun g_value_get_variant(value: CValuesRef<GValue>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2279(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_variant(value: CValuesRef<GValue>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2280(value?.getPointer(memScope).rawValue))
    }
}

fun g_pointer_type_register_static(@CCall.CString name: String?): GType {
    memScoped {
        return kniBridge2281(name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_strdup_value_contents(value: CValuesRef<GValue>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2282(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_take_string(value: CValuesRef<GValue>?, v_string: CValuesRef<gcharVar>?): Unit {
    memScoped {
        return kniBridge2283(value?.getPointer(memScope).rawValue, v_string?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_string_take_ownership(value: CValuesRef<GValue>?, v_string: CValuesRef<gcharVar>?): Unit {
    memScoped {
        return kniBridge2284(value?.getPointer(memScope).rawValue, v_string?.getPointer(memScope).rawValue)
    }
}

fun g_unicode_type_get_type(): GType {
    return kniBridge2285()
}

fun g_unicode_break_type_get_type(): GType {
    return kniBridge2286()
}

fun g_unicode_script_get_type(): GType {
    return kniBridge2287()
}

fun g_normalize_mode_get_type(): GType {
    return kniBridge2288()
}

fun glib_autoptr_clear_GClosure(_ptr: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge2289(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GClosure(_ptr: CValuesRef<CPointerVar<GClosure>>?): Unit {
    memScoped {
        return kniBridge2290(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GClosure(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2291(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GClosure(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2292(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GClosure(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2293(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GEnumClass(_ptr: CValuesRef<GEnumClass>?): Unit {
    memScoped {
        return kniBridge2294(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GEnumClass(_ptr: CValuesRef<CPointerVar<GEnumClass>>?): Unit {
    memScoped {
        return kniBridge2295(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GEnumClass(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2296(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GEnumClass(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2297(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GEnumClass(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2298(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFlagsClass(_ptr: CValuesRef<GFlagsClass>?): Unit {
    memScoped {
        return kniBridge2299(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFlagsClass(_ptr: CValuesRef<CPointerVar<GFlagsClass>>?): Unit {
    memScoped {
        return kniBridge2300(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFlagsClass(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2301(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFlagsClass(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2302(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFlagsClass(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2303(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GObject(_ptr: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge2304(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GObject(_ptr: CValuesRef<CPointerVar<GObject>>?): Unit {
    memScoped {
        return kniBridge2305(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GObject(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2306(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GObject(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2307(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GObject(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2308(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInitiallyUnowned(_ptr: CValuesRef<GInitiallyUnowned>?): Unit {
    memScoped {
        return kniBridge2309(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInitiallyUnowned(_ptr: CValuesRef<CPointerVar<GInitiallyUnowned>>?): Unit {
    memScoped {
        return kniBridge2310(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInitiallyUnowned(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2311(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInitiallyUnowned(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2312(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInitiallyUnowned(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2313(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GParamSpec(_ptr: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge2314(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GParamSpec(_ptr: CValuesRef<CPointerVar<GParamSpec>>?): Unit {
    memScoped {
        return kniBridge2315(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GParamSpec(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2316(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GParamSpec(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2317(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GParamSpec(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2318(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTypeClass(_ptr: CValuesRef<GTypeClass>?): Unit {
    memScoped {
        return kniBridge2319(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTypeClass(_ptr: CValuesRef<CPointerVar<GTypeClass>>?): Unit {
    memScoped {
        return kniBridge2320(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTypeClass(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2321(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTypeClass(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2322(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTypeClass(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2323(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GValue(_ptr: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2324(_ptr?.getPointer(memScope).rawValue)
    }
}

fun g_action_get_type(): GType {
    return kniBridge2325()
}

fun g_action_get_name(action: CValuesRef<GAction>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2326(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_parameter_type(action: CValuesRef<GAction>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge2327(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_state_type(action: CValuesRef<GAction>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge2328(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_state_hint(action: CValuesRef<GAction>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2329(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_enabled(action: CValuesRef<GAction>?): gboolean {
    memScoped {
        return kniBridge2330(action?.getPointer(memScope).rawValue)
    }
}

fun g_action_get_state(action: CValuesRef<GAction>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2331(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_change_state(action: CValuesRef<GAction>?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2332(action?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_action_activate(action: CValuesRef<GAction>?, parameter: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2333(action?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue)
    }
}

fun g_action_name_is_valid(@CCall.CString action_name: String?): gboolean {
    memScoped {
        return kniBridge2334(action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_parse_detailed_name(@CCall.CString detailed_name: String?, action_name: CValuesRef<CPointerVar<gcharVar>>?, target_value: CValuesRef<CPointerVar<GVariant>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2335(detailed_name?.cstr?.getPointer(memScope).rawValue, action_name?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_action_print_detailed_name(@CCall.CString action_name: String?, target_value: CValuesRef<GVariant>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2336(action_name?.cstr?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_type(): GType {
    return kniBridge2337()
}

fun g_action_group_has_action(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): gboolean {
    memScoped {
        return kniBridge2338(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_list_actions(action_group: CValuesRef<GActionGroup>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2339(action_group?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_parameter_type(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge2340(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_state_type(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge2341(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_state_hint(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2342(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_enabled(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): gboolean {
    memScoped {
        return kniBridge2343(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_get_action_state(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2344(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_change_action_state(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2345(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_activate_action(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, parameter: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2346(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_action_added(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge2347(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_action_removed(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge2348(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_action_enabled_changed(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge2349(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, enabled)
    }
}

fun g_action_group_action_state_changed(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, state: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2350(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_query_action(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, enabled: CValuesRef<gbooleanVar>?, parameter_type: CValuesRef<CPointerVar<GVariantType>>?, state_type: CValuesRef<CPointerVar<GVariantType>>?, state_hint: CValuesRef<CPointerVar<GVariant>>?, state: CValuesRef<CPointerVar<GVariant>>?): gboolean {
    memScoped {
        return kniBridge2351(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, enabled?.getPointer(memScope).rawValue, parameter_type?.getPointer(memScope).rawValue, state_type?.getPointer(memScope).rawValue, state_hint?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_export_action_group(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, action_group: CValuesRef<GActionGroup>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge2352(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, action_group?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unexport_action_group(connection: CValuesRef<GDBusConnection>?, export_id: guint): Unit {
    memScoped {
        return kniBridge2353(connection?.getPointer(memScope).rawValue, export_id)
    }
}

fun g_action_map_get_type(): GType {
    return kniBridge2354()
}

fun g_action_map_lookup_action(action_map: CValuesRef<GActionMap>?, @CCall.CString action_name: String?): CPointer<GAction>? {
    memScoped {
        return interpretCPointer<GAction>(kniBridge2355(action_map?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_map_add_action(action_map: CValuesRef<GActionMap>?, action: CValuesRef<GAction>?): Unit {
    memScoped {
        return kniBridge2356(action_map?.getPointer(memScope).rawValue, action?.getPointer(memScope).rawValue)
    }
}

fun g_action_map_remove_action(action_map: CValuesRef<GActionMap>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge2357(action_map?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_map_add_action_entries(action_map: CValuesRef<GActionMap>?, entries: CValuesRef<GActionEntry>?, n_entries: gint, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2358(action_map?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, n_entries, user_data.rawValue)
    }
}

fun g_app_info_get_type(): GType {
    return kniBridge2359()
}

fun g_app_info_create_from_commandline(@CCall.CString commandline: String?, @CCall.CString application_name: String?, flags: GAppInfoCreateFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge2360(commandline?.cstr?.getPointer(memScope).rawValue, application_name?.cstr?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_dup(appinfo: CValuesRef<GAppInfo>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge2361(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_equal(appinfo1: CValuesRef<GAppInfo>?, appinfo2: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2362(appinfo1?.getPointer(memScope).rawValue, appinfo2?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_id(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2363(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_name(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2364(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_display_name(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2365(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_description(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2366(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_executable(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2367(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_commandline(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2368(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_icon(appinfo: CValuesRef<GAppInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2369(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_launch(appinfo: CValuesRef<GAppInfo>?, files: CValuesRef<GList>?, context: CValuesRef<GAppLaunchContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2370(appinfo?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_supports_uris(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2371(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_supports_files(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2372(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_launch_uris(appinfo: CValuesRef<GAppInfo>?, uris: CValuesRef<GList>?, context: CValuesRef<GAppLaunchContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2373(appinfo?.getPointer(memScope).rawValue, uris?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_launch_uris_async(appinfo: CValuesRef<GAppInfo>?, uris: CValuesRef<GList>?, context: CValuesRef<GAppLaunchContext>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2374(appinfo?.getPointer(memScope).rawValue, uris?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_app_info_launch_uris_finish(appinfo: CValuesRef<GAppInfo>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2375(appinfo?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_should_show(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2376(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_set_as_default_for_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2377(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_set_as_default_for_extension(appinfo: CValuesRef<GAppInfo>?, @CCall.CString extension: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2378(appinfo?.getPointer(memScope).rawValue, extension?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_add_supports_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2379(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_can_remove_supports_type(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2380(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_remove_supports_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2381(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_supported_types(appinfo: CValuesRef<GAppInfo>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge2382(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_can_delete(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2383(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_delete(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge2384(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_set_as_last_used_for_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2385(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_all(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge2386())
}

fun g_app_info_get_all_for_type(@CCall.CString content_type: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2387(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_recommended_for_type(@CCall.CString content_type: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2388(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_fallback_for_type(@CCall.CString content_type: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2389(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_reset_type_associations(@CCall.CString content_type: String?): Unit {
    memScoped {
        return kniBridge2390(content_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_default_for_type(@CCall.CString content_type: String?, must_support_uris: gboolean): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge2391(content_type?.cstr?.getPointer(memScope).rawValue, must_support_uris))
    }
}

fun g_app_info_get_default_for_uri_scheme(@CCall.CString uri_scheme: String?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge2392(uri_scheme?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_launch_default_for_uri(@CCall.CString uri: String?, context: CValuesRef<GAppLaunchContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2393(uri?.cstr?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_launch_default_for_uri_async(@CCall.CString uri: String?, context: CValuesRef<GAppLaunchContext>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2394(uri?.cstr?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_app_info_launch_default_for_uri_finish(result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2395(result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_launch_context_get_type(): GType {
    return kniBridge2396()
}

fun g_app_launch_context_new(): CPointer<GAppLaunchContext>? {
    return interpretCPointer<GAppLaunchContext>(kniBridge2397())
}

fun g_app_launch_context_setenv(context: CValuesRef<GAppLaunchContext>?, @CCall.CString variable: String?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2398(context?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_launch_context_unsetenv(context: CValuesRef<GAppLaunchContext>?, @CCall.CString variable: String?): Unit {
    memScoped {
        return kniBridge2399(context?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_launch_context_get_environment(context: CValuesRef<GAppLaunchContext>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge2400(context?.getPointer(memScope).rawValue))
    }
}

fun g_app_launch_context_get_display(context: CValuesRef<GAppLaunchContext>?, info: CValuesRef<GAppInfo>?, files: CValuesRef<GList>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2401(context?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue))
    }
}

fun g_app_launch_context_get_startup_notify_id(context: CValuesRef<GAppLaunchContext>?, info: CValuesRef<GAppInfo>?, files: CValuesRef<GList>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2402(context?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue))
    }
}

fun g_app_launch_context_launch_failed(context: CValuesRef<GAppLaunchContext>?, @CCall.CString startup_notify_id: String?): Unit {
    memScoped {
        return kniBridge2403(context?.getPointer(memScope).rawValue, startup_notify_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_monitor_get_type(): GType {
    return kniBridge2404()
}

fun g_app_info_monitor_get(): CPointer<GAppInfoMonitor>? {
    return interpretCPointer<GAppInfoMonitor>(kniBridge2405())
}

fun g_application_get_type(): GType {
    return kniBridge2406()
}

fun g_application_id_is_valid(@CCall.CString application_id: String?): gboolean {
    memScoped {
        return kniBridge2407(application_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_new(@CCall.CString application_id: String?, flags: GApplicationFlags): CPointer<GApplication>? {
    memScoped {
        return interpretCPointer<GApplication>(kniBridge2408(application_id?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_application_get_application_id(application: CValuesRef<GApplication>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2409(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_set_application_id(application: CValuesRef<GApplication>?, @CCall.CString application_id: String?): Unit {
    memScoped {
        return kniBridge2410(application?.getPointer(memScope).rawValue, application_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_dbus_connection(application: CValuesRef<GApplication>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2411(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_get_dbus_object_path(application: CValuesRef<GApplication>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2412(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_get_inactivity_timeout(application: CValuesRef<GApplication>?): guint {
    memScoped {
        return kniBridge2413(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_inactivity_timeout(application: CValuesRef<GApplication>?, inactivity_timeout: guint): Unit {
    memScoped {
        return kniBridge2414(application?.getPointer(memScope).rawValue, inactivity_timeout)
    }
}

fun g_application_get_flags(application: CValuesRef<GApplication>?): GApplicationFlags {
    memScoped {
        return kniBridge2415(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_flags(application: CValuesRef<GApplication>?, flags: GApplicationFlags): Unit {
    memScoped {
        return kniBridge2416(application?.getPointer(memScope).rawValue, flags)
    }
}

fun g_application_get_resource_base_path(application: CValuesRef<GApplication>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2417(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_set_resource_base_path(application: CValuesRef<GApplication>?, @CCall.CString resource_path: String?): Unit {
    memScoped {
        return kniBridge2418(application?.getPointer(memScope).rawValue, resource_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_action_group(application: CValuesRef<GApplication>?, action_group: CValuesRef<GActionGroup>?): Unit {
    memScoped {
        return kniBridge2419(application?.getPointer(memScope).rawValue, action_group?.getPointer(memScope).rawValue)
    }
}

fun g_application_add_main_option_entries(application: CValuesRef<GApplication>?, entries: CValuesRef<GOptionEntry>?): Unit {
    memScoped {
        return kniBridge2420(application?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue)
    }
}

fun g_application_add_main_option(application: CValuesRef<GApplication>?, @CCall.CString long_name: String?, short_name: Byte, flags: GOptionFlags, arg: GOptionArg, @CCall.CString description: String?, @CCall.CString arg_description: String?): Unit {
    memScoped {
        return kniBridge2421(application?.getPointer(memScope).rawValue, long_name?.cstr?.getPointer(memScope).rawValue, short_name, flags, arg.value, description?.cstr?.getPointer(memScope).rawValue, arg_description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_add_option_group(application: CValuesRef<GApplication>?, group: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge2422(application?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_option_context_parameter_string(application: CValuesRef<GApplication>?, @CCall.CString parameter_string: String?): Unit {
    memScoped {
        return kniBridge2423(application?.getPointer(memScope).rawValue, parameter_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_option_context_summary(application: CValuesRef<GApplication>?, @CCall.CString summary: String?): Unit {
    memScoped {
        return kniBridge2424(application?.getPointer(memScope).rawValue, summary?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_option_context_description(application: CValuesRef<GApplication>?, @CCall.CString description: String?): Unit {
    memScoped {
        return kniBridge2425(application?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_is_registered(application: CValuesRef<GApplication>?): gboolean {
    memScoped {
        return kniBridge2426(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_is_remote(application: CValuesRef<GApplication>?): gboolean {
    memScoped {
        return kniBridge2427(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_register(application: CValuesRef<GApplication>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2428(application?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_application_hold(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2429(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_release(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2430(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_activate(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2431(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_open(application: CValuesRef<GApplication>?, files: CValuesRef<CPointerVar<GFile>>?, n_files: gint, @CCall.CString hint: String?): Unit {
    memScoped {
        return kniBridge2432(application?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue, n_files, hint?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_run(application: CValuesRef<GApplication>?, argc: Int, argv: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge2433(application?.getPointer(memScope).rawValue, argc, argv?.getPointer(memScope).rawValue)
    }
}

fun g_application_quit(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2434(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_default(): CPointer<GApplication>? {
    return interpretCPointer<GApplication>(kniBridge2435())
}

fun g_application_set_default(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2436(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_mark_busy(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2437(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_unmark_busy(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2438(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_is_busy(application: CValuesRef<GApplication>?): gboolean {
    memScoped {
        return kniBridge2439(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_send_notification(application: CValuesRef<GApplication>?, @CCall.CString id: String?, notification: CValuesRef<GNotification>?): Unit {
    memScoped {
        return kniBridge2440(application?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue, notification?.getPointer(memScope).rawValue)
    }
}

fun g_application_withdraw_notification(application: CValuesRef<GApplication>?, @CCall.CString id: String?): Unit {
    memScoped {
        return kniBridge2441(application?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_bind_busy_property(application: CValuesRef<GApplication>?, `object`: gpointer?, @CCall.CString property: String?): Unit {
    memScoped {
        return kniBridge2442(application?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_unbind_busy_property(application: CValuesRef<GApplication>?, `object`: gpointer?, @CCall.CString property: String?): Unit {
    memScoped {
        return kniBridge2443(application?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_command_line_get_type(): GType {
    return kniBridge2444()
}

fun g_application_command_line_get_arguments(cmdline: CValuesRef<GApplicationCommandLine>?, argc: CValuesRef<IntVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2445(cmdline?.getPointer(memScope).rawValue, argc?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_options_dict(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<GVariantDict>? {
    memScoped {
        return interpretCPointer<GVariantDict>(kniBridge2446(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_stdin(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2447(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_environ(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2448(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_getenv(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2449(cmdline?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_cwd(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2450(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_is_remote(cmdline: CValuesRef<GApplicationCommandLine>?): gboolean {
    memScoped {
        return kniBridge2451(cmdline?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources51")
external fun g_application_command_line_print(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_glibresources52")
external fun g_application_command_line_printerr(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_application_command_line_get_exit_status(cmdline: CValuesRef<GApplicationCommandLine>?): Int {
    memScoped {
        return kniBridge2452(cmdline?.getPointer(memScope).rawValue)
    }
}

fun g_application_command_line_set_exit_status(cmdline: CValuesRef<GApplicationCommandLine>?, exit_status: Int): Unit {
    memScoped {
        return kniBridge2453(cmdline?.getPointer(memScope).rawValue, exit_status)
    }
}

fun g_application_command_line_get_platform_data(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2454(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_create_file_for_arg(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString arg: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2455(cmdline?.getPointer(memScope).rawValue, arg?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_initable_get_type(): GType {
    return kniBridge2456()
}

fun g_initable_init(initable: CValuesRef<GInitable>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2457(initable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources53")
external fun g_initable_new(object_type: GType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): gpointer?

fun g_initable_newv(object_type: GType, n_parameters: guint, parameters: CValuesRef<GParameter>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2458(object_type, n_parameters, parameters?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_initable_new_valist(object_type: GType, @CCall.CString first_property_name: String?, var_args: va_list?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2459(object_type, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_async_initable_get_type(): GType {
    return kniBridge2460()
}

fun g_async_initable_init_async(initable: CValuesRef<GAsyncInitable>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2461(initable?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_async_initable_init_finish(initable: CValuesRef<GAsyncInitable>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2462(initable?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources54")
external fun g_async_initable_new_async(object_type: GType, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

fun g_async_initable_newv_async(object_type: GType, n_parameters: guint, parameters: CValuesRef<GParameter>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2463(object_type, n_parameters, parameters?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_async_initable_new_valist_async(object_type: GType, @CCall.CString first_property_name: String?, var_args: va_list?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2464(object_type, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_async_initable_new_finish(initable: CValuesRef<GAsyncInitable>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2465(initable?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_async_result_get_type(): GType {
    return kniBridge2466()
}

fun g_async_result_get_user_data(res: CValuesRef<GAsyncResult>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2467(res?.getPointer(memScope).rawValue))
    }
}

fun g_async_result_get_source_object(res: CValuesRef<GAsyncResult>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2468(res?.getPointer(memScope).rawValue))
    }
}

fun g_async_result_legacy_propagate_error(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2469(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_async_result_is_tagged(res: CValuesRef<GAsyncResult>?, source_tag: gpointer?): gboolean {
    memScoped {
        return kniBridge2470(res?.getPointer(memScope).rawValue, source_tag.rawValue)
    }
}

fun g_input_stream_get_type(): GType {
    return kniBridge2471()
}

fun g_input_stream_read(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2472(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_all(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, bytes_read: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2473(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, bytes_read?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_bytes(stream: CValuesRef<GInputStream>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge2474(stream?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_input_stream_skip(stream: CValuesRef<GInputStream>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2475(stream?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_close(stream: CValuesRef<GInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2476(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_async(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2477(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_read_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2478(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_all_async(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2479(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_read_all_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, bytes_read: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2480(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_read?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_bytes_async(stream: CValuesRef<GInputStream>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2481(stream?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_read_bytes_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge2482(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_input_stream_skip_async(stream: CValuesRef<GInputStream>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2483(stream?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_skip_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2484(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_close_async(stream: CValuesRef<GInputStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2485(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_close_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2486(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_is_closed(stream: CValuesRef<GInputStream>?): gboolean {
    memScoped {
        return kniBridge2487(stream?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_has_pending(stream: CValuesRef<GInputStream>?): gboolean {
    memScoped {
        return kniBridge2488(stream?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_set_pending(stream: CValuesRef<GInputStream>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2489(stream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_clear_pending(stream: CValuesRef<GInputStream>?): Unit {
    memScoped {
        return kniBridge2490(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_input_stream_get_type(): GType {
    return kniBridge2491()
}

fun g_filter_input_stream_get_base_stream(stream: CValuesRef<GFilterInputStream>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2492(stream?.getPointer(memScope).rawValue))
    }
}

fun g_filter_input_stream_get_close_base_stream(stream: CValuesRef<GFilterInputStream>?): gboolean {
    memScoped {
        return kniBridge2493(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_input_stream_set_close_base_stream(stream: CValuesRef<GFilterInputStream>?, close_base: gboolean): Unit {
    memScoped {
        return kniBridge2494(stream?.getPointer(memScope).rawValue, close_base)
    }
}

fun g_buffered_input_stream_get_type(): GType {
    return kniBridge2495()
}

fun g_buffered_input_stream_new(base_stream: CValuesRef<GInputStream>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2496(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_buffered_input_stream_new_sized(base_stream: CValuesRef<GInputStream>?, size: gsize): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2497(base_stream?.getPointer(memScope).rawValue, size))
    }
}

fun g_buffered_input_stream_get_buffer_size(stream: CValuesRef<GBufferedInputStream>?): gsize {
    memScoped {
        return kniBridge2498(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_set_buffer_size(stream: CValuesRef<GBufferedInputStream>?, size: gsize): Unit {
    memScoped {
        return kniBridge2499(stream?.getPointer(memScope).rawValue, size)
    }
}

fun g_buffered_input_stream_get_available(stream: CValuesRef<GBufferedInputStream>?): gsize {
    memScoped {
        return kniBridge2500(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_peek(stream: CValuesRef<GBufferedInputStream>?, buffer: CValuesRef<*>?, offset: gsize, count: gsize): gsize {
    memScoped {
        return kniBridge2501(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, offset, count)
    }
}

fun g_buffered_input_stream_peek_buffer(stream: CValuesRef<GBufferedInputStream>?, count: CValuesRef<gsizeVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2502(stream?.getPointer(memScope).rawValue, count?.getPointer(memScope).rawValue))
    }
}

fun g_buffered_input_stream_fill(stream: CValuesRef<GBufferedInputStream>?, count: gssize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2503(stream?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_fill_async(stream: CValuesRef<GBufferedInputStream>?, count: gssize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2504(stream?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_buffered_input_stream_fill_finish(stream: CValuesRef<GBufferedInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2505(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_read_byte(stream: CValuesRef<GBufferedInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): Int {
    memScoped {
        return kniBridge2506(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_get_type(): GType {
    return kniBridge2507()
}

fun g_output_stream_write(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2508(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_all(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2509(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2510(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev_all(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2511(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources55")
external fun g_output_stream_printf(stream: CValuesRef<GOutputStream>?, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString format: String?, vararg variadicArguments: Any?): gboolean

fun g_output_stream_vprintf(stream: CValuesRef<GOutputStream>?, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString format: String?, args: va_list?): gboolean {
    memScoped {
        return kniBridge2512(stream?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_output_stream_write_bytes(stream: CValuesRef<GOutputStream>?, bytes: CValuesRef<GBytes>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2513(stream?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_splice(stream: CValuesRef<GOutputStream>?, source: CValuesRef<GInputStream>?, flags: GOutputStreamSpliceFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2514(stream?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_flush(stream: CValuesRef<GOutputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2515(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_close(stream: CValuesRef<GOutputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2516(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_async(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2517(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_write_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2518(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_all_async(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2519(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_write_all_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2520(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev_async(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2521(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_writev_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2522(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev_all_async(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2523(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_writev_all_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2524(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_bytes_async(stream: CValuesRef<GOutputStream>?, bytes: CValuesRef<GBytes>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2525(stream?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_write_bytes_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2526(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_splice_async(stream: CValuesRef<GOutputStream>?, source: CValuesRef<GInputStream>?, flags: GOutputStreamSpliceFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2527(stream?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_splice_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2528(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_flush_async(stream: CValuesRef<GOutputStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2529(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_flush_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2530(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_close_async(stream: CValuesRef<GOutputStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2531(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_close_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2532(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_is_closed(stream: CValuesRef<GOutputStream>?): gboolean {
    memScoped {
        return kniBridge2533(stream?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_is_closing(stream: CValuesRef<GOutputStream>?): gboolean {
    memScoped {
        return kniBridge2534(stream?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_has_pending(stream: CValuesRef<GOutputStream>?): gboolean {
    memScoped {
        return kniBridge2535(stream?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_set_pending(stream: CValuesRef<GOutputStream>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2536(stream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_clear_pending(stream: CValuesRef<GOutputStream>?): Unit {
    memScoped {
        return kniBridge2537(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_output_stream_get_type(): GType {
    return kniBridge2538()
}

fun g_filter_output_stream_get_base_stream(stream: CValuesRef<GFilterOutputStream>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge2539(stream?.getPointer(memScope).rawValue))
    }
}

fun g_filter_output_stream_get_close_base_stream(stream: CValuesRef<GFilterOutputStream>?): gboolean {
    memScoped {
        return kniBridge2540(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_output_stream_set_close_base_stream(stream: CValuesRef<GFilterOutputStream>?, close_base: gboolean): Unit {
    memScoped {
        return kniBridge2541(stream?.getPointer(memScope).rawValue, close_base)
    }
}

fun g_buffered_output_stream_get_type(): GType {
    return kniBridge2542()
}

fun g_buffered_output_stream_new(base_stream: CValuesRef<GOutputStream>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge2543(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_buffered_output_stream_new_sized(base_stream: CValuesRef<GOutputStream>?, size: gsize): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge2544(base_stream?.getPointer(memScope).rawValue, size))
    }
}

fun g_buffered_output_stream_get_buffer_size(stream: CValuesRef<GBufferedOutputStream>?): gsize {
    memScoped {
        return kniBridge2545(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_output_stream_set_buffer_size(stream: CValuesRef<GBufferedOutputStream>?, size: gsize): Unit {
    memScoped {
        return kniBridge2546(stream?.getPointer(memScope).rawValue, size)
    }
}

fun g_buffered_output_stream_get_auto_grow(stream: CValuesRef<GBufferedOutputStream>?): gboolean {
    memScoped {
        return kniBridge2547(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_output_stream_set_auto_grow(stream: CValuesRef<GBufferedOutputStream>?, auto_grow: gboolean): Unit {
    memScoped {
        return kniBridge2548(stream?.getPointer(memScope).rawValue, auto_grow)
    }
}

fun g_bytes_icon_get_type(): GType {
    return kniBridge2549()
}

fun g_bytes_icon_new(bytes: CValuesRef<GBytes>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2550(bytes?.getPointer(memScope).rawValue))
    }
}

fun g_bytes_icon_get_bytes(icon: CValuesRef<GBytesIcon>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge2551(icon?.getPointer(memScope).rawValue))
    }
}

fun g_cancellable_get_type(): GType {
    return kniBridge2552()
}

fun g_cancellable_new(): CPointer<GCancellable>? {
    return interpretCPointer<GCancellable>(kniBridge2553())
}

fun g_cancellable_is_cancelled(cancellable: CValuesRef<GCancellable>?): gboolean {
    memScoped {
        return kniBridge2554(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_set_error_if_cancelled(cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2555(cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_get_fd(cancellable: CValuesRef<GCancellable>?): Int {
    memScoped {
        return kniBridge2556(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_make_pollfd(cancellable: CValuesRef<GCancellable>?, pollfd: CValuesRef<GPollFD>?): gboolean {
    memScoped {
        return kniBridge2557(cancellable?.getPointer(memScope).rawValue, pollfd?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_release_fd(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge2558(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_source_new(cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge2559(cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_cancellable_get_current(): CPointer<GCancellable>? {
    return interpretCPointer<GCancellable>(kniBridge2560())
}

fun g_cancellable_push_current(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge2561(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_pop_current(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge2562(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_reset(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge2563(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_connect(cancellable: CValuesRef<GCancellable>?, callback: GCallback?, data: gpointer?, data_destroy_func: GDestroyNotify?): gulong {
    memScoped {
        return kniBridge2564(cancellable?.getPointer(memScope).rawValue, callback.rawValue, data.rawValue, data_destroy_func.rawValue)
    }
}

fun g_cancellable_disconnect(cancellable: CValuesRef<GCancellable>?, handler_id: gulong): Unit {
    memScoped {
        return kniBridge2565(cancellable?.getPointer(memScope).rawValue, handler_id)
    }
}

fun g_cancellable_cancel(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge2566(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_converter_get_type(): GType {
    return kniBridge2567()
}

fun g_converter_convert(converter: CValuesRef<GConverter>?, inbuf: CValuesRef<*>?, inbuf_size: gsize, outbuf: CValuesRef<*>?, outbuf_size: gsize, flags: GConverterFlags, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GConverterResult {
    memScoped {
        return kniBridge2568(converter?.getPointer(memScope).rawValue, inbuf?.getPointer(memScope).rawValue, inbuf_size, outbuf?.getPointer(memScope).rawValue, outbuf_size, flags, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_converter_reset(converter: CValuesRef<GConverter>?): Unit {
    memScoped {
        return kniBridge2569(converter?.getPointer(memScope).rawValue)
    }
}

fun g_charset_converter_get_type(): GType {
    return kniBridge2570()
}

fun g_charset_converter_new(@CCall.CString to_charset: String?, @CCall.CString from_charset: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GCharsetConverter>? {
    memScoped {
        return interpretCPointer<GCharsetConverter>(kniBridge2571(to_charset?.cstr?.getPointer(memScope).rawValue, from_charset?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_charset_converter_set_use_fallback(converter: CValuesRef<GCharsetConverter>?, use_fallback: gboolean): Unit {
    memScoped {
        return kniBridge2572(converter?.getPointer(memScope).rawValue, use_fallback)
    }
}

fun g_charset_converter_get_use_fallback(converter: CValuesRef<GCharsetConverter>?): gboolean {
    memScoped {
        return kniBridge2573(converter?.getPointer(memScope).rawValue)
    }
}

fun g_charset_converter_get_num_fallbacks(converter: CValuesRef<GCharsetConverter>?): guint {
    memScoped {
        return kniBridge2574(converter?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_equals(@CCall.CString type1: String?, @CCall.CString type2: String?): gboolean {
    memScoped {
        return kniBridge2575(type1?.cstr?.getPointer(memScope).rawValue, type2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_is_a(@CCall.CString type: String?, @CCall.CString supertype: String?): gboolean {
    memScoped {
        return kniBridge2576(type?.cstr?.getPointer(memScope).rawValue, supertype?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_is_mime_type(@CCall.CString type: String?, @CCall.CString mime_type: String?): gboolean {
    memScoped {
        return kniBridge2577(type?.cstr?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_is_unknown(@CCall.CString type: String?): gboolean {
    memScoped {
        return kniBridge2578(type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_get_description(@CCall.CString type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2579(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_mime_type(@CCall.CString type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2580(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_icon(@CCall.CString type: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2581(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_symbolic_icon(@CCall.CString type: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2582(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_generic_icon_name(@CCall.CString type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2583(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_can_be_executable(@CCall.CString type: String?): gboolean {
    memScoped {
        return kniBridge2584(type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_from_mime_type(@CCall.CString mime_type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2585(mime_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_guess(@CCall.CString filename: String?, data: CValuesRef<gucharVar>?, data_size: gsize, result_uncertain: CValuesRef<gbooleanVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2586(filename?.cstr?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, data_size, result_uncertain?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_guess_for_tree(root: CValuesRef<GFile>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2587(root?.getPointer(memScope).rawValue))
    }
}

fun g_content_types_get_registered(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge2588())
}

fun g_content_type_get_mime_dirs(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2589())
}

fun g_content_type_set_mime_dirs(dirs: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge2590(dirs?.getPointer(memScope).rawValue)
    }
}

fun g_converter_input_stream_get_type(): GType {
    return kniBridge2591()
}

fun g_converter_input_stream_new(base_stream: CValuesRef<GInputStream>?, converter: CValuesRef<GConverter>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2592(base_stream?.getPointer(memScope).rawValue, converter?.getPointer(memScope).rawValue))
    }
}

fun g_converter_input_stream_get_converter(converter_stream: CValuesRef<GConverterInputStream>?): CPointer<GConverter>? {
    memScoped {
        return interpretCPointer<GConverter>(kniBridge2593(converter_stream?.getPointer(memScope).rawValue))
    }
}

fun g_converter_output_stream_get_type(): GType {
    return kniBridge2594()
}

fun g_converter_output_stream_new(base_stream: CValuesRef<GOutputStream>?, converter: CValuesRef<GConverter>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge2595(base_stream?.getPointer(memScope).rawValue, converter?.getPointer(memScope).rawValue))
    }
}

fun g_converter_output_stream_get_converter(converter_stream: CValuesRef<GConverterOutputStream>?): CPointer<GConverter>? {
    memScoped {
        return interpretCPointer<GConverter>(kniBridge2596(converter_stream?.getPointer(memScope).rawValue))
    }
}

fun g_credentials_get_type(): GType {
    return kniBridge2597()
}

fun g_credentials_new(): CPointer<GCredentials>? {
    return interpretCPointer<GCredentials>(kniBridge2598())
}

fun g_credentials_to_string(credentials: CValuesRef<GCredentials>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2599(credentials?.getPointer(memScope).rawValue))
    }
}

fun g_credentials_get_native(credentials: CValuesRef<GCredentials>?, native_type: GCredentialsType): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2600(credentials?.getPointer(memScope).rawValue, native_type.value))
    }
}

fun g_credentials_set_native(credentials: CValuesRef<GCredentials>?, native_type: GCredentialsType, native: gpointer?): Unit {
    memScoped {
        return kniBridge2601(credentials?.getPointer(memScope).rawValue, native_type.value, native.rawValue)
    }
}

fun g_credentials_is_same_user(credentials: CValuesRef<GCredentials>?, other_credentials: CValuesRef<GCredentials>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2602(credentials?.getPointer(memScope).rawValue, other_credentials?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_credentials_get_unix_pid(credentials: CValuesRef<GCredentials>?, error: CValuesRef<CPointerVar<GError>>?): pid_t {
    memScoped {
        return kniBridge2603(credentials?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_credentials_get_unix_user(credentials: CValuesRef<GCredentials>?, error: CValuesRef<CPointerVar<GError>>?): uid_t {
    memScoped {
        return kniBridge2604(credentials?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_credentials_set_unix_user(credentials: CValuesRef<GCredentials>?, uid: uid_t, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2605(credentials?.getPointer(memScope).rawValue, uid, error?.getPointer(memScope).rawValue)
    }
}

fun g_datagram_based_get_type(): GType {
    return kniBridge2606()
}

fun g_datagram_based_receive_messages(datagram_based: CValuesRef<GDatagramBased>?, messages: CValuesRef<GInputMessage>?, num_messages: guint, flags: gint, timeout: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge2607(datagram_based?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, timeout, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_datagram_based_send_messages(datagram_based: CValuesRef<GDatagramBased>?, messages: CValuesRef<GOutputMessage>?, num_messages: guint, flags: gint, timeout: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge2608(datagram_based?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, timeout, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_datagram_based_create_source(datagram_based: CValuesRef<GDatagramBased>?, condition: GIOCondition, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge2609(datagram_based?.getPointer(memScope).rawValue, condition, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_datagram_based_condition_check(datagram_based: CValuesRef<GDatagramBased>?, condition: GIOCondition): GIOCondition {
    memScoped {
        return kniBridge2610(datagram_based?.getPointer(memScope).rawValue, condition)
    }
}

fun g_datagram_based_condition_wait(datagram_based: CValuesRef<GDatagramBased>?, condition: GIOCondition, timeout: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2611(datagram_based?.getPointer(memScope).rawValue, condition, timeout, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_get_type(): GType {
    return kniBridge2612()
}

fun g_data_input_stream_new(base_stream: CValuesRef<GInputStream>?): CPointer<GDataInputStream>? {
    memScoped {
        return interpretCPointer<GDataInputStream>(kniBridge2613(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_set_byte_order(stream: CValuesRef<GDataInputStream>?, order: GDataStreamByteOrder): Unit {
    memScoped {
        return kniBridge2614(stream?.getPointer(memScope).rawValue, order.value)
    }
}

fun g_data_input_stream_get_byte_order(stream: CValuesRef<GDataInputStream>?): GDataStreamByteOrder {
    memScoped {
        return GDataStreamByteOrder.byValue(kniBridge2615(stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_set_newline_type(stream: CValuesRef<GDataInputStream>?, type: GDataStreamNewlineType): Unit {
    memScoped {
        return kniBridge2616(stream?.getPointer(memScope).rawValue, type.value)
    }
}

fun g_data_input_stream_get_newline_type(stream: CValuesRef<GDataInputStream>?): GDataStreamNewlineType {
    memScoped {
        return GDataStreamNewlineType.byValue(kniBridge2617(stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_byte(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guchar {
    memScoped {
        return kniBridge2618(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_int16(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint16 {
    memScoped {
        return kniBridge2619(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_uint16(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guint16 {
    memScoped {
        return kniBridge2620(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_int32(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint32 {
    memScoped {
        return kniBridge2621(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_uint32(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guint32 {
    memScoped {
        return kniBridge2622(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_int64(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint64 {
    memScoped {
        return kniBridge2623(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_uint64(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guint64 {
    memScoped {
        return kniBridge2624(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_line(stream: CValuesRef<GDataInputStream>?, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2625(stream?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_line_utf8(stream: CValuesRef<GDataInputStream>?, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2626(stream?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_line_async(stream: CValuesRef<GDataInputStream>?, io_priority: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2627(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_data_input_stream_read_line_finish(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2628(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_line_finish_utf8(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2629(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_until(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2630(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_until_async(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, io_priority: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2631(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_data_input_stream_read_until_finish(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2632(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_upto(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, stop_chars_len: gssize, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2633(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, stop_chars_len, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_upto_async(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, stop_chars_len: gssize, io_priority: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2634(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, stop_chars_len, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_data_input_stream_read_upto_finish(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2635(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_output_stream_get_type(): GType {
    return kniBridge2636()
}

fun g_data_output_stream_new(base_stream: CValuesRef<GOutputStream>?): CPointer<GDataOutputStream>? {
    memScoped {
        return interpretCPointer<GDataOutputStream>(kniBridge2637(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_output_stream_set_byte_order(stream: CValuesRef<GDataOutputStream>?, order: GDataStreamByteOrder): Unit {
    memScoped {
        return kniBridge2638(stream?.getPointer(memScope).rawValue, order.value)
    }
}

fun g_data_output_stream_get_byte_order(stream: CValuesRef<GDataOutputStream>?): GDataStreamByteOrder {
    memScoped {
        return GDataStreamByteOrder.byValue(kniBridge2639(stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_output_stream_put_byte(stream: CValuesRef<GDataOutputStream>?, data: guchar, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2640(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_int16(stream: CValuesRef<GDataOutputStream>?, data: gint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2641(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_uint16(stream: CValuesRef<GDataOutputStream>?, data: guint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2642(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_int32(stream: CValuesRef<GDataOutputStream>?, data: gint32, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2643(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_uint32(stream: CValuesRef<GDataOutputStream>?, data: guint32, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2644(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_int64(stream: CValuesRef<GDataOutputStream>?, data: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2645(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_uint64(stream: CValuesRef<GDataOutputStream>?, data: guint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2646(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_string(stream: CValuesRef<GDataOutputStream>?, @CCall.CString str: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2647(stream?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_address_escape_value(@CCall.CString string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2648(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_is_address(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge2649(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_supported_address(@CCall.CString string: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2650(string?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_address_get_stream(@CCall.CString address: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2651(address?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_address_get_stream_finish(res: CValuesRef<GAsyncResult>?, out_guid: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge2652(res?.getPointer(memScope).rawValue, out_guid?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_address_get_stream_sync(@CCall.CString address: String?, out_guid: CValuesRef<CPointerVar<gcharVar>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge2653(address?.cstr?.getPointer(memScope).rawValue, out_guid?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_address_get_for_bus_sync(bus_type: GBusType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2654(bus_type, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_auth_observer_get_type(): GType {
    return kniBridge2655()
}

fun g_dbus_auth_observer_new(): CPointer<GDBusAuthObserver>? {
    return interpretCPointer<GDBusAuthObserver>(kniBridge2656())
}

fun g_dbus_auth_observer_authorize_authenticated_peer(observer: CValuesRef<GDBusAuthObserver>?, stream: CValuesRef<GIOStream>?, credentials: CValuesRef<GCredentials>?): gboolean {
    memScoped {
        return kniBridge2657(observer?.getPointer(memScope).rawValue, stream?.getPointer(memScope).rawValue, credentials?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_auth_observer_allow_mechanism(observer: CValuesRef<GDBusAuthObserver>?, @CCall.CString mechanism: String?): gboolean {
    memScoped {
        return kniBridge2658(observer?.getPointer(memScope).rawValue, mechanism?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_type(): GType {
    return kniBridge2659()
}

fun g_bus_get(bus_type: GBusType, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2660(bus_type, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_bus_get_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2661(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bus_get_sync(bus_type: GBusType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2662(bus_type, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new(stream: CValuesRef<GIOStream>?, @CCall.CString guid: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2663(stream?.getPointer(memScope).rawValue, guid?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_new_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2664(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new_sync(stream: CValuesRef<GIOStream>?, @CCall.CString guid: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2665(stream?.getPointer(memScope).rawValue, guid?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new_for_address(@CCall.CString address: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2666(address?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_new_for_address_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2667(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new_for_address_sync(@CCall.CString address: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2668(address?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_start_message_processing(connection: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge2669(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_is_closed(connection: CValuesRef<GDBusConnection>?): gboolean {
    memScoped {
        return kniBridge2670(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_stream(connection: CValuesRef<GDBusConnection>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge2671(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_guid(connection: CValuesRef<GDBusConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2672(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_unique_name(connection: CValuesRef<GDBusConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2673(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_peer_credentials(connection: CValuesRef<GDBusConnection>?): CPointer<GCredentials>? {
    memScoped {
        return interpretCPointer<GCredentials>(kniBridge2674(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_last_serial(connection: CValuesRef<GDBusConnection>?): guint32 {
    memScoped {
        return kniBridge2675(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_exit_on_close(connection: CValuesRef<GDBusConnection>?): gboolean {
    memScoped {
        return kniBridge2676(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_set_exit_on_close(connection: CValuesRef<GDBusConnection>?, exit_on_close: gboolean): Unit {
    memScoped {
        return kniBridge2677(connection?.getPointer(memScope).rawValue, exit_on_close)
    }
}

fun g_dbus_connection_get_capabilities(connection: CValuesRef<GDBusConnection>?): GDBusCapabilityFlags {
    memScoped {
        return kniBridge2678(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_flags(connection: CValuesRef<GDBusConnection>?): GDBusConnectionFlags {
    memScoped {
        return kniBridge2679(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_close(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2680(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_close_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2681(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_close_sync(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2682(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_flush(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2683(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_flush_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2684(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_flush_sync(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2685(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_send_message(connection: CValuesRef<GDBusConnection>?, message: CValuesRef<GDBusMessage>?, flags: GDBusSendMessageFlags, out_serial: CValuesRef<guint32Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2686(connection?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, flags, out_serial?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_send_message_with_reply(connection: CValuesRef<GDBusConnection>?, message: CValuesRef<GDBusMessage>?, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: CValuesRef<guint32Var>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2687(connection?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, flags, timeout_msec, out_serial?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_send_message_with_reply_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2688(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_send_message_with_reply_sync(connection: CValuesRef<GDBusConnection>?, message: CValuesRef<GDBusMessage>?, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: CValuesRef<guint32Var>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2689(connection?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, flags, timeout_msec, out_serial?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_emit_signal(connection: CValuesRef<GDBusConnection>?, @CCall.CString destination_bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString signal_name: String?, parameters: CValuesRef<GVariant>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2690(connection?.getPointer(memScope).rawValue, destination_bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, signal_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_call(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2691(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_call_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2692(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_call_sync(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2693(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_call_with_unix_fd_list(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2694(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_call_with_unix_fd_list_finish(connection: CValuesRef<GDBusConnection>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2695(connection?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_call_with_unix_fd_list_sync(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2696(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_register_object(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, interface_info: CValuesRef<GDBusInterfaceInfo>?, vtable: CValuesRef<GDBusInterfaceVTable>?, user_data: gpointer?, user_data_free_func: GDestroyNotify?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge2697(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_info?.getPointer(memScope).rawValue, vtable?.getPointer(memScope).rawValue, user_data.rawValue, user_data_free_func.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_register_object_with_closures(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, interface_info: CValuesRef<GDBusInterfaceInfo>?, method_call_closure: CValuesRef<GClosure>?, get_property_closure: CValuesRef<GClosure>?, set_property_closure: CValuesRef<GClosure>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge2698(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_info?.getPointer(memScope).rawValue, method_call_closure?.getPointer(memScope).rawValue, get_property_closure?.getPointer(memScope).rawValue, set_property_closure?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unregister_object(connection: CValuesRef<GDBusConnection>?, registration_id: guint): gboolean {
    memScoped {
        return kniBridge2699(connection?.getPointer(memScope).rawValue, registration_id)
    }
}

fun g_dbus_connection_register_subtree(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, vtable: CValuesRef<GDBusSubtreeVTable>?, flags: GDBusSubtreeFlags, user_data: gpointer?, user_data_free_func: GDestroyNotify?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge2700(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, vtable?.getPointer(memScope).rawValue, flags, user_data.rawValue, user_data_free_func.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unregister_subtree(connection: CValuesRef<GDBusConnection>?, registration_id: guint): gboolean {
    memScoped {
        return kniBridge2701(connection?.getPointer(memScope).rawValue, registration_id)
    }
}

fun g_dbus_connection_signal_subscribe(connection: CValuesRef<GDBusConnection>?, @CCall.CString sender: String?, @CCall.CString interface_name: String?, @CCall.CString member: String?, @CCall.CString object_path: String?, @CCall.CString arg0: String?, flags: GDBusSignalFlags, callback: GDBusSignalCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge2702(connection?.getPointer(memScope).rawValue, sender?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, member?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, arg0?.cstr?.getPointer(memScope).rawValue, flags, callback.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_dbus_connection_signal_unsubscribe(connection: CValuesRef<GDBusConnection>?, subscription_id: guint): Unit {
    memScoped {
        return kniBridge2703(connection?.getPointer(memScope).rawValue, subscription_id)
    }
}

fun g_dbus_connection_add_filter(connection: CValuesRef<GDBusConnection>?, filter_function: GDBusMessageFilterFunction?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge2704(connection?.getPointer(memScope).rawValue, filter_function.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_dbus_connection_remove_filter(connection: CValuesRef<GDBusConnection>?, filter_id: guint): Unit {
    memScoped {
        return kniBridge2705(connection?.getPointer(memScope).rawValue, filter_id)
    }
}

fun g_dbus_error_quark(): GQuark {
    return kniBridge2706()
}

fun g_dbus_error_is_remote_error(error: CValuesRef<GError>?): gboolean {
    memScoped {
        return kniBridge2707(error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_get_remote_error(error: CValuesRef<GError>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2708(error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_error_strip_remote_error(error: CValuesRef<GError>?): gboolean {
    memScoped {
        return kniBridge2709(error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_register_error(error_domain: GQuark, error_code: gint, @CCall.CString dbus_error_name: String?): gboolean {
    memScoped {
        return kniBridge2710(error_domain, error_code, dbus_error_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_unregister_error(error_domain: GQuark, error_code: gint, @CCall.CString dbus_error_name: String?): gboolean {
    memScoped {
        return kniBridge2711(error_domain, error_code, dbus_error_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_register_error_domain(@CCall.CString error_domain_quark_name: String?, quark_volatile: CValuesRef<gsizeVar>?, entries: CValuesRef<GDBusErrorEntry>?, num_entries: guint): Unit {
    memScoped {
        return kniBridge2712(error_domain_quark_name?.cstr?.getPointer(memScope).rawValue, quark_volatile?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, num_entries)
    }
}

fun g_dbus_error_new_for_dbus_error(@CCall.CString dbus_error_name: String?, @CCall.CString dbus_error_message: String?): CPointer<GError>? {
    memScoped {
        return interpretCPointer<GError>(kniBridge2713(dbus_error_name?.cstr?.getPointer(memScope).rawValue, dbus_error_message?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources56")
external fun g_dbus_error_set_dbus_error(error: CValuesRef<CPointerVar<GError>>?, @CCall.CString dbus_error_name: String?, @CCall.CString dbus_error_message: String?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_dbus_error_set_dbus_error_valist(error: CValuesRef<CPointerVar<GError>>?, @CCall.CString dbus_error_name: String?, @CCall.CString dbus_error_message: String?, @CCall.CString format: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge2714(error?.getPointer(memScope).rawValue, dbus_error_name?.cstr?.getPointer(memScope).rawValue, dbus_error_message?.cstr?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_dbus_error_encode_gerror(error: CValuesRef<GError>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2715(error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_annotation_info_lookup(annotations: CValuesRef<CPointerVar<GDBusAnnotationInfo>>?, @CCall.CString name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2716(annotations?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_lookup_method(info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?): CPointer<GDBusMethodInfo>? {
    memScoped {
        return interpretCPointer<GDBusMethodInfo>(kniBridge2717(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_lookup_signal(info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?): CPointer<GDBusSignalInfo>? {
    memScoped {
        return interpretCPointer<GDBusSignalInfo>(kniBridge2718(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_lookup_property(info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?): CPointer<GDBusPropertyInfo>? {
    memScoped {
        return interpretCPointer<GDBusPropertyInfo>(kniBridge2719(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_cache_build(info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge2720(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_info_cache_release(info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge2721(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_info_generate_xml(info: CValuesRef<GDBusInterfaceInfo>?, indent: guint, string_builder: CValuesRef<GString>?): Unit {
    memScoped {
        return kniBridge2722(info?.getPointer(memScope).rawValue, indent, string_builder?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_node_info_new_for_xml(@CCall.CString xml_data: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusNodeInfo>? {
    memScoped {
        return interpretCPointer<GDBusNodeInfo>(kniBridge2723(xml_data?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_node_info_lookup_interface(info: CValuesRef<GDBusNodeInfo>?, @CCall.CString name: String?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge2724(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_node_info_generate_xml(info: CValuesRef<GDBusNodeInfo>?, indent: guint, string_builder: CValuesRef<GString>?): Unit {
    memScoped {
        return kniBridge2725(info?.getPointer(memScope).rawValue, indent, string_builder?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_node_info_ref(info: CValuesRef<GDBusNodeInfo>?): CPointer<GDBusNodeInfo>? {
    memScoped {
        return interpretCPointer<GDBusNodeInfo>(kniBridge2726(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_ref(info: CValuesRef<GDBusInterfaceInfo>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge2727(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_info_ref(info: CValuesRef<GDBusMethodInfo>?): CPointer<GDBusMethodInfo>? {
    memScoped {
        return interpretCPointer<GDBusMethodInfo>(kniBridge2728(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_signal_info_ref(info: CValuesRef<GDBusSignalInfo>?): CPointer<GDBusSignalInfo>? {
    memScoped {
        return interpretCPointer<GDBusSignalInfo>(kniBridge2729(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_property_info_ref(info: CValuesRef<GDBusPropertyInfo>?): CPointer<GDBusPropertyInfo>? {
    memScoped {
        return interpretCPointer<GDBusPropertyInfo>(kniBridge2730(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_arg_info_ref(info: CValuesRef<GDBusArgInfo>?): CPointer<GDBusArgInfo>? {
    memScoped {
        return interpretCPointer<GDBusArgInfo>(kniBridge2731(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_annotation_info_ref(info: CValuesRef<GDBusAnnotationInfo>?): CPointer<GDBusAnnotationInfo>? {
    memScoped {
        return interpretCPointer<GDBusAnnotationInfo>(kniBridge2732(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_node_info_unref(info: CValuesRef<GDBusNodeInfo>?): Unit {
    memScoped {
        return kniBridge2733(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_info_unref(info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge2734(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_info_unref(info: CValuesRef<GDBusMethodInfo>?): Unit {
    memScoped {
        return kniBridge2735(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_signal_info_unref(info: CValuesRef<GDBusSignalInfo>?): Unit {
    memScoped {
        return kniBridge2736(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_property_info_unref(info: CValuesRef<GDBusPropertyInfo>?): Unit {
    memScoped {
        return kniBridge2737(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_arg_info_unref(info: CValuesRef<GDBusArgInfo>?): Unit {
    memScoped {
        return kniBridge2738(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_annotation_info_unref(info: CValuesRef<GDBusAnnotationInfo>?): Unit {
    memScoped {
        return kniBridge2739(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_node_info_get_type(): GType {
    return kniBridge2740()
}

fun g_dbus_interface_info_get_type(): GType {
    return kniBridge2741()
}

fun g_dbus_method_info_get_type(): GType {
    return kniBridge2742()
}

fun g_dbus_signal_info_get_type(): GType {
    return kniBridge2743()
}

fun g_dbus_property_info_get_type(): GType {
    return kniBridge2744()
}

fun g_dbus_arg_info_get_type(): GType {
    return kniBridge2745()
}

fun g_dbus_annotation_info_get_type(): GType {
    return kniBridge2746()
}

fun g_dbus_message_get_type(): GType {
    return kniBridge2747()
}

fun g_dbus_message_new(): CPointer<GDBusMessage>? {
    return interpretCPointer<GDBusMessage>(kniBridge2748())
}

fun g_dbus_message_new_signal(@CCall.CString path: String?, @CCall.CString interface_: String?, @CCall.CString signal: String?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2749(path?.cstr?.getPointer(memScope).rawValue, interface_?.cstr?.getPointer(memScope).rawValue, signal?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_new_method_call(@CCall.CString name: String?, @CCall.CString path: String?, @CCall.CString interface_: String?, @CCall.CString method: String?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2750(name?.cstr?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, interface_?.cstr?.getPointer(memScope).rawValue, method?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_new_method_reply(method_call_message: CValuesRef<GDBusMessage>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2751(method_call_message?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources57")
external fun g_dbus_message_new_method_error(method_call_message: CValuesRef<GDBusMessage>?, @CCall.CString error_name: String?, @CCall.CString error_message_format: String?, vararg variadicArguments: Any?): CPointer<GDBusMessage>?

fun g_dbus_message_new_method_error_valist(method_call_message: CValuesRef<GDBusMessage>?, @CCall.CString error_name: String?, @CCall.CString error_message_format: String?, var_args: va_list?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2752(method_call_message?.getPointer(memScope).rawValue, error_name?.cstr?.getPointer(memScope).rawValue, error_message_format?.cstr?.getPointer(memScope).rawValue, var_args.rawValue))
    }
}

fun g_dbus_message_new_method_error_literal(method_call_message: CValuesRef<GDBusMessage>?, @CCall.CString error_name: String?, @CCall.CString error_message: String?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2753(method_call_message?.getPointer(memScope).rawValue, error_name?.cstr?.getPointer(memScope).rawValue, error_message?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_print(message: CValuesRef<GDBusMessage>?, indent: guint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2754(message?.getPointer(memScope).rawValue, indent))
    }
}

fun g_dbus_message_get_locked(message: CValuesRef<GDBusMessage>?): gboolean {
    memScoped {
        return kniBridge2755(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_lock(message: CValuesRef<GDBusMessage>?): Unit {
    memScoped {
        return kniBridge2756(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_copy(message: CValuesRef<GDBusMessage>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2757(message?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_get_byte_order(message: CValuesRef<GDBusMessage>?): GDBusMessageByteOrder {
    memScoped {
        return kniBridge2758(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_byte_order(message: CValuesRef<GDBusMessage>?, byte_order: GDBusMessageByteOrder): Unit {
    memScoped {
        return kniBridge2759(message?.getPointer(memScope).rawValue, byte_order)
    }
}

fun g_dbus_message_get_message_type(message: CValuesRef<GDBusMessage>?): GDBusMessageType {
    memScoped {
        return GDBusMessageType.byValue(kniBridge2760(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_message_type(message: CValuesRef<GDBusMessage>?, type: GDBusMessageType): Unit {
    memScoped {
        return kniBridge2761(message?.getPointer(memScope).rawValue, type.value)
    }
}

fun g_dbus_message_get_flags(message: CValuesRef<GDBusMessage>?): GDBusMessageFlags {
    memScoped {
        return kniBridge2762(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_flags(message: CValuesRef<GDBusMessage>?, flags: GDBusMessageFlags): Unit {
    memScoped {
        return kniBridge2763(message?.getPointer(memScope).rawValue, flags)
    }
}

fun g_dbus_message_get_serial(message: CValuesRef<GDBusMessage>?): guint32 {
    memScoped {
        return kniBridge2764(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_serial(message: CValuesRef<GDBusMessage>?, serial: guint32): Unit {
    memScoped {
        return kniBridge2765(message?.getPointer(memScope).rawValue, serial)
    }
}

fun g_dbus_message_get_header(message: CValuesRef<GDBusMessage>?, header_field: GDBusMessageHeaderField): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2766(message?.getPointer(memScope).rawValue, header_field.value))
    }
}

fun g_dbus_message_set_header(message: CValuesRef<GDBusMessage>?, header_field: GDBusMessageHeaderField, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2767(message?.getPointer(memScope).rawValue, header_field.value, value?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_header_fields(message: CValuesRef<GDBusMessage>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge2768(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_get_body(message: CValuesRef<GDBusMessage>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2769(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_body(message: CValuesRef<GDBusMessage>?, body: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2770(message?.getPointer(memScope).rawValue, body?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_unix_fd_list(message: CValuesRef<GDBusMessage>?): CPointer<GUnixFDList>? {
    memScoped {
        return interpretCPointer<GUnixFDList>(kniBridge2771(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_unix_fd_list(message: CValuesRef<GDBusMessage>?, fd_list: CValuesRef<GUnixFDList>?): Unit {
    memScoped {
        return kniBridge2772(message?.getPointer(memScope).rawValue, fd_list?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_reply_serial(message: CValuesRef<GDBusMessage>?): guint32 {
    memScoped {
        return kniBridge2773(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_reply_serial(message: CValuesRef<GDBusMessage>?, value: guint32): Unit {
    memScoped {
        return kniBridge2774(message?.getPointer(memScope).rawValue, value)
    }
}

fun g_dbus_message_get_interface(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2775(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_interface(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2776(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_member(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2777(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_member(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2778(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_path(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2779(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_path(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2780(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_sender(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2781(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_sender(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2782(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_destination(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2783(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_destination(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2784(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_error_name(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2785(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_error_name(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2786(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_signature(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2787(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_signature(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge2788(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_num_unix_fds(message: CValuesRef<GDBusMessage>?): guint32 {
    memScoped {
        return kniBridge2789(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_num_unix_fds(message: CValuesRef<GDBusMessage>?, value: guint32): Unit {
    memScoped {
        return kniBridge2790(message?.getPointer(memScope).rawValue, value)
    }
}

fun g_dbus_message_get_arg0(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2791(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_new_from_blob(blob: CValuesRef<gucharVar>?, blob_len: gsize, capabilities: GDBusCapabilityFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2792(blob?.getPointer(memScope).rawValue, blob_len, capabilities, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_bytes_needed(blob: CValuesRef<gucharVar>?, blob_len: gsize, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2793(blob?.getPointer(memScope).rawValue, blob_len, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_to_blob(message: CValuesRef<GDBusMessage>?, out_size: CValuesRef<gsizeVar>?, capabilities: GDBusCapabilityFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge2794(message?.getPointer(memScope).rawValue, out_size?.getPointer(memScope).rawValue, capabilities, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_to_gerror(message: CValuesRef<GDBusMessage>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2795(message?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_get_type(): GType {
    return kniBridge2796()
}

fun g_dbus_method_invocation_get_sender(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2797(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_object_path(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2798(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_interface_name(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2799(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_method_name(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2800(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_method_info(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusMethodInfo>? {
    memScoped {
        return interpretCPointer<GDBusMethodInfo>(kniBridge2801(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_property_info(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusPropertyInfo>? {
    memScoped {
        return interpretCPointer<GDBusPropertyInfo>(kniBridge2802(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_connection(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2803(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_message(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge2804(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_parameters(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2805(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_user_data(invocation: CValuesRef<GDBusMethodInvocation>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2806(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_return_value(invocation: CValuesRef<GDBusMethodInvocation>?, parameters: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2807(invocation?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_return_value_with_unix_fd_list(invocation: CValuesRef<GDBusMethodInvocation>?, parameters: CValuesRef<GVariant>?, fd_list: CValuesRef<GUnixFDList>?): Unit {
    memScoped {
        return kniBridge2808(invocation?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, fd_list?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources58")
external fun g_dbus_method_invocation_return_error(invocation: CValuesRef<GDBusMethodInvocation>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_dbus_method_invocation_return_error_valist(invocation: CValuesRef<GDBusMethodInvocation>?, domain: GQuark, code: gint, @CCall.CString format: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge2809(invocation?.getPointer(memScope).rawValue, domain, code, format?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_dbus_method_invocation_return_error_literal(invocation: CValuesRef<GDBusMethodInvocation>?, domain: GQuark, code: gint, @CCall.CString message: String?): Unit {
    memScoped {
        return kniBridge2810(invocation?.getPointer(memScope).rawValue, domain, code, message?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_return_gerror(invocation: CValuesRef<GDBusMethodInvocation>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge2811(invocation?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_take_error(invocation: CValuesRef<GDBusMethodInvocation>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge2812(invocation?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_return_dbus_error(invocation: CValuesRef<GDBusMethodInvocation>?, @CCall.CString error_name: String?, @CCall.CString error_message: String?): Unit {
    memScoped {
        return kniBridge2813(invocation?.getPointer(memScope).rawValue, error_name?.cstr?.getPointer(memScope).rawValue, error_message?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bus_own_name(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameOwnerFlags, bus_acquired_handler: GBusAcquiredCallback?, name_acquired_handler: GBusNameAcquiredCallback?, name_lost_handler: GBusNameLostCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge2814(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, bus_acquired_handler.rawValue, name_acquired_handler.rawValue, name_lost_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_own_name_on_connection(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameOwnerFlags, name_acquired_handler: GBusNameAcquiredCallback?, name_lost_handler: GBusNameLostCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge2815(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_acquired_handler.rawValue, name_lost_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_own_name_with_closures(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameOwnerFlags, bus_acquired_closure: CValuesRef<GClosure>?, name_acquired_closure: CValuesRef<GClosure>?, name_lost_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge2816(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, bus_acquired_closure?.getPointer(memScope).rawValue, name_acquired_closure?.getPointer(memScope).rawValue, name_lost_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_own_name_on_connection_with_closures(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameOwnerFlags, name_acquired_closure: CValuesRef<GClosure>?, name_lost_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge2817(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_acquired_closure?.getPointer(memScope).rawValue, name_lost_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_unown_name(owner_id: guint): Unit {
    return kniBridge2818(owner_id)
}

fun g_bus_watch_name(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback?, name_vanished_handler: GBusNameVanishedCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge2819(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_handler.rawValue, name_vanished_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_watch_name_on_connection(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback?, name_vanished_handler: GBusNameVanishedCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge2820(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_handler.rawValue, name_vanished_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_watch_name_with_closures(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_closure: CValuesRef<GClosure>?, name_vanished_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge2821(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_closure?.getPointer(memScope).rawValue, name_vanished_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_watch_name_on_connection_with_closures(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_closure: CValuesRef<GClosure>?, name_vanished_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge2822(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_closure?.getPointer(memScope).rawValue, name_vanished_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_unwatch_name(watcher_id: guint): Unit {
    return kniBridge2823(watcher_id)
}

fun g_dbus_proxy_get_type(): GType {
    return kniBridge2824()
}

fun g_dbus_proxy_new(connection: CValuesRef<GDBusConnection>?, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2825(connection?.getPointer(memScope).rawValue, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_new_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge2826(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_new_sync(connection: CValuesRef<GDBusConnection>?, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge2827(connection?.getPointer(memScope).rawValue, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_new_for_bus(bus_type: GBusType, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2828(bus_type, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_new_for_bus_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge2829(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_new_for_bus_sync(bus_type: GBusType, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge2830(bus_type, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_connection(proxy: CValuesRef<GDBusProxy>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2831(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_flags(proxy: CValuesRef<GDBusProxy>?): GDBusProxyFlags {
    memScoped {
        return kniBridge2832(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_get_name(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2833(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_name_owner(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2834(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_object_path(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2835(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_interface_name(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2836(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_default_timeout(proxy: CValuesRef<GDBusProxy>?): gint {
    memScoped {
        return kniBridge2837(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_set_default_timeout(proxy: CValuesRef<GDBusProxy>?, timeout_msec: gint): Unit {
    memScoped {
        return kniBridge2838(proxy?.getPointer(memScope).rawValue, timeout_msec)
    }
}

fun g_dbus_proxy_get_interface_info(proxy: CValuesRef<GDBusProxy>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge2839(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_set_interface_info(proxy: CValuesRef<GDBusProxy>?, info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge2840(proxy?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_get_cached_property(proxy: CValuesRef<GDBusProxy>?, @CCall.CString property_name: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2841(proxy?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_set_cached_property(proxy: CValuesRef<GDBusProxy>?, @CCall.CString property_name: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2842(proxy?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_get_cached_property_names(proxy: CValuesRef<GDBusProxy>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2843(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2844(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_call_finish(proxy: CValuesRef<GDBusProxy>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2845(proxy?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call_sync(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2846(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call_with_unix_fd_list(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2847(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_call_with_unix_fd_list_finish(proxy: CValuesRef<GDBusProxy>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2848(proxy?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call_with_unix_fd_list_sync(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2849(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_type(): GType {
    return kniBridge2850()
}

fun g_dbus_server_new_sync(@CCall.CString address: String?, flags: GDBusServerFlags, @CCall.CString guid: String?, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusServer>? {
    memScoped {
        return interpretCPointer<GDBusServer>(kniBridge2851(address?.cstr?.getPointer(memScope).rawValue, flags, guid?.cstr?.getPointer(memScope).rawValue, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_client_address(server: CValuesRef<GDBusServer>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2852(server?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_guid(server: CValuesRef<GDBusServer>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2853(server?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_flags(server: CValuesRef<GDBusServer>?): GDBusServerFlags {
    memScoped {
        return kniBridge2854(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_server_start(server: CValuesRef<GDBusServer>?): Unit {
    memScoped {
        return kniBridge2855(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_server_stop(server: CValuesRef<GDBusServer>?): Unit {
    memScoped {
        return kniBridge2856(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_server_is_active(server: CValuesRef<GDBusServer>?): gboolean {
    memScoped {
        return kniBridge2857(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_guid(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge2858(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_generate_guid(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge2859())
}

fun g_dbus_is_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge2860(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_unique_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge2861(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_member_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge2862(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_interface_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge2863(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_gvariant_to_gvalue(value: CValuesRef<GVariant>?, out_gvalue: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge2864(value?.getPointer(memScope).rawValue, out_gvalue?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_gvalue_to_gvariant(gvalue: CValuesRef<GValue>?, type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2865(gvalue?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_type(): GType {
    return kniBridge2866()
}

fun g_drive_get_name(drive: CValuesRef<GDrive>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2867(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_icon(drive: CValuesRef<GDrive>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2868(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_symbolic_icon(drive: CValuesRef<GDrive>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2869(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_has_volumes(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2870(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_get_volumes(drive: CValuesRef<GDrive>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2871(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_is_removable(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2872(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_is_media_removable(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2873(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_has_media(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2874(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_is_media_check_automatic(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2875(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_poll_for_media(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2876(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_eject(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2877(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_eject(drive: CValuesRef<GDrive>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2878(drive?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_eject_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2879(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_poll_for_media(drive: CValuesRef<GDrive>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2880(drive?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_poll_for_media_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2881(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_get_identifier(drive: CValuesRef<GDrive>?, @CCall.CString kind: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2882(drive?.getPointer(memScope).rawValue, kind?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_drive_enumerate_identifiers(drive: CValuesRef<GDrive>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge2883(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_start_stop_type(drive: CValuesRef<GDrive>?): GDriveStartStopType {
    memScoped {
        return GDriveStartStopType.byValue(kniBridge2884(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_can_start(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2885(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_start_degraded(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2886(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_start(drive: CValuesRef<GDrive>?, flags: GDriveStartFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2887(drive?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_start_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2888(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_stop(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge2889(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_stop(drive: CValuesRef<GDrive>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2890(drive?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_stop_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2891(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_eject_with_operation(drive: CValuesRef<GDrive>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2892(drive?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_eject_with_operation_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2893(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_get_sort_key(drive: CValuesRef<GDrive>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2894(drive?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_get_type(): GType {
    return kniBridge2895()
}

fun g_dtls_connection_set_database(conn: CValuesRef<GDtlsConnection>?, database: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge2896(conn?.getPointer(memScope).rawValue, database?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_database(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge2897(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_set_certificate(conn: CValuesRef<GDtlsConnection>?, certificate: CValuesRef<GTlsCertificate>?): Unit {
    memScoped {
        return kniBridge2898(conn?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_certificate(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2899(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_set_interaction(conn: CValuesRef<GDtlsConnection>?, interaction: CValuesRef<GTlsInteraction>?): Unit {
    memScoped {
        return kniBridge2900(conn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_interaction(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsInteraction>? {
    memScoped {
        return interpretCPointer<GTlsInteraction>(kniBridge2901(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_get_peer_certificate(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2902(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_get_peer_certificate_errors(conn: CValuesRef<GDtlsConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2903(conn?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_set_require_close_notify(conn: CValuesRef<GDtlsConnection>?, require_close_notify: gboolean): Unit {
    memScoped {
        return kniBridge2904(conn?.getPointer(memScope).rawValue, require_close_notify)
    }
}

fun g_dtls_connection_get_require_close_notify(conn: CValuesRef<GDtlsConnection>?): gboolean {
    memScoped {
        return kniBridge2905(conn?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_set_rehandshake_mode(conn: CValuesRef<GDtlsConnection>?, mode: GTlsRehandshakeMode): Unit {
    memScoped {
        return kniBridge2906(conn?.getPointer(memScope).rawValue, mode.value)
    }
}

fun g_dtls_connection_get_rehandshake_mode(conn: CValuesRef<GDtlsConnection>?): GTlsRehandshakeMode {
    memScoped {
        return GTlsRehandshakeMode.byValue(kniBridge2907(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_handshake(conn: CValuesRef<GDtlsConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2908(conn?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_handshake_async(conn: CValuesRef<GDtlsConnection>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2909(conn?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dtls_connection_handshake_finish(conn: CValuesRef<GDtlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2910(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_shutdown(conn: CValuesRef<GDtlsConnection>?, shutdown_read: gboolean, shutdown_write: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2911(conn?.getPointer(memScope).rawValue, shutdown_read, shutdown_write, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_shutdown_async(conn: CValuesRef<GDtlsConnection>?, shutdown_read: gboolean, shutdown_write: gboolean, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2912(conn?.getPointer(memScope).rawValue, shutdown_read, shutdown_write, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dtls_connection_shutdown_finish(conn: CValuesRef<GDtlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2913(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_close(conn: CValuesRef<GDtlsConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2914(conn?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_close_async(conn: CValuesRef<GDtlsConnection>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2915(conn?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dtls_connection_close_finish(conn: CValuesRef<GDtlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2916(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_emit_accept_certificate(conn: CValuesRef<GDtlsConnection>?, peer_cert: CValuesRef<GTlsCertificate>?, errors: GTlsCertificateFlags): gboolean {
    memScoped {
        return kniBridge2917(conn?.getPointer(memScope).rawValue, peer_cert?.getPointer(memScope).rawValue, errors)
    }
}

fun g_dtls_connection_set_advertised_protocols(conn: CValuesRef<GDtlsConnection>?, protocols: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge2918(conn?.getPointer(memScope).rawValue, protocols?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_negotiated_protocol(conn: CValuesRef<GDtlsConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2919(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_client_connection_get_type(): GType {
    return kniBridge2920()
}

fun g_dtls_client_connection_new(base_socket: CValuesRef<GDatagramBased>?, server_identity: CValuesRef<GSocketConnectable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDatagramBased>? {
    memScoped {
        return interpretCPointer<GDatagramBased>(kniBridge2921(base_socket?.getPointer(memScope).rawValue, server_identity?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_client_connection_get_validation_flags(conn: CValuesRef<GDtlsClientConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2922(conn?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_client_connection_set_validation_flags(conn: CValuesRef<GDtlsClientConnection>?, flags: GTlsCertificateFlags): Unit {
    memScoped {
        return kniBridge2923(conn?.getPointer(memScope).rawValue, flags)
    }
}

fun g_dtls_client_connection_get_server_identity(conn: CValuesRef<GDtlsClientConnection>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge2924(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_client_connection_set_server_identity(conn: CValuesRef<GDtlsClientConnection>?, identity: CValuesRef<GSocketConnectable>?): Unit {
    memScoped {
        return kniBridge2925(conn?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_client_connection_get_accepted_cas(conn: CValuesRef<GDtlsClientConnection>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2926(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_server_connection_get_type(): GType {
    return kniBridge2927()
}

fun g_dtls_server_connection_new(base_socket: CValuesRef<GDatagramBased>?, certificate: CValuesRef<GTlsCertificate>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDatagramBased>? {
    memScoped {
        return interpretCPointer<GDatagramBased>(kniBridge2928(base_socket?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_icon_get_type(): GType {
    return kniBridge2929()
}

fun g_icon_hash(icon: gconstpointer?): guint {
    return kniBridge2930(icon.rawValue)
}

fun g_icon_equal(icon1: CValuesRef<GIcon>?, icon2: CValuesRef<GIcon>?): gboolean {
    memScoped {
        return kniBridge2931(icon1?.getPointer(memScope).rawValue, icon2?.getPointer(memScope).rawValue)
    }
}

fun g_icon_to_string(icon: CValuesRef<GIcon>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2932(icon?.getPointer(memScope).rawValue))
    }
}

fun g_icon_new_for_string(@CCall.CString str: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2933(str?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_icon_serialize(icon: CValuesRef<GIcon>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2934(icon?.getPointer(memScope).rawValue))
    }
}

fun g_icon_deserialize(value: CValuesRef<GVariant>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2935(value?.getPointer(memScope).rawValue))
    }
}

fun g_emblem_get_type(): GType {
    return kniBridge2936()
}

fun g_emblem_new(icon: CValuesRef<GIcon>?): CPointer<GEmblem>? {
    memScoped {
        return interpretCPointer<GEmblem>(kniBridge2937(icon?.getPointer(memScope).rawValue))
    }
}

fun g_emblem_new_with_origin(icon: CValuesRef<GIcon>?, origin: GEmblemOrigin): CPointer<GEmblem>? {
    memScoped {
        return interpretCPointer<GEmblem>(kniBridge2938(icon?.getPointer(memScope).rawValue, origin.value))
    }
}

fun g_emblem_get_icon(emblem: CValuesRef<GEmblem>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2939(emblem?.getPointer(memScope).rawValue))
    }
}

fun g_emblem_get_origin(emblem: CValuesRef<GEmblem>?): GEmblemOrigin {
    memScoped {
        return GEmblemOrigin.byValue(kniBridge2940(emblem?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_get_type(): GType {
    return kniBridge2941()
}

fun g_emblemed_icon_new(icon: CValuesRef<GIcon>?, emblem: CValuesRef<GEmblem>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2942(icon?.getPointer(memScope).rawValue, emblem?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_get_icon(emblemed: CValuesRef<GEmblemedIcon>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2943(emblemed?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_get_emblems(emblemed: CValuesRef<GEmblemedIcon>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2944(emblemed?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_add_emblem(emblemed: CValuesRef<GEmblemedIcon>?, emblem: CValuesRef<GEmblem>?): Unit {
    memScoped {
        return kniBridge2945(emblemed?.getPointer(memScope).rawValue, emblem?.getPointer(memScope).rawValue)
    }
}

fun g_emblemed_icon_clear_emblems(emblemed: CValuesRef<GEmblemedIcon>?): Unit {
    memScoped {
        return kniBridge2946(emblemed?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_info_list_get_type(): GType {
    return kniBridge2947()
}

fun g_file_attribute_info_list_new(): CPointer<GFileAttributeInfoList>? {
    return interpretCPointer<GFileAttributeInfoList>(kniBridge2948())
}

fun g_file_attribute_info_list_ref(list: CValuesRef<GFileAttributeInfoList>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge2949(list?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_info_list_unref(list: CValuesRef<GFileAttributeInfoList>?): Unit {
    memScoped {
        return kniBridge2950(list?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_info_list_dup(list: CValuesRef<GFileAttributeInfoList>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge2951(list?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_info_list_lookup(list: CValuesRef<GFileAttributeInfoList>?, @CCall.CString name: String?): CPointer<GFileAttributeInfo>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfo>(kniBridge2952(list?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_info_list_add(list: CValuesRef<GFileAttributeInfoList>?, @CCall.CString name: String?, type: GFileAttributeType, flags: GFileAttributeInfoFlags): Unit {
    memScoped {
        return kniBridge2953(list?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, type, flags)
    }
}

fun g_file_enumerator_get_type(): GType {
    return kniBridge2954()
}

fun g_file_enumerator_next_file(enumerator: CValuesRef<GFileEnumerator>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge2955(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_close(enumerator: CValuesRef<GFileEnumerator>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2956(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_next_files_async(enumerator: CValuesRef<GFileEnumerator>?, num_files: Int, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2957(enumerator?.getPointer(memScope).rawValue, num_files, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_enumerator_next_files_finish(enumerator: CValuesRef<GFileEnumerator>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2958(enumerator?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_close_async(enumerator: CValuesRef<GFileEnumerator>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2959(enumerator?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_enumerator_close_finish(enumerator: CValuesRef<GFileEnumerator>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2960(enumerator?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_is_closed(enumerator: CValuesRef<GFileEnumerator>?): gboolean {
    memScoped {
        return kniBridge2961(enumerator?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_has_pending(enumerator: CValuesRef<GFileEnumerator>?): gboolean {
    memScoped {
        return kniBridge2962(enumerator?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_set_pending(enumerator: CValuesRef<GFileEnumerator>?, pending: gboolean): Unit {
    memScoped {
        return kniBridge2963(enumerator?.getPointer(memScope).rawValue, pending)
    }
}

fun g_file_enumerator_get_container(enumerator: CValuesRef<GFileEnumerator>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2964(enumerator?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_get_child(enumerator: CValuesRef<GFileEnumerator>?, info: CValuesRef<GFileInfo>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2965(enumerator?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_iterate(direnum: CValuesRef<GFileEnumerator>?, out_info: CValuesRef<CPointerVar<GFileInfo>>?, out_child: CValuesRef<CPointerVar<GFile>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2966(direnum?.getPointer(memScope).rawValue, out_info?.getPointer(memScope).rawValue, out_child?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_type(): GType {
    return kniBridge2967()
}

fun g_file_new_for_path(@CCall.CString path: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2968(path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_for_uri(@CCall.CString uri: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2969(uri?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_for_commandline_arg(@CCall.CString arg: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2970(arg?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_for_commandline_arg_and_cwd(@CCall.CString arg: String?, @CCall.CString cwd: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2971(arg?.cstr?.getPointer(memScope).rawValue, cwd?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_tmp(@CCall.CString tmpl: String?, iostream: CValuesRef<CPointerVar<GFileIOStream>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2972(tmpl?.cstr?.getPointer(memScope).rawValue, iostream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_parse_name(@CCall.CString parse_name: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2973(parse_name?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources59")
external fun g_file_new_build_filename(@CCall.CString first_element: String?, vararg variadicArguments: Any?): CPointer<GFile>?

fun g_file_dup(file: CValuesRef<GFile>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2974(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_hash(file: gconstpointer?): guint {
    return kniBridge2975(file.rawValue)
}

fun g_file_equal(file1: CValuesRef<GFile>?, file2: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge2976(file1?.getPointer(memScope).rawValue, file2?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_basename(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2977(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_path(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2978(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_peek_path(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2979(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_uri(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2980(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_parse_name(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2981(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_parent(file: CValuesRef<GFile>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2982(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_has_parent(file: CValuesRef<GFile>?, parent: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge2983(file?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_child(file: CValuesRef<GFile>?, @CCall.CString name: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2984(file?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_child_for_display_name(file: CValuesRef<GFile>?, @CCall.CString display_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2985(file?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_has_prefix(file: CValuesRef<GFile>?, prefix: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge2986(file?.getPointer(memScope).rawValue, prefix?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_relative_path(parent: CValuesRef<GFile>?, descendant: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2987(parent?.getPointer(memScope).rawValue, descendant?.getPointer(memScope).rawValue))
    }
}

fun g_file_resolve_relative_path(file: CValuesRef<GFile>?, @CCall.CString relative_path: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2988(file?.getPointer(memScope).rawValue, relative_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_is_native(file: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge2989(file?.getPointer(memScope).rawValue)
    }
}

fun g_file_has_uri_scheme(file: CValuesRef<GFile>?, @CCall.CString uri_scheme: String?): gboolean {
    memScoped {
        return kniBridge2990(file?.getPointer(memScope).rawValue, uri_scheme?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_uri_scheme(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2991(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_read(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInputStream>? {
    memScoped {
        return interpretCPointer<GFileInputStream>(kniBridge2992(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_read_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2993(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_read_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInputStream>? {
    memScoped {
        return interpretCPointer<GFileInputStream>(kniBridge2994(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_append_to(file: CValuesRef<GFile>?, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge2995(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create(file: CValuesRef<GFile>?, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge2996(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge2997(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_append_to_async(file: CValuesRef<GFile>?, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2998(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_append_to_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge2999(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create_async(file: CValuesRef<GFile>?, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3000(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_create_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge3001(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace_async(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3002(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge3003(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_open_readwrite(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge3004(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_open_readwrite_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3005(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_open_readwrite_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge3006(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create_readwrite(file: CValuesRef<GFile>?, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge3007(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create_readwrite_async(file: CValuesRef<GFile>?, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3008(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_create_readwrite_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge3009(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace_readwrite(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge3010(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace_readwrite_async(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3011(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_readwrite_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge3012(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_exists(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?): gboolean {
    memScoped {
        return kniBridge3013(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_file_type(file: CValuesRef<GFile>?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?): GFileType {
    memScoped {
        return kniBridge3014(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_info(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3015(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_info_async(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3016(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_query_info_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3017(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_filesystem_info(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3018(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_filesystem_info_async(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3019(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_query_filesystem_info_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3020(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_find_enclosing_mount(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge3021(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_find_enclosing_mount_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3022(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_find_enclosing_mount_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge3023(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerate_children(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileEnumerator>? {
    memScoped {
        return interpretCPointer<GFileEnumerator>(kniBridge3024(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerate_children_async(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3025(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_enumerate_children_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileEnumerator>? {
    memScoped {
        return interpretCPointer<GFileEnumerator>(kniBridge3026(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_set_display_name(file: CValuesRef<GFile>?, @CCall.CString display_name: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge3027(file?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_set_display_name_async(file: CValuesRef<GFile>?, @CCall.CString display_name: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3028(file?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_set_display_name_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge3029(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_delete(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3030(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_delete_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3031(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_delete_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3032(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_trash(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3033(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_trash_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3034(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_trash_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3035(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_copy(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileProgressCallback?, progress_callback_data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3036(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_callback_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_copy_async(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileProgressCallback?, progress_callback_data: gpointer?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3037(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_callback_data.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_copy_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3038(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_move(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileProgressCallback?, progress_callback_data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3039(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_callback_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_directory(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3040(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_directory_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3041(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_make_directory_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3042(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_directory_with_parents(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3043(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_symbolic_link(file: CValuesRef<GFile>?, @CCall.CString symlink_value: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3044(file?.getPointer(memScope).rawValue, symlink_value?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_settable_attributes(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge3045(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_writable_namespaces(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge3046(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_set_attribute(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, type: GFileAttributeType, value_p: gpointer?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3047(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, type, value_p.rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attributes_from_info(file: CValuesRef<GFile>?, info: CValuesRef<GFileInfo>?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3048(file?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attributes_async(file: CValuesRef<GFile>?, info: CValuesRef<GFileInfo>?, flags: GFileQueryInfoFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3049(file?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_set_attributes_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, info: CValuesRef<CPointerVar<GFileInfo>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3050(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_string(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, @CCall.CString value: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3051(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_byte_string(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, @CCall.CString value: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3052(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_uint32(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: guint32, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3053(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_int32(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: gint32, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3054(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_uint64(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: guint64, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3055(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_int64(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: gint64, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3056(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_mount_enclosing_volume(location: CValuesRef<GFile>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3057(location?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_mount_enclosing_volume_finish(location: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3058(location?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_mount_mountable(file: CValuesRef<GFile>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3059(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_mount_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge3060(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_unmount_mountable(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3061(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_unmount_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3062(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_unmount_mountable_with_operation(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3063(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_unmount_mountable_with_operation_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3064(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_eject_mountable(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3065(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_eject_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3066(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_eject_mountable_with_operation(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3067(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_eject_mountable_with_operation_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3068(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_copy_attributes(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3069(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_monitor_directory(file: CValuesRef<GFile>?, flags: GFileMonitorFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileMonitor>? {
    memScoped {
        return interpretCPointer<GFileMonitor>(kniBridge3070(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_monitor_file(file: CValuesRef<GFile>?, flags: GFileMonitorFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileMonitor>? {
    memScoped {
        return interpretCPointer<GFileMonitor>(kniBridge3071(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_monitor(file: CValuesRef<GFile>?, flags: GFileMonitorFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileMonitor>? {
    memScoped {
        return interpretCPointer<GFileMonitor>(kniBridge3072(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_measure_disk_usage(file: CValuesRef<GFile>?, flags: GFileMeasureFlags, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileMeasureProgressCallback?, progress_data: gpointer?, disk_usage: CValuesRef<guint64Var>?, num_dirs: CValuesRef<guint64Var>?, num_files: CValuesRef<guint64Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3073(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_data.rawValue, disk_usage?.getPointer(memScope).rawValue, num_dirs?.getPointer(memScope).rawValue, num_files?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_measure_disk_usage_async(file: CValuesRef<GFile>?, flags: GFileMeasureFlags, io_priority: gint, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileMeasureProgressCallback?, progress_data: gpointer?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3074(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_data.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_measure_disk_usage_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, disk_usage: CValuesRef<guint64Var>?, num_dirs: CValuesRef<guint64Var>?, num_files: CValuesRef<guint64Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3075(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, disk_usage?.getPointer(memScope).rawValue, num_dirs?.getPointer(memScope).rawValue, num_files?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_start_mountable(file: CValuesRef<GFile>?, flags: GDriveStartFlags, start_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3076(file?.getPointer(memScope).rawValue, flags, start_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_start_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3077(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_stop_mountable(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3078(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_stop_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3079(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_poll_mountable(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3080(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_poll_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3081(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_default_handler(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge3082(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_default_handler_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3083(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_query_default_handler_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge3084(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_load_contents(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, contents: CValuesRef<CPointerVar<ByteVar>>?, length: CValuesRef<gsizeVar>?, etag_out: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3085(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_load_contents_async(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3086(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_load_contents_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, contents: CValuesRef<CPointerVar<ByteVar>>?, length: CValuesRef<gsizeVar>?, etag_out: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3087(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_load_partial_contents_async(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, read_more_callback: GFileReadMoreCallback?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3088(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, read_more_callback.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_load_partial_contents_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, contents: CValuesRef<CPointerVar<ByteVar>>?, length: CValuesRef<gsizeVar>?, etag_out: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3089(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_replace_contents(file: CValuesRef<GFile>?, @CCall.CString contents: String?, length: gsize, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, new_etag: CValuesRef<CPointerVar<ByteVar>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3090(file?.getPointer(memScope).rawValue, contents?.cstr?.getPointer(memScope).rawValue, length, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, new_etag?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_replace_contents_async(file: CValuesRef<GFile>?, @CCall.CString contents: String?, length: gsize, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3091(file?.getPointer(memScope).rawValue, contents?.cstr?.getPointer(memScope).rawValue, length, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_contents_bytes_async(file: CValuesRef<GFile>?, contents: CValuesRef<GBytes>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3092(file?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_contents_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, new_etag: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3093(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, new_etag?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_supports_thread_contexts(file: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge3094(file?.getPointer(memScope).rawValue)
    }
}

fun g_file_load_bytes(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, etag_out: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge3095(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_load_bytes_async(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3096(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_load_bytes_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, etag_out: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge3097(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_icon_get_type(): GType {
    return kniBridge3098()
}

fun g_file_icon_new(file: CValuesRef<GFile>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3099(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_icon_get_file(icon: CValuesRef<GFileIcon>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge3100(icon?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_type(): GType {
    return kniBridge3101()
}

fun g_file_info_new(): CPointer<GFileInfo>? {
    return interpretCPointer<GFileInfo>(kniBridge3102())
}

fun g_file_info_dup(other: CValuesRef<GFileInfo>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3103(other?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_copy_into(src_info: CValuesRef<GFileInfo>?, dest_info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge3104(src_info?.getPointer(memScope).rawValue, dest_info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_has_attribute(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge3105(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_has_namespace(info: CValuesRef<GFileInfo>?, @CCall.CString name_space: String?): gboolean {
    memScoped {
        return kniBridge3106(info?.getPointer(memScope).rawValue, name_space?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_list_attributes(info: CValuesRef<GFileInfo>?, @CCall.CString name_space: String?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge3107(info?.getPointer(memScope).rawValue, name_space?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_data(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, type: CValuesRef<GFileAttributeTypeVar>?, value_pp: CValuesRef<gpointerVar>?, status: CValuesRef<GFileAttributeStatusVar>?): gboolean {
    memScoped {
        return kniBridge3108(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, value_pp?.getPointer(memScope).rawValue, status?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_type(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): GFileAttributeType {
    memScoped {
        return kniBridge3109(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_remove_attribute(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): Unit {
    memScoped {
        return kniBridge3110(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_status(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): GFileAttributeStatus {
    memScoped {
        return kniBridge3111(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_status(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, status: GFileAttributeStatus): gboolean {
    memScoped {
        return kniBridge3112(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, status)
    }
}

fun g_file_info_get_attribute_as_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3113(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3114(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_byte_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3115(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_boolean(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge3116(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_uint32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): guint32 {
    memScoped {
        return kniBridge3117(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_int32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gint32 {
    memScoped {
        return kniBridge3118(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_uint64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): guint64 {
    memScoped {
        return kniBridge3119(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_int64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gint64 {
    memScoped {
        return kniBridge3120(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_object(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge3121(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_stringv(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge3122(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_set_attribute(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, type: GFileAttributeType, value_p: gpointer?): Unit {
    memScoped {
        return kniBridge3123(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, type, value_p.rawValue)
    }
}

fun g_file_info_set_attribute_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, @CCall.CString attr_value: String?): Unit {
    memScoped {
        return kniBridge3124(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_byte_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, @CCall.CString attr_value: String?): Unit {
    memScoped {
        return kniBridge3125(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_boolean(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: gboolean): Unit {
    memScoped {
        return kniBridge3126(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_uint32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: guint32): Unit {
    memScoped {
        return kniBridge3127(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_int32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: gint32): Unit {
    memScoped {
        return kniBridge3128(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_uint64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: guint64): Unit {
    memScoped {
        return kniBridge3129(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_int64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: gint64): Unit {
    memScoped {
        return kniBridge3130(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_object(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge3131(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_stringv(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: CValuesRef<CPointerVar<ByteVar>>?): Unit {
    memScoped {
        return kniBridge3132(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_clear_status(info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge3133(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_deletion_date(info: CValuesRef<GFileInfo>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge3134(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_file_type(info: CValuesRef<GFileInfo>?): GFileType {
    memScoped {
        return kniBridge3135(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_is_hidden(info: CValuesRef<GFileInfo>?): gboolean {
    memScoped {
        return kniBridge3136(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_is_backup(info: CValuesRef<GFileInfo>?): gboolean {
    memScoped {
        return kniBridge3137(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_is_symlink(info: CValuesRef<GFileInfo>?): gboolean {
    memScoped {
        return kniBridge3138(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_name(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3139(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_display_name(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3140(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_edit_name(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3141(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_icon(info: CValuesRef<GFileInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3142(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_symbolic_icon(info: CValuesRef<GFileInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3143(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_content_type(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3144(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_size(info: CValuesRef<GFileInfo>?): goffset {
    memScoped {
        return kniBridge3145(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_modification_time(info: CValuesRef<GFileInfo>?, result: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge3146(info?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_modification_date_time(info: CValuesRef<GFileInfo>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge3147(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_symlink_target(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3148(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_etag(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3149(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_sort_order(info: CValuesRef<GFileInfo>?): gint32 {
    memScoped {
        return kniBridge3150(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_mask(info: CValuesRef<GFileInfo>?, mask: CValuesRef<GFileAttributeMatcher>?): Unit {
    memScoped {
        return kniBridge3151(info?.getPointer(memScope).rawValue, mask?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_unset_attribute_mask(info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge3152(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_file_type(info: CValuesRef<GFileInfo>?, type: GFileType): Unit {
    memScoped {
        return kniBridge3153(info?.getPointer(memScope).rawValue, type)
    }
}

fun g_file_info_set_is_hidden(info: CValuesRef<GFileInfo>?, is_hidden: gboolean): Unit {
    memScoped {
        return kniBridge3154(info?.getPointer(memScope).rawValue, is_hidden)
    }
}

fun g_file_info_set_is_symlink(info: CValuesRef<GFileInfo>?, is_symlink: gboolean): Unit {
    memScoped {
        return kniBridge3155(info?.getPointer(memScope).rawValue, is_symlink)
    }
}

fun g_file_info_set_name(info: CValuesRef<GFileInfo>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3156(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_display_name(info: CValuesRef<GFileInfo>?, @CCall.CString display_name: String?): Unit {
    memScoped {
        return kniBridge3157(info?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_edit_name(info: CValuesRef<GFileInfo>?, @CCall.CString edit_name: String?): Unit {
    memScoped {
        return kniBridge3158(info?.getPointer(memScope).rawValue, edit_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_icon(info: CValuesRef<GFileInfo>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge3159(info?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_symbolic_icon(info: CValuesRef<GFileInfo>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge3160(info?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_content_type(info: CValuesRef<GFileInfo>?, @CCall.CString content_type: String?): Unit {
    memScoped {
        return kniBridge3161(info?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_size(info: CValuesRef<GFileInfo>?, size: goffset): Unit {
    memScoped {
        return kniBridge3162(info?.getPointer(memScope).rawValue, size)
    }
}

fun g_file_info_set_modification_time(info: CValuesRef<GFileInfo>?, mtime: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge3163(info?.getPointer(memScope).rawValue, mtime?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_modification_date_time(info: CValuesRef<GFileInfo>?, mtime: CValuesRef<GDateTime>?): Unit {
    memScoped {
        return kniBridge3164(info?.getPointer(memScope).rawValue, mtime?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_symlink_target(info: CValuesRef<GFileInfo>?, @CCall.CString symlink_target: String?): Unit {
    memScoped {
        return kniBridge3165(info?.getPointer(memScope).rawValue, symlink_target?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_sort_order(info: CValuesRef<GFileInfo>?, sort_order: gint32): Unit {
    memScoped {
        return kniBridge3166(info?.getPointer(memScope).rawValue, sort_order)
    }
}

fun g_file_attribute_matcher_get_type(): GType {
    return kniBridge3167()
}

fun g_file_attribute_matcher_new(@CCall.CString attributes: String?): CPointer<GFileAttributeMatcher>? {
    memScoped {
        return interpretCPointer<GFileAttributeMatcher>(kniBridge3168(attributes?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_ref(matcher: CValuesRef<GFileAttributeMatcher>?): CPointer<GFileAttributeMatcher>? {
    memScoped {
        return interpretCPointer<GFileAttributeMatcher>(kniBridge3169(matcher?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_unref(matcher: CValuesRef<GFileAttributeMatcher>?): Unit {
    memScoped {
        return kniBridge3170(matcher?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_subtract(matcher: CValuesRef<GFileAttributeMatcher>?, subtract: CValuesRef<GFileAttributeMatcher>?): CPointer<GFileAttributeMatcher>? {
    memScoped {
        return interpretCPointer<GFileAttributeMatcher>(kniBridge3171(matcher?.getPointer(memScope).rawValue, subtract?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_matches(matcher: CValuesRef<GFileAttributeMatcher>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge3172(matcher?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_matches_only(matcher: CValuesRef<GFileAttributeMatcher>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge3173(matcher?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_enumerate_namespace(matcher: CValuesRef<GFileAttributeMatcher>?, @CCall.CString ns: String?): gboolean {
    memScoped {
        return kniBridge3174(matcher?.getPointer(memScope).rawValue, ns?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_enumerate_next(matcher: CValuesRef<GFileAttributeMatcher>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3175(matcher?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_to_string(matcher: CValuesRef<GFileAttributeMatcher>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3176(matcher?.getPointer(memScope).rawValue))
    }
}

fun g_file_input_stream_get_type(): GType {
    return kniBridge3177()
}

fun g_file_input_stream_query_info(stream: CValuesRef<GFileInputStream>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3178(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_input_stream_query_info_async(stream: CValuesRef<GFileInputStream>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3179(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_input_stream_query_info_finish(stream: CValuesRef<GFileInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3180(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_error_quark(): GQuark {
    return kniBridge3181()
}

fun g_io_error_from_errno(err_no: gint): GIOErrorEnum {
    return kniBridge3182(err_no)
}

fun g_io_stream_get_type(): GType {
    return kniBridge3183()
}

fun g_io_stream_get_input_stream(stream: CValuesRef<GIOStream>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3184(stream?.getPointer(memScope).rawValue))
    }
}

fun g_io_stream_get_output_stream(stream: CValuesRef<GIOStream>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge3185(stream?.getPointer(memScope).rawValue))
    }
}

fun g_io_stream_splice_async(stream1: CValuesRef<GIOStream>?, stream2: CValuesRef<GIOStream>?, flags: GIOStreamSpliceFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3186(stream1?.getPointer(memScope).rawValue, stream2?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_io_stream_splice_finish(result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3187(result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_close(stream: CValuesRef<GIOStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3188(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_close_async(stream: CValuesRef<GIOStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3189(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_io_stream_close_finish(stream: CValuesRef<GIOStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3190(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_is_closed(stream: CValuesRef<GIOStream>?): gboolean {
    memScoped {
        return kniBridge3191(stream?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_has_pending(stream: CValuesRef<GIOStream>?): gboolean {
    memScoped {
        return kniBridge3192(stream?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_set_pending(stream: CValuesRef<GIOStream>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3193(stream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_clear_pending(stream: CValuesRef<GIOStream>?): Unit {
    memScoped {
        return kniBridge3194(stream?.getPointer(memScope).rawValue)
    }
}

fun g_file_io_stream_get_type(): GType {
    return kniBridge3195()
}

fun g_file_io_stream_query_info(stream: CValuesRef<GFileIOStream>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3196(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_io_stream_query_info_async(stream: CValuesRef<GFileIOStream>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3197(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_io_stream_query_info_finish(stream: CValuesRef<GFileIOStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3198(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_io_stream_get_etag(stream: CValuesRef<GFileIOStream>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3199(stream?.getPointer(memScope).rawValue))
    }
}

fun g_file_monitor_get_type(): GType {
    return kniBridge3200()
}

fun g_file_monitor_cancel(monitor: CValuesRef<GFileMonitor>?): gboolean {
    memScoped {
        return kniBridge3201(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_file_monitor_is_cancelled(monitor: CValuesRef<GFileMonitor>?): gboolean {
    memScoped {
        return kniBridge3202(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_file_monitor_set_rate_limit(monitor: CValuesRef<GFileMonitor>?, limit_msecs: gint): Unit {
    memScoped {
        return kniBridge3203(monitor?.getPointer(memScope).rawValue, limit_msecs)
    }
}

fun g_file_monitor_emit_event(monitor: CValuesRef<GFileMonitor>?, child: CValuesRef<GFile>?, other_file: CValuesRef<GFile>?, event_type: GFileMonitorEvent): Unit {
    memScoped {
        return kniBridge3204(monitor?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, other_file?.getPointer(memScope).rawValue, event_type.value)
    }
}

fun g_filename_completer_get_type(): GType {
    return kniBridge3205()
}

fun g_filename_completer_new(): CPointer<GFilenameCompleter>? {
    return interpretCPointer<GFilenameCompleter>(kniBridge3206())
}

fun g_filename_completer_get_completion_suffix(completer: CValuesRef<GFilenameCompleter>?, @CCall.CString initial_text: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3207(completer?.getPointer(memScope).rawValue, initial_text?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_filename_completer_get_completions(completer: CValuesRef<GFilenameCompleter>?, @CCall.CString initial_text: String?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge3208(completer?.getPointer(memScope).rawValue, initial_text?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_filename_completer_set_dirs_only(completer: CValuesRef<GFilenameCompleter>?, dirs_only: gboolean): Unit {
    memScoped {
        return kniBridge3209(completer?.getPointer(memScope).rawValue, dirs_only)
    }
}

fun g_file_output_stream_get_type(): GType {
    return kniBridge3210()
}

fun g_file_output_stream_query_info(stream: CValuesRef<GFileOutputStream>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3211(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_output_stream_query_info_async(stream: CValuesRef<GFileOutputStream>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3212(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_output_stream_query_info_finish(stream: CValuesRef<GFileOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge3213(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_output_stream_get_etag(stream: CValuesRef<GFileOutputStream>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3214(stream?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_get_type(): GType {
    return kniBridge3215()
}

fun g_inet_address_new_from_string(@CCall.CString string: String?): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge3216(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_new_from_bytes(bytes: CValuesRef<guint8Var>?, family: GSocketFamily): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge3217(bytes?.getPointer(memScope).rawValue, family))
    }
}

fun g_inet_address_new_loopback(family: GSocketFamily): CPointer<GInetAddress>? {
    return interpretCPointer<GInetAddress>(kniBridge3218(family))
}

fun g_inet_address_new_any(family: GSocketFamily): CPointer<GInetAddress>? {
    return interpretCPointer<GInetAddress>(kniBridge3219(family))
}

fun g_inet_address_equal(address: CValuesRef<GInetAddress>?, other_address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3220(address?.getPointer(memScope).rawValue, other_address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_to_string(address: CValuesRef<GInetAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3221(address?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_to_bytes(address: CValuesRef<GInetAddress>?): CPointer<guint8Var>? {
    memScoped {
        return interpretCPointer<guint8Var>(kniBridge3222(address?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_get_native_size(address: CValuesRef<GInetAddress>?): gsize {
    memScoped {
        return kniBridge3223(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_family(address: CValuesRef<GInetAddress>?): GSocketFamily {
    memScoped {
        return kniBridge3224(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_any(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3225(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_loopback(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3226(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_link_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3227(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_site_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3228(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_multicast(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3229(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_global(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3230(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_link_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3231(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_node_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3232(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_org_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3233(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_site_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3234(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_get_type(): GType {
    return kniBridge3235()
}

fun g_inet_address_mask_new(addr: CValuesRef<GInetAddress>?, length: guint, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInetAddressMask>? {
    memScoped {
        return interpretCPointer<GInetAddressMask>(kniBridge3236(addr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_new_from_string(@CCall.CString mask_string: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInetAddressMask>? {
    memScoped {
        return interpretCPointer<GInetAddressMask>(kniBridge3237(mask_string?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_to_string(mask: CValuesRef<GInetAddressMask>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3238(mask?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_get_family(mask: CValuesRef<GInetAddressMask>?): GSocketFamily {
    memScoped {
        return kniBridge3239(mask?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_get_address(mask: CValuesRef<GInetAddressMask>?): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge3240(mask?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_get_length(mask: CValuesRef<GInetAddressMask>?): guint {
    memScoped {
        return kniBridge3241(mask?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_matches(mask: CValuesRef<GInetAddressMask>?, address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge3242(mask?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_equal(mask: CValuesRef<GInetAddressMask>?, mask2: CValuesRef<GInetAddressMask>?): gboolean {
    memScoped {
        return kniBridge3243(mask?.getPointer(memScope).rawValue, mask2?.getPointer(memScope).rawValue)
    }
}

fun g_socket_address_get_type(): GType {
    return kniBridge3244()
}

fun g_socket_address_get_family(address: CValuesRef<GSocketAddress>?): GSocketFamily {
    memScoped {
        return kniBridge3245(address?.getPointer(memScope).rawValue)
    }
}

fun g_socket_address_new_from_native(native: gpointer?, len: gsize): CPointer<GSocketAddress>? {
    return interpretCPointer<GSocketAddress>(kniBridge3246(native.rawValue, len))
}

fun g_socket_address_to_native(address: CValuesRef<GSocketAddress>?, dest: gpointer?, destlen: gsize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3247(address?.getPointer(memScope).rawValue, dest.rawValue, destlen, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_address_get_native_size(address: CValuesRef<GSocketAddress>?): gssize {
    memScoped {
        return kniBridge3248(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_socket_address_get_type(): GType {
    return kniBridge3249()
}

fun g_inet_socket_address_new(address: CValuesRef<GInetAddress>?, port: guint16): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3250(address?.getPointer(memScope).rawValue, port))
    }
}

fun g_inet_socket_address_new_from_string(@CCall.CString address: String?, port: guint): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3251(address?.cstr?.getPointer(memScope).rawValue, port))
    }
}

fun g_inet_socket_address_get_address(address: CValuesRef<GInetSocketAddress>?): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge3252(address?.getPointer(memScope).rawValue))
    }
}

fun g_inet_socket_address_get_port(address: CValuesRef<GInetSocketAddress>?): guint16 {
    memScoped {
        return kniBridge3253(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_socket_address_get_flowinfo(address: CValuesRef<GInetSocketAddress>?): guint32 {
    memScoped {
        return kniBridge3254(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_socket_address_get_scope_id(address: CValuesRef<GInetSocketAddress>?): guint32 {
    memScoped {
        return kniBridge3255(address?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_create_flags_get_type(): GType {
    return kniBridge3256()
}

fun g_converter_flags_get_type(): GType {
    return kniBridge3257()
}

fun g_converter_result_get_type(): GType {
    return kniBridge3258()
}

fun g_data_stream_byte_order_get_type(): GType {
    return kniBridge3259()
}

fun g_data_stream_newline_type_get_type(): GType {
    return kniBridge3260()
}

fun g_file_attribute_type_get_type(): GType {
    return kniBridge3261()
}

fun g_file_attribute_info_flags_get_type(): GType {
    return kniBridge3262()
}

fun g_file_attribute_status_get_type(): GType {
    return kniBridge3263()
}

fun g_file_query_info_flags_get_type(): GType {
    return kniBridge3264()
}

fun g_file_create_flags_get_type(): GType {
    return kniBridge3265()
}

fun g_file_measure_flags_get_type(): GType {
    return kniBridge3266()
}

fun g_mount_mount_flags_get_type(): GType {
    return kniBridge3267()
}

fun g_mount_unmount_flags_get_type(): GType {
    return kniBridge3268()
}

fun g_drive_start_flags_get_type(): GType {
    return kniBridge3269()
}

fun g_drive_start_stop_type_get_type(): GType {
    return kniBridge3270()
}

fun g_file_copy_flags_get_type(): GType {
    return kniBridge3271()
}

fun g_file_monitor_flags_get_type(): GType {
    return kniBridge3272()
}

fun g_file_type_get_type(): GType {
    return kniBridge3273()
}

fun g_filesystem_preview_type_get_type(): GType {
    return kniBridge3274()
}

fun g_file_monitor_event_get_type(): GType {
    return kniBridge3275()
}

fun g_io_error_enum_get_type(): GType {
    return kniBridge3276()
}

fun g_ask_password_flags_get_type(): GType {
    return kniBridge3277()
}

fun g_password_save_get_type(): GType {
    return kniBridge3278()
}

fun g_mount_operation_result_get_type(): GType {
    return kniBridge3279()
}

fun g_output_stream_splice_flags_get_type(): GType {
    return kniBridge3280()
}

fun g_io_stream_splice_flags_get_type(): GType {
    return kniBridge3281()
}

fun g_emblem_origin_get_type(): GType {
    return kniBridge3282()
}

fun g_resolver_error_get_type(): GType {
    return kniBridge3283()
}

fun g_resolver_record_type_get_type(): GType {
    return kniBridge3284()
}

fun g_resource_error_get_type(): GType {
    return kniBridge3285()
}

fun g_resource_flags_get_type(): GType {
    return kniBridge3286()
}

fun g_resource_lookup_flags_get_type(): GType {
    return kniBridge3287()
}

fun g_socket_family_get_type(): GType {
    return kniBridge3288()
}

fun g_socket_type_get_type(): GType {
    return kniBridge3289()
}

fun g_socket_msg_flags_get_type(): GType {
    return kniBridge3290()
}

fun g_socket_protocol_get_type(): GType {
    return kniBridge3291()
}

fun g_zlib_compressor_format_get_type(): GType {
    return kniBridge3292()
}

fun g_unix_socket_address_type_get_type(): GType {
    return kniBridge3293()
}

fun g_bus_type_get_type(): GType {
    return kniBridge3294()
}

fun g_bus_name_owner_flags_get_type(): GType {
    return kniBridge3295()
}

fun g_bus_name_watcher_flags_get_type(): GType {
    return kniBridge3296()
}

fun g_dbus_proxy_flags_get_type(): GType {
    return kniBridge3297()
}

fun g_dbus_error_get_type(): GType {
    return kniBridge3298()
}

fun g_dbus_connection_flags_get_type(): GType {
    return kniBridge3299()
}

fun g_dbus_capability_flags_get_type(): GType {
    return kniBridge3300()
}

fun g_dbus_call_flags_get_type(): GType {
    return kniBridge3301()
}

fun g_dbus_message_type_get_type(): GType {
    return kniBridge3302()
}

fun g_dbus_message_flags_get_type(): GType {
    return kniBridge3303()
}

fun g_dbus_message_header_field_get_type(): GType {
    return kniBridge3304()
}

fun g_dbus_property_info_flags_get_type(): GType {
    return kniBridge3305()
}

fun g_dbus_subtree_flags_get_type(): GType {
    return kniBridge3306()
}

fun g_dbus_server_flags_get_type(): GType {
    return kniBridge3307()
}

fun g_dbus_signal_flags_get_type(): GType {
    return kniBridge3308()
}

fun g_dbus_send_message_flags_get_type(): GType {
    return kniBridge3309()
}

fun g_credentials_type_get_type(): GType {
    return kniBridge3310()
}

fun g_dbus_message_byte_order_get_type(): GType {
    return kniBridge3311()
}

fun g_application_flags_get_type(): GType {
    return kniBridge3312()
}

fun g_tls_error_get_type(): GType {
    return kniBridge3313()
}

fun g_tls_certificate_flags_get_type(): GType {
    return kniBridge3314()
}

fun g_tls_authentication_mode_get_type(): GType {
    return kniBridge3315()
}

fun g_tls_rehandshake_mode_get_type(): GType {
    return kniBridge3316()
}

fun g_tls_password_flags_get_type(): GType {
    return kniBridge3317()
}

fun g_tls_interaction_result_get_type(): GType {
    return kniBridge3318()
}

fun g_dbus_interface_skeleton_flags_get_type(): GType {
    return kniBridge3319()
}

fun g_dbus_object_manager_client_flags_get_type(): GType {
    return kniBridge3320()
}

fun g_tls_database_verify_flags_get_type(): GType {
    return kniBridge3321()
}

fun g_tls_database_lookup_flags_get_type(): GType {
    return kniBridge3322()
}

fun g_tls_certificate_request_flags_get_type(): GType {
    return kniBridge3323()
}

fun g_io_module_scope_flags_get_type(): GType {
    return kniBridge3324()
}

fun g_socket_client_event_get_type(): GType {
    return kniBridge3325()
}

fun g_socket_listener_event_get_type(): GType {
    return kniBridge3326()
}

fun g_test_dbus_flags_get_type(): GType {
    return kniBridge3327()
}

fun g_subprocess_flags_get_type(): GType {
    return kniBridge3328()
}

fun g_notification_priority_get_type(): GType {
    return kniBridge3329()
}

fun g_network_connectivity_get_type(): GType {
    return kniBridge3330()
}

fun g_pollable_return_get_type(): GType {
    return kniBridge3331()
}

fun g_resolver_name_lookup_flags_get_type(): GType {
    return kniBridge3332()
}

fun g_settings_bind_flags_get_type(): GType {
    return kniBridge3333()
}

fun g_module_supported(): gboolean {
    return kniBridge3334()
}

fun g_module_open(@CCall.CString file_name: String?, flags: GModuleFlags): CPointer<GModule>? {
    memScoped {
        return interpretCPointer<GModule>(kniBridge3335(file_name?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_module_close(module: CValuesRef<GModule>?): gboolean {
    memScoped {
        return kniBridge3336(module?.getPointer(memScope).rawValue)
    }
}

fun g_module_make_resident(module: CValuesRef<GModule>?): Unit {
    memScoped {
        return kniBridge3337(module?.getPointer(memScope).rawValue)
    }
}

fun g_module_error(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge3338())
}

fun g_module_symbol(module: CValuesRef<GModule>?, @CCall.CString symbol_name: String?, symbol: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge3339(module?.getPointer(memScope).rawValue, symbol_name?.cstr?.getPointer(memScope).rawValue, symbol?.getPointer(memScope).rawValue)
    }
}

fun g_module_name(module: CValuesRef<GModule>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3340(module?.getPointer(memScope).rawValue))
    }
}

fun g_module_build_path(@CCall.CString directory: String?, @CCall.CString module_name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3341(directory?.cstr?.getPointer(memScope).rawValue, module_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_module_scope_new(flags: GIOModuleScopeFlags): CPointer<GIOModuleScope>? {
    return interpretCPointer<GIOModuleScope>(kniBridge3342(flags.value))
}

fun g_io_module_scope_free(scope: CValuesRef<GIOModuleScope>?): Unit {
    memScoped {
        return kniBridge3343(scope?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_scope_block(scope: CValuesRef<GIOModuleScope>?, @CCall.CString basename: String?): Unit {
    memScoped {
        return kniBridge3344(scope?.getPointer(memScope).rawValue, basename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_get_type(): GType {
    return kniBridge3345()
}

fun g_io_module_new(@CCall.CString filename: String?): CPointer<GIOModule>? {
    memScoped {
        return interpretCPointer<GIOModule>(kniBridge3346(filename?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_modules_scan_all_in_directory(@CCall.CString dirname: String?): Unit {
    memScoped {
        return kniBridge3347(dirname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_io_modules_load_all_in_directory(@CCall.CString dirname: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3348(dirname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_modules_scan_all_in_directory_with_scope(@CCall.CString dirname: String?, scope: CValuesRef<GIOModuleScope>?): Unit {
    memScoped {
        return kniBridge3349(dirname?.cstr?.getPointer(memScope).rawValue, scope?.getPointer(memScope).rawValue)
    }
}

fun g_io_modules_load_all_in_directory_with_scope(@CCall.CString dirname: String?, scope: CValuesRef<GIOModuleScope>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3350(dirname?.cstr?.getPointer(memScope).rawValue, scope?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_register(@CCall.CString name: String?): CPointer<GIOExtensionPoint>? {
    memScoped {
        return interpretCPointer<GIOExtensionPoint>(kniBridge3351(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_lookup(@CCall.CString name: String?): CPointer<GIOExtensionPoint>? {
    memScoped {
        return interpretCPointer<GIOExtensionPoint>(kniBridge3352(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_set_required_type(extension_point: CValuesRef<GIOExtensionPoint>?, type: GType): Unit {
    memScoped {
        return kniBridge3353(extension_point?.getPointer(memScope).rawValue, type)
    }
}

fun g_io_extension_point_get_required_type(extension_point: CValuesRef<GIOExtensionPoint>?): GType {
    memScoped {
        return kniBridge3354(extension_point?.getPointer(memScope).rawValue)
    }
}

fun g_io_extension_point_get_extensions(extension_point: CValuesRef<GIOExtensionPoint>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3355(extension_point?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_get_extension_by_name(extension_point: CValuesRef<GIOExtensionPoint>?, @CCall.CString name: String?): CPointer<GIOExtension>? {
    memScoped {
        return interpretCPointer<GIOExtension>(kniBridge3356(extension_point?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_implement(@CCall.CString extension_point_name: String?, type: GType, @CCall.CString extension_name: String?, priority: gint): CPointer<GIOExtension>? {
    memScoped {
        return interpretCPointer<GIOExtension>(kniBridge3357(extension_point_name?.cstr?.getPointer(memScope).rawValue, type, extension_name?.cstr?.getPointer(memScope).rawValue, priority))
    }
}

fun g_io_extension_get_type(extension: CValuesRef<GIOExtension>?): GType {
    memScoped {
        return kniBridge3358(extension?.getPointer(memScope).rawValue)
    }
}

fun g_io_extension_get_name(extension: CValuesRef<GIOExtension>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3359(extension?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_get_priority(extension: CValuesRef<GIOExtension>?): gint {
    memScoped {
        return kniBridge3360(extension?.getPointer(memScope).rawValue)
    }
}

fun g_io_extension_ref_class(extension: CValuesRef<GIOExtension>?): CPointer<GTypeClass>? {
    memScoped {
        return interpretCPointer<GTypeClass>(kniBridge3361(extension?.getPointer(memScope).rawValue))
    }
}

fun g_io_module_load(module: CValuesRef<GIOModule>?): Unit {
    memScoped {
        return kniBridge3362(module?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_unload(module: CValuesRef<GIOModule>?): Unit {
    memScoped {
        return kniBridge3363(module?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_query(): CPointer<CPointerVar<ByteVar>>? {
    return interpretCPointer<CPointerVar<ByteVar>>(kniBridge3364())
}

fun g_io_scheduler_push_job(job_func: GIOSchedulerJobFunc?, user_data: gpointer?, notify: GDestroyNotify?, io_priority: gint, cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge3365(job_func.rawValue, user_data.rawValue, notify.rawValue, io_priority, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_io_scheduler_cancel_all_jobs(): Unit {
    return kniBridge3366()
}

fun g_io_scheduler_job_send_to_mainloop(job: CValuesRef<GIOSchedulerJob>?, func: GSourceFunc?, user_data: gpointer?, notify: GDestroyNotify?): gboolean {
    memScoped {
        return kniBridge3367(job?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue, notify.rawValue)
    }
}

fun g_io_scheduler_job_send_to_mainloop_async(job: CValuesRef<GIOSchedulerJob>?, func: GSourceFunc?, user_data: gpointer?, notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3368(job?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue, notify.rawValue)
    }
}

fun g_loadable_icon_get_type(): GType {
    return kniBridge3369()
}

fun g_loadable_icon_load(icon: CValuesRef<GLoadableIcon>?, size: Int, type: CValuesRef<CPointerVar<ByteVar>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3370(icon?.getPointer(memScope).rawValue, size, type?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_loadable_icon_load_async(icon: CValuesRef<GLoadableIcon>?, size: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3371(icon?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_loadable_icon_load_finish(icon: CValuesRef<GLoadableIcon>?, res: CValuesRef<GAsyncResult>?, type: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3372(icon?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_memory_input_stream_get_type(): GType {
    return kniBridge3373()
}

fun g_memory_input_stream_new(): CPointer<GInputStream>? {
    return interpretCPointer<GInputStream>(kniBridge3374())
}

fun g_memory_input_stream_new_from_data(data: CValuesRef<*>?, len: gssize, destroy: GDestroyNotify?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3375(data?.getPointer(memScope).rawValue, len, destroy.rawValue))
    }
}

fun g_memory_input_stream_new_from_bytes(bytes: CValuesRef<GBytes>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3376(bytes?.getPointer(memScope).rawValue))
    }
}

fun g_memory_input_stream_add_data(stream: CValuesRef<GMemoryInputStream>?, data: CValuesRef<*>?, len: gssize, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3377(stream?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len, destroy.rawValue)
    }
}

fun g_memory_input_stream_add_bytes(stream: CValuesRef<GMemoryInputStream>?, bytes: CValuesRef<GBytes>?): Unit {
    memScoped {
        return kniBridge3378(stream?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue)
    }
}

fun g_memory_output_stream_get_type(): GType {
    return kniBridge3379()
}

fun g_memory_output_stream_new(data: gpointer?, size: gsize, realloc_function: GReallocFunc?, destroy_function: GDestroyNotify?): CPointer<GOutputStream>? {
    return interpretCPointer<GOutputStream>(kniBridge3380(data.rawValue, size, realloc_function.rawValue, destroy_function.rawValue))
}

fun g_memory_output_stream_new_resizable(): CPointer<GOutputStream>? {
    return interpretCPointer<GOutputStream>(kniBridge3381())
}

fun g_memory_output_stream_get_data(ostream: CValuesRef<GMemoryOutputStream>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3382(ostream?.getPointer(memScope).rawValue))
    }
}

fun g_memory_output_stream_get_size(ostream: CValuesRef<GMemoryOutputStream>?): gsize {
    memScoped {
        return kniBridge3383(ostream?.getPointer(memScope).rawValue)
    }
}

fun g_memory_output_stream_get_data_size(ostream: CValuesRef<GMemoryOutputStream>?): gsize {
    memScoped {
        return kniBridge3384(ostream?.getPointer(memScope).rawValue)
    }
}

fun g_memory_output_stream_steal_data(ostream: CValuesRef<GMemoryOutputStream>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3385(ostream?.getPointer(memScope).rawValue))
    }
}

fun g_memory_output_stream_steal_as_bytes(ostream: CValuesRef<GMemoryOutputStream>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge3386(ostream?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_type(): GType {
    return kniBridge3387()
}

fun g_mount_get_root(mount: CValuesRef<GMount>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge3388(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_default_location(mount: CValuesRef<GMount>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge3389(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_name(mount: CValuesRef<GMount>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3390(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_icon(mount: CValuesRef<GMount>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3391(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_symbolic_icon(mount: CValuesRef<GMount>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3392(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_uuid(mount: CValuesRef<GMount>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3393(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_volume(mount: CValuesRef<GMount>?): CPointer<GVolume>? {
    memScoped {
        return interpretCPointer<GVolume>(kniBridge3394(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_drive(mount: CValuesRef<GMount>?): CPointer<GDrive>? {
    memScoped {
        return interpretCPointer<GDrive>(kniBridge3395(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_can_unmount(mount: CValuesRef<GMount>?): gboolean {
    memScoped {
        return kniBridge3396(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_can_eject(mount: CValuesRef<GMount>?): gboolean {
    memScoped {
        return kniBridge3397(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_unmount(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3398(mount?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_unmount_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3399(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_eject(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3400(mount?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_eject_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3401(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_remount(mount: CValuesRef<GMount>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3402(mount?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_remount_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3403(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_guess_content_type(mount: CValuesRef<GMount>?, force_rescan: gboolean, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3404(mount?.getPointer(memScope).rawValue, force_rescan, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_guess_content_type_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3405(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_mount_guess_content_type_sync(mount: CValuesRef<GMount>?, force_rescan: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3406(mount?.getPointer(memScope).rawValue, force_rescan, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_mount_is_shadowed(mount: CValuesRef<GMount>?): gboolean {
    memScoped {
        return kniBridge3407(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_shadow(mount: CValuesRef<GMount>?): Unit {
    memScoped {
        return kniBridge3408(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_unshadow(mount: CValuesRef<GMount>?): Unit {
    memScoped {
        return kniBridge3409(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_unmount_with_operation(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3410(mount?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_unmount_with_operation_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3411(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_eject_with_operation(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3412(mount?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_eject_with_operation_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3413(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_get_sort_key(mount: CValuesRef<GMount>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3414(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_get_type(): GType {
    return kniBridge3415()
}

fun g_mount_operation_new(): CPointer<GMountOperation>? {
    return interpretCPointer<GMountOperation>(kniBridge3416())
}

fun g_mount_operation_get_username(op: CValuesRef<GMountOperation>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3417(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_username(op: CValuesRef<GMountOperation>?, @CCall.CString username: String?): Unit {
    memScoped {
        return kniBridge3418(op?.getPointer(memScope).rawValue, username?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_get_password(op: CValuesRef<GMountOperation>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3419(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_password(op: CValuesRef<GMountOperation>?, @CCall.CString password: String?): Unit {
    memScoped {
        return kniBridge3420(op?.getPointer(memScope).rawValue, password?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_get_anonymous(op: CValuesRef<GMountOperation>?): gboolean {
    memScoped {
        return kniBridge3421(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_anonymous(op: CValuesRef<GMountOperation>?, anonymous: gboolean): Unit {
    memScoped {
        return kniBridge3422(op?.getPointer(memScope).rawValue, anonymous)
    }
}

fun g_mount_operation_get_domain(op: CValuesRef<GMountOperation>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3423(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_domain(op: CValuesRef<GMountOperation>?, @CCall.CString domain: String?): Unit {
    memScoped {
        return kniBridge3424(op?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_get_password_save(op: CValuesRef<GMountOperation>?): GPasswordSave {
    memScoped {
        return GPasswordSave.byValue(kniBridge3425(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_password_save(op: CValuesRef<GMountOperation>?, save: GPasswordSave): Unit {
    memScoped {
        return kniBridge3426(op?.getPointer(memScope).rawValue, save.value)
    }
}

fun g_mount_operation_get_choice(op: CValuesRef<GMountOperation>?): Int {
    memScoped {
        return kniBridge3427(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_choice(op: CValuesRef<GMountOperation>?, choice: Int): Unit {
    memScoped {
        return kniBridge3428(op?.getPointer(memScope).rawValue, choice)
    }
}

fun g_mount_operation_reply(op: CValuesRef<GMountOperation>?, result: GMountOperationResult): Unit {
    memScoped {
        return kniBridge3429(op?.getPointer(memScope).rawValue, result.value)
    }
}

fun g_mount_operation_get_is_tcrypt_hidden_volume(op: CValuesRef<GMountOperation>?): gboolean {
    memScoped {
        return kniBridge3430(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_is_tcrypt_hidden_volume(op: CValuesRef<GMountOperation>?, hidden_volume: gboolean): Unit {
    memScoped {
        return kniBridge3431(op?.getPointer(memScope).rawValue, hidden_volume)
    }
}

fun g_mount_operation_get_is_tcrypt_system_volume(op: CValuesRef<GMountOperation>?): gboolean {
    memScoped {
        return kniBridge3432(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_is_tcrypt_system_volume(op: CValuesRef<GMountOperation>?, system_volume: gboolean): Unit {
    memScoped {
        return kniBridge3433(op?.getPointer(memScope).rawValue, system_volume)
    }
}

fun g_mount_operation_get_pim(op: CValuesRef<GMountOperation>?): guint {
    memScoped {
        return kniBridge3434(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_pim(op: CValuesRef<GMountOperation>?, pim: guint): Unit {
    memScoped {
        return kniBridge3435(op?.getPointer(memScope).rawValue, pim)
    }
}

fun g_native_socket_address_get_type(): GType {
    return kniBridge3436()
}

fun g_native_socket_address_new(native: gpointer?, len: gsize): CPointer<GSocketAddress>? {
    return interpretCPointer<GSocketAddress>(kniBridge3437(native.rawValue, len))
}

fun g_volume_monitor_get_type(): GType {
    return kniBridge3438()
}

fun g_volume_monitor_get(): CPointer<GVolumeMonitor>? {
    return interpretCPointer<GVolumeMonitor>(kniBridge3439())
}

fun g_volume_monitor_get_connected_drives(volume_monitor: CValuesRef<GVolumeMonitor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3440(volume_monitor?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_volumes(volume_monitor: CValuesRef<GVolumeMonitor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3441(volume_monitor?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_mounts(volume_monitor: CValuesRef<GVolumeMonitor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3442(volume_monitor?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_volume_for_uuid(volume_monitor: CValuesRef<GVolumeMonitor>?, @CCall.CString uuid: String?): CPointer<GVolume>? {
    memScoped {
        return interpretCPointer<GVolume>(kniBridge3443(volume_monitor?.getPointer(memScope).rawValue, uuid?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_mount_for_uuid(volume_monitor: CValuesRef<GVolumeMonitor>?, @CCall.CString uuid: String?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge3444(volume_monitor?.getPointer(memScope).rawValue, uuid?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_adopt_orphan_mount(mount: CValuesRef<GMount>?): CPointer<GVolume>? {
    memScoped {
        return interpretCPointer<GVolume>(kniBridge3445(mount?.getPointer(memScope).rawValue))
    }
}

fun g_native_volume_monitor_get_type(): GType {
    return kniBridge3446()
}

fun g_network_address_get_type(): GType {
    return kniBridge3447()
}

fun g_network_address_new(@CCall.CString hostname: String?, port: guint16): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge3448(hostname?.cstr?.getPointer(memScope).rawValue, port))
    }
}

fun g_network_address_new_loopback(port: guint16): CPointer<GSocketConnectable>? {
    return interpretCPointer<GSocketConnectable>(kniBridge3449(port))
}

fun g_network_address_parse(@CCall.CString host_and_port: String?, default_port: guint16, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge3450(host_and_port?.cstr?.getPointer(memScope).rawValue, default_port, error?.getPointer(memScope).rawValue))
    }
}

fun g_network_address_parse_uri(@CCall.CString uri: String?, default_port: guint16, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge3451(uri?.cstr?.getPointer(memScope).rawValue, default_port, error?.getPointer(memScope).rawValue))
    }
}

fun g_network_address_get_hostname(addr: CValuesRef<GNetworkAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3452(addr?.getPointer(memScope).rawValue))
    }
}

fun g_network_address_get_port(addr: CValuesRef<GNetworkAddress>?): guint16 {
    memScoped {
        return kniBridge3453(addr?.getPointer(memScope).rawValue)
    }
}

fun g_network_address_get_scheme(addr: CValuesRef<GNetworkAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3454(addr?.getPointer(memScope).rawValue))
    }
}

fun g_network_monitor_get_type(): GType {
    return kniBridge3455()
}

fun g_network_monitor_get_default(): CPointer<GNetworkMonitor>? {
    return interpretCPointer<GNetworkMonitor>(kniBridge3456())
}

fun g_network_monitor_get_network_available(monitor: CValuesRef<GNetworkMonitor>?): gboolean {
    memScoped {
        return kniBridge3457(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_get_network_metered(monitor: CValuesRef<GNetworkMonitor>?): gboolean {
    memScoped {
        return kniBridge3458(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_get_connectivity(monitor: CValuesRef<GNetworkMonitor>?): GNetworkConnectivity {
    memScoped {
        return kniBridge3459(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_can_reach(monitor: CValuesRef<GNetworkMonitor>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3460(monitor?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_can_reach_async(monitor: CValuesRef<GNetworkMonitor>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3461(monitor?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_network_monitor_can_reach_finish(monitor: CValuesRef<GNetworkMonitor>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3462(monitor?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_network_service_get_type(): GType {
    return kniBridge3463()
}

fun g_network_service_new(@CCall.CString service: String?, @CCall.CString protocol: String?, @CCall.CString domain: String?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge3464(service?.cstr?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_service(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3465(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_protocol(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3466(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_domain(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3467(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_scheme(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3468(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_set_scheme(srv: CValuesRef<GNetworkService>?, @CCall.CString scheme: String?): Unit {
    memScoped {
        return kniBridge3469(srv?.getPointer(memScope).rawValue, scheme?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_type(): GType {
    return kniBridge3470()
}

fun g_permission_acquire(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3471(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_acquire_async(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3472(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_permission_acquire_finish(permission: CValuesRef<GPermission>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3473(permission?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_release(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3474(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_release_async(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3475(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_permission_release_finish(permission: CValuesRef<GPermission>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3476(permission?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_allowed(permission: CValuesRef<GPermission>?): gboolean {
    memScoped {
        return kniBridge3477(permission?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_can_acquire(permission: CValuesRef<GPermission>?): gboolean {
    memScoped {
        return kniBridge3478(permission?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_can_release(permission: CValuesRef<GPermission>?): gboolean {
    memScoped {
        return kniBridge3479(permission?.getPointer(memScope).rawValue)
    }
}

fun g_permission_impl_update(permission: CValuesRef<GPermission>?, allowed: gboolean, can_acquire: gboolean, can_release: gboolean): Unit {
    memScoped {
        return kniBridge3480(permission?.getPointer(memScope).rawValue, allowed, can_acquire, can_release)
    }
}

fun g_pollable_input_stream_get_type(): GType {
    return kniBridge3481()
}

fun g_pollable_input_stream_can_poll(stream: CValuesRef<GPollableInputStream>?): gboolean {
    memScoped {
        return kniBridge3482(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_input_stream_is_readable(stream: CValuesRef<GPollableInputStream>?): gboolean {
    memScoped {
        return kniBridge3483(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_input_stream_create_source(stream: CValuesRef<GPollableInputStream>?, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge3484(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_input_stream_read_nonblocking(stream: CValuesRef<GPollableInputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3485(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_get_type(): GType {
    return kniBridge3486()
}

fun g_pollable_output_stream_can_poll(stream: CValuesRef<GPollableOutputStream>?): gboolean {
    memScoped {
        return kniBridge3487(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_is_writable(stream: CValuesRef<GPollableOutputStream>?): gboolean {
    memScoped {
        return kniBridge3488(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_create_source(stream: CValuesRef<GPollableOutputStream>?, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge3489(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_output_stream_write_nonblocking(stream: CValuesRef<GPollableOutputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3490(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_writev_nonblocking(stream: CValuesRef<GPollableOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GPollableReturn {
    memScoped {
        return kniBridge3491(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_source_new(pollable_stream: CValuesRef<GObject>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge3492(pollable_stream?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_source_new_full(pollable_stream: gpointer?, child_source: CValuesRef<GSource>?, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge3493(pollable_stream.rawValue, child_source?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_stream_read(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3494(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_stream_write(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3495(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_stream_write_all(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, blocking: gboolean, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3496(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, blocking, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_property_action_get_type(): GType {
    return kniBridge3497()
}

fun g_property_action_new(@CCall.CString name: String?, `object`: gpointer?, @CCall.CString property_name: String?): CPointer<GPropertyAction>? {
    memScoped {
        return interpretCPointer<GPropertyAction>(kniBridge3498(name?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_get_type(): GType {
    return kniBridge3499()
}

fun g_proxy_get_default_for_protocol(@CCall.CString protocol: String?): CPointer<GProxy>? {
    memScoped {
        return interpretCPointer<GProxy>(kniBridge3500(protocol?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_connect(proxy: CValuesRef<GProxy>?, connection: CValuesRef<GIOStream>?, proxy_address: CValuesRef<GProxyAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge3501(proxy?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, proxy_address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_connect_async(proxy: CValuesRef<GProxy>?, connection: CValuesRef<GIOStream>?, proxy_address: CValuesRef<GProxyAddress>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3502(proxy?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, proxy_address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_proxy_connect_finish(proxy: CValuesRef<GProxy>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge3503(proxy?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_supports_hostname(proxy: CValuesRef<GProxy>?): gboolean {
    memScoped {
        return kniBridge3504(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_proxy_address_get_type(): GType {
    return kniBridge3505()
}

fun g_proxy_address_new(inetaddr: CValuesRef<GInetAddress>?, port: guint16, @CCall.CString protocol: String?, @CCall.CString dest_hostname: String?, dest_port: guint16, @CCall.CString username: String?, @CCall.CString password: String?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3506(inetaddr?.getPointer(memScope).rawValue, port, protocol?.cstr?.getPointer(memScope).rawValue, dest_hostname?.cstr?.getPointer(memScope).rawValue, dest_port, username?.cstr?.getPointer(memScope).rawValue, password?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_protocol(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3507(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_destination_protocol(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3508(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_destination_hostname(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3509(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_destination_port(proxy: CValuesRef<GProxyAddress>?): guint16 {
    memScoped {
        return kniBridge3510(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_proxy_address_get_username(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3511(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_password(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3512(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_uri(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3513(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_socket_address_enumerator_get_type(): GType {
    return kniBridge3514()
}

fun g_socket_address_enumerator_next(enumerator: CValuesRef<GSocketAddressEnumerator>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3515(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_address_enumerator_next_async(enumerator: CValuesRef<GSocketAddressEnumerator>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3516(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_address_enumerator_next_finish(enumerator: CValuesRef<GSocketAddressEnumerator>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3517(enumerator?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_enumerator_get_type(): GType {
    return kniBridge3518()
}

fun g_proxy_resolver_get_type(): GType {
    return kniBridge3519()
}

fun g_proxy_resolver_get_default(): CPointer<GProxyResolver>? {
    return interpretCPointer<GProxyResolver>(kniBridge3520())
}

fun g_proxy_resolver_is_supported(resolver: CValuesRef<GProxyResolver>?): gboolean {
    memScoped {
        return kniBridge3521(resolver?.getPointer(memScope).rawValue)
    }
}

fun g_proxy_resolver_lookup(resolver: CValuesRef<GProxyResolver>?, @CCall.CString uri: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3522(resolver?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_resolver_lookup_async(resolver: CValuesRef<GProxyResolver>?, @CCall.CString uri: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3523(resolver?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_proxy_resolver_lookup_finish(resolver: CValuesRef<GProxyResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3524(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_get_type(): GType {
    return kniBridge3525()
}

fun g_resolver_get_default(): CPointer<GResolver>? {
    return interpretCPointer<GResolver>(kniBridge3526())
}

fun g_resolver_set_default(resolver: CValuesRef<GResolver>?): Unit {
    memScoped {
        return kniBridge3527(resolver?.getPointer(memScope).rawValue)
    }
}

fun g_resolver_lookup_by_name(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3528(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_name_async(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3529(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_by_name_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3530(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_name_with_flags_async(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, flags: GResolverNameLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3531(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_by_name_with_flags_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3532(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_name_with_flags(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, flags: GResolverNameLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3533(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_free_addresses(addresses: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge3534(addresses?.getPointer(memScope).rawValue)
    }
}

fun g_resolver_lookup_by_address(resolver: CValuesRef<GResolver>?, address: CValuesRef<GInetAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3535(resolver?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_address_async(resolver: CValuesRef<GResolver>?, address: CValuesRef<GInetAddress>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3536(resolver?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_by_address_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3537(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_service(resolver: CValuesRef<GResolver>?, @CCall.CString service: String?, @CCall.CString protocol: String?, @CCall.CString domain: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3538(resolver?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_service_async(resolver: CValuesRef<GResolver>?, @CCall.CString service: String?, @CCall.CString protocol: String?, @CCall.CString domain: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3539(resolver?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_service_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3540(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_records(resolver: CValuesRef<GResolver>?, @CCall.CString rrname: String?, record_type: GResolverRecordType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3541(resolver?.getPointer(memScope).rawValue, rrname?.cstr?.getPointer(memScope).rawValue, record_type, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_records_async(resolver: CValuesRef<GResolver>?, @CCall.CString rrname: String?, record_type: GResolverRecordType, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3542(resolver?.getPointer(memScope).rawValue, rrname?.cstr?.getPointer(memScope).rawValue, record_type, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_records_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3543(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_free_targets(targets: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge3544(targets?.getPointer(memScope).rawValue)
    }
}

fun g_resolver_error_quark(): GQuark {
    return kniBridge3545()
}

fun g_resource_error_quark(): GQuark {
    return kniBridge3546()
}

fun g_resource_get_type(): GType {
    return kniBridge3547()
}

fun g_resource_new_from_data(data: CValuesRef<GBytes>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge3548(data?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_ref(resource: CValuesRef<GResource>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge3549(resource?.getPointer(memScope).rawValue))
    }
}

fun g_resource_unref(resource: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge3550(resource?.getPointer(memScope).rawValue)
    }
}

fun g_resource_load(@CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge3551(filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_open_stream(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3552(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_lookup_data(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge3553(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_enumerate_children(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge3554(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_get_info(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, size: CValuesRef<gsizeVar>?, flags: CValuesRef<guint32Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3555(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, size?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_resources_register(resource: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge3556(resource?.getPointer(memScope).rawValue)
    }
}

fun g_resources_unregister(resource: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge3557(resource?.getPointer(memScope).rawValue)
    }
}

fun g_resources_open_stream(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3558(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resources_lookup_data(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge3559(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resources_enumerate_children(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge3560(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resources_get_info(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, size: CValuesRef<gsizeVar>?, flags: CValuesRef<guint32Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3561(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, size?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_static_resource_init(static_resource: CValuesRef<GStaticResource>?): Unit {
    memScoped {
        return kniBridge3562(static_resource?.getPointer(memScope).rawValue)
    }
}

fun g_static_resource_fini(static_resource: CValuesRef<GStaticResource>?): Unit {
    memScoped {
        return kniBridge3563(static_resource?.getPointer(memScope).rawValue)
    }
}

fun g_static_resource_get_resource(static_resource: CValuesRef<GStaticResource>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge3564(static_resource?.getPointer(memScope).rawValue))
    }
}

fun g_seekable_get_type(): GType {
    return kniBridge3565()
}

fun g_seekable_tell(seekable: CValuesRef<GSeekable>?): goffset {
    memScoped {
        return kniBridge3566(seekable?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_can_seek(seekable: CValuesRef<GSeekable>?): gboolean {
    memScoped {
        return kniBridge3567(seekable?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_seek(seekable: CValuesRef<GSeekable>?, offset: goffset, type: GSeekType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3568(seekable?.getPointer(memScope).rawValue, offset, type.value, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_can_truncate(seekable: CValuesRef<GSeekable>?): gboolean {
    memScoped {
        return kniBridge3569(seekable?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_truncate(seekable: CValuesRef<GSeekable>?, offset: goffset, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3570(seekable?.getPointer(memScope).rawValue, offset, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_source_get_type(): GType {
    return kniBridge3571()
}

fun g_settings_schema_source_get_default(): CPointer<GSettingsSchemaSource>? {
    return interpretCPointer<GSettingsSchemaSource>(kniBridge3572())
}

fun g_settings_schema_source_ref(source: CValuesRef<GSettingsSchemaSource>?): CPointer<GSettingsSchemaSource>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaSource>(kniBridge3573(source?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_source_unref(source: CValuesRef<GSettingsSchemaSource>?): Unit {
    memScoped {
        return kniBridge3574(source?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_source_new_from_directory(@CCall.CString directory: String?, parent: CValuesRef<GSettingsSchemaSource>?, trusted: gboolean, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSettingsSchemaSource>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaSource>(kniBridge3575(directory?.cstr?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, trusted, error?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_source_lookup(source: CValuesRef<GSettingsSchemaSource>?, @CCall.CString schema_id: String?, recursive: gboolean): CPointer<GSettingsSchema>? {
    memScoped {
        return interpretCPointer<GSettingsSchema>(kniBridge3576(source?.getPointer(memScope).rawValue, schema_id?.cstr?.getPointer(memScope).rawValue, recursive))
    }
}

fun g_settings_schema_source_list_schemas(source: CValuesRef<GSettingsSchemaSource>?, recursive: gboolean, non_relocatable: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, relocatable: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?): Unit {
    memScoped {
        return kniBridge3577(source?.getPointer(memScope).rawValue, recursive, non_relocatable?.getPointer(memScope).rawValue, relocatable?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_get_type(): GType {
    return kniBridge3578()
}

fun g_settings_schema_ref(schema: CValuesRef<GSettingsSchema>?): CPointer<GSettingsSchema>? {
    memScoped {
        return interpretCPointer<GSettingsSchema>(kniBridge3579(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_unref(schema: CValuesRef<GSettingsSchema>?): Unit {
    memScoped {
        return kniBridge3580(schema?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_get_id(schema: CValuesRef<GSettingsSchema>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3581(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_get_path(schema: CValuesRef<GSettingsSchema>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3582(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_get_key(schema: CValuesRef<GSettingsSchema>?, @CCall.CString name: String?): CPointer<GSettingsSchemaKey>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaKey>(kniBridge3583(schema?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_has_key(schema: CValuesRef<GSettingsSchema>?, @CCall.CString name: String?): gboolean {
    memScoped {
        return kniBridge3584(schema?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_list_keys(schema: CValuesRef<GSettingsSchema>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3585(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_list_children(schema: CValuesRef<GSettingsSchema>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3586(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_type(): GType {
    return kniBridge3587()
}

fun g_settings_schema_key_ref(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GSettingsSchemaKey>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaKey>(kniBridge3588(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_unref(key: CValuesRef<GSettingsSchemaKey>?): Unit {
    memScoped {
        return kniBridge3589(key?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_key_get_value_type(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge3590(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_default_value(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3591(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_range(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3592(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_range_check(key: CValuesRef<GSettingsSchemaKey>?, value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge3593(key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_key_get_name(key: CValuesRef<GSettingsSchemaKey>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3594(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_summary(key: CValuesRef<GSettingsSchemaKey>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3595(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_description(key: CValuesRef<GSettingsSchemaKey>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3596(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_type(): GType {
    return kniBridge3597()
}

fun g_settings_list_schemas(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3598())
}

fun g_settings_list_relocatable_schemas(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3599())
}

fun g_settings_new(@CCall.CString schema_id: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge3600(schema_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_with_path(@CCall.CString schema_id: String?, @CCall.CString path: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge3601(schema_id?.cstr?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_with_backend(@CCall.CString schema_id: String?, backend: CValuesRef<GSettingsBackend>?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge3602(schema_id?.cstr?.getPointer(memScope).rawValue, backend?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_with_backend_and_path(@CCall.CString schema_id: String?, backend: CValuesRef<GSettingsBackend>?, @CCall.CString path: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge3603(schema_id?.cstr?.getPointer(memScope).rawValue, backend?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_full(schema: CValuesRef<GSettingsSchema>?, backend: CValuesRef<GSettingsBackend>?, @CCall.CString path: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge3604(schema?.getPointer(memScope).rawValue, backend?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_list_children(settings: CValuesRef<GSettings>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3605(settings?.getPointer(memScope).rawValue))
    }
}

fun g_settings_list_keys(settings: CValuesRef<GSettings>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3606(settings?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_range(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3607(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_range_check(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge3608(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge3609(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3610(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_user_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3611(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_default_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3612(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources60")
external fun g_settings_set(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, @CCall.CString format: String?, vararg variadicArguments: Any?): gboolean

@CCall("knifunptr_glibresources61")
external fun g_settings_get(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_settings_reset(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): Unit {
    memScoped {
        return kniBridge3613(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_int(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gint {
    memScoped {
        return kniBridge3614(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_int(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gint): gboolean {
    memScoped {
        return kniBridge3615(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_int64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gint64 {
    memScoped {
        return kniBridge3616(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_int64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gint64): gboolean {
    memScoped {
        return kniBridge3617(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_uint(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): guint {
    memScoped {
        return kniBridge3618(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_uint(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: guint): gboolean {
    memScoped {
        return kniBridge3619(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_uint64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): guint64 {
    memScoped {
        return kniBridge3620(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_uint64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: guint64): gboolean {
    memScoped {
        return kniBridge3621(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_string(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3622(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_set_string(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, @CCall.CString value: String?): gboolean {
    memScoped {
        return kniBridge3623(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_boolean(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gboolean {
    memScoped {
        return kniBridge3624(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_boolean(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gboolean): gboolean {
    memScoped {
        return kniBridge3625(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_double(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gdouble {
    memScoped {
        return kniBridge3626(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_double(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gdouble): gboolean {
    memScoped {
        return kniBridge3627(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_strv(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3628(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_set_strv(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge3629(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_enum(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gint {
    memScoped {
        return kniBridge3630(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_enum(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gint): gboolean {
    memScoped {
        return kniBridge3631(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_flags(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): guint {
    memScoped {
        return kniBridge3632(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_flags(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: guint): gboolean {
    memScoped {
        return kniBridge3633(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_child(settings: CValuesRef<GSettings>?, @CCall.CString name: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge3634(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_is_writable(settings: CValuesRef<GSettings>?, @CCall.CString name: String?): gboolean {
    memScoped {
        return kniBridge3635(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_delay(settings: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge3636(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_apply(settings: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge3637(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_revert(settings: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge3638(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_has_unapplied(settings: CValuesRef<GSettings>?): gboolean {
    memScoped {
        return kniBridge3639(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_sync(): Unit {
    return kniBridge3640()
}

fun g_settings_bind(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, `object`: gpointer?, @CCall.CString property: String?, flags: GSettingsBindFlags): Unit {
    memScoped {
        return kniBridge3641(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue, flags)
    }
}

fun g_settings_bind_with_mapping(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, `object`: gpointer?, @CCall.CString property: String?, flags: GSettingsBindFlags, get_mapping: GSettingsBindGetMapping?, set_mapping: GSettingsBindSetMapping?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3642(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue, flags, get_mapping.rawValue, set_mapping.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun g_settings_bind_writable(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, `object`: gpointer?, @CCall.CString property: String?, inverted: gboolean): Unit {
    memScoped {
        return kniBridge3643(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue, inverted)
    }
}

fun g_settings_unbind(`object`: gpointer?, @CCall.CString property: String?): Unit {
    memScoped {
        return kniBridge3644(`object`.rawValue, property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_create_action(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GAction>? {
    memScoped {
        return interpretCPointer<GAction>(kniBridge3645(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_mapped(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, mapping: GSettingsGetMapping?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3646(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, mapping.rawValue, user_data.rawValue))
    }
}

fun g_simple_action_get_type(): GType {
    return kniBridge3647()
}

fun g_simple_action_new(@CCall.CString name: String?, parameter_type: CValuesRef<GVariantType>?): CPointer<GSimpleAction>? {
    memScoped {
        return interpretCPointer<GSimpleAction>(kniBridge3648(name?.cstr?.getPointer(memScope).rawValue, parameter_type?.getPointer(memScope).rawValue))
    }
}

fun g_simple_action_new_stateful(@CCall.CString name: String?, parameter_type: CValuesRef<GVariantType>?, state: CValuesRef<GVariant>?): CPointer<GSimpleAction>? {
    memScoped {
        return interpretCPointer<GSimpleAction>(kniBridge3649(name?.cstr?.getPointer(memScope).rawValue, parameter_type?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue))
    }
}

fun g_simple_action_set_enabled(simple: CValuesRef<GSimpleAction>?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge3650(simple?.getPointer(memScope).rawValue, enabled)
    }
}

fun g_simple_action_set_state(simple: CValuesRef<GSimpleAction>?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge3651(simple?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_set_state_hint(simple: CValuesRef<GSimpleAction>?, state_hint: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge3652(simple?.getPointer(memScope).rawValue, state_hint?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_group_get_type(): GType {
    return kniBridge3653()
}

fun g_simple_action_group_new(): CPointer<GSimpleActionGroup>? {
    return interpretCPointer<GSimpleActionGroup>(kniBridge3654())
}

fun g_simple_action_group_lookup(simple: CValuesRef<GSimpleActionGroup>?, @CCall.CString action_name: String?): CPointer<GAction>? {
    memScoped {
        return interpretCPointer<GAction>(kniBridge3655(simple?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_simple_action_group_insert(simple: CValuesRef<GSimpleActionGroup>?, action: CValuesRef<GAction>?): Unit {
    memScoped {
        return kniBridge3656(simple?.getPointer(memScope).rawValue, action?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_group_remove(simple: CValuesRef<GSimpleActionGroup>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge3657(simple?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_group_add_entries(simple: CValuesRef<GSimpleActionGroup>?, entries: CValuesRef<GActionEntry>?, n_entries: gint, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3658(simple?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, n_entries, user_data.rawValue)
    }
}

fun g_simple_async_result_get_type(): GType {
    return kniBridge3659()
}

fun g_simple_async_result_new(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, source_tag: gpointer?): CPointer<GSimpleAsyncResult>? {
    memScoped {
        return interpretCPointer<GSimpleAsyncResult>(kniBridge3660(source_object?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, source_tag.rawValue))
    }
}

@CCall("knifunptr_glibresources62")
external fun g_simple_async_result_new_error(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): CPointer<GSimpleAsyncResult>?

fun g_simple_async_result_new_from_error(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): CPointer<GSimpleAsyncResult>? {
    memScoped {
        return interpretCPointer<GSimpleAsyncResult>(kniBridge3661(source_object?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_new_take_error(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): CPointer<GSimpleAsyncResult>? {
    memScoped {
        return interpretCPointer<GSimpleAsyncResult>(kniBridge3662(source_object?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_set_op_res_gpointer(simple: CValuesRef<GSimpleAsyncResult>?, op_res: gpointer?, destroy_op_res: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3663(simple?.getPointer(memScope).rawValue, op_res.rawValue, destroy_op_res.rawValue)
    }
}

fun g_simple_async_result_get_op_res_gpointer(simple: CValuesRef<GSimpleAsyncResult>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3664(simple?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_set_op_res_gssize(simple: CValuesRef<GSimpleAsyncResult>?, op_res: gssize): Unit {
    memScoped {
        return kniBridge3665(simple?.getPointer(memScope).rawValue, op_res)
    }
}

fun g_simple_async_result_get_op_res_gssize(simple: CValuesRef<GSimpleAsyncResult>?): gssize {
    memScoped {
        return kniBridge3666(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_set_op_res_gboolean(simple: CValuesRef<GSimpleAsyncResult>?, op_res: gboolean): Unit {
    memScoped {
        return kniBridge3667(simple?.getPointer(memScope).rawValue, op_res)
    }
}

fun g_simple_async_result_get_op_res_gboolean(simple: CValuesRef<GSimpleAsyncResult>?): gboolean {
    memScoped {
        return kniBridge3668(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_set_check_cancellable(simple: CValuesRef<GSimpleAsyncResult>?, check_cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge3669(simple?.getPointer(memScope).rawValue, check_cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_get_source_tag(simple: CValuesRef<GSimpleAsyncResult>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3670(simple?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_set_handle_cancellation(simple: CValuesRef<GSimpleAsyncResult>?, handle_cancellation: gboolean): Unit {
    memScoped {
        return kniBridge3671(simple?.getPointer(memScope).rawValue, handle_cancellation)
    }
}

fun g_simple_async_result_complete(simple: CValuesRef<GSimpleAsyncResult>?): Unit {
    memScoped {
        return kniBridge3672(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_complete_in_idle(simple: CValuesRef<GSimpleAsyncResult>?): Unit {
    memScoped {
        return kniBridge3673(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_run_in_thread(simple: CValuesRef<GSimpleAsyncResult>?, func: GSimpleAsyncThreadFunc?, io_priority: Int, cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge3674(simple?.getPointer(memScope).rawValue, func.rawValue, io_priority, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_set_from_error(simple: CValuesRef<GSimpleAsyncResult>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge3675(simple?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_take_error(simple: CValuesRef<GSimpleAsyncResult>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge3676(simple?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_propagate_error(simple: CValuesRef<GSimpleAsyncResult>?, dest: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3677(simple?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources63")
external fun g_simple_async_result_set_error(simple: CValuesRef<GSimpleAsyncResult>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_simple_async_result_set_error_va(simple: CValuesRef<GSimpleAsyncResult>?, domain: GQuark, code: gint, @CCall.CString format: String?, args: va_list?): Unit {
    memScoped {
        return kniBridge3678(simple?.getPointer(memScope).rawValue, domain, code, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_simple_async_result_is_valid(result: CValuesRef<GAsyncResult>?, source: CValuesRef<GObject>?, source_tag: gpointer?): gboolean {
    memScoped {
        return kniBridge3679(result?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, source_tag.rawValue)
    }
}

@CCall("knifunptr_glibresources64")
external fun g_simple_async_report_error_in_idle(`object`: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_simple_async_report_gerror_in_idle(`object`: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge3680(`object`?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_report_take_gerror_in_idle(`object`: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge3681(`object`?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_io_stream_get_type(): GType {
    return kniBridge3682()
}

fun g_simple_io_stream_new(input_stream: CValuesRef<GInputStream>?, output_stream: CValuesRef<GOutputStream>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge3683(input_stream?.getPointer(memScope).rawValue, output_stream?.getPointer(memScope).rawValue))
    }
}

fun g_simple_permission_get_type(): GType {
    return kniBridge3684()
}

fun g_simple_permission_new(allowed: gboolean): CPointer<GPermission>? {
    return interpretCPointer<GPermission>(kniBridge3685(allowed))
}

fun g_socket_client_get_type(): GType {
    return kniBridge3686()
}

fun g_socket_client_new(): CPointer<GSocketClient>? {
    return interpretCPointer<GSocketClient>(kniBridge3687())
}

fun g_socket_client_get_family(client: CValuesRef<GSocketClient>?): GSocketFamily {
    memScoped {
        return kniBridge3688(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_family(client: CValuesRef<GSocketClient>?, family: GSocketFamily): Unit {
    memScoped {
        return kniBridge3689(client?.getPointer(memScope).rawValue, family)
    }
}

fun g_socket_client_get_socket_type(client: CValuesRef<GSocketClient>?): GSocketType {
    memScoped {
        return GSocketType.byValue(kniBridge3690(client?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_set_socket_type(client: CValuesRef<GSocketClient>?, type: GSocketType): Unit {
    memScoped {
        return kniBridge3691(client?.getPointer(memScope).rawValue, type.value)
    }
}

fun g_socket_client_get_protocol(client: CValuesRef<GSocketClient>?): GSocketProtocol {
    memScoped {
        return kniBridge3692(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_protocol(client: CValuesRef<GSocketClient>?, protocol: GSocketProtocol): Unit {
    memScoped {
        return kniBridge3693(client?.getPointer(memScope).rawValue, protocol)
    }
}

fun g_socket_client_get_local_address(client: CValuesRef<GSocketClient>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3694(client?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_set_local_address(client: CValuesRef<GSocketClient>?, address: CValuesRef<GSocketAddress>?): Unit {
    memScoped {
        return kniBridge3695(client?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_get_timeout(client: CValuesRef<GSocketClient>?): guint {
    memScoped {
        return kniBridge3696(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_timeout(client: CValuesRef<GSocketClient>?, timeout: guint): Unit {
    memScoped {
        return kniBridge3697(client?.getPointer(memScope).rawValue, timeout)
    }
}

fun g_socket_client_get_enable_proxy(client: CValuesRef<GSocketClient>?): gboolean {
    memScoped {
        return kniBridge3698(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_enable_proxy(client: CValuesRef<GSocketClient>?, enable: gboolean): Unit {
    memScoped {
        return kniBridge3699(client?.getPointer(memScope).rawValue, enable)
    }
}

fun g_socket_client_get_tls(client: CValuesRef<GSocketClient>?): gboolean {
    memScoped {
        return kniBridge3700(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_tls(client: CValuesRef<GSocketClient>?, tls: gboolean): Unit {
    memScoped {
        return kniBridge3701(client?.getPointer(memScope).rawValue, tls)
    }
}

fun g_socket_client_get_tls_validation_flags(client: CValuesRef<GSocketClient>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge3702(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_tls_validation_flags(client: CValuesRef<GSocketClient>?, flags: GTlsCertificateFlags): Unit {
    memScoped {
        return kniBridge3703(client?.getPointer(memScope).rawValue, flags)
    }
}

fun g_socket_client_get_proxy_resolver(client: CValuesRef<GSocketClient>?): CPointer<GProxyResolver>? {
    memScoped {
        return interpretCPointer<GProxyResolver>(kniBridge3704(client?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_set_proxy_resolver(client: CValuesRef<GSocketClient>?, proxy_resolver: CValuesRef<GProxyResolver>?): Unit {
    memScoped {
        return kniBridge3705(client?.getPointer(memScope).rawValue, proxy_resolver?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_connect(client: CValuesRef<GSocketClient>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3706(client?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_host(client: CValuesRef<GSocketClient>?, @CCall.CString host_and_port: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3707(client?.getPointer(memScope).rawValue, host_and_port?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_service(client: CValuesRef<GSocketClient>?, @CCall.CString domain: String?, @CCall.CString service: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3708(client?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_uri(client: CValuesRef<GSocketClient>?, @CCall.CString uri: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3709(client?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_async(client: CValuesRef<GSocketClient>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3710(client?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3711(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_host_async(client: CValuesRef<GSocketClient>?, @CCall.CString host_and_port: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3712(client?.getPointer(memScope).rawValue, host_and_port?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_to_host_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3713(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_service_async(client: CValuesRef<GSocketClient>?, @CCall.CString domain: String?, @CCall.CString service: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3714(client?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_to_service_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3715(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_uri_async(client: CValuesRef<GSocketClient>?, @CCall.CString uri: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3716(client?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_to_uri_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3717(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_add_application_proxy(client: CValuesRef<GSocketClient>?, @CCall.CString protocol: String?): Unit {
    memScoped {
        return kniBridge3718(client?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connectable_get_type(): GType {
    return kniBridge3719()
}

fun g_socket_connectable_enumerate(connectable: CValuesRef<GSocketConnectable>?): CPointer<GSocketAddressEnumerator>? {
    memScoped {
        return interpretCPointer<GSocketAddressEnumerator>(kniBridge3720(connectable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connectable_proxy_enumerate(connectable: CValuesRef<GSocketConnectable>?): CPointer<GSocketAddressEnumerator>? {
    memScoped {
        return interpretCPointer<GSocketAddressEnumerator>(kniBridge3721(connectable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connectable_to_string(connectable: CValuesRef<GSocketConnectable>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3722(connectable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_type(): GType {
    return kniBridge3723()
}

fun g_socket_new(family: GSocketFamily, type: GSocketType, protocol: GSocketProtocol, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge3724(family, type.value, protocol, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_new_from_fd(fd: gint, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge3725(fd, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_fd(socket: CValuesRef<GSocket>?): Int {
    memScoped {
        return kniBridge3726(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_family(socket: CValuesRef<GSocket>?): GSocketFamily {
    memScoped {
        return kniBridge3727(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_socket_type(socket: CValuesRef<GSocket>?): GSocketType {
    memScoped {
        return GSocketType.byValue(kniBridge3728(socket?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_protocol(socket: CValuesRef<GSocket>?): GSocketProtocol {
    memScoped {
        return kniBridge3729(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_local_address(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3730(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_remote_address(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3731(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_set_blocking(socket: CValuesRef<GSocket>?, blocking: gboolean): Unit {
    memScoped {
        return kniBridge3732(socket?.getPointer(memScope).rawValue, blocking)
    }
}

fun g_socket_get_blocking(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3733(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_keepalive(socket: CValuesRef<GSocket>?, keepalive: gboolean): Unit {
    memScoped {
        return kniBridge3734(socket?.getPointer(memScope).rawValue, keepalive)
    }
}

fun g_socket_get_keepalive(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3735(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_listen_backlog(socket: CValuesRef<GSocket>?): gint {
    memScoped {
        return kniBridge3736(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_listen_backlog(socket: CValuesRef<GSocket>?, backlog: gint): Unit {
    memScoped {
        return kniBridge3737(socket?.getPointer(memScope).rawValue, backlog)
    }
}

fun g_socket_get_timeout(socket: CValuesRef<GSocket>?): guint {
    memScoped {
        return kniBridge3738(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_timeout(socket: CValuesRef<GSocket>?, timeout: guint): Unit {
    memScoped {
        return kniBridge3739(socket?.getPointer(memScope).rawValue, timeout)
    }
}

fun g_socket_get_ttl(socket: CValuesRef<GSocket>?): guint {
    memScoped {
        return kniBridge3740(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_ttl(socket: CValuesRef<GSocket>?, ttl: guint): Unit {
    memScoped {
        return kniBridge3741(socket?.getPointer(memScope).rawValue, ttl)
    }
}

fun g_socket_get_broadcast(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3742(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_broadcast(socket: CValuesRef<GSocket>?, broadcast: gboolean): Unit {
    memScoped {
        return kniBridge3743(socket?.getPointer(memScope).rawValue, broadcast)
    }
}

fun g_socket_get_multicast_loopback(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3744(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_multicast_loopback(socket: CValuesRef<GSocket>?, loopback: gboolean): Unit {
    memScoped {
        return kniBridge3745(socket?.getPointer(memScope).rawValue, loopback)
    }
}

fun g_socket_get_multicast_ttl(socket: CValuesRef<GSocket>?): guint {
    memScoped {
        return kniBridge3746(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_multicast_ttl(socket: CValuesRef<GSocket>?, ttl: guint): Unit {
    memScoped {
        return kniBridge3747(socket?.getPointer(memScope).rawValue, ttl)
    }
}

fun g_socket_is_connected(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3748(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_bind(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, allow_reuse: gboolean, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3749(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, allow_reuse, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_join_multicast_group(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: gboolean, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3750(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_leave_multicast_group(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: gboolean, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3751(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_join_multicast_group_ssm(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: CValuesRef<GInetAddress>?, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3752(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific?.getPointer(memScope).rawValue, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_leave_multicast_group_ssm(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: CValuesRef<GInetAddress>?, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3753(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific?.getPointer(memScope).rawValue, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connect(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3754(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_check_connect_result(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3755(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_available_bytes(socket: CValuesRef<GSocket>?): gssize {
    memScoped {
        return kniBridge3756(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_condition_check(socket: CValuesRef<GSocket>?, condition: GIOCondition): GIOCondition {
    memScoped {
        return kniBridge3757(socket?.getPointer(memScope).rawValue, condition)
    }
}

fun g_socket_condition_wait(socket: CValuesRef<GSocket>?, condition: GIOCondition, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3758(socket?.getPointer(memScope).rawValue, condition, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_condition_timed_wait(socket: CValuesRef<GSocket>?, condition: GIOCondition, timeout_us: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3759(socket?.getPointer(memScope).rawValue, condition, timeout_us, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_accept(socket: CValuesRef<GSocket>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge3760(socket?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listen(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3761(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive(socket: CValuesRef<GSocket>?, buffer: CValuesRef<gcharVar>?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3762(socket?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive_from(socket: CValuesRef<GSocket>?, address: CValuesRef<CPointerVar<GSocketAddress>>?, buffer: CValuesRef<gcharVar>?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3763(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send(socket: CValuesRef<GSocket>?, @CCall.CString buffer: String?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3764(socket?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_to(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, @CCall.CString buffer: String?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3765(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive_message(socket: CValuesRef<GSocket>?, address: CValuesRef<CPointerVar<GSocketAddress>>?, vectors: CValuesRef<GInputVector>?, num_vectors: gint, messages: CValuesRef<CPointerVar<CPointerVar<GSocketControlMessage>>>?, num_messages: CValuesRef<gintVar>?, flags: CValuesRef<gintVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3766(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, num_vectors, messages?.getPointer(memScope).rawValue, num_messages?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_message(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, vectors: CValuesRef<GOutputVector>?, num_vectors: gint, messages: CValuesRef<CPointerVar<GSocketControlMessage>>?, num_messages: gint, flags: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3767(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, num_vectors, messages?.getPointer(memScope).rawValue, num_messages, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive_messages(socket: CValuesRef<GSocket>?, messages: CValuesRef<GInputMessage>?, num_messages: guint, flags: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge3768(socket?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_messages(socket: CValuesRef<GSocket>?, messages: CValuesRef<GOutputMessage>?, num_messages: guint, flags: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge3769(socket?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_close(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3770(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_shutdown(socket: CValuesRef<GSocket>?, shutdown_read: gboolean, shutdown_write: gboolean, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3771(socket?.getPointer(memScope).rawValue, shutdown_read, shutdown_write, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_is_closed(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3772(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_create_source(socket: CValuesRef<GSocket>?, condition: GIOCondition, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge3773(socket?.getPointer(memScope).rawValue, condition, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_speaks_ipv4(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge3774(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_credentials(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GCredentials>? {
    memScoped {
        return interpretCPointer<GCredentials>(kniBridge3775(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_receive_with_blocking(socket: CValuesRef<GSocket>?, buffer: CValuesRef<gcharVar>?, size: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3776(socket?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, size, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_with_blocking(socket: CValuesRef<GSocket>?, @CCall.CString buffer: String?, size: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3777(socket?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, size, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_message_with_timeout(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, vectors: CValuesRef<GOutputVector>?, num_vectors: gint, messages: CValuesRef<CPointerVar<GSocketControlMessage>>?, num_messages: gint, flags: gint, timeout_us: gint64, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GPollableReturn {
    memScoped {
        return kniBridge3778(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, num_vectors, messages?.getPointer(memScope).rawValue, num_messages, flags, timeout_us, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_option(socket: CValuesRef<GSocket>?, level: gint, optname: gint, value: CValuesRef<gintVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3779(socket?.getPointer(memScope).rawValue, level, optname, value?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_option(socket: CValuesRef<GSocket>?, level: gint, optname: gint, value: gint, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3780(socket?.getPointer(memScope).rawValue, level, optname, value, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_get_type(): GType {
    return kniBridge3781()
}

fun g_socket_connection_is_connected(connection: CValuesRef<GSocketConnection>?): gboolean {
    memScoped {
        return kniBridge3782(connection?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_connect(connection: CValuesRef<GSocketConnection>?, address: CValuesRef<GSocketAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3783(connection?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_connect_async(connection: CValuesRef<GSocketConnection>?, address: CValuesRef<GSocketAddress>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3784(connection?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_connection_connect_finish(connection: CValuesRef<GSocketConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3785(connection?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_get_socket(connection: CValuesRef<GSocketConnection>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge3786(connection?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connection_get_local_address(connection: CValuesRef<GSocketConnection>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3787(connection?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connection_get_remote_address(connection: CValuesRef<GSocketConnection>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge3788(connection?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connection_factory_register_type(g_type: GType, family: GSocketFamily, type: GSocketType, protocol: gint): Unit {
    return kniBridge3789(g_type, family, type.value, protocol)
}

fun g_socket_connection_factory_lookup_type(family: GSocketFamily, type: GSocketType, protocol_id: gint): GType {
    return kniBridge3790(family, type.value, protocol_id)
}

fun g_socket_connection_factory_create_connection(socket: CValuesRef<GSocket>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3791(socket?.getPointer(memScope).rawValue))
    }
}

fun g_socket_control_message_get_type(): GType {
    return kniBridge3792()
}

fun g_socket_control_message_get_size(message: CValuesRef<GSocketControlMessage>?): gsize {
    memScoped {
        return kniBridge3793(message?.getPointer(memScope).rawValue)
    }
}

fun g_socket_control_message_get_level(message: CValuesRef<GSocketControlMessage>?): Int {
    memScoped {
        return kniBridge3794(message?.getPointer(memScope).rawValue)
    }
}

fun g_socket_control_message_get_msg_type(message: CValuesRef<GSocketControlMessage>?): Int {
    memScoped {
        return kniBridge3795(message?.getPointer(memScope).rawValue)
    }
}

fun g_socket_control_message_serialize(message: CValuesRef<GSocketControlMessage>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge3796(message?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_socket_control_message_deserialize(level: Int, type: Int, size: gsize, data: gpointer?): CPointer<GSocketControlMessage>? {
    return interpretCPointer<GSocketControlMessage>(kniBridge3797(level, type, size, data.rawValue))
}

fun g_socket_listener_get_type(): GType {
    return kniBridge3798()
}

fun g_socket_listener_new(): CPointer<GSocketListener>? {
    return interpretCPointer<GSocketListener>(kniBridge3799())
}

fun g_socket_listener_set_backlog(listener: CValuesRef<GSocketListener>?, listen_backlog: Int): Unit {
    memScoped {
        return kniBridge3800(listener?.getPointer(memScope).rawValue, listen_backlog)
    }
}

fun g_socket_listener_add_socket(listener: CValuesRef<GSocketListener>?, socket: CValuesRef<GSocket>?, source_object: CValuesRef<GObject>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3801(listener?.getPointer(memScope).rawValue, socket?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_add_address(listener: CValuesRef<GSocketListener>?, address: CValuesRef<GSocketAddress>?, type: GSocketType, protocol: GSocketProtocol, source_object: CValuesRef<GObject>?, effective_address: CValuesRef<CPointerVar<GSocketAddress>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3802(listener?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, type.value, protocol, source_object?.getPointer(memScope).rawValue, effective_address?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_add_inet_port(listener: CValuesRef<GSocketListener>?, port: guint16, source_object: CValuesRef<GObject>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3803(listener?.getPointer(memScope).rawValue, port, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_add_any_inet_port(listener: CValuesRef<GSocketListener>?, source_object: CValuesRef<GObject>?, error: CValuesRef<CPointerVar<GError>>?): guint16 {
    memScoped {
        return kniBridge3804(listener?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_accept_socket(listener: CValuesRef<GSocketListener>?, source_object: CValuesRef<CPointerVar<GObject>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge3805(listener?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_accept_socket_async(listener: CValuesRef<GSocketListener>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3806(listener?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_listener_accept_socket_finish(listener: CValuesRef<GSocketListener>?, result: CValuesRef<GAsyncResult>?, source_object: CValuesRef<CPointerVar<GObject>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge3807(listener?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_accept(listener: CValuesRef<GSocketListener>?, source_object: CValuesRef<CPointerVar<GObject>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3808(listener?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_accept_async(listener: CValuesRef<GSocketListener>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3809(listener?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_listener_accept_finish(listener: CValuesRef<GSocketListener>?, result: CValuesRef<GAsyncResult>?, source_object: CValuesRef<CPointerVar<GObject>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3810(listener?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_close(listener: CValuesRef<GSocketListener>?): Unit {
    memScoped {
        return kniBridge3811(listener?.getPointer(memScope).rawValue)
    }
}

fun g_socket_service_get_type(): GType {
    return kniBridge3812()
}

fun g_socket_service_new(): CPointer<GSocketService>? {
    return interpretCPointer<GSocketService>(kniBridge3813())
}

fun g_socket_service_start(service: CValuesRef<GSocketService>?): Unit {
    memScoped {
        return kniBridge3814(service?.getPointer(memScope).rawValue)
    }
}

fun g_socket_service_stop(service: CValuesRef<GSocketService>?): Unit {
    memScoped {
        return kniBridge3815(service?.getPointer(memScope).rawValue)
    }
}

fun g_socket_service_is_active(service: CValuesRef<GSocketService>?): gboolean {
    memScoped {
        return kniBridge3816(service?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_type(): GType {
    return kniBridge3817()
}

fun g_srv_target_new(@CCall.CString hostname: String?, port: guint16, priority: guint16, weight: guint16): CPointer<GSrvTarget>? {
    memScoped {
        return interpretCPointer<GSrvTarget>(kniBridge3818(hostname?.cstr?.getPointer(memScope).rawValue, port, priority, weight))
    }
}

fun g_srv_target_copy(target: CValuesRef<GSrvTarget>?): CPointer<GSrvTarget>? {
    memScoped {
        return interpretCPointer<GSrvTarget>(kniBridge3819(target?.getPointer(memScope).rawValue))
    }
}

fun g_srv_target_free(target: CValuesRef<GSrvTarget>?): Unit {
    memScoped {
        return kniBridge3820(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_hostname(target: CValuesRef<GSrvTarget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3821(target?.getPointer(memScope).rawValue))
    }
}

fun g_srv_target_get_port(target: CValuesRef<GSrvTarget>?): guint16 {
    memScoped {
        return kniBridge3822(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_priority(target: CValuesRef<GSrvTarget>?): guint16 {
    memScoped {
        return kniBridge3823(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_weight(target: CValuesRef<GSrvTarget>?): guint16 {
    memScoped {
        return kniBridge3824(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_list_sort(targets: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3825(targets?.getPointer(memScope).rawValue))
    }
}

fun g_simple_proxy_resolver_get_type(): GType {
    return kniBridge3826()
}

fun g_simple_proxy_resolver_new(@CCall.CString default_proxy: String?, ignore_hosts: CValuesRef<CPointerVar<gcharVar>>?): CPointer<GProxyResolver>? {
    memScoped {
        return interpretCPointer<GProxyResolver>(kniBridge3827(default_proxy?.cstr?.getPointer(memScope).rawValue, ignore_hosts?.getPointer(memScope).rawValue))
    }
}

fun g_simple_proxy_resolver_set_default_proxy(resolver: CValuesRef<GSimpleProxyResolver>?, @CCall.CString default_proxy: String?): Unit {
    memScoped {
        return kniBridge3828(resolver?.getPointer(memScope).rawValue, default_proxy?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_simple_proxy_resolver_set_ignore_hosts(resolver: CValuesRef<GSimpleProxyResolver>?, ignore_hosts: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3829(resolver?.getPointer(memScope).rawValue, ignore_hosts?.getPointer(memScope).rawValue)
    }
}

fun g_simple_proxy_resolver_set_uri_proxy(resolver: CValuesRef<GSimpleProxyResolver>?, @CCall.CString uri_scheme: String?, @CCall.CString proxy: String?): Unit {
    memScoped {
        return kniBridge3830(resolver?.getPointer(memScope).rawValue, uri_scheme?.cstr?.getPointer(memScope).rawValue, proxy?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_type(): GType {
    return kniBridge3831()
}

fun g_task_new(source_object: gpointer?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, callback_data: gpointer?): CPointer<GTask>? {
    memScoped {
        return interpretCPointer<GTask>(kniBridge3832(source_object.rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, callback_data.rawValue))
    }
}

fun g_task_report_error(source_object: gpointer?, callback: GAsyncReadyCallback?, callback_data: gpointer?, source_tag: gpointer?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge3833(source_object.rawValue, callback.rawValue, callback_data.rawValue, source_tag.rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources65")
external fun g_task_report_new_error(source_object: gpointer?, callback: GAsyncReadyCallback?, callback_data: gpointer?, source_tag: gpointer?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_task_set_task_data(task: CValuesRef<GTask>?, task_data: gpointer?, task_data_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3834(task?.getPointer(memScope).rawValue, task_data.rawValue, task_data_destroy.rawValue)
    }
}

fun g_task_set_priority(task: CValuesRef<GTask>?, priority: gint): Unit {
    memScoped {
        return kniBridge3835(task?.getPointer(memScope).rawValue, priority)
    }
}

fun g_task_set_check_cancellable(task: CValuesRef<GTask>?, check_cancellable: gboolean): Unit {
    memScoped {
        return kniBridge3836(task?.getPointer(memScope).rawValue, check_cancellable)
    }
}

fun g_task_set_source_tag(task: CValuesRef<GTask>?, source_tag: gpointer?): Unit {
    memScoped {
        return kniBridge3837(task?.getPointer(memScope).rawValue, source_tag.rawValue)
    }
}

fun g_task_set_name(task: CValuesRef<GTask>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3838(task?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_source_object(task: CValuesRef<GTask>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3839(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_task_data(task: CValuesRef<GTask>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3840(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_priority(task: CValuesRef<GTask>?): gint {
    memScoped {
        return kniBridge3841(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_context(task: CValuesRef<GTask>?): CPointer<GMainContext>? {
    memScoped {
        return interpretCPointer<GMainContext>(kniBridge3842(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_cancellable(task: CValuesRef<GTask>?): CPointer<GCancellable>? {
    memScoped {
        return interpretCPointer<GCancellable>(kniBridge3843(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_check_cancellable(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge3844(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_source_tag(task: CValuesRef<GTask>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3845(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_name(task: CValuesRef<GTask>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3846(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_is_valid(result: gpointer?, source_object: gpointer?): gboolean {
    return kniBridge3847(result.rawValue, source_object.rawValue)
}

fun g_task_run_in_thread(task: CValuesRef<GTask>?, task_func: GTaskThreadFunc?): Unit {
    memScoped {
        return kniBridge3848(task?.getPointer(memScope).rawValue, task_func.rawValue)
    }
}

fun g_task_run_in_thread_sync(task: CValuesRef<GTask>?, task_func: GTaskThreadFunc?): Unit {
    memScoped {
        return kniBridge3849(task?.getPointer(memScope).rawValue, task_func.rawValue)
    }
}

fun g_task_set_return_on_cancel(task: CValuesRef<GTask>?, return_on_cancel: gboolean): gboolean {
    memScoped {
        return kniBridge3850(task?.getPointer(memScope).rawValue, return_on_cancel)
    }
}

fun g_task_get_return_on_cancel(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge3851(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_attach_source(task: CValuesRef<GTask>?, source: CValuesRef<GSource>?, callback: GSourceFunc?): Unit {
    memScoped {
        return kniBridge3852(task?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, callback.rawValue)
    }
}

fun g_task_return_pointer(task: CValuesRef<GTask>?, result: gpointer?, result_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3853(task?.getPointer(memScope).rawValue, result.rawValue, result_destroy.rawValue)
    }
}

fun g_task_return_boolean(task: CValuesRef<GTask>?, result: gboolean): Unit {
    memScoped {
        return kniBridge3854(task?.getPointer(memScope).rawValue, result)
    }
}

fun g_task_return_int(task: CValuesRef<GTask>?, result: gssize): Unit {
    memScoped {
        return kniBridge3855(task?.getPointer(memScope).rawValue, result)
    }
}

fun g_task_return_error(task: CValuesRef<GTask>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge3856(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources66")
external fun g_task_return_new_error(task: CValuesRef<GTask>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_task_return_error_if_cancelled(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge3857(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_propagate_pointer(task: CValuesRef<GTask>?, error: CValuesRef<CPointerVar<GError>>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3858(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_task_propagate_boolean(task: CValuesRef<GTask>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3859(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_task_propagate_int(task: CValuesRef<GTask>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge3860(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_task_had_error(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge3861(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_completed(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge3862(task?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_type(): GType {
    return kniBridge3863()
}

@CCall("knifunptr_glibresources67")
external fun g_subprocess_new(flags: GSubprocessFlags, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString argv0: String?, vararg variadicArguments: Any?): CPointer<GSubprocess>?

fun g_subprocess_newv(argv: CValuesRef<CPointerVar<gcharVar>>?, flags: GSubprocessFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSubprocess>? {
    memScoped {
        return interpretCPointer<GSubprocess>(kniBridge3864(argv?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_stdin_pipe(subprocess: CValuesRef<GSubprocess>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge3865(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_stdout_pipe(subprocess: CValuesRef<GSubprocess>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3866(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_stderr_pipe(subprocess: CValuesRef<GSubprocess>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge3867(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_identifier(subprocess: CValuesRef<GSubprocess>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3868(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_send_signal(subprocess: CValuesRef<GSubprocess>?, signal_num: gint): Unit {
    memScoped {
        return kniBridge3869(subprocess?.getPointer(memScope).rawValue, signal_num)
    }
}

fun g_subprocess_force_exit(subprocess: CValuesRef<GSubprocess>?): Unit {
    memScoped {
        return kniBridge3870(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3871(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait_async(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3872(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_wait_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3873(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait_check(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3874(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait_check_async(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3875(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_wait_check_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3876(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_status(subprocess: CValuesRef<GSubprocess>?): gint {
    memScoped {
        return kniBridge3877(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_successful(subprocess: CValuesRef<GSubprocess>?): gboolean {
    memScoped {
        return kniBridge3878(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_if_exited(subprocess: CValuesRef<GSubprocess>?): gboolean {
    memScoped {
        return kniBridge3879(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_exit_status(subprocess: CValuesRef<GSubprocess>?): gint {
    memScoped {
        return kniBridge3880(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_if_signaled(subprocess: CValuesRef<GSubprocess>?): gboolean {
    memScoped {
        return kniBridge3881(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_term_sig(subprocess: CValuesRef<GSubprocess>?): gint {
    memScoped {
        return kniBridge3882(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate(subprocess: CValuesRef<GSubprocess>?, stdin_buf: CValuesRef<GBytes>?, cancellable: CValuesRef<GCancellable>?, stdout_buf: CValuesRef<CPointerVar<GBytes>>?, stderr_buf: CValuesRef<CPointerVar<GBytes>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3883(subprocess?.getPointer(memScope).rawValue, stdin_buf?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate_async(subprocess: CValuesRef<GSubprocess>?, stdin_buf: CValuesRef<GBytes>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3884(subprocess?.getPointer(memScope).rawValue, stdin_buf?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_communicate_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, stdout_buf: CValuesRef<CPointerVar<GBytes>>?, stderr_buf: CValuesRef<CPointerVar<GBytes>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3885(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate_utf8(subprocess: CValuesRef<GSubprocess>?, @CCall.CString stdin_buf: String?, cancellable: CValuesRef<GCancellable>?, stdout_buf: CValuesRef<CPointerVar<ByteVar>>?, stderr_buf: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3886(subprocess?.getPointer(memScope).rawValue, stdin_buf?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate_utf8_async(subprocess: CValuesRef<GSubprocess>?, @CCall.CString stdin_buf: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3887(subprocess?.getPointer(memScope).rawValue, stdin_buf?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_communicate_utf8_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, stdout_buf: CValuesRef<CPointerVar<ByteVar>>?, stderr_buf: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3888(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_get_type(): GType {
    return kniBridge3889()
}

fun g_subprocess_launcher_new(flags: GSubprocessFlags): CPointer<GSubprocessLauncher>? {
    return interpretCPointer<GSubprocessLauncher>(kniBridge3890(flags))
}

@CCall("knifunptr_glibresources68")
external fun g_subprocess_launcher_spawn(self: CValuesRef<GSubprocessLauncher>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString argv0: String?, vararg variadicArguments: Any?): CPointer<GSubprocess>?

fun g_subprocess_launcher_spawnv(self: CValuesRef<GSubprocessLauncher>?, argv: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSubprocess>? {
    memScoped {
        return interpretCPointer<GSubprocess>(kniBridge3891(self?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_launcher_set_environ(self: CValuesRef<GSubprocessLauncher>?, env: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3892(self?.getPointer(memScope).rawValue, env?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_setenv(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString variable: String?, @CCall.CString value: String?, overwrite: gboolean): Unit {
    memScoped {
        return kniBridge3893(self?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, overwrite)
    }
}

fun g_subprocess_launcher_unsetenv(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString variable: String?): Unit {
    memScoped {
        return kniBridge3894(self?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_getenv(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString variable: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3895(self?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_launcher_set_cwd(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString cwd: String?): Unit {
    memScoped {
        return kniBridge3896(self?.getPointer(memScope).rawValue, cwd?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_set_flags(self: CValuesRef<GSubprocessLauncher>?, flags: GSubprocessFlags): Unit {
    memScoped {
        return kniBridge3897(self?.getPointer(memScope).rawValue, flags)
    }
}

fun g_subprocess_launcher_set_stdin_file_path(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge3898(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_take_stdin_fd(self: CValuesRef<GSubprocessLauncher>?, fd: gint): Unit {
    memScoped {
        return kniBridge3899(self?.getPointer(memScope).rawValue, fd)
    }
}

fun g_subprocess_launcher_set_stdout_file_path(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge3900(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_take_stdout_fd(self: CValuesRef<GSubprocessLauncher>?, fd: gint): Unit {
    memScoped {
        return kniBridge3901(self?.getPointer(memScope).rawValue, fd)
    }
}

fun g_subprocess_launcher_set_stderr_file_path(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge3902(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_take_stderr_fd(self: CValuesRef<GSubprocessLauncher>?, fd: gint): Unit {
    memScoped {
        return kniBridge3903(self?.getPointer(memScope).rawValue, fd)
    }
}

fun g_subprocess_launcher_take_fd(self: CValuesRef<GSubprocessLauncher>?, source_fd: gint, target_fd: gint): Unit {
    memScoped {
        return kniBridge3904(self?.getPointer(memScope).rawValue, source_fd, target_fd)
    }
}

fun g_subprocess_launcher_set_child_setup(self: CValuesRef<GSubprocessLauncher>?, child_setup: GSpawnChildSetupFunc?, user_data: gpointer?, destroy_notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3905(self?.getPointer(memScope).rawValue, child_setup.rawValue, user_data.rawValue, destroy_notify.rawValue)
    }
}

fun g_tcp_connection_get_type(): GType {
    return kniBridge3906()
}

fun g_tcp_connection_set_graceful_disconnect(connection: CValuesRef<GTcpConnection>?, graceful_disconnect: gboolean): Unit {
    memScoped {
        return kniBridge3907(connection?.getPointer(memScope).rawValue, graceful_disconnect)
    }
}

fun g_tcp_connection_get_graceful_disconnect(connection: CValuesRef<GTcpConnection>?): gboolean {
    memScoped {
        return kniBridge3908(connection?.getPointer(memScope).rawValue)
    }
}

fun g_tcp_wrapper_connection_get_type(): GType {
    return kniBridge3909()
}

fun g_tcp_wrapper_connection_new(base_io_stream: CValuesRef<GIOStream>?, socket: CValuesRef<GSocket>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge3910(base_io_stream?.getPointer(memScope).rawValue, socket?.getPointer(memScope).rawValue))
    }
}

fun g_tcp_wrapper_connection_get_base_io_stream(conn: CValuesRef<GTcpWrapperConnection>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge3911(conn?.getPointer(memScope).rawValue))
    }
}

fun g_test_dbus_get_type(): GType {
    return kniBridge3912()
}

fun g_test_dbus_new(flags: GTestDBusFlags): CPointer<GTestDBus>? {
    return interpretCPointer<GTestDBus>(kniBridge3913(flags))
}

fun g_test_dbus_get_flags(self: CValuesRef<GTestDBus>?): GTestDBusFlags {
    memScoped {
        return kniBridge3914(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_get_bus_address(self: CValuesRef<GTestDBus>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3915(self?.getPointer(memScope).rawValue))
    }
}

fun g_test_dbus_add_service_dir(self: CValuesRef<GTestDBus>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge3916(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_up(self: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge3917(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_stop(self: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge3918(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_down(self: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge3919(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_unset(): Unit {
    return kniBridge3920()
}

fun g_themed_icon_get_type(): GType {
    return kniBridge3921()
}

fun g_themed_icon_new(@CCall.CString iconname: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3922(iconname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_themed_icon_new_with_default_fallbacks(@CCall.CString iconname: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3923(iconname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_themed_icon_new_from_names(iconnames: CValuesRef<CPointerVar<ByteVar>>?, len: Int): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge3924(iconnames?.getPointer(memScope).rawValue, len))
    }
}

fun g_themed_icon_prepend_name(icon: CValuesRef<GThemedIcon>?, @CCall.CString iconname: String?): Unit {
    memScoped {
        return kniBridge3925(icon?.getPointer(memScope).rawValue, iconname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_themed_icon_append_name(icon: CValuesRef<GThemedIcon>?, @CCall.CString iconname: String?): Unit {
    memScoped {
        return kniBridge3926(icon?.getPointer(memScope).rawValue, iconname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_themed_icon_get_names(icon: CValuesRef<GThemedIcon>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3927(icon?.getPointer(memScope).rawValue))
    }
}

fun g_threaded_socket_service_get_type(): GType {
    return kniBridge3928()
}

fun g_threaded_socket_service_new(max_threads: Int): CPointer<GSocketService>? {
    return interpretCPointer<GSocketService>(kniBridge3929(max_threads))
}

fun g_tls_backend_get_type(): GType {
    return kniBridge3930()
}

fun g_tls_backend_get_default(): CPointer<GTlsBackend>? {
    return interpretCPointer<GTlsBackend>(kniBridge3931())
}

fun g_tls_backend_get_default_database(backend: CValuesRef<GTlsBackend>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge3932(backend?.getPointer(memScope).rawValue))
    }
}

fun g_tls_backend_set_default_database(backend: CValuesRef<GTlsBackend>?, database: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge3933(backend?.getPointer(memScope).rawValue, database?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_supports_tls(backend: CValuesRef<GTlsBackend>?): gboolean {
    memScoped {
        return kniBridge3934(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_supports_dtls(backend: CValuesRef<GTlsBackend>?): gboolean {
    memScoped {
        return kniBridge3935(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_certificate_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge3936(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_client_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge3937(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_server_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge3938(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_file_database_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge3939(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_dtls_client_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge3940(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_dtls_server_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge3941(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_certificate_get_type(): GType {
    return kniBridge3942()
}

fun g_tls_certificate_new_from_pem(@CCall.CString data: String?, length: gssize, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3943(data?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_new_from_file(@CCall.CString file: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3944(file?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_new_from_files(@CCall.CString cert_file: String?, @CCall.CString key_file: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3945(cert_file?.cstr?.getPointer(memScope).rawValue, key_file?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_list_new_from_file(@CCall.CString file: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3946(file?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_get_issuer(cert: CValuesRef<GTlsCertificate>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3947(cert?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_verify(cert: CValuesRef<GTlsCertificate>?, identity: CValuesRef<GSocketConnectable>?, trusted_ca: CValuesRef<GTlsCertificate>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge3948(cert?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue, trusted_ca?.getPointer(memScope).rawValue)
    }
}

fun g_tls_certificate_is_same(cert_one: CValuesRef<GTlsCertificate>?, cert_two: CValuesRef<GTlsCertificate>?): gboolean {
    memScoped {
        return kniBridge3949(cert_one?.getPointer(memScope).rawValue, cert_two?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_type(): GType {
    return kniBridge3950()
}

fun g_tls_connection_set_use_system_certdb(conn: CValuesRef<GTlsConnection>?, use_system_certdb: gboolean): Unit {
    memScoped {
        return kniBridge3951(conn?.getPointer(memScope).rawValue, use_system_certdb)
    }
}

fun g_tls_connection_get_use_system_certdb(conn: CValuesRef<GTlsConnection>?): gboolean {
    memScoped {
        return kniBridge3952(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_set_database(conn: CValuesRef<GTlsConnection>?, database: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge3953(conn?.getPointer(memScope).rawValue, database?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_database(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge3954(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_set_certificate(conn: CValuesRef<GTlsConnection>?, certificate: CValuesRef<GTlsCertificate>?): Unit {
    memScoped {
        return kniBridge3955(conn?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_certificate(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3956(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_set_interaction(conn: CValuesRef<GTlsConnection>?, interaction: CValuesRef<GTlsInteraction>?): Unit {
    memScoped {
        return kniBridge3957(conn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_interaction(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsInteraction>? {
    memScoped {
        return interpretCPointer<GTlsInteraction>(kniBridge3958(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_get_peer_certificate(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3959(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_get_peer_certificate_errors(conn: CValuesRef<GTlsConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge3960(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_set_require_close_notify(conn: CValuesRef<GTlsConnection>?, require_close_notify: gboolean): Unit {
    memScoped {
        return kniBridge3961(conn?.getPointer(memScope).rawValue, require_close_notify)
    }
}

fun g_tls_connection_get_require_close_notify(conn: CValuesRef<GTlsConnection>?): gboolean {
    memScoped {
        return kniBridge3962(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_set_rehandshake_mode(conn: CValuesRef<GTlsConnection>?, mode: GTlsRehandshakeMode): Unit {
    memScoped {
        return kniBridge3963(conn?.getPointer(memScope).rawValue, mode.value)
    }
}

fun g_tls_connection_get_rehandshake_mode(conn: CValuesRef<GTlsConnection>?): GTlsRehandshakeMode {
    memScoped {
        return GTlsRehandshakeMode.byValue(kniBridge3964(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_set_advertised_protocols(conn: CValuesRef<GTlsConnection>?, protocols: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3965(conn?.getPointer(memScope).rawValue, protocols?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_negotiated_protocol(conn: CValuesRef<GTlsConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3966(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_handshake(conn: CValuesRef<GTlsConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3967(conn?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_handshake_async(conn: CValuesRef<GTlsConnection>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3968(conn?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_connection_handshake_finish(conn: CValuesRef<GTlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3969(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_error_quark(): GQuark {
    return kniBridge3970()
}

fun g_tls_connection_emit_accept_certificate(conn: CValuesRef<GTlsConnection>?, peer_cert: CValuesRef<GTlsCertificate>?, errors: GTlsCertificateFlags): gboolean {
    memScoped {
        return kniBridge3971(conn?.getPointer(memScope).rawValue, peer_cert?.getPointer(memScope).rawValue, errors)
    }
}

fun g_tls_client_connection_get_type(): GType {
    return kniBridge3972()
}

fun g_tls_client_connection_new(base_io_stream: CValuesRef<GIOStream>?, server_identity: CValuesRef<GSocketConnectable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge3973(base_io_stream?.getPointer(memScope).rawValue, server_identity?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_client_connection_get_validation_flags(conn: CValuesRef<GTlsClientConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge3974(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_client_connection_set_validation_flags(conn: CValuesRef<GTlsClientConnection>?, flags: GTlsCertificateFlags): Unit {
    memScoped {
        return kniBridge3975(conn?.getPointer(memScope).rawValue, flags)
    }
}

fun g_tls_client_connection_get_server_identity(conn: CValuesRef<GTlsClientConnection>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge3976(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_client_connection_set_server_identity(conn: CValuesRef<GTlsClientConnection>?, identity: CValuesRef<GSocketConnectable>?): Unit {
    memScoped {
        return kniBridge3977(conn?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue)
    }
}

fun g_tls_client_connection_get_use_ssl3(conn: CValuesRef<GTlsClientConnection>?): gboolean {
    memScoped {
        return kniBridge3978(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_client_connection_set_use_ssl3(conn: CValuesRef<GTlsClientConnection>?, use_ssl3: gboolean): Unit {
    memScoped {
        return kniBridge3979(conn?.getPointer(memScope).rawValue, use_ssl3)
    }
}

fun g_tls_client_connection_get_accepted_cas(conn: CValuesRef<GTlsClientConnection>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3980(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_client_connection_copy_session_state(conn: CValuesRef<GTlsClientConnection>?, source: CValuesRef<GTlsClientConnection>?): Unit {
    memScoped {
        return kniBridge3981(conn?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue)
    }
}

fun g_tls_database_get_type(): GType {
    return kniBridge3982()
}

fun g_tls_database_verify_chain(self: CValuesRef<GTlsDatabase>?, chain: CValuesRef<GTlsCertificate>?, @CCall.CString purpose: String?, identity: CValuesRef<GSocketConnectable>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseVerifyFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge3983(self?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue, purpose?.cstr?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_database_verify_chain_async(self: CValuesRef<GTlsDatabase>?, chain: CValuesRef<GTlsCertificate>?, @CCall.CString purpose: String?, identity: CValuesRef<GSocketConnectable>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseVerifyFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3984(self?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue, purpose?.cstr?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_verify_chain_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge3985(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_database_create_certificate_handle(self: CValuesRef<GTlsDatabase>?, certificate: CValuesRef<GTlsCertificate>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3986(self?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_for_handle(self: CValuesRef<GTlsDatabase>?, @CCall.CString handle: String?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3987(self?.getPointer(memScope).rawValue, handle?.cstr?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_for_handle_async(self: CValuesRef<GTlsDatabase>?, @CCall.CString handle: String?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3988(self?.getPointer(memScope).rawValue, handle?.cstr?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_lookup_certificate_for_handle_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3989(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_issuer(self: CValuesRef<GTlsDatabase>?, certificate: CValuesRef<GTlsCertificate>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3990(self?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_issuer_async(self: CValuesRef<GTlsDatabase>?, certificate: CValuesRef<GTlsCertificate>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3991(self?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_lookup_certificate_issuer_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge3992(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificates_issued_by(self: CValuesRef<GTlsDatabase>?, issuer_raw_dn: CValuesRef<GByteArray>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3993(self?.getPointer(memScope).rawValue, issuer_raw_dn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificates_issued_by_async(self: CValuesRef<GTlsDatabase>?, issuer_raw_dn: CValuesRef<GByteArray>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3994(self?.getPointer(memScope).rawValue, issuer_raw_dn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_lookup_certificates_issued_by_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3995(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_file_database_get_type(): GType {
    return kniBridge3996()
}

fun g_tls_file_database_new(@CCall.CString anchors: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge3997(anchors?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_get_type(): GType {
    return kniBridge3998()
}

fun g_tls_interaction_invoke_ask_password(interaction: CValuesRef<GTlsInteraction>?, password: CValuesRef<GTlsPassword>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge3999(interaction?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_ask_password(interaction: CValuesRef<GTlsInteraction>?, password: CValuesRef<GTlsPassword>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge4000(interaction?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_ask_password_async(interaction: CValuesRef<GTlsInteraction>?, password: CValuesRef<GTlsPassword>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4001(interaction?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_interaction_ask_password_finish(interaction: CValuesRef<GTlsInteraction>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge4002(interaction?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_invoke_request_certificate(interaction: CValuesRef<GTlsInteraction>?, connection: CValuesRef<GTlsConnection>?, flags: GTlsCertificateRequestFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge4003(interaction?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_request_certificate(interaction: CValuesRef<GTlsInteraction>?, connection: CValuesRef<GTlsConnection>?, flags: GTlsCertificateRequestFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge4004(interaction?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_request_certificate_async(interaction: CValuesRef<GTlsInteraction>?, connection: CValuesRef<GTlsConnection>?, flags: GTlsCertificateRequestFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4005(interaction?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_interaction_request_certificate_finish(interaction: CValuesRef<GTlsInteraction>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge4006(interaction?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_server_connection_get_type(): GType {
    return kniBridge4007()
}

fun g_tls_server_connection_new(base_io_stream: CValuesRef<GIOStream>?, certificate: CValuesRef<GTlsCertificate>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge4008(base_io_stream?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_get_type(): GType {
    return kniBridge4009()
}

fun g_tls_password_new(flags: GTlsPasswordFlags, @CCall.CString description: String?): CPointer<GTlsPassword>? {
    memScoped {
        return interpretCPointer<GTlsPassword>(kniBridge4010(flags, description?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_get_value(password: CValuesRef<GTlsPassword>?, length: CValuesRef<gsizeVar>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge4011(password?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_set_value(password: CValuesRef<GTlsPassword>?, value: CValuesRef<gucharVar>?, length: gssize): Unit {
    memScoped {
        return kniBridge4012(password?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, length)
    }
}

fun g_tls_password_set_value_full(password: CValuesRef<GTlsPassword>?, value: CValuesRef<gucharVar>?, length: gssize, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4013(password?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, length, destroy.rawValue)
    }
}

fun g_tls_password_get_flags(password: CValuesRef<GTlsPassword>?): GTlsPasswordFlags {
    memScoped {
        return kniBridge4014(password?.getPointer(memScope).rawValue)
    }
}

fun g_tls_password_set_flags(password: CValuesRef<GTlsPassword>?, flags: GTlsPasswordFlags): Unit {
    memScoped {
        return kniBridge4015(password?.getPointer(memScope).rawValue, flags)
    }
}

fun g_tls_password_get_description(password: CValuesRef<GTlsPassword>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4016(password?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_set_description(password: CValuesRef<GTlsPassword>?, @CCall.CString description: String?): Unit {
    memScoped {
        return kniBridge4017(password?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_tls_password_get_warning(password: CValuesRef<GTlsPassword>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4018(password?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_set_warning(password: CValuesRef<GTlsPassword>?, @CCall.CString warning: String?): Unit {
    memScoped {
        return kniBridge4019(password?.getPointer(memScope).rawValue, warning?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_vfs_get_type(): GType {
    return kniBridge4020()
}

fun g_vfs_is_active(vfs: CValuesRef<GVfs>?): gboolean {
    memScoped {
        return kniBridge4021(vfs?.getPointer(memScope).rawValue)
    }
}

fun g_vfs_get_file_for_path(vfs: CValuesRef<GVfs>?, @CCall.CString path: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge4022(vfs?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_get_file_for_uri(vfs: CValuesRef<GVfs>?, @CCall.CString uri: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge4023(vfs?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_get_supported_uri_schemes(vfs: CValuesRef<GVfs>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge4024(vfs?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_parse_name(vfs: CValuesRef<GVfs>?, @CCall.CString parse_name: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge4025(vfs?.getPointer(memScope).rawValue, parse_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_get_default(): CPointer<GVfs>? {
    return interpretCPointer<GVfs>(kniBridge4026())
}

fun g_vfs_get_local(): CPointer<GVfs>? {
    return interpretCPointer<GVfs>(kniBridge4027())
}

fun g_vfs_register_uri_scheme(vfs: CValuesRef<GVfs>?, @CCall.CString scheme: String?, uri_func: GVfsFileLookupFunc?, uri_data: gpointer?, uri_destroy: GDestroyNotify?, parse_name_func: GVfsFileLookupFunc?, parse_name_data: gpointer?, parse_name_destroy: GDestroyNotify?): gboolean {
    memScoped {
        return kniBridge4028(vfs?.getPointer(memScope).rawValue, scheme?.cstr?.getPointer(memScope).rawValue, uri_func.rawValue, uri_data.rawValue, uri_destroy.rawValue, parse_name_func.rawValue, parse_name_data.rawValue, parse_name_destroy.rawValue)
    }
}

fun g_vfs_unregister_uri_scheme(vfs: CValuesRef<GVfs>?, @CCall.CString scheme: String?): gboolean {
    memScoped {
        return kniBridge4029(vfs?.getPointer(memScope).rawValue, scheme?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_volume_get_type(): GType {
    return kniBridge4030()
}

fun g_volume_get_name(volume: CValuesRef<GVolume>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4031(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_icon(volume: CValuesRef<GVolume>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge4032(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_symbolic_icon(volume: CValuesRef<GVolume>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge4033(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_uuid(volume: CValuesRef<GVolume>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4034(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_drive(volume: CValuesRef<GVolume>?): CPointer<GDrive>? {
    memScoped {
        return interpretCPointer<GDrive>(kniBridge4035(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_mount(volume: CValuesRef<GVolume>?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge4036(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_can_mount(volume: CValuesRef<GVolume>?): gboolean {
    memScoped {
        return kniBridge4037(volume?.getPointer(memScope).rawValue)
    }
}

fun g_volume_can_eject(volume: CValuesRef<GVolume>?): gboolean {
    memScoped {
        return kniBridge4038(volume?.getPointer(memScope).rawValue)
    }
}

fun g_volume_should_automount(volume: CValuesRef<GVolume>?): gboolean {
    memScoped {
        return kniBridge4039(volume?.getPointer(memScope).rawValue)
    }
}

fun g_volume_mount(volume: CValuesRef<GVolume>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4040(volume?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_volume_mount_finish(volume: CValuesRef<GVolume>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4041(volume?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_volume_eject(volume: CValuesRef<GVolume>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4042(volume?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_volume_eject_finish(volume: CValuesRef<GVolume>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4043(volume?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_volume_get_identifier(volume: CValuesRef<GVolume>?, @CCall.CString kind: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4044(volume?.getPointer(memScope).rawValue, kind?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_volume_enumerate_identifiers(volume: CValuesRef<GVolume>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge4045(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_activation_root(volume: CValuesRef<GVolume>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge4046(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_eject_with_operation(volume: CValuesRef<GVolume>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4047(volume?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_volume_eject_with_operation_finish(volume: CValuesRef<GVolume>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4048(volume?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_volume_get_sort_key(volume: CValuesRef<GVolume>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4049(volume?.getPointer(memScope).rawValue))
    }
}

fun g_zlib_compressor_get_type(): GType {
    return kniBridge4050()
}

fun g_zlib_compressor_new(format: GZlibCompressorFormat, level: Int): CPointer<GZlibCompressor>? {
    return interpretCPointer<GZlibCompressor>(kniBridge4051(format.value, level))
}

fun g_zlib_compressor_get_file_info(compressor: CValuesRef<GZlibCompressor>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge4052(compressor?.getPointer(memScope).rawValue))
    }
}

fun g_zlib_compressor_set_file_info(compressor: CValuesRef<GZlibCompressor>?, file_info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge4053(compressor?.getPointer(memScope).rawValue, file_info?.getPointer(memScope).rawValue)
    }
}

fun g_zlib_decompressor_get_type(): GType {
    return kniBridge4054()
}

fun g_zlib_decompressor_new(format: GZlibCompressorFormat): CPointer<GZlibDecompressor>? {
    return interpretCPointer<GZlibDecompressor>(kniBridge4055(format.value))
}

fun g_zlib_decompressor_get_file_info(decompressor: CValuesRef<GZlibDecompressor>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge4056(decompressor?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_get_type(): GType {
    return kniBridge4057()
}

fun g_dbus_interface_get_info(interface_: CValuesRef<GDBusInterface>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge4058(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_get_object(interface_: CValuesRef<GDBusInterface>?): CPointer<GDBusObject>? {
    memScoped {
        return interpretCPointer<GDBusObject>(kniBridge4059(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_set_object(interface_: CValuesRef<GDBusInterface>?, `object`: CValuesRef<GDBusObject>?): Unit {
    memScoped {
        return kniBridge4060(interface_?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_dup_object(interface_: CValuesRef<GDBusInterface>?): CPointer<GDBusObject>? {
    memScoped {
        return interpretCPointer<GDBusObject>(kniBridge4061(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_type(): GType {
    return kniBridge4062()
}

fun g_dbus_interface_skeleton_get_flags(interface_: CValuesRef<GDBusInterfaceSkeleton>?): GDBusInterfaceSkeletonFlags {
    memScoped {
        return kniBridge4063(interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_set_flags(interface_: CValuesRef<GDBusInterfaceSkeleton>?, flags: GDBusInterfaceSkeletonFlags): Unit {
    memScoped {
        return kniBridge4064(interface_?.getPointer(memScope).rawValue, flags)
    }
}

fun g_dbus_interface_skeleton_get_info(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge4065(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_vtable(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GDBusInterfaceVTable>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceVTable>(kniBridge4066(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_properties(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge4067(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_flush(interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge4068(interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_export(interface_: CValuesRef<GDBusInterfaceSkeleton>?, connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4069(interface_?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_unexport(interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge4070(interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_unexport_from_connection(interface_: CValuesRef<GDBusInterfaceSkeleton>?, connection: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge4071(interface_?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_get_connection(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge4072(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_connections(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge4073(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_has_connection(interface_: CValuesRef<GDBusInterfaceSkeleton>?, connection: CValuesRef<GDBusConnection>?): gboolean {
    memScoped {
        return kniBridge4074(interface_?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_get_object_path(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4075(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_get_type(): GType {
    return kniBridge4076()
}

fun g_dbus_object_get_object_path(`object`: CValuesRef<GDBusObject>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4077(`object`?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_get_interfaces(`object`: CValuesRef<GDBusObject>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge4078(`object`?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_get_interface(`object`: CValuesRef<GDBusObject>?, @CCall.CString interface_name: String?): CPointer<GDBusInterface>? {
    memScoped {
        return interpretCPointer<GDBusInterface>(kniBridge4079(`object`?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_skeleton_get_type(): GType {
    return kniBridge4080()
}

fun g_dbus_object_skeleton_new(@CCall.CString object_path: String?): CPointer<GDBusObjectSkeleton>? {
    memScoped {
        return interpretCPointer<GDBusObjectSkeleton>(kniBridge4081(object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_skeleton_flush(`object`: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge4082(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_add_interface(`object`: CValuesRef<GDBusObjectSkeleton>?, interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge4083(`object`?.getPointer(memScope).rawValue, interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_remove_interface(`object`: CValuesRef<GDBusObjectSkeleton>?, interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge4084(`object`?.getPointer(memScope).rawValue, interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_remove_interface_by_name(`object`: CValuesRef<GDBusObjectSkeleton>?, @CCall.CString interface_name: String?): Unit {
    memScoped {
        return kniBridge4085(`object`?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_set_object_path(`object`: CValuesRef<GDBusObjectSkeleton>?, @CCall.CString object_path: String?): Unit {
    memScoped {
        return kniBridge4086(`object`?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_proxy_get_type(): GType {
    return kniBridge4087()
}

fun g_dbus_object_proxy_new(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?): CPointer<GDBusObjectProxy>? {
    memScoped {
        return interpretCPointer<GDBusObjectProxy>(kniBridge4088(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_proxy_get_connection(proxy: CValuesRef<GDBusObjectProxy>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge4089(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_type(): GType {
    return kniBridge4090()
}

fun g_dbus_object_manager_get_object_path(manager: CValuesRef<GDBusObjectManager>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4091(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_objects(manager: CValuesRef<GDBusObjectManager>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge4092(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_object(manager: CValuesRef<GDBusObjectManager>?, @CCall.CString object_path: String?): CPointer<GDBusObject>? {
    memScoped {
        return interpretCPointer<GDBusObject>(kniBridge4093(manager?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_interface(manager: CValuesRef<GDBusObjectManager>?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?): CPointer<GDBusInterface>? {
    memScoped {
        return interpretCPointer<GDBusInterface>(kniBridge4094(manager?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_type(): GType {
    return kniBridge4095()
}

fun g_dbus_object_manager_client_new(connection: CValuesRef<GDBusConnection>?, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4096(connection?.getPointer(memScope).rawValue, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_object_manager_client_new_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge4097(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_new_sync(connection: CValuesRef<GDBusConnection>?, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge4098(connection?.getPointer(memScope).rawValue, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_new_for_bus(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4099(bus_type, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_object_manager_client_new_for_bus_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge4100(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_new_for_bus_sync(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge4101(bus_type, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_connection(manager: CValuesRef<GDBusObjectManagerClient>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge4102(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_flags(manager: CValuesRef<GDBusObjectManagerClient>?): GDBusObjectManagerClientFlags {
    memScoped {
        return kniBridge4103(manager?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_client_get_name(manager: CValuesRef<GDBusObjectManagerClient>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4104(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_name_owner(manager: CValuesRef<GDBusObjectManagerClient>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4105(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_server_get_type(): GType {
    return kniBridge4106()
}

fun g_dbus_object_manager_server_new(@CCall.CString object_path: String?): CPointer<GDBusObjectManagerServer>? {
    memScoped {
        return interpretCPointer<GDBusObjectManagerServer>(kniBridge4107(object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_server_get_connection(manager: CValuesRef<GDBusObjectManagerServer>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge4108(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_server_set_connection(manager: CValuesRef<GDBusObjectManagerServer>?, connection: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge4109(manager?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_export(manager: CValuesRef<GDBusObjectManagerServer>?, `object`: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge4110(manager?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_export_uniquely(manager: CValuesRef<GDBusObjectManagerServer>?, `object`: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge4111(manager?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_is_exported(manager: CValuesRef<GDBusObjectManagerServer>?, `object`: CValuesRef<GDBusObjectSkeleton>?): gboolean {
    memScoped {
        return kniBridge4112(manager?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_unexport(manager: CValuesRef<GDBusObjectManagerServer>?, @CCall.CString object_path: String?): gboolean {
    memScoped {
        return kniBridge4113(manager?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_action_group_get_type(): GType {
    return kniBridge4114()
}

fun g_dbus_action_group_get(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?): CPointer<GDBusActionGroup>? {
    memScoped {
        return interpretCPointer<GDBusActionGroup>(kniBridge4115(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_remote_action_group_get_type(): GType {
    return kniBridge4116()
}

fun g_remote_action_group_activate_action_full(remote: CValuesRef<GRemoteActionGroup>?, @CCall.CString action_name: String?, parameter: CValuesRef<GVariant>?, platform_data: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge4117(remote?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue, platform_data?.getPointer(memScope).rawValue)
    }
}

fun g_remote_action_group_change_action_state_full(remote: CValuesRef<GRemoteActionGroup>?, @CCall.CString action_name: String?, value: CValuesRef<GVariant>?, platform_data: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge4118(remote?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, platform_data?.getPointer(memScope).rawValue)
    }
}

fun g_menu_model_get_type(): GType {
    return kniBridge4119()
}

fun g_menu_model_is_mutable(model: CValuesRef<GMenuModel>?): gboolean {
    memScoped {
        return kniBridge4120(model?.getPointer(memScope).rawValue)
    }
}

fun g_menu_model_get_n_items(model: CValuesRef<GMenuModel>?): gint {
    memScoped {
        return kniBridge4121(model?.getPointer(memScope).rawValue)
    }
}

fun g_menu_model_iterate_item_attributes(model: CValuesRef<GMenuModel>?, item_index: gint): CPointer<GMenuAttributeIter>? {
    memScoped {
        return interpretCPointer<GMenuAttributeIter>(kniBridge4122(model?.getPointer(memScope).rawValue, item_index))
    }
}

fun g_menu_model_get_item_attribute_value(model: CValuesRef<GMenuModel>?, item_index: gint, @CCall.CString attribute: String?, expected_type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge4123(model?.getPointer(memScope).rawValue, item_index, attribute?.cstr?.getPointer(memScope).rawValue, expected_type?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources69")
external fun g_menu_model_get_item_attribute(model: CValuesRef<GMenuModel>?, item_index: gint, @CCall.CString attribute: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_menu_model_iterate_item_links(model: CValuesRef<GMenuModel>?, item_index: gint): CPointer<GMenuLinkIter>? {
    memScoped {
        return interpretCPointer<GMenuLinkIter>(kniBridge4124(model?.getPointer(memScope).rawValue, item_index))
    }
}

fun g_menu_model_get_item_link(model: CValuesRef<GMenuModel>?, item_index: gint, @CCall.CString link: String?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge4125(model?.getPointer(memScope).rawValue, item_index, link?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_menu_model_items_changed(model: CValuesRef<GMenuModel>?, position: gint, removed: gint, added: gint): Unit {
    memScoped {
        return kniBridge4126(model?.getPointer(memScope).rawValue, position, removed, added)
    }
}

fun g_menu_attribute_iter_get_type(): GType {
    return kniBridge4127()
}

fun g_menu_attribute_iter_get_next(iter: CValuesRef<GMenuAttributeIter>?, out_name: CValuesRef<CPointerVar<gcharVar>>?, value: CValuesRef<CPointerVar<GVariant>>?): gboolean {
    memScoped {
        return kniBridge4128(iter?.getPointer(memScope).rawValue, out_name?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_menu_attribute_iter_next(iter: CValuesRef<GMenuAttributeIter>?): gboolean {
    memScoped {
        return kniBridge4129(iter?.getPointer(memScope).rawValue)
    }
}

fun g_menu_attribute_iter_get_name(iter: CValuesRef<GMenuAttributeIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4130(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_attribute_iter_get_value(iter: CValuesRef<GMenuAttributeIter>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge4131(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_link_iter_get_type(): GType {
    return kniBridge4132()
}

fun g_menu_link_iter_get_next(iter: CValuesRef<GMenuLinkIter>?, out_link: CValuesRef<CPointerVar<gcharVar>>?, value: CValuesRef<CPointerVar<GMenuModel>>?): gboolean {
    memScoped {
        return kniBridge4133(iter?.getPointer(memScope).rawValue, out_link?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_menu_link_iter_next(iter: CValuesRef<GMenuLinkIter>?): gboolean {
    memScoped {
        return kniBridge4134(iter?.getPointer(memScope).rawValue)
    }
}

fun g_menu_link_iter_get_name(iter: CValuesRef<GMenuLinkIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4135(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_link_iter_get_value(iter: CValuesRef<GMenuLinkIter>?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge4136(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_get_type(): GType {
    return kniBridge4137()
}

fun g_menu_new(): CPointer<GMenu>? {
    return interpretCPointer<GMenu>(kniBridge4138())
}

fun g_menu_freeze(menu: CValuesRef<GMenu>?): Unit {
    memScoped {
        return kniBridge4139(menu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert_item(menu: CValuesRef<GMenu>?, position: gint, item: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge4140(menu?.getPointer(memScope).rawValue, position, item?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend_item(menu: CValuesRef<GMenu>?, item: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge4141(menu?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append_item(menu: CValuesRef<GMenu>?, item: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge4142(menu?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue)
    }
}

fun g_menu_remove(menu: CValuesRef<GMenu>?, position: gint): Unit {
    memScoped {
        return kniBridge4143(menu?.getPointer(memScope).rawValue, position)
    }
}

fun g_menu_remove_all(menu: CValuesRef<GMenu>?): Unit {
    memScoped {
        return kniBridge4144(menu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert(menu: CValuesRef<GMenu>?, position: gint, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge4145(menu?.getPointer(memScope).rawValue, position, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge4146(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge4147(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert_section(menu: CValuesRef<GMenu>?, position: gint, @CCall.CString label: String?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4148(menu?.getPointer(memScope).rawValue, position, label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend_section(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4149(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append_section(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4150(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert_submenu(menu: CValuesRef<GMenu>?, position: gint, @CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4151(menu?.getPointer(memScope).rawValue, position, label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend_submenu(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4152(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append_submenu(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4153(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_get_type(): GType {
    return kniBridge4154()
}

fun g_menu_item_new(@CCall.CString label: String?, @CCall.CString detailed_action: String?): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge4155(label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_new_from_model(model: CValuesRef<GMenuModel>?, item_index: gint): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge4156(model?.getPointer(memScope).rawValue, item_index))
    }
}

fun g_menu_item_new_submenu(@CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge4157(label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_new_section(@CCall.CString label: String?, section: CValuesRef<GMenuModel>?): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge4158(label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_get_attribute_value(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, expected_type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge4159(menu_item?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, expected_type?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_glibresources70")
external fun g_menu_item_get_attribute(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_menu_item_get_link(menu_item: CValuesRef<GMenuItem>?, @CCall.CString link: String?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge4160(menu_item?.getPointer(memScope).rawValue, link?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_set_attribute_value(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge4161(menu_item?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources71")
external fun g_menu_item_set_attribute(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_menu_item_set_link(menu_item: CValuesRef<GMenuItem>?, @CCall.CString link: String?, model: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4162(menu_item?.getPointer(memScope).rawValue, link?.cstr?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_label(menu_item: CValuesRef<GMenuItem>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge4163(menu_item?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_submenu(menu_item: CValuesRef<GMenuItem>?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4164(menu_item?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_section(menu_item: CValuesRef<GMenuItem>?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4165(menu_item?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_action_and_target_value(menu_item: CValuesRef<GMenuItem>?, @CCall.CString action: String?, target_value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge4166(menu_item?.getPointer(memScope).rawValue, action?.cstr?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources72")
external fun g_menu_item_set_action_and_target(menu_item: CValuesRef<GMenuItem>?, @CCall.CString action: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_menu_item_set_detailed_action(menu_item: CValuesRef<GMenuItem>?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge4167(menu_item?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_icon(menu_item: CValuesRef<GMenuItem>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge4168(menu_item?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_export_menu_model(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, menu: CValuesRef<GMenuModel>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4169(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, menu?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unexport_menu_model(connection: CValuesRef<GDBusConnection>?, export_id: guint): Unit {
    memScoped {
        return kniBridge4170(connection?.getPointer(memScope).rawValue, export_id)
    }
}

fun g_dbus_menu_model_get_type(): GType {
    return kniBridge4171()
}

fun g_dbus_menu_model_get(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?): CPointer<GDBusMenuModel>? {
    memScoped {
        return interpretCPointer<GDBusMenuModel>(kniBridge4172(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_notification_get_type(): GType {
    return kniBridge4173()
}

fun g_notification_new(@CCall.CString title: String?): CPointer<GNotification>? {
    memScoped {
        return interpretCPointer<GNotification>(kniBridge4174(title?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_notification_set_title(notification: CValuesRef<GNotification>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge4175(notification?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_body(notification: CValuesRef<GNotification>?, @CCall.CString body: String?): Unit {
    memScoped {
        return kniBridge4176(notification?.getPointer(memScope).rawValue, body?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_icon(notification: CValuesRef<GNotification>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge4177(notification?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_urgent(notification: CValuesRef<GNotification>?, urgent: gboolean): Unit {
    memScoped {
        return kniBridge4178(notification?.getPointer(memScope).rawValue, urgent)
    }
}

fun g_notification_set_priority(notification: CValuesRef<GNotification>?, priority: GNotificationPriority): Unit {
    memScoped {
        return kniBridge4179(notification?.getPointer(memScope).rawValue, priority.value)
    }
}

fun g_notification_add_button(notification: CValuesRef<GNotification>?, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge4180(notification?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources73")
external fun g_notification_add_button_with_target(notification: CValuesRef<GNotification>?, @CCall.CString label: String?, @CCall.CString action: String?, @CCall.CString target_format: String?, vararg variadicArguments: Any?): Unit

fun g_notification_add_button_with_target_value(notification: CValuesRef<GNotification>?, @CCall.CString label: String?, @CCall.CString action: String?, target: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge4181(notification?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, action?.cstr?.getPointer(memScope).rawValue, target?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_default_action(notification: CValuesRef<GNotification>?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge4182(notification?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_glibresources74")
external fun g_notification_set_default_action_and_target(notification: CValuesRef<GNotification>?, @CCall.CString action: String?, @CCall.CString target_format: String?, vararg variadicArguments: Any?): Unit

fun g_notification_set_default_action_and_target_value(notification: CValuesRef<GNotification>?, @CCall.CString action: String?, target: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge4183(notification?.getPointer(memScope).rawValue, action?.cstr?.getPointer(memScope).rawValue, target?.getPointer(memScope).rawValue)
    }
}

fun g_list_model_get_type(): GType {
    return kniBridge4184()
}

fun glib_autoptr_clear_GListModel(_ptr: CValuesRef<GListModel>?): Unit {
    memScoped {
        return kniBridge4185(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GListModel(_ptr: CValuesRef<CPointerVar<GListModel>>?): Unit {
    memScoped {
        return kniBridge4186(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GListModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4187(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GListModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4188(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GListModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4189(_q?.getPointer(memScope).rawValue)
    }
}

fun G_LIST_MODEL(ptr: gpointer?): CPointer<GListModel>? {
    return interpretCPointer<GListModel>(kniBridge4190(ptr.rawValue))
}

fun G_IS_LIST_MODEL(ptr: gpointer?): gboolean {
    return kniBridge4191(ptr.rawValue)
}

fun G_LIST_MODEL_GET_IFACE(ptr: gpointer?): CPointer<GListModelInterface>? {
    return interpretCPointer<GListModelInterface>(kniBridge4192(ptr.rawValue))
}

fun g_list_model_get_item_type(list: CValuesRef<GListModel>?): GType {
    memScoped {
        return kniBridge4193(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_model_get_n_items(list: CValuesRef<GListModel>?): guint {
    memScoped {
        return kniBridge4194(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_model_get_item(list: CValuesRef<GListModel>?, position: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4195(list?.getPointer(memScope).rawValue, position))
    }
}

fun g_list_model_get_object(list: CValuesRef<GListModel>?, position: guint): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge4196(list?.getPointer(memScope).rawValue, position))
    }
}

fun g_list_model_items_changed(list: CValuesRef<GListModel>?, position: guint, removed: guint, added: guint): Unit {
    memScoped {
        return kniBridge4197(list?.getPointer(memScope).rawValue, position, removed, added)
    }
}

fun g_list_store_get_type(): GType {
    return kniBridge4198()
}

fun glib_autoptr_clear_GListStore(_ptr: CValuesRef<GListStore>?): Unit {
    memScoped {
        return kniBridge4199(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GListStore(_ptr: CValuesRef<CPointerVar<GListStore>>?): Unit {
    memScoped {
        return kniBridge4200(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GListStore(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4201(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GListStore(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4202(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GListStore(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4203(_q?.getPointer(memScope).rawValue)
    }
}

fun G_LIST_STORE(ptr: gpointer?): CPointer<GListStore>? {
    return interpretCPointer<GListStore>(kniBridge4204(ptr.rawValue))
}

fun G_IS_LIST_STORE(ptr: gpointer?): gboolean {
    return kniBridge4205(ptr.rawValue)
}

fun g_list_store_new(item_type: GType): CPointer<GListStore>? {
    return interpretCPointer<GListStore>(kniBridge4206(item_type))
}

fun g_list_store_insert(store: CValuesRef<GListStore>?, position: guint, item: gpointer?): Unit {
    memScoped {
        return kniBridge4207(store?.getPointer(memScope).rawValue, position, item.rawValue)
    }
}

fun g_list_store_insert_sorted(store: CValuesRef<GListStore>?, item: gpointer?, compare_func: GCompareDataFunc?, user_data: gpointer?): guint {
    memScoped {
        return kniBridge4208(store?.getPointer(memScope).rawValue, item.rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_list_store_sort(store: CValuesRef<GListStore>?, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4209(store?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_list_store_append(store: CValuesRef<GListStore>?, item: gpointer?): Unit {
    memScoped {
        return kniBridge4210(store?.getPointer(memScope).rawValue, item.rawValue)
    }
}

fun g_list_store_remove(store: CValuesRef<GListStore>?, position: guint): Unit {
    memScoped {
        return kniBridge4211(store?.getPointer(memScope).rawValue, position)
    }
}

fun g_list_store_remove_all(store: CValuesRef<GListStore>?): Unit {
    memScoped {
        return kniBridge4212(store?.getPointer(memScope).rawValue)
    }
}

fun g_list_store_splice(store: CValuesRef<GListStore>?, position: guint, n_removals: guint, additions: CValuesRef<gpointerVar>?, n_additions: guint): Unit {
    memScoped {
        return kniBridge4213(store?.getPointer(memScope).rawValue, position, n_removals, additions?.getPointer(memScope).rawValue, n_additions)
    }
}

fun glib_autoptr_clear_GAction(_ptr: CValuesRef<GAction>?): Unit {
    memScoped {
        return kniBridge4214(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAction(_ptr: CValuesRef<CPointerVar<GAction>>?): Unit {
    memScoped {
        return kniBridge4215(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4216(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4217(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4218(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GActionMap(_ptr: CValuesRef<GActionMap>?): Unit {
    memScoped {
        return kniBridge4219(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GActionMap(_ptr: CValuesRef<CPointerVar<GActionMap>>?): Unit {
    memScoped {
        return kniBridge4220(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GActionMap(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4221(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GActionMap(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4222(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GActionMap(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4223(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAppInfo(_ptr: CValuesRef<GAppInfo>?): Unit {
    memScoped {
        return kniBridge4224(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAppInfo(_ptr: CValuesRef<CPointerVar<GAppInfo>>?): Unit {
    memScoped {
        return kniBridge4225(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAppInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4226(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAppInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4227(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAppInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4228(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAppLaunchContext(_ptr: CValuesRef<GAppLaunchContext>?): Unit {
    memScoped {
        return kniBridge4229(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAppLaunchContext(_ptr: CValuesRef<CPointerVar<GAppLaunchContext>>?): Unit {
    memScoped {
        return kniBridge4230(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAppLaunchContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4231(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAppLaunchContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4232(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAppLaunchContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4233(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAppInfoMonitor(_ptr: CValuesRef<GAppInfoMonitor>?): Unit {
    memScoped {
        return kniBridge4234(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAppInfoMonitor(_ptr: CValuesRef<CPointerVar<GAppInfoMonitor>>?): Unit {
    memScoped {
        return kniBridge4235(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAppInfoMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4236(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAppInfoMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4237(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAppInfoMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4238(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GApplicationCommandLine(_ptr: CValuesRef<GApplicationCommandLine>?): Unit {
    memScoped {
        return kniBridge4239(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GApplicationCommandLine(_ptr: CValuesRef<CPointerVar<GApplicationCommandLine>>?): Unit {
    memScoped {
        return kniBridge4240(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GApplicationCommandLine(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4241(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GApplicationCommandLine(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4242(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GApplicationCommandLine(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4243(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GApplication(_ptr: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge4244(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GApplication(_ptr: CValuesRef<CPointerVar<GApplication>>?): Unit {
    memScoped {
        return kniBridge4245(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GApplication(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4246(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GApplication(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4247(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GApplication(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4248(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAsyncInitable(_ptr: CValuesRef<GAsyncInitable>?): Unit {
    memScoped {
        return kniBridge4249(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAsyncInitable(_ptr: CValuesRef<CPointerVar<GAsyncInitable>>?): Unit {
    memScoped {
        return kniBridge4250(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAsyncInitable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4251(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAsyncInitable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4252(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAsyncInitable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4253(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAsyncResult(_ptr: CValuesRef<GAsyncResult>?): Unit {
    memScoped {
        return kniBridge4254(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAsyncResult(_ptr: CValuesRef<CPointerVar<GAsyncResult>>?): Unit {
    memScoped {
        return kniBridge4255(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAsyncResult(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4256(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAsyncResult(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4257(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAsyncResult(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4258(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBufferedInputStream(_ptr: CValuesRef<GBufferedInputStream>?): Unit {
    memScoped {
        return kniBridge4259(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBufferedInputStream(_ptr: CValuesRef<CPointerVar<GBufferedInputStream>>?): Unit {
    memScoped {
        return kniBridge4260(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBufferedInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4261(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBufferedInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4262(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBufferedInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4263(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBufferedOutputStream(_ptr: CValuesRef<GBufferedOutputStream>?): Unit {
    memScoped {
        return kniBridge4264(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBufferedOutputStream(_ptr: CValuesRef<CPointerVar<GBufferedOutputStream>>?): Unit {
    memScoped {
        return kniBridge4265(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBufferedOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4266(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBufferedOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4267(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBufferedOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4268(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBytesIcon(_ptr: CValuesRef<GBytesIcon>?): Unit {
    memScoped {
        return kniBridge4269(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBytesIcon(_ptr: CValuesRef<CPointerVar<GBytesIcon>>?): Unit {
    memScoped {
        return kniBridge4270(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBytesIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4271(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBytesIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4272(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBytesIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4273(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GCancellable(_ptr: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge4274(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GCancellable(_ptr: CValuesRef<CPointerVar<GCancellable>>?): Unit {
    memScoped {
        return kniBridge4275(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GCancellable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4276(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GCancellable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4277(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GCancellable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4278(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GCharsetConverter(_ptr: CValuesRef<GCharsetConverter>?): Unit {
    memScoped {
        return kniBridge4279(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GCharsetConverter(_ptr: CValuesRef<CPointerVar<GCharsetConverter>>?): Unit {
    memScoped {
        return kniBridge4280(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GCharsetConverter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4281(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GCharsetConverter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4282(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GCharsetConverter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4283(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GConverter(_ptr: CValuesRef<GConverter>?): Unit {
    memScoped {
        return kniBridge4284(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GConverter(_ptr: CValuesRef<CPointerVar<GConverter>>?): Unit {
    memScoped {
        return kniBridge4285(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GConverter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4286(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GConverter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4287(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GConverter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4288(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GConverterInputStream(_ptr: CValuesRef<GConverterInputStream>?): Unit {
    memScoped {
        return kniBridge4289(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GConverterInputStream(_ptr: CValuesRef<CPointerVar<GConverterInputStream>>?): Unit {
    memScoped {
        return kniBridge4290(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GConverterInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4291(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GConverterInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4292(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GConverterInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4293(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GConverterOutputStream(_ptr: CValuesRef<GConverterOutputStream>?): Unit {
    memScoped {
        return kniBridge4294(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GConverterOutputStream(_ptr: CValuesRef<CPointerVar<GConverterOutputStream>>?): Unit {
    memScoped {
        return kniBridge4295(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GConverterOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4296(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GConverterOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4297(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GConverterOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4298(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GCredentials(_ptr: CValuesRef<GCredentials>?): Unit {
    memScoped {
        return kniBridge4299(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GCredentials(_ptr: CValuesRef<CPointerVar<GCredentials>>?): Unit {
    memScoped {
        return kniBridge4300(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GCredentials(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4301(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GCredentials(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4302(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GCredentials(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4303(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDatagramBased(_ptr: CValuesRef<GDatagramBased>?): Unit {
    memScoped {
        return kniBridge4304(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDatagramBased(_ptr: CValuesRef<CPointerVar<GDatagramBased>>?): Unit {
    memScoped {
        return kniBridge4305(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDatagramBased(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4306(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDatagramBased(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4307(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDatagramBased(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4308(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDataInputStream(_ptr: CValuesRef<GDataInputStream>?): Unit {
    memScoped {
        return kniBridge4309(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDataInputStream(_ptr: CValuesRef<CPointerVar<GDataInputStream>>?): Unit {
    memScoped {
        return kniBridge4310(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDataInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4311(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDataInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4312(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDataInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4313(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDataOutputStream(_ptr: CValuesRef<GDataOutputStream>?): Unit {
    memScoped {
        return kniBridge4314(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDataOutputStream(_ptr: CValuesRef<CPointerVar<GDataOutputStream>>?): Unit {
    memScoped {
        return kniBridge4315(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDataOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4316(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDataOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4317(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDataOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4318(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusActionGroup(_ptr: CValuesRef<GDBusActionGroup>?): Unit {
    memScoped {
        return kniBridge4319(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusActionGroup(_ptr: CValuesRef<CPointerVar<GDBusActionGroup>>?): Unit {
    memScoped {
        return kniBridge4320(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusActionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4321(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusActionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4322(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusActionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4323(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusAuthObserver(_ptr: CValuesRef<GDBusAuthObserver>?): Unit {
    memScoped {
        return kniBridge4324(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusAuthObserver(_ptr: CValuesRef<CPointerVar<GDBusAuthObserver>>?): Unit {
    memScoped {
        return kniBridge4325(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusAuthObserver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4326(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusAuthObserver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4327(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusAuthObserver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4328(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusConnection(_ptr: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge4329(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusConnection(_ptr: CValuesRef<CPointerVar<GDBusConnection>>?): Unit {
    memScoped {
        return kniBridge4330(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4331(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4332(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4333(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusInterface(_ptr: CValuesRef<GDBusInterface>?): Unit {
    memScoped {
        return kniBridge4334(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusInterface(_ptr: CValuesRef<CPointerVar<GDBusInterface>>?): Unit {
    memScoped {
        return kniBridge4335(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusInterface(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4336(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusInterface(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4337(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusInterface(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4338(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusInterfaceSkeleton(_ptr: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge4339(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusInterfaceSkeleton(_ptr: CValuesRef<CPointerVar<GDBusInterfaceSkeleton>>?): Unit {
    memScoped {
        return kniBridge4340(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusInterfaceSkeleton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4341(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4342(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusInterfaceSkeleton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4343(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusMenuModel(_ptr: CValuesRef<GDBusMenuModel>?): Unit {
    memScoped {
        return kniBridge4344(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusMenuModel(_ptr: CValuesRef<CPointerVar<GDBusMenuModel>>?): Unit {
    memScoped {
        return kniBridge4345(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusMenuModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4346(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusMenuModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4347(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusMenuModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4348(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusMessage(_ptr: CValuesRef<GDBusMessage>?): Unit {
    memScoped {
        return kniBridge4349(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusMessage(_ptr: CValuesRef<CPointerVar<GDBusMessage>>?): Unit {
    memScoped {
        return kniBridge4350(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusMessage(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4351(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusMessage(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4352(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusMessage(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4353(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusMethodInvocation(_ptr: CValuesRef<GDBusMethodInvocation>?): Unit {
    memScoped {
        return kniBridge4354(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusMethodInvocation(_ptr: CValuesRef<CPointerVar<GDBusMethodInvocation>>?): Unit {
    memScoped {
        return kniBridge4355(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusMethodInvocation(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4356(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusMethodInvocation(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4357(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusMethodInvocation(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4358(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusNodeInfo(_ptr: CValuesRef<GDBusNodeInfo>?): Unit {
    memScoped {
        return kniBridge4359(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusNodeInfo(_ptr: CValuesRef<CPointerVar<GDBusNodeInfo>>?): Unit {
    memScoped {
        return kniBridge4360(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusNodeInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4361(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusNodeInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4362(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusNodeInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4363(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObject(_ptr: CValuesRef<GDBusObject>?): Unit {
    memScoped {
        return kniBridge4364(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObject(_ptr: CValuesRef<CPointerVar<GDBusObject>>?): Unit {
    memScoped {
        return kniBridge4365(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObject(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4366(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObject(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4367(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObject(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4368(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectManagerClient(_ptr: CValuesRef<GDBusObjectManagerClient>?): Unit {
    memScoped {
        return kniBridge4369(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectManagerClient(_ptr: CValuesRef<CPointerVar<GDBusObjectManagerClient>>?): Unit {
    memScoped {
        return kniBridge4370(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectManagerClient(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4371(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectManagerClient(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4372(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectManagerClient(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4373(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectManager(_ptr: CValuesRef<GDBusObjectManager>?): Unit {
    memScoped {
        return kniBridge4374(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectManager(_ptr: CValuesRef<CPointerVar<GDBusObjectManager>>?): Unit {
    memScoped {
        return kniBridge4375(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectManager(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4376(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectManager(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4377(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectManager(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4378(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectManagerServer(_ptr: CValuesRef<GDBusObjectManagerServer>?): Unit {
    memScoped {
        return kniBridge4379(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectManagerServer(_ptr: CValuesRef<CPointerVar<GDBusObjectManagerServer>>?): Unit {
    memScoped {
        return kniBridge4380(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectManagerServer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4381(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectManagerServer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4382(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectManagerServer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4383(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectProxy(_ptr: CValuesRef<GDBusObjectProxy>?): Unit {
    memScoped {
        return kniBridge4384(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectProxy(_ptr: CValuesRef<CPointerVar<GDBusObjectProxy>>?): Unit {
    memScoped {
        return kniBridge4385(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectProxy(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4386(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectProxy(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4387(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectProxy(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4388(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectSkeleton(_ptr: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge4389(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectSkeleton(_ptr: CValuesRef<CPointerVar<GDBusObjectSkeleton>>?): Unit {
    memScoped {
        return kniBridge4390(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectSkeleton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4391(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectSkeleton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4392(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectSkeleton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4393(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusProxy(_ptr: CValuesRef<GDBusProxy>?): Unit {
    memScoped {
        return kniBridge4394(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusProxy(_ptr: CValuesRef<CPointerVar<GDBusProxy>>?): Unit {
    memScoped {
        return kniBridge4395(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusProxy(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4396(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusProxy(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4397(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusProxy(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4398(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusServer(_ptr: CValuesRef<GDBusServer>?): Unit {
    memScoped {
        return kniBridge4399(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusServer(_ptr: CValuesRef<CPointerVar<GDBusServer>>?): Unit {
    memScoped {
        return kniBridge4400(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusServer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4401(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusServer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4402(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusServer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4403(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDrive(_ptr: CValuesRef<GDrive>?): Unit {
    memScoped {
        return kniBridge4404(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDrive(_ptr: CValuesRef<CPointerVar<GDrive>>?): Unit {
    memScoped {
        return kniBridge4405(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDrive(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4406(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDrive(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4407(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDrive(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4408(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GEmblemedIcon(_ptr: CValuesRef<GEmblemedIcon>?): Unit {
    memScoped {
        return kniBridge4409(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GEmblemedIcon(_ptr: CValuesRef<CPointerVar<GEmblemedIcon>>?): Unit {
    memScoped {
        return kniBridge4410(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GEmblemedIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4411(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GEmblemedIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4412(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GEmblemedIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4413(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GEmblem(_ptr: CValuesRef<GEmblem>?): Unit {
    memScoped {
        return kniBridge4414(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GEmblem(_ptr: CValuesRef<CPointerVar<GEmblem>>?): Unit {
    memScoped {
        return kniBridge4415(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GEmblem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4416(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GEmblem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4417(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GEmblem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4418(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileEnumerator(_ptr: CValuesRef<GFileEnumerator>?): Unit {
    memScoped {
        return kniBridge4419(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileEnumerator(_ptr: CValuesRef<CPointerVar<GFileEnumerator>>?): Unit {
    memScoped {
        return kniBridge4420(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileEnumerator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4421(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileEnumerator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4422(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileEnumerator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4423(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFile(_ptr: CValuesRef<GFile>?): Unit {
    memScoped {
        return kniBridge4424(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFile(_ptr: CValuesRef<CPointerVar<GFile>>?): Unit {
    memScoped {
        return kniBridge4425(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFile(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4426(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFile(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4427(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFile(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4428(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileAttributeInfoList(_ptr: CValuesRef<GFileAttributeInfoList>?): Unit {
    memScoped {
        return kniBridge4429(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileAttributeInfoList(_ptr: CValuesRef<CPointerVar<GFileAttributeInfoList>>?): Unit {
    memScoped {
        return kniBridge4430(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileAttributeInfoList(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4431(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileAttributeInfoList(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4432(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileAttributeInfoList(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4433(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileIcon(_ptr: CValuesRef<GFileIcon>?): Unit {
    memScoped {
        return kniBridge4434(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileIcon(_ptr: CValuesRef<CPointerVar<GFileIcon>>?): Unit {
    memScoped {
        return kniBridge4435(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4436(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4437(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4438(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileInfo(_ptr: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge4439(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileInfo(_ptr: CValuesRef<CPointerVar<GFileInfo>>?): Unit {
    memScoped {
        return kniBridge4440(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4441(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4442(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4443(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileInputStream(_ptr: CValuesRef<GFileInputStream>?): Unit {
    memScoped {
        return kniBridge4444(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileInputStream(_ptr: CValuesRef<CPointerVar<GFileInputStream>>?): Unit {
    memScoped {
        return kniBridge4445(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4446(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4447(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4448(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileIOStream(_ptr: CValuesRef<GFileIOStream>?): Unit {
    memScoped {
        return kniBridge4449(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileIOStream(_ptr: CValuesRef<CPointerVar<GFileIOStream>>?): Unit {
    memScoped {
        return kniBridge4450(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileIOStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4451(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileIOStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4452(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileIOStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4453(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileMonitor(_ptr: CValuesRef<GFileMonitor>?): Unit {
    memScoped {
        return kniBridge4454(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileMonitor(_ptr: CValuesRef<CPointerVar<GFileMonitor>>?): Unit {
    memScoped {
        return kniBridge4455(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4456(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4457(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4458(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFilenameCompleter(_ptr: CValuesRef<GFilenameCompleter>?): Unit {
    memScoped {
        return kniBridge4459(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFilenameCompleter(_ptr: CValuesRef<CPointerVar<GFilenameCompleter>>?): Unit {
    memScoped {
        return kniBridge4460(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFilenameCompleter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4461(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFilenameCompleter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4462(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFilenameCompleter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4463(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileOutputStream(_ptr: CValuesRef<GFileOutputStream>?): Unit {
    memScoped {
        return kniBridge4464(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileOutputStream(_ptr: CValuesRef<CPointerVar<GFileOutputStream>>?): Unit {
    memScoped {
        return kniBridge4465(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4466(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4467(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4468(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFilterInputStream(_ptr: CValuesRef<GFilterInputStream>?): Unit {
    memScoped {
        return kniBridge4469(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFilterInputStream(_ptr: CValuesRef<CPointerVar<GFilterInputStream>>?): Unit {
    memScoped {
        return kniBridge4470(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFilterInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4471(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFilterInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4472(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFilterInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4473(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFilterOutputStream(_ptr: CValuesRef<GFilterOutputStream>?): Unit {
    memScoped {
        return kniBridge4474(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFilterOutputStream(_ptr: CValuesRef<CPointerVar<GFilterOutputStream>>?): Unit {
    memScoped {
        return kniBridge4475(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFilterOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4476(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFilterOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4477(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFilterOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4478(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIcon(_ptr: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge4479(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIcon(_ptr: CValuesRef<CPointerVar<GIcon>>?): Unit {
    memScoped {
        return kniBridge4480(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4481(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4482(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4483(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInetAddress(_ptr: CValuesRef<GInetAddress>?): Unit {
    memScoped {
        return kniBridge4484(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInetAddress(_ptr: CValuesRef<CPointerVar<GInetAddress>>?): Unit {
    memScoped {
        return kniBridge4485(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInetAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4486(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInetAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4487(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInetAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4488(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInetAddressMask(_ptr: CValuesRef<GInetAddressMask>?): Unit {
    memScoped {
        return kniBridge4489(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInetAddressMask(_ptr: CValuesRef<CPointerVar<GInetAddressMask>>?): Unit {
    memScoped {
        return kniBridge4490(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInetAddressMask(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4491(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInetAddressMask(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4492(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInetAddressMask(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4493(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInetSocketAddress(_ptr: CValuesRef<GInetSocketAddress>?): Unit {
    memScoped {
        return kniBridge4494(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInetSocketAddress(_ptr: CValuesRef<CPointerVar<GInetSocketAddress>>?): Unit {
    memScoped {
        return kniBridge4495(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInetSocketAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4496(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInetSocketAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4497(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInetSocketAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4498(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInitable(_ptr: CValuesRef<GInitable>?): Unit {
    memScoped {
        return kniBridge4499(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInitable(_ptr: CValuesRef<CPointerVar<GInitable>>?): Unit {
    memScoped {
        return kniBridge4500(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInitable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4501(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInitable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4502(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInitable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4503(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInputStream(_ptr: CValuesRef<GInputStream>?): Unit {
    memScoped {
        return kniBridge4504(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInputStream(_ptr: CValuesRef<CPointerVar<GInputStream>>?): Unit {
    memScoped {
        return kniBridge4505(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4506(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4507(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4508(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIOModule(_ptr: CValuesRef<GIOModule>?): Unit {
    memScoped {
        return kniBridge4509(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIOModule(_ptr: CValuesRef<CPointerVar<GIOModule>>?): Unit {
    memScoped {
        return kniBridge4510(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIOModule(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4511(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIOModule(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4512(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIOModule(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4513(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIOStream(_ptr: CValuesRef<GIOStream>?): Unit {
    memScoped {
        return kniBridge4514(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIOStream(_ptr: CValuesRef<CPointerVar<GIOStream>>?): Unit {
    memScoped {
        return kniBridge4515(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIOStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4516(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIOStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4517(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIOStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4518(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GLoadableIcon(_ptr: CValuesRef<GLoadableIcon>?): Unit {
    memScoped {
        return kniBridge4519(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GLoadableIcon(_ptr: CValuesRef<CPointerVar<GLoadableIcon>>?): Unit {
    memScoped {
        return kniBridge4520(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GLoadableIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4521(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GLoadableIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4522(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GLoadableIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4523(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMemoryInputStream(_ptr: CValuesRef<GMemoryInputStream>?): Unit {
    memScoped {
        return kniBridge4524(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMemoryInputStream(_ptr: CValuesRef<CPointerVar<GMemoryInputStream>>?): Unit {
    memScoped {
        return kniBridge4525(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMemoryInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4526(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMemoryInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4527(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMemoryInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4528(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMemoryOutputStream(_ptr: CValuesRef<GMemoryOutputStream>?): Unit {
    memScoped {
        return kniBridge4529(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMemoryOutputStream(_ptr: CValuesRef<CPointerVar<GMemoryOutputStream>>?): Unit {
    memScoped {
        return kniBridge4530(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMemoryOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4531(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMemoryOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4532(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMemoryOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4533(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenu(_ptr: CValuesRef<GMenu>?): Unit {
    memScoped {
        return kniBridge4534(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenu(_ptr: CValuesRef<CPointerVar<GMenu>>?): Unit {
    memScoped {
        return kniBridge4535(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenu(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4536(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenu(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4537(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenu(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4538(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuItem(_ptr: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge4539(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuItem(_ptr: CValuesRef<CPointerVar<GMenuItem>>?): Unit {
    memScoped {
        return kniBridge4540(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4541(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4542(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4543(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuModel(_ptr: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge4544(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuModel(_ptr: CValuesRef<CPointerVar<GMenuModel>>?): Unit {
    memScoped {
        return kniBridge4545(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4546(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4547(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4548(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuAttributeIter(_ptr: CValuesRef<GMenuAttributeIter>?): Unit {
    memScoped {
        return kniBridge4549(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuAttributeIter(_ptr: CValuesRef<CPointerVar<GMenuAttributeIter>>?): Unit {
    memScoped {
        return kniBridge4550(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuAttributeIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4551(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuAttributeIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4552(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuAttributeIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4553(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuLinkIter(_ptr: CValuesRef<GMenuLinkIter>?): Unit {
    memScoped {
        return kniBridge4554(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuLinkIter(_ptr: CValuesRef<CPointerVar<GMenuLinkIter>>?): Unit {
    memScoped {
        return kniBridge4555(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuLinkIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4556(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuLinkIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4557(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuLinkIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4558(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMount(_ptr: CValuesRef<GMount>?): Unit {
    memScoped {
        return kniBridge4559(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMount(_ptr: CValuesRef<CPointerVar<GMount>>?): Unit {
    memScoped {
        return kniBridge4560(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMount(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4561(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMount(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4562(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMount(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4563(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMountOperation(_ptr: CValuesRef<GMountOperation>?): Unit {
    memScoped {
        return kniBridge4564(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMountOperation(_ptr: CValuesRef<CPointerVar<GMountOperation>>?): Unit {
    memScoped {
        return kniBridge4565(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMountOperation(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4566(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMountOperation(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4567(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMountOperation(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4568(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNativeVolumeMonitor(_ptr: CValuesRef<GNativeVolumeMonitor>?): Unit {
    memScoped {
        return kniBridge4569(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNativeVolumeMonitor(_ptr: CValuesRef<CPointerVar<GNativeVolumeMonitor>>?): Unit {
    memScoped {
        return kniBridge4570(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNativeVolumeMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4571(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNativeVolumeMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4572(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNativeVolumeMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4573(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNetworkAddress(_ptr: CValuesRef<GNetworkAddress>?): Unit {
    memScoped {
        return kniBridge4574(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNetworkAddress(_ptr: CValuesRef<CPointerVar<GNetworkAddress>>?): Unit {
    memScoped {
        return kniBridge4575(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNetworkAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4576(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNetworkAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4577(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNetworkAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4578(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNetworkMonitor(_ptr: CValuesRef<GNetworkMonitor>?): Unit {
    memScoped {
        return kniBridge4579(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNetworkMonitor(_ptr: CValuesRef<CPointerVar<GNetworkMonitor>>?): Unit {
    memScoped {
        return kniBridge4580(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNetworkMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4581(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNetworkMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4582(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNetworkMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4583(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNetworkService(_ptr: CValuesRef<GNetworkService>?): Unit {
    memScoped {
        return kniBridge4584(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNetworkService(_ptr: CValuesRef<CPointerVar<GNetworkService>>?): Unit {
    memScoped {
        return kniBridge4585(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNetworkService(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4586(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNetworkService(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4587(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNetworkService(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4588(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNotification(_ptr: CValuesRef<GNotification>?): Unit {
    memScoped {
        return kniBridge4589(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNotification(_ptr: CValuesRef<CPointerVar<GNotification>>?): Unit {
    memScoped {
        return kniBridge4590(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNotification(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4591(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNotification(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4592(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNotification(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4593(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GOutputStream(_ptr: CValuesRef<GOutputStream>?): Unit {
    memScoped {
        return kniBridge4594(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GOutputStream(_ptr: CValuesRef<CPointerVar<GOutputStream>>?): Unit {
    memScoped {
        return kniBridge4595(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4596(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4597(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4598(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPermission(_ptr: CValuesRef<GPermission>?): Unit {
    memScoped {
        return kniBridge4599(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPermission(_ptr: CValuesRef<CPointerVar<GPermission>>?): Unit {
    memScoped {
        return kniBridge4600(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPermission(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4601(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPermission(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4602(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPermission(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4603(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPollableInputStream(_ptr: CValuesRef<GPollableInputStream>?): Unit {
    memScoped {
        return kniBridge4604(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPollableInputStream(_ptr: CValuesRef<CPointerVar<GPollableInputStream>>?): Unit {
    memScoped {
        return kniBridge4605(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPollableInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4606(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPollableInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4607(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPollableInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4608(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPollableOutputStream(_ptr: CValuesRef<GPollableOutputStream>?): Unit {
    memScoped {
        return kniBridge4609(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPollableOutputStream(_ptr: CValuesRef<CPointerVar<GPollableOutputStream>>?): Unit {
    memScoped {
        return kniBridge4610(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPollableOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4611(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPollableOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4612(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPollableOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4613(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPropertyAction(_ptr: CValuesRef<GPropertyAction>?): Unit {
    memScoped {
        return kniBridge4614(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPropertyAction(_ptr: CValuesRef<CPointerVar<GPropertyAction>>?): Unit {
    memScoped {
        return kniBridge4615(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPropertyAction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4616(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPropertyAction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4617(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPropertyAction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4618(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxyAddressEnumerator(_ptr: CValuesRef<GProxyAddressEnumerator>?): Unit {
    memScoped {
        return kniBridge4619(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxyAddressEnumerator(_ptr: CValuesRef<CPointerVar<GProxyAddressEnumerator>>?): Unit {
    memScoped {
        return kniBridge4620(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxyAddressEnumerator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4621(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxyAddressEnumerator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4622(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxyAddressEnumerator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4623(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxyAddress(_ptr: CValuesRef<GProxyAddress>?): Unit {
    memScoped {
        return kniBridge4624(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxyAddress(_ptr: CValuesRef<CPointerVar<GProxyAddress>>?): Unit {
    memScoped {
        return kniBridge4625(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxyAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4626(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxyAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4627(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxyAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4628(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxy(_ptr: CValuesRef<GProxy>?): Unit {
    memScoped {
        return kniBridge4629(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxy(_ptr: CValuesRef<CPointerVar<GProxy>>?): Unit {
    memScoped {
        return kniBridge4630(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxy(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4631(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxy(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4632(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxy(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4633(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxyResolver(_ptr: CValuesRef<GProxyResolver>?): Unit {
    memScoped {
        return kniBridge4634(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxyResolver(_ptr: CValuesRef<CPointerVar<GProxyResolver>>?): Unit {
    memScoped {
        return kniBridge4635(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxyResolver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4636(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxyResolver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4637(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxyResolver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4638(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRemoteActionGroup(_ptr: CValuesRef<GRemoteActionGroup>?): Unit {
    memScoped {
        return kniBridge4639(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRemoteActionGroup(_ptr: CValuesRef<CPointerVar<GRemoteActionGroup>>?): Unit {
    memScoped {
        return kniBridge4640(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRemoteActionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4641(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRemoteActionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4642(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRemoteActionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4643(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GResolver(_ptr: CValuesRef<GResolver>?): Unit {
    memScoped {
        return kniBridge4644(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GResolver(_ptr: CValuesRef<CPointerVar<GResolver>>?): Unit {
    memScoped {
        return kniBridge4645(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GResolver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4646(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GResolver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4647(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GResolver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4648(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GResource(_ptr: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge4649(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GResource(_ptr: CValuesRef<CPointerVar<GResource>>?): Unit {
    memScoped {
        return kniBridge4650(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GResource(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4651(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GResource(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4652(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GResource(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4653(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSeekable(_ptr: CValuesRef<GSeekable>?): Unit {
    memScoped {
        return kniBridge4654(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSeekable(_ptr: CValuesRef<CPointerVar<GSeekable>>?): Unit {
    memScoped {
        return kniBridge4655(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSeekable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4656(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSeekable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4657(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSeekable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4658(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsBackend(_ptr: CValuesRef<GSettingsBackend>?): Unit {
    memScoped {
        return kniBridge4659(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsBackend(_ptr: CValuesRef<CPointerVar<GSettingsBackend>>?): Unit {
    memScoped {
        return kniBridge4660(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsBackend(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4661(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsBackend(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4662(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsBackend(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4663(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsSchema(_ptr: CValuesRef<GSettingsSchema>?): Unit {
    memScoped {
        return kniBridge4664(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsSchema(_ptr: CValuesRef<CPointerVar<GSettingsSchema>>?): Unit {
    memScoped {
        return kniBridge4665(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsSchema(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4666(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsSchema(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4667(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsSchema(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4668(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsSchemaKey(_ptr: CValuesRef<GSettingsSchemaKey>?): Unit {
    memScoped {
        return kniBridge4669(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsSchemaKey(_ptr: CValuesRef<CPointerVar<GSettingsSchemaKey>>?): Unit {
    memScoped {
        return kniBridge4670(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsSchemaKey(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4671(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsSchemaKey(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4672(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsSchemaKey(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4673(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsSchemaSource(_ptr: CValuesRef<GSettingsSchemaSource>?): Unit {
    memScoped {
        return kniBridge4674(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsSchemaSource(_ptr: CValuesRef<CPointerVar<GSettingsSchemaSource>>?): Unit {
    memScoped {
        return kniBridge4675(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsSchemaSource(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4676(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsSchemaSource(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4677(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsSchemaSource(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4678(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettings(_ptr: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge4679(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettings(_ptr: CValuesRef<CPointerVar<GSettings>>?): Unit {
    memScoped {
        return kniBridge4680(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettings(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4681(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettings(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4682(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettings(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4683(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleActionGroup(_ptr: CValuesRef<GSimpleActionGroup>?): Unit {
    memScoped {
        return kniBridge4684(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleActionGroup(_ptr: CValuesRef<CPointerVar<GSimpleActionGroup>>?): Unit {
    memScoped {
        return kniBridge4685(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleActionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4686(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleActionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4687(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleActionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4688(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleAction(_ptr: CValuesRef<GSimpleAction>?): Unit {
    memScoped {
        return kniBridge4689(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleAction(_ptr: CValuesRef<CPointerVar<GSimpleAction>>?): Unit {
    memScoped {
        return kniBridge4690(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleAction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4691(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleAction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4692(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleAction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4693(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleAsyncResult(_ptr: CValuesRef<GSimpleAsyncResult>?): Unit {
    memScoped {
        return kniBridge4694(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleAsyncResult(_ptr: CValuesRef<CPointerVar<GSimpleAsyncResult>>?): Unit {
    memScoped {
        return kniBridge4695(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleAsyncResult(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4696(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleAsyncResult(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4697(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleAsyncResult(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4698(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimplePermission(_ptr: CValuesRef<GSimplePermission>?): Unit {
    memScoped {
        return kniBridge4699(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimplePermission(_ptr: CValuesRef<CPointerVar<GSimplePermission>>?): Unit {
    memScoped {
        return kniBridge4700(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimplePermission(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4701(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimplePermission(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4702(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimplePermission(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4703(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleProxyResolver(_ptr: CValuesRef<GSimpleProxyResolver>?): Unit {
    memScoped {
        return kniBridge4704(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleProxyResolver(_ptr: CValuesRef<CPointerVar<GSimpleProxyResolver>>?): Unit {
    memScoped {
        return kniBridge4705(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleProxyResolver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4706(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleProxyResolver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4707(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleProxyResolver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4708(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketAddressEnumerator(_ptr: CValuesRef<GSocketAddressEnumerator>?): Unit {
    memScoped {
        return kniBridge4709(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketAddressEnumerator(_ptr: CValuesRef<CPointerVar<GSocketAddressEnumerator>>?): Unit {
    memScoped {
        return kniBridge4710(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketAddressEnumerator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4711(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketAddressEnumerator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4712(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketAddressEnumerator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4713(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketAddress(_ptr: CValuesRef<GSocketAddress>?): Unit {
    memScoped {
        return kniBridge4714(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketAddress(_ptr: CValuesRef<CPointerVar<GSocketAddress>>?): Unit {
    memScoped {
        return kniBridge4715(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4716(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4717(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4718(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketClient(_ptr: CValuesRef<GSocketClient>?): Unit {
    memScoped {
        return kniBridge4719(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketClient(_ptr: CValuesRef<CPointerVar<GSocketClient>>?): Unit {
    memScoped {
        return kniBridge4720(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketClient(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4721(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketClient(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4722(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketClient(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4723(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketConnectable(_ptr: CValuesRef<GSocketConnectable>?): Unit {
    memScoped {
        return kniBridge4724(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketConnectable(_ptr: CValuesRef<CPointerVar<GSocketConnectable>>?): Unit {
    memScoped {
        return kniBridge4725(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketConnectable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4726(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketConnectable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4727(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketConnectable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4728(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketConnection(_ptr: CValuesRef<GSocketConnection>?): Unit {
    memScoped {
        return kniBridge4729(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketConnection(_ptr: CValuesRef<CPointerVar<GSocketConnection>>?): Unit {
    memScoped {
        return kniBridge4730(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4731(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4732(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4733(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketControlMessage(_ptr: CValuesRef<GSocketControlMessage>?): Unit {
    memScoped {
        return kniBridge4734(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketControlMessage(_ptr: CValuesRef<CPointerVar<GSocketControlMessage>>?): Unit {
    memScoped {
        return kniBridge4735(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketControlMessage(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4736(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketControlMessage(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4737(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketControlMessage(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4738(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocket(_ptr: CValuesRef<GSocket>?): Unit {
    memScoped {
        return kniBridge4739(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocket(_ptr: CValuesRef<CPointerVar<GSocket>>?): Unit {
    memScoped {
        return kniBridge4740(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocket(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4741(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocket(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4742(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocket(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4743(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketListener(_ptr: CValuesRef<GSocketListener>?): Unit {
    memScoped {
        return kniBridge4744(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketListener(_ptr: CValuesRef<CPointerVar<GSocketListener>>?): Unit {
    memScoped {
        return kniBridge4745(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketListener(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4746(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketListener(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4747(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketListener(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4748(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketService(_ptr: CValuesRef<GSocketService>?): Unit {
    memScoped {
        return kniBridge4749(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketService(_ptr: CValuesRef<CPointerVar<GSocketService>>?): Unit {
    memScoped {
        return kniBridge4750(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketService(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4751(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketService(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4752(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketService(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4753(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSubprocess(_ptr: CValuesRef<GSubprocess>?): Unit {
    memScoped {
        return kniBridge4754(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSubprocess(_ptr: CValuesRef<CPointerVar<GSubprocess>>?): Unit {
    memScoped {
        return kniBridge4755(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSubprocess(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4756(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSubprocess(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4757(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSubprocess(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4758(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSubprocessLauncher(_ptr: CValuesRef<GSubprocessLauncher>?): Unit {
    memScoped {
        return kniBridge4759(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSubprocessLauncher(_ptr: CValuesRef<CPointerVar<GSubprocessLauncher>>?): Unit {
    memScoped {
        return kniBridge4760(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSubprocessLauncher(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4761(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSubprocessLauncher(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4762(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSubprocessLauncher(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4763(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTask(_ptr: CValuesRef<GTask>?): Unit {
    memScoped {
        return kniBridge4764(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTask(_ptr: CValuesRef<CPointerVar<GTask>>?): Unit {
    memScoped {
        return kniBridge4765(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTask(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4766(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTask(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4767(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTask(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4768(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTcpConnection(_ptr: CValuesRef<GTcpConnection>?): Unit {
    memScoped {
        return kniBridge4769(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTcpConnection(_ptr: CValuesRef<CPointerVar<GTcpConnection>>?): Unit {
    memScoped {
        return kniBridge4770(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTcpConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4771(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTcpConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4772(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTcpConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4773(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTcpWrapperConnection(_ptr: CValuesRef<GTcpWrapperConnection>?): Unit {
    memScoped {
        return kniBridge4774(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTcpWrapperConnection(_ptr: CValuesRef<CPointerVar<GTcpWrapperConnection>>?): Unit {
    memScoped {
        return kniBridge4775(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTcpWrapperConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4776(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTcpWrapperConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4777(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTcpWrapperConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4778(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTestDBus(_ptr: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge4779(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTestDBus(_ptr: CValuesRef<CPointerVar<GTestDBus>>?): Unit {
    memScoped {
        return kniBridge4780(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTestDBus(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4781(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTestDBus(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4782(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTestDBus(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4783(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GThemedIcon(_ptr: CValuesRef<GThemedIcon>?): Unit {
    memScoped {
        return kniBridge4784(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GThemedIcon(_ptr: CValuesRef<CPointerVar<GThemedIcon>>?): Unit {
    memScoped {
        return kniBridge4785(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GThemedIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4786(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GThemedIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4787(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GThemedIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4788(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GThreadedSocketService(_ptr: CValuesRef<GThreadedSocketService>?): Unit {
    memScoped {
        return kniBridge4789(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GThreadedSocketService(_ptr: CValuesRef<CPointerVar<GThreadedSocketService>>?): Unit {
    memScoped {
        return kniBridge4790(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GThreadedSocketService(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4791(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GThreadedSocketService(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4792(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GThreadedSocketService(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4793(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsBackend(_ptr: CValuesRef<GTlsBackend>?): Unit {
    memScoped {
        return kniBridge4794(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsBackend(_ptr: CValuesRef<CPointerVar<GTlsBackend>>?): Unit {
    memScoped {
        return kniBridge4795(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsBackend(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4796(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsBackend(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4797(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsBackend(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4798(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsCertificate(_ptr: CValuesRef<GTlsCertificate>?): Unit {
    memScoped {
        return kniBridge4799(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsCertificate(_ptr: CValuesRef<CPointerVar<GTlsCertificate>>?): Unit {
    memScoped {
        return kniBridge4800(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsCertificate(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4801(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsCertificate(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4802(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsCertificate(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4803(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsClientConnection(_ptr: CValuesRef<GTlsClientConnection>?): Unit {
    memScoped {
        return kniBridge4804(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsClientConnection(_ptr: CValuesRef<CPointerVar<GTlsClientConnection>>?): Unit {
    memScoped {
        return kniBridge4805(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsClientConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4806(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsClientConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4807(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsClientConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4808(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsConnection(_ptr: CValuesRef<GTlsConnection>?): Unit {
    memScoped {
        return kniBridge4809(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsConnection(_ptr: CValuesRef<CPointerVar<GTlsConnection>>?): Unit {
    memScoped {
        return kniBridge4810(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4811(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4812(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4813(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsDatabase(_ptr: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge4814(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsDatabase(_ptr: CValuesRef<CPointerVar<GTlsDatabase>>?): Unit {
    memScoped {
        return kniBridge4815(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsDatabase(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4816(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsDatabase(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4817(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsDatabase(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4818(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsFileDatabase(_ptr: CValuesRef<GTlsFileDatabase>?): Unit {
    memScoped {
        return kniBridge4819(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsFileDatabase(_ptr: CValuesRef<CPointerVar<GTlsFileDatabase>>?): Unit {
    memScoped {
        return kniBridge4820(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsFileDatabase(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4821(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsFileDatabase(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4822(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsFileDatabase(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4823(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsInteraction(_ptr: CValuesRef<GTlsInteraction>?): Unit {
    memScoped {
        return kniBridge4824(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsInteraction(_ptr: CValuesRef<CPointerVar<GTlsInteraction>>?): Unit {
    memScoped {
        return kniBridge4825(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsInteraction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4826(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsInteraction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4827(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsInteraction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4828(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsPassword(_ptr: CValuesRef<GTlsPassword>?): Unit {
    memScoped {
        return kniBridge4829(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsPassword(_ptr: CValuesRef<CPointerVar<GTlsPassword>>?): Unit {
    memScoped {
        return kniBridge4830(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsPassword(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4831(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsPassword(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4832(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsPassword(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4833(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsServerConnection(_ptr: CValuesRef<GTlsServerConnection>?): Unit {
    memScoped {
        return kniBridge4834(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsServerConnection(_ptr: CValuesRef<CPointerVar<GTlsServerConnection>>?): Unit {
    memScoped {
        return kniBridge4835(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsServerConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4836(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsServerConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4837(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsServerConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4838(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVfs(_ptr: CValuesRef<GVfs>?): Unit {
    memScoped {
        return kniBridge4839(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVfs(_ptr: CValuesRef<CPointerVar<GVfs>>?): Unit {
    memScoped {
        return kniBridge4840(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVfs(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4841(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVfs(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4842(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVfs(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4843(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVolume(_ptr: CValuesRef<GVolume>?): Unit {
    memScoped {
        return kniBridge4844(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVolume(_ptr: CValuesRef<CPointerVar<GVolume>>?): Unit {
    memScoped {
        return kniBridge4845(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVolume(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4846(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVolume(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4847(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVolume(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4848(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVolumeMonitor(_ptr: CValuesRef<GVolumeMonitor>?): Unit {
    memScoped {
        return kniBridge4849(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVolumeMonitor(_ptr: CValuesRef<CPointerVar<GVolumeMonitor>>?): Unit {
    memScoped {
        return kniBridge4850(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVolumeMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4851(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVolumeMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4852(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVolumeMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4853(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GZlibCompressor(_ptr: CValuesRef<GZlibCompressor>?): Unit {
    memScoped {
        return kniBridge4854(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GZlibCompressor(_ptr: CValuesRef<CPointerVar<GZlibCompressor>>?): Unit {
    memScoped {
        return kniBridge4855(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GZlibCompressor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4856(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GZlibCompressor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4857(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GZlibCompressor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4858(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GZlibDecompressor(_ptr: CValuesRef<GZlibDecompressor>?): Unit {
    memScoped {
        return kniBridge4859(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GZlibDecompressor(_ptr: CValuesRef<CPointerVar<GZlibDecompressor>>?): Unit {
    memScoped {
        return kniBridge4860(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GZlibDecompressor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4861(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GZlibDecompressor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4862(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GZlibDecompressor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4863(_q?.getPointer(memScope).rawValue)
    }
}

fun glibresources_get_resource(): CPointer<GResource>? {
    return interpretCPointer<GResource>(kniBridge4864())
}

var g_mem_gc_friendly: gboolean
    get() = kniBridge4865()
    set(value) { kniBridge4866(value) }

var glib_mem_profiler_table: CPointer<GMemVTable>?
    get() = interpretCPointer<GMemVTable>(kniBridge4867())
    set(value) { kniBridge4868(value.rawValue) }

val g_timeout_funcs: GSourceFuncs
    get() = interpretPointed<GSourceFuncs>(kniBridge4869())

val g_child_watch_funcs: GSourceFuncs
    get() = interpretPointed<GSourceFuncs>(kniBridge4870())

val g_idle_funcs: GSourceFuncs
    get() = interpretPointed<GSourceFuncs>(kniBridge4871())

val g_unix_signal_funcs: GSourceFuncs
    get() = interpretPointed<GSourceFuncs>(kniBridge4872())

val g_unix_fd_source_funcs: GSourceFuncs
    get() = interpretPointed<GSourceFuncs>(kniBridge4873())

val g_utf8_skip: CPointer<gcharVar>?
    get() = interpretCPointer<gcharVar>(kniBridge4874())

val g_io_watch_funcs: GSourceFuncs
    get() = interpretPointed<GSourceFuncs>(kniBridge4875())

val g_ascii_table: CPointer<guint16Var>?
    get() = interpretCPointer<guint16Var>(kniBridge4876())

val g_test_config_vars: CPointer<GTestConfig>?
    get() = interpretCPointer<GTestConfig>(kniBridge4877())

val glib_major_version: guint
    get() = kniBridge4878()

val glib_minor_version: guint
    get() = kniBridge4879()

val glib_micro_version: guint
    get() = kniBridge4880()

val glib_interface_age: guint
    get() = kniBridge4881()

val glib_binary_age: guint
    get() = kniBridge4882()

val g_thread_functions_for_glib_use: GThreadFunctions
    get() = interpretPointed<GThreadFunctions>(kniBridge4883())

var g_thread_use_default_impl: gboolean
    get() = kniBridge4884()
    set(value) { kniBridge4885(value) }

var g_thread_gettime: CPointer<CFunction<() -> guint64>>?
    get() = interpretCPointer<CFunction<() -> guint64>>(kniBridge4886())
    set(value) { kniBridge4887(value.rawValue) }

var g_threads_got_initialized: gboolean
    get() = kniBridge4888()
    set(value) { kniBridge4889(value) }

var g_param_spec_types: CPointer<GTypeVar>?
    get() = interpretCPointer<GTypeVar>(kniBridge4890())
    set(value) { kniBridge4891(value.rawValue) }

val G_GNUC_FUNCTION: String get() = ""

val G_GNUC_PRETTY_FUNCTION: String get() = ""

const val G_ANALYZER_ANALYZING: Int = 0

val G_STRLOC: String get() = "\u002Ftmp\u002Ftmp12655176515692684801.c:116"

const val FALSE: Int = 0

const val TRUE: Int = 1

val G_MINFLOAT: Float get() = bitsToFloat(8388608) /* == 1.17549435E-38 */

val G_MAXFLOAT: Float get() = bitsToFloat(2139095039) /* == 3.4028235E38 */

val G_MINDOUBLE: Double get() = bitsToDouble(4503599627370496) /* == 2.2250738585072014E-308 */

val G_MAXDOUBLE: Double get() = bitsToDouble(9218868437227405311) /* == 1.7976931348623157E308 */

const val G_MINSHORT: Int = -32768

const val G_MAXSHORT: Int = 32767

const val G_MAXUSHORT: Int = 65535

const val G_MININT: Int = -2147483648

const val G_MAXINT: Int = 2147483647

const val G_MAXUINT: UInt = 4294967295u

const val G_MINLONG: Long = -9223372036854775807 - 1

const val G_MAXLONG: Long = 9223372036854775807

const val G_MAXULONG: ULong = 18446744073709551615u

val G_GINT16_MODIFIER: String get() = "h"

val G_GINT16_FORMAT: String get() = "hi"

val G_GUINT16_FORMAT: String get() = "hu"

val G_GINT32_MODIFIER: String get() = ""

val G_GINT32_FORMAT: String get() = "i"

val G_GUINT32_FORMAT: String get() = "u"

const val G_HAVE_GINT64: Int = 1

val G_GINT64_MODIFIER: String get() = "l"

val G_GINT64_FORMAT: String get() = "li"

val G_GUINT64_FORMAT: String get() = "lu"

const val GLIB_SIZEOF_VOID_P: Int = 8

const val GLIB_SIZEOF_LONG: Int = 8

const val GLIB_SIZEOF_SIZE_T: Int = 8

const val GLIB_SIZEOF_SSIZE_T: Int = 8

val G_GSIZE_MODIFIER: String get() = "l"

val G_GSSIZE_MODIFIER: String get() = "l"

val G_GSIZE_FORMAT: String get() = "lu"

val G_GSSIZE_FORMAT: String get() = "li"

const val G_MAXSIZE: ULong = 18446744073709551615u

const val G_MINSSIZE: Long = -9223372036854775807 - 1

const val G_MAXSSIZE: Long = 9223372036854775807

const val G_MINOFFSET: gint64 = -9223372036854775807 - 1

const val G_MAXOFFSET: Long = 9223372036854775807

val G_GOFFSET_MODIFIER: String get() = "l"

val G_GOFFSET_FORMAT: String get() = "li"

val G_POLLFD_FORMAT: String get() = "\u0025d"

val G_GINTPTR_MODIFIER: String get() = "l"

val G_GINTPTR_FORMAT: String get() = "li"

val G_GUINTPTR_FORMAT: String get() = "lu"

const val GLIB_MAJOR_VERSION: Int = 2

const val GLIB_MINOR_VERSION: Int = 62

const val GLIB_MICRO_VERSION: Int = 1

const val G_VA_COPY_AS_ARRAY: Int = 1

const val G_HAVE_ISO_VARARGS: Int = 1

const val G_HAVE_GROWING_STACK: Int = 0

const val G_HAVE_GNUC_VISIBILITY: Int = 1

const val G_HAVE_GNUC_VARARGS: Int = 1

const val G_BYTE_ORDER: Int = 1234

val G_MODULE_SUFFIX: String get() = "so"

val G_PID_FORMAT: String get() = "i"

const val GLIB_SYSDEF_AF_UNIX: Int = 1

const val GLIB_SYSDEF_AF_INET: Int = 2

const val GLIB_SYSDEF_AF_INET6: Int = 10

const val GLIB_SYSDEF_MSG_OOB: Int = 1

const val GLIB_SYSDEF_MSG_PEEK: Int = 2

const val GLIB_SYSDEF_MSG_DONTROUTE: Int = 4

const val G_DIR_SEPARATOR: Int = 47

val G_DIR_SEPARATOR_S: String get() = "\u002F"

const val G_SEARCHPATH_SEPARATOR: Int = 58

val G_SEARCHPATH_SEPARATOR_S: String get() = ":"

const val GLIB_VERSION_2_26: Int = 137728

const val GLIB_VERSION_2_28: Int = 138240

const val GLIB_VERSION_2_30: Int = 138752

const val GLIB_VERSION_2_32: Int = 139264

const val GLIB_VERSION_2_34: Int = 139776

const val GLIB_VERSION_2_36: Int = 140288

const val GLIB_VERSION_2_38: Int = 140800

const val GLIB_VERSION_2_40: Int = 141312

const val GLIB_VERSION_2_42: Int = 141824

const val GLIB_VERSION_2_44: Int = 142336

const val GLIB_VERSION_2_46: Int = 142848

const val GLIB_VERSION_2_48: Int = 143360

const val GLIB_VERSION_2_50: Int = 143872

const val GLIB_VERSION_2_52: Int = 144384

const val GLIB_VERSION_2_54: Int = 144896

const val GLIB_VERSION_2_56: Int = 145408

const val GLIB_VERSION_2_58: Int = 145920

const val GLIB_VERSION_2_60: Int = 146432

const val GLIB_VERSION_2_62: Int = 146944

const val GLIB_VERSION_CUR_STABLE: Int = 146944

const val GLIB_VERSION_PREV_STABLE: Int = 146432

const val GLIB_VERSION_MIN_REQUIRED: Int = 146944

const val GLIB_VERSION_MAX_ALLOWED: Int = 146944

const val G_MININT8: gint8 = -128

const val G_MAXINT8: gint8 = 127

const val G_MAXUINT8: guint8 = 255u

const val G_MININT16: gint16 = -32768

const val G_MAXINT16: gint16 = 32767

const val G_MAXUINT16: guint16 = 65535u

const val G_MININT32: gint32 = -2147483648

const val G_MAXINT32: gint32 = 2147483647

const val G_MAXUINT32: guint32 = 4294967295u

const val G_MININT64: gint64 = -9223372036854775807 - 1

const val G_MAXINT64: Long = 9223372036854775807

const val G_MAXUINT64: ULong = 18446744073709551615u

val G_E: Double get() = bitsToDouble(4613303445314885481) /* == 2.718281828459045 */

val G_LN2: Double get() = bitsToDouble(4604418534313441775) /* == 0.6931471805599453 */

val G_LN10: Double get() = bitsToDouble(4612367379483415830) /* == 2.302585092994046 */

val G_PI: Double get() = bitsToDouble(4614256656552045848) /* == 3.141592653589793 */

val G_PI_2: Double get() = bitsToDouble(4609753056924675352) /* == 1.5707963267948966 */

val G_PI_4: Double get() = bitsToDouble(4605249457297304856) /* == 0.7853981633974483 */

val G_SQRT2: Double get() = bitsToDouble(4609047870845172685) /* == 1.4142135623730951 */

const val G_LITTLE_ENDIAN: Int = 1234

const val G_BIG_ENDIAN: Int = 4321

const val G_PDP_ENDIAN: Int = 3412

const val G_IEEE754_FLOAT_BIAS: Int = 127

const val G_IEEE754_DOUBLE_BIAS: Int = 1023

val G_LOG_2_BASE_10: Double get() = bitsToDouble(4599094494223104511) /* == 0.3010299956639812 */

const val G_DATALIST_FLAGS_MASK: Int = 3

const val G_DATE_BAD_JULIAN: UInt = 0u

const val G_DATE_BAD_DAY: UInt = 0u

const val G_DATE_BAD_YEAR: UInt = 0u

const val G_TIME_SPAN_DAY: Long = 86400000000

const val G_TIME_SPAN_HOUR: Long = 3600000000

const val G_TIME_SPAN_MINUTE: Long = 60000000

const val G_TIME_SPAN_SECOND: Long = 1000000

const val G_TIME_SPAN_MILLISECOND: Long = 1000

const val G_MEM_ALIGN: Int = 8

const val G_HOOK_FLAG_USER_SHIFT: Int = 4

const val G_PRIORITY_HIGH: Int = -100

const val G_PRIORITY_DEFAULT: Int = 0

const val G_PRIORITY_HIGH_IDLE: Int = 100

const val G_PRIORITY_DEFAULT_IDLE: Int = 200

const val G_PRIORITY_LOW: Int = 300

const val G_SOURCE_REMOVE: Int = 0

const val G_SOURCE_CONTINUE: Int = 1

const val G_UNICODE_COMBINING_MARK: Int = 10

const val G_UNICHAR_MAX_DECOMPOSITION_LENGTH: Int = 18

val G_KEY_FILE_DESKTOP_GROUP: String get() = "Desktop Entry"

val G_KEY_FILE_DESKTOP_KEY_TYPE: String get() = "Type"

val G_KEY_FILE_DESKTOP_KEY_VERSION: String get() = "Version"

val G_KEY_FILE_DESKTOP_KEY_NAME: String get() = "Name"

val G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME: String get() = "GenericName"

val G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY: String get() = "NoDisplay"

val G_KEY_FILE_DESKTOP_KEY_COMMENT: String get() = "Comment"

val G_KEY_FILE_DESKTOP_KEY_ICON: String get() = "Icon"

val G_KEY_FILE_DESKTOP_KEY_HIDDEN: String get() = "Hidden"

val G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: String get() = "OnlyShowIn"

val G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: String get() = "NotShowIn"

val G_KEY_FILE_DESKTOP_KEY_TRY_EXEC: String get() = "TryExec"

val G_KEY_FILE_DESKTOP_KEY_EXEC: String get() = "Exec"

val G_KEY_FILE_DESKTOP_KEY_PATH: String get() = "Path"

val G_KEY_FILE_DESKTOP_KEY_TERMINAL: String get() = "Terminal"

val G_KEY_FILE_DESKTOP_KEY_MIME_TYPE: String get() = "MimeType"

val G_KEY_FILE_DESKTOP_KEY_CATEGORIES: String get() = "Categories"

val G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: String get() = "StartupNotify"

val G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: String get() = "StartupWMClass"

val G_KEY_FILE_DESKTOP_KEY_URL: String get() = "URL"

val G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: String get() = "DBusActivatable"

val G_KEY_FILE_DESKTOP_KEY_ACTIONS: String get() = "Actions"

val G_KEY_FILE_DESKTOP_TYPE_APPLICATION: String get() = "Application"

val G_KEY_FILE_DESKTOP_TYPE_LINK: String get() = "Link"

val G_KEY_FILE_DESKTOP_TYPE_DIRECTORY: String get() = "Directory"

const val G_LOG_LEVEL_USER_SHIFT: Int = 8

const val G_LOG_FATAL_MASK: Int = 5

val G_OPTION_REMAINING: String get() = ""

val G_CSET_A_2_Z: String get() = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val G_CSET_a_2_z: String get() = "abcdefghijklmnopqrstuvwxyz"

val G_CSET_DIGITS: String get() = "0123456789"

val G_CSET_LATINC: String get() = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"

val G_CSET_LATINS: String get() = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"

val G_STR_DELIMITERS: String get() = "_\u002D\u007C\u003E \u003C."

const val G_ASCII_DTOSTR_BUF_SIZE: Int = 39

val G_TEST_OPTION_ISOLATE_DIRS: String get() = "isolate_dirs"

const val G_USEC_PER_SEC: Int = 1000000

val G_URI_RESERVED_CHARS_GENERIC_DELIMITERS: String get() = ":\u002F\u003F#[]@"

val G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: String get() = "\u0021\$\u0026\u0027()*\u002B,;="

val G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT: String get() = "\u0021\$\u0026\u0027()*\u002B,;=:@"

val G_URI_RESERVED_CHARS_ALLOWED_IN_PATH: String get() = "\u0021\$\u0026\u0027()*\u002B,;=:@\u002F"

val G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO: String get() = "\u0021\$\u0026\u0027()*\u002B,;=:"

const val G_ALLOC_ONLY: Int = 1

const val G_ALLOC_AND_FREE: Int = 2

const val G_ALLOCATOR_LIST: Int = 1

const val G_ALLOCATOR_SLIST: Int = 2

const val G_ALLOCATOR_NODE: Int = 3

const val G_TYPE_FUNDAMENTAL_MAX: Int = 1020

const val G_TYPE_INVALID: GType = 0u

const val G_TYPE_NONE: GType = 4u

const val G_TYPE_INTERFACE: GType = 8u

const val G_TYPE_CHAR: GType = 12u

const val G_TYPE_UCHAR: GType = 16u

const val G_TYPE_BOOLEAN: GType = 20u

const val G_TYPE_INT: GType = 24u

const val G_TYPE_UINT: GType = 28u

const val G_TYPE_LONG: GType = 32u

const val G_TYPE_ULONG: GType = 36u

const val G_TYPE_INT64: GType = 40u

const val G_TYPE_UINT64: GType = 44u

const val G_TYPE_ENUM: GType = 48u

const val G_TYPE_FLAGS: GType = 52u

const val G_TYPE_FLOAT: GType = 56u

const val G_TYPE_DOUBLE: GType = 60u

const val G_TYPE_STRING: GType = 64u

const val G_TYPE_POINTER: GType = 68u

const val G_TYPE_BOXED: GType = 72u

const val G_TYPE_PARAM: GType = 76u

const val G_TYPE_OBJECT: GType = 80u

const val G_TYPE_VARIANT: GType = 84u

const val G_TYPE_FUNDAMENTAL_SHIFT: Int = 2

const val G_TYPE_RESERVED_GLIB_FIRST: Int = 22

const val G_TYPE_RESERVED_GLIB_LAST: Int = 31

const val G_TYPE_RESERVED_BSE_FIRST: Int = 32

const val G_TYPE_RESERVED_BSE_LAST: Int = 48

const val G_TYPE_RESERVED_USER_FIRST: Int = 49

const val G_TYPE_FLAG_RESERVED_ID_BIT: GType = 1u

const val G_VALUE_NOCOPY_CONTENTS: Int = 134217728

const val G_PARAM_STATIC_STRINGS: Int = 224

const val G_PARAM_MASK: Int = 255

const val G_PARAM_USER_SHIFT: Int = 8

const val G_SIGNAL_FLAGS_MASK: Int = 511

const val G_SIGNAL_MATCH_MASK: Int = 63

const val G_SIGNAL_TYPE_STATIC_SCOPE: GType = 1u

val G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE: String get() = "unix\u002Ddevice"

val G_FILE_ATTRIBUTE_STANDARD_TYPE: String get() = "standard::type"

val G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN: String get() = "standard::is\u002Dhidden"

val G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP: String get() = "standard::is\u002Dbackup"

val G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK: String get() = "standard::is\u002Dsymlink"

val G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL: String get() = "standard::is\u002Dvirtual"

val G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE: String get() = "standard::is\u002Dvolatile"

val G_FILE_ATTRIBUTE_STANDARD_NAME: String get() = "standard::name"

val G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME: String get() = "standard::display\u002Dname"

val G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME: String get() = "standard::edit\u002Dname"

val G_FILE_ATTRIBUTE_STANDARD_COPY_NAME: String get() = "standard::copy\u002Dname"

val G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION: String get() = "standard::description"

val G_FILE_ATTRIBUTE_STANDARD_ICON: String get() = "standard::icon"

val G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON: String get() = "standard::symbolic\u002Dicon"

val G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE: String get() = "standard::content\u002Dtype"

val G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE: String get() = "standard::fast\u002Dcontent\u002Dtype"

val G_FILE_ATTRIBUTE_STANDARD_SIZE: String get() = "standard::size"

val G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE: String get() = "standard::allocated\u002Dsize"

val G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET: String get() = "standard::symlink\u002Dtarget"

val G_FILE_ATTRIBUTE_STANDARD_TARGET_URI: String get() = "standard::target\u002Duri"

val G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER: String get() = "standard::sort\u002Dorder"

val G_FILE_ATTRIBUTE_ETAG_VALUE: String get() = "etag::value"

val G_FILE_ATTRIBUTE_ID_FILE: String get() = "id::file"

val G_FILE_ATTRIBUTE_ID_FILESYSTEM: String get() = "id::filesystem"

val G_FILE_ATTRIBUTE_ACCESS_CAN_READ: String get() = "access::can\u002Dread"

val G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE: String get() = "access::can\u002Dwrite"

val G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE: String get() = "access::can\u002Dexecute"

val G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE: String get() = "access::can\u002Ddelete"

val G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH: String get() = "access::can\u002Dtrash"

val G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME: String get() = "access::can\u002Drename"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT: String get() = "mountable::can\u002Dmount"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT: String get() = "mountable::can\u002Dunmount"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT: String get() = "mountable::can\u002Deject"

val G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE: String get() = "mountable::unix\u002Ddevice"

val G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE: String get() = "mountable::unix\u002Ddevice\u002Dfile"

val G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI: String get() = "mountable::hal\u002Dudi"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START: String get() = "mountable::can\u002Dstart"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED: String get() = "mountable::can\u002Dstart\u002Ddegraded"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP: String get() = "mountable::can\u002Dstop"

val G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE: String get() = "mountable::start\u002Dstop\u002Dtype"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL: String get() = "mountable::can\u002Dpoll"

val G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC: String get() = "mountable::is\u002Dmedia\u002Dcheck\u002Dautomatic"

val G_FILE_ATTRIBUTE_TIME_MODIFIED: String get() = "time::modified"

val G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC: String get() = "time::modified\u002Dusec"

val G_FILE_ATTRIBUTE_TIME_ACCESS: String get() = "time::access"

val G_FILE_ATTRIBUTE_TIME_ACCESS_USEC: String get() = "time::access\u002Dusec"

val G_FILE_ATTRIBUTE_TIME_CHANGED: String get() = "time::changed"

val G_FILE_ATTRIBUTE_TIME_CHANGED_USEC: String get() = "time::changed\u002Dusec"

val G_FILE_ATTRIBUTE_TIME_CREATED: String get() = "time::created"

val G_FILE_ATTRIBUTE_TIME_CREATED_USEC: String get() = "time::created\u002Dusec"

val G_FILE_ATTRIBUTE_UNIX_DEVICE: String get() = "unix::device"

val G_FILE_ATTRIBUTE_UNIX_INODE: String get() = "unix::inode"

val G_FILE_ATTRIBUTE_UNIX_MODE: String get() = "unix::mode"

val G_FILE_ATTRIBUTE_UNIX_NLINK: String get() = "unix::nlink"

val G_FILE_ATTRIBUTE_UNIX_UID: String get() = "unix::uid"

val G_FILE_ATTRIBUTE_UNIX_GID: String get() = "unix::gid"

val G_FILE_ATTRIBUTE_UNIX_RDEV: String get() = "unix::rdev"

val G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE: String get() = "unix::block\u002Dsize"

val G_FILE_ATTRIBUTE_UNIX_BLOCKS: String get() = "unix::blocks"

val G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT: String get() = "unix::is\u002Dmountpoint"

val G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE: String get() = "dos::is\u002Darchive"

val G_FILE_ATTRIBUTE_DOS_IS_SYSTEM: String get() = "dos::is\u002Dsystem"

val G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT: String get() = "dos::is\u002Dmountpoint"

val G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG: String get() = "dos::reparse\u002Dpoint\u002Dtag"

val G_FILE_ATTRIBUTE_OWNER_USER: String get() = "owner::user"

val G_FILE_ATTRIBUTE_OWNER_USER_REAL: String get() = "owner::user\u002Dreal"

val G_FILE_ATTRIBUTE_OWNER_GROUP: String get() = "owner::group"

val G_FILE_ATTRIBUTE_THUMBNAIL_PATH: String get() = "thumbnail::path"

val G_FILE_ATTRIBUTE_THUMBNAILING_FAILED: String get() = "thumbnail::failed"

val G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID: String get() = "thumbnail::is\u002Dvalid"

val G_FILE_ATTRIBUTE_PREVIEW_ICON: String get() = "preview::icon"

val G_FILE_ATTRIBUTE_FILESYSTEM_SIZE: String get() = "filesystem::size"

val G_FILE_ATTRIBUTE_FILESYSTEM_FREE: String get() = "filesystem::free"

val G_FILE_ATTRIBUTE_FILESYSTEM_USED: String get() = "filesystem::used"

val G_FILE_ATTRIBUTE_FILESYSTEM_TYPE: String get() = "filesystem::type"

val G_FILE_ATTRIBUTE_FILESYSTEM_READONLY: String get() = "filesystem::readonly"

val G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW: String get() = "filesystem::use\u002Dpreview"

val G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE: String get() = "filesystem::remote"

val G_FILE_ATTRIBUTE_GVFS_BACKEND: String get() = "gvfs::backend"

val G_FILE_ATTRIBUTE_SELINUX_CONTEXT: String get() = "selinux::context"

val G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT: String get() = "trash::item\u002Dcount"

val G_FILE_ATTRIBUTE_TRASH_ORIG_PATH: String get() = "trash::orig\u002Dpath"

val G_FILE_ATTRIBUTE_TRASH_DELETION_DATE: String get() = "trash::deletion\u002Ddate"

val G_FILE_ATTRIBUTE_RECENT_MODIFIED: String get() = "recent::modified"

val G_VOLUME_MONITOR_EXTENSION_POINT_NAME: String get() = "gio\u002Dvolume\u002Dmonitor"

val G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME: String get() = "gio\u002Dnative\u002Dvolume\u002Dmonitor"

val G_NETWORK_MONITOR_EXTENSION_POINT_NAME: String get() = "gio\u002Dnetwork\u002Dmonitor"

val G_PROXY_EXTENSION_POINT_NAME: String get() = "gio\u002Dproxy"

val G_PROXY_RESOLVER_EXTENSION_POINT_NAME: String get() = "gio\u002Dproxy\u002Dresolver"

val G_TLS_BACKEND_EXTENSION_POINT_NAME: String get() = "gio\u002Dtls\u002Dbackend"

val G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER: String get() = "1.3.6.1.5.5.7.3.1"

val G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT: String get() = "1.3.6.1.5.5.7.3.2"

val G_VFS_EXTENSION_POINT_NAME: String get() = "gio\u002Dvfs"

val G_VOLUME_IDENTIFIER_KIND_HAL_UDI: String get() = "hal\u002Dudi"

val G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE: String get() = "unix\u002Ddevice"

val G_VOLUME_IDENTIFIER_KIND_LABEL: String get() = "label"

val G_VOLUME_IDENTIFIER_KIND_UUID: String get() = "uuid"

val G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT: String get() = "nfs\u002Dmount"

val G_VOLUME_IDENTIFIER_KIND_CLASS: String get() = "class"

val G_MENU_ATTRIBUTE_ACTION: String get() = "action"

val G_MENU_ATTRIBUTE_ACTION_NAMESPACE: String get() = "action\u002Dnamespace"

val G_MENU_ATTRIBUTE_TARGET: String get() = "target"

val G_MENU_ATTRIBUTE_LABEL: String get() = "label"

val G_MENU_ATTRIBUTE_ICON: String get() = "icon"

val G_MENU_LINK_SUBMENU: String get() = "submenu"

val G_MENU_LINK_SECTION: String get() = "section"

val G_STRFUNC: CPointer<ByteVar>?
    get() = interpretCPointer<ByteVar>(kniBridge4892())

val G_THREAD_ERROR: GQuark
    get() = kniBridge4893()

val G_BOOKMARK_FILE_ERROR: GQuark
    get() = kniBridge4894()

val G_CONVERT_ERROR: GQuark
    get() = kniBridge4895()

val g_date_weekday: CPointer<CFunction<(CPointer<GDate>?) -> GDateWeekday>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> GDateWeekday>>(kniBridge4896())

val g_date_month: CPointer<CFunction<(CPointer<GDate>?) -> GDateMonth>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> GDateMonth>>(kniBridge4897())

val g_date_year: CPointer<CFunction<(CPointer<GDate>?) -> GDateYear>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> GDateYear>>(kniBridge4898())

val g_date_day: CPointer<CFunction<(CPointer<GDate>?) -> GDateDay>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> GDateDay>>(kniBridge4899())

val g_date_julian: CPointer<CFunction<(CPointer<GDate>?) -> guint32>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> guint32>>(kniBridge4900())

val g_date_day_of_year: CPointer<CFunction<(CPointer<GDate>?) -> guint>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> guint>>(kniBridge4901())

val g_date_monday_week_of_year: CPointer<CFunction<(CPointer<GDate>?) -> guint>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> guint>>(kniBridge4902())

val g_date_sunday_week_of_year: CPointer<CFunction<(CPointer<GDate>?) -> guint>>?
    get() = interpretCPointer<CFunction<(CPointer<GDate>?) -> guint>>(kniBridge4903())

val g_date_days_in_month: CPointer<CFunction<(GDateMonth, GDateYear) -> guint8>>?
    get() = interpretCPointer<CFunction<(GDateMonth, GDateYear) -> guint8>>(kniBridge4904())

val g_date_monday_weeks_in_year: CPointer<CFunction<(GDateYear) -> guint8>>?
    get() = interpretCPointer<CFunction<(GDateYear) -> guint8>>(kniBridge4905())

val g_date_sunday_weeks_in_year: CPointer<CFunction<(GDateYear) -> guint8>>?
    get() = interpretCPointer<CFunction<(GDateYear) -> guint8>>(kniBridge4906())

val G_FILE_ERROR: GQuark
    get() = kniBridge4907()

val g_dirname: CPointer<CFunction<(CPointer<gcharVar>?) -> CPointer<gcharVar>?>>?
    get() = interpretCPointer<CFunction<(CPointer<gcharVar>?) -> CPointer<gcharVar>?>>(kniBridge4908())

val g_list_free1: CPointer<CFunction<(CPointer<GList>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<GList>?) -> Unit>>(kniBridge4909())

val g_slist_free1: CPointer<CFunction<(CPointer<GSList>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<GSList>?) -> Unit>>(kniBridge4910())

val g_string_sprintf: COpaquePointer?
    get() = interpretCPointer<COpaque>(kniBridge4911())

val g_string_sprintfa: COpaquePointer?
    get() = interpretCPointer<COpaque>(kniBridge4912())

val G_IO_CHANNEL_ERROR: GQuark
    get() = kniBridge4913()

val G_KEY_FILE_ERROR: GQuark
    get() = kniBridge4914()

val G_MARKUP_ERROR: GQuark
    get() = kniBridge4915()

val G_VARIANT_TYPE_BOOLEAN: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4916())

val G_VARIANT_TYPE_BYTE: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4917())

val G_VARIANT_TYPE_INT16: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4918())

val G_VARIANT_TYPE_UINT16: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4919())

val G_VARIANT_TYPE_INT32: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4920())

val G_VARIANT_TYPE_UINT32: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4921())

val G_VARIANT_TYPE_INT64: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4922())

val G_VARIANT_TYPE_UINT64: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4923())

val G_VARIANT_TYPE_DOUBLE: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4924())

val G_VARIANT_TYPE_STRING: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4925())

val G_VARIANT_TYPE_OBJECT_PATH: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4926())

val G_VARIANT_TYPE_SIGNATURE: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4927())

val G_VARIANT_TYPE_VARIANT: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4928())

val G_VARIANT_TYPE_HANDLE: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4929())

val G_VARIANT_TYPE_UNIT: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4930())

val G_VARIANT_TYPE_ANY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4931())

val G_VARIANT_TYPE_BASIC: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4932())

val G_VARIANT_TYPE_MAYBE: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4933())

val G_VARIANT_TYPE_ARRAY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4934())

val G_VARIANT_TYPE_TUPLE: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4935())

val G_VARIANT_TYPE_DICT_ENTRY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4936())

val G_VARIANT_TYPE_DICTIONARY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4937())

val G_VARIANT_TYPE_STRING_ARRAY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4938())

val G_VARIANT_TYPE_OBJECT_PATH_ARRAY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4939())

val G_VARIANT_TYPE_BYTESTRING: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4940())

val G_VARIANT_TYPE_BYTESTRING_ARRAY: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4941())

val G_VARIANT_TYPE_VARDICT: CPointer<GVariantType>?
    get() = interpretCPointer<GVariantType>(kniBridge4942())

val G_VARIANT_PARSE_ERROR: GQuark
    get() = kniBridge4943()

val G_LOG_DOMAIN: CPointer<gcharVar>?
    get() = interpretCPointer<gcharVar>(kniBridge4944())

val G_OPTION_ERROR: GQuark
    get() = kniBridge4945()

val G_REGEX_ERROR: GQuark
    get() = kniBridge4946()

val G_SHELL_ERROR: GQuark
    get() = kniBridge4947()

val G_SPAWN_ERROR: GQuark
    get() = kniBridge4948()

val G_SPAWN_EXIT_ERROR: GQuark
    get() = kniBridge4949()

val G_NUMBER_PARSER_ERROR: GQuark
    get() = kniBridge4950()

val g_static_mutex_get_mutex: CPointer<CFunction<(CPointer<GStaticMutex>?) -> CPointer<GMutex>?>>?
    get() = interpretCPointer<CFunction<(CPointer<GStaticMutex>?) -> CPointer<GMutex>?>>(kniBridge4951())

val g_cclosure_marshal_BOOL__FLAGS: CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>(kniBridge4952())

val g_cclosure_marshal_BOOL__BOXED_BOXED: CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>(kniBridge4953())

val G_TYPE_DATE: GType
    get() = kniBridge4954()

val G_TYPE_STRV: GType
    get() = kniBridge4955()

val G_TYPE_GSTRING: GType
    get() = kniBridge4956()

val G_TYPE_HASH_TABLE: GType
    get() = kniBridge4957()

val G_TYPE_REGEX: GType
    get() = kniBridge4958()

val G_TYPE_MATCH_INFO: GType
    get() = kniBridge4959()

val G_TYPE_ARRAY: GType
    get() = kniBridge4960()

val G_TYPE_BYTE_ARRAY: GType
    get() = kniBridge4961()

val G_TYPE_PTR_ARRAY: GType
    get() = kniBridge4962()

val G_TYPE_BYTES: GType
    get() = kniBridge4963()

val G_TYPE_VARIANT_TYPE: GType
    get() = kniBridge4964()

val G_TYPE_ERROR: GType
    get() = kniBridge4965()

val G_TYPE_DATE_TIME: GType
    get() = kniBridge4966()

val G_TYPE_TIME_ZONE: GType
    get() = kniBridge4967()

val G_TYPE_IO_CHANNEL: GType
    get() = kniBridge4968()

val G_TYPE_IO_CONDITION: GType
    get() = kniBridge4969()

val G_TYPE_VARIANT_BUILDER: GType
    get() = kniBridge4970()

val G_TYPE_VARIANT_DICT: GType
    get() = kniBridge4971()

val G_TYPE_MAIN_LOOP: GType
    get() = kniBridge4972()

val G_TYPE_MAIN_CONTEXT: GType
    get() = kniBridge4973()

val G_TYPE_SOURCE: GType
    get() = kniBridge4974()

val G_TYPE_POLLFD: GType
    get() = kniBridge4975()

val G_TYPE_MARKUP_PARSE_CONTEXT: GType
    get() = kniBridge4976()

val G_TYPE_KEY_FILE: GType
    get() = kniBridge4977()

val G_TYPE_MAPPED_FILE: GType
    get() = kniBridge4978()

val G_TYPE_THREAD: GType
    get() = kniBridge4979()

val G_TYPE_CHECKSUM: GType
    get() = kniBridge4980()

val G_TYPE_OPTION_GROUP: GType
    get() = kniBridge4981()

val G_TYPE_CLOSURE: GType
    get() = kniBridge4982()

val G_TYPE_VALUE: GType
    get() = kniBridge4983()

val G_TYPE_INITIALLY_UNOWNED: GType
    get() = kniBridge4984()

val G_TYPE_BINDING_FLAGS: GType
    get() = kniBridge4985()

val G_TYPE_BINDING: GType
    get() = kniBridge4986()

val G_TYPE_PARAM_CHAR: GType
    get() = kniBridge4987()

val G_TYPE_PARAM_UCHAR: GType
    get() = kniBridge4988()

val G_TYPE_PARAM_BOOLEAN: GType
    get() = kniBridge4989()

val G_TYPE_PARAM_INT: GType
    get() = kniBridge4990()

val G_TYPE_PARAM_UINT: GType
    get() = kniBridge4991()

val G_TYPE_PARAM_LONG: GType
    get() = kniBridge4992()

val G_TYPE_PARAM_ULONG: GType
    get() = kniBridge4993()

val G_TYPE_PARAM_INT64: GType
    get() = kniBridge4994()

val G_TYPE_PARAM_UINT64: GType
    get() = kniBridge4995()

val G_TYPE_PARAM_UNICHAR: GType
    get() = kniBridge4996()

val G_TYPE_PARAM_ENUM: GType
    get() = kniBridge4997()

val G_TYPE_PARAM_FLAGS: GType
    get() = kniBridge4998()

val G_TYPE_PARAM_FLOAT: GType
    get() = kniBridge4999()

val G_TYPE_PARAM_DOUBLE: GType
    get() = kniBridge5000()

val G_TYPE_PARAM_STRING: GType
    get() = kniBridge5001()

val G_TYPE_PARAM_PARAM: GType
    get() = kniBridge5002()

val G_TYPE_PARAM_BOXED: GType
    get() = kniBridge5003()

val G_TYPE_PARAM_POINTER: GType
    get() = kniBridge5004()

val G_TYPE_PARAM_VALUE_ARRAY: GType
    get() = kniBridge5005()

val G_TYPE_PARAM_OBJECT: GType
    get() = kniBridge5006()

val G_TYPE_PARAM_OVERRIDE: GType
    get() = kniBridge5007()

val G_TYPE_PARAM_GTYPE: GType
    get() = kniBridge5008()

val G_TYPE_PARAM_VARIANT: GType
    get() = kniBridge5009()

val G_TYPE_TYPE_MODULE: GType
    get() = kniBridge5010()

val G_TYPE_TYPE_PLUGIN: GType
    get() = kniBridge5011()

val G_TYPE_VALUE_ARRAY: GType
    get() = kniBridge5012()

val G_TYPE_GTYPE: GType
    get() = kniBridge5013()

val G_TYPE_UNICODE_TYPE: GType
    get() = kniBridge5014()

val G_TYPE_UNICODE_BREAK_TYPE: GType
    get() = kniBridge5015()

val G_TYPE_UNICODE_SCRIPT: GType
    get() = kniBridge5016()

val G_TYPE_NORMALIZE_MODE: GType
    get() = kniBridge5017()

val G_TYPE_ACTION: GType
    get() = kniBridge5018()

val G_TYPE_ACTION_GROUP: GType
    get() = kniBridge5019()

val G_TYPE_ACTION_MAP: GType
    get() = kniBridge5020()

val G_TYPE_APP_INFO: GType
    get() = kniBridge5021()

val G_TYPE_APP_LAUNCH_CONTEXT: GType
    get() = kniBridge5022()

val G_TYPE_APP_INFO_MONITOR: GType
    get() = kniBridge5023()

val G_TYPE_APPLICATION: GType
    get() = kniBridge5024()

val G_TYPE_APPLICATION_COMMAND_LINE: GType
    get() = kniBridge5025()

val G_TYPE_INITABLE: GType
    get() = kniBridge5026()

val G_TYPE_ASYNC_INITABLE: GType
    get() = kniBridge5027()

val G_TYPE_ASYNC_RESULT: GType
    get() = kniBridge5028()

val G_TYPE_INPUT_STREAM: GType
    get() = kniBridge5029()

val G_TYPE_FILTER_INPUT_STREAM: GType
    get() = kniBridge5030()

val G_TYPE_BUFFERED_INPUT_STREAM: GType
    get() = kniBridge5031()

val G_TYPE_OUTPUT_STREAM: GType
    get() = kniBridge5032()

val G_TYPE_FILTER_OUTPUT_STREAM: GType
    get() = kniBridge5033()

val G_TYPE_BUFFERED_OUTPUT_STREAM: GType
    get() = kniBridge5034()

val G_TYPE_BYTES_ICON: GType
    get() = kniBridge5035()

val G_TYPE_CANCELLABLE: GType
    get() = kniBridge5036()

val G_TYPE_CONVERTER: GType
    get() = kniBridge5037()

val G_TYPE_CHARSET_CONVERTER: GType
    get() = kniBridge5038()

val G_TYPE_CONVERTER_INPUT_STREAM: GType
    get() = kniBridge5039()

val G_TYPE_CONVERTER_OUTPUT_STREAM: GType
    get() = kniBridge5040()

val G_TYPE_CREDENTIALS: GType
    get() = kniBridge5041()

val G_TYPE_DATAGRAM_BASED: GType
    get() = kniBridge5042()

val G_TYPE_DATA_INPUT_STREAM: GType
    get() = kniBridge5043()

val G_TYPE_DATA_OUTPUT_STREAM: GType
    get() = kniBridge5044()

val G_TYPE_DBUS_AUTH_OBSERVER: GType
    get() = kniBridge5045()

val G_TYPE_DBUS_CONNECTION: GType
    get() = kniBridge5046()

val G_DBUS_ERROR: GQuark
    get() = kniBridge5047()

val G_TYPE_DBUS_NODE_INFO: GType
    get() = kniBridge5048()

val G_TYPE_DBUS_INTERFACE_INFO: GType
    get() = kniBridge5049()

val G_TYPE_DBUS_METHOD_INFO: GType
    get() = kniBridge5050()

val G_TYPE_DBUS_SIGNAL_INFO: GType
    get() = kniBridge5051()

val G_TYPE_DBUS_PROPERTY_INFO: GType
    get() = kniBridge5052()

val G_TYPE_DBUS_ARG_INFO: GType
    get() = kniBridge5053()

val G_TYPE_DBUS_ANNOTATION_INFO: GType
    get() = kniBridge5054()

val G_TYPE_DBUS_MESSAGE: GType
    get() = kniBridge5055()

val G_TYPE_DBUS_METHOD_INVOCATION: GType
    get() = kniBridge5056()

val G_TYPE_DBUS_PROXY: GType
    get() = kniBridge5057()

val G_TYPE_DBUS_SERVER: GType
    get() = kniBridge5058()

val G_TYPE_DRIVE: GType
    get() = kniBridge5059()

val G_TYPE_DTLS_CONNECTION: GType
    get() = kniBridge5060()

val G_TYPE_DTLS_CLIENT_CONNECTION: GType
    get() = kniBridge5061()

val G_TYPE_DTLS_SERVER_CONNECTION: GType
    get() = kniBridge5062()

val G_TYPE_ICON: GType
    get() = kniBridge5063()

val G_TYPE_EMBLEM: GType
    get() = kniBridge5064()

val G_TYPE_EMBLEMED_ICON: GType
    get() = kniBridge5065()

val G_TYPE_FILE_ATTRIBUTE_INFO_LIST: GType
    get() = kniBridge5066()

val G_TYPE_FILE_ENUMERATOR: GType
    get() = kniBridge5067()

val G_TYPE_FILE: GType
    get() = kniBridge5068()

val G_TYPE_FILE_ICON: GType
    get() = kniBridge5069()

val G_TYPE_FILE_INFO: GType
    get() = kniBridge5070()

val G_TYPE_FILE_ATTRIBUTE_MATCHER: GType
    get() = kniBridge5071()

val G_TYPE_FILE_INPUT_STREAM: GType
    get() = kniBridge5072()

val G_IO_ERROR: GQuark
    get() = kniBridge5073()

val G_TYPE_IO_STREAM: GType
    get() = kniBridge5074()

val G_TYPE_FILE_IO_STREAM: GType
    get() = kniBridge5075()

val G_TYPE_FILE_MONITOR: GType
    get() = kniBridge5076()

val G_TYPE_FILENAME_COMPLETER: GType
    get() = kniBridge5077()

val G_TYPE_FILE_OUTPUT_STREAM: GType
    get() = kniBridge5078()

val G_TYPE_INET_ADDRESS: GType
    get() = kniBridge5079()

val G_TYPE_INET_ADDRESS_MASK: GType
    get() = kniBridge5080()

val G_TYPE_SOCKET_ADDRESS: GType
    get() = kniBridge5081()

val G_TYPE_INET_SOCKET_ADDRESS: GType
    get() = kniBridge5082()

val G_TYPE_APP_INFO_CREATE_FLAGS: GType
    get() = kniBridge5083()

val G_TYPE_CONVERTER_FLAGS: GType
    get() = kniBridge5084()

val G_TYPE_CONVERTER_RESULT: GType
    get() = kniBridge5085()

val G_TYPE_DATA_STREAM_BYTE_ORDER: GType
    get() = kniBridge5086()

val G_TYPE_DATA_STREAM_NEWLINE_TYPE: GType
    get() = kniBridge5087()

val G_TYPE_FILE_ATTRIBUTE_TYPE: GType
    get() = kniBridge5088()

val G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS: GType
    get() = kniBridge5089()

val G_TYPE_FILE_ATTRIBUTE_STATUS: GType
    get() = kniBridge5090()

val G_TYPE_FILE_QUERY_INFO_FLAGS: GType
    get() = kniBridge5091()

val G_TYPE_FILE_CREATE_FLAGS: GType
    get() = kniBridge5092()

val G_TYPE_FILE_MEASURE_FLAGS: GType
    get() = kniBridge5093()

val G_TYPE_MOUNT_MOUNT_FLAGS: GType
    get() = kniBridge5094()

val G_TYPE_MOUNT_UNMOUNT_FLAGS: GType
    get() = kniBridge5095()

val G_TYPE_DRIVE_START_FLAGS: GType
    get() = kniBridge5096()

val G_TYPE_DRIVE_START_STOP_TYPE: GType
    get() = kniBridge5097()

val G_TYPE_FILE_COPY_FLAGS: GType
    get() = kniBridge5098()

val G_TYPE_FILE_MONITOR_FLAGS: GType
    get() = kniBridge5099()

val G_TYPE_FILE_TYPE: GType
    get() = kniBridge5100()

val G_TYPE_FILESYSTEM_PREVIEW_TYPE: GType
    get() = kniBridge5101()

val G_TYPE_FILE_MONITOR_EVENT: GType
    get() = kniBridge5102()

val G_TYPE_IO_ERROR_ENUM: GType
    get() = kniBridge5103()

val G_TYPE_ASK_PASSWORD_FLAGS: GType
    get() = kniBridge5104()

val G_TYPE_PASSWORD_SAVE: GType
    get() = kniBridge5105()

val G_TYPE_MOUNT_OPERATION_RESULT: GType
    get() = kniBridge5106()

val G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS: GType
    get() = kniBridge5107()

val G_TYPE_IO_STREAM_SPLICE_FLAGS: GType
    get() = kniBridge5108()

val G_TYPE_EMBLEM_ORIGIN: GType
    get() = kniBridge5109()

val G_TYPE_RESOLVER_ERROR: GType
    get() = kniBridge5110()

val G_TYPE_RESOLVER_RECORD_TYPE: GType
    get() = kniBridge5111()

val G_TYPE_RESOURCE_ERROR: GType
    get() = kniBridge5112()

val G_TYPE_RESOURCE_FLAGS: GType
    get() = kniBridge5113()

val G_TYPE_RESOURCE_LOOKUP_FLAGS: GType
    get() = kniBridge5114()

val G_TYPE_SOCKET_FAMILY: GType
    get() = kniBridge5115()

val G_TYPE_SOCKET_TYPE: GType
    get() = kniBridge5116()

val G_TYPE_SOCKET_MSG_FLAGS: GType
    get() = kniBridge5117()

val G_TYPE_SOCKET_PROTOCOL: GType
    get() = kniBridge5118()

val G_TYPE_ZLIB_COMPRESSOR_FORMAT: GType
    get() = kniBridge5119()

val G_TYPE_UNIX_SOCKET_ADDRESS_TYPE: GType
    get() = kniBridge5120()

val G_TYPE_BUS_TYPE: GType
    get() = kniBridge5121()

val G_TYPE_BUS_NAME_OWNER_FLAGS: GType
    get() = kniBridge5122()

val G_TYPE_BUS_NAME_WATCHER_FLAGS: GType
    get() = kniBridge5123()

val G_TYPE_DBUS_PROXY_FLAGS: GType
    get() = kniBridge5124()

val G_TYPE_DBUS_ERROR: GType
    get() = kniBridge5125()

val G_TYPE_DBUS_CONNECTION_FLAGS: GType
    get() = kniBridge5126()

val G_TYPE_DBUS_CAPABILITY_FLAGS: GType
    get() = kniBridge5127()

val G_TYPE_DBUS_CALL_FLAGS: GType
    get() = kniBridge5128()

val G_TYPE_DBUS_MESSAGE_TYPE: GType
    get() = kniBridge5129()

val G_TYPE_DBUS_MESSAGE_FLAGS: GType
    get() = kniBridge5130()

val G_TYPE_DBUS_MESSAGE_HEADER_FIELD: GType
    get() = kniBridge5131()

val G_TYPE_DBUS_PROPERTY_INFO_FLAGS: GType
    get() = kniBridge5132()

val G_TYPE_DBUS_SUBTREE_FLAGS: GType
    get() = kniBridge5133()

val G_TYPE_DBUS_SERVER_FLAGS: GType
    get() = kniBridge5134()

val G_TYPE_DBUS_SIGNAL_FLAGS: GType
    get() = kniBridge5135()

val G_TYPE_DBUS_SEND_MESSAGE_FLAGS: GType
    get() = kniBridge5136()

val G_TYPE_CREDENTIALS_TYPE: GType
    get() = kniBridge5137()

val G_TYPE_DBUS_MESSAGE_BYTE_ORDER: GType
    get() = kniBridge5138()

val G_TYPE_APPLICATION_FLAGS: GType
    get() = kniBridge5139()

val G_TYPE_TLS_ERROR: GType
    get() = kniBridge5140()

val G_TYPE_TLS_CERTIFICATE_FLAGS: GType
    get() = kniBridge5141()

val G_TYPE_TLS_AUTHENTICATION_MODE: GType
    get() = kniBridge5142()

val G_TYPE_TLS_REHANDSHAKE_MODE: GType
    get() = kniBridge5143()

val G_TYPE_TLS_PASSWORD_FLAGS: GType
    get() = kniBridge5144()

val G_TYPE_TLS_INTERACTION_RESULT: GType
    get() = kniBridge5145()

val G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS: GType
    get() = kniBridge5146()

val G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS: GType
    get() = kniBridge5147()

val G_TYPE_TLS_DATABASE_VERIFY_FLAGS: GType
    get() = kniBridge5148()

val G_TYPE_TLS_DATABASE_LOOKUP_FLAGS: GType
    get() = kniBridge5149()

val G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS: GType
    get() = kniBridge5150()

val G_TYPE_IO_MODULE_SCOPE_FLAGS: GType
    get() = kniBridge5151()

val G_TYPE_SOCKET_CLIENT_EVENT: GType
    get() = kniBridge5152()

val G_TYPE_SOCKET_LISTENER_EVENT: GType
    get() = kniBridge5153()

val G_TYPE_TEST_DBUS_FLAGS: GType
    get() = kniBridge5154()

val G_TYPE_SUBPROCESS_FLAGS: GType
    get() = kniBridge5155()

val G_TYPE_NOTIFICATION_PRIORITY: GType
    get() = kniBridge5156()

val G_TYPE_NETWORK_CONNECTIVITY: GType
    get() = kniBridge5157()

val G_TYPE_POLLABLE_RETURN: GType
    get() = kniBridge5158()

val G_TYPE_RESOLVER_NAME_LOOKUP_FLAGS: GType
    get() = kniBridge5159()

val G_TYPE_SETTINGS_BIND_FLAGS: GType
    get() = kniBridge5160()

val G_IO_TYPE_MODULE: GType
    get() = kniBridge5161()

val G_TYPE_LOADABLE_ICON: GType
    get() = kniBridge5162()

val G_TYPE_MEMORY_INPUT_STREAM: GType
    get() = kniBridge5163()

val G_TYPE_MEMORY_OUTPUT_STREAM: GType
    get() = kniBridge5164()

val G_TYPE_MOUNT: GType
    get() = kniBridge5165()

val G_TYPE_MOUNT_OPERATION: GType
    get() = kniBridge5166()

val G_TYPE_NATIVE_SOCKET_ADDRESS: GType
    get() = kniBridge5167()

val G_TYPE_VOLUME_MONITOR: GType
    get() = kniBridge5168()

val G_TYPE_NATIVE_VOLUME_MONITOR: GType
    get() = kniBridge5169()

val G_TYPE_NETWORK_ADDRESS: GType
    get() = kniBridge5170()

val G_TYPE_NETWORK_MONITOR: GType
    get() = kniBridge5171()

val G_TYPE_NETWORK_SERVICE: GType
    get() = kniBridge5172()

val G_TYPE_PERMISSION: GType
    get() = kniBridge5173()

val G_TYPE_POLLABLE_INPUT_STREAM: GType
    get() = kniBridge5174()

val G_TYPE_POLLABLE_OUTPUT_STREAM: GType
    get() = kniBridge5175()

val G_TYPE_PROPERTY_ACTION: GType
    get() = kniBridge5176()

val G_TYPE_PROXY: GType
    get() = kniBridge5177()

val G_TYPE_PROXY_ADDRESS: GType
    get() = kniBridge5178()

val G_TYPE_SOCKET_ADDRESS_ENUMERATOR: GType
    get() = kniBridge5179()

val G_TYPE_PROXY_ADDRESS_ENUMERATOR: GType
    get() = kniBridge5180()

val G_TYPE_PROXY_RESOLVER: GType
    get() = kniBridge5181()

val G_TYPE_RESOLVER: GType
    get() = kniBridge5182()

val G_RESOLVER_ERROR: GQuark
    get() = kniBridge5183()

val G_TYPE_RESOURCE: GType
    get() = kniBridge5184()

val G_RESOURCE_ERROR: GQuark
    get() = kniBridge5185()

val G_TYPE_SEEKABLE: GType
    get() = kniBridge5186()

val G_TYPE_SETTINGS_SCHEMA_SOURCE: GType
    get() = kniBridge5187()

val G_TYPE_SETTINGS_SCHEMA: GType
    get() = kniBridge5188()

val G_TYPE_SETTINGS_SCHEMA_KEY: GType
    get() = kniBridge5189()

val G_TYPE_SETTINGS: GType
    get() = kniBridge5190()

val G_TYPE_SIMPLE_ACTION: GType
    get() = kniBridge5191()

val G_TYPE_SIMPLE_ACTION_GROUP: GType
    get() = kniBridge5192()

val G_TYPE_SIMPLE_ASYNC_RESULT: GType
    get() = kniBridge5193()

val G_TYPE_SIMPLE_IO_STREAM: GType
    get() = kniBridge5194()

val G_TYPE_SIMPLE_PERMISSION: GType
    get() = kniBridge5195()

val G_TYPE_SOCKET_CLIENT: GType
    get() = kniBridge5196()

val G_TYPE_SOCKET_CONNECTABLE: GType
    get() = kniBridge5197()

val G_TYPE_SOCKET: GType
    get() = kniBridge5198()

val G_TYPE_SOCKET_CONNECTION: GType
    get() = kniBridge5199()

val G_TYPE_SOCKET_CONTROL_MESSAGE: GType
    get() = kniBridge5200()

val G_TYPE_SOCKET_LISTENER: GType
    get() = kniBridge5201()

val G_TYPE_SOCKET_SERVICE: GType
    get() = kniBridge5202()

val G_TYPE_SRV_TARGET: GType
    get() = kniBridge5203()

val G_TYPE_SIMPLE_PROXY_RESOLVER: GType
    get() = kniBridge5204()

val G_TYPE_TASK: GType
    get() = kniBridge5205()

val G_TYPE_SUBPROCESS: GType
    get() = kniBridge5206()

val G_TYPE_SUBPROCESS_LAUNCHER: GType
    get() = kniBridge5207()

val G_TYPE_TCP_CONNECTION: GType
    get() = kniBridge5208()

val G_TYPE_TCP_WRAPPER_CONNECTION: GType
    get() = kniBridge5209()

val G_TYPE_TEST_DBUS: GType
    get() = kniBridge5210()

val G_TYPE_THEMED_ICON: GType
    get() = kniBridge5211()

val G_TYPE_THREADED_SOCKET_SERVICE: GType
    get() = kniBridge5212()

val G_TYPE_TLS_BACKEND: GType
    get() = kniBridge5213()

val G_TYPE_TLS_CERTIFICATE: GType
    get() = kniBridge5214()

val G_TYPE_TLS_CONNECTION: GType
    get() = kniBridge5215()

val G_TLS_ERROR: GQuark
    get() = kniBridge5216()

val G_TYPE_TLS_CLIENT_CONNECTION: GType
    get() = kniBridge5217()

val G_TYPE_TLS_DATABASE: GType
    get() = kniBridge5218()

val G_TYPE_TLS_FILE_DATABASE: GType
    get() = kniBridge5219()

val G_TYPE_TLS_INTERACTION: GType
    get() = kniBridge5220()

val G_TYPE_TLS_SERVER_CONNECTION: GType
    get() = kniBridge5221()

val G_TYPE_TLS_PASSWORD: GType
    get() = kniBridge5222()

val G_TYPE_VFS: GType
    get() = kniBridge5223()

val G_TYPE_VOLUME: GType
    get() = kniBridge5224()

val G_TYPE_ZLIB_COMPRESSOR: GType
    get() = kniBridge5225()

val G_TYPE_ZLIB_DECOMPRESSOR: GType
    get() = kniBridge5226()

val G_TYPE_DBUS_INTERFACE: GType
    get() = kniBridge5227()

val G_TYPE_DBUS_INTERFACE_SKELETON: GType
    get() = kniBridge5228()

val G_TYPE_DBUS_OBJECT: GType
    get() = kniBridge5229()

val G_TYPE_DBUS_OBJECT_SKELETON: GType
    get() = kniBridge5230()

val G_TYPE_DBUS_OBJECT_PROXY: GType
    get() = kniBridge5231()

val G_TYPE_DBUS_OBJECT_MANAGER: GType
    get() = kniBridge5232()

val G_TYPE_DBUS_OBJECT_MANAGER_CLIENT: GType
    get() = kniBridge5233()

val G_TYPE_DBUS_OBJECT_MANAGER_SERVER: GType
    get() = kniBridge5234()

val G_TYPE_DBUS_ACTION_GROUP: GType
    get() = kniBridge5235()

val G_TYPE_REMOTE_ACTION_GROUP: GType
    get() = kniBridge5236()

val G_TYPE_MENU_MODEL: GType
    get() = kniBridge5237()

val G_TYPE_MENU_ATTRIBUTE_ITER: GType
    get() = kniBridge5238()

val G_TYPE_MENU_LINK_ITER: GType
    get() = kniBridge5239()

val G_TYPE_MENU: GType
    get() = kniBridge5240()

val G_TYPE_MENU_ITEM: GType
    get() = kniBridge5241()

val G_TYPE_DBUS_MENU_MODEL: GType
    get() = kniBridge5242()

val G_TYPE_NOTIFICATION: GType
    get() = kniBridge5243()

val G_TYPE_LIST_MODEL: GType
    get() = kniBridge5244()

val G_TYPE_LIST_STORE: GType
    get() = kniBridge5245()

typealias gint8Var = ByteVarOf<gint8>

typealias gint8 = Byte

typealias guint8Var = UByteVarOf<guint8>

typealias guint8 = UByte

typealias gint16Var = ShortVarOf<gint16>

typealias gint16 = Short

typealias guint16Var = UShortVarOf<guint16>

typealias guint16 = UShort

typealias gint32Var = IntVarOf<gint32>

typealias gint32 = Int

typealias guint32Var = UIntVarOf<guint32>

typealias guint32 = UInt

typealias gint64Var = LongVarOf<gint64>

typealias gint64 = Long

typealias guint64Var = ULongVarOf<guint64>

typealias guint64 = ULong

typealias gssizeVar = LongVarOf<gssize>

typealias gssize = Long

typealias gsizeVar = ULongVarOf<gsize>

typealias gsize = ULong

typealias goffsetVar = LongVarOf<goffset>

typealias goffset = gint64

typealias gintptrVar = LongVarOf<gintptr>

typealias gintptr = Long

typealias guintptrVar = ULongVarOf<guintptr>

typealias guintptr = ULong

typealias GPidVar = IntVarOf<GPid>

typealias GPid = Int

typealias gcharVar = ByteVarOf<gchar>

typealias gchar = Byte

typealias gshortVar = ShortVarOf<gshort>

typealias gshort = Short

typealias glongVar = LongVarOf<glong>

typealias glong = Long

typealias gintVar = IntVarOf<gint>

typealias gint = Int

typealias gbooleanVar = IntVarOf<gboolean>

typealias gboolean = gint

typealias gucharVar = UByteVarOf<guchar>

typealias guchar = UByte

typealias gushortVar = UShortVarOf<gushort>

typealias gushort = UShort

typealias gulongVar = ULongVarOf<gulong>

typealias gulong = ULong

typealias guintVar = UIntVarOf<guint>

typealias guint = UInt

typealias gfloatVar = FloatVarOf<gfloat>

typealias gfloat = Float

typealias gdoubleVar = DoubleVarOf<gdouble>

typealias gdouble = Double

typealias gpointerVar = CPointerVarOf<gpointer>

typealias gpointer = COpaquePointer

typealias gconstpointerVar = CPointerVarOf<gconstpointer>

typealias gconstpointer = COpaquePointer

typealias GCompareFuncVar = CPointerVarOf<GCompareFunc>

typealias GCompareFunc = CPointer<CFunction<(gconstpointer?, gconstpointer?) -> gint>>

typealias GCompareDataFuncVar = CPointerVarOf<GCompareDataFunc>

typealias GCompareDataFunc = CPointer<CFunction<(gconstpointer?, gconstpointer?, gpointer?) -> gint>>

typealias GEqualFuncVar = CPointerVarOf<GEqualFunc>

typealias GEqualFunc = CPointer<CFunction<(gconstpointer?, gconstpointer?) -> gboolean>>

typealias GDestroyNotifyVar = CPointerVarOf<GDestroyNotify>

typealias GDestroyNotify = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GFuncVar = CPointerVarOf<GFunc>

typealias GFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GHashFuncVar = CPointerVarOf<GHashFunc>

typealias GHashFunc = CPointer<CFunction<(gconstpointer?) -> guint>>

typealias GHFuncVar = CPointerVarOf<GHFunc>

typealias GHFunc = CPointer<CFunction<(gpointer?, gpointer?, gpointer?) -> Unit>>

typealias GCopyFuncVar = CPointerVarOf<GCopyFunc>

typealias GCopyFunc = CPointer<CFunction<(gconstpointer?, gpointer?) -> gpointer?>>

typealias GFreeFuncVar = CPointerVarOf<GFreeFunc>

typealias GFreeFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GTranslateFuncVar = CPointerVarOf<GTranslateFunc>

typealias GTranslateFunc = CPointer<CFunction<(CPointer<gcharVar>?, gpointer?) -> CPointer<gcharVar>?>>

typealias GDoubleIEEE754 = _GDoubleIEEE754

typealias GFloatIEEE754 = _GFloatIEEE754

typealias GTimeVal = _GTimeVal

typealias grefcountVar = IntVarOf<grefcount>

typealias grefcount = gint

typealias gatomicrefcountVar = IntVarOf<gatomicrefcount>

typealias gatomicrefcount = gint

typealias GBytes = _GBytes

typealias GArray = _GArray

typealias GByteArray = _GByteArray

typealias GPtrArray = _GPtrArray

typealias GQuarkVar = UIntVarOf<GQuark>

typealias GQuark = guint32

typealias GError = _GError

typealias GDebugKey = _GDebugKey

typealias GVoidFuncVar = CPointerVarOf<GVoidFunc>

typealias GVoidFunc = CPointer<CFunction<() -> Unit>>

typealias GThreadFuncVar = CPointerVarOf<GThreadFunc>

typealias GThreadFunc = CPointer<CFunction<(gpointer?) -> gpointer?>>

typealias GThread = _GThread

typealias GMutex = _GMutex

typealias GRecMutex = _GRecMutex

typealias GRWLock = _GRWLock

typealias GCond = _GCond

typealias GPrivate = _GPrivate

typealias GOnce = _GOnce

typealias GAsyncQueue = _GAsyncQueue

typealias GBookmarkFile = _GBookmarkFile

typealias GChecksum = _GChecksum

typealias GIConvVar = CPointerVarOf<GIConv>

typealias GIConv = CPointer<_GIConv>

typealias GData = _GData

typealias GDataForeachFuncVar = CPointerVarOf<GDataForeachFunc>

typealias GDataForeachFunc = CPointer<CFunction<(GQuark, gpointer?, gpointer?) -> Unit>>

typealias GDuplicateFuncVar = CPointerVarOf<GDuplicateFunc>

typealias GDuplicateFunc = CPointer<CFunction<(gpointer?, gpointer?) -> gpointer?>>

typealias GTimeVar = IntVarOf<GTime>

typealias GTime = gint32

typealias GDateYearVar = UShortVarOf<GDateYear>

typealias GDateYear = guint16

typealias GDateDayVar = UByteVarOf<GDateDay>

typealias GDateDay = guint8

typealias GDate = _GDate

typealias GTimeZone = _GTimeZone

typealias GTimeSpanVar = LongVarOf<GTimeSpan>

typealias GTimeSpan = gint64

typealias GDateTime = _GDateTime

typealias GDir = _GDir

typealias GMemVTable = _GMemVTable

typealias GNode = _GNode

typealias GNodeTraverseFuncVar = CPointerVarOf<GNodeTraverseFunc>

typealias GNodeTraverseFunc = CPointer<CFunction<(CPointer<GNode>?, gpointer?) -> gboolean>>

typealias GNodeForeachFuncVar = CPointerVarOf<GNodeForeachFunc>

typealias GNodeForeachFunc = CPointer<CFunction<(CPointer<GNode>?, gpointer?) -> Unit>>

typealias GList = _GList

typealias GHashTable = _GHashTable

typealias GHRFuncVar = CPointerVarOf<GHRFunc>

typealias GHRFunc = CPointer<CFunction<(gpointer?, gpointer?, gpointer?) -> gboolean>>

typealias GHashTableIter = _GHashTableIter

typealias GHmac = _GHmac

typealias GHook = _GHook

typealias GHookList = _GHookList

typealias GHookFinalizeFuncVar = CPointerVarOf<GHookFinalizeFunc>

typealias GHookFinalizeFunc = CPointer<CFunction<(CPointer<GHookList>?, CPointer<GHook>?) -> Unit>>

typealias GHookCompareFuncVar = CPointerVarOf<GHookCompareFunc>

typealias GHookCompareFunc = CPointer<CFunction<(CPointer<GHook>?, CPointer<GHook>?) -> gint>>

typealias GHookFindFuncVar = CPointerVarOf<GHookFindFunc>

typealias GHookFindFunc = CPointer<CFunction<(CPointer<GHook>?, gpointer?) -> gboolean>>

typealias GHookMarshallerVar = CPointerVarOf<GHookMarshaller>

typealias GHookMarshaller = CPointer<CFunction<(CPointer<GHook>?, gpointer?) -> Unit>>

typealias GHookCheckMarshallerVar = CPointerVarOf<GHookCheckMarshaller>

typealias GHookCheckMarshaller = CPointer<CFunction<(CPointer<GHook>?, gpointer?) -> gboolean>>

typealias GHookFuncVar = CPointerVarOf<GHookFunc>

typealias GHookFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GHookCheckFuncVar = CPointerVarOf<GHookCheckFunc>

typealias GHookCheckFunc = CPointer<CFunction<(gpointer?) -> gboolean>>

typealias GPollFD = _GPollFD

typealias GPollFuncVar = CPointerVarOf<GPollFunc>

typealias GPollFunc = CPointer<CFunction<(CPointer<GPollFD>?, guint, gint) -> gint>>

typealias GSList = _GSList

typealias GMainContext = _GMainContext

typealias GMainLoop = _GMainLoop

typealias GSource = _GSource

typealias GSourceFuncVar = CPointerVarOf<GSourceFunc>

typealias GSourceFunc = CPointer<CFunction<(gpointer?) -> gboolean>>

typealias GSourceCallbackFuncs = _GSourceCallbackFuncs

typealias GSourceDummyMarshalVar = CPointerVarOf<GSourceDummyMarshal>

typealias GSourceDummyMarshal = CPointer<CFunction<() -> Unit>>

typealias GSourceFuncs = _GSourceFuncs

typealias GSourcePrivate = _GSourcePrivate

typealias GChildWatchFuncVar = CPointerVarOf<GChildWatchFunc>

typealias GChildWatchFunc = CPointer<CFunction<(GPid, gint, gpointer?) -> Unit>>

typealias GClearHandleFuncVar = CPointerVarOf<GClearHandleFunc>

typealias GClearHandleFunc = CPointer<CFunction<(guint) -> Unit>>

typealias gunicharVar = UIntVarOf<gunichar>

typealias gunichar = guint32

typealias gunichar2Var = UShortVarOf<gunichar2>

typealias gunichar2 = guint16

typealias GString = _GString

typealias GIOChannel = _GIOChannel

typealias GIOFuncs = _GIOFuncs

typealias GIOFuncVar = CPointerVarOf<GIOFunc>

typealias GIOFunc = CPointer<CFunction<(CPointer<GIOChannel>?, GIOCondition, gpointer?) -> gboolean>>

typealias GKeyFile = _GKeyFile

typealias GMappedFile = _GMappedFile

typealias GMarkupParseContext = _GMarkupParseContext

typealias GMarkupParser = _GMarkupParser

typealias GVariantType = _GVariantType

typealias GVariant = _GVariant

typealias GVariantIter = _GVariantIter

typealias GVariantBuilder = _GVariantBuilder

typealias GVariantDict = _GVariantDict

typealias GLogFuncVar = CPointerVarOf<GLogFunc>

typealias GLogFunc = CPointer<CFunction<(CPointer<gcharVar>?, GLogLevelFlags, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GLogField = _GLogField

typealias GLogWriterFuncVar = CPointerVarOf<GLogWriterFunc>

typealias GLogWriterFunc = CPointer<CFunction<(GLogLevelFlags, CPointer<GLogField>?, gsize, gpointer?) -> GLogWriterOutput>>

typealias GPrintFuncVar = CPointerVarOf<GPrintFunc>

typealias GPrintFunc = CPointer<CFunction<(CPointer<gcharVar>?) -> Unit>>

typealias GOptionContext = _GOptionContext

typealias GOptionGroup = _GOptionGroup

typealias GOptionEntry = _GOptionEntry

typealias GOptionArgFuncVar = CPointerVarOf<GOptionArgFunc>

typealias GOptionArgFunc = CPointer<CFunction<(CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>

typealias GOptionParseFuncVar = CPointerVarOf<GOptionParseFunc>

typealias GOptionParseFunc = CPointer<CFunction<(CPointer<GOptionContext>?, CPointer<GOptionGroup>?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>

typealias GOptionErrorFuncVar = CPointerVarOf<GOptionErrorFunc>

typealias GOptionErrorFunc = CPointer<CFunction<(CPointer<GOptionContext>?, CPointer<GOptionGroup>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>

typealias GPatternSpec = _GPatternSpec

typealias GQueue = _GQueue

typealias GRand = _GRand

typealias GRefStringVar = ByteVarOf<GRefString>

typealias GRefString = Byte

typealias GRegex = _GRegex

typealias GMatchInfo = _GMatchInfo

typealias GRegexEvalCallbackVar = CPointerVarOf<GRegexEvalCallback>

typealias GRegexEvalCallback = CPointer<CFunction<(CPointer<GMatchInfo>?, CPointer<GString>?, gpointer?) -> gboolean>>

typealias GScannerConfig = _GScannerConfig

typealias GTokenValue = _GTokenValue

typealias GScanner = _GScanner

typealias GScannerMsgFuncVar = CPointerVarOf<GScannerMsgFunc>

typealias GScannerMsgFunc = CPointer<CFunction<(CPointer<GScanner>?, CPointer<gcharVar>?, gboolean) -> Unit>>

typealias GSequence = _GSequence

typealias GSequenceIter = _GSequenceNode

typealias GSequenceIterCompareFuncVar = CPointerVarOf<GSequenceIterCompareFunc>

typealias GSequenceIterCompareFunc = CPointer<CFunction<(CPointer<GSequenceIter>?, CPointer<GSequenceIter>?, gpointer?) -> gint>>

typealias GSpawnChildSetupFuncVar = CPointerVarOf<GSpawnChildSetupFunc>

typealias GSpawnChildSetupFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GStrvVar = CPointerVarOf<GStrv>

typealias GStrv = CPointer<CPointerVar<gcharVar>>

typealias GStringChunk = _GStringChunk

typealias GTestFuncVar = CPointerVarOf<GTestFunc>

typealias GTestFunc = CPointer<CFunction<() -> Unit>>

typealias GTestDataFuncVar = CPointerVarOf<GTestDataFunc>

typealias GTestDataFunc = CPointer<CFunction<(gconstpointer?) -> Unit>>

typealias GTestFixtureFuncVar = CPointerVarOf<GTestFixtureFunc>

typealias GTestFixtureFunc = CPointer<CFunction<(gpointer?, gconstpointer?) -> Unit>>

typealias GTestLogFatalFuncVar = CPointerVarOf<GTestLogFatalFunc>

typealias GTestLogFatalFunc = CPointer<CFunction<(CPointer<gcharVar>?, GLogLevelFlags, CPointer<gcharVar>?, gpointer?) -> gboolean>>

typealias GThreadPool = _GThreadPool

typealias GTimer = _GTimer

typealias GTrashStack = _GTrashStack

typealias GTree = _GTree

typealias GTraverseFuncVar = CPointerVarOf<GTraverseFunc>

typealias GTraverseFunc = CPointer<CFunction<(gpointer?, gpointer?, gpointer?) -> gboolean>>

typealias GAllocator = _GAllocator

typealias GMemChunk = _GMemChunk

typealias GCache = _GCache

typealias GCacheNewFuncVar = CPointerVarOf<GCacheNewFunc>

typealias GCacheNewFunc = CPointer<CFunction<(gpointer?) -> gpointer?>>

typealias GCacheDupFuncVar = CPointerVarOf<GCacheDupFunc>

typealias GCacheDupFunc = CPointer<CFunction<(gpointer?) -> gpointer?>>

typealias GCacheDestroyFuncVar = CPointerVarOf<GCacheDestroyFunc>

typealias GCacheDestroyFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GCompletionFuncVar = CPointerVarOf<GCompletionFunc>

typealias GCompletionFunc = CPointer<CFunction<(gpointer?) -> CPointer<gcharVar>?>>

typealias GCompletionStrncmpFuncVar = CPointerVarOf<GCompletionStrncmpFunc>

typealias GCompletionStrncmpFunc = CPointer<CFunction<(CPointer<gcharVar>?, CPointer<gcharVar>?, gsize) -> gint>>

typealias GCompletion = _GCompletion

typealias GRelation = _GRelation

typealias GTuples = _GTuples

typealias GThreadFunctions = _GThreadFunctions

typealias GStaticRecMutex = _GStaticRecMutex

typealias GStaticRWLock = _GStaticRWLock

typealias GStaticPrivate = _GStaticPrivate

typealias GAsyncQueue_autoptrVar = CPointerVarOf<GAsyncQueue_autoptr>

typealias GAsyncQueue_autoptr = CPointer<GAsyncQueue>

typealias GAsyncQueue_listautoptrVar = CPointerVarOf<GAsyncQueue_listautoptr>

typealias GAsyncQueue_listautoptr = CPointer<GList>

typealias GAsyncQueue_slistautoptrVar = CPointerVarOf<GAsyncQueue_slistautoptr>

typealias GAsyncQueue_slistautoptr = CPointer<GSList>

typealias GAsyncQueue_queueautoptrVar = CPointerVarOf<GAsyncQueue_queueautoptr>

typealias GAsyncQueue_queueautoptr = CPointer<GQueue>

typealias GBookmarkFile_autoptrVar = CPointerVarOf<GBookmarkFile_autoptr>

typealias GBookmarkFile_autoptr = CPointer<GBookmarkFile>

typealias GBookmarkFile_listautoptrVar = CPointerVarOf<GBookmarkFile_listautoptr>

typealias GBookmarkFile_listautoptr = CPointer<GList>

typealias GBookmarkFile_slistautoptrVar = CPointerVarOf<GBookmarkFile_slistautoptr>

typealias GBookmarkFile_slistautoptr = CPointer<GSList>

typealias GBookmarkFile_queueautoptrVar = CPointerVarOf<GBookmarkFile_queueautoptr>

typealias GBookmarkFile_queueautoptr = CPointer<GQueue>

typealias GBytes_autoptrVar = CPointerVarOf<GBytes_autoptr>

typealias GBytes_autoptr = CPointer<GBytes>

typealias GBytes_listautoptrVar = CPointerVarOf<GBytes_listautoptr>

typealias GBytes_listautoptr = CPointer<GList>

typealias GBytes_slistautoptrVar = CPointerVarOf<GBytes_slistautoptr>

typealias GBytes_slistautoptr = CPointer<GSList>

typealias GBytes_queueautoptrVar = CPointerVarOf<GBytes_queueautoptr>

typealias GBytes_queueautoptr = CPointer<GQueue>

typealias GChecksum_autoptrVar = CPointerVarOf<GChecksum_autoptr>

typealias GChecksum_autoptr = CPointer<GChecksum>

typealias GChecksum_listautoptrVar = CPointerVarOf<GChecksum_listautoptr>

typealias GChecksum_listautoptr = CPointer<GList>

typealias GChecksum_slistautoptrVar = CPointerVarOf<GChecksum_slistautoptr>

typealias GChecksum_slistautoptr = CPointer<GSList>

typealias GChecksum_queueautoptrVar = CPointerVarOf<GChecksum_queueautoptr>

typealias GChecksum_queueautoptr = CPointer<GQueue>

typealias GDateTime_autoptrVar = CPointerVarOf<GDateTime_autoptr>

typealias GDateTime_autoptr = CPointer<GDateTime>

typealias GDateTime_listautoptrVar = CPointerVarOf<GDateTime_listautoptr>

typealias GDateTime_listautoptr = CPointer<GList>

typealias GDateTime_slistautoptrVar = CPointerVarOf<GDateTime_slistautoptr>

typealias GDateTime_slistautoptr = CPointer<GSList>

typealias GDateTime_queueautoptrVar = CPointerVarOf<GDateTime_queueautoptr>

typealias GDateTime_queueautoptr = CPointer<GQueue>

typealias GDir_autoptrVar = CPointerVarOf<GDir_autoptr>

typealias GDir_autoptr = CPointer<GDir>

typealias GDir_listautoptrVar = CPointerVarOf<GDir_listautoptr>

typealias GDir_listautoptr = CPointer<GList>

typealias GDir_slistautoptrVar = CPointerVarOf<GDir_slistautoptr>

typealias GDir_slistautoptr = CPointer<GSList>

typealias GDir_queueautoptrVar = CPointerVarOf<GDir_queueautoptr>

typealias GDir_queueautoptr = CPointer<GQueue>

typealias GError_autoptrVar = CPointerVarOf<GError_autoptr>

typealias GError_autoptr = CPointer<GError>

typealias GError_listautoptrVar = CPointerVarOf<GError_listautoptr>

typealias GError_listautoptr = CPointer<GList>

typealias GError_slistautoptrVar = CPointerVarOf<GError_slistautoptr>

typealias GError_slistautoptr = CPointer<GSList>

typealias GError_queueautoptrVar = CPointerVarOf<GError_queueautoptr>

typealias GError_queueautoptr = CPointer<GQueue>

typealias GHashTable_autoptrVar = CPointerVarOf<GHashTable_autoptr>

typealias GHashTable_autoptr = CPointer<GHashTable>

typealias GHashTable_listautoptrVar = CPointerVarOf<GHashTable_listautoptr>

typealias GHashTable_listautoptr = CPointer<GList>

typealias GHashTable_slistautoptrVar = CPointerVarOf<GHashTable_slistautoptr>

typealias GHashTable_slistautoptr = CPointer<GSList>

typealias GHashTable_queueautoptrVar = CPointerVarOf<GHashTable_queueautoptr>

typealias GHashTable_queueautoptr = CPointer<GQueue>

typealias GHmac_autoptrVar = CPointerVarOf<GHmac_autoptr>

typealias GHmac_autoptr = CPointer<GHmac>

typealias GHmac_listautoptrVar = CPointerVarOf<GHmac_listautoptr>

typealias GHmac_listautoptr = CPointer<GList>

typealias GHmac_slistautoptrVar = CPointerVarOf<GHmac_slistautoptr>

typealias GHmac_slistautoptr = CPointer<GSList>

typealias GHmac_queueautoptrVar = CPointerVarOf<GHmac_queueautoptr>

typealias GHmac_queueautoptr = CPointer<GQueue>

typealias GIOChannel_autoptrVar = CPointerVarOf<GIOChannel_autoptr>

typealias GIOChannel_autoptr = CPointer<GIOChannel>

typealias GIOChannel_listautoptrVar = CPointerVarOf<GIOChannel_listautoptr>

typealias GIOChannel_listautoptr = CPointer<GList>

typealias GIOChannel_slistautoptrVar = CPointerVarOf<GIOChannel_slistautoptr>

typealias GIOChannel_slistautoptr = CPointer<GSList>

typealias GIOChannel_queueautoptrVar = CPointerVarOf<GIOChannel_queueautoptr>

typealias GIOChannel_queueautoptr = CPointer<GQueue>

typealias GKeyFile_autoptrVar = CPointerVarOf<GKeyFile_autoptr>

typealias GKeyFile_autoptr = CPointer<GKeyFile>

typealias GKeyFile_listautoptrVar = CPointerVarOf<GKeyFile_listautoptr>

typealias GKeyFile_listautoptr = CPointer<GList>

typealias GKeyFile_slistautoptrVar = CPointerVarOf<GKeyFile_slistautoptr>

typealias GKeyFile_slistautoptr = CPointer<GSList>

typealias GKeyFile_queueautoptrVar = CPointerVarOf<GKeyFile_queueautoptr>

typealias GKeyFile_queueautoptr = CPointer<GQueue>

typealias GList_autoptrVar = CPointerVarOf<GList_autoptr>

typealias GList_autoptr = CPointer<GList>

typealias GList_listautoptrVar = CPointerVarOf<GList_listautoptr>

typealias GList_listautoptr = CPointer<GList>

typealias GList_slistautoptrVar = CPointerVarOf<GList_slistautoptr>

typealias GList_slistautoptr = CPointer<GSList>

typealias GList_queueautoptrVar = CPointerVarOf<GList_queueautoptr>

typealias GList_queueautoptr = CPointer<GQueue>

typealias GArray_autoptrVar = CPointerVarOf<GArray_autoptr>

typealias GArray_autoptr = CPointer<GArray>

typealias GArray_listautoptrVar = CPointerVarOf<GArray_listautoptr>

typealias GArray_listautoptr = CPointer<GList>

typealias GArray_slistautoptrVar = CPointerVarOf<GArray_slistautoptr>

typealias GArray_slistautoptr = CPointer<GSList>

typealias GArray_queueautoptrVar = CPointerVarOf<GArray_queueautoptr>

typealias GArray_queueautoptr = CPointer<GQueue>

typealias GPtrArray_autoptrVar = CPointerVarOf<GPtrArray_autoptr>

typealias GPtrArray_autoptr = CPointer<GPtrArray>

typealias GPtrArray_listautoptrVar = CPointerVarOf<GPtrArray_listautoptr>

typealias GPtrArray_listautoptr = CPointer<GList>

typealias GPtrArray_slistautoptrVar = CPointerVarOf<GPtrArray_slistautoptr>

typealias GPtrArray_slistautoptr = CPointer<GSList>

typealias GPtrArray_queueautoptrVar = CPointerVarOf<GPtrArray_queueautoptr>

typealias GPtrArray_queueautoptr = CPointer<GQueue>

typealias GByteArray_autoptrVar = CPointerVarOf<GByteArray_autoptr>

typealias GByteArray_autoptr = CPointer<GByteArray>

typealias GByteArray_listautoptrVar = CPointerVarOf<GByteArray_listautoptr>

typealias GByteArray_listautoptr = CPointer<GList>

typealias GByteArray_slistautoptrVar = CPointerVarOf<GByteArray_slistautoptr>

typealias GByteArray_slistautoptr = CPointer<GSList>

typealias GByteArray_queueautoptrVar = CPointerVarOf<GByteArray_queueautoptr>

typealias GByteArray_queueautoptr = CPointer<GQueue>

typealias GMainContext_autoptrVar = CPointerVarOf<GMainContext_autoptr>

typealias GMainContext_autoptr = CPointer<GMainContext>

typealias GMainContext_listautoptrVar = CPointerVarOf<GMainContext_listautoptr>

typealias GMainContext_listautoptr = CPointer<GList>

typealias GMainContext_slistautoptrVar = CPointerVarOf<GMainContext_slistautoptr>

typealias GMainContext_slistautoptr = CPointer<GSList>

typealias GMainContext_queueautoptrVar = CPointerVarOf<GMainContext_queueautoptr>

typealias GMainContext_queueautoptr = CPointer<GQueue>

typealias GMainLoop_autoptrVar = CPointerVarOf<GMainLoop_autoptr>

typealias GMainLoop_autoptr = CPointer<GMainLoop>

typealias GMainLoop_listautoptrVar = CPointerVarOf<GMainLoop_listautoptr>

typealias GMainLoop_listautoptr = CPointer<GList>

typealias GMainLoop_slistautoptrVar = CPointerVarOf<GMainLoop_slistautoptr>

typealias GMainLoop_slistautoptr = CPointer<GSList>

typealias GMainLoop_queueautoptrVar = CPointerVarOf<GMainLoop_queueautoptr>

typealias GMainLoop_queueautoptr = CPointer<GQueue>

typealias GSource_autoptrVar = CPointerVarOf<GSource_autoptr>

typealias GSource_autoptr = CPointer<GSource>

typealias GSource_listautoptrVar = CPointerVarOf<GSource_listautoptr>

typealias GSource_listautoptr = CPointer<GList>

typealias GSource_slistautoptrVar = CPointerVarOf<GSource_slistautoptr>

typealias GSource_slistautoptr = CPointer<GSList>

typealias GSource_queueautoptrVar = CPointerVarOf<GSource_queueautoptr>

typealias GSource_queueautoptr = CPointer<GQueue>

typealias GMappedFile_autoptrVar = CPointerVarOf<GMappedFile_autoptr>

typealias GMappedFile_autoptr = CPointer<GMappedFile>

typealias GMappedFile_listautoptrVar = CPointerVarOf<GMappedFile_listautoptr>

typealias GMappedFile_listautoptr = CPointer<GList>

typealias GMappedFile_slistautoptrVar = CPointerVarOf<GMappedFile_slistautoptr>

typealias GMappedFile_slistautoptr = CPointer<GSList>

typealias GMappedFile_queueautoptrVar = CPointerVarOf<GMappedFile_queueautoptr>

typealias GMappedFile_queueautoptr = CPointer<GQueue>

typealias GMarkupParseContext_autoptrVar = CPointerVarOf<GMarkupParseContext_autoptr>

typealias GMarkupParseContext_autoptr = CPointer<GMarkupParseContext>

typealias GMarkupParseContext_listautoptrVar = CPointerVarOf<GMarkupParseContext_listautoptr>

typealias GMarkupParseContext_listautoptr = CPointer<GList>

typealias GMarkupParseContext_slistautoptrVar = CPointerVarOf<GMarkupParseContext_slistautoptr>

typealias GMarkupParseContext_slistautoptr = CPointer<GSList>

typealias GMarkupParseContext_queueautoptrVar = CPointerVarOf<GMarkupParseContext_queueautoptr>

typealias GMarkupParseContext_queueautoptr = CPointer<GQueue>

typealias GNode_autoptrVar = CPointerVarOf<GNode_autoptr>

typealias GNode_autoptr = CPointer<GNode>

typealias GNode_listautoptrVar = CPointerVarOf<GNode_listautoptr>

typealias GNode_listautoptr = CPointer<GList>

typealias GNode_slistautoptrVar = CPointerVarOf<GNode_slistautoptr>

typealias GNode_slistautoptr = CPointer<GSList>

typealias GNode_queueautoptrVar = CPointerVarOf<GNode_queueautoptr>

typealias GNode_queueautoptr = CPointer<GQueue>

typealias GOptionContext_autoptrVar = CPointerVarOf<GOptionContext_autoptr>

typealias GOptionContext_autoptr = CPointer<GOptionContext>

typealias GOptionContext_listautoptrVar = CPointerVarOf<GOptionContext_listautoptr>

typealias GOptionContext_listautoptr = CPointer<GList>

typealias GOptionContext_slistautoptrVar = CPointerVarOf<GOptionContext_slistautoptr>

typealias GOptionContext_slistautoptr = CPointer<GSList>

typealias GOptionContext_queueautoptrVar = CPointerVarOf<GOptionContext_queueautoptr>

typealias GOptionContext_queueautoptr = CPointer<GQueue>

typealias GOptionGroup_autoptrVar = CPointerVarOf<GOptionGroup_autoptr>

typealias GOptionGroup_autoptr = CPointer<GOptionGroup>

typealias GOptionGroup_listautoptrVar = CPointerVarOf<GOptionGroup_listautoptr>

typealias GOptionGroup_listautoptr = CPointer<GList>

typealias GOptionGroup_slistautoptrVar = CPointerVarOf<GOptionGroup_slistautoptr>

typealias GOptionGroup_slistautoptr = CPointer<GSList>

typealias GOptionGroup_queueautoptrVar = CPointerVarOf<GOptionGroup_queueautoptr>

typealias GOptionGroup_queueautoptr = CPointer<GQueue>

typealias GPatternSpec_autoptrVar = CPointerVarOf<GPatternSpec_autoptr>

typealias GPatternSpec_autoptr = CPointer<GPatternSpec>

typealias GPatternSpec_listautoptrVar = CPointerVarOf<GPatternSpec_listautoptr>

typealias GPatternSpec_listautoptr = CPointer<GList>

typealias GPatternSpec_slistautoptrVar = CPointerVarOf<GPatternSpec_slistautoptr>

typealias GPatternSpec_slistautoptr = CPointer<GSList>

typealias GPatternSpec_queueautoptrVar = CPointerVarOf<GPatternSpec_queueautoptr>

typealias GPatternSpec_queueautoptr = CPointer<GQueue>

typealias GQueue_autoptrVar = CPointerVarOf<GQueue_autoptr>

typealias GQueue_autoptr = CPointer<GQueue>

typealias GQueue_listautoptrVar = CPointerVarOf<GQueue_listautoptr>

typealias GQueue_listautoptr = CPointer<GList>

typealias GQueue_slistautoptrVar = CPointerVarOf<GQueue_slistautoptr>

typealias GQueue_slistautoptr = CPointer<GSList>

typealias GQueue_queueautoptrVar = CPointerVarOf<GQueue_queueautoptr>

typealias GQueue_queueautoptr = CPointer<GQueue>

typealias GRand_autoptrVar = CPointerVarOf<GRand_autoptr>

typealias GRand_autoptr = CPointer<GRand>

typealias GRand_listautoptrVar = CPointerVarOf<GRand_listautoptr>

typealias GRand_listautoptr = CPointer<GList>

typealias GRand_slistautoptrVar = CPointerVarOf<GRand_slistautoptr>

typealias GRand_slistautoptr = CPointer<GSList>

typealias GRand_queueautoptrVar = CPointerVarOf<GRand_queueautoptr>

typealias GRand_queueautoptr = CPointer<GQueue>

typealias GRegex_autoptrVar = CPointerVarOf<GRegex_autoptr>

typealias GRegex_autoptr = CPointer<GRegex>

typealias GRegex_listautoptrVar = CPointerVarOf<GRegex_listautoptr>

typealias GRegex_listautoptr = CPointer<GList>

typealias GRegex_slistautoptrVar = CPointerVarOf<GRegex_slistautoptr>

typealias GRegex_slistautoptr = CPointer<GSList>

typealias GRegex_queueautoptrVar = CPointerVarOf<GRegex_queueautoptr>

typealias GRegex_queueautoptr = CPointer<GQueue>

typealias GMatchInfo_autoptrVar = CPointerVarOf<GMatchInfo_autoptr>

typealias GMatchInfo_autoptr = CPointer<GMatchInfo>

typealias GMatchInfo_listautoptrVar = CPointerVarOf<GMatchInfo_listautoptr>

typealias GMatchInfo_listautoptr = CPointer<GList>

typealias GMatchInfo_slistautoptrVar = CPointerVarOf<GMatchInfo_slistautoptr>

typealias GMatchInfo_slistautoptr = CPointer<GSList>

typealias GMatchInfo_queueautoptrVar = CPointerVarOf<GMatchInfo_queueautoptr>

typealias GMatchInfo_queueautoptr = CPointer<GQueue>

typealias GScanner_autoptrVar = CPointerVarOf<GScanner_autoptr>

typealias GScanner_autoptr = CPointer<GScanner>

typealias GScanner_listautoptrVar = CPointerVarOf<GScanner_listautoptr>

typealias GScanner_listautoptr = CPointer<GList>

typealias GScanner_slistautoptrVar = CPointerVarOf<GScanner_slistautoptr>

typealias GScanner_slistautoptr = CPointer<GSList>

typealias GScanner_queueautoptrVar = CPointerVarOf<GScanner_queueautoptr>

typealias GScanner_queueautoptr = CPointer<GQueue>

typealias GSequence_autoptrVar = CPointerVarOf<GSequence_autoptr>

typealias GSequence_autoptr = CPointer<GSequence>

typealias GSequence_listautoptrVar = CPointerVarOf<GSequence_listautoptr>

typealias GSequence_listautoptr = CPointer<GList>

typealias GSequence_slistautoptrVar = CPointerVarOf<GSequence_slistautoptr>

typealias GSequence_slistautoptr = CPointer<GSList>

typealias GSequence_queueautoptrVar = CPointerVarOf<GSequence_queueautoptr>

typealias GSequence_queueautoptr = CPointer<GQueue>

typealias GSList_autoptrVar = CPointerVarOf<GSList_autoptr>

typealias GSList_autoptr = CPointer<GSList>

typealias GSList_listautoptrVar = CPointerVarOf<GSList_listautoptr>

typealias GSList_listautoptr = CPointer<GList>

typealias GSList_slistautoptrVar = CPointerVarOf<GSList_slistautoptr>

typealias GSList_slistautoptr = CPointer<GSList>

typealias GSList_queueautoptrVar = CPointerVarOf<GSList_queueautoptr>

typealias GSList_queueautoptr = CPointer<GQueue>

typealias GString_autoptrVar = CPointerVarOf<GString_autoptr>

typealias GString_autoptr = CPointer<GString>

typealias GString_listautoptrVar = CPointerVarOf<GString_listautoptr>

typealias GString_listautoptr = CPointer<GList>

typealias GString_slistautoptrVar = CPointerVarOf<GString_slistautoptr>

typealias GString_slistautoptr = CPointer<GSList>

typealias GString_queueautoptrVar = CPointerVarOf<GString_queueautoptr>

typealias GString_queueautoptr = CPointer<GQueue>

typealias GStringChunk_autoptrVar = CPointerVarOf<GStringChunk_autoptr>

typealias GStringChunk_autoptr = CPointer<GStringChunk>

typealias GStringChunk_listautoptrVar = CPointerVarOf<GStringChunk_listautoptr>

typealias GStringChunk_listautoptr = CPointer<GList>

typealias GStringChunk_slistautoptrVar = CPointerVarOf<GStringChunk_slistautoptr>

typealias GStringChunk_slistautoptr = CPointer<GSList>

typealias GStringChunk_queueautoptrVar = CPointerVarOf<GStringChunk_queueautoptr>

typealias GStringChunk_queueautoptr = CPointer<GQueue>

typealias GThread_autoptrVar = CPointerVarOf<GThread_autoptr>

typealias GThread_autoptr = CPointer<GThread>

typealias GThread_listautoptrVar = CPointerVarOf<GThread_listautoptr>

typealias GThread_listautoptr = CPointer<GList>

typealias GThread_slistautoptrVar = CPointerVarOf<GThread_slistautoptr>

typealias GThread_slistautoptr = CPointer<GSList>

typealias GThread_queueautoptrVar = CPointerVarOf<GThread_queueautoptr>

typealias GThread_queueautoptr = CPointer<GQueue>

typealias GMutexLocker_autoptrVar = CPointerVarOf<GMutexLocker_autoptr>

typealias GMutexLocker_autoptr = COpaquePointer

typealias GMutexLocker_listautoptrVar = CPointerVarOf<GMutexLocker_listautoptr>

typealias GMutexLocker_listautoptr = CPointer<GList>

typealias GMutexLocker_slistautoptrVar = CPointerVarOf<GMutexLocker_slistautoptr>

typealias GMutexLocker_slistautoptr = CPointer<GSList>

typealias GMutexLocker_queueautoptrVar = CPointerVarOf<GMutexLocker_queueautoptr>

typealias GMutexLocker_queueautoptr = CPointer<GQueue>

typealias GRecMutexLocker_autoptrVar = CPointerVarOf<GRecMutexLocker_autoptr>

typealias GRecMutexLocker_autoptr = COpaquePointer

typealias GRecMutexLocker_listautoptrVar = CPointerVarOf<GRecMutexLocker_listautoptr>

typealias GRecMutexLocker_listautoptr = CPointer<GList>

typealias GRecMutexLocker_slistautoptrVar = CPointerVarOf<GRecMutexLocker_slistautoptr>

typealias GRecMutexLocker_slistautoptr = CPointer<GSList>

typealias GRecMutexLocker_queueautoptrVar = CPointerVarOf<GRecMutexLocker_queueautoptr>

typealias GRecMutexLocker_queueautoptr = CPointer<GQueue>

typealias GRWLockWriterLocker_autoptrVar = CPointerVarOf<GRWLockWriterLocker_autoptr>

typealias GRWLockWriterLocker_autoptr = COpaquePointer

typealias GRWLockWriterLocker_listautoptrVar = CPointerVarOf<GRWLockWriterLocker_listautoptr>

typealias GRWLockWriterLocker_listautoptr = CPointer<GList>

typealias GRWLockWriterLocker_slistautoptrVar = CPointerVarOf<GRWLockWriterLocker_slistautoptr>

typealias GRWLockWriterLocker_slistautoptr = CPointer<GSList>

typealias GRWLockWriterLocker_queueautoptrVar = CPointerVarOf<GRWLockWriterLocker_queueautoptr>

typealias GRWLockWriterLocker_queueautoptr = CPointer<GQueue>

typealias GRWLockReaderLocker_autoptrVar = CPointerVarOf<GRWLockReaderLocker_autoptr>

typealias GRWLockReaderLocker_autoptr = COpaquePointer

typealias GRWLockReaderLocker_listautoptrVar = CPointerVarOf<GRWLockReaderLocker_listautoptr>

typealias GRWLockReaderLocker_listautoptr = CPointer<GList>

typealias GRWLockReaderLocker_slistautoptrVar = CPointerVarOf<GRWLockReaderLocker_slistautoptr>

typealias GRWLockReaderLocker_slistautoptr = CPointer<GSList>

typealias GRWLockReaderLocker_queueautoptrVar = CPointerVarOf<GRWLockReaderLocker_queueautoptr>

typealias GRWLockReaderLocker_queueautoptr = CPointer<GQueue>

typealias GTimer_autoptrVar = CPointerVarOf<GTimer_autoptr>

typealias GTimer_autoptr = CPointer<GTimer>

typealias GTimer_listautoptrVar = CPointerVarOf<GTimer_listautoptr>

typealias GTimer_listautoptr = CPointer<GList>

typealias GTimer_slistautoptrVar = CPointerVarOf<GTimer_slistautoptr>

typealias GTimer_slistautoptr = CPointer<GSList>

typealias GTimer_queueautoptrVar = CPointerVarOf<GTimer_queueautoptr>

typealias GTimer_queueautoptr = CPointer<GQueue>

typealias GTimeZone_autoptrVar = CPointerVarOf<GTimeZone_autoptr>

typealias GTimeZone_autoptr = CPointer<GTimeZone>

typealias GTimeZone_listautoptrVar = CPointerVarOf<GTimeZone_listautoptr>

typealias GTimeZone_listautoptr = CPointer<GList>

typealias GTimeZone_slistautoptrVar = CPointerVarOf<GTimeZone_slistautoptr>

typealias GTimeZone_slistautoptr = CPointer<GSList>

typealias GTimeZone_queueautoptrVar = CPointerVarOf<GTimeZone_queueautoptr>

typealias GTimeZone_queueautoptr = CPointer<GQueue>

typealias GTree_autoptrVar = CPointerVarOf<GTree_autoptr>

typealias GTree_autoptr = CPointer<GTree>

typealias GTree_listautoptrVar = CPointerVarOf<GTree_listautoptr>

typealias GTree_listautoptr = CPointer<GList>

typealias GTree_slistautoptrVar = CPointerVarOf<GTree_slistautoptr>

typealias GTree_slistautoptr = CPointer<GSList>

typealias GTree_queueautoptrVar = CPointerVarOf<GTree_queueautoptr>

typealias GTree_queueautoptr = CPointer<GQueue>

typealias GVariant_autoptrVar = CPointerVarOf<GVariant_autoptr>

typealias GVariant_autoptr = CPointer<GVariant>

typealias GVariant_listautoptrVar = CPointerVarOf<GVariant_listautoptr>

typealias GVariant_listautoptr = CPointer<GList>

typealias GVariant_slistautoptrVar = CPointerVarOf<GVariant_slistautoptr>

typealias GVariant_slistautoptr = CPointer<GSList>

typealias GVariant_queueautoptrVar = CPointerVarOf<GVariant_queueautoptr>

typealias GVariant_queueautoptr = CPointer<GQueue>

typealias GVariantBuilder_autoptrVar = CPointerVarOf<GVariantBuilder_autoptr>

typealias GVariantBuilder_autoptr = CPointer<GVariantBuilder>

typealias GVariantBuilder_listautoptrVar = CPointerVarOf<GVariantBuilder_listautoptr>

typealias GVariantBuilder_listautoptr = CPointer<GList>

typealias GVariantBuilder_slistautoptrVar = CPointerVarOf<GVariantBuilder_slistautoptr>

typealias GVariantBuilder_slistautoptr = CPointer<GSList>

typealias GVariantBuilder_queueautoptrVar = CPointerVarOf<GVariantBuilder_queueautoptr>

typealias GVariantBuilder_queueautoptr = CPointer<GQueue>

typealias GVariantIter_autoptrVar = CPointerVarOf<GVariantIter_autoptr>

typealias GVariantIter_autoptr = CPointer<GVariantIter>

typealias GVariantIter_listautoptrVar = CPointerVarOf<GVariantIter_listautoptr>

typealias GVariantIter_listautoptr = CPointer<GList>

typealias GVariantIter_slistautoptrVar = CPointerVarOf<GVariantIter_slistautoptr>

typealias GVariantIter_slistautoptr = CPointer<GSList>

typealias GVariantIter_queueautoptrVar = CPointerVarOf<GVariantIter_queueautoptr>

typealias GVariantIter_queueautoptr = CPointer<GQueue>

typealias GVariantDict_autoptrVar = CPointerVarOf<GVariantDict_autoptr>

typealias GVariantDict_autoptr = CPointer<GVariantDict>

typealias GVariantDict_listautoptrVar = CPointerVarOf<GVariantDict_listautoptr>

typealias GVariantDict_listautoptr = CPointer<GList>

typealias GVariantDict_slistautoptrVar = CPointerVarOf<GVariantDict_slistautoptr>

typealias GVariantDict_slistautoptr = CPointer<GSList>

typealias GVariantDict_queueautoptrVar = CPointerVarOf<GVariantDict_queueautoptr>

typealias GVariantDict_queueautoptr = CPointer<GQueue>

typealias GVariantType_autoptrVar = CPointerVarOf<GVariantType_autoptr>

typealias GVariantType_autoptr = CPointer<GVariantType>

typealias GVariantType_listautoptrVar = CPointerVarOf<GVariantType_listautoptr>

typealias GVariantType_listautoptr = CPointer<GList>

typealias GVariantType_slistautoptrVar = CPointerVarOf<GVariantType_slistautoptr>

typealias GVariantType_slistautoptr = CPointer<GSList>

typealias GVariantType_queueautoptrVar = CPointerVarOf<GVariantType_queueautoptr>

typealias GVariantType_queueautoptr = CPointer<GQueue>

typealias GRefString_autoptrVar = CPointerVarOf<GRefString_autoptr>

typealias GRefString_autoptr = CPointer<GRefStringVar>

typealias GRefString_listautoptrVar = CPointerVarOf<GRefString_listautoptr>

typealias GRefString_listautoptr = CPointer<GList>

typealias GRefString_slistautoptrVar = CPointerVarOf<GRefString_slistautoptr>

typealias GRefString_slistautoptr = CPointer<GSList>

typealias GRefString_queueautoptrVar = CPointerVarOf<GRefString_queueautoptr>

typealias GRefString_queueautoptr = CPointer<GQueue>

typealias GTypeVar = ULongVarOf<GType>

typealias GType = gsize

typealias GValue = _GValue

typealias GTypeCValue = _GTypeCValue

typealias GTypePlugin = _GTypePlugin

typealias GTypeClass = _GTypeClass

typealias GTypeInterface = _GTypeInterface

typealias GTypeInstance = _GTypeInstance

typealias GBaseInitFuncVar = CPointerVarOf<GBaseInitFunc>

typealias GBaseInitFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GBaseFinalizeFuncVar = CPointerVarOf<GBaseFinalizeFunc>

typealias GBaseFinalizeFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GClassInitFuncVar = CPointerVarOf<GClassInitFunc>

typealias GClassInitFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GClassFinalizeFuncVar = CPointerVarOf<GClassFinalizeFunc>

typealias GClassFinalizeFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GInstanceInitFuncVar = CPointerVarOf<GInstanceInitFunc>

typealias GInstanceInitFunc = CPointer<CFunction<(CPointer<GTypeInstance>?, gpointer?) -> Unit>>

typealias GTypeValueTable = _GTypeValueTable

typealias GTypeInfo = _GTypeInfo

typealias GTypeFundamentalInfo = _GTypeFundamentalInfo

typealias GInterfaceInitFuncVar = CPointerVarOf<GInterfaceInitFunc>

typealias GInterfaceInitFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GInterfaceFinalizeFuncVar = CPointerVarOf<GInterfaceFinalizeFunc>

typealias GInterfaceFinalizeFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GInterfaceInfo = _GInterfaceInfo

typealias GTypeQuery = _GTypeQuery

typealias GTypeClassCacheFuncVar = CPointerVarOf<GTypeClassCacheFunc>

typealias GTypeClassCacheFunc = CPointer<CFunction<(gpointer?, CPointer<GTypeClass>?) -> gboolean>>

typealias GTypeInterfaceCheckFuncVar = CPointerVarOf<GTypeInterfaceCheckFunc>

typealias GTypeInterfaceCheckFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GValueTransformVar = CPointerVarOf<GValueTransform>

typealias GValueTransform = CPointer<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>

typealias GParamSpec = _GParamSpec

typealias GParamSpecClass = _GParamSpecClass

typealias GParameter = _GParameter

typealias GParamSpecPool = _GParamSpecPool

typealias GParamSpecTypeInfo = _GParamSpecTypeInfo

typealias GClosure = _GClosure

typealias GClosureNotifyVar = CPointerVarOf<GClosureNotify>

typealias GClosureNotify = CPointer<CFunction<(gpointer?, CPointer<GClosure>?) -> Unit>>

typealias GClosureNotifyData = _GClosureNotifyData

typealias GCallbackVar = CPointerVarOf<GCallback>

typealias GCallback = CPointer<CFunction<() -> Unit>>

typealias GClosureMarshalVar = CPointerVarOf<GClosureMarshal>

typealias GClosureMarshal = CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>

typealias GVaClosureMarshalVar = CPointerVarOf<GVaClosureMarshal>

typealias GVaClosureMarshal = CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, gpointer?, va_list?, gpointer?, Int, CPointer<GTypeVar>?) -> Unit>>

typealias GCClosure = _GCClosure

typealias GSignalQuery = _GSignalQuery

typealias GSignalInvocationHint = _GSignalInvocationHint

typealias GSignalCMarshallerVar = CPointerVarOf<GSignalCMarshaller>

typealias GSignalCMarshaller = GClosureMarshal

typealias GSignalCVaMarshallerVar = CPointerVarOf<GSignalCVaMarshaller>

typealias GSignalCVaMarshaller = GVaClosureMarshal

typealias GSignalEmissionHookVar = CPointerVarOf<GSignalEmissionHook>

typealias GSignalEmissionHook = CPointer<CFunction<(CPointer<GSignalInvocationHint>?, guint, CPointer<GValue>?, gpointer?) -> gboolean>>

typealias GSignalAccumulatorVar = CPointerVarOf<GSignalAccumulator>

typealias GSignalAccumulator = CPointer<CFunction<(CPointer<GSignalInvocationHint>?, CPointer<GValue>?, CPointer<GValue>?, gpointer?) -> gboolean>>

typealias GBoxedCopyFuncVar = CPointerVarOf<GBoxedCopyFunc>

typealias GBoxedCopyFunc = CPointer<CFunction<(gpointer?) -> gpointer?>>

typealias GBoxedFreeFuncVar = CPointerVarOf<GBoxedFreeFunc>

typealias GBoxedFreeFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GObject = _GObject

typealias GObjectConstructParam = _GObjectConstructParam

typealias GObjectClass = _GObjectClass

typealias GInitiallyUnowned = _GObject

typealias GInitiallyUnownedClass = _GObjectClass

typealias GObjectGetPropertyFuncVar = CPointerVarOf<GObjectGetPropertyFunc>

typealias GObjectGetPropertyFunc = CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>

typealias GObjectSetPropertyFuncVar = CPointerVarOf<GObjectSetPropertyFunc>

typealias GObjectSetPropertyFunc = CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>

typealias GObjectFinalizeFuncVar = CPointerVarOf<GObjectFinalizeFunc>

typealias GObjectFinalizeFunc = CPointer<CFunction<(CPointer<GObject>?) -> Unit>>

typealias GWeakNotifyVar = CPointerVarOf<GWeakNotify>

typealias GWeakNotify = CPointer<CFunction<(gpointer?, CPointer<GObject>?) -> Unit>>

typealias GToggleNotifyVar = CPointerVarOf<GToggleNotify>

typealias GToggleNotify = CPointer<CFunction<(gpointer?, CPointer<GObject>?, gboolean) -> Unit>>

typealias GBinding = _GBinding

typealias GBindingTransformFuncVar = CPointerVarOf<GBindingTransformFunc>

typealias GBindingTransformFunc = CPointer<CFunction<(CPointer<GBinding>?, CPointer<GValue>?, CPointer<GValue>?, gpointer?) -> gboolean>>

typealias GEnumValue = _GEnumValue

typealias GEnumClass = _GEnumClass

typealias GFlagsValue = _GFlagsValue

typealias GFlagsClass = _GFlagsClass

typealias GParamSpecChar = _GParamSpecChar

typealias GParamSpecUChar = _GParamSpecUChar

typealias GParamSpecBoolean = _GParamSpecBoolean

typealias GParamSpecInt = _GParamSpecInt

typealias GParamSpecUInt = _GParamSpecUInt

typealias GParamSpecLong = _GParamSpecLong

typealias GParamSpecULong = _GParamSpecULong

typealias GParamSpecInt64 = _GParamSpecInt64

typealias GParamSpecUInt64 = _GParamSpecUInt64

typealias GParamSpecUnichar = _GParamSpecUnichar

typealias GParamSpecEnum = _GParamSpecEnum

typealias GParamSpecFlags = _GParamSpecFlags

typealias GParamSpecFloat = _GParamSpecFloat

typealias GParamSpecDouble = _GParamSpecDouble

typealias GParamSpecString = _GParamSpecString

typealias GParamSpecParam = _GParamSpecParam

typealias GParamSpecBoxed = _GParamSpecBoxed

typealias GParamSpecPointer = _GParamSpecPointer

typealias GParamSpecValueArray = _GParamSpecValueArray

typealias GParamSpecObject = _GParamSpecObject

typealias GParamSpecOverride = _GParamSpecOverride

typealias GParamSpecGType = _GParamSpecGType

typealias GParamSpecVariant = _GParamSpecVariant

typealias GTypeModule = _GTypeModule

typealias GTypeModuleClass = _GTypeModuleClass

typealias GTypeModule_autoptrVar = CPointerVarOf<GTypeModule_autoptr>

typealias GTypeModule_autoptr = CPointer<GTypeModule>

typealias GTypeModule_listautoptrVar = CPointerVarOf<GTypeModule_listautoptr>

typealias GTypeModule_listautoptr = CPointer<GList>

typealias GTypeModule_slistautoptrVar = CPointerVarOf<GTypeModule_slistautoptr>

typealias GTypeModule_slistautoptr = CPointer<GSList>

typealias GTypeModule_queueautoptrVar = CPointerVarOf<GTypeModule_queueautoptr>

typealias GTypeModule_queueautoptr = CPointer<GQueue>

typealias GTypePluginUseVar = CPointerVarOf<GTypePluginUse>

typealias GTypePluginUse = CPointer<CFunction<(CPointer<GTypePlugin>?) -> Unit>>

typealias GTypePluginUnuseVar = CPointerVarOf<GTypePluginUnuse>

typealias GTypePluginUnuse = CPointer<CFunction<(CPointer<GTypePlugin>?) -> Unit>>

typealias GTypePluginCompleteTypeInfoVar = CPointerVarOf<GTypePluginCompleteTypeInfo>

typealias GTypePluginCompleteTypeInfo = CPointer<CFunction<(CPointer<GTypePlugin>?, GType, CPointer<GTypeInfo>?, CPointer<GTypeValueTable>?) -> Unit>>

typealias GTypePluginCompleteInterfaceInfoVar = CPointerVarOf<GTypePluginCompleteInterfaceInfo>

typealias GTypePluginCompleteInterfaceInfo = CPointer<CFunction<(CPointer<GTypePlugin>?, GType, GType, CPointer<GInterfaceInfo>?) -> Unit>>

typealias GTypePluginClass = _GTypePluginClass

typealias GValueArray = _GValueArray

typealias gchararrayVar = CPointerVarOf<gchararray>

typealias gchararray = CPointer<gcharVar>

typealias GClosure_autoptrVar = CPointerVarOf<GClosure_autoptr>

typealias GClosure_autoptr = CPointer<GClosure>

typealias GClosure_listautoptrVar = CPointerVarOf<GClosure_listautoptr>

typealias GClosure_listautoptr = CPointer<GList>

typealias GClosure_slistautoptrVar = CPointerVarOf<GClosure_slistautoptr>

typealias GClosure_slistautoptr = CPointer<GSList>

typealias GClosure_queueautoptrVar = CPointerVarOf<GClosure_queueautoptr>

typealias GClosure_queueautoptr = CPointer<GQueue>

typealias GEnumClass_autoptrVar = CPointerVarOf<GEnumClass_autoptr>

typealias GEnumClass_autoptr = CPointer<GEnumClass>

typealias GEnumClass_listautoptrVar = CPointerVarOf<GEnumClass_listautoptr>

typealias GEnumClass_listautoptr = CPointer<GList>

typealias GEnumClass_slistautoptrVar = CPointerVarOf<GEnumClass_slistautoptr>

typealias GEnumClass_slistautoptr = CPointer<GSList>

typealias GEnumClass_queueautoptrVar = CPointerVarOf<GEnumClass_queueautoptr>

typealias GEnumClass_queueautoptr = CPointer<GQueue>

typealias GFlagsClass_autoptrVar = CPointerVarOf<GFlagsClass_autoptr>

typealias GFlagsClass_autoptr = CPointer<GFlagsClass>

typealias GFlagsClass_listautoptrVar = CPointerVarOf<GFlagsClass_listautoptr>

typealias GFlagsClass_listautoptr = CPointer<GList>

typealias GFlagsClass_slistautoptrVar = CPointerVarOf<GFlagsClass_slistautoptr>

typealias GFlagsClass_slistautoptr = CPointer<GSList>

typealias GFlagsClass_queueautoptrVar = CPointerVarOf<GFlagsClass_queueautoptr>

typealias GFlagsClass_queueautoptr = CPointer<GQueue>

typealias GObject_autoptrVar = CPointerVarOf<GObject_autoptr>

typealias GObject_autoptr = CPointer<GObject>

typealias GObject_listautoptrVar = CPointerVarOf<GObject_listautoptr>

typealias GObject_listautoptr = CPointer<GList>

typealias GObject_slistautoptrVar = CPointerVarOf<GObject_slistautoptr>

typealias GObject_slistautoptr = CPointer<GSList>

typealias GObject_queueautoptrVar = CPointerVarOf<GObject_queueautoptr>

typealias GObject_queueautoptr = CPointer<GQueue>

typealias GInitiallyUnowned_autoptrVar = CPointerVarOf<GInitiallyUnowned_autoptr>

typealias GInitiallyUnowned_autoptr = CPointer<GInitiallyUnowned>

typealias GInitiallyUnowned_listautoptrVar = CPointerVarOf<GInitiallyUnowned_listautoptr>

typealias GInitiallyUnowned_listautoptr = CPointer<GList>

typealias GInitiallyUnowned_slistautoptrVar = CPointerVarOf<GInitiallyUnowned_slistautoptr>

typealias GInitiallyUnowned_slistautoptr = CPointer<GSList>

typealias GInitiallyUnowned_queueautoptrVar = CPointerVarOf<GInitiallyUnowned_queueautoptr>

typealias GInitiallyUnowned_queueautoptr = CPointer<GQueue>

typealias GParamSpec_autoptrVar = CPointerVarOf<GParamSpec_autoptr>

typealias GParamSpec_autoptr = CPointer<GParamSpec>

typealias GParamSpec_listautoptrVar = CPointerVarOf<GParamSpec_listautoptr>

typealias GParamSpec_listautoptr = CPointer<GList>

typealias GParamSpec_slistautoptrVar = CPointerVarOf<GParamSpec_slistautoptr>

typealias GParamSpec_slistautoptr = CPointer<GSList>

typealias GParamSpec_queueautoptrVar = CPointerVarOf<GParamSpec_queueautoptr>

typealias GParamSpec_queueautoptr = CPointer<GQueue>

typealias GTypeClass_autoptrVar = CPointerVarOf<GTypeClass_autoptr>

typealias GTypeClass_autoptr = CPointer<GTypeClass>

typealias GTypeClass_listautoptrVar = CPointerVarOf<GTypeClass_listautoptr>

typealias GTypeClass_listautoptr = CPointer<GList>

typealias GTypeClass_slistautoptrVar = CPointerVarOf<GTypeClass_slistautoptr>

typealias GTypeClass_slistautoptr = CPointer<GSList>

typealias GTypeClass_queueautoptrVar = CPointerVarOf<GTypeClass_queueautoptr>

typealias GTypeClass_queueautoptr = CPointer<GQueue>

typealias GTlsPasswordFlagsVar = UIntVarOf<GTlsPasswordFlags>

typealias GTlsPasswordFlags = _GTlsPasswordFlags

typealias GAppLaunchContextPrivate = _GAppLaunchContextPrivate

typealias GAppLaunchContext = _GAppLaunchContext

typealias GAppInfo = _GAppInfo

typealias GAsyncResult = _GAsyncResult

typealias GAsyncInitable = _GAsyncInitable

typealias GInputStreamPrivate = _GInputStreamPrivate

typealias GInputStream = _GInputStream

typealias GFilterInputStream = _GFilterInputStream

typealias GBufferedInputStreamPrivate = _GBufferedInputStreamPrivate

typealias GBufferedInputStream = _GBufferedInputStream

typealias GOutputStreamPrivate = _GOutputStreamPrivate

typealias GOutputStream = _GOutputStream

typealias GFilterOutputStream = _GFilterOutputStream

typealias GBufferedOutputStreamPrivate = _GBufferedOutputStreamPrivate

typealias GBufferedOutputStream = _GBufferedOutputStream

typealias GCancellablePrivate = _GCancellablePrivate

typealias GCancellable = _GCancellable

typealias GCharsetConverter = _GCharsetConverter

typealias GConverter = _GConverter

typealias GConverterInputStreamPrivate = _GConverterInputStreamPrivate

typealias GConverterInputStream = _GConverterInputStream

typealias GConverterOutputStreamPrivate = _GConverterOutputStreamPrivate

typealias GConverterOutputStream = _GConverterOutputStream

typealias GDatagramBased = _GDatagramBased

typealias GDataInputStreamPrivate = _GDataInputStreamPrivate

typealias GDataInputStream = _GDataInputStream

typealias GSimplePermission = _GSimplePermission

typealias GZlibCompressor = _GZlibCompressor

typealias GZlibDecompressor = _GZlibDecompressor

typealias GSimpleActionGroupPrivate = _GSimpleActionGroupPrivate

typealias GSimpleActionGroup = _GSimpleActionGroup

typealias GRemoteActionGroup = _GRemoteActionGroup

typealias GDBusActionGroup = _GDBusActionGroup

typealias GActionMap = _GActionMap

typealias GActionGroup = _GActionGroup

typealias GPropertyAction = _GPropertyAction

typealias GSimpleAction = _GSimpleAction

typealias GAction = _GAction

typealias GApplicationPrivate = _GApplicationPrivate

typealias GApplication = _GApplication

typealias GApplicationCommandLinePrivate = _GApplicationCommandLinePrivate

typealias GApplicationCommandLine = _GApplicationCommandLine

typealias GSettingsBackend = _GSettingsBackend

typealias GSettingsPrivate = _GSettingsPrivate

typealias GSettings = _GSettings

typealias GPermissionPrivate = _GPermissionPrivate

typealias GPermission = _GPermission

typealias GMenuModelPrivate = _GMenuModelPrivate

typealias GMenuModel = _GMenuModel

typealias GNotification = _GNotification

typealias GDrive = _GDrive

typealias GFileEnumeratorPrivate = _GFileEnumeratorPrivate

typealias GFileEnumerator = _GFileEnumerator

typealias GFileMonitorPrivate = _GFileMonitorPrivate

typealias GFileMonitor = _GFileMonitor

typealias GFile = _GFile

typealias GFileInfo = _GFileInfo

typealias GFileAttributeMatcher = _GFileAttributeMatcher

typealias GFileAttributeInfo = _GFileAttributeInfo

typealias GFileAttributeInfoList = _GFileAttributeInfoList

typealias GFileDescriptorBased = _GFileDescriptorBased

typealias GFileInputStreamPrivate = _GFileInputStreamPrivate

typealias GFileInputStream = _GFileInputStream

typealias GFileOutputStreamPrivate = _GFileOutputStreamPrivate

typealias GFileOutputStream = _GFileOutputStream

typealias GIOStreamPrivate = _GIOStreamPrivate

typealias GIOStream = _GIOStream

typealias GFileIOStreamPrivate = _GFileIOStreamPrivate

typealias GFileIOStream = _GFileIOStream

typealias GFileIcon = _GFileIcon

typealias GFilenameCompleter = _GFilenameCompleter

typealias GIcon = _GIcon

typealias GInetAddressPrivate = _GInetAddressPrivate

typealias GInetAddress = _GInetAddress

typealias GInetAddressMaskPrivate = _GInetAddressMaskPrivate

typealias GInetAddressMask = _GInetAddressMask

typealias GSocketAddress = _GSocketAddress

typealias GInetSocketAddressPrivate = _GInetSocketAddressPrivate

typealias GInetSocketAddress = _GInetSocketAddress

typealias GNativeSocketAddressPrivate = _GNativeSocketAddressPrivate

typealias GNativeSocketAddress = _GNativeSocketAddress

typealias GInitable = _GInitable

typealias GIOModule = _GIOModule

typealias GIOExtensionPoint = _GIOExtensionPoint

typealias GIOExtension = _GIOExtension

typealias GIOSchedulerJob = _GIOSchedulerJob

typealias GIOStreamAdapter = _GIOStreamAdapter

typealias GLoadableIcon = _GLoadableIcon

typealias GBytesIcon = _GBytesIcon

typealias GMemoryInputStreamPrivate = _GMemoryInputStreamPrivate

typealias GMemoryInputStream = _GMemoryInputStream

typealias GMemoryOutputStreamPrivate = _GMemoryOutputStreamPrivate

typealias GMemoryOutputStream = _GMemoryOutputStream

typealias GMount = _GMount

typealias GMountOperationPrivate = _GMountOperationPrivate

typealias GMountOperation = _GMountOperation

typealias GNetworkAddressPrivate = _GNetworkAddressPrivate

typealias GNetworkAddress = _GNetworkAddress

typealias GNetworkMonitor = _GNetworkMonitor

typealias GNetworkServicePrivate = _GNetworkServicePrivate

typealias GNetworkService = _GNetworkService

typealias GSimpleIOStream = _GSimpleIOStream

typealias GPollableInputStream = _GPollableInputStream

typealias GPollableOutputStream = _GPollableOutputStream

typealias GResolverPrivate = _GResolverPrivate

typealias GResolver = _GResolver

typealias GResource = _GResource

typealias GSeekable = _GSeekable

typealias GSimpleAsyncResult = _GSimpleAsyncResult

typealias GSocketPrivate = _GSocketPrivate

typealias GSocket = _GSocket

typealias GSocketControlMessagePrivate = _GSocketControlMessagePrivate

typealias GSocketControlMessage = _GSocketControlMessage

typealias GSocketClientPrivate = _GSocketClientPrivate

typealias GSocketClient = _GSocketClient

typealias GSocketConnectionPrivate = _GSocketConnectionPrivate

typealias GSocketConnection = _GSocketConnection

typealias GSocketListenerPrivate = _GSocketListenerPrivate

typealias GSocketListener = _GSocketListener

typealias GSocketServicePrivate = _GSocketServicePrivate

typealias GSocketService = _GSocketService

typealias GSocketAddressEnumerator = _GSocketAddressEnumerator

typealias GSocketConnectable = _GSocketConnectable

typealias GSrvTarget = _GSrvTarget

typealias GTask = _GTask

typealias GTcpConnectionPrivate = _GTcpConnectionPrivate

typealias GTcpConnection = _GTcpConnection

typealias GTcpWrapperConnectionPrivate = _GTcpWrapperConnectionPrivate

typealias GTcpWrapperConnection = _GTcpWrapperConnection

typealias GThreadedSocketServicePrivate = _GThreadedSocketServicePrivate

typealias GThreadedSocketService = _GThreadedSocketService

typealias GDtlsConnection = _GDtlsConnection

typealias GDtlsClientConnection = _GDtlsClientConnection

typealias GDtlsServerConnection = _GDtlsServerConnection

typealias GThemedIcon = _GThemedIcon

typealias GTlsCertificatePrivate = _GTlsCertificatePrivate

typealias GTlsCertificate = _GTlsCertificate

typealias GTlsClientConnection = _GTlsClientConnection

typealias GTlsConnectionPrivate = _GTlsConnectionPrivate

typealias GTlsConnection = _GTlsConnection

typealias GTlsDatabasePrivate = _GTlsDatabasePrivate

typealias GTlsDatabase = _GTlsDatabase

typealias GTlsFileDatabase = _GTlsFileDatabase

typealias GTlsInteractionPrivate = _GTlsInteractionPrivate

typealias GTlsInteraction = _GTlsInteraction

typealias GTlsPasswordPrivate = _GTlsPasswordPrivate

typealias GTlsPassword = _GTlsPassword

typealias GTlsServerConnection = _GTlsServerConnection

typealias GVfs = _GVfs

typealias GProxyResolver = _GProxyResolver

typealias GProxy = _GProxy

typealias GProxyAddressPrivate = _GProxyAddressPrivate

typealias GProxyAddress = _GProxyAddress

typealias GProxyAddressEnumeratorPrivate = _GProxyAddressEnumeratorPrivate

typealias GProxyAddressEnumerator = _GProxyAddressEnumerator

typealias GVolume = _GVolume

typealias GVolumeMonitor = _GVolumeMonitor

typealias GAsyncReadyCallbackVar = CPointerVarOf<GAsyncReadyCallback>

typealias GAsyncReadyCallback = CPointer<CFunction<(CPointer<GObject>?, CPointer<GAsyncResult>?, gpointer?) -> Unit>>

typealias GFileProgressCallbackVar = CPointerVarOf<GFileProgressCallback>

typealias GFileProgressCallback = CPointer<CFunction<(goffset, goffset, gpointer?) -> Unit>>

typealias GFileReadMoreCallbackVar = CPointerVarOf<GFileReadMoreCallback>

typealias GFileReadMoreCallback = CPointer<CFunction<(CPointer<ByteVar>?, goffset, gpointer?) -> gboolean>>

typealias GFileMeasureProgressCallbackVar = CPointerVarOf<GFileMeasureProgressCallback>

typealias GFileMeasureProgressCallback = CPointer<CFunction<(gboolean, guint64, guint64, guint64, gpointer?) -> Unit>>

typealias GIOSchedulerJobFuncVar = CPointerVarOf<GIOSchedulerJobFunc>

typealias GIOSchedulerJobFunc = CPointer<CFunction<(CPointer<GIOSchedulerJob>?, CPointer<GCancellable>?, gpointer?) -> gboolean>>

typealias GSimpleAsyncThreadFuncVar = CPointerVarOf<GSimpleAsyncThreadFunc>

typealias GSimpleAsyncThreadFunc = CPointer<CFunction<(CPointer<GSimpleAsyncResult>?, CPointer<GObject>?, CPointer<GCancellable>?) -> Unit>>

typealias GSocketSourceFuncVar = CPointerVarOf<GSocketSourceFunc>

typealias GSocketSourceFunc = CPointer<CFunction<(CPointer<GSocket>?, GIOCondition, gpointer?) -> gboolean>>

typealias GDatagramBasedSourceFuncVar = CPointerVarOf<GDatagramBasedSourceFunc>

typealias GDatagramBasedSourceFunc = CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gpointer?) -> gboolean>>

typealias GInputVector = _GInputVector

typealias GInputMessage = _GInputMessage

typealias GOutputVector = _GOutputVector

typealias GOutputMessage = _GOutputMessage

typealias GCredentials = _GCredentials

typealias GUnixCredentialsMessage = _GUnixCredentialsMessage

typealias GUnixFDList = _GUnixFDList

typealias GDBusMessage = _GDBusMessage

typealias GDBusConnection = _GDBusConnection

typealias GDBusProxyPrivate = _GDBusProxyPrivate

typealias GDBusProxy = _GDBusProxy

typealias GDBusMethodInvocation = _GDBusMethodInvocation

typealias GDBusServer = _GDBusServer

typealias GDBusAuthObserver = _GDBusAuthObserver

typealias GDBusErrorEntry = _GDBusErrorEntry

typealias GDBusInterfaceMethodCallFuncVar = CPointerVarOf<GDBusInterfaceMethodCallFunc>

typealias GDBusInterfaceMethodCallFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GDBusMethodInvocation>?, gpointer?) -> Unit>>

typealias GDBusInterfaceGetPropertyFuncVar = CPointerVarOf<GDBusInterfaceGetPropertyFunc>

typealias GDBusInterfaceGetPropertyFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?, gpointer?) -> CPointer<GVariant>?>>

typealias GDBusInterfaceSetPropertyFuncVar = CPointerVarOf<GDBusInterfaceSetPropertyFunc>

typealias GDBusInterfaceSetPropertyFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<CPointerVar<GError>>?, gpointer?) -> gboolean>>

typealias GDBusInterfaceVTable = _GDBusInterfaceVTable

typealias GDBusSubtreeEnumerateFuncVar = CPointerVarOf<GDBusSubtreeEnumerateFunc>

typealias GDBusSubtreeEnumerateFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> CPointer<CPointerVar<gcharVar>>?>>

typealias GDBusAnnotationInfo = _GDBusAnnotationInfo

typealias GDBusArgInfo = _GDBusArgInfo

typealias GDBusMethodInfo = _GDBusMethodInfo

typealias GDBusSignalInfo = _GDBusSignalInfo

typealias GDBusPropertyInfo = _GDBusPropertyInfo

typealias GDBusInterfaceInfo = _GDBusInterfaceInfo

typealias GDBusSubtreeIntrospectFuncVar = CPointerVarOf<GDBusSubtreeIntrospectFunc>

typealias GDBusSubtreeIntrospectFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> CPointer<CPointerVar<GDBusInterfaceInfo>>?>>

typealias GDBusSubtreeDispatchFuncVar = CPointerVarOf<GDBusSubtreeDispatchFunc>

typealias GDBusSubtreeDispatchFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gpointerVar>?, gpointer?) -> CPointer<GDBusInterfaceVTable>?>>

typealias GDBusSubtreeVTable = _GDBusSubtreeVTable

typealias GDBusNodeInfo = _GDBusNodeInfo

typealias GCancellableSourceFuncVar = CPointerVarOf<GCancellableSourceFunc>

typealias GCancellableSourceFunc = CPointer<CFunction<(CPointer<GCancellable>?, gpointer?) -> gboolean>>

typealias GPollableSourceFuncVar = CPointerVarOf<GPollableSourceFunc>

typealias GPollableSourceFunc = CPointer<CFunction<(CPointer<GObject>?, gpointer?) -> gboolean>>

typealias GDBusInterface = _GDBusInterface

typealias GDBusInterfaceSkeletonPrivate = _GDBusInterfaceSkeletonPrivate

typealias GDBusInterfaceSkeleton = _GDBusInterfaceSkeleton

typealias GDBusObject = _GDBusObject

typealias GDBusObjectSkeletonPrivate = _GDBusObjectSkeletonPrivate

typealias GDBusObjectSkeleton = _GDBusObjectSkeleton

typealias GDBusObjectProxyPrivate = _GDBusObjectProxyPrivate

typealias GDBusObjectProxy = _GDBusObjectProxy

typealias GDBusObjectManager = _GDBusObjectManager

typealias GDBusObjectManagerClientPrivate = _GDBusObjectManagerClientPrivate

typealias GDBusObjectManagerClient = _GDBusObjectManagerClient

typealias GDBusObjectManagerServerPrivate = _GDBusObjectManagerServerPrivate

typealias GDBusObjectManagerServer = _GDBusObjectManagerServer

typealias GDBusProxyTypeFuncVar = CPointerVarOf<GDBusProxyTypeFunc>

typealias GDBusProxyTypeFunc = CPointer<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> GType>>

typealias GTestDBus = _GTestDBus

typealias GSubprocess = _GSubprocess

typealias GSubprocessLauncher = _GSubprocessLauncher

typealias GActionInterface = _GActionInterface

typealias GActionGroupInterface = _GActionGroupInterface

typealias GActionMapInterface = _GActionMapInterface

typealias GActionEntry = _GActionEntry

typealias GAppLaunchContextClass = _GAppLaunchContextClass

typealias GAppInfoIface = _GAppInfoIface

typealias GAppInfoMonitor = _GAppInfoMonitor

typealias GApplicationClass = _GApplicationClass

typealias GApplicationCommandLineClass = _GApplicationCommandLineClass

typealias GInitableIface = _GInitableIface

typealias GAsyncInitableIface = _GAsyncInitableIface

typealias GAsyncResultIface = _GAsyncResultIface

typealias GInputStreamClass = _GInputStreamClass

typealias GFilterInputStreamClass = _GFilterInputStreamClass

typealias GBufferedInputStreamClass = _GBufferedInputStreamClass

typealias GOutputStreamClass = _GOutputStreamClass

typealias GFilterOutputStreamClass = _GFilterOutputStreamClass

typealias GBufferedOutputStreamClass = _GBufferedOutputStreamClass

typealias GCancellableClass = _GCancellableClass

typealias GConverterIface = _GConverterIface

typealias GCharsetConverterClass = _GCharsetConverterClass

typealias GConverterInputStreamClass = _GConverterInputStreamClass

typealias GConverterOutputStreamClass = _GConverterOutputStreamClass

typealias GCredentialsClass = _GCredentialsClass

typealias GDatagramBasedInterface = _GDatagramBasedInterface

typealias GDataInputStreamClass = _GDataInputStreamClass

typealias GDataOutputStreamPrivate = _GDataOutputStreamPrivate

typealias GDataOutputStream = _GDataOutputStream

typealias GDataOutputStreamClass = _GDataOutputStreamClass

typealias GDBusSignalCallbackVar = CPointerVarOf<GDBusSignalCallback>

typealias GDBusSignalCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?, gpointer?) -> Unit>>

typealias GDBusMessageFilterFunctionVar = CPointerVarOf<GDBusMessageFilterFunction>

typealias GDBusMessageFilterFunction = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<GDBusMessage>?, gboolean, gpointer?) -> CPointer<GDBusMessage>?>>

typealias GBusAcquiredCallbackVar = CPointerVarOf<GBusAcquiredCallback>

typealias GBusAcquiredCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameAcquiredCallbackVar = CPointerVarOf<GBusNameAcquiredCallback>

typealias GBusNameAcquiredCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameLostCallbackVar = CPointerVarOf<GBusNameLostCallback>

typealias GBusNameLostCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameAppearedCallbackVar = CPointerVarOf<GBusNameAppearedCallback>

typealias GBusNameAppearedCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameVanishedCallbackVar = CPointerVarOf<GBusNameVanishedCallback>

typealias GBusNameVanishedCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GDBusProxyClass = _GDBusProxyClass

typealias GDriveIface = _GDriveIface

typealias GDtlsConnectionInterface = _GDtlsConnectionInterface

typealias GDtlsClientConnectionInterface = _GDtlsClientConnectionInterface

typealias GDtlsServerConnectionInterface = _GDtlsServerConnectionInterface

typealias GIconIface = _GIconIface

typealias GEmblem = _GEmblem

typealias GEmblemClass = _GEmblemClass

typealias GEmblemedIconPrivate = _GEmblemedIconPrivate

typealias GEmblemedIcon = _GEmblemedIcon

typealias GEmblemedIconClass = _GEmblemedIconClass

typealias GFileEnumeratorClass = _GFileEnumeratorClass

typealias GFileIface = _GFileIface

typealias GFileIconClass = _GFileIconClass

typealias GFileInfoClass = _GFileInfoClass

typealias GFileInputStreamClass = _GFileInputStreamClass

typealias GIOStreamClass = _GIOStreamClass

typealias GFileIOStreamClass = _GFileIOStreamClass

typealias GFileMonitorClass = _GFileMonitorClass

typealias GFilenameCompleterClass = _GFilenameCompleterClass

typealias GFileOutputStreamClass = _GFileOutputStreamClass

typealias GInetAddressClass = _GInetAddressClass

typealias GInetAddressMaskClass = _GInetAddressMaskClass

typealias GSocketAddressClass = _GSocketAddressClass

typealias GInetSocketAddressClass = _GInetSocketAddressClass

typealias GModule = _GModule

typealias GModuleCheckInitVar = CPointerVarOf<GModuleCheckInit>

typealias GModuleCheckInit = CPointer<CFunction<(CPointer<GModule>?) -> CPointer<gcharVar>?>>

typealias GModuleUnloadVar = CPointerVarOf<GModuleUnload>

typealias GModuleUnload = CPointer<CFunction<(CPointer<GModule>?) -> Unit>>

typealias GIOModuleScope = _GIOModuleScope

typealias GIOModuleClass = _GIOModuleClass

typealias GLoadableIconIface = _GLoadableIconIface

typealias GMemoryInputStreamClass = _GMemoryInputStreamClass

typealias GMemoryOutputStreamClass = _GMemoryOutputStreamClass

typealias GReallocFuncVar = CPointerVarOf<GReallocFunc>

typealias GReallocFunc = CPointer<CFunction<(gpointer?, gsize) -> gpointer?>>

typealias GMountIface = _GMountIface

typealias GMountOperationClass = _GMountOperationClass

typealias GNativeSocketAddressClass = _GNativeSocketAddressClass

typealias GVolumeMonitorClass = _GVolumeMonitorClass

typealias GNativeVolumeMonitor = _GNativeVolumeMonitor

typealias GNativeVolumeMonitorClass = _GNativeVolumeMonitorClass

typealias GNetworkAddressClass = _GNetworkAddressClass

typealias GNetworkMonitorInterface = _GNetworkMonitorInterface

typealias GNetworkServiceClass = _GNetworkServiceClass

typealias GPermissionClass = _GPermissionClass

typealias GPollableInputStreamInterface = _GPollableInputStreamInterface

typealias GPollableOutputStreamInterface = _GPollableOutputStreamInterface

typealias GProxyInterface = _GProxyInterface

typealias GProxyAddressClass = _GProxyAddressClass

typealias GSocketAddressEnumeratorClass = _GSocketAddressEnumeratorClass

typealias GProxyAddressEnumeratorClass = _GProxyAddressEnumeratorClass

typealias GProxyResolverInterface = _GProxyResolverInterface

typealias GResolverClass = _GResolverClass

typealias GStaticResource = _GStaticResource

typealias GSeekableIface = _GSeekableIface

typealias GSettingsSchemaSource = _GSettingsSchemaSource

typealias GSettingsSchema = _GSettingsSchema

typealias GSettingsSchemaKey = _GSettingsSchemaKey

typealias GSettingsClass = _GSettingsClass

typealias GSettingsBindSetMappingVar = CPointerVarOf<GSettingsBindSetMapping>

typealias GSettingsBindSetMapping = CPointer<CFunction<(CPointer<GValue>?, CPointer<GVariantType>?, gpointer?) -> CPointer<GVariant>?>>

typealias GSettingsBindGetMappingVar = CPointerVarOf<GSettingsBindGetMapping>

typealias GSettingsBindGetMapping = CPointer<CFunction<(CPointer<GValue>?, CPointer<GVariant>?, gpointer?) -> gboolean>>

typealias GSettingsGetMappingVar = CPointerVarOf<GSettingsGetMapping>

typealias GSettingsGetMapping = CPointer<CFunction<(CPointer<GVariant>?, CPointer<gpointerVar>?, gpointer?) -> gboolean>>

typealias GSimpleActionGroupClass = _GSimpleActionGroupClass

typealias GSimpleAsyncResultClass = _GSimpleAsyncResultClass

typealias GSocketClientClass = _GSocketClientClass

typealias GSocketConnectableIface = _GSocketConnectableIface

typealias GSocketClass = _GSocketClass

typealias GSocketConnectionClass = _GSocketConnectionClass

typealias GSocketControlMessageClass = _GSocketControlMessageClass

typealias GSocketListenerClass = _GSocketListenerClass

typealias GSocketServiceClass = _GSocketServiceClass

typealias GSimpleProxyResolverPrivate = _GSimpleProxyResolverPrivate

typealias GSimpleProxyResolver = _GSimpleProxyResolver

typealias GSimpleProxyResolverClass = _GSimpleProxyResolverClass

typealias GTaskClass = _GTaskClass

typealias GTaskThreadFuncVar = CPointerVarOf<GTaskThreadFunc>

typealias GTaskThreadFunc = CPointer<CFunction<(CPointer<GTask>?, gpointer?, gpointer?, CPointer<GCancellable>?) -> Unit>>

typealias GTcpConnectionClass = _GTcpConnectionClass

typealias GTcpWrapperConnectionClass = _GTcpWrapperConnectionClass

typealias GThemedIconClass = _GThemedIconClass

typealias GThreadedSocketServiceClass = _GThreadedSocketServiceClass

typealias GTlsBackend = _GTlsBackend

typealias GTlsBackendInterface = _GTlsBackendInterface

typealias GTlsCertificateClass = _GTlsCertificateClass

typealias GTlsConnectionClass = _GTlsConnectionClass

typealias GTlsClientConnectionInterface = _GTlsClientConnectionInterface

typealias GTlsDatabaseClass = _GTlsDatabaseClass

typealias GTlsFileDatabaseInterface = _GTlsFileDatabaseInterface

typealias GTlsInteractionClass = _GTlsInteractionClass

typealias GTlsServerConnectionInterface = _GTlsServerConnectionInterface

typealias GTlsPasswordClass = _GTlsPasswordClass

typealias GVfsFileLookupFuncVar = CPointerVarOf<GVfsFileLookupFunc>

typealias GVfsFileLookupFunc = CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, gpointer?) -> CPointer<GFile>?>>

typealias GVfsClass = _GVfsClass

typealias GVolumeIface = _GVolumeIface

typealias GZlibCompressorClass = _GZlibCompressorClass

typealias GZlibDecompressorClass = _GZlibDecompressorClass

typealias GDBusInterfaceIface = _GDBusInterfaceIface

typealias GDBusInterfaceSkeletonClass = _GDBusInterfaceSkeletonClass

typealias GDBusObjectIface = _GDBusObjectIface

typealias GDBusObjectSkeletonClass = _GDBusObjectSkeletonClass

typealias GDBusObjectProxyClass = _GDBusObjectProxyClass

typealias GDBusObjectManagerIface = _GDBusObjectManagerIface

typealias GDBusObjectManagerClientClass = _GDBusObjectManagerClientClass

typealias GDBusObjectManagerServerClass = _GDBusObjectManagerServerClass

typealias GRemoteActionGroupInterface = _GRemoteActionGroupInterface

typealias GMenuAttributeIterPrivate = _GMenuAttributeIterPrivate

typealias GMenuAttributeIter = _GMenuAttributeIter

typealias GMenuLinkIterPrivate = _GMenuLinkIterPrivate

typealias GMenuLinkIter = _GMenuLinkIter

typealias GMenuModelClass = _GMenuModelClass

typealias GMenuAttributeIterClass = _GMenuAttributeIterClass

typealias GMenuLinkIterClass = _GMenuLinkIterClass

typealias GMenuItem = _GMenuItem

typealias GMenu = _GMenu

typealias GDBusMenuModel = _GDBusMenuModel

typealias GListModel = _GListModel

typealias GListModelInterface = _GListModelInterface

typealias GListModel_autoptrVar = CPointerVarOf<GListModel_autoptr>

typealias GListModel_autoptr = CPointer<GListModel>

typealias GListModel_listautoptrVar = CPointerVarOf<GListModel_listautoptr>

typealias GListModel_listautoptr = CPointer<GList>

typealias GListModel_slistautoptrVar = CPointerVarOf<GListModel_slistautoptr>

typealias GListModel_slistautoptr = CPointer<GSList>

typealias GListModel_queueautoptrVar = CPointerVarOf<GListModel_queueautoptr>

typealias GListModel_queueautoptr = CPointer<GQueue>

typealias GListStore = _GListStore

typealias GListStore_autoptrVar = CPointerVarOf<GListStore_autoptr>

typealias GListStore_autoptr = CPointer<GListStore>

typealias GListStore_listautoptrVar = CPointerVarOf<GListStore_listautoptr>

typealias GListStore_listautoptr = CPointer<GList>

typealias GListStore_slistautoptrVar = CPointerVarOf<GListStore_slistautoptr>

typealias GListStore_slistautoptr = CPointer<GSList>

typealias GListStore_queueautoptrVar = CPointerVarOf<GListStore_queueautoptr>

typealias GListStore_queueautoptr = CPointer<GQueue>

typealias GAction_autoptrVar = CPointerVarOf<GAction_autoptr>

typealias GAction_autoptr = CPointer<GAction>

typealias GAction_listautoptrVar = CPointerVarOf<GAction_listautoptr>

typealias GAction_listautoptr = CPointer<GList>

typealias GAction_slistautoptrVar = CPointerVarOf<GAction_slistautoptr>

typealias GAction_slistautoptr = CPointer<GSList>

typealias GAction_queueautoptrVar = CPointerVarOf<GAction_queueautoptr>

typealias GAction_queueautoptr = CPointer<GQueue>

typealias GActionMap_autoptrVar = CPointerVarOf<GActionMap_autoptr>

typealias GActionMap_autoptr = CPointer<GActionMap>

typealias GActionMap_listautoptrVar = CPointerVarOf<GActionMap_listautoptr>

typealias GActionMap_listautoptr = CPointer<GList>

typealias GActionMap_slistautoptrVar = CPointerVarOf<GActionMap_slistautoptr>

typealias GActionMap_slistautoptr = CPointer<GSList>

typealias GActionMap_queueautoptrVar = CPointerVarOf<GActionMap_queueautoptr>

typealias GActionMap_queueautoptr = CPointer<GQueue>

typealias GAppInfo_autoptrVar = CPointerVarOf<GAppInfo_autoptr>

typealias GAppInfo_autoptr = CPointer<GAppInfo>

typealias GAppInfo_listautoptrVar = CPointerVarOf<GAppInfo_listautoptr>

typealias GAppInfo_listautoptr = CPointer<GList>

typealias GAppInfo_slistautoptrVar = CPointerVarOf<GAppInfo_slistautoptr>

typealias GAppInfo_slistautoptr = CPointer<GSList>

typealias GAppInfo_queueautoptrVar = CPointerVarOf<GAppInfo_queueautoptr>

typealias GAppInfo_queueautoptr = CPointer<GQueue>

typealias GAppLaunchContext_autoptrVar = CPointerVarOf<GAppLaunchContext_autoptr>

typealias GAppLaunchContext_autoptr = CPointer<GAppLaunchContext>

typealias GAppLaunchContext_listautoptrVar = CPointerVarOf<GAppLaunchContext_listautoptr>

typealias GAppLaunchContext_listautoptr = CPointer<GList>

typealias GAppLaunchContext_slistautoptrVar = CPointerVarOf<GAppLaunchContext_slistautoptr>

typealias GAppLaunchContext_slistautoptr = CPointer<GSList>

typealias GAppLaunchContext_queueautoptrVar = CPointerVarOf<GAppLaunchContext_queueautoptr>

typealias GAppLaunchContext_queueautoptr = CPointer<GQueue>

typealias GAppInfoMonitor_autoptrVar = CPointerVarOf<GAppInfoMonitor_autoptr>

typealias GAppInfoMonitor_autoptr = CPointer<GAppInfoMonitor>

typealias GAppInfoMonitor_listautoptrVar = CPointerVarOf<GAppInfoMonitor_listautoptr>

typealias GAppInfoMonitor_listautoptr = CPointer<GList>

typealias GAppInfoMonitor_slistautoptrVar = CPointerVarOf<GAppInfoMonitor_slistautoptr>

typealias GAppInfoMonitor_slistautoptr = CPointer<GSList>

typealias GAppInfoMonitor_queueautoptrVar = CPointerVarOf<GAppInfoMonitor_queueautoptr>

typealias GAppInfoMonitor_queueautoptr = CPointer<GQueue>

typealias GApplicationCommandLine_autoptrVar = CPointerVarOf<GApplicationCommandLine_autoptr>

typealias GApplicationCommandLine_autoptr = CPointer<GApplicationCommandLine>

typealias GApplicationCommandLine_listautoptrVar = CPointerVarOf<GApplicationCommandLine_listautoptr>

typealias GApplicationCommandLine_listautoptr = CPointer<GList>

typealias GApplicationCommandLine_slistautoptrVar = CPointerVarOf<GApplicationCommandLine_slistautoptr>

typealias GApplicationCommandLine_slistautoptr = CPointer<GSList>

typealias GApplicationCommandLine_queueautoptrVar = CPointerVarOf<GApplicationCommandLine_queueautoptr>

typealias GApplicationCommandLine_queueautoptr = CPointer<GQueue>

typealias GApplication_autoptrVar = CPointerVarOf<GApplication_autoptr>

typealias GApplication_autoptr = CPointer<GApplication>

typealias GApplication_listautoptrVar = CPointerVarOf<GApplication_listautoptr>

typealias GApplication_listautoptr = CPointer<GList>

typealias GApplication_slistautoptrVar = CPointerVarOf<GApplication_slistautoptr>

typealias GApplication_slistautoptr = CPointer<GSList>

typealias GApplication_queueautoptrVar = CPointerVarOf<GApplication_queueautoptr>

typealias GApplication_queueautoptr = CPointer<GQueue>

typealias GAsyncInitable_autoptrVar = CPointerVarOf<GAsyncInitable_autoptr>

typealias GAsyncInitable_autoptr = CPointer<GAsyncInitable>

typealias GAsyncInitable_listautoptrVar = CPointerVarOf<GAsyncInitable_listautoptr>

typealias GAsyncInitable_listautoptr = CPointer<GList>

typealias GAsyncInitable_slistautoptrVar = CPointerVarOf<GAsyncInitable_slistautoptr>

typealias GAsyncInitable_slistautoptr = CPointer<GSList>

typealias GAsyncInitable_queueautoptrVar = CPointerVarOf<GAsyncInitable_queueautoptr>

typealias GAsyncInitable_queueautoptr = CPointer<GQueue>

typealias GAsyncResult_autoptrVar = CPointerVarOf<GAsyncResult_autoptr>

typealias GAsyncResult_autoptr = CPointer<GAsyncResult>

typealias GAsyncResult_listautoptrVar = CPointerVarOf<GAsyncResult_listautoptr>

typealias GAsyncResult_listautoptr = CPointer<GList>

typealias GAsyncResult_slistautoptrVar = CPointerVarOf<GAsyncResult_slistautoptr>

typealias GAsyncResult_slistautoptr = CPointer<GSList>

typealias GAsyncResult_queueautoptrVar = CPointerVarOf<GAsyncResult_queueautoptr>

typealias GAsyncResult_queueautoptr = CPointer<GQueue>

typealias GBufferedInputStream_autoptrVar = CPointerVarOf<GBufferedInputStream_autoptr>

typealias GBufferedInputStream_autoptr = CPointer<GBufferedInputStream>

typealias GBufferedInputStream_listautoptrVar = CPointerVarOf<GBufferedInputStream_listautoptr>

typealias GBufferedInputStream_listautoptr = CPointer<GList>

typealias GBufferedInputStream_slistautoptrVar = CPointerVarOf<GBufferedInputStream_slistautoptr>

typealias GBufferedInputStream_slistautoptr = CPointer<GSList>

typealias GBufferedInputStream_queueautoptrVar = CPointerVarOf<GBufferedInputStream_queueautoptr>

typealias GBufferedInputStream_queueautoptr = CPointer<GQueue>

typealias GBufferedOutputStream_autoptrVar = CPointerVarOf<GBufferedOutputStream_autoptr>

typealias GBufferedOutputStream_autoptr = CPointer<GBufferedOutputStream>

typealias GBufferedOutputStream_listautoptrVar = CPointerVarOf<GBufferedOutputStream_listautoptr>

typealias GBufferedOutputStream_listautoptr = CPointer<GList>

typealias GBufferedOutputStream_slistautoptrVar = CPointerVarOf<GBufferedOutputStream_slistautoptr>

typealias GBufferedOutputStream_slistautoptr = CPointer<GSList>

typealias GBufferedOutputStream_queueautoptrVar = CPointerVarOf<GBufferedOutputStream_queueautoptr>

typealias GBufferedOutputStream_queueautoptr = CPointer<GQueue>

typealias GBytesIcon_autoptrVar = CPointerVarOf<GBytesIcon_autoptr>

typealias GBytesIcon_autoptr = CPointer<GBytesIcon>

typealias GBytesIcon_listautoptrVar = CPointerVarOf<GBytesIcon_listautoptr>

typealias GBytesIcon_listautoptr = CPointer<GList>

typealias GBytesIcon_slistautoptrVar = CPointerVarOf<GBytesIcon_slistautoptr>

typealias GBytesIcon_slistautoptr = CPointer<GSList>

typealias GBytesIcon_queueautoptrVar = CPointerVarOf<GBytesIcon_queueautoptr>

typealias GBytesIcon_queueautoptr = CPointer<GQueue>

typealias GCancellable_autoptrVar = CPointerVarOf<GCancellable_autoptr>

typealias GCancellable_autoptr = CPointer<GCancellable>

typealias GCancellable_listautoptrVar = CPointerVarOf<GCancellable_listautoptr>

typealias GCancellable_listautoptr = CPointer<GList>

typealias GCancellable_slistautoptrVar = CPointerVarOf<GCancellable_slistautoptr>

typealias GCancellable_slistautoptr = CPointer<GSList>

typealias GCancellable_queueautoptrVar = CPointerVarOf<GCancellable_queueautoptr>

typealias GCancellable_queueautoptr = CPointer<GQueue>

typealias GCharsetConverter_autoptrVar = CPointerVarOf<GCharsetConverter_autoptr>

typealias GCharsetConverter_autoptr = CPointer<GCharsetConverter>

typealias GCharsetConverter_listautoptrVar = CPointerVarOf<GCharsetConverter_listautoptr>

typealias GCharsetConverter_listautoptr = CPointer<GList>

typealias GCharsetConverter_slistautoptrVar = CPointerVarOf<GCharsetConverter_slistautoptr>

typealias GCharsetConverter_slistautoptr = CPointer<GSList>

typealias GCharsetConverter_queueautoptrVar = CPointerVarOf<GCharsetConverter_queueautoptr>

typealias GCharsetConverter_queueautoptr = CPointer<GQueue>

typealias GConverter_autoptrVar = CPointerVarOf<GConverter_autoptr>

typealias GConverter_autoptr = CPointer<GConverter>

typealias GConverter_listautoptrVar = CPointerVarOf<GConverter_listautoptr>

typealias GConverter_listautoptr = CPointer<GList>

typealias GConverter_slistautoptrVar = CPointerVarOf<GConverter_slistautoptr>

typealias GConverter_slistautoptr = CPointer<GSList>

typealias GConverter_queueautoptrVar = CPointerVarOf<GConverter_queueautoptr>

typealias GConverter_queueautoptr = CPointer<GQueue>

typealias GConverterInputStream_autoptrVar = CPointerVarOf<GConverterInputStream_autoptr>

typealias GConverterInputStream_autoptr = CPointer<GConverterInputStream>

typealias GConverterInputStream_listautoptrVar = CPointerVarOf<GConverterInputStream_listautoptr>

typealias GConverterInputStream_listautoptr = CPointer<GList>

typealias GConverterInputStream_slistautoptrVar = CPointerVarOf<GConverterInputStream_slistautoptr>

typealias GConverterInputStream_slistautoptr = CPointer<GSList>

typealias GConverterInputStream_queueautoptrVar = CPointerVarOf<GConverterInputStream_queueautoptr>

typealias GConverterInputStream_queueautoptr = CPointer<GQueue>

typealias GConverterOutputStream_autoptrVar = CPointerVarOf<GConverterOutputStream_autoptr>

typealias GConverterOutputStream_autoptr = CPointer<GConverterOutputStream>

typealias GConverterOutputStream_listautoptrVar = CPointerVarOf<GConverterOutputStream_listautoptr>

typealias GConverterOutputStream_listautoptr = CPointer<GList>

typealias GConverterOutputStream_slistautoptrVar = CPointerVarOf<GConverterOutputStream_slistautoptr>

typealias GConverterOutputStream_slistautoptr = CPointer<GSList>

typealias GConverterOutputStream_queueautoptrVar = CPointerVarOf<GConverterOutputStream_queueautoptr>

typealias GConverterOutputStream_queueautoptr = CPointer<GQueue>

typealias GCredentials_autoptrVar = CPointerVarOf<GCredentials_autoptr>

typealias GCredentials_autoptr = CPointer<GCredentials>

typealias GCredentials_listautoptrVar = CPointerVarOf<GCredentials_listautoptr>

typealias GCredentials_listautoptr = CPointer<GList>

typealias GCredentials_slistautoptrVar = CPointerVarOf<GCredentials_slistautoptr>

typealias GCredentials_slistautoptr = CPointer<GSList>

typealias GCredentials_queueautoptrVar = CPointerVarOf<GCredentials_queueautoptr>

typealias GCredentials_queueautoptr = CPointer<GQueue>

typealias GDatagramBased_autoptrVar = CPointerVarOf<GDatagramBased_autoptr>

typealias GDatagramBased_autoptr = CPointer<GDatagramBased>

typealias GDatagramBased_listautoptrVar = CPointerVarOf<GDatagramBased_listautoptr>

typealias GDatagramBased_listautoptr = CPointer<GList>

typealias GDatagramBased_slistautoptrVar = CPointerVarOf<GDatagramBased_slistautoptr>

typealias GDatagramBased_slistautoptr = CPointer<GSList>

typealias GDatagramBased_queueautoptrVar = CPointerVarOf<GDatagramBased_queueautoptr>

typealias GDatagramBased_queueautoptr = CPointer<GQueue>

typealias GDataInputStream_autoptrVar = CPointerVarOf<GDataInputStream_autoptr>

typealias GDataInputStream_autoptr = CPointer<GDataInputStream>

typealias GDataInputStream_listautoptrVar = CPointerVarOf<GDataInputStream_listautoptr>

typealias GDataInputStream_listautoptr = CPointer<GList>

typealias GDataInputStream_slistautoptrVar = CPointerVarOf<GDataInputStream_slistautoptr>

typealias GDataInputStream_slistautoptr = CPointer<GSList>

typealias GDataInputStream_queueautoptrVar = CPointerVarOf<GDataInputStream_queueautoptr>

typealias GDataInputStream_queueautoptr = CPointer<GQueue>

typealias GDataOutputStream_autoptrVar = CPointerVarOf<GDataOutputStream_autoptr>

typealias GDataOutputStream_autoptr = CPointer<GDataOutputStream>

typealias GDataOutputStream_listautoptrVar = CPointerVarOf<GDataOutputStream_listautoptr>

typealias GDataOutputStream_listautoptr = CPointer<GList>

typealias GDataOutputStream_slistautoptrVar = CPointerVarOf<GDataOutputStream_slistautoptr>

typealias GDataOutputStream_slistautoptr = CPointer<GSList>

typealias GDataOutputStream_queueautoptrVar = CPointerVarOf<GDataOutputStream_queueautoptr>

typealias GDataOutputStream_queueautoptr = CPointer<GQueue>

typealias GDBusActionGroup_autoptrVar = CPointerVarOf<GDBusActionGroup_autoptr>

typealias GDBusActionGroup_autoptr = CPointer<GDBusActionGroup>

typealias GDBusActionGroup_listautoptrVar = CPointerVarOf<GDBusActionGroup_listautoptr>

typealias GDBusActionGroup_listautoptr = CPointer<GList>

typealias GDBusActionGroup_slistautoptrVar = CPointerVarOf<GDBusActionGroup_slistautoptr>

typealias GDBusActionGroup_slistautoptr = CPointer<GSList>

typealias GDBusActionGroup_queueautoptrVar = CPointerVarOf<GDBusActionGroup_queueautoptr>

typealias GDBusActionGroup_queueautoptr = CPointer<GQueue>

typealias GDBusAuthObserver_autoptrVar = CPointerVarOf<GDBusAuthObserver_autoptr>

typealias GDBusAuthObserver_autoptr = CPointer<GDBusAuthObserver>

typealias GDBusAuthObserver_listautoptrVar = CPointerVarOf<GDBusAuthObserver_listautoptr>

typealias GDBusAuthObserver_listautoptr = CPointer<GList>

typealias GDBusAuthObserver_slistautoptrVar = CPointerVarOf<GDBusAuthObserver_slistautoptr>

typealias GDBusAuthObserver_slistautoptr = CPointer<GSList>

typealias GDBusAuthObserver_queueautoptrVar = CPointerVarOf<GDBusAuthObserver_queueautoptr>

typealias GDBusAuthObserver_queueautoptr = CPointer<GQueue>

typealias GDBusConnection_autoptrVar = CPointerVarOf<GDBusConnection_autoptr>

typealias GDBusConnection_autoptr = CPointer<GDBusConnection>

typealias GDBusConnection_listautoptrVar = CPointerVarOf<GDBusConnection_listautoptr>

typealias GDBusConnection_listautoptr = CPointer<GList>

typealias GDBusConnection_slistautoptrVar = CPointerVarOf<GDBusConnection_slistautoptr>

typealias GDBusConnection_slistautoptr = CPointer<GSList>

typealias GDBusConnection_queueautoptrVar = CPointerVarOf<GDBusConnection_queueautoptr>

typealias GDBusConnection_queueautoptr = CPointer<GQueue>

typealias GDBusInterface_autoptrVar = CPointerVarOf<GDBusInterface_autoptr>

typealias GDBusInterface_autoptr = CPointer<GDBusInterface>

typealias GDBusInterface_listautoptrVar = CPointerVarOf<GDBusInterface_listautoptr>

typealias GDBusInterface_listautoptr = CPointer<GList>

typealias GDBusInterface_slistautoptrVar = CPointerVarOf<GDBusInterface_slistautoptr>

typealias GDBusInterface_slistautoptr = CPointer<GSList>

typealias GDBusInterface_queueautoptrVar = CPointerVarOf<GDBusInterface_queueautoptr>

typealias GDBusInterface_queueautoptr = CPointer<GQueue>

typealias GDBusInterfaceSkeleton_autoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_autoptr>

typealias GDBusInterfaceSkeleton_autoptr = CPointer<GDBusInterfaceSkeleton>

typealias GDBusInterfaceSkeleton_listautoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_listautoptr>

typealias GDBusInterfaceSkeleton_listautoptr = CPointer<GList>

typealias GDBusInterfaceSkeleton_slistautoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_slistautoptr>

typealias GDBusInterfaceSkeleton_slistautoptr = CPointer<GSList>

typealias GDBusInterfaceSkeleton_queueautoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_queueautoptr>

typealias GDBusInterfaceSkeleton_queueautoptr = CPointer<GQueue>

typealias GDBusMenuModel_autoptrVar = CPointerVarOf<GDBusMenuModel_autoptr>

typealias GDBusMenuModel_autoptr = CPointer<GDBusMenuModel>

typealias GDBusMenuModel_listautoptrVar = CPointerVarOf<GDBusMenuModel_listautoptr>

typealias GDBusMenuModel_listautoptr = CPointer<GList>

typealias GDBusMenuModel_slistautoptrVar = CPointerVarOf<GDBusMenuModel_slistautoptr>

typealias GDBusMenuModel_slistautoptr = CPointer<GSList>

typealias GDBusMenuModel_queueautoptrVar = CPointerVarOf<GDBusMenuModel_queueautoptr>

typealias GDBusMenuModel_queueautoptr = CPointer<GQueue>

typealias GDBusMessage_autoptrVar = CPointerVarOf<GDBusMessage_autoptr>

typealias GDBusMessage_autoptr = CPointer<GDBusMessage>

typealias GDBusMessage_listautoptrVar = CPointerVarOf<GDBusMessage_listautoptr>

typealias GDBusMessage_listautoptr = CPointer<GList>

typealias GDBusMessage_slistautoptrVar = CPointerVarOf<GDBusMessage_slistautoptr>

typealias GDBusMessage_slistautoptr = CPointer<GSList>

typealias GDBusMessage_queueautoptrVar = CPointerVarOf<GDBusMessage_queueautoptr>

typealias GDBusMessage_queueautoptr = CPointer<GQueue>

typealias GDBusMethodInvocation_autoptrVar = CPointerVarOf<GDBusMethodInvocation_autoptr>

typealias GDBusMethodInvocation_autoptr = CPointer<GDBusMethodInvocation>

typealias GDBusMethodInvocation_listautoptrVar = CPointerVarOf<GDBusMethodInvocation_listautoptr>

typealias GDBusMethodInvocation_listautoptr = CPointer<GList>

typealias GDBusMethodInvocation_slistautoptrVar = CPointerVarOf<GDBusMethodInvocation_slistautoptr>

typealias GDBusMethodInvocation_slistautoptr = CPointer<GSList>

typealias GDBusMethodInvocation_queueautoptrVar = CPointerVarOf<GDBusMethodInvocation_queueautoptr>

typealias GDBusMethodInvocation_queueautoptr = CPointer<GQueue>

typealias GDBusNodeInfo_autoptrVar = CPointerVarOf<GDBusNodeInfo_autoptr>

typealias GDBusNodeInfo_autoptr = CPointer<GDBusNodeInfo>

typealias GDBusNodeInfo_listautoptrVar = CPointerVarOf<GDBusNodeInfo_listautoptr>

typealias GDBusNodeInfo_listautoptr = CPointer<GList>

typealias GDBusNodeInfo_slistautoptrVar = CPointerVarOf<GDBusNodeInfo_slistautoptr>

typealias GDBusNodeInfo_slistautoptr = CPointer<GSList>

typealias GDBusNodeInfo_queueautoptrVar = CPointerVarOf<GDBusNodeInfo_queueautoptr>

typealias GDBusNodeInfo_queueautoptr = CPointer<GQueue>

typealias GDBusObject_autoptrVar = CPointerVarOf<GDBusObject_autoptr>

typealias GDBusObject_autoptr = CPointer<GDBusObject>

typealias GDBusObject_listautoptrVar = CPointerVarOf<GDBusObject_listautoptr>

typealias GDBusObject_listautoptr = CPointer<GList>

typealias GDBusObject_slistautoptrVar = CPointerVarOf<GDBusObject_slistautoptr>

typealias GDBusObject_slistautoptr = CPointer<GSList>

typealias GDBusObject_queueautoptrVar = CPointerVarOf<GDBusObject_queueautoptr>

typealias GDBusObject_queueautoptr = CPointer<GQueue>

typealias GDBusObjectManagerClient_autoptrVar = CPointerVarOf<GDBusObjectManagerClient_autoptr>

typealias GDBusObjectManagerClient_autoptr = CPointer<GDBusObjectManagerClient>

typealias GDBusObjectManagerClient_listautoptrVar = CPointerVarOf<GDBusObjectManagerClient_listautoptr>

typealias GDBusObjectManagerClient_listautoptr = CPointer<GList>

typealias GDBusObjectManagerClient_slistautoptrVar = CPointerVarOf<GDBusObjectManagerClient_slistautoptr>

typealias GDBusObjectManagerClient_slistautoptr = CPointer<GSList>

typealias GDBusObjectManagerClient_queueautoptrVar = CPointerVarOf<GDBusObjectManagerClient_queueautoptr>

typealias GDBusObjectManagerClient_queueautoptr = CPointer<GQueue>

typealias GDBusObjectManager_autoptrVar = CPointerVarOf<GDBusObjectManager_autoptr>

typealias GDBusObjectManager_autoptr = CPointer<GDBusObjectManager>

typealias GDBusObjectManager_listautoptrVar = CPointerVarOf<GDBusObjectManager_listautoptr>

typealias GDBusObjectManager_listautoptr = CPointer<GList>

typealias GDBusObjectManager_slistautoptrVar = CPointerVarOf<GDBusObjectManager_slistautoptr>

typealias GDBusObjectManager_slistautoptr = CPointer<GSList>

typealias GDBusObjectManager_queueautoptrVar = CPointerVarOf<GDBusObjectManager_queueautoptr>

typealias GDBusObjectManager_queueautoptr = CPointer<GQueue>

typealias GDBusObjectManagerServer_autoptrVar = CPointerVarOf<GDBusObjectManagerServer_autoptr>

typealias GDBusObjectManagerServer_autoptr = CPointer<GDBusObjectManagerServer>

typealias GDBusObjectManagerServer_listautoptrVar = CPointerVarOf<GDBusObjectManagerServer_listautoptr>

typealias GDBusObjectManagerServer_listautoptr = CPointer<GList>

typealias GDBusObjectManagerServer_slistautoptrVar = CPointerVarOf<GDBusObjectManagerServer_slistautoptr>

typealias GDBusObjectManagerServer_slistautoptr = CPointer<GSList>

typealias GDBusObjectManagerServer_queueautoptrVar = CPointerVarOf<GDBusObjectManagerServer_queueautoptr>

typealias GDBusObjectManagerServer_queueautoptr = CPointer<GQueue>

typealias GDBusObjectProxy_autoptrVar = CPointerVarOf<GDBusObjectProxy_autoptr>

typealias GDBusObjectProxy_autoptr = CPointer<GDBusObjectProxy>

typealias GDBusObjectProxy_listautoptrVar = CPointerVarOf<GDBusObjectProxy_listautoptr>

typealias GDBusObjectProxy_listautoptr = CPointer<GList>

typealias GDBusObjectProxy_slistautoptrVar = CPointerVarOf<GDBusObjectProxy_slistautoptr>

typealias GDBusObjectProxy_slistautoptr = CPointer<GSList>

typealias GDBusObjectProxy_queueautoptrVar = CPointerVarOf<GDBusObjectProxy_queueautoptr>

typealias GDBusObjectProxy_queueautoptr = CPointer<GQueue>

typealias GDBusObjectSkeleton_autoptrVar = CPointerVarOf<GDBusObjectSkeleton_autoptr>

typealias GDBusObjectSkeleton_autoptr = CPointer<GDBusObjectSkeleton>

typealias GDBusObjectSkeleton_listautoptrVar = CPointerVarOf<GDBusObjectSkeleton_listautoptr>

typealias GDBusObjectSkeleton_listautoptr = CPointer<GList>

typealias GDBusObjectSkeleton_slistautoptrVar = CPointerVarOf<GDBusObjectSkeleton_slistautoptr>

typealias GDBusObjectSkeleton_slistautoptr = CPointer<GSList>

typealias GDBusObjectSkeleton_queueautoptrVar = CPointerVarOf<GDBusObjectSkeleton_queueautoptr>

typealias GDBusObjectSkeleton_queueautoptr = CPointer<GQueue>

typealias GDBusProxy_autoptrVar = CPointerVarOf<GDBusProxy_autoptr>

typealias GDBusProxy_autoptr = CPointer<GDBusProxy>

typealias GDBusProxy_listautoptrVar = CPointerVarOf<GDBusProxy_listautoptr>

typealias GDBusProxy_listautoptr = CPointer<GList>

typealias GDBusProxy_slistautoptrVar = CPointerVarOf<GDBusProxy_slistautoptr>

typealias GDBusProxy_slistautoptr = CPointer<GSList>

typealias GDBusProxy_queueautoptrVar = CPointerVarOf<GDBusProxy_queueautoptr>

typealias GDBusProxy_queueautoptr = CPointer<GQueue>

typealias GDBusServer_autoptrVar = CPointerVarOf<GDBusServer_autoptr>

typealias GDBusServer_autoptr = CPointer<GDBusServer>

typealias GDBusServer_listautoptrVar = CPointerVarOf<GDBusServer_listautoptr>

typealias GDBusServer_listautoptr = CPointer<GList>

typealias GDBusServer_slistautoptrVar = CPointerVarOf<GDBusServer_slistautoptr>

typealias GDBusServer_slistautoptr = CPointer<GSList>

typealias GDBusServer_queueautoptrVar = CPointerVarOf<GDBusServer_queueautoptr>

typealias GDBusServer_queueautoptr = CPointer<GQueue>

typealias GDrive_autoptrVar = CPointerVarOf<GDrive_autoptr>

typealias GDrive_autoptr = CPointer<GDrive>

typealias GDrive_listautoptrVar = CPointerVarOf<GDrive_listautoptr>

typealias GDrive_listautoptr = CPointer<GList>

typealias GDrive_slistautoptrVar = CPointerVarOf<GDrive_slistautoptr>

typealias GDrive_slistautoptr = CPointer<GSList>

typealias GDrive_queueautoptrVar = CPointerVarOf<GDrive_queueautoptr>

typealias GDrive_queueautoptr = CPointer<GQueue>

typealias GEmblemedIcon_autoptrVar = CPointerVarOf<GEmblemedIcon_autoptr>

typealias GEmblemedIcon_autoptr = CPointer<GEmblemedIcon>

typealias GEmblemedIcon_listautoptrVar = CPointerVarOf<GEmblemedIcon_listautoptr>

typealias GEmblemedIcon_listautoptr = CPointer<GList>

typealias GEmblemedIcon_slistautoptrVar = CPointerVarOf<GEmblemedIcon_slistautoptr>

typealias GEmblemedIcon_slistautoptr = CPointer<GSList>

typealias GEmblemedIcon_queueautoptrVar = CPointerVarOf<GEmblemedIcon_queueautoptr>

typealias GEmblemedIcon_queueautoptr = CPointer<GQueue>

typealias GEmblem_autoptrVar = CPointerVarOf<GEmblem_autoptr>

typealias GEmblem_autoptr = CPointer<GEmblem>

typealias GEmblem_listautoptrVar = CPointerVarOf<GEmblem_listautoptr>

typealias GEmblem_listautoptr = CPointer<GList>

typealias GEmblem_slistautoptrVar = CPointerVarOf<GEmblem_slistautoptr>

typealias GEmblem_slistautoptr = CPointer<GSList>

typealias GEmblem_queueautoptrVar = CPointerVarOf<GEmblem_queueautoptr>

typealias GEmblem_queueautoptr = CPointer<GQueue>

typealias GFileEnumerator_autoptrVar = CPointerVarOf<GFileEnumerator_autoptr>

typealias GFileEnumerator_autoptr = CPointer<GFileEnumerator>

typealias GFileEnumerator_listautoptrVar = CPointerVarOf<GFileEnumerator_listautoptr>

typealias GFileEnumerator_listautoptr = CPointer<GList>

typealias GFileEnumerator_slistautoptrVar = CPointerVarOf<GFileEnumerator_slistautoptr>

typealias GFileEnumerator_slistautoptr = CPointer<GSList>

typealias GFileEnumerator_queueautoptrVar = CPointerVarOf<GFileEnumerator_queueautoptr>

typealias GFileEnumerator_queueautoptr = CPointer<GQueue>

typealias GFile_autoptrVar = CPointerVarOf<GFile_autoptr>

typealias GFile_autoptr = CPointer<GFile>

typealias GFile_listautoptrVar = CPointerVarOf<GFile_listautoptr>

typealias GFile_listautoptr = CPointer<GList>

typealias GFile_slistautoptrVar = CPointerVarOf<GFile_slistautoptr>

typealias GFile_slistautoptr = CPointer<GSList>

typealias GFile_queueautoptrVar = CPointerVarOf<GFile_queueautoptr>

typealias GFile_queueautoptr = CPointer<GQueue>

typealias GFileAttributeInfoList_autoptrVar = CPointerVarOf<GFileAttributeInfoList_autoptr>

typealias GFileAttributeInfoList_autoptr = CPointer<GFileAttributeInfoList>

typealias GFileAttributeInfoList_listautoptrVar = CPointerVarOf<GFileAttributeInfoList_listautoptr>

typealias GFileAttributeInfoList_listautoptr = CPointer<GList>

typealias GFileAttributeInfoList_slistautoptrVar = CPointerVarOf<GFileAttributeInfoList_slistautoptr>

typealias GFileAttributeInfoList_slistautoptr = CPointer<GSList>

typealias GFileAttributeInfoList_queueautoptrVar = CPointerVarOf<GFileAttributeInfoList_queueautoptr>

typealias GFileAttributeInfoList_queueautoptr = CPointer<GQueue>

typealias GFileIcon_autoptrVar = CPointerVarOf<GFileIcon_autoptr>

typealias GFileIcon_autoptr = CPointer<GFileIcon>

typealias GFileIcon_listautoptrVar = CPointerVarOf<GFileIcon_listautoptr>

typealias GFileIcon_listautoptr = CPointer<GList>

typealias GFileIcon_slistautoptrVar = CPointerVarOf<GFileIcon_slistautoptr>

typealias GFileIcon_slistautoptr = CPointer<GSList>

typealias GFileIcon_queueautoptrVar = CPointerVarOf<GFileIcon_queueautoptr>

typealias GFileIcon_queueautoptr = CPointer<GQueue>

typealias GFileInfo_autoptrVar = CPointerVarOf<GFileInfo_autoptr>

typealias GFileInfo_autoptr = CPointer<GFileInfo>

typealias GFileInfo_listautoptrVar = CPointerVarOf<GFileInfo_listautoptr>

typealias GFileInfo_listautoptr = CPointer<GList>

typealias GFileInfo_slistautoptrVar = CPointerVarOf<GFileInfo_slistautoptr>

typealias GFileInfo_slistautoptr = CPointer<GSList>

typealias GFileInfo_queueautoptrVar = CPointerVarOf<GFileInfo_queueautoptr>

typealias GFileInfo_queueautoptr = CPointer<GQueue>

typealias GFileInputStream_autoptrVar = CPointerVarOf<GFileInputStream_autoptr>

typealias GFileInputStream_autoptr = CPointer<GFileInputStream>

typealias GFileInputStream_listautoptrVar = CPointerVarOf<GFileInputStream_listautoptr>

typealias GFileInputStream_listautoptr = CPointer<GList>

typealias GFileInputStream_slistautoptrVar = CPointerVarOf<GFileInputStream_slistautoptr>

typealias GFileInputStream_slistautoptr = CPointer<GSList>

typealias GFileInputStream_queueautoptrVar = CPointerVarOf<GFileInputStream_queueautoptr>

typealias GFileInputStream_queueautoptr = CPointer<GQueue>

typealias GFileIOStream_autoptrVar = CPointerVarOf<GFileIOStream_autoptr>

typealias GFileIOStream_autoptr = CPointer<GFileIOStream>

typealias GFileIOStream_listautoptrVar = CPointerVarOf<GFileIOStream_listautoptr>

typealias GFileIOStream_listautoptr = CPointer<GList>

typealias GFileIOStream_slistautoptrVar = CPointerVarOf<GFileIOStream_slistautoptr>

typealias GFileIOStream_slistautoptr = CPointer<GSList>

typealias GFileIOStream_queueautoptrVar = CPointerVarOf<GFileIOStream_queueautoptr>

typealias GFileIOStream_queueautoptr = CPointer<GQueue>

typealias GFileMonitor_autoptrVar = CPointerVarOf<GFileMonitor_autoptr>

typealias GFileMonitor_autoptr = CPointer<GFileMonitor>

typealias GFileMonitor_listautoptrVar = CPointerVarOf<GFileMonitor_listautoptr>

typealias GFileMonitor_listautoptr = CPointer<GList>

typealias GFileMonitor_slistautoptrVar = CPointerVarOf<GFileMonitor_slistautoptr>

typealias GFileMonitor_slistautoptr = CPointer<GSList>

typealias GFileMonitor_queueautoptrVar = CPointerVarOf<GFileMonitor_queueautoptr>

typealias GFileMonitor_queueautoptr = CPointer<GQueue>

typealias GFilenameCompleter_autoptrVar = CPointerVarOf<GFilenameCompleter_autoptr>

typealias GFilenameCompleter_autoptr = CPointer<GFilenameCompleter>

typealias GFilenameCompleter_listautoptrVar = CPointerVarOf<GFilenameCompleter_listautoptr>

typealias GFilenameCompleter_listautoptr = CPointer<GList>

typealias GFilenameCompleter_slistautoptrVar = CPointerVarOf<GFilenameCompleter_slistautoptr>

typealias GFilenameCompleter_slistautoptr = CPointer<GSList>

typealias GFilenameCompleter_queueautoptrVar = CPointerVarOf<GFilenameCompleter_queueautoptr>

typealias GFilenameCompleter_queueautoptr = CPointer<GQueue>

typealias GFileOutputStream_autoptrVar = CPointerVarOf<GFileOutputStream_autoptr>

typealias GFileOutputStream_autoptr = CPointer<GFileOutputStream>

typealias GFileOutputStream_listautoptrVar = CPointerVarOf<GFileOutputStream_listautoptr>

typealias GFileOutputStream_listautoptr = CPointer<GList>

typealias GFileOutputStream_slistautoptrVar = CPointerVarOf<GFileOutputStream_slistautoptr>

typealias GFileOutputStream_slistautoptr = CPointer<GSList>

typealias GFileOutputStream_queueautoptrVar = CPointerVarOf<GFileOutputStream_queueautoptr>

typealias GFileOutputStream_queueautoptr = CPointer<GQueue>

typealias GFilterInputStream_autoptrVar = CPointerVarOf<GFilterInputStream_autoptr>

typealias GFilterInputStream_autoptr = CPointer<GFilterInputStream>

typealias GFilterInputStream_listautoptrVar = CPointerVarOf<GFilterInputStream_listautoptr>

typealias GFilterInputStream_listautoptr = CPointer<GList>

typealias GFilterInputStream_slistautoptrVar = CPointerVarOf<GFilterInputStream_slistautoptr>

typealias GFilterInputStream_slistautoptr = CPointer<GSList>

typealias GFilterInputStream_queueautoptrVar = CPointerVarOf<GFilterInputStream_queueautoptr>

typealias GFilterInputStream_queueautoptr = CPointer<GQueue>

typealias GFilterOutputStream_autoptrVar = CPointerVarOf<GFilterOutputStream_autoptr>

typealias GFilterOutputStream_autoptr = CPointer<GFilterOutputStream>

typealias GFilterOutputStream_listautoptrVar = CPointerVarOf<GFilterOutputStream_listautoptr>

typealias GFilterOutputStream_listautoptr = CPointer<GList>

typealias GFilterOutputStream_slistautoptrVar = CPointerVarOf<GFilterOutputStream_slistautoptr>

typealias GFilterOutputStream_slistautoptr = CPointer<GSList>

typealias GFilterOutputStream_queueautoptrVar = CPointerVarOf<GFilterOutputStream_queueautoptr>

typealias GFilterOutputStream_queueautoptr = CPointer<GQueue>

typealias GIcon_autoptrVar = CPointerVarOf<GIcon_autoptr>

typealias GIcon_autoptr = CPointer<GIcon>

typealias GIcon_listautoptrVar = CPointerVarOf<GIcon_listautoptr>

typealias GIcon_listautoptr = CPointer<GList>

typealias GIcon_slistautoptrVar = CPointerVarOf<GIcon_slistautoptr>

typealias GIcon_slistautoptr = CPointer<GSList>

typealias GIcon_queueautoptrVar = CPointerVarOf<GIcon_queueautoptr>

typealias GIcon_queueautoptr = CPointer<GQueue>

typealias GInetAddress_autoptrVar = CPointerVarOf<GInetAddress_autoptr>

typealias GInetAddress_autoptr = CPointer<GInetAddress>

typealias GInetAddress_listautoptrVar = CPointerVarOf<GInetAddress_listautoptr>

typealias GInetAddress_listautoptr = CPointer<GList>

typealias GInetAddress_slistautoptrVar = CPointerVarOf<GInetAddress_slistautoptr>

typealias GInetAddress_slistautoptr = CPointer<GSList>

typealias GInetAddress_queueautoptrVar = CPointerVarOf<GInetAddress_queueautoptr>

typealias GInetAddress_queueautoptr = CPointer<GQueue>

typealias GInetAddressMask_autoptrVar = CPointerVarOf<GInetAddressMask_autoptr>

typealias GInetAddressMask_autoptr = CPointer<GInetAddressMask>

typealias GInetAddressMask_listautoptrVar = CPointerVarOf<GInetAddressMask_listautoptr>

typealias GInetAddressMask_listautoptr = CPointer<GList>

typealias GInetAddressMask_slistautoptrVar = CPointerVarOf<GInetAddressMask_slistautoptr>

typealias GInetAddressMask_slistautoptr = CPointer<GSList>

typealias GInetAddressMask_queueautoptrVar = CPointerVarOf<GInetAddressMask_queueautoptr>

typealias GInetAddressMask_queueautoptr = CPointer<GQueue>

typealias GInetSocketAddress_autoptrVar = CPointerVarOf<GInetSocketAddress_autoptr>

typealias GInetSocketAddress_autoptr = CPointer<GInetSocketAddress>

typealias GInetSocketAddress_listautoptrVar = CPointerVarOf<GInetSocketAddress_listautoptr>

typealias GInetSocketAddress_listautoptr = CPointer<GList>

typealias GInetSocketAddress_slistautoptrVar = CPointerVarOf<GInetSocketAddress_slistautoptr>

typealias GInetSocketAddress_slistautoptr = CPointer<GSList>

typealias GInetSocketAddress_queueautoptrVar = CPointerVarOf<GInetSocketAddress_queueautoptr>

typealias GInetSocketAddress_queueautoptr = CPointer<GQueue>

typealias GInitable_autoptrVar = CPointerVarOf<GInitable_autoptr>

typealias GInitable_autoptr = CPointer<GInitable>

typealias GInitable_listautoptrVar = CPointerVarOf<GInitable_listautoptr>

typealias GInitable_listautoptr = CPointer<GList>

typealias GInitable_slistautoptrVar = CPointerVarOf<GInitable_slistautoptr>

typealias GInitable_slistautoptr = CPointer<GSList>

typealias GInitable_queueautoptrVar = CPointerVarOf<GInitable_queueautoptr>

typealias GInitable_queueautoptr = CPointer<GQueue>

typealias GInputStream_autoptrVar = CPointerVarOf<GInputStream_autoptr>

typealias GInputStream_autoptr = CPointer<GInputStream>

typealias GInputStream_listautoptrVar = CPointerVarOf<GInputStream_listautoptr>

typealias GInputStream_listautoptr = CPointer<GList>

typealias GInputStream_slistautoptrVar = CPointerVarOf<GInputStream_slistautoptr>

typealias GInputStream_slistautoptr = CPointer<GSList>

typealias GInputStream_queueautoptrVar = CPointerVarOf<GInputStream_queueautoptr>

typealias GInputStream_queueautoptr = CPointer<GQueue>

typealias GIOModule_autoptrVar = CPointerVarOf<GIOModule_autoptr>

typealias GIOModule_autoptr = CPointer<GIOModule>

typealias GIOModule_listautoptrVar = CPointerVarOf<GIOModule_listautoptr>

typealias GIOModule_listautoptr = CPointer<GList>

typealias GIOModule_slistautoptrVar = CPointerVarOf<GIOModule_slistautoptr>

typealias GIOModule_slistautoptr = CPointer<GSList>

typealias GIOModule_queueautoptrVar = CPointerVarOf<GIOModule_queueautoptr>

typealias GIOModule_queueautoptr = CPointer<GQueue>

typealias GIOStream_autoptrVar = CPointerVarOf<GIOStream_autoptr>

typealias GIOStream_autoptr = CPointer<GIOStream>

typealias GIOStream_listautoptrVar = CPointerVarOf<GIOStream_listautoptr>

typealias GIOStream_listautoptr = CPointer<GList>

typealias GIOStream_slistautoptrVar = CPointerVarOf<GIOStream_slistautoptr>

typealias GIOStream_slistautoptr = CPointer<GSList>

typealias GIOStream_queueautoptrVar = CPointerVarOf<GIOStream_queueautoptr>

typealias GIOStream_queueautoptr = CPointer<GQueue>

typealias GLoadableIcon_autoptrVar = CPointerVarOf<GLoadableIcon_autoptr>

typealias GLoadableIcon_autoptr = CPointer<GLoadableIcon>

typealias GLoadableIcon_listautoptrVar = CPointerVarOf<GLoadableIcon_listautoptr>

typealias GLoadableIcon_listautoptr = CPointer<GList>

typealias GLoadableIcon_slistautoptrVar = CPointerVarOf<GLoadableIcon_slistautoptr>

typealias GLoadableIcon_slistautoptr = CPointer<GSList>

typealias GLoadableIcon_queueautoptrVar = CPointerVarOf<GLoadableIcon_queueautoptr>

typealias GLoadableIcon_queueautoptr = CPointer<GQueue>

typealias GMemoryInputStream_autoptrVar = CPointerVarOf<GMemoryInputStream_autoptr>

typealias GMemoryInputStream_autoptr = CPointer<GMemoryInputStream>

typealias GMemoryInputStream_listautoptrVar = CPointerVarOf<GMemoryInputStream_listautoptr>

typealias GMemoryInputStream_listautoptr = CPointer<GList>

typealias GMemoryInputStream_slistautoptrVar = CPointerVarOf<GMemoryInputStream_slistautoptr>

typealias GMemoryInputStream_slistautoptr = CPointer<GSList>

typealias GMemoryInputStream_queueautoptrVar = CPointerVarOf<GMemoryInputStream_queueautoptr>

typealias GMemoryInputStream_queueautoptr = CPointer<GQueue>

typealias GMemoryOutputStream_autoptrVar = CPointerVarOf<GMemoryOutputStream_autoptr>

typealias GMemoryOutputStream_autoptr = CPointer<GMemoryOutputStream>

typealias GMemoryOutputStream_listautoptrVar = CPointerVarOf<GMemoryOutputStream_listautoptr>

typealias GMemoryOutputStream_listautoptr = CPointer<GList>

typealias GMemoryOutputStream_slistautoptrVar = CPointerVarOf<GMemoryOutputStream_slistautoptr>

typealias GMemoryOutputStream_slistautoptr = CPointer<GSList>

typealias GMemoryOutputStream_queueautoptrVar = CPointerVarOf<GMemoryOutputStream_queueautoptr>

typealias GMemoryOutputStream_queueautoptr = CPointer<GQueue>

typealias GMenu_autoptrVar = CPointerVarOf<GMenu_autoptr>

typealias GMenu_autoptr = CPointer<GMenu>

typealias GMenu_listautoptrVar = CPointerVarOf<GMenu_listautoptr>

typealias GMenu_listautoptr = CPointer<GList>

typealias GMenu_slistautoptrVar = CPointerVarOf<GMenu_slistautoptr>

typealias GMenu_slistautoptr = CPointer<GSList>

typealias GMenu_queueautoptrVar = CPointerVarOf<GMenu_queueautoptr>

typealias GMenu_queueautoptr = CPointer<GQueue>

typealias GMenuItem_autoptrVar = CPointerVarOf<GMenuItem_autoptr>

typealias GMenuItem_autoptr = CPointer<GMenuItem>

typealias GMenuItem_listautoptrVar = CPointerVarOf<GMenuItem_listautoptr>

typealias GMenuItem_listautoptr = CPointer<GList>

typealias GMenuItem_slistautoptrVar = CPointerVarOf<GMenuItem_slistautoptr>

typealias GMenuItem_slistautoptr = CPointer<GSList>

typealias GMenuItem_queueautoptrVar = CPointerVarOf<GMenuItem_queueautoptr>

typealias GMenuItem_queueautoptr = CPointer<GQueue>

typealias GMenuModel_autoptrVar = CPointerVarOf<GMenuModel_autoptr>

typealias GMenuModel_autoptr = CPointer<GMenuModel>

typealias GMenuModel_listautoptrVar = CPointerVarOf<GMenuModel_listautoptr>

typealias GMenuModel_listautoptr = CPointer<GList>

typealias GMenuModel_slistautoptrVar = CPointerVarOf<GMenuModel_slistautoptr>

typealias GMenuModel_slistautoptr = CPointer<GSList>

typealias GMenuModel_queueautoptrVar = CPointerVarOf<GMenuModel_queueautoptr>

typealias GMenuModel_queueautoptr = CPointer<GQueue>

typealias GMenuAttributeIter_autoptrVar = CPointerVarOf<GMenuAttributeIter_autoptr>

typealias GMenuAttributeIter_autoptr = CPointer<GMenuAttributeIter>

typealias GMenuAttributeIter_listautoptrVar = CPointerVarOf<GMenuAttributeIter_listautoptr>

typealias GMenuAttributeIter_listautoptr = CPointer<GList>

typealias GMenuAttributeIter_slistautoptrVar = CPointerVarOf<GMenuAttributeIter_slistautoptr>

typealias GMenuAttributeIter_slistautoptr = CPointer<GSList>

typealias GMenuAttributeIter_queueautoptrVar = CPointerVarOf<GMenuAttributeIter_queueautoptr>

typealias GMenuAttributeIter_queueautoptr = CPointer<GQueue>

typealias GMenuLinkIter_autoptrVar = CPointerVarOf<GMenuLinkIter_autoptr>

typealias GMenuLinkIter_autoptr = CPointer<GMenuLinkIter>

typealias GMenuLinkIter_listautoptrVar = CPointerVarOf<GMenuLinkIter_listautoptr>

typealias GMenuLinkIter_listautoptr = CPointer<GList>

typealias GMenuLinkIter_slistautoptrVar = CPointerVarOf<GMenuLinkIter_slistautoptr>

typealias GMenuLinkIter_slistautoptr = CPointer<GSList>

typealias GMenuLinkIter_queueautoptrVar = CPointerVarOf<GMenuLinkIter_queueautoptr>

typealias GMenuLinkIter_queueautoptr = CPointer<GQueue>

typealias GMount_autoptrVar = CPointerVarOf<GMount_autoptr>

typealias GMount_autoptr = CPointer<GMount>

typealias GMount_listautoptrVar = CPointerVarOf<GMount_listautoptr>

typealias GMount_listautoptr = CPointer<GList>

typealias GMount_slistautoptrVar = CPointerVarOf<GMount_slistautoptr>

typealias GMount_slistautoptr = CPointer<GSList>

typealias GMount_queueautoptrVar = CPointerVarOf<GMount_queueautoptr>

typealias GMount_queueautoptr = CPointer<GQueue>

typealias GMountOperation_autoptrVar = CPointerVarOf<GMountOperation_autoptr>

typealias GMountOperation_autoptr = CPointer<GMountOperation>

typealias GMountOperation_listautoptrVar = CPointerVarOf<GMountOperation_listautoptr>

typealias GMountOperation_listautoptr = CPointer<GList>

typealias GMountOperation_slistautoptrVar = CPointerVarOf<GMountOperation_slistautoptr>

typealias GMountOperation_slistautoptr = CPointer<GSList>

typealias GMountOperation_queueautoptrVar = CPointerVarOf<GMountOperation_queueautoptr>

typealias GMountOperation_queueautoptr = CPointer<GQueue>

typealias GNativeVolumeMonitor_autoptrVar = CPointerVarOf<GNativeVolumeMonitor_autoptr>

typealias GNativeVolumeMonitor_autoptr = CPointer<GNativeVolumeMonitor>

typealias GNativeVolumeMonitor_listautoptrVar = CPointerVarOf<GNativeVolumeMonitor_listautoptr>

typealias GNativeVolumeMonitor_listautoptr = CPointer<GList>

typealias GNativeVolumeMonitor_slistautoptrVar = CPointerVarOf<GNativeVolumeMonitor_slistautoptr>

typealias GNativeVolumeMonitor_slistautoptr = CPointer<GSList>

typealias GNativeVolumeMonitor_queueautoptrVar = CPointerVarOf<GNativeVolumeMonitor_queueautoptr>

typealias GNativeVolumeMonitor_queueautoptr = CPointer<GQueue>

typealias GNetworkAddress_autoptrVar = CPointerVarOf<GNetworkAddress_autoptr>

typealias GNetworkAddress_autoptr = CPointer<GNetworkAddress>

typealias GNetworkAddress_listautoptrVar = CPointerVarOf<GNetworkAddress_listautoptr>

typealias GNetworkAddress_listautoptr = CPointer<GList>

typealias GNetworkAddress_slistautoptrVar = CPointerVarOf<GNetworkAddress_slistautoptr>

typealias GNetworkAddress_slistautoptr = CPointer<GSList>

typealias GNetworkAddress_queueautoptrVar = CPointerVarOf<GNetworkAddress_queueautoptr>

typealias GNetworkAddress_queueautoptr = CPointer<GQueue>

typealias GNetworkMonitor_autoptrVar = CPointerVarOf<GNetworkMonitor_autoptr>

typealias GNetworkMonitor_autoptr = CPointer<GNetworkMonitor>

typealias GNetworkMonitor_listautoptrVar = CPointerVarOf<GNetworkMonitor_listautoptr>

typealias GNetworkMonitor_listautoptr = CPointer<GList>

typealias GNetworkMonitor_slistautoptrVar = CPointerVarOf<GNetworkMonitor_slistautoptr>

typealias GNetworkMonitor_slistautoptr = CPointer<GSList>

typealias GNetworkMonitor_queueautoptrVar = CPointerVarOf<GNetworkMonitor_queueautoptr>

typealias GNetworkMonitor_queueautoptr = CPointer<GQueue>

typealias GNetworkService_autoptrVar = CPointerVarOf<GNetworkService_autoptr>

typealias GNetworkService_autoptr = CPointer<GNetworkService>

typealias GNetworkService_listautoptrVar = CPointerVarOf<GNetworkService_listautoptr>

typealias GNetworkService_listautoptr = CPointer<GList>

typealias GNetworkService_slistautoptrVar = CPointerVarOf<GNetworkService_slistautoptr>

typealias GNetworkService_slistautoptr = CPointer<GSList>

typealias GNetworkService_queueautoptrVar = CPointerVarOf<GNetworkService_queueautoptr>

typealias GNetworkService_queueautoptr = CPointer<GQueue>

typealias GNotification_autoptrVar = CPointerVarOf<GNotification_autoptr>

typealias GNotification_autoptr = CPointer<GNotification>

typealias GNotification_listautoptrVar = CPointerVarOf<GNotification_listautoptr>

typealias GNotification_listautoptr = CPointer<GList>

typealias GNotification_slistautoptrVar = CPointerVarOf<GNotification_slistautoptr>

typealias GNotification_slistautoptr = CPointer<GSList>

typealias GNotification_queueautoptrVar = CPointerVarOf<GNotification_queueautoptr>

typealias GNotification_queueautoptr = CPointer<GQueue>

typealias GOutputStream_autoptrVar = CPointerVarOf<GOutputStream_autoptr>

typealias GOutputStream_autoptr = CPointer<GOutputStream>

typealias GOutputStream_listautoptrVar = CPointerVarOf<GOutputStream_listautoptr>

typealias GOutputStream_listautoptr = CPointer<GList>

typealias GOutputStream_slistautoptrVar = CPointerVarOf<GOutputStream_slistautoptr>

typealias GOutputStream_slistautoptr = CPointer<GSList>

typealias GOutputStream_queueautoptrVar = CPointerVarOf<GOutputStream_queueautoptr>

typealias GOutputStream_queueautoptr = CPointer<GQueue>

typealias GPermission_autoptrVar = CPointerVarOf<GPermission_autoptr>

typealias GPermission_autoptr = CPointer<GPermission>

typealias GPermission_listautoptrVar = CPointerVarOf<GPermission_listautoptr>

typealias GPermission_listautoptr = CPointer<GList>

typealias GPermission_slistautoptrVar = CPointerVarOf<GPermission_slistautoptr>

typealias GPermission_slistautoptr = CPointer<GSList>

typealias GPermission_queueautoptrVar = CPointerVarOf<GPermission_queueautoptr>

typealias GPermission_queueautoptr = CPointer<GQueue>

typealias GPollableInputStream_autoptrVar = CPointerVarOf<GPollableInputStream_autoptr>

typealias GPollableInputStream_autoptr = CPointer<GPollableInputStream>

typealias GPollableInputStream_listautoptrVar = CPointerVarOf<GPollableInputStream_listautoptr>

typealias GPollableInputStream_listautoptr = CPointer<GList>

typealias GPollableInputStream_slistautoptrVar = CPointerVarOf<GPollableInputStream_slistautoptr>

typealias GPollableInputStream_slistautoptr = CPointer<GSList>

typealias GPollableInputStream_queueautoptrVar = CPointerVarOf<GPollableInputStream_queueautoptr>

typealias GPollableInputStream_queueautoptr = CPointer<GQueue>

typealias GPollableOutputStream_autoptrVar = CPointerVarOf<GPollableOutputStream_autoptr>

typealias GPollableOutputStream_autoptr = CPointer<GPollableOutputStream>

typealias GPollableOutputStream_listautoptrVar = CPointerVarOf<GPollableOutputStream_listautoptr>

typealias GPollableOutputStream_listautoptr = CPointer<GList>

typealias GPollableOutputStream_slistautoptrVar = CPointerVarOf<GPollableOutputStream_slistautoptr>

typealias GPollableOutputStream_slistautoptr = CPointer<GSList>

typealias GPollableOutputStream_queueautoptrVar = CPointerVarOf<GPollableOutputStream_queueautoptr>

typealias GPollableOutputStream_queueautoptr = CPointer<GQueue>

typealias GPropertyAction_autoptrVar = CPointerVarOf<GPropertyAction_autoptr>

typealias GPropertyAction_autoptr = CPointer<GPropertyAction>

typealias GPropertyAction_listautoptrVar = CPointerVarOf<GPropertyAction_listautoptr>

typealias GPropertyAction_listautoptr = CPointer<GList>

typealias GPropertyAction_slistautoptrVar = CPointerVarOf<GPropertyAction_slistautoptr>

typealias GPropertyAction_slistautoptr = CPointer<GSList>

typealias GPropertyAction_queueautoptrVar = CPointerVarOf<GPropertyAction_queueautoptr>

typealias GPropertyAction_queueautoptr = CPointer<GQueue>

typealias GProxyAddressEnumerator_autoptrVar = CPointerVarOf<GProxyAddressEnumerator_autoptr>

typealias GProxyAddressEnumerator_autoptr = CPointer<GProxyAddressEnumerator>

typealias GProxyAddressEnumerator_listautoptrVar = CPointerVarOf<GProxyAddressEnumerator_listautoptr>

typealias GProxyAddressEnumerator_listautoptr = CPointer<GList>

typealias GProxyAddressEnumerator_slistautoptrVar = CPointerVarOf<GProxyAddressEnumerator_slistautoptr>

typealias GProxyAddressEnumerator_slistautoptr = CPointer<GSList>

typealias GProxyAddressEnumerator_queueautoptrVar = CPointerVarOf<GProxyAddressEnumerator_queueautoptr>

typealias GProxyAddressEnumerator_queueautoptr = CPointer<GQueue>

typealias GProxyAddress_autoptrVar = CPointerVarOf<GProxyAddress_autoptr>

typealias GProxyAddress_autoptr = CPointer<GProxyAddress>

typealias GProxyAddress_listautoptrVar = CPointerVarOf<GProxyAddress_listautoptr>

typealias GProxyAddress_listautoptr = CPointer<GList>

typealias GProxyAddress_slistautoptrVar = CPointerVarOf<GProxyAddress_slistautoptr>

typealias GProxyAddress_slistautoptr = CPointer<GSList>

typealias GProxyAddress_queueautoptrVar = CPointerVarOf<GProxyAddress_queueautoptr>

typealias GProxyAddress_queueautoptr = CPointer<GQueue>

typealias GProxy_autoptrVar = CPointerVarOf<GProxy_autoptr>

typealias GProxy_autoptr = CPointer<GProxy>

typealias GProxy_listautoptrVar = CPointerVarOf<GProxy_listautoptr>

typealias GProxy_listautoptr = CPointer<GList>

typealias GProxy_slistautoptrVar = CPointerVarOf<GProxy_slistautoptr>

typealias GProxy_slistautoptr = CPointer<GSList>

typealias GProxy_queueautoptrVar = CPointerVarOf<GProxy_queueautoptr>

typealias GProxy_queueautoptr = CPointer<GQueue>

typealias GProxyResolver_autoptrVar = CPointerVarOf<GProxyResolver_autoptr>

typealias GProxyResolver_autoptr = CPointer<GProxyResolver>

typealias GProxyResolver_listautoptrVar = CPointerVarOf<GProxyResolver_listautoptr>

typealias GProxyResolver_listautoptr = CPointer<GList>

typealias GProxyResolver_slistautoptrVar = CPointerVarOf<GProxyResolver_slistautoptr>

typealias GProxyResolver_slistautoptr = CPointer<GSList>

typealias GProxyResolver_queueautoptrVar = CPointerVarOf<GProxyResolver_queueautoptr>

typealias GProxyResolver_queueautoptr = CPointer<GQueue>

typealias GRemoteActionGroup_autoptrVar = CPointerVarOf<GRemoteActionGroup_autoptr>

typealias GRemoteActionGroup_autoptr = CPointer<GRemoteActionGroup>

typealias GRemoteActionGroup_listautoptrVar = CPointerVarOf<GRemoteActionGroup_listautoptr>

typealias GRemoteActionGroup_listautoptr = CPointer<GList>

typealias GRemoteActionGroup_slistautoptrVar = CPointerVarOf<GRemoteActionGroup_slistautoptr>

typealias GRemoteActionGroup_slistautoptr = CPointer<GSList>

typealias GRemoteActionGroup_queueautoptrVar = CPointerVarOf<GRemoteActionGroup_queueautoptr>

typealias GRemoteActionGroup_queueautoptr = CPointer<GQueue>

typealias GResolver_autoptrVar = CPointerVarOf<GResolver_autoptr>

typealias GResolver_autoptr = CPointer<GResolver>

typealias GResolver_listautoptrVar = CPointerVarOf<GResolver_listautoptr>

typealias GResolver_listautoptr = CPointer<GList>

typealias GResolver_slistautoptrVar = CPointerVarOf<GResolver_slistautoptr>

typealias GResolver_slistautoptr = CPointer<GSList>

typealias GResolver_queueautoptrVar = CPointerVarOf<GResolver_queueautoptr>

typealias GResolver_queueautoptr = CPointer<GQueue>

typealias GResource_autoptrVar = CPointerVarOf<GResource_autoptr>

typealias GResource_autoptr = CPointer<GResource>

typealias GResource_listautoptrVar = CPointerVarOf<GResource_listautoptr>

typealias GResource_listautoptr = CPointer<GList>

typealias GResource_slistautoptrVar = CPointerVarOf<GResource_slistautoptr>

typealias GResource_slistautoptr = CPointer<GSList>

typealias GResource_queueautoptrVar = CPointerVarOf<GResource_queueautoptr>

typealias GResource_queueautoptr = CPointer<GQueue>

typealias GSeekable_autoptrVar = CPointerVarOf<GSeekable_autoptr>

typealias GSeekable_autoptr = CPointer<GSeekable>

typealias GSeekable_listautoptrVar = CPointerVarOf<GSeekable_listautoptr>

typealias GSeekable_listautoptr = CPointer<GList>

typealias GSeekable_slistautoptrVar = CPointerVarOf<GSeekable_slistautoptr>

typealias GSeekable_slistautoptr = CPointer<GSList>

typealias GSeekable_queueautoptrVar = CPointerVarOf<GSeekable_queueautoptr>

typealias GSeekable_queueautoptr = CPointer<GQueue>

typealias GSettingsBackend_autoptrVar = CPointerVarOf<GSettingsBackend_autoptr>

typealias GSettingsBackend_autoptr = CPointer<GSettingsBackend>

typealias GSettingsBackend_listautoptrVar = CPointerVarOf<GSettingsBackend_listautoptr>

typealias GSettingsBackend_listautoptr = CPointer<GList>

typealias GSettingsBackend_slistautoptrVar = CPointerVarOf<GSettingsBackend_slistautoptr>

typealias GSettingsBackend_slistautoptr = CPointer<GSList>

typealias GSettingsBackend_queueautoptrVar = CPointerVarOf<GSettingsBackend_queueautoptr>

typealias GSettingsBackend_queueautoptr = CPointer<GQueue>

typealias GSettingsSchema_autoptrVar = CPointerVarOf<GSettingsSchema_autoptr>

typealias GSettingsSchema_autoptr = CPointer<GSettingsSchema>

typealias GSettingsSchema_listautoptrVar = CPointerVarOf<GSettingsSchema_listautoptr>

typealias GSettingsSchema_listautoptr = CPointer<GList>

typealias GSettingsSchema_slistautoptrVar = CPointerVarOf<GSettingsSchema_slistautoptr>

typealias GSettingsSchema_slistautoptr = CPointer<GSList>

typealias GSettingsSchema_queueautoptrVar = CPointerVarOf<GSettingsSchema_queueautoptr>

typealias GSettingsSchema_queueautoptr = CPointer<GQueue>

typealias GSettingsSchemaKey_autoptrVar = CPointerVarOf<GSettingsSchemaKey_autoptr>

typealias GSettingsSchemaKey_autoptr = CPointer<GSettingsSchemaKey>

typealias GSettingsSchemaKey_listautoptrVar = CPointerVarOf<GSettingsSchemaKey_listautoptr>

typealias GSettingsSchemaKey_listautoptr = CPointer<GList>

typealias GSettingsSchemaKey_slistautoptrVar = CPointerVarOf<GSettingsSchemaKey_slistautoptr>

typealias GSettingsSchemaKey_slistautoptr = CPointer<GSList>

typealias GSettingsSchemaKey_queueautoptrVar = CPointerVarOf<GSettingsSchemaKey_queueautoptr>

typealias GSettingsSchemaKey_queueautoptr = CPointer<GQueue>

typealias GSettingsSchemaSource_autoptrVar = CPointerVarOf<GSettingsSchemaSource_autoptr>

typealias GSettingsSchemaSource_autoptr = CPointer<GSettingsSchemaSource>

typealias GSettingsSchemaSource_listautoptrVar = CPointerVarOf<GSettingsSchemaSource_listautoptr>

typealias GSettingsSchemaSource_listautoptr = CPointer<GList>

typealias GSettingsSchemaSource_slistautoptrVar = CPointerVarOf<GSettingsSchemaSource_slistautoptr>

typealias GSettingsSchemaSource_slistautoptr = CPointer<GSList>

typealias GSettingsSchemaSource_queueautoptrVar = CPointerVarOf<GSettingsSchemaSource_queueautoptr>

typealias GSettingsSchemaSource_queueautoptr = CPointer<GQueue>

typealias GSettings_autoptrVar = CPointerVarOf<GSettings_autoptr>

typealias GSettings_autoptr = CPointer<GSettings>

typealias GSettings_listautoptrVar = CPointerVarOf<GSettings_listautoptr>

typealias GSettings_listautoptr = CPointer<GList>

typealias GSettings_slistautoptrVar = CPointerVarOf<GSettings_slistautoptr>

typealias GSettings_slistautoptr = CPointer<GSList>

typealias GSettings_queueautoptrVar = CPointerVarOf<GSettings_queueautoptr>

typealias GSettings_queueautoptr = CPointer<GQueue>

typealias GSimpleActionGroup_autoptrVar = CPointerVarOf<GSimpleActionGroup_autoptr>

typealias GSimpleActionGroup_autoptr = CPointer<GSimpleActionGroup>

typealias GSimpleActionGroup_listautoptrVar = CPointerVarOf<GSimpleActionGroup_listautoptr>

typealias GSimpleActionGroup_listautoptr = CPointer<GList>

typealias GSimpleActionGroup_slistautoptrVar = CPointerVarOf<GSimpleActionGroup_slistautoptr>

typealias GSimpleActionGroup_slistautoptr = CPointer<GSList>

typealias GSimpleActionGroup_queueautoptrVar = CPointerVarOf<GSimpleActionGroup_queueautoptr>

typealias GSimpleActionGroup_queueautoptr = CPointer<GQueue>

typealias GSimpleAction_autoptrVar = CPointerVarOf<GSimpleAction_autoptr>

typealias GSimpleAction_autoptr = CPointer<GSimpleAction>

typealias GSimpleAction_listautoptrVar = CPointerVarOf<GSimpleAction_listautoptr>

typealias GSimpleAction_listautoptr = CPointer<GList>

typealias GSimpleAction_slistautoptrVar = CPointerVarOf<GSimpleAction_slistautoptr>

typealias GSimpleAction_slistautoptr = CPointer<GSList>

typealias GSimpleAction_queueautoptrVar = CPointerVarOf<GSimpleAction_queueautoptr>

typealias GSimpleAction_queueautoptr = CPointer<GQueue>

typealias GSimpleAsyncResult_autoptrVar = CPointerVarOf<GSimpleAsyncResult_autoptr>

typealias GSimpleAsyncResult_autoptr = CPointer<GSimpleAsyncResult>

typealias GSimpleAsyncResult_listautoptrVar = CPointerVarOf<GSimpleAsyncResult_listautoptr>

typealias GSimpleAsyncResult_listautoptr = CPointer<GList>

typealias GSimpleAsyncResult_slistautoptrVar = CPointerVarOf<GSimpleAsyncResult_slistautoptr>

typealias GSimpleAsyncResult_slistautoptr = CPointer<GSList>

typealias GSimpleAsyncResult_queueautoptrVar = CPointerVarOf<GSimpleAsyncResult_queueautoptr>

typealias GSimpleAsyncResult_queueautoptr = CPointer<GQueue>

typealias GSimplePermission_autoptrVar = CPointerVarOf<GSimplePermission_autoptr>

typealias GSimplePermission_autoptr = CPointer<GSimplePermission>

typealias GSimplePermission_listautoptrVar = CPointerVarOf<GSimplePermission_listautoptr>

typealias GSimplePermission_listautoptr = CPointer<GList>

typealias GSimplePermission_slistautoptrVar = CPointerVarOf<GSimplePermission_slistautoptr>

typealias GSimplePermission_slistautoptr = CPointer<GSList>

typealias GSimplePermission_queueautoptrVar = CPointerVarOf<GSimplePermission_queueautoptr>

typealias GSimplePermission_queueautoptr = CPointer<GQueue>

typealias GSimpleProxyResolver_autoptrVar = CPointerVarOf<GSimpleProxyResolver_autoptr>

typealias GSimpleProxyResolver_autoptr = CPointer<GSimpleProxyResolver>

typealias GSimpleProxyResolver_listautoptrVar = CPointerVarOf<GSimpleProxyResolver_listautoptr>

typealias GSimpleProxyResolver_listautoptr = CPointer<GList>

typealias GSimpleProxyResolver_slistautoptrVar = CPointerVarOf<GSimpleProxyResolver_slistautoptr>

typealias GSimpleProxyResolver_slistautoptr = CPointer<GSList>

typealias GSimpleProxyResolver_queueautoptrVar = CPointerVarOf<GSimpleProxyResolver_queueautoptr>

typealias GSimpleProxyResolver_queueautoptr = CPointer<GQueue>

typealias GSocketAddressEnumerator_autoptrVar = CPointerVarOf<GSocketAddressEnumerator_autoptr>

typealias GSocketAddressEnumerator_autoptr = CPointer<GSocketAddressEnumerator>

typealias GSocketAddressEnumerator_listautoptrVar = CPointerVarOf<GSocketAddressEnumerator_listautoptr>

typealias GSocketAddressEnumerator_listautoptr = CPointer<GList>

typealias GSocketAddressEnumerator_slistautoptrVar = CPointerVarOf<GSocketAddressEnumerator_slistautoptr>

typealias GSocketAddressEnumerator_slistautoptr = CPointer<GSList>

typealias GSocketAddressEnumerator_queueautoptrVar = CPointerVarOf<GSocketAddressEnumerator_queueautoptr>

typealias GSocketAddressEnumerator_queueautoptr = CPointer<GQueue>

typealias GSocketAddress_autoptrVar = CPointerVarOf<GSocketAddress_autoptr>

typealias GSocketAddress_autoptr = CPointer<GSocketAddress>

typealias GSocketAddress_listautoptrVar = CPointerVarOf<GSocketAddress_listautoptr>

typealias GSocketAddress_listautoptr = CPointer<GList>

typealias GSocketAddress_slistautoptrVar = CPointerVarOf<GSocketAddress_slistautoptr>

typealias GSocketAddress_slistautoptr = CPointer<GSList>

typealias GSocketAddress_queueautoptrVar = CPointerVarOf<GSocketAddress_queueautoptr>

typealias GSocketAddress_queueautoptr = CPointer<GQueue>

typealias GSocketClient_autoptrVar = CPointerVarOf<GSocketClient_autoptr>

typealias GSocketClient_autoptr = CPointer<GSocketClient>

typealias GSocketClient_listautoptrVar = CPointerVarOf<GSocketClient_listautoptr>

typealias GSocketClient_listautoptr = CPointer<GList>

typealias GSocketClient_slistautoptrVar = CPointerVarOf<GSocketClient_slistautoptr>

typealias GSocketClient_slistautoptr = CPointer<GSList>

typealias GSocketClient_queueautoptrVar = CPointerVarOf<GSocketClient_queueautoptr>

typealias GSocketClient_queueautoptr = CPointer<GQueue>

typealias GSocketConnectable_autoptrVar = CPointerVarOf<GSocketConnectable_autoptr>

typealias GSocketConnectable_autoptr = CPointer<GSocketConnectable>

typealias GSocketConnectable_listautoptrVar = CPointerVarOf<GSocketConnectable_listautoptr>

typealias GSocketConnectable_listautoptr = CPointer<GList>

typealias GSocketConnectable_slistautoptrVar = CPointerVarOf<GSocketConnectable_slistautoptr>

typealias GSocketConnectable_slistautoptr = CPointer<GSList>

typealias GSocketConnectable_queueautoptrVar = CPointerVarOf<GSocketConnectable_queueautoptr>

typealias GSocketConnectable_queueautoptr = CPointer<GQueue>

typealias GSocketConnection_autoptrVar = CPointerVarOf<GSocketConnection_autoptr>

typealias GSocketConnection_autoptr = CPointer<GSocketConnection>

typealias GSocketConnection_listautoptrVar = CPointerVarOf<GSocketConnection_listautoptr>

typealias GSocketConnection_listautoptr = CPointer<GList>

typealias GSocketConnection_slistautoptrVar = CPointerVarOf<GSocketConnection_slistautoptr>

typealias GSocketConnection_slistautoptr = CPointer<GSList>

typealias GSocketConnection_queueautoptrVar = CPointerVarOf<GSocketConnection_queueautoptr>

typealias GSocketConnection_queueautoptr = CPointer<GQueue>

typealias GSocketControlMessage_autoptrVar = CPointerVarOf<GSocketControlMessage_autoptr>

typealias GSocketControlMessage_autoptr = CPointer<GSocketControlMessage>

typealias GSocketControlMessage_listautoptrVar = CPointerVarOf<GSocketControlMessage_listautoptr>

typealias GSocketControlMessage_listautoptr = CPointer<GList>

typealias GSocketControlMessage_slistautoptrVar = CPointerVarOf<GSocketControlMessage_slistautoptr>

typealias GSocketControlMessage_slistautoptr = CPointer<GSList>

typealias GSocketControlMessage_queueautoptrVar = CPointerVarOf<GSocketControlMessage_queueautoptr>

typealias GSocketControlMessage_queueautoptr = CPointer<GQueue>

typealias GSocket_autoptrVar = CPointerVarOf<GSocket_autoptr>

typealias GSocket_autoptr = CPointer<GSocket>

typealias GSocket_listautoptrVar = CPointerVarOf<GSocket_listautoptr>

typealias GSocket_listautoptr = CPointer<GList>

typealias GSocket_slistautoptrVar = CPointerVarOf<GSocket_slistautoptr>

typealias GSocket_slistautoptr = CPointer<GSList>

typealias GSocket_queueautoptrVar = CPointerVarOf<GSocket_queueautoptr>

typealias GSocket_queueautoptr = CPointer<GQueue>

typealias GSocketListener_autoptrVar = CPointerVarOf<GSocketListener_autoptr>

typealias GSocketListener_autoptr = CPointer<GSocketListener>

typealias GSocketListener_listautoptrVar = CPointerVarOf<GSocketListener_listautoptr>

typealias GSocketListener_listautoptr = CPointer<GList>

typealias GSocketListener_slistautoptrVar = CPointerVarOf<GSocketListener_slistautoptr>

typealias GSocketListener_slistautoptr = CPointer<GSList>

typealias GSocketListener_queueautoptrVar = CPointerVarOf<GSocketListener_queueautoptr>

typealias GSocketListener_queueautoptr = CPointer<GQueue>

typealias GSocketService_autoptrVar = CPointerVarOf<GSocketService_autoptr>

typealias GSocketService_autoptr = CPointer<GSocketService>

typealias GSocketService_listautoptrVar = CPointerVarOf<GSocketService_listautoptr>

typealias GSocketService_listautoptr = CPointer<GList>

typealias GSocketService_slistautoptrVar = CPointerVarOf<GSocketService_slistautoptr>

typealias GSocketService_slistautoptr = CPointer<GSList>

typealias GSocketService_queueautoptrVar = CPointerVarOf<GSocketService_queueautoptr>

typealias GSocketService_queueautoptr = CPointer<GQueue>

typealias GSubprocess_autoptrVar = CPointerVarOf<GSubprocess_autoptr>

typealias GSubprocess_autoptr = CPointer<GSubprocess>

typealias GSubprocess_listautoptrVar = CPointerVarOf<GSubprocess_listautoptr>

typealias GSubprocess_listautoptr = CPointer<GList>

typealias GSubprocess_slistautoptrVar = CPointerVarOf<GSubprocess_slistautoptr>

typealias GSubprocess_slistautoptr = CPointer<GSList>

typealias GSubprocess_queueautoptrVar = CPointerVarOf<GSubprocess_queueautoptr>

typealias GSubprocess_queueautoptr = CPointer<GQueue>

typealias GSubprocessLauncher_autoptrVar = CPointerVarOf<GSubprocessLauncher_autoptr>

typealias GSubprocessLauncher_autoptr = CPointer<GSubprocessLauncher>

typealias GSubprocessLauncher_listautoptrVar = CPointerVarOf<GSubprocessLauncher_listautoptr>

typealias GSubprocessLauncher_listautoptr = CPointer<GList>

typealias GSubprocessLauncher_slistautoptrVar = CPointerVarOf<GSubprocessLauncher_slistautoptr>

typealias GSubprocessLauncher_slistautoptr = CPointer<GSList>

typealias GSubprocessLauncher_queueautoptrVar = CPointerVarOf<GSubprocessLauncher_queueautoptr>

typealias GSubprocessLauncher_queueautoptr = CPointer<GQueue>

typealias GTask_autoptrVar = CPointerVarOf<GTask_autoptr>

typealias GTask_autoptr = CPointer<GTask>

typealias GTask_listautoptrVar = CPointerVarOf<GTask_listautoptr>

typealias GTask_listautoptr = CPointer<GList>

typealias GTask_slistautoptrVar = CPointerVarOf<GTask_slistautoptr>

typealias GTask_slistautoptr = CPointer<GSList>

typealias GTask_queueautoptrVar = CPointerVarOf<GTask_queueautoptr>

typealias GTask_queueautoptr = CPointer<GQueue>

typealias GTcpConnection_autoptrVar = CPointerVarOf<GTcpConnection_autoptr>

typealias GTcpConnection_autoptr = CPointer<GTcpConnection>

typealias GTcpConnection_listautoptrVar = CPointerVarOf<GTcpConnection_listautoptr>

typealias GTcpConnection_listautoptr = CPointer<GList>

typealias GTcpConnection_slistautoptrVar = CPointerVarOf<GTcpConnection_slistautoptr>

typealias GTcpConnection_slistautoptr = CPointer<GSList>

typealias GTcpConnection_queueautoptrVar = CPointerVarOf<GTcpConnection_queueautoptr>

typealias GTcpConnection_queueautoptr = CPointer<GQueue>

typealias GTcpWrapperConnection_autoptrVar = CPointerVarOf<GTcpWrapperConnection_autoptr>

typealias GTcpWrapperConnection_autoptr = CPointer<GTcpWrapperConnection>

typealias GTcpWrapperConnection_listautoptrVar = CPointerVarOf<GTcpWrapperConnection_listautoptr>

typealias GTcpWrapperConnection_listautoptr = CPointer<GList>

typealias GTcpWrapperConnection_slistautoptrVar = CPointerVarOf<GTcpWrapperConnection_slistautoptr>

typealias GTcpWrapperConnection_slistautoptr = CPointer<GSList>

typealias GTcpWrapperConnection_queueautoptrVar = CPointerVarOf<GTcpWrapperConnection_queueautoptr>

typealias GTcpWrapperConnection_queueautoptr = CPointer<GQueue>

typealias GTestDBus_autoptrVar = CPointerVarOf<GTestDBus_autoptr>

typealias GTestDBus_autoptr = CPointer<GTestDBus>

typealias GTestDBus_listautoptrVar = CPointerVarOf<GTestDBus_listautoptr>

typealias GTestDBus_listautoptr = CPointer<GList>

typealias GTestDBus_slistautoptrVar = CPointerVarOf<GTestDBus_slistautoptr>

typealias GTestDBus_slistautoptr = CPointer<GSList>

typealias GTestDBus_queueautoptrVar = CPointerVarOf<GTestDBus_queueautoptr>

typealias GTestDBus_queueautoptr = CPointer<GQueue>

typealias GThemedIcon_autoptrVar = CPointerVarOf<GThemedIcon_autoptr>

typealias GThemedIcon_autoptr = CPointer<GThemedIcon>

typealias GThemedIcon_listautoptrVar = CPointerVarOf<GThemedIcon_listautoptr>

typealias GThemedIcon_listautoptr = CPointer<GList>

typealias GThemedIcon_slistautoptrVar = CPointerVarOf<GThemedIcon_slistautoptr>

typealias GThemedIcon_slistautoptr = CPointer<GSList>

typealias GThemedIcon_queueautoptrVar = CPointerVarOf<GThemedIcon_queueautoptr>

typealias GThemedIcon_queueautoptr = CPointer<GQueue>

typealias GThreadedSocketService_autoptrVar = CPointerVarOf<GThreadedSocketService_autoptr>

typealias GThreadedSocketService_autoptr = CPointer<GThreadedSocketService>

typealias GThreadedSocketService_listautoptrVar = CPointerVarOf<GThreadedSocketService_listautoptr>

typealias GThreadedSocketService_listautoptr = CPointer<GList>

typealias GThreadedSocketService_slistautoptrVar = CPointerVarOf<GThreadedSocketService_slistautoptr>

typealias GThreadedSocketService_slistautoptr = CPointer<GSList>

typealias GThreadedSocketService_queueautoptrVar = CPointerVarOf<GThreadedSocketService_queueautoptr>

typealias GThreadedSocketService_queueautoptr = CPointer<GQueue>

typealias GTlsBackend_autoptrVar = CPointerVarOf<GTlsBackend_autoptr>

typealias GTlsBackend_autoptr = CPointer<GTlsBackend>

typealias GTlsBackend_listautoptrVar = CPointerVarOf<GTlsBackend_listautoptr>

typealias GTlsBackend_listautoptr = CPointer<GList>

typealias GTlsBackend_slistautoptrVar = CPointerVarOf<GTlsBackend_slistautoptr>

typealias GTlsBackend_slistautoptr = CPointer<GSList>

typealias GTlsBackend_queueautoptrVar = CPointerVarOf<GTlsBackend_queueautoptr>

typealias GTlsBackend_queueautoptr = CPointer<GQueue>

typealias GTlsCertificate_autoptrVar = CPointerVarOf<GTlsCertificate_autoptr>

typealias GTlsCertificate_autoptr = CPointer<GTlsCertificate>

typealias GTlsCertificate_listautoptrVar = CPointerVarOf<GTlsCertificate_listautoptr>

typealias GTlsCertificate_listautoptr = CPointer<GList>

typealias GTlsCertificate_slistautoptrVar = CPointerVarOf<GTlsCertificate_slistautoptr>

typealias GTlsCertificate_slistautoptr = CPointer<GSList>

typealias GTlsCertificate_queueautoptrVar = CPointerVarOf<GTlsCertificate_queueautoptr>

typealias GTlsCertificate_queueautoptr = CPointer<GQueue>

typealias GTlsClientConnection_autoptrVar = CPointerVarOf<GTlsClientConnection_autoptr>

typealias GTlsClientConnection_autoptr = CPointer<GTlsClientConnection>

typealias GTlsClientConnection_listautoptrVar = CPointerVarOf<GTlsClientConnection_listautoptr>

typealias GTlsClientConnection_listautoptr = CPointer<GList>

typealias GTlsClientConnection_slistautoptrVar = CPointerVarOf<GTlsClientConnection_slistautoptr>

typealias GTlsClientConnection_slistautoptr = CPointer<GSList>

typealias GTlsClientConnection_queueautoptrVar = CPointerVarOf<GTlsClientConnection_queueautoptr>

typealias GTlsClientConnection_queueautoptr = CPointer<GQueue>

typealias GTlsConnection_autoptrVar = CPointerVarOf<GTlsConnection_autoptr>

typealias GTlsConnection_autoptr = CPointer<GTlsConnection>

typealias GTlsConnection_listautoptrVar = CPointerVarOf<GTlsConnection_listautoptr>

typealias GTlsConnection_listautoptr = CPointer<GList>

typealias GTlsConnection_slistautoptrVar = CPointerVarOf<GTlsConnection_slistautoptr>

typealias GTlsConnection_slistautoptr = CPointer<GSList>

typealias GTlsConnection_queueautoptrVar = CPointerVarOf<GTlsConnection_queueautoptr>

typealias GTlsConnection_queueautoptr = CPointer<GQueue>

typealias GTlsDatabase_autoptrVar = CPointerVarOf<GTlsDatabase_autoptr>

typealias GTlsDatabase_autoptr = CPointer<GTlsDatabase>

typealias GTlsDatabase_listautoptrVar = CPointerVarOf<GTlsDatabase_listautoptr>

typealias GTlsDatabase_listautoptr = CPointer<GList>

typealias GTlsDatabase_slistautoptrVar = CPointerVarOf<GTlsDatabase_slistautoptr>

typealias GTlsDatabase_slistautoptr = CPointer<GSList>

typealias GTlsDatabase_queueautoptrVar = CPointerVarOf<GTlsDatabase_queueautoptr>

typealias GTlsDatabase_queueautoptr = CPointer<GQueue>

typealias GTlsFileDatabase_autoptrVar = CPointerVarOf<GTlsFileDatabase_autoptr>

typealias GTlsFileDatabase_autoptr = CPointer<GTlsFileDatabase>

typealias GTlsFileDatabase_listautoptrVar = CPointerVarOf<GTlsFileDatabase_listautoptr>

typealias GTlsFileDatabase_listautoptr = CPointer<GList>

typealias GTlsFileDatabase_slistautoptrVar = CPointerVarOf<GTlsFileDatabase_slistautoptr>

typealias GTlsFileDatabase_slistautoptr = CPointer<GSList>

typealias GTlsFileDatabase_queueautoptrVar = CPointerVarOf<GTlsFileDatabase_queueautoptr>

typealias GTlsFileDatabase_queueautoptr = CPointer<GQueue>

typealias GTlsInteraction_autoptrVar = CPointerVarOf<GTlsInteraction_autoptr>

typealias GTlsInteraction_autoptr = CPointer<GTlsInteraction>

typealias GTlsInteraction_listautoptrVar = CPointerVarOf<GTlsInteraction_listautoptr>

typealias GTlsInteraction_listautoptr = CPointer<GList>

typealias GTlsInteraction_slistautoptrVar = CPointerVarOf<GTlsInteraction_slistautoptr>

typealias GTlsInteraction_slistautoptr = CPointer<GSList>

typealias GTlsInteraction_queueautoptrVar = CPointerVarOf<GTlsInteraction_queueautoptr>

typealias GTlsInteraction_queueautoptr = CPointer<GQueue>

typealias GTlsPassword_autoptrVar = CPointerVarOf<GTlsPassword_autoptr>

typealias GTlsPassword_autoptr = CPointer<GTlsPassword>

typealias GTlsPassword_listautoptrVar = CPointerVarOf<GTlsPassword_listautoptr>

typealias GTlsPassword_listautoptr = CPointer<GList>

typealias GTlsPassword_slistautoptrVar = CPointerVarOf<GTlsPassword_slistautoptr>

typealias GTlsPassword_slistautoptr = CPointer<GSList>

typealias GTlsPassword_queueautoptrVar = CPointerVarOf<GTlsPassword_queueautoptr>

typealias GTlsPassword_queueautoptr = CPointer<GQueue>

typealias GTlsServerConnection_autoptrVar = CPointerVarOf<GTlsServerConnection_autoptr>

typealias GTlsServerConnection_autoptr = CPointer<GTlsServerConnection>

typealias GTlsServerConnection_listautoptrVar = CPointerVarOf<GTlsServerConnection_listautoptr>

typealias GTlsServerConnection_listautoptr = CPointer<GList>

typealias GTlsServerConnection_slistautoptrVar = CPointerVarOf<GTlsServerConnection_slistautoptr>

typealias GTlsServerConnection_slistautoptr = CPointer<GSList>

typealias GTlsServerConnection_queueautoptrVar = CPointerVarOf<GTlsServerConnection_queueautoptr>

typealias GTlsServerConnection_queueautoptr = CPointer<GQueue>

typealias GVfs_autoptrVar = CPointerVarOf<GVfs_autoptr>

typealias GVfs_autoptr = CPointer<GVfs>

typealias GVfs_listautoptrVar = CPointerVarOf<GVfs_listautoptr>

typealias GVfs_listautoptr = CPointer<GList>

typealias GVfs_slistautoptrVar = CPointerVarOf<GVfs_slistautoptr>

typealias GVfs_slistautoptr = CPointer<GSList>

typealias GVfs_queueautoptrVar = CPointerVarOf<GVfs_queueautoptr>

typealias GVfs_queueautoptr = CPointer<GQueue>

typealias GVolume_autoptrVar = CPointerVarOf<GVolume_autoptr>

typealias GVolume_autoptr = CPointer<GVolume>

typealias GVolume_listautoptrVar = CPointerVarOf<GVolume_listautoptr>

typealias GVolume_listautoptr = CPointer<GList>

typealias GVolume_slistautoptrVar = CPointerVarOf<GVolume_slistautoptr>

typealias GVolume_slistautoptr = CPointer<GSList>

typealias GVolume_queueautoptrVar = CPointerVarOf<GVolume_queueautoptr>

typealias GVolume_queueautoptr = CPointer<GQueue>

typealias GVolumeMonitor_autoptrVar = CPointerVarOf<GVolumeMonitor_autoptr>

typealias GVolumeMonitor_autoptr = CPointer<GVolumeMonitor>

typealias GVolumeMonitor_listautoptrVar = CPointerVarOf<GVolumeMonitor_listautoptr>

typealias GVolumeMonitor_listautoptr = CPointer<GList>

typealias GVolumeMonitor_slistautoptrVar = CPointerVarOf<GVolumeMonitor_slistautoptr>

typealias GVolumeMonitor_slistautoptr = CPointer<GSList>

typealias GVolumeMonitor_queueautoptrVar = CPointerVarOf<GVolumeMonitor_queueautoptr>

typealias GVolumeMonitor_queueautoptr = CPointer<GQueue>

typealias GZlibCompressor_autoptrVar = CPointerVarOf<GZlibCompressor_autoptr>

typealias GZlibCompressor_autoptr = CPointer<GZlibCompressor>

typealias GZlibCompressor_listautoptrVar = CPointerVarOf<GZlibCompressor_listautoptr>

typealias GZlibCompressor_listautoptr = CPointer<GList>

typealias GZlibCompressor_slistautoptrVar = CPointerVarOf<GZlibCompressor_slistautoptr>

typealias GZlibCompressor_slistautoptr = CPointer<GSList>

typealias GZlibCompressor_queueautoptrVar = CPointerVarOf<GZlibCompressor_queueautoptr>

typealias GZlibCompressor_queueautoptr = CPointer<GQueue>

typealias GZlibDecompressor_autoptrVar = CPointerVarOf<GZlibDecompressor_autoptr>

typealias GZlibDecompressor_autoptr = CPointer<GZlibDecompressor>

typealias GZlibDecompressor_listautoptrVar = CPointerVarOf<GZlibDecompressor_listautoptr>

typealias GZlibDecompressor_listautoptr = CPointer<GList>

typealias GZlibDecompressor_slistautoptrVar = CPointerVarOf<GZlibDecompressor_slistautoptr>

typealias GZlibDecompressor_slistautoptr = CPointer<GSList>

typealias GZlibDecompressor_queueautoptrVar = CPointerVarOf<GZlibDecompressor_queueautoptr>

typealias GZlibDecompressor_queueautoptr = CPointer<GQueue>


val G_FORMAT_SIZE_DEFAULT: GFormatSizeFlags get() = 0u

val G_FORMAT_SIZE_LONG_FORMAT: GFormatSizeFlags get() = 1u

val G_FORMAT_SIZE_IEC_UNITS: GFormatSizeFlags get() = 2u

val G_FORMAT_SIZE_BITS: GFormatSizeFlags get() = 4u

typealias GFormatSizeFlagsVar = UIntVarOf<GFormatSizeFlags>

typealias GFormatSizeFlags = UInt


val G_DATE_DAY: GDateDMY get() = 0u

val G_DATE_MONTH: GDateDMY get() = 1u

val G_DATE_YEAR: GDateDMY get() = 2u

typealias GDateDMYVar = UIntVarOf<GDateDMY>

typealias GDateDMY = UInt


val G_DATE_BAD_WEEKDAY: GDateWeekday get() = 0u

val G_DATE_MONDAY: GDateWeekday get() = 1u

val G_DATE_TUESDAY: GDateWeekday get() = 2u

val G_DATE_WEDNESDAY: GDateWeekday get() = 3u

val G_DATE_THURSDAY: GDateWeekday get() = 4u

val G_DATE_FRIDAY: GDateWeekday get() = 5u

val G_DATE_SATURDAY: GDateWeekday get() = 6u

val G_DATE_SUNDAY: GDateWeekday get() = 7u

typealias GDateWeekdayVar = UIntVarOf<GDateWeekday>

typealias GDateWeekday = UInt


val G_DATE_BAD_MONTH: GDateMonth get() = 0u

val G_DATE_JANUARY: GDateMonth get() = 1u

val G_DATE_FEBRUARY: GDateMonth get() = 2u

val G_DATE_MARCH: GDateMonth get() = 3u

val G_DATE_APRIL: GDateMonth get() = 4u

val G_DATE_MAY: GDateMonth get() = 5u

val G_DATE_JUNE: GDateMonth get() = 6u

val G_DATE_JULY: GDateMonth get() = 7u

val G_DATE_AUGUST: GDateMonth get() = 8u

val G_DATE_SEPTEMBER: GDateMonth get() = 9u

val G_DATE_OCTOBER: GDateMonth get() = 10u

val G_DATE_NOVEMBER: GDateMonth get() = 11u

val G_DATE_DECEMBER: GDateMonth get() = 12u

typealias GDateMonthVar = UIntVarOf<GDateMonth>

typealias GDateMonth = UInt


val G_FILE_TEST_IS_REGULAR: GFileTest get() = 1u

val G_FILE_TEST_IS_SYMLINK: GFileTest get() = 2u

val G_FILE_TEST_IS_DIR: GFileTest get() = 4u

val G_FILE_TEST_IS_EXECUTABLE: GFileTest get() = 8u

val G_FILE_TEST_EXISTS: GFileTest get() = 16u

typealias GFileTestVar = UIntVarOf<GFileTest>

typealias GFileTest = UInt


val G_TRAVERSE_LEAVES: GTraverseFlags get() = 1u

val G_TRAVERSE_NON_LEAVES: GTraverseFlags get() = 2u

val G_TRAVERSE_ALL: GTraverseFlags get() = 3u

val G_TRAVERSE_MASK: GTraverseFlags get() = 3u

val G_TRAVERSE_LEAFS: GTraverseFlags get() = 1u

val G_TRAVERSE_NON_LEAFS: GTraverseFlags get() = 2u

typealias GTraverseFlagsVar = UIntVarOf<GTraverseFlags>

typealias GTraverseFlags = UInt


val G_HOOK_FLAG_ACTIVE: GHookFlagMask get() = 1u

val G_HOOK_FLAG_IN_CALL: GHookFlagMask get() = 2u

val G_HOOK_FLAG_MASK: GHookFlagMask get() = 15u

typealias GHookFlagMaskVar = UIntVarOf<GHookFlagMask>

typealias GHookFlagMask = UInt


val G_IO_IN: GIOCondition get() = 1u

val G_IO_OUT: GIOCondition get() = 4u

val G_IO_PRI: GIOCondition get() = 2u

val G_IO_ERR: GIOCondition get() = 8u

val G_IO_HUP: GIOCondition get() = 16u

val G_IO_NVAL: GIOCondition get() = 32u

typealias GIOConditionVar = UIntVarOf<GIOCondition>

typealias GIOCondition = UInt


val G_UNICODE_SCRIPT_INVALID_CODE: GUnicodeScript get() = -1

val G_UNICODE_SCRIPT_COMMON: GUnicodeScript get() = 0

val G_UNICODE_SCRIPT_INHERITED: GUnicodeScript get() = 1

val G_UNICODE_SCRIPT_ARABIC: GUnicodeScript get() = 2

val G_UNICODE_SCRIPT_ARMENIAN: GUnicodeScript get() = 3

val G_UNICODE_SCRIPT_BENGALI: GUnicodeScript get() = 4

val G_UNICODE_SCRIPT_BOPOMOFO: GUnicodeScript get() = 5

val G_UNICODE_SCRIPT_CHEROKEE: GUnicodeScript get() = 6

val G_UNICODE_SCRIPT_COPTIC: GUnicodeScript get() = 7

val G_UNICODE_SCRIPT_CYRILLIC: GUnicodeScript get() = 8

val G_UNICODE_SCRIPT_DESERET: GUnicodeScript get() = 9

val G_UNICODE_SCRIPT_DEVANAGARI: GUnicodeScript get() = 10

val G_UNICODE_SCRIPT_ETHIOPIC: GUnicodeScript get() = 11

val G_UNICODE_SCRIPT_GEORGIAN: GUnicodeScript get() = 12

val G_UNICODE_SCRIPT_GOTHIC: GUnicodeScript get() = 13

val G_UNICODE_SCRIPT_GREEK: GUnicodeScript get() = 14

val G_UNICODE_SCRIPT_GUJARATI: GUnicodeScript get() = 15

val G_UNICODE_SCRIPT_GURMUKHI: GUnicodeScript get() = 16

val G_UNICODE_SCRIPT_HAN: GUnicodeScript get() = 17

val G_UNICODE_SCRIPT_HANGUL: GUnicodeScript get() = 18

val G_UNICODE_SCRIPT_HEBREW: GUnicodeScript get() = 19

val G_UNICODE_SCRIPT_HIRAGANA: GUnicodeScript get() = 20

val G_UNICODE_SCRIPT_KANNADA: GUnicodeScript get() = 21

val G_UNICODE_SCRIPT_KATAKANA: GUnicodeScript get() = 22

val G_UNICODE_SCRIPT_KHMER: GUnicodeScript get() = 23

val G_UNICODE_SCRIPT_LAO: GUnicodeScript get() = 24

val G_UNICODE_SCRIPT_LATIN: GUnicodeScript get() = 25

val G_UNICODE_SCRIPT_MALAYALAM: GUnicodeScript get() = 26

val G_UNICODE_SCRIPT_MONGOLIAN: GUnicodeScript get() = 27

val G_UNICODE_SCRIPT_MYANMAR: GUnicodeScript get() = 28

val G_UNICODE_SCRIPT_OGHAM: GUnicodeScript get() = 29

val G_UNICODE_SCRIPT_OLD_ITALIC: GUnicodeScript get() = 30

val G_UNICODE_SCRIPT_ORIYA: GUnicodeScript get() = 31

val G_UNICODE_SCRIPT_RUNIC: GUnicodeScript get() = 32

val G_UNICODE_SCRIPT_SINHALA: GUnicodeScript get() = 33

val G_UNICODE_SCRIPT_SYRIAC: GUnicodeScript get() = 34

val G_UNICODE_SCRIPT_TAMIL: GUnicodeScript get() = 35

val G_UNICODE_SCRIPT_TELUGU: GUnicodeScript get() = 36

val G_UNICODE_SCRIPT_THAANA: GUnicodeScript get() = 37

val G_UNICODE_SCRIPT_THAI: GUnicodeScript get() = 38

val G_UNICODE_SCRIPT_TIBETAN: GUnicodeScript get() = 39

val G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL: GUnicodeScript get() = 40

val G_UNICODE_SCRIPT_YI: GUnicodeScript get() = 41

val G_UNICODE_SCRIPT_TAGALOG: GUnicodeScript get() = 42

val G_UNICODE_SCRIPT_HANUNOO: GUnicodeScript get() = 43

val G_UNICODE_SCRIPT_BUHID: GUnicodeScript get() = 44

val G_UNICODE_SCRIPT_TAGBANWA: GUnicodeScript get() = 45

val G_UNICODE_SCRIPT_BRAILLE: GUnicodeScript get() = 46

val G_UNICODE_SCRIPT_CYPRIOT: GUnicodeScript get() = 47

val G_UNICODE_SCRIPT_LIMBU: GUnicodeScript get() = 48

val G_UNICODE_SCRIPT_OSMANYA: GUnicodeScript get() = 49

val G_UNICODE_SCRIPT_SHAVIAN: GUnicodeScript get() = 50

val G_UNICODE_SCRIPT_LINEAR_B: GUnicodeScript get() = 51

val G_UNICODE_SCRIPT_TAI_LE: GUnicodeScript get() = 52

val G_UNICODE_SCRIPT_UGARITIC: GUnicodeScript get() = 53

val G_UNICODE_SCRIPT_NEW_TAI_LUE: GUnicodeScript get() = 54

val G_UNICODE_SCRIPT_BUGINESE: GUnicodeScript get() = 55

val G_UNICODE_SCRIPT_GLAGOLITIC: GUnicodeScript get() = 56

val G_UNICODE_SCRIPT_TIFINAGH: GUnicodeScript get() = 57

val G_UNICODE_SCRIPT_SYLOTI_NAGRI: GUnicodeScript get() = 58

val G_UNICODE_SCRIPT_OLD_PERSIAN: GUnicodeScript get() = 59

val G_UNICODE_SCRIPT_KHAROSHTHI: GUnicodeScript get() = 60

val G_UNICODE_SCRIPT_UNKNOWN: GUnicodeScript get() = 61

val G_UNICODE_SCRIPT_BALINESE: GUnicodeScript get() = 62

val G_UNICODE_SCRIPT_CUNEIFORM: GUnicodeScript get() = 63

val G_UNICODE_SCRIPT_PHOENICIAN: GUnicodeScript get() = 64

val G_UNICODE_SCRIPT_PHAGS_PA: GUnicodeScript get() = 65

val G_UNICODE_SCRIPT_NKO: GUnicodeScript get() = 66

val G_UNICODE_SCRIPT_KAYAH_LI: GUnicodeScript get() = 67

val G_UNICODE_SCRIPT_LEPCHA: GUnicodeScript get() = 68

val G_UNICODE_SCRIPT_REJANG: GUnicodeScript get() = 69

val G_UNICODE_SCRIPT_SUNDANESE: GUnicodeScript get() = 70

val G_UNICODE_SCRIPT_SAURASHTRA: GUnicodeScript get() = 71

val G_UNICODE_SCRIPT_CHAM: GUnicodeScript get() = 72

val G_UNICODE_SCRIPT_OL_CHIKI: GUnicodeScript get() = 73

val G_UNICODE_SCRIPT_VAI: GUnicodeScript get() = 74

val G_UNICODE_SCRIPT_CARIAN: GUnicodeScript get() = 75

val G_UNICODE_SCRIPT_LYCIAN: GUnicodeScript get() = 76

val G_UNICODE_SCRIPT_LYDIAN: GUnicodeScript get() = 77

val G_UNICODE_SCRIPT_AVESTAN: GUnicodeScript get() = 78

val G_UNICODE_SCRIPT_BAMUM: GUnicodeScript get() = 79

val G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS: GUnicodeScript get() = 80

val G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC: GUnicodeScript get() = 81

val G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI: GUnicodeScript get() = 82

val G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN: GUnicodeScript get() = 83

val G_UNICODE_SCRIPT_JAVANESE: GUnicodeScript get() = 84

val G_UNICODE_SCRIPT_KAITHI: GUnicodeScript get() = 85

val G_UNICODE_SCRIPT_LISU: GUnicodeScript get() = 86

val G_UNICODE_SCRIPT_MEETEI_MAYEK: GUnicodeScript get() = 87

val G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN: GUnicodeScript get() = 88

val G_UNICODE_SCRIPT_OLD_TURKIC: GUnicodeScript get() = 89

val G_UNICODE_SCRIPT_SAMARITAN: GUnicodeScript get() = 90

val G_UNICODE_SCRIPT_TAI_THAM: GUnicodeScript get() = 91

val G_UNICODE_SCRIPT_TAI_VIET: GUnicodeScript get() = 92

val G_UNICODE_SCRIPT_BATAK: GUnicodeScript get() = 93

val G_UNICODE_SCRIPT_BRAHMI: GUnicodeScript get() = 94

val G_UNICODE_SCRIPT_MANDAIC: GUnicodeScript get() = 95

val G_UNICODE_SCRIPT_CHAKMA: GUnicodeScript get() = 96

val G_UNICODE_SCRIPT_MEROITIC_CURSIVE: GUnicodeScript get() = 97

val G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: GUnicodeScript get() = 98

val G_UNICODE_SCRIPT_MIAO: GUnicodeScript get() = 99

val G_UNICODE_SCRIPT_SHARADA: GUnicodeScript get() = 100

val G_UNICODE_SCRIPT_SORA_SOMPENG: GUnicodeScript get() = 101

val G_UNICODE_SCRIPT_TAKRI: GUnicodeScript get() = 102

val G_UNICODE_SCRIPT_BASSA_VAH: GUnicodeScript get() = 103

val G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN: GUnicodeScript get() = 104

val G_UNICODE_SCRIPT_DUPLOYAN: GUnicodeScript get() = 105

val G_UNICODE_SCRIPT_ELBASAN: GUnicodeScript get() = 106

val G_UNICODE_SCRIPT_GRANTHA: GUnicodeScript get() = 107

val G_UNICODE_SCRIPT_KHOJKI: GUnicodeScript get() = 108

val G_UNICODE_SCRIPT_KHUDAWADI: GUnicodeScript get() = 109

val G_UNICODE_SCRIPT_LINEAR_A: GUnicodeScript get() = 110

val G_UNICODE_SCRIPT_MAHAJANI: GUnicodeScript get() = 111

val G_UNICODE_SCRIPT_MANICHAEAN: GUnicodeScript get() = 112

val G_UNICODE_SCRIPT_MENDE_KIKAKUI: GUnicodeScript get() = 113

val G_UNICODE_SCRIPT_MODI: GUnicodeScript get() = 114

val G_UNICODE_SCRIPT_MRO: GUnicodeScript get() = 115

val G_UNICODE_SCRIPT_NABATAEAN: GUnicodeScript get() = 116

val G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN: GUnicodeScript get() = 117

val G_UNICODE_SCRIPT_OLD_PERMIC: GUnicodeScript get() = 118

val G_UNICODE_SCRIPT_PAHAWH_HMONG: GUnicodeScript get() = 119

val G_UNICODE_SCRIPT_PALMYRENE: GUnicodeScript get() = 120

val G_UNICODE_SCRIPT_PAU_CIN_HAU: GUnicodeScript get() = 121

val G_UNICODE_SCRIPT_PSALTER_PAHLAVI: GUnicodeScript get() = 122

val G_UNICODE_SCRIPT_SIDDHAM: GUnicodeScript get() = 123

val G_UNICODE_SCRIPT_TIRHUTA: GUnicodeScript get() = 124

val G_UNICODE_SCRIPT_WARANG_CITI: GUnicodeScript get() = 125

val G_UNICODE_SCRIPT_AHOM: GUnicodeScript get() = 126

val G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS: GUnicodeScript get() = 127

val G_UNICODE_SCRIPT_HATRAN: GUnicodeScript get() = 128

val G_UNICODE_SCRIPT_MULTANI: GUnicodeScript get() = 129

val G_UNICODE_SCRIPT_OLD_HUNGARIAN: GUnicodeScript get() = 130

val G_UNICODE_SCRIPT_SIGNWRITING: GUnicodeScript get() = 131

val G_UNICODE_SCRIPT_ADLAM: GUnicodeScript get() = 132

val G_UNICODE_SCRIPT_BHAIKSUKI: GUnicodeScript get() = 133

val G_UNICODE_SCRIPT_MARCHEN: GUnicodeScript get() = 134

val G_UNICODE_SCRIPT_NEWA: GUnicodeScript get() = 135

val G_UNICODE_SCRIPT_OSAGE: GUnicodeScript get() = 136

val G_UNICODE_SCRIPT_TANGUT: GUnicodeScript get() = 137

val G_UNICODE_SCRIPT_MASARAM_GONDI: GUnicodeScript get() = 138

val G_UNICODE_SCRIPT_NUSHU: GUnicodeScript get() = 139

val G_UNICODE_SCRIPT_SOYOMBO: GUnicodeScript get() = 140

val G_UNICODE_SCRIPT_ZANABAZAR_SQUARE: GUnicodeScript get() = 141

val G_UNICODE_SCRIPT_DOGRA: GUnicodeScript get() = 142

val G_UNICODE_SCRIPT_GUNJALA_GONDI: GUnicodeScript get() = 143

val G_UNICODE_SCRIPT_HANIFI_ROHINGYA: GUnicodeScript get() = 144

val G_UNICODE_SCRIPT_MAKASAR: GUnicodeScript get() = 145

val G_UNICODE_SCRIPT_MEDEFAIDRIN: GUnicodeScript get() = 146

val G_UNICODE_SCRIPT_OLD_SOGDIAN: GUnicodeScript get() = 147

val G_UNICODE_SCRIPT_SOGDIAN: GUnicodeScript get() = 148

val G_UNICODE_SCRIPT_ELYMAIC: GUnicodeScript get() = 149

val G_UNICODE_SCRIPT_NANDINAGARI: GUnicodeScript get() = 150

val G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG: GUnicodeScript get() = 151

val G_UNICODE_SCRIPT_WANCHO: GUnicodeScript get() = 152

typealias GUnicodeScriptVar = IntVarOf<GUnicodeScript>

typealias GUnicodeScript = Int


val G_NORMALIZE_DEFAULT: GNormalizeMode get() = 0u

val G_NORMALIZE_NFD: GNormalizeMode get() = 0u

val G_NORMALIZE_DEFAULT_COMPOSE: GNormalizeMode get() = 1u

val G_NORMALIZE_NFC: GNormalizeMode get() = 1u

val G_NORMALIZE_ALL: GNormalizeMode get() = 2u

val G_NORMALIZE_NFKD: GNormalizeMode get() = 2u

val G_NORMALIZE_ALL_COMPOSE: GNormalizeMode get() = 3u

val G_NORMALIZE_NFKC: GNormalizeMode get() = 3u

typealias GNormalizeModeVar = UIntVarOf<GNormalizeMode>

typealias GNormalizeMode = UInt


val G_IO_FLAG_APPEND: GIOFlags get() = 1u

val G_IO_FLAG_NONBLOCK: GIOFlags get() = 2u

val G_IO_FLAG_IS_READABLE: GIOFlags get() = 4u

val G_IO_FLAG_IS_WRITABLE: GIOFlags get() = 8u

val G_IO_FLAG_IS_WRITEABLE: GIOFlags get() = 8u

val G_IO_FLAG_IS_SEEKABLE: GIOFlags get() = 16u

val G_IO_FLAG_MASK: GIOFlags get() = 31u

val G_IO_FLAG_GET_MASK: GIOFlags get() = 31u

val G_IO_FLAG_SET_MASK: GIOFlags get() = 3u

typealias GIOFlagsVar = UIntVarOf<GIOFlags>

typealias GIOFlags = UInt


val G_KEY_FILE_NONE: GKeyFileFlags get() = 0u

val G_KEY_FILE_KEEP_COMMENTS: GKeyFileFlags get() = 1u

val G_KEY_FILE_KEEP_TRANSLATIONS: GKeyFileFlags get() = 2u

typealias GKeyFileFlagsVar = UIntVarOf<GKeyFileFlags>

typealias GKeyFileFlags = UInt


val G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: GMarkupParseFlags get() = 1u

val G_MARKUP_TREAT_CDATA_AS_TEXT: GMarkupParseFlags get() = 2u

val G_MARKUP_PREFIX_ERROR_POSITION: GMarkupParseFlags get() = 4u

val G_MARKUP_IGNORE_QUALIFIED: GMarkupParseFlags get() = 8u

typealias GMarkupParseFlagsVar = UIntVarOf<GMarkupParseFlags>

typealias GMarkupParseFlags = UInt


val G_MARKUP_COLLECT_INVALID: GMarkupCollectType get() = 0u

val G_MARKUP_COLLECT_STRING: GMarkupCollectType get() = 1u

val G_MARKUP_COLLECT_STRDUP: GMarkupCollectType get() = 2u

val G_MARKUP_COLLECT_BOOLEAN: GMarkupCollectType get() = 3u

val G_MARKUP_COLLECT_TRISTATE: GMarkupCollectType get() = 4u

val G_MARKUP_COLLECT_OPTIONAL: GMarkupCollectType get() = 65536u

typealias GMarkupCollectTypeVar = UIntVarOf<GMarkupCollectType>

typealias GMarkupCollectType = UInt


val G_VARIANT_CLASS_BOOLEAN: GVariantClass get() = 98u

val G_VARIANT_CLASS_BYTE: GVariantClass get() = 121u

val G_VARIANT_CLASS_INT16: GVariantClass get() = 110u

val G_VARIANT_CLASS_UINT16: GVariantClass get() = 113u

val G_VARIANT_CLASS_INT32: GVariantClass get() = 105u

val G_VARIANT_CLASS_UINT32: GVariantClass get() = 117u

val G_VARIANT_CLASS_INT64: GVariantClass get() = 120u

val G_VARIANT_CLASS_UINT64: GVariantClass get() = 116u

val G_VARIANT_CLASS_HANDLE: GVariantClass get() = 104u

val G_VARIANT_CLASS_DOUBLE: GVariantClass get() = 100u

val G_VARIANT_CLASS_STRING: GVariantClass get() = 115u

val G_VARIANT_CLASS_OBJECT_PATH: GVariantClass get() = 111u

val G_VARIANT_CLASS_SIGNATURE: GVariantClass get() = 103u

val G_VARIANT_CLASS_VARIANT: GVariantClass get() = 118u

val G_VARIANT_CLASS_MAYBE: GVariantClass get() = 109u

val G_VARIANT_CLASS_ARRAY: GVariantClass get() = 97u

val G_VARIANT_CLASS_TUPLE: GVariantClass get() = 40u

val G_VARIANT_CLASS_DICT_ENTRY: GVariantClass get() = 123u

typealias GVariantClassVar = UIntVarOf<GVariantClass>

typealias GVariantClass = UInt


val G_LOG_FLAG_RECURSION: GLogLevelFlags get() = 1

val G_LOG_FLAG_FATAL: GLogLevelFlags get() = 2

val G_LOG_LEVEL_ERROR: GLogLevelFlags get() = 4

val G_LOG_LEVEL_CRITICAL: GLogLevelFlags get() = 8

val G_LOG_LEVEL_WARNING: GLogLevelFlags get() = 16

val G_LOG_LEVEL_MESSAGE: GLogLevelFlags get() = 32

val G_LOG_LEVEL_INFO: GLogLevelFlags get() = 64

val G_LOG_LEVEL_DEBUG: GLogLevelFlags get() = 128

val G_LOG_LEVEL_MASK: GLogLevelFlags get() = -4

typealias GLogLevelFlagsVar = IntVarOf<GLogLevelFlags>

typealias GLogLevelFlags = Int


val G_LOG_WRITER_HANDLED: GLogWriterOutput get() = 1u

val G_LOG_WRITER_UNHANDLED: GLogWriterOutput get() = 0u

typealias GLogWriterOutputVar = UIntVarOf<GLogWriterOutput>

typealias GLogWriterOutput = UInt


val G_OPTION_FLAG_NONE: GOptionFlags get() = 0u

val G_OPTION_FLAG_HIDDEN: GOptionFlags get() = 1u

val G_OPTION_FLAG_IN_MAIN: GOptionFlags get() = 2u

val G_OPTION_FLAG_REVERSE: GOptionFlags get() = 4u

val G_OPTION_FLAG_NO_ARG: GOptionFlags get() = 8u

val G_OPTION_FLAG_FILENAME: GOptionFlags get() = 16u

val G_OPTION_FLAG_OPTIONAL_ARG: GOptionFlags get() = 32u

val G_OPTION_FLAG_NOALIAS: GOptionFlags get() = 64u

typealias GOptionFlagsVar = UIntVarOf<GOptionFlags>

typealias GOptionFlags = UInt


val G_REGEX_ERROR_COMPILE: GRegexError get() = 0u

val G_REGEX_ERROR_OPTIMIZE: GRegexError get() = 1u

val G_REGEX_ERROR_REPLACE: GRegexError get() = 2u

val G_REGEX_ERROR_MATCH: GRegexError get() = 3u

val G_REGEX_ERROR_INTERNAL: GRegexError get() = 4u

val G_REGEX_ERROR_STRAY_BACKSLASH: GRegexError get() = 101u

val G_REGEX_ERROR_MISSING_CONTROL_CHAR: GRegexError get() = 102u

val G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: GRegexError get() = 103u

val G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: GRegexError get() = 104u

val G_REGEX_ERROR_QUANTIFIER_TOO_BIG: GRegexError get() = 105u

val G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: GRegexError get() = 106u

val G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: GRegexError get() = 107u

val G_REGEX_ERROR_RANGE_OUT_OF_ORDER: GRegexError get() = 108u

val G_REGEX_ERROR_NOTHING_TO_REPEAT: GRegexError get() = 109u

val G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: GRegexError get() = 112u

val G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: GRegexError get() = 113u

val G_REGEX_ERROR_UNMATCHED_PARENTHESIS: GRegexError get() = 114u

val G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: GRegexError get() = 115u

val G_REGEX_ERROR_UNTERMINATED_COMMENT: GRegexError get() = 118u

val G_REGEX_ERROR_EXPRESSION_TOO_LARGE: GRegexError get() = 120u

val G_REGEX_ERROR_MEMORY_ERROR: GRegexError get() = 121u

val G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: GRegexError get() = 125u

val G_REGEX_ERROR_MALFORMED_CONDITION: GRegexError get() = 126u

val G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: GRegexError get() = 127u

val G_REGEX_ERROR_ASSERTION_EXPECTED: GRegexError get() = 128u

val G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: GRegexError get() = 130u

val G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: GRegexError get() = 131u

val G_REGEX_ERROR_HEX_CODE_TOO_LARGE: GRegexError get() = 134u

val G_REGEX_ERROR_INVALID_CONDITION: GRegexError get() = 135u

val G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: GRegexError get() = 136u

val G_REGEX_ERROR_INFINITE_LOOP: GRegexError get() = 140u

val G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: GRegexError get() = 142u

val G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: GRegexError get() = 143u

val G_REGEX_ERROR_MALFORMED_PROPERTY: GRegexError get() = 146u

val G_REGEX_ERROR_UNKNOWN_PROPERTY: GRegexError get() = 147u

val G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: GRegexError get() = 148u

val G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: GRegexError get() = 149u

val G_REGEX_ERROR_INVALID_OCTAL_VALUE: GRegexError get() = 151u

val G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: GRegexError get() = 154u

val G_REGEX_ERROR_DEFINE_REPETION: GRegexError get() = 155u

val G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: GRegexError get() = 156u

val G_REGEX_ERROR_MISSING_BACK_REFERENCE: GRegexError get() = 157u

val G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: GRegexError get() = 158u

val G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: GRegexError get() = 159u

val G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: GRegexError get() = 160u

val G_REGEX_ERROR_NUMBER_TOO_BIG: GRegexError get() = 161u

val G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: GRegexError get() = 162u

val G_REGEX_ERROR_MISSING_DIGIT: GRegexError get() = 163u

val G_REGEX_ERROR_INVALID_DATA_CHARACTER: GRegexError get() = 164u

val G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: GRegexError get() = 165u

val G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: GRegexError get() = 166u

val G_REGEX_ERROR_INVALID_CONTROL_CHAR: GRegexError get() = 168u

val G_REGEX_ERROR_MISSING_NAME: GRegexError get() = 169u

val G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: GRegexError get() = 171u

val G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: GRegexError get() = 172u

val G_REGEX_ERROR_NAME_TOO_LONG: GRegexError get() = 175u

val G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: GRegexError get() = 176u

typealias GRegexErrorVar = UIntVarOf<GRegexError>

typealias GRegexError = UInt


val G_REGEX_CASELESS: GRegexCompileFlags get() = 1u

val G_REGEX_MULTILINE: GRegexCompileFlags get() = 2u

val G_REGEX_DOTALL: GRegexCompileFlags get() = 4u

val G_REGEX_EXTENDED: GRegexCompileFlags get() = 8u

val G_REGEX_ANCHORED: GRegexCompileFlags get() = 16u

val G_REGEX_DOLLAR_ENDONLY: GRegexCompileFlags get() = 32u

val G_REGEX_UNGREEDY: GRegexCompileFlags get() = 512u

val G_REGEX_RAW: GRegexCompileFlags get() = 2048u

val G_REGEX_NO_AUTO_CAPTURE: GRegexCompileFlags get() = 4096u

val G_REGEX_OPTIMIZE: GRegexCompileFlags get() = 8192u

val G_REGEX_FIRSTLINE: GRegexCompileFlags get() = 262144u

val G_REGEX_DUPNAMES: GRegexCompileFlags get() = 524288u

val G_REGEX_NEWLINE_CR: GRegexCompileFlags get() = 1048576u

val G_REGEX_NEWLINE_LF: GRegexCompileFlags get() = 2097152u

val G_REGEX_NEWLINE_CRLF: GRegexCompileFlags get() = 3145728u

val G_REGEX_NEWLINE_ANYCRLF: GRegexCompileFlags get() = 5242880u

val G_REGEX_BSR_ANYCRLF: GRegexCompileFlags get() = 8388608u

val G_REGEX_JAVASCRIPT_COMPAT: GRegexCompileFlags get() = 33554432u

typealias GRegexCompileFlagsVar = UIntVarOf<GRegexCompileFlags>

typealias GRegexCompileFlags = UInt


val G_REGEX_MATCH_ANCHORED: GRegexMatchFlags get() = 16u

val G_REGEX_MATCH_NOTBOL: GRegexMatchFlags get() = 128u

val G_REGEX_MATCH_NOTEOL: GRegexMatchFlags get() = 256u

val G_REGEX_MATCH_NOTEMPTY: GRegexMatchFlags get() = 1024u

val G_REGEX_MATCH_PARTIAL: GRegexMatchFlags get() = 32768u

val G_REGEX_MATCH_NEWLINE_CR: GRegexMatchFlags get() = 1048576u

val G_REGEX_MATCH_NEWLINE_LF: GRegexMatchFlags get() = 2097152u

val G_REGEX_MATCH_NEWLINE_CRLF: GRegexMatchFlags get() = 3145728u

val G_REGEX_MATCH_NEWLINE_ANY: GRegexMatchFlags get() = 4194304u

val G_REGEX_MATCH_NEWLINE_ANYCRLF: GRegexMatchFlags get() = 5242880u

val G_REGEX_MATCH_BSR_ANYCRLF: GRegexMatchFlags get() = 8388608u

val G_REGEX_MATCH_BSR_ANY: GRegexMatchFlags get() = 16777216u

val G_REGEX_MATCH_PARTIAL_SOFT: GRegexMatchFlags get() = 32768u

val G_REGEX_MATCH_PARTIAL_HARD: GRegexMatchFlags get() = 134217728u

val G_REGEX_MATCH_NOTEMPTY_ATSTART: GRegexMatchFlags get() = 268435456u

typealias GRegexMatchFlagsVar = UIntVarOf<GRegexMatchFlags>

typealias GRegexMatchFlags = UInt


val G_TOKEN_EOF: GTokenType get() = 0u

val G_TOKEN_LEFT_PAREN: GTokenType get() = 40u

val G_TOKEN_RIGHT_PAREN: GTokenType get() = 41u

val G_TOKEN_LEFT_CURLY: GTokenType get() = 123u

val G_TOKEN_RIGHT_CURLY: GTokenType get() = 125u

val G_TOKEN_LEFT_BRACE: GTokenType get() = 91u

val G_TOKEN_RIGHT_BRACE: GTokenType get() = 93u

val G_TOKEN_EQUAL_SIGN: GTokenType get() = 61u

val G_TOKEN_COMMA: GTokenType get() = 44u

val G_TOKEN_NONE: GTokenType get() = 256u

val G_TOKEN_ERROR: GTokenType get() = 257u

val G_TOKEN_CHAR: GTokenType get() = 258u

val G_TOKEN_BINARY: GTokenType get() = 259u

val G_TOKEN_OCTAL: GTokenType get() = 260u

val G_TOKEN_INT: GTokenType get() = 261u

val G_TOKEN_HEX: GTokenType get() = 262u

val G_TOKEN_FLOAT: GTokenType get() = 263u

val G_TOKEN_STRING: GTokenType get() = 264u

val G_TOKEN_SYMBOL: GTokenType get() = 265u

val G_TOKEN_IDENTIFIER: GTokenType get() = 266u

val G_TOKEN_IDENTIFIER_NULL: GTokenType get() = 267u

val G_TOKEN_COMMENT_SINGLE: GTokenType get() = 268u

val G_TOKEN_COMMENT_MULTI: GTokenType get() = 269u

val G_TOKEN_LAST: GTokenType get() = 270u

typealias GTokenTypeVar = UIntVarOf<GTokenType>

typealias GTokenType = UInt


val G_SLICE_CONFIG_ALWAYS_MALLOC: GSliceConfig get() = 1u

val G_SLICE_CONFIG_BYPASS_MAGAZINES: GSliceConfig get() = 2u

val G_SLICE_CONFIG_WORKING_SET_MSECS: GSliceConfig get() = 3u

val G_SLICE_CONFIG_COLOR_INCREMENT: GSliceConfig get() = 4u

val G_SLICE_CONFIG_CHUNK_SIZES: GSliceConfig get() = 5u

val G_SLICE_CONFIG_CONTENTION_COUNTER: GSliceConfig get() = 6u

typealias GSliceConfigVar = UIntVarOf<GSliceConfig>

typealias GSliceConfig = UInt


val G_SPAWN_ERROR_FORK: GSpawnError get() = 0u

val G_SPAWN_ERROR_READ: GSpawnError get() = 1u

val G_SPAWN_ERROR_CHDIR: GSpawnError get() = 2u

val G_SPAWN_ERROR_ACCES: GSpawnError get() = 3u

val G_SPAWN_ERROR_PERM: GSpawnError get() = 4u

val G_SPAWN_ERROR_TOO_BIG: GSpawnError get() = 5u

val G_SPAWN_ERROR_2BIG: GSpawnError get() = 5u

val G_SPAWN_ERROR_NOEXEC: GSpawnError get() = 6u

val G_SPAWN_ERROR_NAMETOOLONG: GSpawnError get() = 7u

val G_SPAWN_ERROR_NOENT: GSpawnError get() = 8u

val G_SPAWN_ERROR_NOMEM: GSpawnError get() = 9u

val G_SPAWN_ERROR_NOTDIR: GSpawnError get() = 10u

val G_SPAWN_ERROR_LOOP: GSpawnError get() = 11u

val G_SPAWN_ERROR_TXTBUSY: GSpawnError get() = 12u

val G_SPAWN_ERROR_IO: GSpawnError get() = 13u

val G_SPAWN_ERROR_NFILE: GSpawnError get() = 14u

val G_SPAWN_ERROR_MFILE: GSpawnError get() = 15u

val G_SPAWN_ERROR_INVAL: GSpawnError get() = 16u

val G_SPAWN_ERROR_ISDIR: GSpawnError get() = 17u

val G_SPAWN_ERROR_LIBBAD: GSpawnError get() = 18u

val G_SPAWN_ERROR_FAILED: GSpawnError get() = 19u

typealias GSpawnErrorVar = UIntVarOf<GSpawnError>

typealias GSpawnError = UInt


val G_SPAWN_DEFAULT: GSpawnFlags get() = 0u

val G_SPAWN_LEAVE_DESCRIPTORS_OPEN: GSpawnFlags get() = 1u

val G_SPAWN_DO_NOT_REAP_CHILD: GSpawnFlags get() = 2u

val G_SPAWN_SEARCH_PATH: GSpawnFlags get() = 4u

val G_SPAWN_STDOUT_TO_DEV_NULL: GSpawnFlags get() = 8u

val G_SPAWN_STDERR_TO_DEV_NULL: GSpawnFlags get() = 16u

val G_SPAWN_CHILD_INHERITS_STDIN: GSpawnFlags get() = 32u

val G_SPAWN_FILE_AND_ARGV_ZERO: GSpawnFlags get() = 64u

val G_SPAWN_SEARCH_PATH_FROM_ENVP: GSpawnFlags get() = 128u

val G_SPAWN_CLOEXEC_PIPES: GSpawnFlags get() = 256u

typealias GSpawnFlagsVar = UIntVarOf<GSpawnFlags>

typealias GSpawnFlags = UInt


val G_ASCII_ALNUM: GAsciiType get() = 1u

val G_ASCII_ALPHA: GAsciiType get() = 2u

val G_ASCII_CNTRL: GAsciiType get() = 4u

val G_ASCII_DIGIT: GAsciiType get() = 8u

val G_ASCII_GRAPH: GAsciiType get() = 16u

val G_ASCII_LOWER: GAsciiType get() = 32u

val G_ASCII_PRINT: GAsciiType get() = 64u

val G_ASCII_PUNCT: GAsciiType get() = 128u

val G_ASCII_SPACE: GAsciiType get() = 256u

val G_ASCII_UPPER: GAsciiType get() = 512u

val G_ASCII_XDIGIT: GAsciiType get() = 1024u

typealias GAsciiTypeVar = UIntVarOf<GAsciiType>

typealias GAsciiType = UInt


val G_TEST_TRAP_SILENCE_STDOUT: GTestTrapFlags get() = 128u

val G_TEST_TRAP_SILENCE_STDERR: GTestTrapFlags get() = 256u

val G_TEST_TRAP_INHERIT_STDIN: GTestTrapFlags get() = 512u

typealias GTestTrapFlagsVar = UIntVarOf<GTestTrapFlags>

typealias GTestTrapFlags = UInt


val G_TEST_SUBPROCESS_INHERIT_STDIN: GTestSubprocessFlags get() = 1u

val G_TEST_SUBPROCESS_INHERIT_STDOUT: GTestSubprocessFlags get() = 2u

val G_TEST_SUBPROCESS_INHERIT_STDERR: GTestSubprocessFlags get() = 4u

typealias GTestSubprocessFlagsVar = UIntVarOf<GTestSubprocessFlags>

typealias GTestSubprocessFlags = UInt


val G_TYPE_FLAG_CLASSED: GTypeFundamentalFlags get() = 1u

val G_TYPE_FLAG_INSTANTIATABLE: GTypeFundamentalFlags get() = 2u

val G_TYPE_FLAG_DERIVABLE: GTypeFundamentalFlags get() = 4u

val G_TYPE_FLAG_DEEP_DERIVABLE: GTypeFundamentalFlags get() = 8u

typealias GTypeFundamentalFlagsVar = UIntVarOf<GTypeFundamentalFlags>

typealias GTypeFundamentalFlags = UInt


val G_TYPE_DEBUG_NONE: GTypeDebugFlags get() = 0u

val G_TYPE_DEBUG_OBJECTS: GTypeDebugFlags get() = 1u

val G_TYPE_DEBUG_SIGNALS: GTypeDebugFlags get() = 2u

val G_TYPE_DEBUG_INSTANCE_COUNT: GTypeDebugFlags get() = 4u

val G_TYPE_DEBUG_MASK: GTypeDebugFlags get() = 7u

typealias GTypeDebugFlagsVar = UIntVarOf<GTypeDebugFlags>

typealias GTypeDebugFlags = UInt


val G_TYPE_FLAG_ABSTRACT: GTypeFlags get() = 16u

val G_TYPE_FLAG_VALUE_ABSTRACT: GTypeFlags get() = 32u

typealias GTypeFlagsVar = UIntVarOf<GTypeFlags>

typealias GTypeFlags = UInt


val G_PARAM_READABLE: GParamFlags get() = 1

val G_PARAM_WRITABLE: GParamFlags get() = 2

val G_PARAM_READWRITE: GParamFlags get() = 3

val G_PARAM_CONSTRUCT: GParamFlags get() = 4

val G_PARAM_CONSTRUCT_ONLY: GParamFlags get() = 8

val G_PARAM_LAX_VALIDATION: GParamFlags get() = 16

val G_PARAM_STATIC_NAME: GParamFlags get() = 32

val G_PARAM_PRIVATE: GParamFlags get() = 32

val G_PARAM_STATIC_NICK: GParamFlags get() = 64

val G_PARAM_STATIC_BLURB: GParamFlags get() = 128

val G_PARAM_EXPLICIT_NOTIFY: GParamFlags get() = 1073741824

val G_PARAM_DEPRECATED: GParamFlags get() = -2147483648

typealias GParamFlagsVar = IntVarOf<GParamFlags>

typealias GParamFlags = Int


val G_SIGNAL_RUN_FIRST: GSignalFlags get() = 1u

val G_SIGNAL_RUN_LAST: GSignalFlags get() = 2u

val G_SIGNAL_RUN_CLEANUP: GSignalFlags get() = 4u

val G_SIGNAL_NO_RECURSE: GSignalFlags get() = 8u

val G_SIGNAL_DETAILED: GSignalFlags get() = 16u

val G_SIGNAL_ACTION: GSignalFlags get() = 32u

val G_SIGNAL_NO_HOOKS: GSignalFlags get() = 64u

val G_SIGNAL_MUST_COLLECT: GSignalFlags get() = 128u

val G_SIGNAL_DEPRECATED: GSignalFlags get() = 256u

typealias GSignalFlagsVar = UIntVarOf<GSignalFlags>

typealias GSignalFlags = UInt


val G_CONNECT_AFTER: GConnectFlags get() = 1u

val G_CONNECT_SWAPPED: GConnectFlags get() = 2u

typealias GConnectFlagsVar = UIntVarOf<GConnectFlags>

typealias GConnectFlags = UInt


val G_SIGNAL_MATCH_ID: GSignalMatchType get() = 1u

val G_SIGNAL_MATCH_DETAIL: GSignalMatchType get() = 2u

val G_SIGNAL_MATCH_CLOSURE: GSignalMatchType get() = 4u

val G_SIGNAL_MATCH_FUNC: GSignalMatchType get() = 8u

val G_SIGNAL_MATCH_DATA: GSignalMatchType get() = 16u

val G_SIGNAL_MATCH_UNBLOCKED: GSignalMatchType get() = 32u

typealias GSignalMatchTypeVar = UIntVarOf<GSignalMatchType>

typealias GSignalMatchType = UInt


val G_BINDING_DEFAULT: GBindingFlags get() = 0u

val G_BINDING_BIDIRECTIONAL: GBindingFlags get() = 1u

val G_BINDING_SYNC_CREATE: GBindingFlags get() = 2u

val G_BINDING_INVERT_BOOLEAN: GBindingFlags get() = 4u

typealias GBindingFlagsVar = UIntVarOf<GBindingFlags>

typealias GBindingFlags = UInt


val G_APP_INFO_CREATE_NONE: GAppInfoCreateFlags get() = 0u

val G_APP_INFO_CREATE_NEEDS_TERMINAL: GAppInfoCreateFlags get() = 1u

val G_APP_INFO_CREATE_SUPPORTS_URIS: GAppInfoCreateFlags get() = 2u

val G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: GAppInfoCreateFlags get() = 4u

typealias GAppInfoCreateFlagsVar = UIntVarOf<GAppInfoCreateFlags>

typealias GAppInfoCreateFlags = UInt


val G_CONVERTER_NO_FLAGS: GConverterFlags get() = 0u

val G_CONVERTER_INPUT_AT_END: GConverterFlags get() = 1u

val G_CONVERTER_FLUSH: GConverterFlags get() = 2u

typealias GConverterFlagsVar = UIntVarOf<GConverterFlags>

typealias GConverterFlags = UInt


val G_CONVERTER_ERROR: GConverterResult get() = 0u

val G_CONVERTER_CONVERTED: GConverterResult get() = 1u

val G_CONVERTER_FINISHED: GConverterResult get() = 2u

val G_CONVERTER_FLUSHED: GConverterResult get() = 3u

typealias GConverterResultVar = UIntVarOf<GConverterResult>

typealias GConverterResult = UInt


val G_FILE_ATTRIBUTE_TYPE_INVALID: GFileAttributeType get() = 0u

val G_FILE_ATTRIBUTE_TYPE_STRING: GFileAttributeType get() = 1u

val G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: GFileAttributeType get() = 2u

val G_FILE_ATTRIBUTE_TYPE_BOOLEAN: GFileAttributeType get() = 3u

val G_FILE_ATTRIBUTE_TYPE_UINT32: GFileAttributeType get() = 4u

val G_FILE_ATTRIBUTE_TYPE_INT32: GFileAttributeType get() = 5u

val G_FILE_ATTRIBUTE_TYPE_UINT64: GFileAttributeType get() = 6u

val G_FILE_ATTRIBUTE_TYPE_INT64: GFileAttributeType get() = 7u

val G_FILE_ATTRIBUTE_TYPE_OBJECT: GFileAttributeType get() = 8u

val G_FILE_ATTRIBUTE_TYPE_STRINGV: GFileAttributeType get() = 9u

typealias GFileAttributeTypeVar = UIntVarOf<GFileAttributeType>

typealias GFileAttributeType = UInt


val G_FILE_ATTRIBUTE_INFO_NONE: GFileAttributeInfoFlags get() = 0u

val G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: GFileAttributeInfoFlags get() = 1u

val G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: GFileAttributeInfoFlags get() = 2u

typealias GFileAttributeInfoFlagsVar = UIntVarOf<GFileAttributeInfoFlags>

typealias GFileAttributeInfoFlags = UInt


val G_FILE_ATTRIBUTE_STATUS_UNSET: GFileAttributeStatus get() = 0u

val G_FILE_ATTRIBUTE_STATUS_SET: GFileAttributeStatus get() = 1u

val G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: GFileAttributeStatus get() = 2u

typealias GFileAttributeStatusVar = UIntVarOf<GFileAttributeStatus>

typealias GFileAttributeStatus = UInt


val G_FILE_QUERY_INFO_NONE: GFileQueryInfoFlags get() = 0u

val G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: GFileQueryInfoFlags get() = 1u

typealias GFileQueryInfoFlagsVar = UIntVarOf<GFileQueryInfoFlags>

typealias GFileQueryInfoFlags = UInt


val G_FILE_CREATE_NONE: GFileCreateFlags get() = 0u

val G_FILE_CREATE_PRIVATE: GFileCreateFlags get() = 1u

val G_FILE_CREATE_REPLACE_DESTINATION: GFileCreateFlags get() = 2u

typealias GFileCreateFlagsVar = UIntVarOf<GFileCreateFlags>

typealias GFileCreateFlags = UInt


val G_FILE_MEASURE_NONE: GFileMeasureFlags get() = 0u

val G_FILE_MEASURE_REPORT_ANY_ERROR: GFileMeasureFlags get() = 2u

val G_FILE_MEASURE_APPARENT_SIZE: GFileMeasureFlags get() = 4u

val G_FILE_MEASURE_NO_XDEV: GFileMeasureFlags get() = 8u

typealias GFileMeasureFlagsVar = UIntVarOf<GFileMeasureFlags>

typealias GFileMeasureFlags = UInt


val G_MOUNT_MOUNT_NONE: GMountMountFlags get() = 0u

typealias GMountMountFlagsVar = UIntVarOf<GMountMountFlags>

typealias GMountMountFlags = UInt


val G_MOUNT_UNMOUNT_NONE: GMountUnmountFlags get() = 0u

val G_MOUNT_UNMOUNT_FORCE: GMountUnmountFlags get() = 1u

typealias GMountUnmountFlagsVar = UIntVarOf<GMountUnmountFlags>

typealias GMountUnmountFlags = UInt


val G_DRIVE_START_NONE: GDriveStartFlags get() = 0u

typealias GDriveStartFlagsVar = UIntVarOf<GDriveStartFlags>

typealias GDriveStartFlags = UInt


val G_FILE_COPY_NONE: GFileCopyFlags get() = 0u

val G_FILE_COPY_OVERWRITE: GFileCopyFlags get() = 1u

val G_FILE_COPY_BACKUP: GFileCopyFlags get() = 2u

val G_FILE_COPY_NOFOLLOW_SYMLINKS: GFileCopyFlags get() = 4u

val G_FILE_COPY_ALL_METADATA: GFileCopyFlags get() = 8u

val G_FILE_COPY_NO_FALLBACK_FOR_MOVE: GFileCopyFlags get() = 16u

val G_FILE_COPY_TARGET_DEFAULT_PERMS: GFileCopyFlags get() = 32u

typealias GFileCopyFlagsVar = UIntVarOf<GFileCopyFlags>

typealias GFileCopyFlags = UInt


val G_FILE_MONITOR_NONE: GFileMonitorFlags get() = 0u

val G_FILE_MONITOR_WATCH_MOUNTS: GFileMonitorFlags get() = 1u

val G_FILE_MONITOR_SEND_MOVED: GFileMonitorFlags get() = 2u

val G_FILE_MONITOR_WATCH_HARD_LINKS: GFileMonitorFlags get() = 4u

val G_FILE_MONITOR_WATCH_MOVES: GFileMonitorFlags get() = 8u

typealias GFileMonitorFlagsVar = UIntVarOf<GFileMonitorFlags>

typealias GFileMonitorFlags = UInt


val G_FILE_TYPE_UNKNOWN: GFileType get() = 0u

val G_FILE_TYPE_REGULAR: GFileType get() = 1u

val G_FILE_TYPE_DIRECTORY: GFileType get() = 2u

val G_FILE_TYPE_SYMBOLIC_LINK: GFileType get() = 3u

val G_FILE_TYPE_SPECIAL: GFileType get() = 4u

val G_FILE_TYPE_SHORTCUT: GFileType get() = 5u

val G_FILE_TYPE_MOUNTABLE: GFileType get() = 6u

typealias GFileTypeVar = UIntVarOf<GFileType>

typealias GFileType = UInt


val G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: GFilesystemPreviewType get() = 0u

val G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: GFilesystemPreviewType get() = 1u

val G_FILESYSTEM_PREVIEW_TYPE_NEVER: GFilesystemPreviewType get() = 2u

typealias GFilesystemPreviewTypeVar = UIntVarOf<GFilesystemPreviewType>

typealias GFilesystemPreviewType = UInt


val G_IO_ERROR_FAILED: GIOErrorEnum get() = 0u

val G_IO_ERROR_NOT_FOUND: GIOErrorEnum get() = 1u

val G_IO_ERROR_EXISTS: GIOErrorEnum get() = 2u

val G_IO_ERROR_IS_DIRECTORY: GIOErrorEnum get() = 3u

val G_IO_ERROR_NOT_DIRECTORY: GIOErrorEnum get() = 4u

val G_IO_ERROR_NOT_EMPTY: GIOErrorEnum get() = 5u

val G_IO_ERROR_NOT_REGULAR_FILE: GIOErrorEnum get() = 6u

val G_IO_ERROR_NOT_SYMBOLIC_LINK: GIOErrorEnum get() = 7u

val G_IO_ERROR_NOT_MOUNTABLE_FILE: GIOErrorEnum get() = 8u

val G_IO_ERROR_FILENAME_TOO_LONG: GIOErrorEnum get() = 9u

val G_IO_ERROR_INVALID_FILENAME: GIOErrorEnum get() = 10u

val G_IO_ERROR_TOO_MANY_LINKS: GIOErrorEnum get() = 11u

val G_IO_ERROR_NO_SPACE: GIOErrorEnum get() = 12u

val G_IO_ERROR_INVALID_ARGUMENT: GIOErrorEnum get() = 13u

val G_IO_ERROR_PERMISSION_DENIED: GIOErrorEnum get() = 14u

val G_IO_ERROR_NOT_SUPPORTED: GIOErrorEnum get() = 15u

val G_IO_ERROR_NOT_MOUNTED: GIOErrorEnum get() = 16u

val G_IO_ERROR_ALREADY_MOUNTED: GIOErrorEnum get() = 17u

val G_IO_ERROR_CLOSED: GIOErrorEnum get() = 18u

val G_IO_ERROR_CANCELLED: GIOErrorEnum get() = 19u

val G_IO_ERROR_PENDING: GIOErrorEnum get() = 20u

val G_IO_ERROR_READ_ONLY: GIOErrorEnum get() = 21u

val G_IO_ERROR_CANT_CREATE_BACKUP: GIOErrorEnum get() = 22u

val G_IO_ERROR_WRONG_ETAG: GIOErrorEnum get() = 23u

val G_IO_ERROR_TIMED_OUT: GIOErrorEnum get() = 24u

val G_IO_ERROR_WOULD_RECURSE: GIOErrorEnum get() = 25u

val G_IO_ERROR_BUSY: GIOErrorEnum get() = 26u

val G_IO_ERROR_WOULD_BLOCK: GIOErrorEnum get() = 27u

val G_IO_ERROR_HOST_NOT_FOUND: GIOErrorEnum get() = 28u

val G_IO_ERROR_WOULD_MERGE: GIOErrorEnum get() = 29u

val G_IO_ERROR_FAILED_HANDLED: GIOErrorEnum get() = 30u

val G_IO_ERROR_TOO_MANY_OPEN_FILES: GIOErrorEnum get() = 31u

val G_IO_ERROR_NOT_INITIALIZED: GIOErrorEnum get() = 32u

val G_IO_ERROR_ADDRESS_IN_USE: GIOErrorEnum get() = 33u

val G_IO_ERROR_PARTIAL_INPUT: GIOErrorEnum get() = 34u

val G_IO_ERROR_INVALID_DATA: GIOErrorEnum get() = 35u

val G_IO_ERROR_DBUS_ERROR: GIOErrorEnum get() = 36u

val G_IO_ERROR_HOST_UNREACHABLE: GIOErrorEnum get() = 37u

val G_IO_ERROR_NETWORK_UNREACHABLE: GIOErrorEnum get() = 38u

val G_IO_ERROR_CONNECTION_REFUSED: GIOErrorEnum get() = 39u

val G_IO_ERROR_PROXY_FAILED: GIOErrorEnum get() = 40u

val G_IO_ERROR_PROXY_AUTH_FAILED: GIOErrorEnum get() = 41u

val G_IO_ERROR_PROXY_NEED_AUTH: GIOErrorEnum get() = 42u

val G_IO_ERROR_PROXY_NOT_ALLOWED: GIOErrorEnum get() = 43u

val G_IO_ERROR_BROKEN_PIPE: GIOErrorEnum get() = 44u

val G_IO_ERROR_CONNECTION_CLOSED: GIOErrorEnum get() = 44u

val G_IO_ERROR_NOT_CONNECTED: GIOErrorEnum get() = 45u

val G_IO_ERROR_MESSAGE_TOO_LARGE: GIOErrorEnum get() = 46u

typealias GIOErrorEnumVar = UIntVarOf<GIOErrorEnum>

typealias GIOErrorEnum = UInt


val G_ASK_PASSWORD_NEED_PASSWORD: GAskPasswordFlags get() = 1u

val G_ASK_PASSWORD_NEED_USERNAME: GAskPasswordFlags get() = 2u

val G_ASK_PASSWORD_NEED_DOMAIN: GAskPasswordFlags get() = 4u

val G_ASK_PASSWORD_SAVING_SUPPORTED: GAskPasswordFlags get() = 8u

val G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: GAskPasswordFlags get() = 16u

val G_ASK_PASSWORD_TCRYPT: GAskPasswordFlags get() = 32u

typealias GAskPasswordFlagsVar = UIntVarOf<GAskPasswordFlags>

typealias GAskPasswordFlags = UInt


val G_OUTPUT_STREAM_SPLICE_NONE: GOutputStreamSpliceFlags get() = 0u

val G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: GOutputStreamSpliceFlags get() = 1u

val G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: GOutputStreamSpliceFlags get() = 2u

typealias GOutputStreamSpliceFlagsVar = UIntVarOf<GOutputStreamSpliceFlags>

typealias GOutputStreamSpliceFlags = UInt


val G_IO_STREAM_SPLICE_NONE: GIOStreamSpliceFlags get() = 0u

val G_IO_STREAM_SPLICE_CLOSE_STREAM1: GIOStreamSpliceFlags get() = 1u

val G_IO_STREAM_SPLICE_CLOSE_STREAM2: GIOStreamSpliceFlags get() = 2u

val G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: GIOStreamSpliceFlags get() = 4u

typealias GIOStreamSpliceFlagsVar = UIntVarOf<GIOStreamSpliceFlags>

typealias GIOStreamSpliceFlags = UInt


val G_RESOLVER_RECORD_SRV: GResolverRecordType get() = 1u

val G_RESOLVER_RECORD_MX: GResolverRecordType get() = 2u

val G_RESOLVER_RECORD_TXT: GResolverRecordType get() = 3u

val G_RESOLVER_RECORD_SOA: GResolverRecordType get() = 4u

val G_RESOLVER_RECORD_NS: GResolverRecordType get() = 5u

typealias GResolverRecordTypeVar = UIntVarOf<GResolverRecordType>

typealias GResolverRecordType = UInt


val G_RESOURCE_FLAGS_NONE: GResourceFlags get() = 0u

val G_RESOURCE_FLAGS_COMPRESSED: GResourceFlags get() = 1u

typealias GResourceFlagsVar = UIntVarOf<GResourceFlags>

typealias GResourceFlags = UInt


val G_RESOURCE_LOOKUP_FLAGS_NONE: GResourceLookupFlags get() = 0u

typealias GResourceLookupFlagsVar = UIntVarOf<GResourceLookupFlags>

typealias GResourceLookupFlags = UInt


val G_SOCKET_FAMILY_INVALID: GSocketFamily get() = 0u

val G_SOCKET_FAMILY_UNIX: GSocketFamily get() = 1u

val G_SOCKET_FAMILY_IPV4: GSocketFamily get() = 2u

val G_SOCKET_FAMILY_IPV6: GSocketFamily get() = 10u

typealias GSocketFamilyVar = UIntVarOf<GSocketFamily>

typealias GSocketFamily = UInt


val G_SOCKET_MSG_NONE: GSocketMsgFlags get() = 0u

val G_SOCKET_MSG_OOB: GSocketMsgFlags get() = 1u

val G_SOCKET_MSG_PEEK: GSocketMsgFlags get() = 2u

val G_SOCKET_MSG_DONTROUTE: GSocketMsgFlags get() = 4u

typealias GSocketMsgFlagsVar = UIntVarOf<GSocketMsgFlags>

typealias GSocketMsgFlags = UInt


val G_SOCKET_PROTOCOL_UNKNOWN: GSocketProtocol get() = -1

val G_SOCKET_PROTOCOL_DEFAULT: GSocketProtocol get() = 0

val G_SOCKET_PROTOCOL_TCP: GSocketProtocol get() = 6

val G_SOCKET_PROTOCOL_UDP: GSocketProtocol get() = 17

val G_SOCKET_PROTOCOL_SCTP: GSocketProtocol get() = 132

typealias GSocketProtocolVar = IntVarOf<GSocketProtocol>

typealias GSocketProtocol = Int


val G_BUS_TYPE_STARTER: GBusType get() = -1

val G_BUS_TYPE_NONE: GBusType get() = 0

val G_BUS_TYPE_SYSTEM: GBusType get() = 1

val G_BUS_TYPE_SESSION: GBusType get() = 2

typealias GBusTypeVar = IntVarOf<GBusType>

typealias GBusType = Int


val G_BUS_NAME_OWNER_FLAGS_NONE: GBusNameOwnerFlags get() = 0u

val G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: GBusNameOwnerFlags get() = 1u

val G_BUS_NAME_OWNER_FLAGS_REPLACE: GBusNameOwnerFlags get() = 2u

val G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE: GBusNameOwnerFlags get() = 4u

typealias GBusNameOwnerFlagsVar = UIntVarOf<GBusNameOwnerFlags>

typealias GBusNameOwnerFlags = UInt


val G_BUS_NAME_WATCHER_FLAGS_NONE: GBusNameWatcherFlags get() = 0u

val G_BUS_NAME_WATCHER_FLAGS_AUTO_START: GBusNameWatcherFlags get() = 1u

typealias GBusNameWatcherFlagsVar = UIntVarOf<GBusNameWatcherFlags>

typealias GBusNameWatcherFlags = UInt


val G_DBUS_PROXY_FLAGS_NONE: GDBusProxyFlags get() = 0u

val G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: GDBusProxyFlags get() = 1u

val G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: GDBusProxyFlags get() = 2u

val G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: GDBusProxyFlags get() = 4u

val G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: GDBusProxyFlags get() = 8u

val G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION: GDBusProxyFlags get() = 16u

typealias GDBusProxyFlagsVar = UIntVarOf<GDBusProxyFlags>

typealias GDBusProxyFlags = UInt


val G_DBUS_CONNECTION_FLAGS_NONE: GDBusConnectionFlags get() = 0u

val G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: GDBusConnectionFlags get() = 1u

val G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: GDBusConnectionFlags get() = 2u

val G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: GDBusConnectionFlags get() = 4u

val G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION: GDBusConnectionFlags get() = 8u

val G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING: GDBusConnectionFlags get() = 16u

typealias GDBusConnectionFlagsVar = UIntVarOf<GDBusConnectionFlags>

typealias GDBusConnectionFlags = UInt


val G_DBUS_CAPABILITY_FLAGS_NONE: GDBusCapabilityFlags get() = 0u

val G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: GDBusCapabilityFlags get() = 1u

typealias GDBusCapabilityFlagsVar = UIntVarOf<GDBusCapabilityFlags>

typealias GDBusCapabilityFlags = UInt


val G_DBUS_CALL_FLAGS_NONE: GDBusCallFlags get() = 0u

val G_DBUS_CALL_FLAGS_NO_AUTO_START: GDBusCallFlags get() = 1u

val G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: GDBusCallFlags get() = 2u

typealias GDBusCallFlagsVar = UIntVarOf<GDBusCallFlags>

typealias GDBusCallFlags = UInt


val G_DBUS_MESSAGE_FLAGS_NONE: GDBusMessageFlags get() = 0u

val G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: GDBusMessageFlags get() = 1u

val G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: GDBusMessageFlags get() = 2u

val G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: GDBusMessageFlags get() = 4u

typealias GDBusMessageFlagsVar = UIntVarOf<GDBusMessageFlags>

typealias GDBusMessageFlags = UInt


val G_DBUS_PROPERTY_INFO_FLAGS_NONE: GDBusPropertyInfoFlags get() = 0u

val G_DBUS_PROPERTY_INFO_FLAGS_READABLE: GDBusPropertyInfoFlags get() = 1u

val G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: GDBusPropertyInfoFlags get() = 2u

typealias GDBusPropertyInfoFlagsVar = UIntVarOf<GDBusPropertyInfoFlags>

typealias GDBusPropertyInfoFlags = UInt


val G_DBUS_SUBTREE_FLAGS_NONE: GDBusSubtreeFlags get() = 0u

val G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: GDBusSubtreeFlags get() = 1u

typealias GDBusSubtreeFlagsVar = UIntVarOf<GDBusSubtreeFlags>

typealias GDBusSubtreeFlags = UInt


val G_DBUS_SERVER_FLAGS_NONE: GDBusServerFlags get() = 0u

val G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: GDBusServerFlags get() = 1u

val G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: GDBusServerFlags get() = 2u

typealias GDBusServerFlagsVar = UIntVarOf<GDBusServerFlags>

typealias GDBusServerFlags = UInt


val G_DBUS_SIGNAL_FLAGS_NONE: GDBusSignalFlags get() = 0u

val G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: GDBusSignalFlags get() = 1u

val G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE: GDBusSignalFlags get() = 2u

val G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH: GDBusSignalFlags get() = 4u

typealias GDBusSignalFlagsVar = UIntVarOf<GDBusSignalFlags>

typealias GDBusSignalFlags = UInt


val G_DBUS_SEND_MESSAGE_FLAGS_NONE: GDBusSendMessageFlags get() = 0u

val G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: GDBusSendMessageFlags get() = 1u

typealias GDBusSendMessageFlagsVar = UIntVarOf<GDBusSendMessageFlags>

typealias GDBusSendMessageFlags = UInt


val G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: GDBusMessageByteOrder get() = 66u

val G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: GDBusMessageByteOrder get() = 108u

typealias GDBusMessageByteOrderVar = UIntVarOf<GDBusMessageByteOrder>

typealias GDBusMessageByteOrder = UInt


val G_APPLICATION_FLAGS_NONE: GApplicationFlags get() = 0u

val G_APPLICATION_IS_SERVICE: GApplicationFlags get() = 1u

val G_APPLICATION_IS_LAUNCHER: GApplicationFlags get() = 2u

val G_APPLICATION_HANDLES_OPEN: GApplicationFlags get() = 4u

val G_APPLICATION_HANDLES_COMMAND_LINE: GApplicationFlags get() = 8u

val G_APPLICATION_SEND_ENVIRONMENT: GApplicationFlags get() = 16u

val G_APPLICATION_NON_UNIQUE: GApplicationFlags get() = 32u

val G_APPLICATION_CAN_OVERRIDE_APP_ID: GApplicationFlags get() = 64u

val G_APPLICATION_ALLOW_REPLACEMENT: GApplicationFlags get() = 128u

val G_APPLICATION_REPLACE: GApplicationFlags get() = 256u

typealias GApplicationFlagsVar = UIntVarOf<GApplicationFlags>

typealias GApplicationFlags = UInt


val G_TLS_CERTIFICATE_UNKNOWN_CA: GTlsCertificateFlags get() = 1u

val G_TLS_CERTIFICATE_BAD_IDENTITY: GTlsCertificateFlags get() = 2u

val G_TLS_CERTIFICATE_NOT_ACTIVATED: GTlsCertificateFlags get() = 4u

val G_TLS_CERTIFICATE_EXPIRED: GTlsCertificateFlags get() = 8u

val G_TLS_CERTIFICATE_REVOKED: GTlsCertificateFlags get() = 16u

val G_TLS_CERTIFICATE_INSECURE: GTlsCertificateFlags get() = 32u

val G_TLS_CERTIFICATE_GENERIC_ERROR: GTlsCertificateFlags get() = 64u

val G_TLS_CERTIFICATE_VALIDATE_ALL: GTlsCertificateFlags get() = 127u

typealias GTlsCertificateFlagsVar = UIntVarOf<GTlsCertificateFlags>

typealias GTlsCertificateFlags = UInt


val G_TLS_PASSWORD_NONE: _GTlsPasswordFlags get() = 0u

val G_TLS_PASSWORD_RETRY: _GTlsPasswordFlags get() = 2u

val G_TLS_PASSWORD_MANY_TRIES: _GTlsPasswordFlags get() = 4u

val G_TLS_PASSWORD_FINAL_TRY: _GTlsPasswordFlags get() = 8u

typealias _GTlsPasswordFlagsVar = UIntVarOf<_GTlsPasswordFlags>

typealias _GTlsPasswordFlags = UInt


val G_DBUS_INTERFACE_SKELETON_FLAGS_NONE: GDBusInterfaceSkeletonFlags get() = 0u

val G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD: GDBusInterfaceSkeletonFlags get() = 1u

typealias GDBusInterfaceSkeletonFlagsVar = UIntVarOf<GDBusInterfaceSkeletonFlags>

typealias GDBusInterfaceSkeletonFlags = UInt


val G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE: GDBusObjectManagerClientFlags get() = 0u

val G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START: GDBusObjectManagerClientFlags get() = 1u

typealias GDBusObjectManagerClientFlagsVar = UIntVarOf<GDBusObjectManagerClientFlags>

typealias GDBusObjectManagerClientFlags = UInt


val G_TLS_DATABASE_VERIFY_NONE: GTlsDatabaseVerifyFlags get() = 0u

typealias GTlsDatabaseVerifyFlagsVar = UIntVarOf<GTlsDatabaseVerifyFlags>

typealias GTlsDatabaseVerifyFlags = UInt


val G_TLS_DATABASE_LOOKUP_NONE: GTlsDatabaseLookupFlags get() = 0u

val G_TLS_DATABASE_LOOKUP_KEYPAIR: GTlsDatabaseLookupFlags get() = 1u

typealias GTlsDatabaseLookupFlagsVar = UIntVarOf<GTlsDatabaseLookupFlags>

typealias GTlsDatabaseLookupFlags = UInt


val G_TLS_CERTIFICATE_REQUEST_NONE: GTlsCertificateRequestFlags get() = 0u

typealias GTlsCertificateRequestFlagsVar = UIntVarOf<GTlsCertificateRequestFlags>

typealias GTlsCertificateRequestFlags = UInt


val G_TEST_DBUS_NONE: GTestDBusFlags get() = 0u

typealias GTestDBusFlagsVar = UIntVarOf<GTestDBusFlags>

typealias GTestDBusFlags = UInt


val G_SUBPROCESS_FLAGS_NONE: GSubprocessFlags get() = 0u

val G_SUBPROCESS_FLAGS_STDIN_PIPE: GSubprocessFlags get() = 1u

val G_SUBPROCESS_FLAGS_STDIN_INHERIT: GSubprocessFlags get() = 2u

val G_SUBPROCESS_FLAGS_STDOUT_PIPE: GSubprocessFlags get() = 4u

val G_SUBPROCESS_FLAGS_STDOUT_SILENCE: GSubprocessFlags get() = 8u

val G_SUBPROCESS_FLAGS_STDERR_PIPE: GSubprocessFlags get() = 16u

val G_SUBPROCESS_FLAGS_STDERR_SILENCE: GSubprocessFlags get() = 32u

val G_SUBPROCESS_FLAGS_STDERR_MERGE: GSubprocessFlags get() = 64u

val G_SUBPROCESS_FLAGS_INHERIT_FDS: GSubprocessFlags get() = 128u

typealias GSubprocessFlagsVar = UIntVarOf<GSubprocessFlags>

typealias GSubprocessFlags = UInt


val G_NETWORK_CONNECTIVITY_LOCAL: GNetworkConnectivity get() = 1u

val G_NETWORK_CONNECTIVITY_LIMITED: GNetworkConnectivity get() = 2u

val G_NETWORK_CONNECTIVITY_PORTAL: GNetworkConnectivity get() = 3u

val G_NETWORK_CONNECTIVITY_FULL: GNetworkConnectivity get() = 4u

typealias GNetworkConnectivityVar = UIntVarOf<GNetworkConnectivity>

typealias GNetworkConnectivity = UInt


val G_POLLABLE_RETURN_FAILED: GPollableReturn get() = 0

val G_POLLABLE_RETURN_OK: GPollableReturn get() = 1

val G_POLLABLE_RETURN_WOULD_BLOCK: GPollableReturn get() = -27

typealias GPollableReturnVar = IntVarOf<GPollableReturn>

typealias GPollableReturn = Int


val G_MODULE_BIND_LAZY: GModuleFlags get() = 1u

val G_MODULE_BIND_LOCAL: GModuleFlags get() = 2u

val G_MODULE_BIND_MASK: GModuleFlags get() = 3u

typealias GModuleFlagsVar = UIntVarOf<GModuleFlags>

typealias GModuleFlags = UInt


val G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT: GResolverNameLookupFlags get() = 0u

val G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY: GResolverNameLookupFlags get() = 1u

val G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY: GResolverNameLookupFlags get() = 2u

typealias GResolverNameLookupFlagsVar = UIntVarOf<GResolverNameLookupFlags>

typealias GResolverNameLookupFlags = UInt


val G_SETTINGS_BIND_DEFAULT: GSettingsBindFlags get() = 0u

val G_SETTINGS_BIND_GET: GSettingsBindFlags get() = 1u

val G_SETTINGS_BIND_SET: GSettingsBindFlags get() = 2u

val G_SETTINGS_BIND_NO_SENSITIVITY: GSettingsBindFlags get() = 4u

val G_SETTINGS_BIND_GET_NO_CHANGES: GSettingsBindFlags get() = 8u

val G_SETTINGS_BIND_INVERT_BOOLEAN: GSettingsBindFlags get() = 16u

typealias GSettingsBindFlagsVar = UIntVarOf<GSettingsBindFlags>

typealias GSettingsBindFlags = UInt
@SymbolName("glibresources_kniBridge0")
private external fun kniBridge0(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("glibresources_kniBridge1")
private external fun kniBridge1(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("glibresources_kniBridge2")
private external fun kniBridge2(p0: NativePtr, p1: ULong, p2: ULong): Int
@SymbolName("glibresources_kniBridge3")
private external fun kniBridge3(p0: NativePtr, p1: ULong, p2: ULong): Int
@SymbolName("glibresources_kniBridge4")
private external fun kniBridge4(p0: Int, p1: Int, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge5")
private external fun kniBridge5(p0: Int, p1: Int, p2: UInt, p3: UInt): NativePtr
@SymbolName("glibresources_kniBridge6")
private external fun kniBridge6(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge7")
private external fun kniBridge7(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge8")
private external fun kniBridge8(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge9")
private external fun kniBridge9(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge10")
private external fun kniBridge10(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge11")
private external fun kniBridge11(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge12")
private external fun kniBridge12(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge13")
private external fun kniBridge13(p0: NativePtr, p1: UInt, p2: NativePtr, p3: UInt): NativePtr
@SymbolName("glibresources_kniBridge14")
private external fun kniBridge14(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge15")
private external fun kniBridge15(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge16")
private external fun kniBridge16(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge17")
private external fun kniBridge17(p0: NativePtr, p1: UInt, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge18")
private external fun kniBridge18(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge19")
private external fun kniBridge19(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge20")
private external fun kniBridge20(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge21")
private external fun kniBridge21(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge22")
private external fun kniBridge22(): NativePtr
@SymbolName("glibresources_kniBridge23")
private external fun kniBridge23(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge24")
private external fun kniBridge24(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge25")
private external fun kniBridge25(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge26")
private external fun kniBridge26(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge27")
private external fun kniBridge27(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge28")
private external fun kniBridge28(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge29")
private external fun kniBridge29(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge30")
private external fun kniBridge30(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge31")
private external fun kniBridge31(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge32")
private external fun kniBridge32(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge33")
private external fun kniBridge33(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge34")
private external fun kniBridge34(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge35")
private external fun kniBridge35(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge36")
private external fun kniBridge36(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge37")
private external fun kniBridge37(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge38")
private external fun kniBridge38(p0: NativePtr, p1: UInt, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge39")
private external fun kniBridge39(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge40")
private external fun kniBridge40(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge41")
private external fun kniBridge41(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge42")
private external fun kniBridge42(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge43")
private external fun kniBridge43(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge44")
private external fun kniBridge44(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge45")
private external fun kniBridge45(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge46")
private external fun kniBridge46(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge47")
private external fun kniBridge47(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge48")
private external fun kniBridge48(): NativePtr
@SymbolName("glibresources_kniBridge49")
private external fun kniBridge49(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge50")
private external fun kniBridge50(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge51")
private external fun kniBridge51(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge52")
private external fun kniBridge52(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge53")
private external fun kniBridge53(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge54")
private external fun kniBridge54(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge55")
private external fun kniBridge55(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge56")
private external fun kniBridge56(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge57")
private external fun kniBridge57(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge58")
private external fun kniBridge58(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge59")
private external fun kniBridge59(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge60")
private external fun kniBridge60(p0: NativePtr, p1: UInt, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge61")
private external fun kniBridge61(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge62")
private external fun kniBridge62(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge63")
private external fun kniBridge63(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge64")
private external fun kniBridge64(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge65")
private external fun kniBridge65(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge66")
private external fun kniBridge66(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge67")
private external fun kniBridge67(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("glibresources_kniBridge68")
private external fun kniBridge68(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge69")
private external fun kniBridge69(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge70")
private external fun kniBridge70(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge71")
private external fun kniBridge71(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge79")
private external fun kniBridge79(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge80")
private external fun kniBridge80(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge81")
private external fun kniBridge81(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge82")
private external fun kniBridge82(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge83")
private external fun kniBridge83(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge84")
private external fun kniBridge84(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge85")
private external fun kniBridge85(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge86")
private external fun kniBridge86(p0: UInt, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge87")
private external fun kniBridge87(p0: UInt, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge88")
private external fun kniBridge88(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge89")
private external fun kniBridge89(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge90")
private external fun kniBridge90(p0: NativePtr, p1: UInt, p2: Int): Int
@SymbolName("glibresources_kniBridge91")
private external fun kniBridge91(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge92")
private external fun kniBridge92(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge93")
private external fun kniBridge93(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge94")
private external fun kniBridge94(): NativePtr
@SymbolName("glibresources_kniBridge95")
private external fun kniBridge95(): NativePtr
@SymbolName("glibresources_kniBridge96")
private external fun kniBridge96(): NativePtr
@SymbolName("glibresources_kniBridge97")
private external fun kniBridge97(): NativePtr
@SymbolName("glibresources_kniBridge98")
private external fun kniBridge98(): NativePtr
@SymbolName("glibresources_kniBridge99")
private external fun kniBridge99(): NativePtr
@SymbolName("glibresources_kniBridge100")
private external fun kniBridge100(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge101")
private external fun kniBridge101(): NativePtr
@SymbolName("glibresources_kniBridge102")
private external fun kniBridge102(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge103")
private external fun kniBridge103(): Unit
@SymbolName("glibresources_kniBridge104")
private external fun kniBridge104(): NativePtr
@SymbolName("glibresources_kniBridge105")
private external fun kniBridge105(): NativePtr
@SymbolName("glibresources_kniBridge106")
private external fun kniBridge106(): NativePtr
@SymbolName("glibresources_kniBridge107")
private external fun kniBridge107(): NativePtr
@SymbolName("glibresources_kniBridge108")
private external fun kniBridge108(): NativePtr
@SymbolName("glibresources_kniBridge109")
private external fun kniBridge109(): NativePtr
@SymbolName("glibresources_kniBridge110")
private external fun kniBridge110(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge111")
private external fun kniBridge111(p0: NativePtr, p1: NativePtr, p2: UInt): UInt
@SymbolName("glibresources_kniBridge112")
private external fun kniBridge112(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge113")
private external fun kniBridge113(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge114")
private external fun kniBridge114(p0: ULong, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge115")
private external fun kniBridge115(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge116")
private external fun kniBridge116(p0: Long): NativePtr
@SymbolName("glibresources_kniBridge117")
private external fun kniBridge117(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge118")
private external fun kniBridge118(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge119")
private external fun kniBridge119(p0: ULong, p1: Int): Int
@SymbolName("glibresources_kniBridge120")
private external fun kniBridge120(p0: ULong, p1: Int): Int
@SymbolName("glibresources_kniBridge121")
private external fun kniBridge121(p0: ULong): UInt
@SymbolName("glibresources_kniBridge122")
private external fun kniBridge122(p0: ULong, p1: Int): Int
@SymbolName("glibresources_kniBridge123")
private external fun kniBridge123(p0: ULong, p1: Int): Int
@SymbolName("glibresources_kniBridge124")
private external fun kniBridge124(p0: ULong): UInt
@SymbolName("glibresources_kniBridge125")
private external fun kniBridge125(): UInt
@SymbolName("glibresources_kniBridge126")
private external fun kniBridge126(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge127")
private external fun kniBridge127(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge128")
private external fun kniBridge128(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge129")
private external fun kniBridge129(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge130")
private external fun kniBridge130(): NativePtr
@SymbolName("glibresources_kniBridge131")
private external fun kniBridge131(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge132")
private external fun kniBridge132(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge133")
private external fun kniBridge133(): Unit
@SymbolName("glibresources_kniBridge134")
private external fun kniBridge134(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge135")
private external fun kniBridge135(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge136")
private external fun kniBridge136(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge137")
private external fun kniBridge137(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge138")
private external fun kniBridge138(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge139")
private external fun kniBridge139(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge140")
private external fun kniBridge140(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge141")
private external fun kniBridge141(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge142")
private external fun kniBridge142(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge143")
private external fun kniBridge143(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge144")
private external fun kniBridge144(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge145")
private external fun kniBridge145(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge146")
private external fun kniBridge146(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge147")
private external fun kniBridge147(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge148")
private external fun kniBridge148(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge149")
private external fun kniBridge149(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge150")
private external fun kniBridge150(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge151")
private external fun kniBridge151(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge152")
private external fun kniBridge152(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge153")
private external fun kniBridge153(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge154")
private external fun kniBridge154(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge155")
private external fun kniBridge155(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge156")
private external fun kniBridge156(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge157")
private external fun kniBridge157(p0: NativePtr, p1: NativePtr, p2: Long): Int
@SymbolName("glibresources_kniBridge158")
private external fun kniBridge158(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge159")
private external fun kniBridge159(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge160")
private external fun kniBridge160(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge161")
private external fun kniBridge161(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge164")
private external fun kniBridge164(): UInt
@SymbolName("glibresources_kniBridge165")
private external fun kniBridge165(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge166")
private external fun kniBridge166(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge167")
private external fun kniBridge167(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge168")
private external fun kniBridge168(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge169")
private external fun kniBridge169(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge170")
private external fun kniBridge170(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge171")
private external fun kniBridge171(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge172")
private external fun kniBridge172(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge173")
private external fun kniBridge173(): NativePtr
@SymbolName("glibresources_kniBridge174")
private external fun kniBridge174(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge175")
private external fun kniBridge175(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge176")
private external fun kniBridge176(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge177")
private external fun kniBridge177(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge178")
private external fun kniBridge178(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge179")
private external fun kniBridge179(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge180")
private external fun kniBridge180(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge181")
private external fun kniBridge181(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge182")
private external fun kniBridge182(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge183")
private external fun kniBridge183(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge184")
private external fun kniBridge184(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge185")
private external fun kniBridge185(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge186")
private external fun kniBridge186(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge187")
private external fun kniBridge187(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge188")
private external fun kniBridge188(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge189")
private external fun kniBridge189(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge190")
private external fun kniBridge190(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge191")
private external fun kniBridge191(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge192")
private external fun kniBridge192(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge193")
private external fun kniBridge193(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge194")
private external fun kniBridge194(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge195")
private external fun kniBridge195(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge196")
private external fun kniBridge196(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge197")
private external fun kniBridge197(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge198")
private external fun kniBridge198(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge199")
private external fun kniBridge199(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge200")
private external fun kniBridge200(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge201")
private external fun kniBridge201(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge202")
private external fun kniBridge202(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge203")
private external fun kniBridge203(p0: NativePtr, p1: ULong, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): ULong
@SymbolName("glibresources_kniBridge204")
private external fun kniBridge204(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("glibresources_kniBridge205")
private external fun kniBridge205(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge206")
private external fun kniBridge206(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr): ULong
@SymbolName("glibresources_kniBridge207")
private external fun kniBridge207(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge208")
private external fun kniBridge208(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge209")
private external fun kniBridge209(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge210")
private external fun kniBridge210(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge211")
private external fun kniBridge211(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge215")
private external fun kniBridge215(): UInt
@SymbolName("glibresources_kniBridge216")
private external fun kniBridge216(): NativePtr
@SymbolName("glibresources_kniBridge217")
private external fun kniBridge217(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge218")
private external fun kniBridge218(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge219")
private external fun kniBridge219(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge220")
private external fun kniBridge220(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge221")
private external fun kniBridge221(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge222")
private external fun kniBridge222(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge223")
private external fun kniBridge223(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge224")
private external fun kniBridge224(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge225")
private external fun kniBridge225(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge226")
private external fun kniBridge226(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge227")
private external fun kniBridge227(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge228")
private external fun kniBridge228(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge229")
private external fun kniBridge229(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Unit
@SymbolName("glibresources_kniBridge230")
private external fun kniBridge230(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge231")
private external fun kniBridge231(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge232")
private external fun kniBridge232(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge233")
private external fun kniBridge233(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge234")
private external fun kniBridge234(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge235")
private external fun kniBridge235(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge236")
private external fun kniBridge236(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: Long, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge237")
private external fun kniBridge237(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge238")
private external fun kniBridge238(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge239")
private external fun kniBridge239(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge240")
private external fun kniBridge240(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge241")
private external fun kniBridge241(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge242")
private external fun kniBridge242(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge243")
private external fun kniBridge243(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge244")
private external fun kniBridge244(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge245")
private external fun kniBridge245(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge246")
private external fun kniBridge246(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge247")
private external fun kniBridge247(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge248")
private external fun kniBridge248(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge249")
private external fun kniBridge249(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge250")
private external fun kniBridge250(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge251")
private external fun kniBridge251(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge252")
private external fun kniBridge252(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge253")
private external fun kniBridge253(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge254")
private external fun kniBridge254(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge255")
private external fun kniBridge255(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge256")
private external fun kniBridge256(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge257")
private external fun kniBridge257(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge258")
private external fun kniBridge258(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge259")
private external fun kniBridge259(p0: NativePtr, p1: ULong, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge260")
private external fun kniBridge260(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge261")
private external fun kniBridge261(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge262")
private external fun kniBridge262(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge263")
private external fun kniBridge263(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge264")
private external fun kniBridge264(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge265")
private external fun kniBridge265(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge266")
private external fun kniBridge266(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge267")
private external fun kniBridge267(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge268")
private external fun kniBridge268(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge269")
private external fun kniBridge269(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge270")
private external fun kniBridge270(): NativePtr
@SymbolName("glibresources_kniBridge271")
private external fun kniBridge271(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge272")
private external fun kniBridge272(): NativePtr
@SymbolName("glibresources_kniBridge273")
private external fun kniBridge273(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge274")
private external fun kniBridge274(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge275")
private external fun kniBridge275(p0: UInt): Long
@SymbolName("glibresources_kniBridge276")
private external fun kniBridge276(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge277")
private external fun kniBridge277(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge278")
private external fun kniBridge278(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge279")
private external fun kniBridge279(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge280")
private external fun kniBridge280(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge281")
private external fun kniBridge281(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge282")
private external fun kniBridge282(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge283")
private external fun kniBridge283(p0: UInt, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge284")
private external fun kniBridge284(p0: UInt, p1: NativePtr, p2: Long): NativePtr
@SymbolName("glibresources_kniBridge285")
private external fun kniBridge285(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge286")
private external fun kniBridge286(): UInt
@SymbolName("glibresources_kniBridge287")
private external fun kniBridge287(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge288")
private external fun kniBridge288(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): ULong
@SymbolName("glibresources_kniBridge289")
private external fun kniBridge289(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge290")
private external fun kniBridge290(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge291")
private external fun kniBridge291(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge292")
private external fun kniBridge292(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge293")
private external fun kniBridge293(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge294")
private external fun kniBridge294(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge295")
private external fun kniBridge295(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge296")
private external fun kniBridge296(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge297")
private external fun kniBridge297(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge298")
private external fun kniBridge298(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge299")
private external fun kniBridge299(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge300")
private external fun kniBridge300(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge301")
private external fun kniBridge301(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge302")
private external fun kniBridge302(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge303")
private external fun kniBridge303(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge304")
private external fun kniBridge304(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge305")
private external fun kniBridge305(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge306")
private external fun kniBridge306(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge307")
private external fun kniBridge307(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge308")
private external fun kniBridge308(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge309")
private external fun kniBridge309(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge310")
private external fun kniBridge310(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge311")
private external fun kniBridge311(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge312")
private external fun kniBridge312(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge313")
private external fun kniBridge313(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge314")
private external fun kniBridge314(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge315")
private external fun kniBridge315(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge316")
private external fun kniBridge316(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge317")
private external fun kniBridge317(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge318")
private external fun kniBridge318(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge319")
private external fun kniBridge319(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge320")
private external fun kniBridge320(): NativePtr
@SymbolName("glibresources_kniBridge321")
private external fun kniBridge321(p0: UByte, p1: UInt, p2: UShort): NativePtr
@SymbolName("glibresources_kniBridge322")
private external fun kniBridge322(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge323")
private external fun kniBridge323(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge324")
private external fun kniBridge324(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge325")
private external fun kniBridge325(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge326")
private external fun kniBridge326(p0: UByte): Int
@SymbolName("glibresources_kniBridge327")
private external fun kniBridge327(p0: UInt): Int
@SymbolName("glibresources_kniBridge328")
private external fun kniBridge328(p0: UShort): Int
@SymbolName("glibresources_kniBridge329")
private external fun kniBridge329(p0: UInt): Int
@SymbolName("glibresources_kniBridge330")
private external fun kniBridge330(p0: UInt): Int
@SymbolName("glibresources_kniBridge331")
private external fun kniBridge331(p0: UByte, p1: UInt, p2: UShort): Int
@SymbolName("glibresources_kniBridge332")
private external fun kniBridge332(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge333")
private external fun kniBridge333(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge334")
private external fun kniBridge334(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge335")
private external fun kniBridge335(p0: NativePtr): UByte
@SymbolName("glibresources_kniBridge336")
private external fun kniBridge336(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge337")
private external fun kniBridge337(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge338")
private external fun kniBridge338(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge339")
private external fun kniBridge339(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge340")
private external fun kniBridge340(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge341")
private external fun kniBridge341(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge342")
private external fun kniBridge342(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge343")
private external fun kniBridge343(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge344")
private external fun kniBridge344(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge345")
private external fun kniBridge345(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge346")
private external fun kniBridge346(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge347")
private external fun kniBridge347(p0: NativePtr, p1: UByte): Unit
@SymbolName("glibresources_kniBridge348")
private external fun kniBridge348(p0: NativePtr, p1: UShort): Unit
@SymbolName("glibresources_kniBridge349")
private external fun kniBridge349(p0: NativePtr, p1: UByte, p2: UInt, p3: UShort): Unit
@SymbolName("glibresources_kniBridge350")
private external fun kniBridge350(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge351")
private external fun kniBridge351(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge352")
private external fun kniBridge352(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge353")
private external fun kniBridge353(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge354")
private external fun kniBridge354(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge355")
private external fun kniBridge355(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge356")
private external fun kniBridge356(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge357")
private external fun kniBridge357(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge358")
private external fun kniBridge358(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge359")
private external fun kniBridge359(p0: UShort): Int
@SymbolName("glibresources_kniBridge360")
private external fun kniBridge360(p0: UInt, p1: UShort): UByte
@SymbolName("glibresources_kniBridge361")
private external fun kniBridge361(p0: UShort): UByte
@SymbolName("glibresources_kniBridge362")
private external fun kniBridge362(p0: UShort): UByte
@SymbolName("glibresources_kniBridge363")
private external fun kniBridge363(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge364")
private external fun kniBridge364(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge365")
private external fun kniBridge365(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge366")
private external fun kniBridge366(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge367")
private external fun kniBridge367(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge368")
private external fun kniBridge368(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("glibresources_kniBridge369")
private external fun kniBridge369(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge370")
private external fun kniBridge370(): NativePtr
@SymbolName("glibresources_kniBridge371")
private external fun kniBridge371(): NativePtr
@SymbolName("glibresources_kniBridge372")
private external fun kniBridge372(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge373")
private external fun kniBridge373(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge374")
private external fun kniBridge374(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge375")
private external fun kniBridge375(p0: NativePtr, p1: UInt, p2: Long): Int
@SymbolName("glibresources_kniBridge376")
private external fun kniBridge376(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge377")
private external fun kniBridge377(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge378")
private external fun kniBridge378(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge379")
private external fun kniBridge379(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge380")
private external fun kniBridge380(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge381")
private external fun kniBridge381(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge382")
private external fun kniBridge382(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge383")
private external fun kniBridge383(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge384")
private external fun kniBridge384(): NativePtr
@SymbolName("glibresources_kniBridge385")
private external fun kniBridge385(): NativePtr
@SymbolName("glibresources_kniBridge386")
private external fun kniBridge386(p0: Long): NativePtr
@SymbolName("glibresources_kniBridge387")
private external fun kniBridge387(p0: Long): NativePtr
@SymbolName("glibresources_kniBridge388")
private external fun kniBridge388(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge389")
private external fun kniBridge389(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge390")
private external fun kniBridge390(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge391")
private external fun kniBridge391(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Double): NativePtr
@SymbolName("glibresources_kniBridge392")
private external fun kniBridge392(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Double): NativePtr
@SymbolName("glibresources_kniBridge393")
private external fun kniBridge393(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Double): NativePtr
@SymbolName("glibresources_kniBridge394")
private external fun kniBridge394(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge395")
private external fun kniBridge395(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge396")
private external fun kniBridge396(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge397")
private external fun kniBridge397(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge398")
private external fun kniBridge398(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge399")
private external fun kniBridge399(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge400")
private external fun kniBridge400(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge401")
private external fun kniBridge401(p0: NativePtr, p1: Double): NativePtr
@SymbolName("glibresources_kniBridge402")
private external fun kniBridge402(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Double): NativePtr
@SymbolName("glibresources_kniBridge403")
private external fun kniBridge403(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge404")
private external fun kniBridge404(p0: NativePtr, p1: NativePtr): Long
@SymbolName("glibresources_kniBridge405")
private external fun kniBridge405(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge406")
private external fun kniBridge406(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge407")
private external fun kniBridge407(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge408")
private external fun kniBridge408(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge409")
private external fun kniBridge409(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge410")
private external fun kniBridge410(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge411")
private external fun kniBridge411(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge412")
private external fun kniBridge412(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge413")
private external fun kniBridge413(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge414")
private external fun kniBridge414(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge415")
private external fun kniBridge415(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge416")
private external fun kniBridge416(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge417")
private external fun kniBridge417(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge418")
private external fun kniBridge418(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge419")
private external fun kniBridge419(p0: NativePtr): Double
@SymbolName("glibresources_kniBridge420")
private external fun kniBridge420(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge421")
private external fun kniBridge421(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge422")
private external fun kniBridge422(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge423")
private external fun kniBridge423(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge424")
private external fun kniBridge424(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge425")
private external fun kniBridge425(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge426")
private external fun kniBridge426(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge427")
private external fun kniBridge427(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge428")
private external fun kniBridge428(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge429")
private external fun kniBridge429(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge430")
private external fun kniBridge430(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge431")
private external fun kniBridge431(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge432")
private external fun kniBridge432(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge433")
private external fun kniBridge433(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge434")
private external fun kniBridge434(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge435")
private external fun kniBridge435(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge436")
private external fun kniBridge436(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge437")
private external fun kniBridge437(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge438")
private external fun kniBridge438(): NativePtr
@SymbolName("glibresources_kniBridge439")
private external fun kniBridge439(): NativePtr
@SymbolName("glibresources_kniBridge440")
private external fun kniBridge440(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge441")
private external fun kniBridge441(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge442")
private external fun kniBridge442(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge443")
private external fun kniBridge443(): UInt
@SymbolName("glibresources_kniBridge444")
private external fun kniBridge444(p0: Int): UInt
@SymbolName("glibresources_kniBridge445")
private external fun kniBridge445(p0: NativePtr, p1: UInt): Int
@SymbolName("glibresources_kniBridge446")
private external fun kniBridge446(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge447")
private external fun kniBridge447(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge448")
private external fun kniBridge448(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge449")
private external fun kniBridge449(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge450")
private external fun kniBridge450(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge451")
private external fun kniBridge451(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge452")
private external fun kniBridge452(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("glibresources_kniBridge453")
private external fun kniBridge453(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge454")
private external fun kniBridge454(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge455")
private external fun kniBridge455(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge456")
private external fun kniBridge456(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge457")
private external fun kniBridge457(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge458")
private external fun kniBridge458(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge459")
private external fun kniBridge459(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge460")
private external fun kniBridge460(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge461")
private external fun kniBridge461(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge462")
private external fun kniBridge462(): NativePtr
@SymbolName("glibresources_kniBridge463")
private external fun kniBridge463(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge464")
private external fun kniBridge464(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge465")
private external fun kniBridge465(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge466")
private external fun kniBridge466(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge467")
private external fun kniBridge467(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge468")
private external fun kniBridge468(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge469")
private external fun kniBridge469(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): NativePtr
@SymbolName("glibresources_kniBridge470")
private external fun kniBridge470(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge471")
private external fun kniBridge471(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge472")
private external fun kniBridge472(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge474")
private external fun kniBridge474(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge475")
private external fun kniBridge475(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge476")
private external fun kniBridge476(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge477")
private external fun kniBridge477(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge478")
private external fun kniBridge478(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge479")
private external fun kniBridge479(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge480")
private external fun kniBridge480(p0: ULong, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge481")
private external fun kniBridge481(p0: ULong, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge482")
private external fun kniBridge482(p0: NativePtr, p1: ULong, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge483")
private external fun kniBridge483(p0: ULong, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge484")
private external fun kniBridge484(p0: ULong, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge485")
private external fun kniBridge485(p0: NativePtr, p1: ULong, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge487")
private external fun kniBridge487(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge488")
private external fun kniBridge488(): Int
@SymbolName("glibresources_kniBridge489")
private external fun kniBridge489(): Unit
@SymbolName("glibresources_kniBridge490")
private external fun kniBridge490(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge491")
private external fun kniBridge491(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge492")
private external fun kniBridge492(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge493")
private external fun kniBridge493(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge494")
private external fun kniBridge494(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge495")
private external fun kniBridge495(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge496")
private external fun kniBridge496(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge497")
private external fun kniBridge497(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge498")
private external fun kniBridge498(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge499")
private external fun kniBridge499(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge500")
private external fun kniBridge500(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge501")
private external fun kniBridge501(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge502")
private external fun kniBridge502(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge503")
private external fun kniBridge503(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge504")
private external fun kniBridge504(p0: NativePtr, p1: UInt, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge505")
private external fun kniBridge505(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge506")
private external fun kniBridge506(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge507")
private external fun kniBridge507(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge508")
private external fun kniBridge508(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge509")
private external fun kniBridge509(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge510")
private external fun kniBridge510(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge511")
private external fun kniBridge511(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge512")
private external fun kniBridge512(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge513")
private external fun kniBridge513(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge514")
private external fun kniBridge514(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge515")
private external fun kniBridge515(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge516")
private external fun kniBridge516(): NativePtr
@SymbolName("glibresources_kniBridge517")
private external fun kniBridge517(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge518")
private external fun kniBridge518(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge519")
private external fun kniBridge519(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge520")
private external fun kniBridge520(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge521")
private external fun kniBridge521(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge522")
private external fun kniBridge522(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge523")
private external fun kniBridge523(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge524")
private external fun kniBridge524(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge525")
private external fun kniBridge525(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge526")
private external fun kniBridge526(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge527")
private external fun kniBridge527(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge528")
private external fun kniBridge528(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge529")
private external fun kniBridge529(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge530")
private external fun kniBridge530(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge531")
private external fun kniBridge531(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge532")
private external fun kniBridge532(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge533")
private external fun kniBridge533(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge534")
private external fun kniBridge534(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge535")
private external fun kniBridge535(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge536")
private external fun kniBridge536(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge537")
private external fun kniBridge537(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge538")
private external fun kniBridge538(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge539")
private external fun kniBridge539(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge540")
private external fun kniBridge540(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge541")
private external fun kniBridge541(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge542")
private external fun kniBridge542(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge543")
private external fun kniBridge543(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge544")
private external fun kniBridge544(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge545")
private external fun kniBridge545(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge546")
private external fun kniBridge546(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge547")
private external fun kniBridge547(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge548")
private external fun kniBridge548(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge549")
private external fun kniBridge549(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge550")
private external fun kniBridge550(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge551")
private external fun kniBridge551(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge552")
private external fun kniBridge552(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge553")
private external fun kniBridge553(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge554")
private external fun kniBridge554(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge555")
private external fun kniBridge555(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge556")
private external fun kniBridge556(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge557")
private external fun kniBridge557(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge558")
private external fun kniBridge558(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge559")
private external fun kniBridge559(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge560")
private external fun kniBridge560(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge561")
private external fun kniBridge561(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge562")
private external fun kniBridge562(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge563")
private external fun kniBridge563(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge564")
private external fun kniBridge564(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge565")
private external fun kniBridge565(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge566")
private external fun kniBridge566(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge567")
private external fun kniBridge567(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge568")
private external fun kniBridge568(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge569")
private external fun kniBridge569(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge570")
private external fun kniBridge570(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge571")
private external fun kniBridge571(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge572")
private external fun kniBridge572(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge573")
private external fun kniBridge573(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge574")
private external fun kniBridge574(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge575")
private external fun kniBridge575(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge576")
private external fun kniBridge576(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge577")
private external fun kniBridge577(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge578")
private external fun kniBridge578(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge579")
private external fun kniBridge579(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge580")
private external fun kniBridge580(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge581")
private external fun kniBridge581(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge582")
private external fun kniBridge582(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge583")
private external fun kniBridge583(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge584")
private external fun kniBridge584(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge585")
private external fun kniBridge585(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge586")
private external fun kniBridge586(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge587")
private external fun kniBridge587(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge588")
private external fun kniBridge588(p0: UInt, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge589")
private external fun kniBridge589(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge590")
private external fun kniBridge590(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge591")
private external fun kniBridge591(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge592")
private external fun kniBridge592(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge593")
private external fun kniBridge593(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge594")
private external fun kniBridge594(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge595")
private external fun kniBridge595(p0: UInt, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong): NativePtr
@SymbolName("glibresources_kniBridge596")
private external fun kniBridge596(p0: UInt, p1: NativePtr, p2: ULong, p3: NativePtr, p4: Long): NativePtr
@SymbolName("glibresources_kniBridge597")
private external fun kniBridge597(p0: UInt, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge598")
private external fun kniBridge598(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge599")
private external fun kniBridge599(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge600")
private external fun kniBridge600(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge601")
private external fun kniBridge601(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge602")
private external fun kniBridge602(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge603")
private external fun kniBridge603(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge604")
private external fun kniBridge604(p0: NativePtr, p1: ULong): Int
@SymbolName("glibresources_kniBridge605")
private external fun kniBridge605(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge606")
private external fun kniBridge606(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge607")
private external fun kniBridge607(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge608")
private external fun kniBridge608(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge609")
private external fun kniBridge609(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge610")
private external fun kniBridge610(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge611")
private external fun kniBridge611(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge612")
private external fun kniBridge612(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge613")
private external fun kniBridge613(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge614")
private external fun kniBridge614(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge615")
private external fun kniBridge615(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge616")
private external fun kniBridge616(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge617")
private external fun kniBridge617(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge618")
private external fun kniBridge618(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge619")
private external fun kniBridge619(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge620")
private external fun kniBridge620(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge621")
private external fun kniBridge621(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge622")
private external fun kniBridge622(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge623")
private external fun kniBridge623(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge624")
private external fun kniBridge624(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge625")
private external fun kniBridge625(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge626")
private external fun kniBridge626(p0: NativePtr, p1: UInt, p2: Int): Int
@SymbolName("glibresources_kniBridge627")
private external fun kniBridge627(): NativePtr
@SymbolName("glibresources_kniBridge628")
private external fun kniBridge628(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge629")
private external fun kniBridge629(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge630")
private external fun kniBridge630(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge631")
private external fun kniBridge631(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge632")
private external fun kniBridge632(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge633")
private external fun kniBridge633(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge634")
private external fun kniBridge634(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge635")
private external fun kniBridge635(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge636")
private external fun kniBridge636(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge637")
private external fun kniBridge637(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge638")
private external fun kniBridge638(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge639")
private external fun kniBridge639(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge640")
private external fun kniBridge640(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge641")
private external fun kniBridge641(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge642")
private external fun kniBridge642(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge643")
private external fun kniBridge643(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge644")
private external fun kniBridge644(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge645")
private external fun kniBridge645(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge646")
private external fun kniBridge646(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge647")
private external fun kniBridge647(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge648")
private external fun kniBridge648(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge649")
private external fun kniBridge649(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge650")
private external fun kniBridge650(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge651")
private external fun kniBridge651(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge652")
private external fun kniBridge652(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge653")
private external fun kniBridge653(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge654")
private external fun kniBridge654(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge655")
private external fun kniBridge655(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge656")
private external fun kniBridge656(): NativePtr
@SymbolName("glibresources_kniBridge657")
private external fun kniBridge657(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge658")
private external fun kniBridge658(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge659")
private external fun kniBridge659(): NativePtr
@SymbolName("glibresources_kniBridge660")
private external fun kniBridge660(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge661")
private external fun kniBridge661(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge662")
private external fun kniBridge662(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge663")
private external fun kniBridge663(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge664")
private external fun kniBridge664(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge665")
private external fun kniBridge665(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge666")
private external fun kniBridge666(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge667")
private external fun kniBridge667(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge668")
private external fun kniBridge668(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge669")
private external fun kniBridge669(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge670")
private external fun kniBridge670(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge671")
private external fun kniBridge671(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("glibresources_kniBridge672")
private external fun kniBridge672(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("glibresources_kniBridge673")
private external fun kniBridge673(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge674")
private external fun kniBridge674(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge675")
private external fun kniBridge675(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge676")
private external fun kniBridge676(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge677")
private external fun kniBridge677(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge678")
private external fun kniBridge678(): Int
@SymbolName("glibresources_kniBridge679")
private external fun kniBridge679(): NativePtr
@SymbolName("glibresources_kniBridge680")
private external fun kniBridge680(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge681")
private external fun kniBridge681(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge682")
private external fun kniBridge682(): NativePtr
@SymbolName("glibresources_kniBridge683")
private external fun kniBridge683(): NativePtr
@SymbolName("glibresources_kniBridge684")
private external fun kniBridge684(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge685")
private external fun kniBridge685(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge686")
private external fun kniBridge686(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge687")
private external fun kniBridge687(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge688")
private external fun kniBridge688(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge689")
private external fun kniBridge689(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge690")
private external fun kniBridge690(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge691")
private external fun kniBridge691(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge692")
private external fun kniBridge692(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge693")
private external fun kniBridge693(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge694")
private external fun kniBridge694(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge695")
private external fun kniBridge695(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge696")
private external fun kniBridge696(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge697")
private external fun kniBridge697(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge698")
private external fun kniBridge698(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge699")
private external fun kniBridge699(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge700")
private external fun kniBridge700(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge701")
private external fun kniBridge701(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge702")
private external fun kniBridge702(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge703")
private external fun kniBridge703(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge704")
private external fun kniBridge704(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge705")
private external fun kniBridge705(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge706")
private external fun kniBridge706(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge707")
private external fun kniBridge707(p0: UInt, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge708")
private external fun kniBridge708(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge709")
private external fun kniBridge709(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge710")
private external fun kniBridge710(p0: NativePtr, p1: Int, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge711")
private external fun kniBridge711(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("glibresources_kniBridge712")
private external fun kniBridge712(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge713")
private external fun kniBridge713(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge714")
private external fun kniBridge714(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge715")
private external fun kniBridge715(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge716")
private external fun kniBridge716(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge717")
private external fun kniBridge717(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge718")
private external fun kniBridge718(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge719")
private external fun kniBridge719(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge720")
private external fun kniBridge720(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge721")
private external fun kniBridge721(): NativePtr
@SymbolName("glibresources_kniBridge722")
private external fun kniBridge722(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge723")
private external fun kniBridge723(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge724")
private external fun kniBridge724(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge725")
private external fun kniBridge725(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge726")
private external fun kniBridge726(): Long
@SymbolName("glibresources_kniBridge727")
private external fun kniBridge727(): Long
@SymbolName("glibresources_kniBridge728")
private external fun kniBridge728(p0: UInt): Int
@SymbolName("glibresources_kniBridge729")
private external fun kniBridge729(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge730")
private external fun kniBridge730(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge732")
private external fun kniBridge732(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge733")
private external fun kniBridge733(p0: UInt, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge734")
private external fun kniBridge734(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge735")
private external fun kniBridge735(p0: UInt, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge736")
private external fun kniBridge736(p0: Int, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge737")
private external fun kniBridge737(p0: Int, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge738")
private external fun kniBridge738(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge739")
private external fun kniBridge739(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge740")
private external fun kniBridge740(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge741")
private external fun kniBridge741(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge742")
private external fun kniBridge742(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge743")
private external fun kniBridge743(p0: Int): UInt
@SymbolName("glibresources_kniBridge744")
private external fun kniBridge744(p0: UInt): Int
@SymbolName("glibresources_kniBridge745")
private external fun kniBridge745(p0: UInt): Int
@SymbolName("glibresources_kniBridge746")
private external fun kniBridge746(p0: UInt): Int
@SymbolName("glibresources_kniBridge747")
private external fun kniBridge747(p0: UInt): Int
@SymbolName("glibresources_kniBridge748")
private external fun kniBridge748(p0: UInt): Int
@SymbolName("glibresources_kniBridge749")
private external fun kniBridge749(p0: UInt): Int
@SymbolName("glibresources_kniBridge750")
private external fun kniBridge750(p0: UInt): Int
@SymbolName("glibresources_kniBridge751")
private external fun kniBridge751(p0: UInt): Int
@SymbolName("glibresources_kniBridge752")
private external fun kniBridge752(p0: UInt): Int
@SymbolName("glibresources_kniBridge753")
private external fun kniBridge753(p0: UInt): Int
@SymbolName("glibresources_kniBridge754")
private external fun kniBridge754(p0: UInt): Int
@SymbolName("glibresources_kniBridge755")
private external fun kniBridge755(p0: UInt): Int
@SymbolName("glibresources_kniBridge756")
private external fun kniBridge756(p0: UInt): Int
@SymbolName("glibresources_kniBridge757")
private external fun kniBridge757(p0: UInt): Int
@SymbolName("glibresources_kniBridge758")
private external fun kniBridge758(p0: UInt): Int
@SymbolName("glibresources_kniBridge759")
private external fun kniBridge759(p0: UInt): Int
@SymbolName("glibresources_kniBridge760")
private external fun kniBridge760(p0: UInt): Int
@SymbolName("glibresources_kniBridge761")
private external fun kniBridge761(p0: UInt): Int
@SymbolName("glibresources_kniBridge762")
private external fun kniBridge762(p0: UInt): UInt
@SymbolName("glibresources_kniBridge763")
private external fun kniBridge763(p0: UInt): UInt
@SymbolName("glibresources_kniBridge764")
private external fun kniBridge764(p0: UInt): UInt
@SymbolName("glibresources_kniBridge765")
private external fun kniBridge765(p0: UInt): Int
@SymbolName("glibresources_kniBridge766")
private external fun kniBridge766(p0: UInt): Int
@SymbolName("glibresources_kniBridge767")
private external fun kniBridge767(p0: UInt): UInt
@SymbolName("glibresources_kniBridge768")
private external fun kniBridge768(p0: UInt): UInt
@SymbolName("glibresources_kniBridge769")
private external fun kniBridge769(p0: UInt): Int
@SymbolName("glibresources_kniBridge770")
private external fun kniBridge770(p0: UInt, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge771")
private external fun kniBridge771(p0: UInt): Int
@SymbolName("glibresources_kniBridge772")
private external fun kniBridge772(p0: UInt): Int
@SymbolName("glibresources_kniBridge773")
private external fun kniBridge773(p0: UInt, p1: UInt, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge774")
private external fun kniBridge774(p0: UInt, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge775")
private external fun kniBridge775(p0: UInt, p1: Int, p2: NativePtr, p3: ULong): ULong
@SymbolName("glibresources_kniBridge776")
private external fun kniBridge776(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge777")
private external fun kniBridge777(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge778")
private external fun kniBridge778(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge779")
private external fun kniBridge779(p0: NativePtr, p1: Long): UInt
@SymbolName("glibresources_kniBridge780")
private external fun kniBridge780(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge781")
private external fun kniBridge781(p0: NativePtr, p1: NativePtr): Long
@SymbolName("glibresources_kniBridge782")
private external fun kniBridge782(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge783")
private external fun kniBridge783(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge784")
private external fun kniBridge784(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge785")
private external fun kniBridge785(p0: NativePtr, p1: Long): Long
@SymbolName("glibresources_kniBridge786")
private external fun kniBridge786(p0: NativePtr, p1: Long, p2: Long): NativePtr
@SymbolName("glibresources_kniBridge787")
private external fun kniBridge787(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge788")
private external fun kniBridge788(p0: NativePtr, p1: Long, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge789")
private external fun kniBridge789(p0: NativePtr, p1: Long, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge790")
private external fun kniBridge790(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge791")
private external fun kniBridge791(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge792")
private external fun kniBridge792(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge793")
private external fun kniBridge793(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge794")
private external fun kniBridge794(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge795")
private external fun kniBridge795(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge796")
private external fun kniBridge796(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge797")
private external fun kniBridge797(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge798")
private external fun kniBridge798(p0: UInt, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge799")
private external fun kniBridge799(p0: NativePtr, p1: Long, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge800")
private external fun kniBridge800(p0: NativePtr, p1: ULong, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge801")
private external fun kniBridge801(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge802")
private external fun kniBridge802(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge803")
private external fun kniBridge803(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge804")
private external fun kniBridge804(p0: NativePtr, p1: Long, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge805")
private external fun kniBridge805(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge806")
private external fun kniBridge806(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge807")
private external fun kniBridge807(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge808")
private external fun kniBridge808(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge809")
private external fun kniBridge809(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge810")
private external fun kniBridge810(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge811")
private external fun kniBridge811(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge812")
private external fun kniBridge812(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge813")
private external fun kniBridge813(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge814")
private external fun kniBridge814(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge815")
private external fun kniBridge815(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge816")
private external fun kniBridge816(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge817")
private external fun kniBridge817(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge818")
private external fun kniBridge818(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge819")
private external fun kniBridge819(p0: NativePtr, p1: Long, p2: NativePtr, p3: Long): NativePtr
@SymbolName("glibresources_kniBridge820")
private external fun kniBridge820(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge821")
private external fun kniBridge821(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("glibresources_kniBridge822")
private external fun kniBridge822(p0: NativePtr, p1: Byte): NativePtr
@SymbolName("glibresources_kniBridge823")
private external fun kniBridge823(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge824")
private external fun kniBridge824(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge825")
private external fun kniBridge825(p0: NativePtr, p1: Byte): NativePtr
@SymbolName("glibresources_kniBridge826")
private external fun kniBridge826(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge827")
private external fun kniBridge827(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("glibresources_kniBridge828")
private external fun kniBridge828(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge829")
private external fun kniBridge829(p0: NativePtr, p1: Long, p2: Byte): NativePtr
@SymbolName("glibresources_kniBridge830")
private external fun kniBridge830(p0: NativePtr, p1: Long, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge831")
private external fun kniBridge831(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge832")
private external fun kniBridge832(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Long): NativePtr
@SymbolName("glibresources_kniBridge833")
private external fun kniBridge833(p0: NativePtr, p1: Long, p2: Long): NativePtr
@SymbolName("glibresources_kniBridge834")
private external fun kniBridge834(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge835")
private external fun kniBridge835(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge836")
private external fun kniBridge836(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge837")
private external fun kniBridge837(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge838")
private external fun kniBridge838(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge839")
private external fun kniBridge839(p0: NativePtr, p1: Byte): NativePtr
@SymbolName("glibresources_kniBridge840")
private external fun kniBridge840(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge841")
private external fun kniBridge841(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge842")
private external fun kniBridge842(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge843")
private external fun kniBridge843(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge844")
private external fun kniBridge844(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge845")
private external fun kniBridge845(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge846")
private external fun kniBridge846(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge847")
private external fun kniBridge847(p0: NativePtr, p1: Long, p2: UInt): UInt
@SymbolName("glibresources_kniBridge848")
private external fun kniBridge848(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge849")
private external fun kniBridge849(p0: NativePtr, p1: Int, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge850")
private external fun kniBridge850(p0: NativePtr, p1: Int, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): UInt
@SymbolName("glibresources_kniBridge851")
private external fun kniBridge851(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge852")
private external fun kniBridge852(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge853")
private external fun kniBridge853(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge854")
private external fun kniBridge854(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge855")
private external fun kniBridge855(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge856")
private external fun kniBridge856(p0: NativePtr, p1: UInt, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge857")
private external fun kniBridge857(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge858")
private external fun kniBridge858(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge859")
private external fun kniBridge859(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge860")
private external fun kniBridge860(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge861")
private external fun kniBridge861(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge862")
private external fun kniBridge862(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge863")
private external fun kniBridge863(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge864")
private external fun kniBridge864(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge865")
private external fun kniBridge865(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge866")
private external fun kniBridge866(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge867")
private external fun kniBridge867(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge868")
private external fun kniBridge868(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge869")
private external fun kniBridge869(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge870")
private external fun kniBridge870(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge871")
private external fun kniBridge871(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge872")
private external fun kniBridge872(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge873")
private external fun kniBridge873(p0: NativePtr, p1: UInt, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge874")
private external fun kniBridge874(p0: NativePtr, p1: Long, p2: UInt, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge875")
private external fun kniBridge875(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge876")
private external fun kniBridge876(): UInt
@SymbolName("glibresources_kniBridge877")
private external fun kniBridge877(p0: Int): UInt
@SymbolName("glibresources_kniBridge878")
private external fun kniBridge878(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge879")
private external fun kniBridge879(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge880")
private external fun kniBridge880(): UInt
@SymbolName("glibresources_kniBridge881")
private external fun kniBridge881(): NativePtr
@SymbolName("glibresources_kniBridge882")
private external fun kniBridge882(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge883")
private external fun kniBridge883(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge884")
private external fun kniBridge884(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge885")
private external fun kniBridge885(p0: NativePtr, p1: Byte): Unit
@SymbolName("glibresources_kniBridge886")
private external fun kniBridge886(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge887")
private external fun kniBridge887(p0: NativePtr, p1: NativePtr, p2: ULong, p3: UInt, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge888")
private external fun kniBridge888(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge889")
private external fun kniBridge889(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge890")
private external fun kniBridge890(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge891")
private external fun kniBridge891(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge892")
private external fun kniBridge892(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge893")
private external fun kniBridge893(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge894")
private external fun kniBridge894(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge895")
private external fun kniBridge895(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge896")
private external fun kniBridge896(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge897")
private external fun kniBridge897(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge898")
private external fun kniBridge898(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge899")
private external fun kniBridge899(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge900")
private external fun kniBridge900(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge901")
private external fun kniBridge901(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge902")
private external fun kniBridge902(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge903")
private external fun kniBridge903(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge904")
private external fun kniBridge904(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge905")
private external fun kniBridge905(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge906")
private external fun kniBridge906(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("glibresources_kniBridge907")
private external fun kniBridge907(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge908")
private external fun kniBridge908(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("glibresources_kniBridge909")
private external fun kniBridge909(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Long
@SymbolName("glibresources_kniBridge910")
private external fun kniBridge910(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Long): Unit
@SymbolName("glibresources_kniBridge911")
private external fun kniBridge911(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("glibresources_kniBridge912")
private external fun kniBridge912(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Unit
@SymbolName("glibresources_kniBridge913")
private external fun kniBridge913(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Double
@SymbolName("glibresources_kniBridge914")
private external fun kniBridge914(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Double): Unit
@SymbolName("glibresources_kniBridge915")
private external fun kniBridge915(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge916")
private external fun kniBridge916(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Unit
@SymbolName("glibresources_kniBridge917")
private external fun kniBridge917(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge918")
private external fun kniBridge918(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: ULong): Unit
@SymbolName("glibresources_kniBridge919")
private external fun kniBridge919(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge920")
private external fun kniBridge920(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Unit
@SymbolName("glibresources_kniBridge921")
private external fun kniBridge921(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge922")
private external fun kniBridge922(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Unit
@SymbolName("glibresources_kniBridge923")
private external fun kniBridge923(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge924")
private external fun kniBridge924(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Unit
@SymbolName("glibresources_kniBridge925")
private external fun kniBridge925(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge926")
private external fun kniBridge926(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge927")
private external fun kniBridge927(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge928")
private external fun kniBridge928(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge929")
private external fun kniBridge929(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge930")
private external fun kniBridge930(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge931")
private external fun kniBridge931(p0: Int, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge932")
private external fun kniBridge932(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge933")
private external fun kniBridge933(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge934")
private external fun kniBridge934(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge935")
private external fun kniBridge935(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge936")
private external fun kniBridge936(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge937")
private external fun kniBridge937(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge938")
private external fun kniBridge938(): UInt
@SymbolName("glibresources_kniBridge939")
private external fun kniBridge939(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge940")
private external fun kniBridge940(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge941")
private external fun kniBridge941(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge942")
private external fun kniBridge942(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge943")
private external fun kniBridge943(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge944")
private external fun kniBridge944(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge945")
private external fun kniBridge945(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge946")
private external fun kniBridge946(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge947")
private external fun kniBridge947(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge948")
private external fun kniBridge948(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge949")
private external fun kniBridge949(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge950")
private external fun kniBridge950(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge951")
private external fun kniBridge951(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge952")
private external fun kniBridge952(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge953")
private external fun kniBridge953(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge954")
private external fun kniBridge954(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge955")
private external fun kniBridge955(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge956")
private external fun kniBridge956(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge957")
private external fun kniBridge957(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge958")
private external fun kniBridge958(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge959")
private external fun kniBridge959(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge960")
private external fun kniBridge960(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge961")
private external fun kniBridge961(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge962")
private external fun kniBridge962(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge963")
private external fun kniBridge963(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge964")
private external fun kniBridge964(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge965")
private external fun kniBridge965(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge966")
private external fun kniBridge966(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge967")
private external fun kniBridge967(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge968")
private external fun kniBridge968(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge969")
private external fun kniBridge969(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge970")
private external fun kniBridge970(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge971")
private external fun kniBridge971(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge972")
private external fun kniBridge972(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge973")
private external fun kniBridge973(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge974")
private external fun kniBridge974(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge975")
private external fun kniBridge975(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge976")
private external fun kniBridge976(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge977")
private external fun kniBridge977(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge978")
private external fun kniBridge978(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge979")
private external fun kniBridge979(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge980")
private external fun kniBridge980(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge981")
private external fun kniBridge981(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge982")
private external fun kniBridge982(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge983")
private external fun kniBridge983(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge984")
private external fun kniBridge984(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge985")
private external fun kniBridge985(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge986")
private external fun kniBridge986(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge987")
private external fun kniBridge987(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge988")
private external fun kniBridge988(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge989")
private external fun kniBridge989(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge990")
private external fun kniBridge990(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge991")
private external fun kniBridge991(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge992")
private external fun kniBridge992(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge993")
private external fun kniBridge993(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge994")
private external fun kniBridge994(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge995")
private external fun kniBridge995(p0: UByte): NativePtr
@SymbolName("glibresources_kniBridge996")
private external fun kniBridge996(p0: Short): NativePtr
@SymbolName("glibresources_kniBridge997")
private external fun kniBridge997(p0: UShort): NativePtr
@SymbolName("glibresources_kniBridge998")
private external fun kniBridge998(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge999")
private external fun kniBridge999(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge1000")
private external fun kniBridge1000(p0: Long): NativePtr
@SymbolName("glibresources_kniBridge1001")
private external fun kniBridge1001(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1002")
private external fun kniBridge1002(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge1003")
private external fun kniBridge1003(p0: Double): NativePtr
@SymbolName("glibresources_kniBridge1004")
private external fun kniBridge1004(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1005")
private external fun kniBridge1005(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1006")
private external fun kniBridge1006(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1007")
private external fun kniBridge1007(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1008")
private external fun kniBridge1008(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1009")
private external fun kniBridge1009(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1010")
private external fun kniBridge1010(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1011")
private external fun kniBridge1011(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge1012")
private external fun kniBridge1012(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge1013")
private external fun kniBridge1013(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1014")
private external fun kniBridge1014(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge1015")
private external fun kniBridge1015(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong): NativePtr
@SymbolName("glibresources_kniBridge1016")
private external fun kniBridge1016(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1017")
private external fun kniBridge1017(p0: NativePtr): UByte
@SymbolName("glibresources_kniBridge1018")
private external fun kniBridge1018(p0: NativePtr): Short
@SymbolName("glibresources_kniBridge1019")
private external fun kniBridge1019(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge1020")
private external fun kniBridge1020(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1021")
private external fun kniBridge1021(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1022")
private external fun kniBridge1022(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge1023")
private external fun kniBridge1023(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1024")
private external fun kniBridge1024(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1025")
private external fun kniBridge1025(p0: NativePtr): Double
@SymbolName("glibresources_kniBridge1026")
private external fun kniBridge1026(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1027")
private external fun kniBridge1027(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1028")
private external fun kniBridge1028(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1029")
private external fun kniBridge1029(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1030")
private external fun kniBridge1030(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1031")
private external fun kniBridge1031(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1032")
private external fun kniBridge1032(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1033")
private external fun kniBridge1033(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1034")
private external fun kniBridge1034(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1035")
private external fun kniBridge1035(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1036")
private external fun kniBridge1036(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1037")
private external fun kniBridge1037(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1038")
private external fun kniBridge1038(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge1039")
private external fun kniBridge1039(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1040")
private external fun kniBridge1040(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1041")
private external fun kniBridge1041(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1042")
private external fun kniBridge1042(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1043")
private external fun kniBridge1043(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1044")
private external fun kniBridge1044(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1045")
private external fun kniBridge1045(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("glibresources_kniBridge1046")
private external fun kniBridge1046(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1047")
private external fun kniBridge1047(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1048")
private external fun kniBridge1048(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1049")
private external fun kniBridge1049(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1050")
private external fun kniBridge1050(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge1051")
private external fun kniBridge1051(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1052")
private external fun kniBridge1052(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1053")
private external fun kniBridge1053(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1054")
private external fun kniBridge1054(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1055")
private external fun kniBridge1055(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1056")
private external fun kniBridge1056(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1057")
private external fun kniBridge1057(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1058")
private external fun kniBridge1058(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1059")
private external fun kniBridge1059(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1060")
private external fun kniBridge1060(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge1061")
private external fun kniBridge1061(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1062")
private external fun kniBridge1062(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1063")
private external fun kniBridge1063(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1064")
private external fun kniBridge1064(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1065")
private external fun kniBridge1065(): UInt
@SymbolName("glibresources_kniBridge1066")
private external fun kniBridge1066(): UInt
@SymbolName("glibresources_kniBridge1067")
private external fun kniBridge1067(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1068")
private external fun kniBridge1068(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1069")
private external fun kniBridge1069(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1070")
private external fun kniBridge1070(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1071")
private external fun kniBridge1071(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1072")
private external fun kniBridge1072(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1073")
private external fun kniBridge1073(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1074")
private external fun kniBridge1074(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1075")
private external fun kniBridge1075(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1076")
private external fun kniBridge1076(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1077")
private external fun kniBridge1077(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1078")
private external fun kniBridge1078(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge1079")
private external fun kniBridge1079(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1080")
private external fun kniBridge1080(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1081")
private external fun kniBridge1081(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1082")
private external fun kniBridge1082(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1083")
private external fun kniBridge1083(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1084")
private external fun kniBridge1084(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1085")
private external fun kniBridge1085(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1086")
private external fun kniBridge1086(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1087")
private external fun kniBridge1087(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1088")
private external fun kniBridge1088(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1089")
private external fun kniBridge1089(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1090")
private external fun kniBridge1090(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1091")
private external fun kniBridge1091(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1092")
private external fun kniBridge1092(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1093")
private external fun kniBridge1093(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge1094")
private external fun kniBridge1094(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge1095")
private external fun kniBridge1095(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge1096")
private external fun kniBridge1096(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge1097")
private external fun kniBridge1097(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1098")
private external fun kniBridge1098(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1099")
private external fun kniBridge1099(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1100")
private external fun kniBridge1100(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge1101")
private external fun kniBridge1101(p0: Int): Int
@SymbolName("glibresources_kniBridge1102")
private external fun kniBridge1102(p0: Int, p1: NativePtr, p2: ULong): Unit
@SymbolName("glibresources_kniBridge1103")
private external fun kniBridge1103(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1104")
private external fun kniBridge1104(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1105")
private external fun kniBridge1105(p0: Int): Int
@SymbolName("glibresources_kniBridge1106")
private external fun kniBridge1106(p0: Int): Int
@SymbolName("glibresources_kniBridge1107")
private external fun kniBridge1107(p0: Int, p1: NativePtr, p2: ULong, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge1108")
private external fun kniBridge1108(p0: Int, p1: NativePtr, p2: ULong, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge1109")
private external fun kniBridge1109(p0: Int, p1: NativePtr, p2: ULong, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge1110")
private external fun kniBridge1110(p0: Int, p1: NativePtr, p2: ULong, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge1111")
private external fun kniBridge1111(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1112")
private external fun kniBridge1112(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1113")
private external fun kniBridge1113(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1114")
private external fun kniBridge1114(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1115")
private external fun kniBridge1115(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1116")
private external fun kniBridge1116(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1117")
private external fun kniBridge1117(): UInt
@SymbolName("glibresources_kniBridge1118")
private external fun kniBridge1118(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1119")
private external fun kniBridge1119(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1120")
private external fun kniBridge1120(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1121")
private external fun kniBridge1121(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1122")
private external fun kniBridge1122(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1123")
private external fun kniBridge1123(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1124")
private external fun kniBridge1124(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge1125")
private external fun kniBridge1125(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1126")
private external fun kniBridge1126(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge1127")
private external fun kniBridge1127(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1128")
private external fun kniBridge1128(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge1129")
private external fun kniBridge1129(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1130")
private external fun kniBridge1130(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1131")
private external fun kniBridge1131(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1132")
private external fun kniBridge1132(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge1133")
private external fun kniBridge1133(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1134")
private external fun kniBridge1134(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1135")
private external fun kniBridge1135(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1136")
private external fun kniBridge1136(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1137")
private external fun kniBridge1137(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1138")
private external fun kniBridge1138(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1139")
private external fun kniBridge1139(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1140")
private external fun kniBridge1140(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1141")
private external fun kniBridge1141(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1142")
private external fun kniBridge1142(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1143")
private external fun kniBridge1143(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1144")
private external fun kniBridge1144(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1145")
private external fun kniBridge1145(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1146")
private external fun kniBridge1146(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1147")
private external fun kniBridge1147(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1148")
private external fun kniBridge1148(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1149")
private external fun kniBridge1149(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1150")
private external fun kniBridge1150(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1151")
private external fun kniBridge1151(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1152")
private external fun kniBridge1152(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1153")
private external fun kniBridge1153(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1154")
private external fun kniBridge1154(p0: UInt): UInt
@SymbolName("glibresources_kniBridge1155")
private external fun kniBridge1155(p0: NativePtr, p1: Int, p2: ULong, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1156")
private external fun kniBridge1156(): NativePtr
@SymbolName("glibresources_kniBridge1157")
private external fun kniBridge1157(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1158")
private external fun kniBridge1158(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1159")
private external fun kniBridge1159(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1160")
private external fun kniBridge1160(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1161")
private external fun kniBridge1161(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1162")
private external fun kniBridge1162(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1163")
private external fun kniBridge1163(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1164")
private external fun kniBridge1164(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1165")
private external fun kniBridge1165(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1166")
private external fun kniBridge1166(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1167")
private external fun kniBridge1167(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1168")
private external fun kniBridge1168(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1169")
private external fun kniBridge1169(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1170")
private external fun kniBridge1170(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1171")
private external fun kniBridge1171(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1172")
private external fun kniBridge1172(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge1173")
private external fun kniBridge1173(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1174")
private external fun kniBridge1174(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1175")
private external fun kniBridge1175(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1176")
private external fun kniBridge1176(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1177")
private external fun kniBridge1177(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1178")
private external fun kniBridge1178(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1179")
private external fun kniBridge1179(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1180")
private external fun kniBridge1180(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1181")
private external fun kniBridge1181(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge1182")
private external fun kniBridge1182(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1183")
private external fun kniBridge1183(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1184")
private external fun kniBridge1184(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1185")
private external fun kniBridge1185(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1186")
private external fun kniBridge1186(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1187")
private external fun kniBridge1187(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1188")
private external fun kniBridge1188(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1189")
private external fun kniBridge1189(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1190")
private external fun kniBridge1190(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1191")
private external fun kniBridge1191(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1192")
private external fun kniBridge1192(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1193")
private external fun kniBridge1193(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1194")
private external fun kniBridge1194(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1195")
private external fun kniBridge1195(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1196")
private external fun kniBridge1196(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1197")
private external fun kniBridge1197(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1198")
private external fun kniBridge1198(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1199")
private external fun kniBridge1199(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge1200")
private external fun kniBridge1200(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1201")
private external fun kniBridge1201(): NativePtr
@SymbolName("glibresources_kniBridge1202")
private external fun kniBridge1202(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1203")
private external fun kniBridge1203(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1204")
private external fun kniBridge1204(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge1205")
private external fun kniBridge1205(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("glibresources_kniBridge1206")
private external fun kniBridge1206(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1207")
private external fun kniBridge1207(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("glibresources_kniBridge1208")
private external fun kniBridge1208(p0: NativePtr): Double
@SymbolName("glibresources_kniBridge1209")
private external fun kniBridge1209(p0: NativePtr, p1: Double, p2: Double): Double
@SymbolName("glibresources_kniBridge1210")
private external fun kniBridge1210(p0: UInt): Unit
@SymbolName("glibresources_kniBridge1211")
private external fun kniBridge1211(): UInt
@SymbolName("glibresources_kniBridge1212")
private external fun kniBridge1212(p0: Int, p1: Int): Int
@SymbolName("glibresources_kniBridge1213")
private external fun kniBridge1213(): Double
@SymbolName("glibresources_kniBridge1214")
private external fun kniBridge1214(p0: Double, p1: Double): Double
@SymbolName("glibresources_kniBridge1215")
private external fun kniBridge1215(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1216")
private external fun kniBridge1216(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1217")
private external fun kniBridge1217(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1218")
private external fun kniBridge1218(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1219")
private external fun kniBridge1219(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1220")
private external fun kniBridge1220(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1221")
private external fun kniBridge1221(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1222")
private external fun kniBridge1222(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1223")
private external fun kniBridge1223(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1224")
private external fun kniBridge1224(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1225")
private external fun kniBridge1225(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1226")
private external fun kniBridge1226(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1227")
private external fun kniBridge1227(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1228")
private external fun kniBridge1228(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1229")
private external fun kniBridge1229(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1230")
private external fun kniBridge1230(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1231")
private external fun kniBridge1231(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1232")
private external fun kniBridge1232(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge1233")
private external fun kniBridge1233(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1234")
private external fun kniBridge1234(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1235")
private external fun kniBridge1235(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1236")
private external fun kniBridge1236(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge1237")
private external fun kniBridge1237(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1238")
private external fun kniBridge1238(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge1239")
private external fun kniBridge1239(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1240")
private external fun kniBridge1240(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1241")
private external fun kniBridge1241(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1242")
private external fun kniBridge1242(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1243")
private external fun kniBridge1243(): UInt
@SymbolName("glibresources_kniBridge1244")
private external fun kniBridge1244(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1245")
private external fun kniBridge1245(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1246")
private external fun kniBridge1246(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1247")
private external fun kniBridge1247(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1248")
private external fun kniBridge1248(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1249")
private external fun kniBridge1249(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1250")
private external fun kniBridge1250(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1251")
private external fun kniBridge1251(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1252")
private external fun kniBridge1252(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1253")
private external fun kniBridge1253(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge1254")
private external fun kniBridge1254(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge1255")
private external fun kniBridge1255(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1256")
private external fun kniBridge1256(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1257")
private external fun kniBridge1257(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt): Int
@SymbolName("glibresources_kniBridge1258")
private external fun kniBridge1258(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1259")
private external fun kniBridge1259(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: UInt, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge1260")
private external fun kniBridge1260(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1261")
private external fun kniBridge1261(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: UInt, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge1262")
private external fun kniBridge1262(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt): NativePtr
@SymbolName("glibresources_kniBridge1263")
private external fun kniBridge1263(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge1264")
private external fun kniBridge1264(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: UInt, p5: Int, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1265")
private external fun kniBridge1265(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: NativePtr, p5: UInt, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1266")
private external fun kniBridge1266(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: NativePtr, p5: UInt, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1267")
private external fun kniBridge1267(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1268")
private external fun kniBridge1268(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge1269")
private external fun kniBridge1269(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1270")
private external fun kniBridge1270(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1271")
private external fun kniBridge1271(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1272")
private external fun kniBridge1272(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1273")
private external fun kniBridge1273(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1274")
private external fun kniBridge1274(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1275")
private external fun kniBridge1275(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1276")
private external fun kniBridge1276(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1277")
private external fun kniBridge1277(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1278")
private external fun kniBridge1278(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1279")
private external fun kniBridge1279(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge1280")
private external fun kniBridge1280(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1281")
private external fun kniBridge1281(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1282")
private external fun kniBridge1282(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1283")
private external fun kniBridge1283(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1284")
private external fun kniBridge1284(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1285")
private external fun kniBridge1285(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1286")
private external fun kniBridge1286(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge1287")
private external fun kniBridge1287(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1288")
private external fun kniBridge1288(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("glibresources_kniBridge1289")
private external fun kniBridge1289(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1290")
private external fun kniBridge1290(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1291")
private external fun kniBridge1291(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1292")
private external fun kniBridge1292(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1293")
private external fun kniBridge1293(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1294")
private external fun kniBridge1294(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1295")
private external fun kniBridge1295(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1296")
private external fun kniBridge1296(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge1297")
private external fun kniBridge1297(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1298")
private external fun kniBridge1298(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1299")
private external fun kniBridge1299(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1300")
private external fun kniBridge1300(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1301")
private external fun kniBridge1301(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1302")
private external fun kniBridge1302(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int): Unit
@SymbolName("glibresources_kniBridge1303")
private external fun kniBridge1303(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1304")
private external fun kniBridge1304(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1305")
private external fun kniBridge1305(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1306")
private external fun kniBridge1306(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1307")
private external fun kniBridge1307(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1308")
private external fun kniBridge1308(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1309")
private external fun kniBridge1309(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1310")
private external fun kniBridge1310(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1311")
private external fun kniBridge1311(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1312")
private external fun kniBridge1312(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1313")
private external fun kniBridge1313(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge1314")
private external fun kniBridge1314(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1315")
private external fun kniBridge1315(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1316")
private external fun kniBridge1316(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1317")
private external fun kniBridge1317(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1318")
private external fun kniBridge1318(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1319")
private external fun kniBridge1319(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1320")
private external fun kniBridge1320(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1321")
private external fun kniBridge1321(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1322")
private external fun kniBridge1322(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1323")
private external fun kniBridge1323(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1324")
private external fun kniBridge1324(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1325")
private external fun kniBridge1325(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1326")
private external fun kniBridge1326(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1327")
private external fun kniBridge1327(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1328")
private external fun kniBridge1328(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1329")
private external fun kniBridge1329(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1330")
private external fun kniBridge1330(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1331")
private external fun kniBridge1331(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1332")
private external fun kniBridge1332(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1333")
private external fun kniBridge1333(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1334")
private external fun kniBridge1334(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1335")
private external fun kniBridge1335(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1336")
private external fun kniBridge1336(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1337")
private external fun kniBridge1337(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge1338")
private external fun kniBridge1338(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1339")
private external fun kniBridge1339(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1340")
private external fun kniBridge1340(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1341")
private external fun kniBridge1341(): UInt
@SymbolName("glibresources_kniBridge1342")
private external fun kniBridge1342(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1343")
private external fun kniBridge1343(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1344")
private external fun kniBridge1344(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1345")
private external fun kniBridge1345(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1346")
private external fun kniBridge1346(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1347")
private external fun kniBridge1347(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1348")
private external fun kniBridge1348(p0: ULong, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1349")
private external fun kniBridge1349(p0: ULong, p1: NativePtr, p2: ULong): Unit
@SymbolName("glibresources_kniBridge1350")
private external fun kniBridge1350(p0: UInt, p1: Long): Unit
@SymbolName("glibresources_kniBridge1351")
private external fun kniBridge1351(p0: UInt): Long
@SymbolName("glibresources_kniBridge1352")
private external fun kniBridge1352(p0: UInt, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1353")
private external fun kniBridge1353(): UInt
@SymbolName("glibresources_kniBridge1354")
private external fun kniBridge1354(): UInt
@SymbolName("glibresources_kniBridge1355")
private external fun kniBridge1355(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Int
@SymbolName("glibresources_kniBridge1356")
private external fun kniBridge1356(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr, p10: NativePtr): Int
@SymbolName("glibresources_kniBridge1357")
private external fun kniBridge1357(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: Int, p8: Int, p9: Int, p10: NativePtr): Int
@SymbolName("glibresources_kniBridge1358")
private external fun kniBridge1358(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr): Int
@SymbolName("glibresources_kniBridge1359")
private external fun kniBridge1359(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge1360")
private external fun kniBridge1360(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1361")
private external fun kniBridge1361(p0: Int, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1362")
private external fun kniBridge1362(p0: Int): Unit
@SymbolName("glibresources_kniBridge1363")
private external fun kniBridge1363(p0: Byte): Byte
@SymbolName("glibresources_kniBridge1364")
private external fun kniBridge1364(p0: Byte): Byte
@SymbolName("glibresources_kniBridge1365")
private external fun kniBridge1365(p0: Byte): Int
@SymbolName("glibresources_kniBridge1366")
private external fun kniBridge1366(p0: Byte): Int
@SymbolName("glibresources_kniBridge1367")
private external fun kniBridge1367(p0: NativePtr, p1: NativePtr, p2: Byte): NativePtr
@SymbolName("glibresources_kniBridge1368")
private external fun kniBridge1368(p0: NativePtr, p1: NativePtr, p2: Byte): NativePtr
@SymbolName("glibresources_kniBridge1369")
private external fun kniBridge1369(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge1370")
private external fun kniBridge1370(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge1371")
private external fun kniBridge1371(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1372")
private external fun kniBridge1372(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("glibresources_kniBridge1373")
private external fun kniBridge1373(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("glibresources_kniBridge1374")
private external fun kniBridge1374(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1375")
private external fun kniBridge1375(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1376")
private external fun kniBridge1376(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1377")
private external fun kniBridge1377(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1378")
private external fun kniBridge1378(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1379")
private external fun kniBridge1379(p0: NativePtr, p1: NativePtr): Double
@SymbolName("glibresources_kniBridge1380")
private external fun kniBridge1380(p0: NativePtr, p1: NativePtr): Double
@SymbolName("glibresources_kniBridge1381")
private external fun kniBridge1381(p0: NativePtr, p1: NativePtr, p2: UInt): ULong
@SymbolName("glibresources_kniBridge1382")
private external fun kniBridge1382(p0: NativePtr, p1: NativePtr, p2: UInt): Long
@SymbolName("glibresources_kniBridge1383")
private external fun kniBridge1383(p0: NativePtr, p1: Int, p2: Double): NativePtr
@SymbolName("glibresources_kniBridge1384")
private external fun kniBridge1384(p0: NativePtr, p1: Int, p2: NativePtr, p3: Double): NativePtr
@SymbolName("glibresources_kniBridge1385")
private external fun kniBridge1385(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1386")
private external fun kniBridge1386(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1387")
private external fun kniBridge1387(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1388")
private external fun kniBridge1388(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("glibresources_kniBridge1389")
private external fun kniBridge1389(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge1390")
private external fun kniBridge1390(p0: NativePtr, p1: Long): NativePtr
@SymbolName("glibresources_kniBridge1391")
private external fun kniBridge1391(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1392")
private external fun kniBridge1392(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1393")
private external fun kniBridge1393(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("glibresources_kniBridge1394")
private external fun kniBridge1394(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1395")
private external fun kniBridge1395(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1396")
private external fun kniBridge1396(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1397")
private external fun kniBridge1397(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1398")
private external fun kniBridge1398(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1399")
private external fun kniBridge1399(p0: ULong, p1: Byte): NativePtr
@SymbolName("glibresources_kniBridge1400")
private external fun kniBridge1400(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1401")
private external fun kniBridge1401(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1402")
private external fun kniBridge1402(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1403")
private external fun kniBridge1403(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1404")
private external fun kniBridge1404(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1405")
private external fun kniBridge1405(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1406")
private external fun kniBridge1406(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1407")
private external fun kniBridge1407(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1408")
private external fun kniBridge1408(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1409")
private external fun kniBridge1409(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1410")
private external fun kniBridge1410(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1411")
private external fun kniBridge1411(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1412")
private external fun kniBridge1412(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge1413")
private external fun kniBridge1413(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1414")
private external fun kniBridge1414(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1415")
private external fun kniBridge1415(): UInt
@SymbolName("glibresources_kniBridge1416")
private external fun kniBridge1416(p0: NativePtr, p1: UInt, p2: Long, p3: Long, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge1417")
private external fun kniBridge1417(p0: NativePtr, p1: UInt, p2: ULong, p3: ULong, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge1418")
private external fun kniBridge1418(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1419")
private external fun kniBridge1419(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1420")
private external fun kniBridge1420(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1421")
private external fun kniBridge1421(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1422")
private external fun kniBridge1422(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("glibresources_kniBridge1423")
private external fun kniBridge1423(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1424")
private external fun kniBridge1424(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1425")
private external fun kniBridge1425(): Int
@SymbolName("glibresources_kniBridge1426")
private external fun kniBridge1426(): Int
@SymbolName("glibresources_kniBridge1427")
private external fun kniBridge1427(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1428")
private external fun kniBridge1428(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1429")
private external fun kniBridge1429(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1430")
private external fun kniBridge1430(): Unit
@SymbolName("glibresources_kniBridge1431")
private external fun kniBridge1431(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1432")
private external fun kniBridge1432(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1433")
private external fun kniBridge1433(): Int
@SymbolName("glibresources_kniBridge1434")
private external fun kniBridge1434(): Unit
@SymbolName("glibresources_kniBridge1435")
private external fun kniBridge1435(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1436")
private external fun kniBridge1436(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1437")
private external fun kniBridge1437(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1438")
private external fun kniBridge1438(): Unit
@SymbolName("glibresources_kniBridge1439")
private external fun kniBridge1439(): Double
@SymbolName("glibresources_kniBridge1440")
private external fun kniBridge1440(): Double
@SymbolName("glibresources_kniBridge1441")
private external fun kniBridge1441(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1442")
private external fun kniBridge1442(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1443")
private external fun kniBridge1443(p0: ULong, p1: UInt): Int
@SymbolName("glibresources_kniBridge1444")
private external fun kniBridge1444(p0: NativePtr, p1: ULong, p2: UInt): Unit
@SymbolName("glibresources_kniBridge1445")
private external fun kniBridge1445(): Int
@SymbolName("glibresources_kniBridge1446")
private external fun kniBridge1446(): Int
@SymbolName("glibresources_kniBridge1447")
private external fun kniBridge1447(): Int
@SymbolName("glibresources_kniBridge1448")
private external fun kniBridge1448(p0: Int, p1: Int): Int
@SymbolName("glibresources_kniBridge1449")
private external fun kniBridge1449(): Double
@SymbolName("glibresources_kniBridge1450")
private external fun kniBridge1450(p0: Double, p1: Double): Double
@SymbolName("glibresources_kniBridge1451")
private external fun kniBridge1451(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1452")
private external fun kniBridge1452(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1453")
private external fun kniBridge1453(): NativePtr
@SymbolName("glibresources_kniBridge1454")
private external fun kniBridge1454(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1455")
private external fun kniBridge1455(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1456")
private external fun kniBridge1456(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1457")
private external fun kniBridge1457(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: ULong, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1458")
private external fun kniBridge1458(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1459")
private external fun kniBridge1459(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1460")
private external fun kniBridge1460(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge1461")
private external fun kniBridge1461(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UInt, p7: Int): Unit
@SymbolName("glibresources_kniBridge1462")
private external fun kniBridge1462(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1463")
private external fun kniBridge1463(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge1464")
private external fun kniBridge1464(): NativePtr
@SymbolName("glibresources_kniBridge1465")
private external fun kniBridge1465(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1466")
private external fun kniBridge1466(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1467")
private external fun kniBridge1467(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1468")
private external fun kniBridge1468(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1469")
private external fun kniBridge1469(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1470")
private external fun kniBridge1470(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1471")
private external fun kniBridge1471(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1472")
private external fun kniBridge1472(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge1473")
private external fun kniBridge1473(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1474")
private external fun kniBridge1474(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("glibresources_kniBridge1475")
private external fun kniBridge1475(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge1476")
private external fun kniBridge1476(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1477")
private external fun kniBridge1477(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1478")
private external fun kniBridge1478(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1479")
private external fun kniBridge1479(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge1480")
private external fun kniBridge1480(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1481")
private external fun kniBridge1481(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1482")
private external fun kniBridge1482(p0: Int): Unit
@SymbolName("glibresources_kniBridge1483")
private external fun kniBridge1483(): Int
@SymbolName("glibresources_kniBridge1484")
private external fun kniBridge1484(): UInt
@SymbolName("glibresources_kniBridge1485")
private external fun kniBridge1485(): Unit
@SymbolName("glibresources_kniBridge1486")
private external fun kniBridge1486(p0: UInt): Unit
@SymbolName("glibresources_kniBridge1487")
private external fun kniBridge1487(): UInt
@SymbolName("glibresources_kniBridge1488")
private external fun kniBridge1488(): NativePtr
@SymbolName("glibresources_kniBridge1489")
private external fun kniBridge1489(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1490")
private external fun kniBridge1490(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1491")
private external fun kniBridge1491(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1492")
private external fun kniBridge1492(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1493")
private external fun kniBridge1493(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1494")
private external fun kniBridge1494(p0: NativePtr, p1: NativePtr): Double
@SymbolName("glibresources_kniBridge1495")
private external fun kniBridge1495(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1496")
private external fun kniBridge1496(p0: ULong): Unit
@SymbolName("glibresources_kniBridge1497")
private external fun kniBridge1497(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge1498")
private external fun kniBridge1498(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1499")
private external fun kniBridge1499(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1500")
private external fun kniBridge1500(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1501")
private external fun kniBridge1501(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1502")
private external fun kniBridge1502(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1503")
private external fun kniBridge1503(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1504")
private external fun kniBridge1504(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1505")
private external fun kniBridge1505(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1506")
private external fun kniBridge1506(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1507")
private external fun kniBridge1507(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1508")
private external fun kniBridge1508(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1509")
private external fun kniBridge1509(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1510")
private external fun kniBridge1510(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1511")
private external fun kniBridge1511(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1512")
private external fun kniBridge1512(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1513")
private external fun kniBridge1513(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1514")
private external fun kniBridge1514(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1515")
private external fun kniBridge1515(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge1516")
private external fun kniBridge1516(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1517")
private external fun kniBridge1517(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1518")
private external fun kniBridge1518(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1519")
private external fun kniBridge1519(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1520")
private external fun kniBridge1520(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1521")
private external fun kniBridge1521(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1522")
private external fun kniBridge1522(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1523")
private external fun kniBridge1523(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1524")
private external fun kniBridge1524(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1525")
private external fun kniBridge1525(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1526")
private external fun kniBridge1526(): NativePtr
@SymbolName("glibresources_kniBridge1527")
private external fun kniBridge1527(p0: UInt, p1: UInt, p2: UInt): NativePtr
@SymbolName("glibresources_kniBridge1528")
private external fun kniBridge1528(p0: NativePtr, p1: Int, p2: ULong, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge1529")
private external fun kniBridge1529(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1530")
private external fun kniBridge1530(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1531")
private external fun kniBridge1531(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1532")
private external fun kniBridge1532(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1533")
private external fun kniBridge1533(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1534")
private external fun kniBridge1534(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1535")
private external fun kniBridge1535(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1536")
private external fun kniBridge1536(): Unit
@SymbolName("glibresources_kniBridge1537")
private external fun kniBridge1537(): Unit
@SymbolName("glibresources_kniBridge1538")
private external fun kniBridge1538(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1539")
private external fun kniBridge1539(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1540")
private external fun kniBridge1540(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1541")
private external fun kniBridge1541(): Unit
@SymbolName("glibresources_kniBridge1542")
private external fun kniBridge1542(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1543")
private external fun kniBridge1543(): Unit
@SymbolName("glibresources_kniBridge1544")
private external fun kniBridge1544(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1545")
private external fun kniBridge1545(): Unit
@SymbolName("glibresources_kniBridge1546")
private external fun kniBridge1546(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1547")
private external fun kniBridge1547(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1548")
private external fun kniBridge1548(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1549")
private external fun kniBridge1549(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1550")
private external fun kniBridge1550(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1551")
private external fun kniBridge1551(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1552")
private external fun kniBridge1552(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1553")
private external fun kniBridge1553(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1554")
private external fun kniBridge1554(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1555")
private external fun kniBridge1555(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1556")
private external fun kniBridge1556(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1557")
private external fun kniBridge1557(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1558")
private external fun kniBridge1558(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1559")
private external fun kniBridge1559(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1560")
private external fun kniBridge1560(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge1561")
private external fun kniBridge1561(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1562")
private external fun kniBridge1562(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1563")
private external fun kniBridge1563(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge1564")
private external fun kniBridge1564(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1565")
private external fun kniBridge1565(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge1566")
private external fun kniBridge1566(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1567")
private external fun kniBridge1567(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1568")
private external fun kniBridge1568(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge1569")
private external fun kniBridge1569(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1570")
private external fun kniBridge1570(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: Int, p5: UInt, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1571")
private external fun kniBridge1571(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge1572")
private external fun kniBridge1572(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1573")
private external fun kniBridge1573(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1574")
private external fun kniBridge1574(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1575")
private external fun kniBridge1575(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1576")
private external fun kniBridge1576(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1577")
private external fun kniBridge1577(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1578")
private external fun kniBridge1578(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1579")
private external fun kniBridge1579(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1580")
private external fun kniBridge1580(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge1581")
private external fun kniBridge1581(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1582")
private external fun kniBridge1582(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1583")
private external fun kniBridge1583(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1584")
private external fun kniBridge1584(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1585")
private external fun kniBridge1585(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1586")
private external fun kniBridge1586(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1587")
private external fun kniBridge1587(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1588")
private external fun kniBridge1588(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1589")
private external fun kniBridge1589(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1590")
private external fun kniBridge1590(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1591")
private external fun kniBridge1591(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1592")
private external fun kniBridge1592(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1593")
private external fun kniBridge1593(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1594")
private external fun kniBridge1594(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1595")
private external fun kniBridge1595(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1596")
private external fun kniBridge1596(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1597")
private external fun kniBridge1597(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1598")
private external fun kniBridge1598(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1599")
private external fun kniBridge1599(): Int
@SymbolName("glibresources_kniBridge1600")
private external fun kniBridge1600(): NativePtr
@SymbolName("glibresources_kniBridge1601")
private external fun kniBridge1601(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1602")
private external fun kniBridge1602(): NativePtr
@SymbolName("glibresources_kniBridge1603")
private external fun kniBridge1603(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1604")
private external fun kniBridge1604(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge1605")
private external fun kniBridge1605(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1606")
private external fun kniBridge1606(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1607")
private external fun kniBridge1607(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1608")
private external fun kniBridge1608(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1609")
private external fun kniBridge1609(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1610")
private external fun kniBridge1610(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1611")
private external fun kniBridge1611(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1612")
private external fun kniBridge1612(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1613")
private external fun kniBridge1613(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1614")
private external fun kniBridge1614(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1615")
private external fun kniBridge1615(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1616")
private external fun kniBridge1616(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1617")
private external fun kniBridge1617(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1618")
private external fun kniBridge1618(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1619")
private external fun kniBridge1619(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1620")
private external fun kniBridge1620(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1621")
private external fun kniBridge1621(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1622")
private external fun kniBridge1622(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1623")
private external fun kniBridge1623(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1624")
private external fun kniBridge1624(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1625")
private external fun kniBridge1625(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1626")
private external fun kniBridge1626(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1627")
private external fun kniBridge1627(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1628")
private external fun kniBridge1628(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1629")
private external fun kniBridge1629(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1630")
private external fun kniBridge1630(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1631")
private external fun kniBridge1631(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1632")
private external fun kniBridge1632(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1633")
private external fun kniBridge1633(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1634")
private external fun kniBridge1634(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1635")
private external fun kniBridge1635(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1636")
private external fun kniBridge1636(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1637")
private external fun kniBridge1637(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1638")
private external fun kniBridge1638(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1639")
private external fun kniBridge1639(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1640")
private external fun kniBridge1640(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1641")
private external fun kniBridge1641(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1642")
private external fun kniBridge1642(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1643")
private external fun kniBridge1643(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1644")
private external fun kniBridge1644(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1645")
private external fun kniBridge1645(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1646")
private external fun kniBridge1646(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1647")
private external fun kniBridge1647(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1648")
private external fun kniBridge1648(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1649")
private external fun kniBridge1649(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1650")
private external fun kniBridge1650(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1651")
private external fun kniBridge1651(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1652")
private external fun kniBridge1652(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1653")
private external fun kniBridge1653(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1654")
private external fun kniBridge1654(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1655")
private external fun kniBridge1655(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1656")
private external fun kniBridge1656(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1657")
private external fun kniBridge1657(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1658")
private external fun kniBridge1658(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1659")
private external fun kniBridge1659(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1660")
private external fun kniBridge1660(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1661")
private external fun kniBridge1661(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1662")
private external fun kniBridge1662(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1663")
private external fun kniBridge1663(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1664")
private external fun kniBridge1664(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1665")
private external fun kniBridge1665(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1666")
private external fun kniBridge1666(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1667")
private external fun kniBridge1667(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1668")
private external fun kniBridge1668(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1669")
private external fun kniBridge1669(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1670")
private external fun kniBridge1670(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1671")
private external fun kniBridge1671(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1672")
private external fun kniBridge1672(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1673")
private external fun kniBridge1673(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1674")
private external fun kniBridge1674(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1675")
private external fun kniBridge1675(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1676")
private external fun kniBridge1676(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1677")
private external fun kniBridge1677(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1678")
private external fun kniBridge1678(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1679")
private external fun kniBridge1679(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1680")
private external fun kniBridge1680(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1681")
private external fun kniBridge1681(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1682")
private external fun kniBridge1682(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1683")
private external fun kniBridge1683(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1684")
private external fun kniBridge1684(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1685")
private external fun kniBridge1685(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1686")
private external fun kniBridge1686(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1687")
private external fun kniBridge1687(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1688")
private external fun kniBridge1688(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1689")
private external fun kniBridge1689(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1690")
private external fun kniBridge1690(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1691")
private external fun kniBridge1691(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1692")
private external fun kniBridge1692(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1693")
private external fun kniBridge1693(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1694")
private external fun kniBridge1694(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1695")
private external fun kniBridge1695(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1696")
private external fun kniBridge1696(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1697")
private external fun kniBridge1697(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1698")
private external fun kniBridge1698(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1699")
private external fun kniBridge1699(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1700")
private external fun kniBridge1700(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1701")
private external fun kniBridge1701(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1702")
private external fun kniBridge1702(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1703")
private external fun kniBridge1703(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1704")
private external fun kniBridge1704(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1705")
private external fun kniBridge1705(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1706")
private external fun kniBridge1706(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1707")
private external fun kniBridge1707(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1708")
private external fun kniBridge1708(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1709")
private external fun kniBridge1709(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1710")
private external fun kniBridge1710(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1711")
private external fun kniBridge1711(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1712")
private external fun kniBridge1712(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1713")
private external fun kniBridge1713(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1714")
private external fun kniBridge1714(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1715")
private external fun kniBridge1715(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1716")
private external fun kniBridge1716(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1717")
private external fun kniBridge1717(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1718")
private external fun kniBridge1718(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1719")
private external fun kniBridge1719(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1720")
private external fun kniBridge1720(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1721")
private external fun kniBridge1721(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1722")
private external fun kniBridge1722(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1723")
private external fun kniBridge1723(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1724")
private external fun kniBridge1724(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1725")
private external fun kniBridge1725(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1726")
private external fun kniBridge1726(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1727")
private external fun kniBridge1727(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1728")
private external fun kniBridge1728(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1729")
private external fun kniBridge1729(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1730")
private external fun kniBridge1730(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1731")
private external fun kniBridge1731(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1732")
private external fun kniBridge1732(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1733")
private external fun kniBridge1733(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1734")
private external fun kniBridge1734(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1735")
private external fun kniBridge1735(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1736")
private external fun kniBridge1736(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1737")
private external fun kniBridge1737(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1738")
private external fun kniBridge1738(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1739")
private external fun kniBridge1739(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1740")
private external fun kniBridge1740(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1741")
private external fun kniBridge1741(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1742")
private external fun kniBridge1742(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1743")
private external fun kniBridge1743(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1744")
private external fun kniBridge1744(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1745")
private external fun kniBridge1745(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1746")
private external fun kniBridge1746(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1747")
private external fun kniBridge1747(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1748")
private external fun kniBridge1748(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1749")
private external fun kniBridge1749(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1750")
private external fun kniBridge1750(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1751")
private external fun kniBridge1751(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1752")
private external fun kniBridge1752(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1753")
private external fun kniBridge1753(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1754")
private external fun kniBridge1754(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1755")
private external fun kniBridge1755(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1756")
private external fun kniBridge1756(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1757")
private external fun kniBridge1757(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1758")
private external fun kniBridge1758(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1759")
private external fun kniBridge1759(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1760")
private external fun kniBridge1760(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1761")
private external fun kniBridge1761(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1762")
private external fun kniBridge1762(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1763")
private external fun kniBridge1763(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1764")
private external fun kniBridge1764(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1765")
private external fun kniBridge1765(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1766")
private external fun kniBridge1766(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1767")
private external fun kniBridge1767(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1768")
private external fun kniBridge1768(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1769")
private external fun kniBridge1769(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1770")
private external fun kniBridge1770(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1771")
private external fun kniBridge1771(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1772")
private external fun kniBridge1772(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1773")
private external fun kniBridge1773(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1774")
private external fun kniBridge1774(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1775")
private external fun kniBridge1775(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1776")
private external fun kniBridge1776(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1777")
private external fun kniBridge1777(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1778")
private external fun kniBridge1778(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1779")
private external fun kniBridge1779(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1780")
private external fun kniBridge1780(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1781")
private external fun kniBridge1781(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1782")
private external fun kniBridge1782(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1783")
private external fun kniBridge1783(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1784")
private external fun kniBridge1784(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1785")
private external fun kniBridge1785(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1786")
private external fun kniBridge1786(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1787")
private external fun kniBridge1787(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1788")
private external fun kniBridge1788(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1789")
private external fun kniBridge1789(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1790")
private external fun kniBridge1790(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1791")
private external fun kniBridge1791(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1792")
private external fun kniBridge1792(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1793")
private external fun kniBridge1793(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1794")
private external fun kniBridge1794(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1795")
private external fun kniBridge1795(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1796")
private external fun kniBridge1796(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1797")
private external fun kniBridge1797(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1798")
private external fun kniBridge1798(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1799")
private external fun kniBridge1799(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1800")
private external fun kniBridge1800(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1801")
private external fun kniBridge1801(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1802")
private external fun kniBridge1802(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1803")
private external fun kniBridge1803(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1804")
private external fun kniBridge1804(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1805")
private external fun kniBridge1805(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1806")
private external fun kniBridge1806(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1807")
private external fun kniBridge1807(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1808")
private external fun kniBridge1808(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1809")
private external fun kniBridge1809(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1810")
private external fun kniBridge1810(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1811")
private external fun kniBridge1811(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1812")
private external fun kniBridge1812(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1813")
private external fun kniBridge1813(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1814")
private external fun kniBridge1814(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1815")
private external fun kniBridge1815(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1816")
private external fun kniBridge1816(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1817")
private external fun kniBridge1817(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1818")
private external fun kniBridge1818(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1819")
private external fun kniBridge1819(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1820")
private external fun kniBridge1820(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1821")
private external fun kniBridge1821(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1822")
private external fun kniBridge1822(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1823")
private external fun kniBridge1823(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1824")
private external fun kniBridge1824(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1825")
private external fun kniBridge1825(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1826")
private external fun kniBridge1826(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1827")
private external fun kniBridge1827(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1828")
private external fun kniBridge1828(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1829")
private external fun kniBridge1829(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1830")
private external fun kniBridge1830(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1831")
private external fun kniBridge1831(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1832")
private external fun kniBridge1832(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1833")
private external fun kniBridge1833(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1834")
private external fun kniBridge1834(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1835")
private external fun kniBridge1835(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1836")
private external fun kniBridge1836(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1837")
private external fun kniBridge1837(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1838")
private external fun kniBridge1838(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1839")
private external fun kniBridge1839(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1840")
private external fun kniBridge1840(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1841")
private external fun kniBridge1841(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1842")
private external fun kniBridge1842(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1843")
private external fun kniBridge1843(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1844")
private external fun kniBridge1844(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1845")
private external fun kniBridge1845(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1846")
private external fun kniBridge1846(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1847")
private external fun kniBridge1847(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1848")
private external fun kniBridge1848(): Unit
@SymbolName("glibresources_kniBridge1849")
private external fun kniBridge1849(p0: UInt): Unit
@SymbolName("glibresources_kniBridge1850")
private external fun kniBridge1850(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1851")
private external fun kniBridge1851(p0: ULong): UInt
@SymbolName("glibresources_kniBridge1852")
private external fun kniBridge1852(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge1853")
private external fun kniBridge1853(p0: ULong): ULong
@SymbolName("glibresources_kniBridge1854")
private external fun kniBridge1854(p0: ULong): UInt
@SymbolName("glibresources_kniBridge1855")
private external fun kniBridge1855(p0: ULong, p1: ULong): ULong
@SymbolName("glibresources_kniBridge1856")
private external fun kniBridge1856(p0: ULong, p1: ULong): Int
@SymbolName("glibresources_kniBridge1857")
private external fun kniBridge1857(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1858")
private external fun kniBridge1858(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1859")
private external fun kniBridge1859(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1860")
private external fun kniBridge1860(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1861")
private external fun kniBridge1861(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1862")
private external fun kniBridge1862(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1863")
private external fun kniBridge1863(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1864")
private external fun kniBridge1864(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1865")
private external fun kniBridge1865(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1866")
private external fun kniBridge1866(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1867")
private external fun kniBridge1867(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1868")
private external fun kniBridge1868(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1869")
private external fun kniBridge1869(p0: ULong, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1870")
private external fun kniBridge1870(p0: ULong, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1871")
private external fun kniBridge1871(p0: ULong, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1872")
private external fun kniBridge1872(p0: ULong): Int
@SymbolName("glibresources_kniBridge1873")
private external fun kniBridge1873(p0: ULong, p1: NativePtr, p2: NativePtr, p3: UInt): ULong
@SymbolName("glibresources_kniBridge1874")
private external fun kniBridge1874(p0: ULong, p1: NativePtr, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr, p6: UInt): ULong
@SymbolName("glibresources_kniBridge1875")
private external fun kniBridge1875(p0: ULong, p1: NativePtr, p2: NativePtr, p3: UInt): ULong
@SymbolName("glibresources_kniBridge1876")
private external fun kniBridge1876(p0: ULong, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): ULong
@SymbolName("glibresources_kniBridge1877")
private external fun kniBridge1877(p0: ULong, p1: ULong, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1878")
private external fun kniBridge1878(p0: ULong, p1: ULong, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1879")
private external fun kniBridge1879(p0: ULong, p1: ULong): Unit
@SymbolName("glibresources_kniBridge1880")
private external fun kniBridge1880(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1881")
private external fun kniBridge1881(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge1882")
private external fun kniBridge1882(p0: ULong, p1: ULong): Int
@SymbolName("glibresources_kniBridge1883")
private external fun kniBridge1883(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1884")
private external fun kniBridge1884(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1885")
private external fun kniBridge1885(p0: ULong, p1: ULong): Unit
@SymbolName("glibresources_kniBridge1886")
private external fun kniBridge1886(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1887")
private external fun kniBridge1887(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1888")
private external fun kniBridge1888(p0: ULong): Unit
@SymbolName("glibresources_kniBridge1889")
private external fun kniBridge1889(): UInt
@SymbolName("glibresources_kniBridge1890")
private external fun kniBridge1890(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1891")
private external fun kniBridge1891(p0: ULong, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1892")
private external fun kniBridge1892(): ULong
@SymbolName("glibresources_kniBridge1893")
private external fun kniBridge1893(p0: ULong): ULong
@SymbolName("glibresources_kniBridge1894")
private external fun kniBridge1894(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1895")
private external fun kniBridge1895(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1896")
private external fun kniBridge1896(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1897")
private external fun kniBridge1897(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1898")
private external fun kniBridge1898(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1899")
private external fun kniBridge1899(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1900")
private external fun kniBridge1900(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1901")
private external fun kniBridge1901(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge1902")
private external fun kniBridge1902(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1903")
private external fun kniBridge1903(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1904")
private external fun kniBridge1904(p0: NativePtr, p1: ULong): Int
@SymbolName("glibresources_kniBridge1905")
private external fun kniBridge1905(p0: NativePtr, p1: ULong): Int
@SymbolName("glibresources_kniBridge1906")
private external fun kniBridge1906(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1907")
private external fun kniBridge1907(p0: NativePtr, p1: ULong): Int
@SymbolName("glibresources_kniBridge1908")
private external fun kniBridge1908(p0: ULong): Int
@SymbolName("glibresources_kniBridge1909")
private external fun kniBridge1909(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1910")
private external fun kniBridge1910(p0: NativePtr, p1: ULong): Int
@SymbolName("glibresources_kniBridge1911")
private external fun kniBridge1911(p0: ULong, p1: UInt): Int
@SymbolName("glibresources_kniBridge1912")
private external fun kniBridge1912(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1913")
private external fun kniBridge1913(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1914")
private external fun kniBridge1914(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1915")
private external fun kniBridge1915(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1916")
private external fun kniBridge1916(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1917")
private external fun kniBridge1917(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1918")
private external fun kniBridge1918(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1919")
private external fun kniBridge1919(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1920")
private external fun kniBridge1920(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge1921")
private external fun kniBridge1921(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1922")
private external fun kniBridge1922(p0: ULong, p1: ULong): Int
@SymbolName("glibresources_kniBridge1923")
private external fun kniBridge1923(p0: ULong, p1: ULong): Int
@SymbolName("glibresources_kniBridge1924")
private external fun kniBridge1924(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1925")
private external fun kniBridge1925(p0: ULong, p1: ULong, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1926")
private external fun kniBridge1926(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1927")
private external fun kniBridge1927(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1928")
private external fun kniBridge1928(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1929")
private external fun kniBridge1929(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1930")
private external fun kniBridge1930(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1931")
private external fun kniBridge1931(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1932")
private external fun kniBridge1932(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge1933")
private external fun kniBridge1933(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1934")
private external fun kniBridge1934(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1935")
private external fun kniBridge1935(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1936")
private external fun kniBridge1936(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1937")
private external fun kniBridge1937(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge1938")
private external fun kniBridge1938(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("glibresources_kniBridge1939")
private external fun kniBridge1939(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge1940")
private external fun kniBridge1940(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1941")
private external fun kniBridge1941(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1942")
private external fun kniBridge1942(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1943")
private external fun kniBridge1943(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1944")
private external fun kniBridge1944(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1945")
private external fun kniBridge1945(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1946")
private external fun kniBridge1946(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1947")
private external fun kniBridge1947(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1948")
private external fun kniBridge1948(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1949")
private external fun kniBridge1949(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge1950")
private external fun kniBridge1950(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge1951")
private external fun kniBridge1951(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("glibresources_kniBridge1952")
private external fun kniBridge1952(p0: ULong, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge1953")
private external fun kniBridge1953(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge1954")
private external fun kniBridge1954(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("glibresources_kniBridge1955")
private external fun kniBridge1955(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1956")
private external fun kniBridge1956(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge1957")
private external fun kniBridge1957(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge1958")
private external fun kniBridge1958(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1959")
private external fun kniBridge1959(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1960")
private external fun kniBridge1960(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1961")
private external fun kniBridge1961(p0: ULong, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge1962")
private external fun kniBridge1962(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1963")
private external fun kniBridge1963(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1964")
private external fun kniBridge1964(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1965")
private external fun kniBridge1965(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge1966")
private external fun kniBridge1966(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1967")
private external fun kniBridge1967(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1968")
private external fun kniBridge1968(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1969")
private external fun kniBridge1969(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1970")
private external fun kniBridge1970(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1971")
private external fun kniBridge1971(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge1972")
private external fun kniBridge1972(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge1973")
private external fun kniBridge1973(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge1974")
private external fun kniBridge1974(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge1975")
private external fun kniBridge1975(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1976")
private external fun kniBridge1976(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1977")
private external fun kniBridge1977(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1978")
private external fun kniBridge1978(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1979")
private external fun kniBridge1979(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1980")
private external fun kniBridge1980(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1981")
private external fun kniBridge1981(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1982")
private external fun kniBridge1982(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1983")
private external fun kniBridge1983(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1984")
private external fun kniBridge1984(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1985")
private external fun kniBridge1985(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1986")
private external fun kniBridge1986(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1987")
private external fun kniBridge1987(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1988")
private external fun kniBridge1988(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1989")
private external fun kniBridge1989(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1990")
private external fun kniBridge1990(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1991")
private external fun kniBridge1991(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1992")
private external fun kniBridge1992(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1993")
private external fun kniBridge1993(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1994")
private external fun kniBridge1994(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1995")
private external fun kniBridge1995(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1996")
private external fun kniBridge1996(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1997")
private external fun kniBridge1997(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge1998")
private external fun kniBridge1998(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge1999")
private external fun kniBridge1999(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2000")
private external fun kniBridge2000(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2001")
private external fun kniBridge2001(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2002")
private external fun kniBridge2002(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2003")
private external fun kniBridge2003(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2004")
private external fun kniBridge2004(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2005")
private external fun kniBridge2005(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2006")
private external fun kniBridge2006(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2007")
private external fun kniBridge2007(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2008")
private external fun kniBridge2008(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2009")
private external fun kniBridge2009(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2010")
private external fun kniBridge2010(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2011")
private external fun kniBridge2011(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2012")
private external fun kniBridge2012(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2013")
private external fun kniBridge2013(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2014")
private external fun kniBridge2014(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2015")
private external fun kniBridge2015(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2016")
private external fun kniBridge2016(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2017")
private external fun kniBridge2017(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2018")
private external fun kniBridge2018(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2019")
private external fun kniBridge2019(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2020")
private external fun kniBridge2020(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2021")
private external fun kniBridge2021(p0: NativePtr, p1: ULong, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: ULong, p8: UInt, p9: NativePtr): UInt
@SymbolName("glibresources_kniBridge2022")
private external fun kniBridge2022(p0: NativePtr, p1: ULong, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: ULong, p8: UInt, p9: NativePtr): UInt
@SymbolName("glibresources_kniBridge2023")
private external fun kniBridge2023(p0: UInt, p1: ULong, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2024")
private external fun kniBridge2024(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2025")
private external fun kniBridge2025(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2026")
private external fun kniBridge2026(p0: NativePtr, p1: ULong): UInt
@SymbolName("glibresources_kniBridge2027")
private external fun kniBridge2027(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge2028")
private external fun kniBridge2028(p0: UInt, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2029")
private external fun kniBridge2029(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2030")
private external fun kniBridge2030(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("glibresources_kniBridge2031")
private external fun kniBridge2031(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2032")
private external fun kniBridge2032(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("glibresources_kniBridge2033")
private external fun kniBridge2033(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2034")
private external fun kniBridge2034(p0: UInt, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): ULong
@SymbolName("glibresources_kniBridge2035")
private external fun kniBridge2035(p0: UInt, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2036")
private external fun kniBridge2036(p0: NativePtr, p1: UInt, p2: UInt, p3: Int): Int
@SymbolName("glibresources_kniBridge2037")
private external fun kniBridge2037(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr, p4: Int): ULong
@SymbolName("glibresources_kniBridge2038")
private external fun kniBridge2038(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): ULong
@SymbolName("glibresources_kniBridge2039")
private external fun kniBridge2039(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt): ULong
@SymbolName("glibresources_kniBridge2040")
private external fun kniBridge2040(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2041")
private external fun kniBridge2041(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2042")
private external fun kniBridge2042(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2043")
private external fun kniBridge2043(p0: NativePtr, p1: ULong): Int
@SymbolName("glibresources_kniBridge2044")
private external fun kniBridge2044(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): ULong
@SymbolName("glibresources_kniBridge2045")
private external fun kniBridge2045(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2046")
private external fun kniBridge2046(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2047")
private external fun kniBridge2047(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2048")
private external fun kniBridge2048(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2049")
private external fun kniBridge2049(p0: UInt, p1: ULong, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2050")
private external fun kniBridge2050(p0: NativePtr, p1: ULong, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2051")
private external fun kniBridge2051(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2052")
private external fun kniBridge2052(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2053")
private external fun kniBridge2053(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2054")
private external fun kniBridge2054(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2055")
private external fun kniBridge2055(p0: ULong): Unit
@SymbolName("glibresources_kniBridge2056")
private external fun kniBridge2056(): ULong
@SymbolName("glibresources_kniBridge2057")
private external fun kniBridge2057(): ULong
@SymbolName("glibresources_kniBridge2058")
private external fun kniBridge2058(): ULong
@SymbolName("glibresources_kniBridge2059")
private external fun kniBridge2059(): ULong
@SymbolName("glibresources_kniBridge2060")
private external fun kniBridge2060(): ULong
@SymbolName("glibresources_kniBridge2061")
private external fun kniBridge2061(): ULong
@SymbolName("glibresources_kniBridge2062")
private external fun kniBridge2062(): ULong
@SymbolName("glibresources_kniBridge2063")
private external fun kniBridge2063(): ULong
@SymbolName("glibresources_kniBridge2064")
private external fun kniBridge2064(): ULong
@SymbolName("glibresources_kniBridge2065")
private external fun kniBridge2065(): ULong
@SymbolName("glibresources_kniBridge2066")
private external fun kniBridge2066(): ULong
@SymbolName("glibresources_kniBridge2067")
private external fun kniBridge2067(): ULong
@SymbolName("glibresources_kniBridge2068")
private external fun kniBridge2068(): ULong
@SymbolName("glibresources_kniBridge2069")
private external fun kniBridge2069(): ULong
@SymbolName("glibresources_kniBridge2070")
private external fun kniBridge2070(): ULong
@SymbolName("glibresources_kniBridge2071")
private external fun kniBridge2071(): ULong
@SymbolName("glibresources_kniBridge2072")
private external fun kniBridge2072(): ULong
@SymbolName("glibresources_kniBridge2073")
private external fun kniBridge2073(): ULong
@SymbolName("glibresources_kniBridge2074")
private external fun kniBridge2074(): ULong
@SymbolName("glibresources_kniBridge2075")
private external fun kniBridge2075(): ULong
@SymbolName("glibresources_kniBridge2076")
private external fun kniBridge2076(): ULong
@SymbolName("glibresources_kniBridge2077")
private external fun kniBridge2077(): ULong
@SymbolName("glibresources_kniBridge2078")
private external fun kniBridge2078(): ULong
@SymbolName("glibresources_kniBridge2079")
private external fun kniBridge2079(): ULong
@SymbolName("glibresources_kniBridge2080")
private external fun kniBridge2080(): ULong
@SymbolName("glibresources_kniBridge2081")
private external fun kniBridge2081(): ULong
@SymbolName("glibresources_kniBridge2082")
private external fun kniBridge2082(): ULong
@SymbolName("glibresources_kniBridge2083")
private external fun kniBridge2083(): ULong
@SymbolName("glibresources_kniBridge2084")
private external fun kniBridge2084(): ULong
@SymbolName("glibresources_kniBridge2085")
private external fun kniBridge2085(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2086")
private external fun kniBridge2086(p0: ULong, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2087")
private external fun kniBridge2087(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2088")
private external fun kniBridge2088(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2089")
private external fun kniBridge2089(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2090")
private external fun kniBridge2090(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2091")
private external fun kniBridge2091(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2092")
private external fun kniBridge2092(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2093")
private external fun kniBridge2093(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("glibresources_kniBridge2094")
private external fun kniBridge2094(): ULong
@SymbolName("glibresources_kniBridge2095")
private external fun kniBridge2095(): ULong
@SymbolName("glibresources_kniBridge2096")
private external fun kniBridge2096(): ULong
@SymbolName("glibresources_kniBridge2097")
private external fun kniBridge2097(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2098")
private external fun kniBridge2098(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2099")
private external fun kniBridge2099(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2100")
private external fun kniBridge2100(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2101")
private external fun kniBridge2101(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2102")
private external fun kniBridge2102(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2103")
private external fun kniBridge2103(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2104")
private external fun kniBridge2104(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2105")
private external fun kniBridge2105(): ULong
@SymbolName("glibresources_kniBridge2106")
private external fun kniBridge2106(p0: ULong, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2107")
private external fun kniBridge2107(p0: ULong, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2108")
private external fun kniBridge2108(p0: ULong, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2109")
private external fun kniBridge2109(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2110")
private external fun kniBridge2110(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2111")
private external fun kniBridge2111(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2112")
private external fun kniBridge2112(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2113")
private external fun kniBridge2113(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2114")
private external fun kniBridge2114(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2115")
private external fun kniBridge2115(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2116")
private external fun kniBridge2116(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2117")
private external fun kniBridge2117(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2118")
private external fun kniBridge2118(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2119")
private external fun kniBridge2119(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2120")
private external fun kniBridge2120(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2121")
private external fun kniBridge2121(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2122")
private external fun kniBridge2122(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2123")
private external fun kniBridge2123(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2124")
private external fun kniBridge2124(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2125")
private external fun kniBridge2125(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2126")
private external fun kniBridge2126(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2127")
private external fun kniBridge2127(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2128")
private external fun kniBridge2128(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2129")
private external fun kniBridge2129(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2130")
private external fun kniBridge2130(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2131")
private external fun kniBridge2131(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2132")
private external fun kniBridge2132(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2133")
private external fun kniBridge2133(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2134")
private external fun kniBridge2134(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2135")
private external fun kniBridge2135(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2136")
private external fun kniBridge2136(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2137")
private external fun kniBridge2137(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2138")
private external fun kniBridge2138(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2139")
private external fun kniBridge2139(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2140")
private external fun kniBridge2140(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2141")
private external fun kniBridge2141(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2142")
private external fun kniBridge2142(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2143")
private external fun kniBridge2143(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2144")
private external fun kniBridge2144(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2145")
private external fun kniBridge2145(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2146")
private external fun kniBridge2146(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2147")
private external fun kniBridge2147(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2148")
private external fun kniBridge2148(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): ULong
@SymbolName("glibresources_kniBridge2149")
private external fun kniBridge2149(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2150")
private external fun kniBridge2150(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2151")
private external fun kniBridge2151(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2152")
private external fun kniBridge2152(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2153")
private external fun kniBridge2153(p0: ULong, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge2154")
private external fun kniBridge2154(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2155")
private external fun kniBridge2155(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2156")
private external fun kniBridge2156(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2157")
private external fun kniBridge2157(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2159")
private external fun kniBridge2159(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2160")
private external fun kniBridge2160(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2161")
private external fun kniBridge2161(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2162")
private external fun kniBridge2162(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2163")
private external fun kniBridge2163(): ULong
@SymbolName("glibresources_kniBridge2164")
private external fun kniBridge2164(): ULong
@SymbolName("glibresources_kniBridge2165")
private external fun kniBridge2165(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2166")
private external fun kniBridge2166(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2167")
private external fun kniBridge2167(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2168")
private external fun kniBridge2168(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2169")
private external fun kniBridge2169(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2170")
private external fun kniBridge2170(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2171")
private external fun kniBridge2171(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): NativePtr
@SymbolName("glibresources_kniBridge2172")
private external fun kniBridge2172(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2173")
private external fun kniBridge2173(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2174")
private external fun kniBridge2174(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge2175")
private external fun kniBridge2175(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2176")
private external fun kniBridge2176(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2177")
private external fun kniBridge2177(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2178")
private external fun kniBridge2178(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2179")
private external fun kniBridge2179(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2180")
private external fun kniBridge2180(p0: ULong, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge2181")
private external fun kniBridge2181(p0: ULong, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2182")
private external fun kniBridge2182(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2183")
private external fun kniBridge2183(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2184")
private external fun kniBridge2184(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2185")
private external fun kniBridge2185(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2186")
private external fun kniBridge2186(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge2187")
private external fun kniBridge2187(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge2188")
private external fun kniBridge2188(p0: ULong, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2189")
private external fun kniBridge2189(p0: ULong, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2190")
private external fun kniBridge2190(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Byte, p4: Byte, p5: Byte, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2191")
private external fun kniBridge2191(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UByte, p4: UByte, p5: UByte, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2192")
private external fun kniBridge2192(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2193")
private external fun kniBridge2193(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int, p5: Int, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2194")
private external fun kniBridge2194(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: UInt, p5: UInt, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2195")
private external fun kniBridge2195(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Long, p4: Long, p5: Long, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2196")
private external fun kniBridge2196(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: ULong, p5: ULong, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2197")
private external fun kniBridge2197(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Long, p4: Long, p5: Long, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2198")
private external fun kniBridge2198(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: ULong, p5: ULong, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2199")
private external fun kniBridge2199(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2200")
private external fun kniBridge2200(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int, p5: Int): NativePtr
@SymbolName("glibresources_kniBridge2201")
private external fun kniBridge2201(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: UInt, p5: Int): NativePtr
@SymbolName("glibresources_kniBridge2202")
private external fun kniBridge2202(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Float, p4: Float, p5: Float, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2203")
private external fun kniBridge2203(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Double, p4: Double, p5: Double, p6: Int): NativePtr
@SymbolName("glibresources_kniBridge2204")
private external fun kniBridge2204(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2205")
private external fun kniBridge2205(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2206")
private external fun kniBridge2206(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2207")
private external fun kniBridge2207(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge2208")
private external fun kniBridge2208(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2209")
private external fun kniBridge2209(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2210")
private external fun kniBridge2210(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2211")
private external fun kniBridge2211(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("glibresources_kniBridge2212")
private external fun kniBridge2212(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): NativePtr
@SymbolName("glibresources_kniBridge2213")
private external fun kniBridge2213(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2214")
private external fun kniBridge2214(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2215")
private external fun kniBridge2215(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2216")
private external fun kniBridge2216(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2217")
private external fun kniBridge2217(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2218")
private external fun kniBridge2218(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2219")
private external fun kniBridge2219(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2220")
private external fun kniBridge2220(): ULong
@SymbolName("glibresources_kniBridge2221")
private external fun kniBridge2221(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2222")
private external fun kniBridge2222(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2223")
private external fun kniBridge2223(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2224")
private external fun kniBridge2224(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: UInt): ULong
@SymbolName("glibresources_kniBridge2225")
private external fun kniBridge2225(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2226")
private external fun kniBridge2226(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("glibresources_kniBridge2227")
private external fun kniBridge2227(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("glibresources_kniBridge2228")
private external fun kniBridge2228(): ULong
@SymbolName("glibresources_kniBridge2229")
private external fun kniBridge2229(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2230")
private external fun kniBridge2230(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2231")
private external fun kniBridge2231(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2232")
private external fun kniBridge2232(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2233")
private external fun kniBridge2233(): ULong
@SymbolName("glibresources_kniBridge2234")
private external fun kniBridge2234(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2235")
private external fun kniBridge2235(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge2236")
private external fun kniBridge2236(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2237")
private external fun kniBridge2237(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2238")
private external fun kniBridge2238(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2239")
private external fun kniBridge2239(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2240")
private external fun kniBridge2240(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2241")
private external fun kniBridge2241(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2242")
private external fun kniBridge2242(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2243")
private external fun kniBridge2243(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2244")
private external fun kniBridge2244(p0: NativePtr, p1: Byte): Unit
@SymbolName("glibresources_kniBridge2245")
private external fun kniBridge2245(p0: NativePtr): Byte
@SymbolName("glibresources_kniBridge2246")
private external fun kniBridge2246(p0: NativePtr, p1: Byte): Unit
@SymbolName("glibresources_kniBridge2247")
private external fun kniBridge2247(p0: NativePtr): Byte
@SymbolName("glibresources_kniBridge2248")
private external fun kniBridge2248(p0: NativePtr, p1: UByte): Unit
@SymbolName("glibresources_kniBridge2249")
private external fun kniBridge2249(p0: NativePtr): UByte
@SymbolName("glibresources_kniBridge2250")
private external fun kniBridge2250(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2251")
private external fun kniBridge2251(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2252")
private external fun kniBridge2252(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2253")
private external fun kniBridge2253(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2254")
private external fun kniBridge2254(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2255")
private external fun kniBridge2255(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2256")
private external fun kniBridge2256(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge2257")
private external fun kniBridge2257(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge2258")
private external fun kniBridge2258(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2259")
private external fun kniBridge2259(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2260")
private external fun kniBridge2260(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge2261")
private external fun kniBridge2261(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge2262")
private external fun kniBridge2262(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2263")
private external fun kniBridge2263(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2264")
private external fun kniBridge2264(p0: NativePtr, p1: Float): Unit
@SymbolName("glibresources_kniBridge2265")
private external fun kniBridge2265(p0: NativePtr): Float
@SymbolName("glibresources_kniBridge2266")
private external fun kniBridge2266(p0: NativePtr, p1: Double): Unit
@SymbolName("glibresources_kniBridge2267")
private external fun kniBridge2267(p0: NativePtr): Double
@SymbolName("glibresources_kniBridge2268")
private external fun kniBridge2268(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2269")
private external fun kniBridge2269(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2270")
private external fun kniBridge2270(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2271")
private external fun kniBridge2271(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2272")
private external fun kniBridge2272(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2273")
private external fun kniBridge2273(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2274")
private external fun kniBridge2274(): ULong
@SymbolName("glibresources_kniBridge2275")
private external fun kniBridge2275(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2276")
private external fun kniBridge2276(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2277")
private external fun kniBridge2277(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2278")
private external fun kniBridge2278(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2279")
private external fun kniBridge2279(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2280")
private external fun kniBridge2280(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2281")
private external fun kniBridge2281(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2282")
private external fun kniBridge2282(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2283")
private external fun kniBridge2283(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2284")
private external fun kniBridge2284(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2285")
private external fun kniBridge2285(): ULong
@SymbolName("glibresources_kniBridge2286")
private external fun kniBridge2286(): ULong
@SymbolName("glibresources_kniBridge2287")
private external fun kniBridge2287(): ULong
@SymbolName("glibresources_kniBridge2288")
private external fun kniBridge2288(): ULong
@SymbolName("glibresources_kniBridge2289")
private external fun kniBridge2289(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2290")
private external fun kniBridge2290(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2291")
private external fun kniBridge2291(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2292")
private external fun kniBridge2292(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2293")
private external fun kniBridge2293(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2294")
private external fun kniBridge2294(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2295")
private external fun kniBridge2295(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2296")
private external fun kniBridge2296(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2297")
private external fun kniBridge2297(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2298")
private external fun kniBridge2298(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2299")
private external fun kniBridge2299(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2300")
private external fun kniBridge2300(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2301")
private external fun kniBridge2301(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2302")
private external fun kniBridge2302(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2303")
private external fun kniBridge2303(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2304")
private external fun kniBridge2304(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2305")
private external fun kniBridge2305(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2306")
private external fun kniBridge2306(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2307")
private external fun kniBridge2307(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2308")
private external fun kniBridge2308(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2309")
private external fun kniBridge2309(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2310")
private external fun kniBridge2310(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2311")
private external fun kniBridge2311(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2312")
private external fun kniBridge2312(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2313")
private external fun kniBridge2313(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2314")
private external fun kniBridge2314(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2315")
private external fun kniBridge2315(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2316")
private external fun kniBridge2316(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2317")
private external fun kniBridge2317(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2318")
private external fun kniBridge2318(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2319")
private external fun kniBridge2319(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2320")
private external fun kniBridge2320(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2321")
private external fun kniBridge2321(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2322")
private external fun kniBridge2322(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2323")
private external fun kniBridge2323(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2324")
private external fun kniBridge2324(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2325")
private external fun kniBridge2325(): ULong
@SymbolName("glibresources_kniBridge2326")
private external fun kniBridge2326(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2327")
private external fun kniBridge2327(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2328")
private external fun kniBridge2328(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2329")
private external fun kniBridge2329(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2330")
private external fun kniBridge2330(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2331")
private external fun kniBridge2331(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2332")
private external fun kniBridge2332(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2333")
private external fun kniBridge2333(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2334")
private external fun kniBridge2334(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2335")
private external fun kniBridge2335(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2336")
private external fun kniBridge2336(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2337")
private external fun kniBridge2337(): ULong
@SymbolName("glibresources_kniBridge2338")
private external fun kniBridge2338(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2339")
private external fun kniBridge2339(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2340")
private external fun kniBridge2340(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2341")
private external fun kniBridge2341(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2342")
private external fun kniBridge2342(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2343")
private external fun kniBridge2343(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2344")
private external fun kniBridge2344(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2345")
private external fun kniBridge2345(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2346")
private external fun kniBridge2346(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2347")
private external fun kniBridge2347(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2348")
private external fun kniBridge2348(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2349")
private external fun kniBridge2349(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge2350")
private external fun kniBridge2350(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2351")
private external fun kniBridge2351(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge2352")
private external fun kniBridge2352(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge2353")
private external fun kniBridge2353(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2354")
private external fun kniBridge2354(): ULong
@SymbolName("glibresources_kniBridge2355")
private external fun kniBridge2355(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2356")
private external fun kniBridge2356(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2357")
private external fun kniBridge2357(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2358")
private external fun kniBridge2358(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2359")
private external fun kniBridge2359(): ULong
@SymbolName("glibresources_kniBridge2360")
private external fun kniBridge2360(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2361")
private external fun kniBridge2361(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2362")
private external fun kniBridge2362(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2363")
private external fun kniBridge2363(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2364")
private external fun kniBridge2364(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2365")
private external fun kniBridge2365(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2366")
private external fun kniBridge2366(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2367")
private external fun kniBridge2367(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2368")
private external fun kniBridge2368(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2369")
private external fun kniBridge2369(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2370")
private external fun kniBridge2370(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2371")
private external fun kniBridge2371(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2372")
private external fun kniBridge2372(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2373")
private external fun kniBridge2373(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2374")
private external fun kniBridge2374(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2375")
private external fun kniBridge2375(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2376")
private external fun kniBridge2376(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2377")
private external fun kniBridge2377(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2378")
private external fun kniBridge2378(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2379")
private external fun kniBridge2379(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2380")
private external fun kniBridge2380(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2381")
private external fun kniBridge2381(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2382")
private external fun kniBridge2382(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2383")
private external fun kniBridge2383(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2384")
private external fun kniBridge2384(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2385")
private external fun kniBridge2385(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2386")
private external fun kniBridge2386(): NativePtr
@SymbolName("glibresources_kniBridge2387")
private external fun kniBridge2387(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2388")
private external fun kniBridge2388(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2389")
private external fun kniBridge2389(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2390")
private external fun kniBridge2390(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2391")
private external fun kniBridge2391(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge2392")
private external fun kniBridge2392(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2393")
private external fun kniBridge2393(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2394")
private external fun kniBridge2394(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2395")
private external fun kniBridge2395(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2396")
private external fun kniBridge2396(): ULong
@SymbolName("glibresources_kniBridge2397")
private external fun kniBridge2397(): NativePtr
@SymbolName("glibresources_kniBridge2398")
private external fun kniBridge2398(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2399")
private external fun kniBridge2399(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2400")
private external fun kniBridge2400(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2401")
private external fun kniBridge2401(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2402")
private external fun kniBridge2402(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2403")
private external fun kniBridge2403(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2404")
private external fun kniBridge2404(): ULong
@SymbolName("glibresources_kniBridge2405")
private external fun kniBridge2405(): NativePtr
@SymbolName("glibresources_kniBridge2406")
private external fun kniBridge2406(): ULong
@SymbolName("glibresources_kniBridge2407")
private external fun kniBridge2407(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2408")
private external fun kniBridge2408(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2409")
private external fun kniBridge2409(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2410")
private external fun kniBridge2410(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2411")
private external fun kniBridge2411(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2412")
private external fun kniBridge2412(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2413")
private external fun kniBridge2413(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2414")
private external fun kniBridge2414(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2415")
private external fun kniBridge2415(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2416")
private external fun kniBridge2416(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2417")
private external fun kniBridge2417(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2418")
private external fun kniBridge2418(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2419")
private external fun kniBridge2419(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2420")
private external fun kniBridge2420(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2421")
private external fun kniBridge2421(p0: NativePtr, p1: NativePtr, p2: Byte, p3: UInt, p4: UInt, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2422")
private external fun kniBridge2422(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2423")
private external fun kniBridge2423(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2424")
private external fun kniBridge2424(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2425")
private external fun kniBridge2425(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2426")
private external fun kniBridge2426(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2427")
private external fun kniBridge2427(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2428")
private external fun kniBridge2428(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2429")
private external fun kniBridge2429(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2430")
private external fun kniBridge2430(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2431")
private external fun kniBridge2431(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2432")
private external fun kniBridge2432(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2433")
private external fun kniBridge2433(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2434")
private external fun kniBridge2434(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2435")
private external fun kniBridge2435(): NativePtr
@SymbolName("glibresources_kniBridge2436")
private external fun kniBridge2436(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2437")
private external fun kniBridge2437(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2438")
private external fun kniBridge2438(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2439")
private external fun kniBridge2439(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2440")
private external fun kniBridge2440(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2441")
private external fun kniBridge2441(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2442")
private external fun kniBridge2442(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2443")
private external fun kniBridge2443(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2444")
private external fun kniBridge2444(): ULong
@SymbolName("glibresources_kniBridge2445")
private external fun kniBridge2445(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2446")
private external fun kniBridge2446(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2447")
private external fun kniBridge2447(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2448")
private external fun kniBridge2448(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2449")
private external fun kniBridge2449(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2450")
private external fun kniBridge2450(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2451")
private external fun kniBridge2451(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2452")
private external fun kniBridge2452(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2453")
private external fun kniBridge2453(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2454")
private external fun kniBridge2454(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2455")
private external fun kniBridge2455(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2456")
private external fun kniBridge2456(): ULong
@SymbolName("glibresources_kniBridge2457")
private external fun kniBridge2457(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2458")
private external fun kniBridge2458(p0: ULong, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2459")
private external fun kniBridge2459(p0: ULong, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2460")
private external fun kniBridge2460(): ULong
@SymbolName("glibresources_kniBridge2461")
private external fun kniBridge2461(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2462")
private external fun kniBridge2462(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2463")
private external fun kniBridge2463(p0: ULong, p1: UInt, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2464")
private external fun kniBridge2464(p0: ULong, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2465")
private external fun kniBridge2465(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2466")
private external fun kniBridge2466(): ULong
@SymbolName("glibresources_kniBridge2467")
private external fun kniBridge2467(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2468")
private external fun kniBridge2468(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2469")
private external fun kniBridge2469(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2470")
private external fun kniBridge2470(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2471")
private external fun kniBridge2471(): ULong
@SymbolName("glibresources_kniBridge2472")
private external fun kniBridge2472(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge2473")
private external fun kniBridge2473(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2474")
private external fun kniBridge2474(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2475")
private external fun kniBridge2475(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Long
@SymbolName("glibresources_kniBridge2476")
private external fun kniBridge2476(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2477")
private external fun kniBridge2477(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2478")
private external fun kniBridge2478(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2479")
private external fun kniBridge2479(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2480")
private external fun kniBridge2480(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2481")
private external fun kniBridge2481(p0: NativePtr, p1: ULong, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2482")
private external fun kniBridge2482(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2483")
private external fun kniBridge2483(p0: NativePtr, p1: ULong, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2484")
private external fun kniBridge2484(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2485")
private external fun kniBridge2485(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2486")
private external fun kniBridge2486(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2487")
private external fun kniBridge2487(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2488")
private external fun kniBridge2488(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2489")
private external fun kniBridge2489(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2490")
private external fun kniBridge2490(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2491")
private external fun kniBridge2491(): ULong
@SymbolName("glibresources_kniBridge2492")
private external fun kniBridge2492(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2493")
private external fun kniBridge2493(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2494")
private external fun kniBridge2494(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2495")
private external fun kniBridge2495(): ULong
@SymbolName("glibresources_kniBridge2496")
private external fun kniBridge2496(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2497")
private external fun kniBridge2497(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge2498")
private external fun kniBridge2498(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2499")
private external fun kniBridge2499(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2500")
private external fun kniBridge2500(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2501")
private external fun kniBridge2501(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong): ULong
@SymbolName("glibresources_kniBridge2502")
private external fun kniBridge2502(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2503")
private external fun kniBridge2503(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr): Long
@SymbolName("glibresources_kniBridge2504")
private external fun kniBridge2504(p0: NativePtr, p1: Long, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2505")
private external fun kniBridge2505(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2506")
private external fun kniBridge2506(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2507")
private external fun kniBridge2507(): ULong
@SymbolName("glibresources_kniBridge2508")
private external fun kniBridge2508(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge2509")
private external fun kniBridge2509(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2510")
private external fun kniBridge2510(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2511")
private external fun kniBridge2511(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2512")
private external fun kniBridge2512(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge2513")
private external fun kniBridge2513(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Long
@SymbolName("glibresources_kniBridge2514")
private external fun kniBridge2514(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge2515")
private external fun kniBridge2515(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2516")
private external fun kniBridge2516(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2517")
private external fun kniBridge2517(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2518")
private external fun kniBridge2518(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2519")
private external fun kniBridge2519(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2520")
private external fun kniBridge2520(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2521")
private external fun kniBridge2521(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2522")
private external fun kniBridge2522(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2523")
private external fun kniBridge2523(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2524")
private external fun kniBridge2524(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2525")
private external fun kniBridge2525(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2526")
private external fun kniBridge2526(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2527")
private external fun kniBridge2527(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2528")
private external fun kniBridge2528(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2529")
private external fun kniBridge2529(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2530")
private external fun kniBridge2530(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2531")
private external fun kniBridge2531(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2532")
private external fun kniBridge2532(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2533")
private external fun kniBridge2533(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2534")
private external fun kniBridge2534(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2535")
private external fun kniBridge2535(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2536")
private external fun kniBridge2536(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2537")
private external fun kniBridge2537(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2538")
private external fun kniBridge2538(): ULong
@SymbolName("glibresources_kniBridge2539")
private external fun kniBridge2539(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2540")
private external fun kniBridge2540(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2541")
private external fun kniBridge2541(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2542")
private external fun kniBridge2542(): ULong
@SymbolName("glibresources_kniBridge2543")
private external fun kniBridge2543(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2544")
private external fun kniBridge2544(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge2545")
private external fun kniBridge2545(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge2546")
private external fun kniBridge2546(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2547")
private external fun kniBridge2547(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2548")
private external fun kniBridge2548(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2549")
private external fun kniBridge2549(): ULong
@SymbolName("glibresources_kniBridge2550")
private external fun kniBridge2550(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2551")
private external fun kniBridge2551(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2552")
private external fun kniBridge2552(): ULong
@SymbolName("glibresources_kniBridge2553")
private external fun kniBridge2553(): NativePtr
@SymbolName("glibresources_kniBridge2554")
private external fun kniBridge2554(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2555")
private external fun kniBridge2555(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2556")
private external fun kniBridge2556(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2557")
private external fun kniBridge2557(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2558")
private external fun kniBridge2558(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2559")
private external fun kniBridge2559(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2560")
private external fun kniBridge2560(): NativePtr
@SymbolName("glibresources_kniBridge2561")
private external fun kniBridge2561(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2562")
private external fun kniBridge2562(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2563")
private external fun kniBridge2563(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2564")
private external fun kniBridge2564(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("glibresources_kniBridge2565")
private external fun kniBridge2565(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge2566")
private external fun kniBridge2566(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2567")
private external fun kniBridge2567(): ULong
@SymbolName("glibresources_kniBridge2568")
private external fun kniBridge2568(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): UInt
@SymbolName("glibresources_kniBridge2569")
private external fun kniBridge2569(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2570")
private external fun kniBridge2570(): ULong
@SymbolName("glibresources_kniBridge2571")
private external fun kniBridge2571(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2572")
private external fun kniBridge2572(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2573")
private external fun kniBridge2573(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2574")
private external fun kniBridge2574(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2575")
private external fun kniBridge2575(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2576")
private external fun kniBridge2576(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2577")
private external fun kniBridge2577(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2578")
private external fun kniBridge2578(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2579")
private external fun kniBridge2579(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2580")
private external fun kniBridge2580(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2581")
private external fun kniBridge2581(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2582")
private external fun kniBridge2582(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2583")
private external fun kniBridge2583(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2584")
private external fun kniBridge2584(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2585")
private external fun kniBridge2585(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2586")
private external fun kniBridge2586(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2587")
private external fun kniBridge2587(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2588")
private external fun kniBridge2588(): NativePtr
@SymbolName("glibresources_kniBridge2589")
private external fun kniBridge2589(): NativePtr
@SymbolName("glibresources_kniBridge2590")
private external fun kniBridge2590(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2591")
private external fun kniBridge2591(): ULong
@SymbolName("glibresources_kniBridge2592")
private external fun kniBridge2592(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2593")
private external fun kniBridge2593(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2594")
private external fun kniBridge2594(): ULong
@SymbolName("glibresources_kniBridge2595")
private external fun kniBridge2595(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2596")
private external fun kniBridge2596(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2597")
private external fun kniBridge2597(): ULong
@SymbolName("glibresources_kniBridge2598")
private external fun kniBridge2598(): NativePtr
@SymbolName("glibresources_kniBridge2599")
private external fun kniBridge2599(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2600")
private external fun kniBridge2600(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2601")
private external fun kniBridge2601(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2602")
private external fun kniBridge2602(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2603")
private external fun kniBridge2603(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2604")
private external fun kniBridge2604(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge2605")
private external fun kniBridge2605(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2606")
private external fun kniBridge2606(): ULong
@SymbolName("glibresources_kniBridge2607")
private external fun kniBridge2607(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Long, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge2608")
private external fun kniBridge2608(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Long, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge2609")
private external fun kniBridge2609(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2610")
private external fun kniBridge2610(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge2611")
private external fun kniBridge2611(p0: NativePtr, p1: UInt, p2: Long, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge2612")
private external fun kniBridge2612(): ULong
@SymbolName("glibresources_kniBridge2613")
private external fun kniBridge2613(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2614")
private external fun kniBridge2614(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2615")
private external fun kniBridge2615(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2616")
private external fun kniBridge2616(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2617")
private external fun kniBridge2617(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2618")
private external fun kniBridge2618(p0: NativePtr, p1: NativePtr, p2: NativePtr): UByte
@SymbolName("glibresources_kniBridge2619")
private external fun kniBridge2619(p0: NativePtr, p1: NativePtr, p2: NativePtr): Short
@SymbolName("glibresources_kniBridge2620")
private external fun kniBridge2620(p0: NativePtr, p1: NativePtr, p2: NativePtr): UShort
@SymbolName("glibresources_kniBridge2621")
private external fun kniBridge2621(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2622")
private external fun kniBridge2622(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge2623")
private external fun kniBridge2623(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2624")
private external fun kniBridge2624(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("glibresources_kniBridge2625")
private external fun kniBridge2625(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2626")
private external fun kniBridge2626(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2627")
private external fun kniBridge2627(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2628")
private external fun kniBridge2628(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2629")
private external fun kniBridge2629(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2630")
private external fun kniBridge2630(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2631")
private external fun kniBridge2631(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2632")
private external fun kniBridge2632(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2633")
private external fun kniBridge2633(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2634")
private external fun kniBridge2634(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2635")
private external fun kniBridge2635(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2636")
private external fun kniBridge2636(): ULong
@SymbolName("glibresources_kniBridge2637")
private external fun kniBridge2637(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2638")
private external fun kniBridge2638(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2639")
private external fun kniBridge2639(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2640")
private external fun kniBridge2640(p0: NativePtr, p1: UByte, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2641")
private external fun kniBridge2641(p0: NativePtr, p1: Short, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2642")
private external fun kniBridge2642(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2643")
private external fun kniBridge2643(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2644")
private external fun kniBridge2644(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2645")
private external fun kniBridge2645(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2646")
private external fun kniBridge2646(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2647")
private external fun kniBridge2647(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge2648")
private external fun kniBridge2648(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2649")
private external fun kniBridge2649(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2650")
private external fun kniBridge2650(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2651")
private external fun kniBridge2651(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2652")
private external fun kniBridge2652(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2653")
private external fun kniBridge2653(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2654")
private external fun kniBridge2654(p0: Int, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2655")
private external fun kniBridge2655(): ULong
@SymbolName("glibresources_kniBridge2656")
private external fun kniBridge2656(): NativePtr
@SymbolName("glibresources_kniBridge2657")
private external fun kniBridge2657(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2658")
private external fun kniBridge2658(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2659")
private external fun kniBridge2659(): ULong
@SymbolName("glibresources_kniBridge2660")
private external fun kniBridge2660(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2661")
private external fun kniBridge2661(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2662")
private external fun kniBridge2662(p0: Int, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2663")
private external fun kniBridge2663(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2664")
private external fun kniBridge2664(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2665")
private external fun kniBridge2665(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2666")
private external fun kniBridge2666(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2667")
private external fun kniBridge2667(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2668")
private external fun kniBridge2668(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2669")
private external fun kniBridge2669(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2670")
private external fun kniBridge2670(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2671")
private external fun kniBridge2671(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2672")
private external fun kniBridge2672(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2673")
private external fun kniBridge2673(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2674")
private external fun kniBridge2674(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2675")
private external fun kniBridge2675(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2676")
private external fun kniBridge2676(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2677")
private external fun kniBridge2677(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2678")
private external fun kniBridge2678(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2679")
private external fun kniBridge2679(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2680")
private external fun kniBridge2680(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2681")
private external fun kniBridge2681(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2682")
private external fun kniBridge2682(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2683")
private external fun kniBridge2683(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2684")
private external fun kniBridge2684(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2685")
private external fun kniBridge2685(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2686")
private external fun kniBridge2686(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge2687")
private external fun kniBridge2687(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge2688")
private external fun kniBridge2688(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2689")
private external fun kniBridge2689(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2690")
private external fun kniBridge2690(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge2691")
private external fun kniBridge2691(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr, p11: NativePtr): Unit
@SymbolName("glibresources_kniBridge2692")
private external fun kniBridge2692(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2693")
private external fun kniBridge2693(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2694")
private external fun kniBridge2694(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr, p11: NativePtr, p12: NativePtr): Unit
@SymbolName("glibresources_kniBridge2695")
private external fun kniBridge2695(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2696")
private external fun kniBridge2696(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr, p11: NativePtr, p12: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2697")
private external fun kniBridge2697(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2698")
private external fun kniBridge2698(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2699")
private external fun kniBridge2699(p0: NativePtr, p1: UInt): Int
@SymbolName("glibresources_kniBridge2700")
private external fun kniBridge2700(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2701")
private external fun kniBridge2701(p0: NativePtr, p1: UInt): Int
@SymbolName("glibresources_kniBridge2702")
private external fun kniBridge2702(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UInt, p7: NativePtr, p8: NativePtr, p9: NativePtr): UInt
@SymbolName("glibresources_kniBridge2703")
private external fun kniBridge2703(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2704")
private external fun kniBridge2704(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge2705")
private external fun kniBridge2705(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2706")
private external fun kniBridge2706(): UInt
@SymbolName("glibresources_kniBridge2707")
private external fun kniBridge2707(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2708")
private external fun kniBridge2708(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2709")
private external fun kniBridge2709(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2710")
private external fun kniBridge2710(p0: UInt, p1: Int, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2711")
private external fun kniBridge2711(p0: UInt, p1: Int, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2712")
private external fun kniBridge2712(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("glibresources_kniBridge2713")
private external fun kniBridge2713(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2714")
private external fun kniBridge2714(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2715")
private external fun kniBridge2715(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2716")
private external fun kniBridge2716(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2717")
private external fun kniBridge2717(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2718")
private external fun kniBridge2718(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2719")
private external fun kniBridge2719(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2720")
private external fun kniBridge2720(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2721")
private external fun kniBridge2721(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2722")
private external fun kniBridge2722(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2723")
private external fun kniBridge2723(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2724")
private external fun kniBridge2724(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2725")
private external fun kniBridge2725(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2726")
private external fun kniBridge2726(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2727")
private external fun kniBridge2727(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2728")
private external fun kniBridge2728(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2729")
private external fun kniBridge2729(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2730")
private external fun kniBridge2730(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2731")
private external fun kniBridge2731(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2732")
private external fun kniBridge2732(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2733")
private external fun kniBridge2733(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2734")
private external fun kniBridge2734(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2735")
private external fun kniBridge2735(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2736")
private external fun kniBridge2736(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2737")
private external fun kniBridge2737(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2738")
private external fun kniBridge2738(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2739")
private external fun kniBridge2739(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2740")
private external fun kniBridge2740(): ULong
@SymbolName("glibresources_kniBridge2741")
private external fun kniBridge2741(): ULong
@SymbolName("glibresources_kniBridge2742")
private external fun kniBridge2742(): ULong
@SymbolName("glibresources_kniBridge2743")
private external fun kniBridge2743(): ULong
@SymbolName("glibresources_kniBridge2744")
private external fun kniBridge2744(): ULong
@SymbolName("glibresources_kniBridge2745")
private external fun kniBridge2745(): ULong
@SymbolName("glibresources_kniBridge2746")
private external fun kniBridge2746(): ULong
@SymbolName("glibresources_kniBridge2747")
private external fun kniBridge2747(): ULong
@SymbolName("glibresources_kniBridge2748")
private external fun kniBridge2748(): NativePtr
@SymbolName("glibresources_kniBridge2749")
private external fun kniBridge2749(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2750")
private external fun kniBridge2750(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2751")
private external fun kniBridge2751(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2752")
private external fun kniBridge2752(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2753")
private external fun kniBridge2753(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2754")
private external fun kniBridge2754(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2755")
private external fun kniBridge2755(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2756")
private external fun kniBridge2756(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2757")
private external fun kniBridge2757(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2758")
private external fun kniBridge2758(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2759")
private external fun kniBridge2759(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2760")
private external fun kniBridge2760(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2761")
private external fun kniBridge2761(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2762")
private external fun kniBridge2762(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2763")
private external fun kniBridge2763(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2764")
private external fun kniBridge2764(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2765")
private external fun kniBridge2765(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2766")
private external fun kniBridge2766(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2767")
private external fun kniBridge2767(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2768")
private external fun kniBridge2768(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2769")
private external fun kniBridge2769(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2770")
private external fun kniBridge2770(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2771")
private external fun kniBridge2771(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2772")
private external fun kniBridge2772(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2773")
private external fun kniBridge2773(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2774")
private external fun kniBridge2774(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2775")
private external fun kniBridge2775(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2776")
private external fun kniBridge2776(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2777")
private external fun kniBridge2777(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2778")
private external fun kniBridge2778(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2779")
private external fun kniBridge2779(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2780")
private external fun kniBridge2780(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2781")
private external fun kniBridge2781(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2782")
private external fun kniBridge2782(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2783")
private external fun kniBridge2783(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2784")
private external fun kniBridge2784(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2785")
private external fun kniBridge2785(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2786")
private external fun kniBridge2786(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2787")
private external fun kniBridge2787(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2788")
private external fun kniBridge2788(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2789")
private external fun kniBridge2789(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2790")
private external fun kniBridge2790(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2791")
private external fun kniBridge2791(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2792")
private external fun kniBridge2792(p0: NativePtr, p1: ULong, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2793")
private external fun kniBridge2793(p0: NativePtr, p1: ULong, p2: NativePtr): Long
@SymbolName("glibresources_kniBridge2794")
private external fun kniBridge2794(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2795")
private external fun kniBridge2795(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2796")
private external fun kniBridge2796(): ULong
@SymbolName("glibresources_kniBridge2797")
private external fun kniBridge2797(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2798")
private external fun kniBridge2798(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2799")
private external fun kniBridge2799(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2800")
private external fun kniBridge2800(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2801")
private external fun kniBridge2801(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2802")
private external fun kniBridge2802(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2803")
private external fun kniBridge2803(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2804")
private external fun kniBridge2804(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2805")
private external fun kniBridge2805(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2806")
private external fun kniBridge2806(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2807")
private external fun kniBridge2807(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2808")
private external fun kniBridge2808(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2809")
private external fun kniBridge2809(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2810")
private external fun kniBridge2810(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2811")
private external fun kniBridge2811(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2812")
private external fun kniBridge2812(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2813")
private external fun kniBridge2813(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2814")
private external fun kniBridge2814(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): UInt
@SymbolName("glibresources_kniBridge2815")
private external fun kniBridge2815(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2816")
private external fun kniBridge2816(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): UInt
@SymbolName("glibresources_kniBridge2817")
private external fun kniBridge2817(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge2818")
private external fun kniBridge2818(p0: UInt): Unit
@SymbolName("glibresources_kniBridge2819")
private external fun kniBridge2819(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2820")
private external fun kniBridge2820(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("glibresources_kniBridge2821")
private external fun kniBridge2821(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge2822")
private external fun kniBridge2822(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge2823")
private external fun kniBridge2823(p0: UInt): Unit
@SymbolName("glibresources_kniBridge2824")
private external fun kniBridge2824(): ULong
@SymbolName("glibresources_kniBridge2825")
private external fun kniBridge2825(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge2826")
private external fun kniBridge2826(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2827")
private external fun kniBridge2827(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2828")
private external fun kniBridge2828(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge2829")
private external fun kniBridge2829(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2830")
private external fun kniBridge2830(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2831")
private external fun kniBridge2831(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2832")
private external fun kniBridge2832(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2833")
private external fun kniBridge2833(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2834")
private external fun kniBridge2834(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2835")
private external fun kniBridge2835(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2836")
private external fun kniBridge2836(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2837")
private external fun kniBridge2837(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2838")
private external fun kniBridge2838(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2839")
private external fun kniBridge2839(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2840")
private external fun kniBridge2840(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2841")
private external fun kniBridge2841(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2842")
private external fun kniBridge2842(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge2843")
private external fun kniBridge2843(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2844")
private external fun kniBridge2844(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge2845")
private external fun kniBridge2845(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2846")
private external fun kniBridge2846(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2847")
private external fun kniBridge2847(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge2848")
private external fun kniBridge2848(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2849")
private external fun kniBridge2849(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2850")
private external fun kniBridge2850(): ULong
@SymbolName("glibresources_kniBridge2851")
private external fun kniBridge2851(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2852")
private external fun kniBridge2852(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2853")
private external fun kniBridge2853(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2854")
private external fun kniBridge2854(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2855")
private external fun kniBridge2855(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2856")
private external fun kniBridge2856(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2857")
private external fun kniBridge2857(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2858")
private external fun kniBridge2858(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2859")
private external fun kniBridge2859(): NativePtr
@SymbolName("glibresources_kniBridge2860")
private external fun kniBridge2860(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2861")
private external fun kniBridge2861(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2862")
private external fun kniBridge2862(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2863")
private external fun kniBridge2863(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2864")
private external fun kniBridge2864(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2865")
private external fun kniBridge2865(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2866")
private external fun kniBridge2866(): ULong
@SymbolName("glibresources_kniBridge2867")
private external fun kniBridge2867(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2868")
private external fun kniBridge2868(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2869")
private external fun kniBridge2869(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2870")
private external fun kniBridge2870(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2871")
private external fun kniBridge2871(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2872")
private external fun kniBridge2872(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2873")
private external fun kniBridge2873(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2874")
private external fun kniBridge2874(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2875")
private external fun kniBridge2875(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2876")
private external fun kniBridge2876(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2877")
private external fun kniBridge2877(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2878")
private external fun kniBridge2878(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2879")
private external fun kniBridge2879(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2880")
private external fun kniBridge2880(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge2881")
private external fun kniBridge2881(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2882")
private external fun kniBridge2882(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2883")
private external fun kniBridge2883(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2884")
private external fun kniBridge2884(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2885")
private external fun kniBridge2885(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2886")
private external fun kniBridge2886(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2887")
private external fun kniBridge2887(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2888")
private external fun kniBridge2888(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2889")
private external fun kniBridge2889(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2890")
private external fun kniBridge2890(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2891")
private external fun kniBridge2891(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2892")
private external fun kniBridge2892(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2893")
private external fun kniBridge2893(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2894")
private external fun kniBridge2894(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2895")
private external fun kniBridge2895(): ULong
@SymbolName("glibresources_kniBridge2896")
private external fun kniBridge2896(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2897")
private external fun kniBridge2897(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2898")
private external fun kniBridge2898(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2899")
private external fun kniBridge2899(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2900")
private external fun kniBridge2900(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2901")
private external fun kniBridge2901(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2902")
private external fun kniBridge2902(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2903")
private external fun kniBridge2903(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2904")
private external fun kniBridge2904(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2905")
private external fun kniBridge2905(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2906")
private external fun kniBridge2906(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2907")
private external fun kniBridge2907(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2908")
private external fun kniBridge2908(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2909")
private external fun kniBridge2909(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2910")
private external fun kniBridge2910(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2911")
private external fun kniBridge2911(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge2912")
private external fun kniBridge2912(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge2913")
private external fun kniBridge2913(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2914")
private external fun kniBridge2914(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2915")
private external fun kniBridge2915(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2916")
private external fun kniBridge2916(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2917")
private external fun kniBridge2917(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("glibresources_kniBridge2918")
private external fun kniBridge2918(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2919")
private external fun kniBridge2919(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2920")
private external fun kniBridge2920(): ULong
@SymbolName("glibresources_kniBridge2921")
private external fun kniBridge2921(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2922")
private external fun kniBridge2922(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2923")
private external fun kniBridge2923(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge2924")
private external fun kniBridge2924(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2925")
private external fun kniBridge2925(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2926")
private external fun kniBridge2926(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2927")
private external fun kniBridge2927(): ULong
@SymbolName("glibresources_kniBridge2928")
private external fun kniBridge2928(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2929")
private external fun kniBridge2929(): ULong
@SymbolName("glibresources_kniBridge2930")
private external fun kniBridge2930(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2931")
private external fun kniBridge2931(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2932")
private external fun kniBridge2932(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2933")
private external fun kniBridge2933(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2934")
private external fun kniBridge2934(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2935")
private external fun kniBridge2935(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2936")
private external fun kniBridge2936(): ULong
@SymbolName("glibresources_kniBridge2937")
private external fun kniBridge2937(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2938")
private external fun kniBridge2938(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge2939")
private external fun kniBridge2939(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2940")
private external fun kniBridge2940(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2941")
private external fun kniBridge2941(): ULong
@SymbolName("glibresources_kniBridge2942")
private external fun kniBridge2942(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2943")
private external fun kniBridge2943(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2944")
private external fun kniBridge2944(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2945")
private external fun kniBridge2945(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge2946")
private external fun kniBridge2946(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2947")
private external fun kniBridge2947(): ULong
@SymbolName("glibresources_kniBridge2948")
private external fun kniBridge2948(): NativePtr
@SymbolName("glibresources_kniBridge2949")
private external fun kniBridge2949(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2950")
private external fun kniBridge2950(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge2951")
private external fun kniBridge2951(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2952")
private external fun kniBridge2952(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2953")
private external fun kniBridge2953(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt): Unit
@SymbolName("glibresources_kniBridge2954")
private external fun kniBridge2954(): ULong
@SymbolName("glibresources_kniBridge2955")
private external fun kniBridge2955(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2956")
private external fun kniBridge2956(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2957")
private external fun kniBridge2957(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2958")
private external fun kniBridge2958(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2959")
private external fun kniBridge2959(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2960")
private external fun kniBridge2960(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge2961")
private external fun kniBridge2961(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2962")
private external fun kniBridge2962(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2963")
private external fun kniBridge2963(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge2964")
private external fun kniBridge2964(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2965")
private external fun kniBridge2965(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2966")
private external fun kniBridge2966(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge2967")
private external fun kniBridge2967(): ULong
@SymbolName("glibresources_kniBridge2968")
private external fun kniBridge2968(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2969")
private external fun kniBridge2969(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2970")
private external fun kniBridge2970(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2971")
private external fun kniBridge2971(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2972")
private external fun kniBridge2972(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2973")
private external fun kniBridge2973(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2974")
private external fun kniBridge2974(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2975")
private external fun kniBridge2975(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge2976")
private external fun kniBridge2976(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2977")
private external fun kniBridge2977(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2978")
private external fun kniBridge2978(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2979")
private external fun kniBridge2979(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2980")
private external fun kniBridge2980(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2981")
private external fun kniBridge2981(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2982")
private external fun kniBridge2982(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2983")
private external fun kniBridge2983(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2984")
private external fun kniBridge2984(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2985")
private external fun kniBridge2985(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2986")
private external fun kniBridge2986(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2987")
private external fun kniBridge2987(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2988")
private external fun kniBridge2988(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2989")
private external fun kniBridge2989(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge2990")
private external fun kniBridge2990(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge2991")
private external fun kniBridge2991(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2992")
private external fun kniBridge2992(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2993")
private external fun kniBridge2993(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge2994")
private external fun kniBridge2994(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2995")
private external fun kniBridge2995(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2996")
private external fun kniBridge2996(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2997")
private external fun kniBridge2997(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge2998")
private external fun kniBridge2998(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge2999")
private external fun kniBridge2999(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3000")
private external fun kniBridge3000(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3001")
private external fun kniBridge3001(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3002")
private external fun kniBridge3002(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge3003")
private external fun kniBridge3003(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3004")
private external fun kniBridge3004(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3005")
private external fun kniBridge3005(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3006")
private external fun kniBridge3006(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3007")
private external fun kniBridge3007(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3008")
private external fun kniBridge3008(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3009")
private external fun kniBridge3009(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3010")
private external fun kniBridge3010(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3011")
private external fun kniBridge3011(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge3012")
private external fun kniBridge3012(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3013")
private external fun kniBridge3013(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3014")
private external fun kniBridge3014(p0: NativePtr, p1: UInt, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge3015")
private external fun kniBridge3015(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3016")
private external fun kniBridge3016(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3017")
private external fun kniBridge3017(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3018")
private external fun kniBridge3018(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3019")
private external fun kniBridge3019(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3020")
private external fun kniBridge3020(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3021")
private external fun kniBridge3021(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3022")
private external fun kniBridge3022(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3023")
private external fun kniBridge3023(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3024")
private external fun kniBridge3024(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3025")
private external fun kniBridge3025(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3026")
private external fun kniBridge3026(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3027")
private external fun kniBridge3027(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3028")
private external fun kniBridge3028(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3029")
private external fun kniBridge3029(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3030")
private external fun kniBridge3030(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3031")
private external fun kniBridge3031(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3032")
private external fun kniBridge3032(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3033")
private external fun kniBridge3033(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3034")
private external fun kniBridge3034(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3035")
private external fun kniBridge3035(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3036")
private external fun kniBridge3036(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge3037")
private external fun kniBridge3037(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge3038")
private external fun kniBridge3038(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3039")
private external fun kniBridge3039(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge3040")
private external fun kniBridge3040(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3041")
private external fun kniBridge3041(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3042")
private external fun kniBridge3042(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3043")
private external fun kniBridge3043(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3044")
private external fun kniBridge3044(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3045")
private external fun kniBridge3045(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3046")
private external fun kniBridge3046(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3047")
private external fun kniBridge3047(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge3048")
private external fun kniBridge3048(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3049")
private external fun kniBridge3049(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3050")
private external fun kniBridge3050(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3051")
private external fun kniBridge3051(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3052")
private external fun kniBridge3052(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3053")
private external fun kniBridge3053(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3054")
private external fun kniBridge3054(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3055")
private external fun kniBridge3055(p0: NativePtr, p1: NativePtr, p2: ULong, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3056")
private external fun kniBridge3056(p0: NativePtr, p1: NativePtr, p2: Long, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3057")
private external fun kniBridge3057(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3058")
private external fun kniBridge3058(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3059")
private external fun kniBridge3059(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3060")
private external fun kniBridge3060(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3061")
private external fun kniBridge3061(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3062")
private external fun kniBridge3062(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3063")
private external fun kniBridge3063(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3064")
private external fun kniBridge3064(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3065")
private external fun kniBridge3065(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3066")
private external fun kniBridge3066(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3067")
private external fun kniBridge3067(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3068")
private external fun kniBridge3068(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3069")
private external fun kniBridge3069(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3070")
private external fun kniBridge3070(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3071")
private external fun kniBridge3071(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3072")
private external fun kniBridge3072(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3073")
private external fun kniBridge3073(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Int
@SymbolName("glibresources_kniBridge3074")
private external fun kniBridge3074(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge3075")
private external fun kniBridge3075(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3076")
private external fun kniBridge3076(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3077")
private external fun kniBridge3077(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3078")
private external fun kniBridge3078(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3079")
private external fun kniBridge3079(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3080")
private external fun kniBridge3080(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3081")
private external fun kniBridge3081(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3082")
private external fun kniBridge3082(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3083")
private external fun kniBridge3083(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3084")
private external fun kniBridge3084(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3085")
private external fun kniBridge3085(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3086")
private external fun kniBridge3086(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3087")
private external fun kniBridge3087(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3088")
private external fun kniBridge3088(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3089")
private external fun kniBridge3089(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3090")
private external fun kniBridge3090(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: Int, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): Int
@SymbolName("glibresources_kniBridge3091")
private external fun kniBridge3091(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: Int, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge3092")
private external fun kniBridge3092(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("glibresources_kniBridge3093")
private external fun kniBridge3093(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3094")
private external fun kniBridge3094(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3095")
private external fun kniBridge3095(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3096")
private external fun kniBridge3096(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3097")
private external fun kniBridge3097(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3098")
private external fun kniBridge3098(): ULong
@SymbolName("glibresources_kniBridge3099")
private external fun kniBridge3099(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3100")
private external fun kniBridge3100(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3101")
private external fun kniBridge3101(): ULong
@SymbolName("glibresources_kniBridge3102")
private external fun kniBridge3102(): NativePtr
@SymbolName("glibresources_kniBridge3103")
private external fun kniBridge3103(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3104")
private external fun kniBridge3104(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3105")
private external fun kniBridge3105(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3106")
private external fun kniBridge3106(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3107")
private external fun kniBridge3107(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3108")
private external fun kniBridge3108(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3109")
private external fun kniBridge3109(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge3110")
private external fun kniBridge3110(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3111")
private external fun kniBridge3111(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge3112")
private external fun kniBridge3112(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("glibresources_kniBridge3113")
private external fun kniBridge3113(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3114")
private external fun kniBridge3114(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3115")
private external fun kniBridge3115(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3116")
private external fun kniBridge3116(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3117")
private external fun kniBridge3117(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge3118")
private external fun kniBridge3118(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3119")
private external fun kniBridge3119(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge3120")
private external fun kniBridge3120(p0: NativePtr, p1: NativePtr): Long
@SymbolName("glibresources_kniBridge3121")
private external fun kniBridge3121(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3122")
private external fun kniBridge3122(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3123")
private external fun kniBridge3123(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3124")
private external fun kniBridge3124(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3125")
private external fun kniBridge3125(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3126")
private external fun kniBridge3126(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge3127")
private external fun kniBridge3127(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("glibresources_kniBridge3128")
private external fun kniBridge3128(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("glibresources_kniBridge3129")
private external fun kniBridge3129(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("glibresources_kniBridge3130")
private external fun kniBridge3130(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge3131")
private external fun kniBridge3131(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3132")
private external fun kniBridge3132(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3133")
private external fun kniBridge3133(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3134")
private external fun kniBridge3134(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3135")
private external fun kniBridge3135(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3136")
private external fun kniBridge3136(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3137")
private external fun kniBridge3137(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3138")
private external fun kniBridge3138(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3139")
private external fun kniBridge3139(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3140")
private external fun kniBridge3140(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3141")
private external fun kniBridge3141(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3142")
private external fun kniBridge3142(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3143")
private external fun kniBridge3143(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3144")
private external fun kniBridge3144(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3145")
private external fun kniBridge3145(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge3146")
private external fun kniBridge3146(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3147")
private external fun kniBridge3147(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3148")
private external fun kniBridge3148(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3149")
private external fun kniBridge3149(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3150")
private external fun kniBridge3150(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3151")
private external fun kniBridge3151(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3152")
private external fun kniBridge3152(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3153")
private external fun kniBridge3153(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3154")
private external fun kniBridge3154(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3155")
private external fun kniBridge3155(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3156")
private external fun kniBridge3156(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3157")
private external fun kniBridge3157(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3158")
private external fun kniBridge3158(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3159")
private external fun kniBridge3159(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3160")
private external fun kniBridge3160(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3161")
private external fun kniBridge3161(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3162")
private external fun kniBridge3162(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge3163")
private external fun kniBridge3163(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3164")
private external fun kniBridge3164(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3165")
private external fun kniBridge3165(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3166")
private external fun kniBridge3166(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3167")
private external fun kniBridge3167(): ULong
@SymbolName("glibresources_kniBridge3168")
private external fun kniBridge3168(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3169")
private external fun kniBridge3169(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3170")
private external fun kniBridge3170(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3171")
private external fun kniBridge3171(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3172")
private external fun kniBridge3172(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3173")
private external fun kniBridge3173(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3174")
private external fun kniBridge3174(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3175")
private external fun kniBridge3175(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3176")
private external fun kniBridge3176(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3177")
private external fun kniBridge3177(): ULong
@SymbolName("glibresources_kniBridge3178")
private external fun kniBridge3178(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3179")
private external fun kniBridge3179(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3180")
private external fun kniBridge3180(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3181")
private external fun kniBridge3181(): UInt
@SymbolName("glibresources_kniBridge3182")
private external fun kniBridge3182(p0: Int): UInt
@SymbolName("glibresources_kniBridge3183")
private external fun kniBridge3183(): ULong
@SymbolName("glibresources_kniBridge3184")
private external fun kniBridge3184(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3185")
private external fun kniBridge3185(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3186")
private external fun kniBridge3186(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3187")
private external fun kniBridge3187(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3188")
private external fun kniBridge3188(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3189")
private external fun kniBridge3189(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3190")
private external fun kniBridge3190(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3191")
private external fun kniBridge3191(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3192")
private external fun kniBridge3192(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3193")
private external fun kniBridge3193(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3194")
private external fun kniBridge3194(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3195")
private external fun kniBridge3195(): ULong
@SymbolName("glibresources_kniBridge3196")
private external fun kniBridge3196(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3197")
private external fun kniBridge3197(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3198")
private external fun kniBridge3198(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3199")
private external fun kniBridge3199(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3200")
private external fun kniBridge3200(): ULong
@SymbolName("glibresources_kniBridge3201")
private external fun kniBridge3201(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3202")
private external fun kniBridge3202(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3203")
private external fun kniBridge3203(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3204")
private external fun kniBridge3204(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("glibresources_kniBridge3205")
private external fun kniBridge3205(): ULong
@SymbolName("glibresources_kniBridge3206")
private external fun kniBridge3206(): NativePtr
@SymbolName("glibresources_kniBridge3207")
private external fun kniBridge3207(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3208")
private external fun kniBridge3208(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3209")
private external fun kniBridge3209(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3210")
private external fun kniBridge3210(): ULong
@SymbolName("glibresources_kniBridge3211")
private external fun kniBridge3211(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3212")
private external fun kniBridge3212(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3213")
private external fun kniBridge3213(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3214")
private external fun kniBridge3214(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3215")
private external fun kniBridge3215(): ULong
@SymbolName("glibresources_kniBridge3216")
private external fun kniBridge3216(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3217")
private external fun kniBridge3217(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge3218")
private external fun kniBridge3218(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge3219")
private external fun kniBridge3219(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge3220")
private external fun kniBridge3220(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3221")
private external fun kniBridge3221(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3222")
private external fun kniBridge3222(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3223")
private external fun kniBridge3223(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3224")
private external fun kniBridge3224(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3225")
private external fun kniBridge3225(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3226")
private external fun kniBridge3226(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3227")
private external fun kniBridge3227(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3228")
private external fun kniBridge3228(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3229")
private external fun kniBridge3229(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3230")
private external fun kniBridge3230(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3231")
private external fun kniBridge3231(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3232")
private external fun kniBridge3232(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3233")
private external fun kniBridge3233(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3234")
private external fun kniBridge3234(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3235")
private external fun kniBridge3235(): ULong
@SymbolName("glibresources_kniBridge3236")
private external fun kniBridge3236(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3237")
private external fun kniBridge3237(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3238")
private external fun kniBridge3238(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3239")
private external fun kniBridge3239(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3240")
private external fun kniBridge3240(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3241")
private external fun kniBridge3241(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3242")
private external fun kniBridge3242(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3243")
private external fun kniBridge3243(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3244")
private external fun kniBridge3244(): ULong
@SymbolName("glibresources_kniBridge3245")
private external fun kniBridge3245(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3246")
private external fun kniBridge3246(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge3247")
private external fun kniBridge3247(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3248")
private external fun kniBridge3248(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge3249")
private external fun kniBridge3249(): ULong
@SymbolName("glibresources_kniBridge3250")
private external fun kniBridge3250(p0: NativePtr, p1: UShort): NativePtr
@SymbolName("glibresources_kniBridge3251")
private external fun kniBridge3251(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge3252")
private external fun kniBridge3252(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3253")
private external fun kniBridge3253(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge3254")
private external fun kniBridge3254(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3255")
private external fun kniBridge3255(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3256")
private external fun kniBridge3256(): ULong
@SymbolName("glibresources_kniBridge3257")
private external fun kniBridge3257(): ULong
@SymbolName("glibresources_kniBridge3258")
private external fun kniBridge3258(): ULong
@SymbolName("glibresources_kniBridge3259")
private external fun kniBridge3259(): ULong
@SymbolName("glibresources_kniBridge3260")
private external fun kniBridge3260(): ULong
@SymbolName("glibresources_kniBridge3261")
private external fun kniBridge3261(): ULong
@SymbolName("glibresources_kniBridge3262")
private external fun kniBridge3262(): ULong
@SymbolName("glibresources_kniBridge3263")
private external fun kniBridge3263(): ULong
@SymbolName("glibresources_kniBridge3264")
private external fun kniBridge3264(): ULong
@SymbolName("glibresources_kniBridge3265")
private external fun kniBridge3265(): ULong
@SymbolName("glibresources_kniBridge3266")
private external fun kniBridge3266(): ULong
@SymbolName("glibresources_kniBridge3267")
private external fun kniBridge3267(): ULong
@SymbolName("glibresources_kniBridge3268")
private external fun kniBridge3268(): ULong
@SymbolName("glibresources_kniBridge3269")
private external fun kniBridge3269(): ULong
@SymbolName("glibresources_kniBridge3270")
private external fun kniBridge3270(): ULong
@SymbolName("glibresources_kniBridge3271")
private external fun kniBridge3271(): ULong
@SymbolName("glibresources_kniBridge3272")
private external fun kniBridge3272(): ULong
@SymbolName("glibresources_kniBridge3273")
private external fun kniBridge3273(): ULong
@SymbolName("glibresources_kniBridge3274")
private external fun kniBridge3274(): ULong
@SymbolName("glibresources_kniBridge3275")
private external fun kniBridge3275(): ULong
@SymbolName("glibresources_kniBridge3276")
private external fun kniBridge3276(): ULong
@SymbolName("glibresources_kniBridge3277")
private external fun kniBridge3277(): ULong
@SymbolName("glibresources_kniBridge3278")
private external fun kniBridge3278(): ULong
@SymbolName("glibresources_kniBridge3279")
private external fun kniBridge3279(): ULong
@SymbolName("glibresources_kniBridge3280")
private external fun kniBridge3280(): ULong
@SymbolName("glibresources_kniBridge3281")
private external fun kniBridge3281(): ULong
@SymbolName("glibresources_kniBridge3282")
private external fun kniBridge3282(): ULong
@SymbolName("glibresources_kniBridge3283")
private external fun kniBridge3283(): ULong
@SymbolName("glibresources_kniBridge3284")
private external fun kniBridge3284(): ULong
@SymbolName("glibresources_kniBridge3285")
private external fun kniBridge3285(): ULong
@SymbolName("glibresources_kniBridge3286")
private external fun kniBridge3286(): ULong
@SymbolName("glibresources_kniBridge3287")
private external fun kniBridge3287(): ULong
@SymbolName("glibresources_kniBridge3288")
private external fun kniBridge3288(): ULong
@SymbolName("glibresources_kniBridge3289")
private external fun kniBridge3289(): ULong
@SymbolName("glibresources_kniBridge3290")
private external fun kniBridge3290(): ULong
@SymbolName("glibresources_kniBridge3291")
private external fun kniBridge3291(): ULong
@SymbolName("glibresources_kniBridge3292")
private external fun kniBridge3292(): ULong
@SymbolName("glibresources_kniBridge3293")
private external fun kniBridge3293(): ULong
@SymbolName("glibresources_kniBridge3294")
private external fun kniBridge3294(): ULong
@SymbolName("glibresources_kniBridge3295")
private external fun kniBridge3295(): ULong
@SymbolName("glibresources_kniBridge3296")
private external fun kniBridge3296(): ULong
@SymbolName("glibresources_kniBridge3297")
private external fun kniBridge3297(): ULong
@SymbolName("glibresources_kniBridge3298")
private external fun kniBridge3298(): ULong
@SymbolName("glibresources_kniBridge3299")
private external fun kniBridge3299(): ULong
@SymbolName("glibresources_kniBridge3300")
private external fun kniBridge3300(): ULong
@SymbolName("glibresources_kniBridge3301")
private external fun kniBridge3301(): ULong
@SymbolName("glibresources_kniBridge3302")
private external fun kniBridge3302(): ULong
@SymbolName("glibresources_kniBridge3303")
private external fun kniBridge3303(): ULong
@SymbolName("glibresources_kniBridge3304")
private external fun kniBridge3304(): ULong
@SymbolName("glibresources_kniBridge3305")
private external fun kniBridge3305(): ULong
@SymbolName("glibresources_kniBridge3306")
private external fun kniBridge3306(): ULong
@SymbolName("glibresources_kniBridge3307")
private external fun kniBridge3307(): ULong
@SymbolName("glibresources_kniBridge3308")
private external fun kniBridge3308(): ULong
@SymbolName("glibresources_kniBridge3309")
private external fun kniBridge3309(): ULong
@SymbolName("glibresources_kniBridge3310")
private external fun kniBridge3310(): ULong
@SymbolName("glibresources_kniBridge3311")
private external fun kniBridge3311(): ULong
@SymbolName("glibresources_kniBridge3312")
private external fun kniBridge3312(): ULong
@SymbolName("glibresources_kniBridge3313")
private external fun kniBridge3313(): ULong
@SymbolName("glibresources_kniBridge3314")
private external fun kniBridge3314(): ULong
@SymbolName("glibresources_kniBridge3315")
private external fun kniBridge3315(): ULong
@SymbolName("glibresources_kniBridge3316")
private external fun kniBridge3316(): ULong
@SymbolName("glibresources_kniBridge3317")
private external fun kniBridge3317(): ULong
@SymbolName("glibresources_kniBridge3318")
private external fun kniBridge3318(): ULong
@SymbolName("glibresources_kniBridge3319")
private external fun kniBridge3319(): ULong
@SymbolName("glibresources_kniBridge3320")
private external fun kniBridge3320(): ULong
@SymbolName("glibresources_kniBridge3321")
private external fun kniBridge3321(): ULong
@SymbolName("glibresources_kniBridge3322")
private external fun kniBridge3322(): ULong
@SymbolName("glibresources_kniBridge3323")
private external fun kniBridge3323(): ULong
@SymbolName("glibresources_kniBridge3324")
private external fun kniBridge3324(): ULong
@SymbolName("glibresources_kniBridge3325")
private external fun kniBridge3325(): ULong
@SymbolName("glibresources_kniBridge3326")
private external fun kniBridge3326(): ULong
@SymbolName("glibresources_kniBridge3327")
private external fun kniBridge3327(): ULong
@SymbolName("glibresources_kniBridge3328")
private external fun kniBridge3328(): ULong
@SymbolName("glibresources_kniBridge3329")
private external fun kniBridge3329(): ULong
@SymbolName("glibresources_kniBridge3330")
private external fun kniBridge3330(): ULong
@SymbolName("glibresources_kniBridge3331")
private external fun kniBridge3331(): ULong
@SymbolName("glibresources_kniBridge3332")
private external fun kniBridge3332(): ULong
@SymbolName("glibresources_kniBridge3333")
private external fun kniBridge3333(): ULong
@SymbolName("glibresources_kniBridge3334")
private external fun kniBridge3334(): Int
@SymbolName("glibresources_kniBridge3335")
private external fun kniBridge3335(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge3336")
private external fun kniBridge3336(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3337")
private external fun kniBridge3337(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3338")
private external fun kniBridge3338(): NativePtr
@SymbolName("glibresources_kniBridge3339")
private external fun kniBridge3339(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3340")
private external fun kniBridge3340(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3341")
private external fun kniBridge3341(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3342")
private external fun kniBridge3342(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge3343")
private external fun kniBridge3343(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3344")
private external fun kniBridge3344(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3345")
private external fun kniBridge3345(): ULong
@SymbolName("glibresources_kniBridge3346")
private external fun kniBridge3346(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3347")
private external fun kniBridge3347(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3348")
private external fun kniBridge3348(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3349")
private external fun kniBridge3349(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3350")
private external fun kniBridge3350(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3351")
private external fun kniBridge3351(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3352")
private external fun kniBridge3352(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3353")
private external fun kniBridge3353(p0: NativePtr, p1: ULong): Unit
@SymbolName("glibresources_kniBridge3354")
private external fun kniBridge3354(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3355")
private external fun kniBridge3355(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3356")
private external fun kniBridge3356(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3357")
private external fun kniBridge3357(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): NativePtr
@SymbolName("glibresources_kniBridge3358")
private external fun kniBridge3358(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3359")
private external fun kniBridge3359(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3360")
private external fun kniBridge3360(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3361")
private external fun kniBridge3361(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3362")
private external fun kniBridge3362(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3363")
private external fun kniBridge3363(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3364")
private external fun kniBridge3364(): NativePtr
@SymbolName("glibresources_kniBridge3365")
private external fun kniBridge3365(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3366")
private external fun kniBridge3366(): Unit
@SymbolName("glibresources_kniBridge3367")
private external fun kniBridge3367(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3368")
private external fun kniBridge3368(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3369")
private external fun kniBridge3369(): ULong
@SymbolName("glibresources_kniBridge3370")
private external fun kniBridge3370(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3371")
private external fun kniBridge3371(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3372")
private external fun kniBridge3372(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3373")
private external fun kniBridge3373(): ULong
@SymbolName("glibresources_kniBridge3374")
private external fun kniBridge3374(): NativePtr
@SymbolName("glibresources_kniBridge3375")
private external fun kniBridge3375(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3376")
private external fun kniBridge3376(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3377")
private external fun kniBridge3377(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3378")
private external fun kniBridge3378(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3379")
private external fun kniBridge3379(): ULong
@SymbolName("glibresources_kniBridge3380")
private external fun kniBridge3380(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3381")
private external fun kniBridge3381(): NativePtr
@SymbolName("glibresources_kniBridge3382")
private external fun kniBridge3382(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3383")
private external fun kniBridge3383(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3384")
private external fun kniBridge3384(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3385")
private external fun kniBridge3385(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3386")
private external fun kniBridge3386(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3387")
private external fun kniBridge3387(): ULong
@SymbolName("glibresources_kniBridge3388")
private external fun kniBridge3388(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3389")
private external fun kniBridge3389(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3390")
private external fun kniBridge3390(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3391")
private external fun kniBridge3391(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3392")
private external fun kniBridge3392(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3393")
private external fun kniBridge3393(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3394")
private external fun kniBridge3394(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3395")
private external fun kniBridge3395(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3396")
private external fun kniBridge3396(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3397")
private external fun kniBridge3397(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3398")
private external fun kniBridge3398(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3399")
private external fun kniBridge3399(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3400")
private external fun kniBridge3400(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3401")
private external fun kniBridge3401(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3402")
private external fun kniBridge3402(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3403")
private external fun kniBridge3403(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3404")
private external fun kniBridge3404(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3405")
private external fun kniBridge3405(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3406")
private external fun kniBridge3406(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3407")
private external fun kniBridge3407(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3408")
private external fun kniBridge3408(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3409")
private external fun kniBridge3409(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3410")
private external fun kniBridge3410(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3411")
private external fun kniBridge3411(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3412")
private external fun kniBridge3412(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3413")
private external fun kniBridge3413(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3414")
private external fun kniBridge3414(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3415")
private external fun kniBridge3415(): ULong
@SymbolName("glibresources_kniBridge3416")
private external fun kniBridge3416(): NativePtr
@SymbolName("glibresources_kniBridge3417")
private external fun kniBridge3417(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3418")
private external fun kniBridge3418(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3419")
private external fun kniBridge3419(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3420")
private external fun kniBridge3420(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3421")
private external fun kniBridge3421(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3422")
private external fun kniBridge3422(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3423")
private external fun kniBridge3423(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3424")
private external fun kniBridge3424(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3425")
private external fun kniBridge3425(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3426")
private external fun kniBridge3426(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3427")
private external fun kniBridge3427(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3428")
private external fun kniBridge3428(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3429")
private external fun kniBridge3429(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3430")
private external fun kniBridge3430(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3431")
private external fun kniBridge3431(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3432")
private external fun kniBridge3432(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3433")
private external fun kniBridge3433(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3434")
private external fun kniBridge3434(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3435")
private external fun kniBridge3435(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3436")
private external fun kniBridge3436(): ULong
@SymbolName("glibresources_kniBridge3437")
private external fun kniBridge3437(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("glibresources_kniBridge3438")
private external fun kniBridge3438(): ULong
@SymbolName("glibresources_kniBridge3439")
private external fun kniBridge3439(): NativePtr
@SymbolName("glibresources_kniBridge3440")
private external fun kniBridge3440(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3441")
private external fun kniBridge3441(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3442")
private external fun kniBridge3442(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3443")
private external fun kniBridge3443(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3444")
private external fun kniBridge3444(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3445")
private external fun kniBridge3445(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3446")
private external fun kniBridge3446(): ULong
@SymbolName("glibresources_kniBridge3447")
private external fun kniBridge3447(): ULong
@SymbolName("glibresources_kniBridge3448")
private external fun kniBridge3448(p0: NativePtr, p1: UShort): NativePtr
@SymbolName("glibresources_kniBridge3449")
private external fun kniBridge3449(p0: UShort): NativePtr
@SymbolName("glibresources_kniBridge3450")
private external fun kniBridge3450(p0: NativePtr, p1: UShort, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3451")
private external fun kniBridge3451(p0: NativePtr, p1: UShort, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3452")
private external fun kniBridge3452(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3453")
private external fun kniBridge3453(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge3454")
private external fun kniBridge3454(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3455")
private external fun kniBridge3455(): ULong
@SymbolName("glibresources_kniBridge3456")
private external fun kniBridge3456(): NativePtr
@SymbolName("glibresources_kniBridge3457")
private external fun kniBridge3457(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3458")
private external fun kniBridge3458(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3459")
private external fun kniBridge3459(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3460")
private external fun kniBridge3460(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3461")
private external fun kniBridge3461(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3462")
private external fun kniBridge3462(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3463")
private external fun kniBridge3463(): ULong
@SymbolName("glibresources_kniBridge3464")
private external fun kniBridge3464(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3465")
private external fun kniBridge3465(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3466")
private external fun kniBridge3466(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3467")
private external fun kniBridge3467(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3468")
private external fun kniBridge3468(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3469")
private external fun kniBridge3469(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3470")
private external fun kniBridge3470(): ULong
@SymbolName("glibresources_kniBridge3471")
private external fun kniBridge3471(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3472")
private external fun kniBridge3472(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3473")
private external fun kniBridge3473(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3474")
private external fun kniBridge3474(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3475")
private external fun kniBridge3475(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3476")
private external fun kniBridge3476(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3477")
private external fun kniBridge3477(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3478")
private external fun kniBridge3478(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3479")
private external fun kniBridge3479(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3480")
private external fun kniBridge3480(p0: NativePtr, p1: Int, p2: Int, p3: Int): Unit
@SymbolName("glibresources_kniBridge3481")
private external fun kniBridge3481(): ULong
@SymbolName("glibresources_kniBridge3482")
private external fun kniBridge3482(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3483")
private external fun kniBridge3483(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3484")
private external fun kniBridge3484(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3485")
private external fun kniBridge3485(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge3486")
private external fun kniBridge3486(): ULong
@SymbolName("glibresources_kniBridge3487")
private external fun kniBridge3487(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3488")
private external fun kniBridge3488(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3489")
private external fun kniBridge3489(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3490")
private external fun kniBridge3490(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge3491")
private external fun kniBridge3491(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3492")
private external fun kniBridge3492(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3493")
private external fun kniBridge3493(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3494")
private external fun kniBridge3494(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("glibresources_kniBridge3495")
private external fun kniBridge3495(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("glibresources_kniBridge3496")
private external fun kniBridge3496(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge3497")
private external fun kniBridge3497(): ULong
@SymbolName("glibresources_kniBridge3498")
private external fun kniBridge3498(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3499")
private external fun kniBridge3499(): ULong
@SymbolName("glibresources_kniBridge3500")
private external fun kniBridge3500(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3501")
private external fun kniBridge3501(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3502")
private external fun kniBridge3502(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3503")
private external fun kniBridge3503(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3504")
private external fun kniBridge3504(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3505")
private external fun kniBridge3505(): ULong
@SymbolName("glibresources_kniBridge3506")
private external fun kniBridge3506(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr, p4: UShort, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3507")
private external fun kniBridge3507(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3508")
private external fun kniBridge3508(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3509")
private external fun kniBridge3509(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3510")
private external fun kniBridge3510(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge3511")
private external fun kniBridge3511(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3512")
private external fun kniBridge3512(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3513")
private external fun kniBridge3513(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3514")
private external fun kniBridge3514(): ULong
@SymbolName("glibresources_kniBridge3515")
private external fun kniBridge3515(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3516")
private external fun kniBridge3516(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3517")
private external fun kniBridge3517(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3518")
private external fun kniBridge3518(): ULong
@SymbolName("glibresources_kniBridge3519")
private external fun kniBridge3519(): ULong
@SymbolName("glibresources_kniBridge3520")
private external fun kniBridge3520(): NativePtr
@SymbolName("glibresources_kniBridge3521")
private external fun kniBridge3521(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3522")
private external fun kniBridge3522(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3523")
private external fun kniBridge3523(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3524")
private external fun kniBridge3524(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3525")
private external fun kniBridge3525(): ULong
@SymbolName("glibresources_kniBridge3526")
private external fun kniBridge3526(): NativePtr
@SymbolName("glibresources_kniBridge3527")
private external fun kniBridge3527(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3528")
private external fun kniBridge3528(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3529")
private external fun kniBridge3529(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3530")
private external fun kniBridge3530(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3531")
private external fun kniBridge3531(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3532")
private external fun kniBridge3532(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3533")
private external fun kniBridge3533(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3534")
private external fun kniBridge3534(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3535")
private external fun kniBridge3535(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3536")
private external fun kniBridge3536(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3537")
private external fun kniBridge3537(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3538")
private external fun kniBridge3538(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3539")
private external fun kniBridge3539(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3540")
private external fun kniBridge3540(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3541")
private external fun kniBridge3541(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3542")
private external fun kniBridge3542(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3543")
private external fun kniBridge3543(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3544")
private external fun kniBridge3544(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3545")
private external fun kniBridge3545(): UInt
@SymbolName("glibresources_kniBridge3546")
private external fun kniBridge3546(): UInt
@SymbolName("glibresources_kniBridge3547")
private external fun kniBridge3547(): ULong
@SymbolName("glibresources_kniBridge3548")
private external fun kniBridge3548(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3549")
private external fun kniBridge3549(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3550")
private external fun kniBridge3550(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3551")
private external fun kniBridge3551(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3552")
private external fun kniBridge3552(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3553")
private external fun kniBridge3553(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3554")
private external fun kniBridge3554(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3555")
private external fun kniBridge3555(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3556")
private external fun kniBridge3556(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3557")
private external fun kniBridge3557(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3558")
private external fun kniBridge3558(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3559")
private external fun kniBridge3559(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3560")
private external fun kniBridge3560(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3561")
private external fun kniBridge3561(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3562")
private external fun kniBridge3562(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3563")
private external fun kniBridge3563(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3564")
private external fun kniBridge3564(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3565")
private external fun kniBridge3565(): ULong
@SymbolName("glibresources_kniBridge3566")
private external fun kniBridge3566(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge3567")
private external fun kniBridge3567(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3568")
private external fun kniBridge3568(p0: NativePtr, p1: Long, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3569")
private external fun kniBridge3569(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3570")
private external fun kniBridge3570(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3571")
private external fun kniBridge3571(): ULong
@SymbolName("glibresources_kniBridge3572")
private external fun kniBridge3572(): NativePtr
@SymbolName("glibresources_kniBridge3573")
private external fun kniBridge3573(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3574")
private external fun kniBridge3574(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3575")
private external fun kniBridge3575(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3576")
private external fun kniBridge3576(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("glibresources_kniBridge3577")
private external fun kniBridge3577(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3578")
private external fun kniBridge3578(): ULong
@SymbolName("glibresources_kniBridge3579")
private external fun kniBridge3579(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3580")
private external fun kniBridge3580(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3581")
private external fun kniBridge3581(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3582")
private external fun kniBridge3582(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3583")
private external fun kniBridge3583(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3584")
private external fun kniBridge3584(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3585")
private external fun kniBridge3585(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3586")
private external fun kniBridge3586(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3587")
private external fun kniBridge3587(): ULong
@SymbolName("glibresources_kniBridge3588")
private external fun kniBridge3588(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3589")
private external fun kniBridge3589(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3590")
private external fun kniBridge3590(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3591")
private external fun kniBridge3591(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3592")
private external fun kniBridge3592(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3593")
private external fun kniBridge3593(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3594")
private external fun kniBridge3594(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3595")
private external fun kniBridge3595(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3596")
private external fun kniBridge3596(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3597")
private external fun kniBridge3597(): ULong
@SymbolName("glibresources_kniBridge3598")
private external fun kniBridge3598(): NativePtr
@SymbolName("glibresources_kniBridge3599")
private external fun kniBridge3599(): NativePtr
@SymbolName("glibresources_kniBridge3600")
private external fun kniBridge3600(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3601")
private external fun kniBridge3601(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3602")
private external fun kniBridge3602(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3603")
private external fun kniBridge3603(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3604")
private external fun kniBridge3604(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3605")
private external fun kniBridge3605(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3606")
private external fun kniBridge3606(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3607")
private external fun kniBridge3607(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3608")
private external fun kniBridge3608(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3609")
private external fun kniBridge3609(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3610")
private external fun kniBridge3610(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3611")
private external fun kniBridge3611(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3612")
private external fun kniBridge3612(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3613")
private external fun kniBridge3613(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3614")
private external fun kniBridge3614(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3615")
private external fun kniBridge3615(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge3616")
private external fun kniBridge3616(p0: NativePtr, p1: NativePtr): Long
@SymbolName("glibresources_kniBridge3617")
private external fun kniBridge3617(p0: NativePtr, p1: NativePtr, p2: Long): Int
@SymbolName("glibresources_kniBridge3618")
private external fun kniBridge3618(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge3619")
private external fun kniBridge3619(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("glibresources_kniBridge3620")
private external fun kniBridge3620(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("glibresources_kniBridge3621")
private external fun kniBridge3621(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("glibresources_kniBridge3622")
private external fun kniBridge3622(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3623")
private external fun kniBridge3623(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3624")
private external fun kniBridge3624(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3625")
private external fun kniBridge3625(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge3626")
private external fun kniBridge3626(p0: NativePtr, p1: NativePtr): Double
@SymbolName("glibresources_kniBridge3627")
private external fun kniBridge3627(p0: NativePtr, p1: NativePtr, p2: Double): Int
@SymbolName("glibresources_kniBridge3628")
private external fun kniBridge3628(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3629")
private external fun kniBridge3629(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3630")
private external fun kniBridge3630(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3631")
private external fun kniBridge3631(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("glibresources_kniBridge3632")
private external fun kniBridge3632(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("glibresources_kniBridge3633")
private external fun kniBridge3633(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("glibresources_kniBridge3634")
private external fun kniBridge3634(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3635")
private external fun kniBridge3635(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3636")
private external fun kniBridge3636(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3637")
private external fun kniBridge3637(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3638")
private external fun kniBridge3638(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3639")
private external fun kniBridge3639(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3640")
private external fun kniBridge3640(): Unit
@SymbolName("glibresources_kniBridge3641")
private external fun kniBridge3641(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): Unit
@SymbolName("glibresources_kniBridge3642")
private external fun kniBridge3642(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge3643")
private external fun kniBridge3643(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Unit
@SymbolName("glibresources_kniBridge3644")
private external fun kniBridge3644(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3645")
private external fun kniBridge3645(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3646")
private external fun kniBridge3646(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3647")
private external fun kniBridge3647(): ULong
@SymbolName("glibresources_kniBridge3648")
private external fun kniBridge3648(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3649")
private external fun kniBridge3649(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3650")
private external fun kniBridge3650(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3651")
private external fun kniBridge3651(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3652")
private external fun kniBridge3652(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3653")
private external fun kniBridge3653(): ULong
@SymbolName("glibresources_kniBridge3654")
private external fun kniBridge3654(): NativePtr
@SymbolName("glibresources_kniBridge3655")
private external fun kniBridge3655(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3656")
private external fun kniBridge3656(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3657")
private external fun kniBridge3657(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3658")
private external fun kniBridge3658(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3659")
private external fun kniBridge3659(): ULong
@SymbolName("glibresources_kniBridge3660")
private external fun kniBridge3660(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3661")
private external fun kniBridge3661(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3662")
private external fun kniBridge3662(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3663")
private external fun kniBridge3663(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3664")
private external fun kniBridge3664(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3665")
private external fun kniBridge3665(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge3666")
private external fun kniBridge3666(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge3667")
private external fun kniBridge3667(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3668")
private external fun kniBridge3668(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3669")
private external fun kniBridge3669(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3670")
private external fun kniBridge3670(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3671")
private external fun kniBridge3671(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3672")
private external fun kniBridge3672(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3673")
private external fun kniBridge3673(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3674")
private external fun kniBridge3674(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3675")
private external fun kniBridge3675(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3676")
private external fun kniBridge3676(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3677")
private external fun kniBridge3677(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3678")
private external fun kniBridge3678(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3679")
private external fun kniBridge3679(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3680")
private external fun kniBridge3680(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3681")
private external fun kniBridge3681(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3682")
private external fun kniBridge3682(): ULong
@SymbolName("glibresources_kniBridge3683")
private external fun kniBridge3683(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3684")
private external fun kniBridge3684(): ULong
@SymbolName("glibresources_kniBridge3685")
private external fun kniBridge3685(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge3686")
private external fun kniBridge3686(): ULong
@SymbolName("glibresources_kniBridge3687")
private external fun kniBridge3687(): NativePtr
@SymbolName("glibresources_kniBridge3688")
private external fun kniBridge3688(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3689")
private external fun kniBridge3689(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3690")
private external fun kniBridge3690(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3691")
private external fun kniBridge3691(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3692")
private external fun kniBridge3692(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3693")
private external fun kniBridge3693(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3694")
private external fun kniBridge3694(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3695")
private external fun kniBridge3695(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3696")
private external fun kniBridge3696(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3697")
private external fun kniBridge3697(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3698")
private external fun kniBridge3698(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3699")
private external fun kniBridge3699(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3700")
private external fun kniBridge3700(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3701")
private external fun kniBridge3701(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3702")
private external fun kniBridge3702(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3703")
private external fun kniBridge3703(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3704")
private external fun kniBridge3704(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3705")
private external fun kniBridge3705(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3706")
private external fun kniBridge3706(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3707")
private external fun kniBridge3707(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3708")
private external fun kniBridge3708(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3709")
private external fun kniBridge3709(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3710")
private external fun kniBridge3710(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3711")
private external fun kniBridge3711(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3712")
private external fun kniBridge3712(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3713")
private external fun kniBridge3713(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3714")
private external fun kniBridge3714(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3715")
private external fun kniBridge3715(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3716")
private external fun kniBridge3716(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge3717")
private external fun kniBridge3717(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3718")
private external fun kniBridge3718(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3719")
private external fun kniBridge3719(): ULong
@SymbolName("glibresources_kniBridge3720")
private external fun kniBridge3720(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3721")
private external fun kniBridge3721(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3722")
private external fun kniBridge3722(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3723")
private external fun kniBridge3723(): ULong
@SymbolName("glibresources_kniBridge3724")
private external fun kniBridge3724(p0: UInt, p1: UInt, p2: Int, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3725")
private external fun kniBridge3725(p0: Int, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3726")
private external fun kniBridge3726(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3727")
private external fun kniBridge3727(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3728")
private external fun kniBridge3728(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3729")
private external fun kniBridge3729(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3730")
private external fun kniBridge3730(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3731")
private external fun kniBridge3731(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3732")
private external fun kniBridge3732(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3733")
private external fun kniBridge3733(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3734")
private external fun kniBridge3734(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3735")
private external fun kniBridge3735(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3736")
private external fun kniBridge3736(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3737")
private external fun kniBridge3737(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3738")
private external fun kniBridge3738(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3739")
private external fun kniBridge3739(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3740")
private external fun kniBridge3740(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3741")
private external fun kniBridge3741(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3742")
private external fun kniBridge3742(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3743")
private external fun kniBridge3743(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3744")
private external fun kniBridge3744(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3745")
private external fun kniBridge3745(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3746")
private external fun kniBridge3746(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3747")
private external fun kniBridge3747(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3748")
private external fun kniBridge3748(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3749")
private external fun kniBridge3749(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3750")
private external fun kniBridge3750(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3751")
private external fun kniBridge3751(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3752")
private external fun kniBridge3752(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3753")
private external fun kniBridge3753(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3754")
private external fun kniBridge3754(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3755")
private external fun kniBridge3755(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3756")
private external fun kniBridge3756(p0: NativePtr): Long
@SymbolName("glibresources_kniBridge3757")
private external fun kniBridge3757(p0: NativePtr, p1: UInt): UInt
@SymbolName("glibresources_kniBridge3758")
private external fun kniBridge3758(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3759")
private external fun kniBridge3759(p0: NativePtr, p1: UInt, p2: Long, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3760")
private external fun kniBridge3760(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3761")
private external fun kniBridge3761(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3762")
private external fun kniBridge3762(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge3763")
private external fun kniBridge3763(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Long
@SymbolName("glibresources_kniBridge3764")
private external fun kniBridge3764(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("glibresources_kniBridge3765")
private external fun kniBridge3765(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Long
@SymbolName("glibresources_kniBridge3766")
private external fun kniBridge3766(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Long
@SymbolName("glibresources_kniBridge3767")
private external fun kniBridge3767(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int, p6: Int, p7: NativePtr, p8: NativePtr): Long
@SymbolName("glibresources_kniBridge3768")
private external fun kniBridge3768(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3769")
private external fun kniBridge3769(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3770")
private external fun kniBridge3770(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3771")
private external fun kniBridge3771(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3772")
private external fun kniBridge3772(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3773")
private external fun kniBridge3773(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3774")
private external fun kniBridge3774(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3775")
private external fun kniBridge3775(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3776")
private external fun kniBridge3776(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("glibresources_kniBridge3777")
private external fun kniBridge3777(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("glibresources_kniBridge3778")
private external fun kniBridge3778(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int, p6: Int, p7: Long, p8: NativePtr, p9: NativePtr, p10: NativePtr): Int
@SymbolName("glibresources_kniBridge3779")
private external fun kniBridge3779(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3780")
private external fun kniBridge3780(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3781")
private external fun kniBridge3781(): ULong
@SymbolName("glibresources_kniBridge3782")
private external fun kniBridge3782(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3783")
private external fun kniBridge3783(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3784")
private external fun kniBridge3784(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3785")
private external fun kniBridge3785(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3786")
private external fun kniBridge3786(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3787")
private external fun kniBridge3787(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3788")
private external fun kniBridge3788(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3789")
private external fun kniBridge3789(p0: ULong, p1: UInt, p2: UInt, p3: Int): Unit
@SymbolName("glibresources_kniBridge3790")
private external fun kniBridge3790(p0: UInt, p1: UInt, p2: Int): ULong
@SymbolName("glibresources_kniBridge3791")
private external fun kniBridge3791(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3792")
private external fun kniBridge3792(): ULong
@SymbolName("glibresources_kniBridge3793")
private external fun kniBridge3793(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3794")
private external fun kniBridge3794(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3795")
private external fun kniBridge3795(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3796")
private external fun kniBridge3796(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3797")
private external fun kniBridge3797(p0: Int, p1: Int, p2: ULong, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3798")
private external fun kniBridge3798(): ULong
@SymbolName("glibresources_kniBridge3799")
private external fun kniBridge3799(): NativePtr
@SymbolName("glibresources_kniBridge3800")
private external fun kniBridge3800(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3801")
private external fun kniBridge3801(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3802")
private external fun kniBridge3802(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("glibresources_kniBridge3803")
private external fun kniBridge3803(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge3804")
private external fun kniBridge3804(p0: NativePtr, p1: NativePtr, p2: NativePtr): UShort
@SymbolName("glibresources_kniBridge3805")
private external fun kniBridge3805(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3806")
private external fun kniBridge3806(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3807")
private external fun kniBridge3807(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3808")
private external fun kniBridge3808(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3809")
private external fun kniBridge3809(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3810")
private external fun kniBridge3810(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3811")
private external fun kniBridge3811(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3812")
private external fun kniBridge3812(): ULong
@SymbolName("glibresources_kniBridge3813")
private external fun kniBridge3813(): NativePtr
@SymbolName("glibresources_kniBridge3814")
private external fun kniBridge3814(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3815")
private external fun kniBridge3815(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3816")
private external fun kniBridge3816(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3817")
private external fun kniBridge3817(): ULong
@SymbolName("glibresources_kniBridge3818")
private external fun kniBridge3818(p0: NativePtr, p1: UShort, p2: UShort, p3: UShort): NativePtr
@SymbolName("glibresources_kniBridge3819")
private external fun kniBridge3819(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3820")
private external fun kniBridge3820(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3821")
private external fun kniBridge3821(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3822")
private external fun kniBridge3822(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge3823")
private external fun kniBridge3823(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge3824")
private external fun kniBridge3824(p0: NativePtr): UShort
@SymbolName("glibresources_kniBridge3825")
private external fun kniBridge3825(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3826")
private external fun kniBridge3826(): ULong
@SymbolName("glibresources_kniBridge3827")
private external fun kniBridge3827(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3828")
private external fun kniBridge3828(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3829")
private external fun kniBridge3829(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3830")
private external fun kniBridge3830(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3831")
private external fun kniBridge3831(): ULong
@SymbolName("glibresources_kniBridge3832")
private external fun kniBridge3832(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3833")
private external fun kniBridge3833(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3834")
private external fun kniBridge3834(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3835")
private external fun kniBridge3835(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3836")
private external fun kniBridge3836(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3837")
private external fun kniBridge3837(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3838")
private external fun kniBridge3838(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3839")
private external fun kniBridge3839(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3840")
private external fun kniBridge3840(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3841")
private external fun kniBridge3841(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3842")
private external fun kniBridge3842(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3843")
private external fun kniBridge3843(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3844")
private external fun kniBridge3844(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3845")
private external fun kniBridge3845(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3846")
private external fun kniBridge3846(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3847")
private external fun kniBridge3847(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3848")
private external fun kniBridge3848(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3849")
private external fun kniBridge3849(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3850")
private external fun kniBridge3850(p0: NativePtr, p1: Int): Int
@SymbolName("glibresources_kniBridge3851")
private external fun kniBridge3851(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3852")
private external fun kniBridge3852(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3853")
private external fun kniBridge3853(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge3854")
private external fun kniBridge3854(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3855")
private external fun kniBridge3855(p0: NativePtr, p1: Long): Unit
@SymbolName("glibresources_kniBridge3856")
private external fun kniBridge3856(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3857")
private external fun kniBridge3857(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3858")
private external fun kniBridge3858(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3859")
private external fun kniBridge3859(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3860")
private external fun kniBridge3860(p0: NativePtr, p1: NativePtr): Long
@SymbolName("glibresources_kniBridge3861")
private external fun kniBridge3861(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3862")
private external fun kniBridge3862(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3863")
private external fun kniBridge3863(): ULong
@SymbolName("glibresources_kniBridge3864")
private external fun kniBridge3864(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3865")
private external fun kniBridge3865(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3866")
private external fun kniBridge3866(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3867")
private external fun kniBridge3867(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3868")
private external fun kniBridge3868(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3869")
private external fun kniBridge3869(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3870")
private external fun kniBridge3870(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3871")
private external fun kniBridge3871(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3872")
private external fun kniBridge3872(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3873")
private external fun kniBridge3873(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3874")
private external fun kniBridge3874(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3875")
private external fun kniBridge3875(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3876")
private external fun kniBridge3876(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3877")
private external fun kniBridge3877(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3878")
private external fun kniBridge3878(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3879")
private external fun kniBridge3879(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3880")
private external fun kniBridge3880(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3881")
private external fun kniBridge3881(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3882")
private external fun kniBridge3882(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3883")
private external fun kniBridge3883(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3884")
private external fun kniBridge3884(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3885")
private external fun kniBridge3885(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3886")
private external fun kniBridge3886(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("glibresources_kniBridge3887")
private external fun kniBridge3887(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3888")
private external fun kniBridge3888(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("glibresources_kniBridge3889")
private external fun kniBridge3889(): ULong
@SymbolName("glibresources_kniBridge3890")
private external fun kniBridge3890(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge3891")
private external fun kniBridge3891(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3892")
private external fun kniBridge3892(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3893")
private external fun kniBridge3893(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("glibresources_kniBridge3894")
private external fun kniBridge3894(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3895")
private external fun kniBridge3895(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3896")
private external fun kniBridge3896(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3897")
private external fun kniBridge3897(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3898")
private external fun kniBridge3898(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3899")
private external fun kniBridge3899(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3900")
private external fun kniBridge3900(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3901")
private external fun kniBridge3901(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3902")
private external fun kniBridge3902(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3903")
private external fun kniBridge3903(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3904")
private external fun kniBridge3904(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("glibresources_kniBridge3905")
private external fun kniBridge3905(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge3906")
private external fun kniBridge3906(): ULong
@SymbolName("glibresources_kniBridge3907")
private external fun kniBridge3907(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3908")
private external fun kniBridge3908(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3909")
private external fun kniBridge3909(): ULong
@SymbolName("glibresources_kniBridge3910")
private external fun kniBridge3910(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3911")
private external fun kniBridge3911(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3912")
private external fun kniBridge3912(): ULong
@SymbolName("glibresources_kniBridge3913")
private external fun kniBridge3913(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge3914")
private external fun kniBridge3914(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3915")
private external fun kniBridge3915(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3916")
private external fun kniBridge3916(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3917")
private external fun kniBridge3917(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3918")
private external fun kniBridge3918(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3919")
private external fun kniBridge3919(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge3920")
private external fun kniBridge3920(): Unit
@SymbolName("glibresources_kniBridge3921")
private external fun kniBridge3921(): ULong
@SymbolName("glibresources_kniBridge3922")
private external fun kniBridge3922(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3923")
private external fun kniBridge3923(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3924")
private external fun kniBridge3924(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge3925")
private external fun kniBridge3925(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3926")
private external fun kniBridge3926(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3927")
private external fun kniBridge3927(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3928")
private external fun kniBridge3928(): ULong
@SymbolName("glibresources_kniBridge3929")
private external fun kniBridge3929(p0: Int): NativePtr
@SymbolName("glibresources_kniBridge3930")
private external fun kniBridge3930(): ULong
@SymbolName("glibresources_kniBridge3931")
private external fun kniBridge3931(): NativePtr
@SymbolName("glibresources_kniBridge3932")
private external fun kniBridge3932(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3933")
private external fun kniBridge3933(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3934")
private external fun kniBridge3934(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3935")
private external fun kniBridge3935(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3936")
private external fun kniBridge3936(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3937")
private external fun kniBridge3937(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3938")
private external fun kniBridge3938(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3939")
private external fun kniBridge3939(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3940")
private external fun kniBridge3940(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3941")
private external fun kniBridge3941(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge3942")
private external fun kniBridge3942(): ULong
@SymbolName("glibresources_kniBridge3943")
private external fun kniBridge3943(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3944")
private external fun kniBridge3944(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3945")
private external fun kniBridge3945(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3946")
private external fun kniBridge3946(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3947")
private external fun kniBridge3947(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3948")
private external fun kniBridge3948(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge3949")
private external fun kniBridge3949(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge3950")
private external fun kniBridge3950(): ULong
@SymbolName("glibresources_kniBridge3951")
private external fun kniBridge3951(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3952")
private external fun kniBridge3952(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3953")
private external fun kniBridge3953(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3954")
private external fun kniBridge3954(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3955")
private external fun kniBridge3955(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3956")
private external fun kniBridge3956(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3957")
private external fun kniBridge3957(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3958")
private external fun kniBridge3958(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3959")
private external fun kniBridge3959(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3960")
private external fun kniBridge3960(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3961")
private external fun kniBridge3961(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3962")
private external fun kniBridge3962(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3963")
private external fun kniBridge3963(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3964")
private external fun kniBridge3964(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3965")
private external fun kniBridge3965(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3966")
private external fun kniBridge3966(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3967")
private external fun kniBridge3967(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3968")
private external fun kniBridge3968(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge3969")
private external fun kniBridge3969(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge3970")
private external fun kniBridge3970(): UInt
@SymbolName("glibresources_kniBridge3971")
private external fun kniBridge3971(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("glibresources_kniBridge3972")
private external fun kniBridge3972(): ULong
@SymbolName("glibresources_kniBridge3973")
private external fun kniBridge3973(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3974")
private external fun kniBridge3974(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge3975")
private external fun kniBridge3975(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge3976")
private external fun kniBridge3976(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3977")
private external fun kniBridge3977(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3978")
private external fun kniBridge3978(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge3979")
private external fun kniBridge3979(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge3980")
private external fun kniBridge3980(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3981")
private external fun kniBridge3981(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge3982")
private external fun kniBridge3982(): ULong
@SymbolName("glibresources_kniBridge3983")
private external fun kniBridge3983(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt, p6: NativePtr, p7: NativePtr): UInt
@SymbolName("glibresources_kniBridge3984")
private external fun kniBridge3984(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("glibresources_kniBridge3985")
private external fun kniBridge3985(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge3986")
private external fun kniBridge3986(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3987")
private external fun kniBridge3987(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3988")
private external fun kniBridge3988(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3989")
private external fun kniBridge3989(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3990")
private external fun kniBridge3990(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3991")
private external fun kniBridge3991(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3992")
private external fun kniBridge3992(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3993")
private external fun kniBridge3993(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3994")
private external fun kniBridge3994(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("glibresources_kniBridge3995")
private external fun kniBridge3995(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3996")
private external fun kniBridge3996(): ULong
@SymbolName("glibresources_kniBridge3997")
private external fun kniBridge3997(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge3998")
private external fun kniBridge3998(): ULong
@SymbolName("glibresources_kniBridge3999")
private external fun kniBridge3999(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge4000")
private external fun kniBridge4000(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge4001")
private external fun kniBridge4001(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge4002")
private external fun kniBridge4002(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge4003")
private external fun kniBridge4003(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge4004")
private external fun kniBridge4004(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("glibresources_kniBridge4005")
private external fun kniBridge4005(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge4006")
private external fun kniBridge4006(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("glibresources_kniBridge4007")
private external fun kniBridge4007(): ULong
@SymbolName("glibresources_kniBridge4008")
private external fun kniBridge4008(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4009")
private external fun kniBridge4009(): ULong
@SymbolName("glibresources_kniBridge4010")
private external fun kniBridge4010(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4011")
private external fun kniBridge4011(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4012")
private external fun kniBridge4012(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("glibresources_kniBridge4013")
private external fun kniBridge4013(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4014")
private external fun kniBridge4014(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge4015")
private external fun kniBridge4015(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge4016")
private external fun kniBridge4016(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4017")
private external fun kniBridge4017(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4018")
private external fun kniBridge4018(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4019")
private external fun kniBridge4019(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4020")
private external fun kniBridge4020(): ULong
@SymbolName("glibresources_kniBridge4021")
private external fun kniBridge4021(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4022")
private external fun kniBridge4022(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4023")
private external fun kniBridge4023(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4024")
private external fun kniBridge4024(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4025")
private external fun kniBridge4025(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4026")
private external fun kniBridge4026(): NativePtr
@SymbolName("glibresources_kniBridge4027")
private external fun kniBridge4027(): NativePtr
@SymbolName("glibresources_kniBridge4028")
private external fun kniBridge4028(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Int
@SymbolName("glibresources_kniBridge4029")
private external fun kniBridge4029(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge4030")
private external fun kniBridge4030(): ULong
@SymbolName("glibresources_kniBridge4031")
private external fun kniBridge4031(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4032")
private external fun kniBridge4032(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4033")
private external fun kniBridge4033(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4034")
private external fun kniBridge4034(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4035")
private external fun kniBridge4035(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4036")
private external fun kniBridge4036(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4037")
private external fun kniBridge4037(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4038")
private external fun kniBridge4038(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4039")
private external fun kniBridge4039(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4040")
private external fun kniBridge4040(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge4041")
private external fun kniBridge4041(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge4042")
private external fun kniBridge4042(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("glibresources_kniBridge4043")
private external fun kniBridge4043(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge4044")
private external fun kniBridge4044(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4045")
private external fun kniBridge4045(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4046")
private external fun kniBridge4046(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4047")
private external fun kniBridge4047(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("glibresources_kniBridge4048")
private external fun kniBridge4048(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge4049")
private external fun kniBridge4049(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4050")
private external fun kniBridge4050(): ULong
@SymbolName("glibresources_kniBridge4051")
private external fun kniBridge4051(p0: UInt, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge4052")
private external fun kniBridge4052(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4053")
private external fun kniBridge4053(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4054")
private external fun kniBridge4054(): ULong
@SymbolName("glibresources_kniBridge4055")
private external fun kniBridge4055(p0: UInt): NativePtr
@SymbolName("glibresources_kniBridge4056")
private external fun kniBridge4056(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4057")
private external fun kniBridge4057(): ULong
@SymbolName("glibresources_kniBridge4058")
private external fun kniBridge4058(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4059")
private external fun kniBridge4059(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4060")
private external fun kniBridge4060(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4061")
private external fun kniBridge4061(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4062")
private external fun kniBridge4062(): ULong
@SymbolName("glibresources_kniBridge4063")
private external fun kniBridge4063(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge4064")
private external fun kniBridge4064(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge4065")
private external fun kniBridge4065(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4066")
private external fun kniBridge4066(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4067")
private external fun kniBridge4067(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4068")
private external fun kniBridge4068(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4069")
private external fun kniBridge4069(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("glibresources_kniBridge4070")
private external fun kniBridge4070(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4071")
private external fun kniBridge4071(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4072")
private external fun kniBridge4072(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4073")
private external fun kniBridge4073(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4074")
private external fun kniBridge4074(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge4075")
private external fun kniBridge4075(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4076")
private external fun kniBridge4076(): ULong
@SymbolName("glibresources_kniBridge4077")
private external fun kniBridge4077(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4078")
private external fun kniBridge4078(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4079")
private external fun kniBridge4079(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4080")
private external fun kniBridge4080(): ULong
@SymbolName("glibresources_kniBridge4081")
private external fun kniBridge4081(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4082")
private external fun kniBridge4082(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4083")
private external fun kniBridge4083(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4084")
private external fun kniBridge4084(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4085")
private external fun kniBridge4085(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4086")
private external fun kniBridge4086(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4087")
private external fun kniBridge4087(): ULong
@SymbolName("glibresources_kniBridge4088")
private external fun kniBridge4088(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4089")
private external fun kniBridge4089(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4090")
private external fun kniBridge4090(): ULong
@SymbolName("glibresources_kniBridge4091")
private external fun kniBridge4091(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4092")
private external fun kniBridge4092(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4093")
private external fun kniBridge4093(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4094")
private external fun kniBridge4094(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4095")
private external fun kniBridge4095(): ULong
@SymbolName("glibresources_kniBridge4096")
private external fun kniBridge4096(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr): Unit
@SymbolName("glibresources_kniBridge4097")
private external fun kniBridge4097(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4098")
private external fun kniBridge4098(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4099")
private external fun kniBridge4099(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr): Unit
@SymbolName("glibresources_kniBridge4100")
private external fun kniBridge4100(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4101")
private external fun kniBridge4101(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4102")
private external fun kniBridge4102(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4103")
private external fun kniBridge4103(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge4104")
private external fun kniBridge4104(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4105")
private external fun kniBridge4105(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4106")
private external fun kniBridge4106(): ULong
@SymbolName("glibresources_kniBridge4107")
private external fun kniBridge4107(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4108")
private external fun kniBridge4108(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4109")
private external fun kniBridge4109(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4110")
private external fun kniBridge4110(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4111")
private external fun kniBridge4111(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4112")
private external fun kniBridge4112(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge4113")
private external fun kniBridge4113(p0: NativePtr, p1: NativePtr): Int
@SymbolName("glibresources_kniBridge4114")
private external fun kniBridge4114(): ULong
@SymbolName("glibresources_kniBridge4115")
private external fun kniBridge4115(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4116")
private external fun kniBridge4116(): ULong
@SymbolName("glibresources_kniBridge4117")
private external fun kniBridge4117(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4118")
private external fun kniBridge4118(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4119")
private external fun kniBridge4119(): ULong
@SymbolName("glibresources_kniBridge4120")
private external fun kniBridge4120(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4121")
private external fun kniBridge4121(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4122")
private external fun kniBridge4122(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge4123")
private external fun kniBridge4123(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4124")
private external fun kniBridge4124(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge4125")
private external fun kniBridge4125(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4126")
private external fun kniBridge4126(p0: NativePtr, p1: Int, p2: Int, p3: Int): Unit
@SymbolName("glibresources_kniBridge4127")
private external fun kniBridge4127(): ULong
@SymbolName("glibresources_kniBridge4128")
private external fun kniBridge4128(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge4129")
private external fun kniBridge4129(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4130")
private external fun kniBridge4130(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4131")
private external fun kniBridge4131(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4132")
private external fun kniBridge4132(): ULong
@SymbolName("glibresources_kniBridge4133")
private external fun kniBridge4133(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("glibresources_kniBridge4134")
private external fun kniBridge4134(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4135")
private external fun kniBridge4135(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4136")
private external fun kniBridge4136(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4137")
private external fun kniBridge4137(): ULong
@SymbolName("glibresources_kniBridge4138")
private external fun kniBridge4138(): NativePtr
@SymbolName("glibresources_kniBridge4139")
private external fun kniBridge4139(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4140")
private external fun kniBridge4140(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4141")
private external fun kniBridge4141(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4142")
private external fun kniBridge4142(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4143")
private external fun kniBridge4143(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge4144")
private external fun kniBridge4144(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4145")
private external fun kniBridge4145(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4146")
private external fun kniBridge4146(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4147")
private external fun kniBridge4147(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4148")
private external fun kniBridge4148(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4149")
private external fun kniBridge4149(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4150")
private external fun kniBridge4150(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4151")
private external fun kniBridge4151(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4152")
private external fun kniBridge4152(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4153")
private external fun kniBridge4153(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4154")
private external fun kniBridge4154(): ULong
@SymbolName("glibresources_kniBridge4155")
private external fun kniBridge4155(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4156")
private external fun kniBridge4156(p0: NativePtr, p1: Int): NativePtr
@SymbolName("glibresources_kniBridge4157")
private external fun kniBridge4157(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4158")
private external fun kniBridge4158(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4159")
private external fun kniBridge4159(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4160")
private external fun kniBridge4160(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4161")
private external fun kniBridge4161(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4162")
private external fun kniBridge4162(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4163")
private external fun kniBridge4163(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4164")
private external fun kniBridge4164(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4165")
private external fun kniBridge4165(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4166")
private external fun kniBridge4166(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4167")
private external fun kniBridge4167(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4168")
private external fun kniBridge4168(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4169")
private external fun kniBridge4169(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge4170")
private external fun kniBridge4170(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge4171")
private external fun kniBridge4171(): ULong
@SymbolName("glibresources_kniBridge4172")
private external fun kniBridge4172(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4173")
private external fun kniBridge4173(): ULong
@SymbolName("glibresources_kniBridge4174")
private external fun kniBridge4174(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4175")
private external fun kniBridge4175(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4176")
private external fun kniBridge4176(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4177")
private external fun kniBridge4177(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4178")
private external fun kniBridge4178(p0: NativePtr, p1: Int): Unit
@SymbolName("glibresources_kniBridge4179")
private external fun kniBridge4179(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge4180")
private external fun kniBridge4180(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4181")
private external fun kniBridge4181(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("glibresources_kniBridge4182")
private external fun kniBridge4182(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4183")
private external fun kniBridge4183(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4184")
private external fun kniBridge4184(): ULong
@SymbolName("glibresources_kniBridge4185")
private external fun kniBridge4185(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4186")
private external fun kniBridge4186(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4187")
private external fun kniBridge4187(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4188")
private external fun kniBridge4188(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4189")
private external fun kniBridge4189(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4190")
private external fun kniBridge4190(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4191")
private external fun kniBridge4191(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4192")
private external fun kniBridge4192(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4193")
private external fun kniBridge4193(p0: NativePtr): ULong
@SymbolName("glibresources_kniBridge4194")
private external fun kniBridge4194(p0: NativePtr): UInt
@SymbolName("glibresources_kniBridge4195")
private external fun kniBridge4195(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge4196")
private external fun kniBridge4196(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("glibresources_kniBridge4197")
private external fun kniBridge4197(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt): Unit
@SymbolName("glibresources_kniBridge4198")
private external fun kniBridge4198(): ULong
@SymbolName("glibresources_kniBridge4199")
private external fun kniBridge4199(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4200")
private external fun kniBridge4200(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4201")
private external fun kniBridge4201(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4202")
private external fun kniBridge4202(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4203")
private external fun kniBridge4203(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4204")
private external fun kniBridge4204(p0: NativePtr): NativePtr
@SymbolName("glibresources_kniBridge4205")
private external fun kniBridge4205(p0: NativePtr): Int
@SymbolName("glibresources_kniBridge4206")
private external fun kniBridge4206(p0: ULong): NativePtr
@SymbolName("glibresources_kniBridge4207")
private external fun kniBridge4207(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4208")
private external fun kniBridge4208(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("glibresources_kniBridge4209")
private external fun kniBridge4209(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("glibresources_kniBridge4210")
private external fun kniBridge4210(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("glibresources_kniBridge4211")
private external fun kniBridge4211(p0: NativePtr, p1: UInt): Unit
@SymbolName("glibresources_kniBridge4212")
private external fun kniBridge4212(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4213")
private external fun kniBridge4213(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr, p4: UInt): Unit
@SymbolName("glibresources_kniBridge4214")
private external fun kniBridge4214(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4215")
private external fun kniBridge4215(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4216")
private external fun kniBridge4216(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4217")
private external fun kniBridge4217(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4218")
private external fun kniBridge4218(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4219")
private external fun kniBridge4219(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4220")
private external fun kniBridge4220(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4221")
private external fun kniBridge4221(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4222")
private external fun kniBridge4222(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4223")
private external fun kniBridge4223(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4224")
private external fun kniBridge4224(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4225")
private external fun kniBridge4225(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4226")
private external fun kniBridge4226(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4227")
private external fun kniBridge4227(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4228")
private external fun kniBridge4228(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4229")
private external fun kniBridge4229(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4230")
private external fun kniBridge4230(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4231")
private external fun kniBridge4231(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4232")
private external fun kniBridge4232(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4233")
private external fun kniBridge4233(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4234")
private external fun kniBridge4234(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4235")
private external fun kniBridge4235(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4236")
private external fun kniBridge4236(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4237")
private external fun kniBridge4237(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4238")
private external fun kniBridge4238(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4239")
private external fun kniBridge4239(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4240")
private external fun kniBridge4240(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4241")
private external fun kniBridge4241(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4242")
private external fun kniBridge4242(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4243")
private external fun kniBridge4243(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4244")
private external fun kniBridge4244(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4245")
private external fun kniBridge4245(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4246")
private external fun kniBridge4246(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4247")
private external fun kniBridge4247(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4248")
private external fun kniBridge4248(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4249")
private external fun kniBridge4249(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4250")
private external fun kniBridge4250(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4251")
private external fun kniBridge4251(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4252")
private external fun kniBridge4252(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4253")
private external fun kniBridge4253(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4254")
private external fun kniBridge4254(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4255")
private external fun kniBridge4255(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4256")
private external fun kniBridge4256(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4257")
private external fun kniBridge4257(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4258")
private external fun kniBridge4258(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4259")
private external fun kniBridge4259(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4260")
private external fun kniBridge4260(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4261")
private external fun kniBridge4261(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4262")
private external fun kniBridge4262(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4263")
private external fun kniBridge4263(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4264")
private external fun kniBridge4264(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4265")
private external fun kniBridge4265(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4266")
private external fun kniBridge4266(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4267")
private external fun kniBridge4267(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4268")
private external fun kniBridge4268(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4269")
private external fun kniBridge4269(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4270")
private external fun kniBridge4270(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4271")
private external fun kniBridge4271(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4272")
private external fun kniBridge4272(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4273")
private external fun kniBridge4273(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4274")
private external fun kniBridge4274(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4275")
private external fun kniBridge4275(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4276")
private external fun kniBridge4276(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4277")
private external fun kniBridge4277(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4278")
private external fun kniBridge4278(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4279")
private external fun kniBridge4279(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4280")
private external fun kniBridge4280(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4281")
private external fun kniBridge4281(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4282")
private external fun kniBridge4282(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4283")
private external fun kniBridge4283(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4284")
private external fun kniBridge4284(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4285")
private external fun kniBridge4285(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4286")
private external fun kniBridge4286(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4287")
private external fun kniBridge4287(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4288")
private external fun kniBridge4288(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4289")
private external fun kniBridge4289(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4290")
private external fun kniBridge4290(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4291")
private external fun kniBridge4291(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4292")
private external fun kniBridge4292(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4293")
private external fun kniBridge4293(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4294")
private external fun kniBridge4294(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4295")
private external fun kniBridge4295(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4296")
private external fun kniBridge4296(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4297")
private external fun kniBridge4297(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4298")
private external fun kniBridge4298(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4299")
private external fun kniBridge4299(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4300")
private external fun kniBridge4300(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4301")
private external fun kniBridge4301(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4302")
private external fun kniBridge4302(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4303")
private external fun kniBridge4303(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4304")
private external fun kniBridge4304(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4305")
private external fun kniBridge4305(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4306")
private external fun kniBridge4306(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4307")
private external fun kniBridge4307(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4308")
private external fun kniBridge4308(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4309")
private external fun kniBridge4309(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4310")
private external fun kniBridge4310(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4311")
private external fun kniBridge4311(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4312")
private external fun kniBridge4312(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4313")
private external fun kniBridge4313(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4314")
private external fun kniBridge4314(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4315")
private external fun kniBridge4315(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4316")
private external fun kniBridge4316(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4317")
private external fun kniBridge4317(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4318")
private external fun kniBridge4318(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4319")
private external fun kniBridge4319(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4320")
private external fun kniBridge4320(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4321")
private external fun kniBridge4321(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4322")
private external fun kniBridge4322(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4323")
private external fun kniBridge4323(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4324")
private external fun kniBridge4324(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4325")
private external fun kniBridge4325(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4326")
private external fun kniBridge4326(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4327")
private external fun kniBridge4327(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4328")
private external fun kniBridge4328(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4329")
private external fun kniBridge4329(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4330")
private external fun kniBridge4330(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4331")
private external fun kniBridge4331(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4332")
private external fun kniBridge4332(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4333")
private external fun kniBridge4333(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4334")
private external fun kniBridge4334(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4335")
private external fun kniBridge4335(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4336")
private external fun kniBridge4336(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4337")
private external fun kniBridge4337(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4338")
private external fun kniBridge4338(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4339")
private external fun kniBridge4339(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4340")
private external fun kniBridge4340(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4341")
private external fun kniBridge4341(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4342")
private external fun kniBridge4342(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4343")
private external fun kniBridge4343(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4344")
private external fun kniBridge4344(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4345")
private external fun kniBridge4345(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4346")
private external fun kniBridge4346(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4347")
private external fun kniBridge4347(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4348")
private external fun kniBridge4348(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4349")
private external fun kniBridge4349(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4350")
private external fun kniBridge4350(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4351")
private external fun kniBridge4351(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4352")
private external fun kniBridge4352(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4353")
private external fun kniBridge4353(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4354")
private external fun kniBridge4354(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4355")
private external fun kniBridge4355(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4356")
private external fun kniBridge4356(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4357")
private external fun kniBridge4357(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4358")
private external fun kniBridge4358(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4359")
private external fun kniBridge4359(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4360")
private external fun kniBridge4360(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4361")
private external fun kniBridge4361(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4362")
private external fun kniBridge4362(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4363")
private external fun kniBridge4363(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4364")
private external fun kniBridge4364(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4365")
private external fun kniBridge4365(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4366")
private external fun kniBridge4366(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4367")
private external fun kniBridge4367(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4368")
private external fun kniBridge4368(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4369")
private external fun kniBridge4369(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4370")
private external fun kniBridge4370(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4371")
private external fun kniBridge4371(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4372")
private external fun kniBridge4372(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4373")
private external fun kniBridge4373(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4374")
private external fun kniBridge4374(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4375")
private external fun kniBridge4375(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4376")
private external fun kniBridge4376(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4377")
private external fun kniBridge4377(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4378")
private external fun kniBridge4378(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4379")
private external fun kniBridge4379(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4380")
private external fun kniBridge4380(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4381")
private external fun kniBridge4381(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4382")
private external fun kniBridge4382(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4383")
private external fun kniBridge4383(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4384")
private external fun kniBridge4384(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4385")
private external fun kniBridge4385(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4386")
private external fun kniBridge4386(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4387")
private external fun kniBridge4387(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4388")
private external fun kniBridge4388(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4389")
private external fun kniBridge4389(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4390")
private external fun kniBridge4390(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4391")
private external fun kniBridge4391(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4392")
private external fun kniBridge4392(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4393")
private external fun kniBridge4393(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4394")
private external fun kniBridge4394(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4395")
private external fun kniBridge4395(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4396")
private external fun kniBridge4396(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4397")
private external fun kniBridge4397(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4398")
private external fun kniBridge4398(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4399")
private external fun kniBridge4399(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4400")
private external fun kniBridge4400(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4401")
private external fun kniBridge4401(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4402")
private external fun kniBridge4402(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4403")
private external fun kniBridge4403(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4404")
private external fun kniBridge4404(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4405")
private external fun kniBridge4405(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4406")
private external fun kniBridge4406(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4407")
private external fun kniBridge4407(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4408")
private external fun kniBridge4408(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4409")
private external fun kniBridge4409(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4410")
private external fun kniBridge4410(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4411")
private external fun kniBridge4411(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4412")
private external fun kniBridge4412(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4413")
private external fun kniBridge4413(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4414")
private external fun kniBridge4414(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4415")
private external fun kniBridge4415(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4416")
private external fun kniBridge4416(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4417")
private external fun kniBridge4417(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4418")
private external fun kniBridge4418(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4419")
private external fun kniBridge4419(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4420")
private external fun kniBridge4420(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4421")
private external fun kniBridge4421(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4422")
private external fun kniBridge4422(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4423")
private external fun kniBridge4423(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4424")
private external fun kniBridge4424(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4425")
private external fun kniBridge4425(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4426")
private external fun kniBridge4426(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4427")
private external fun kniBridge4427(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4428")
private external fun kniBridge4428(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4429")
private external fun kniBridge4429(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4430")
private external fun kniBridge4430(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4431")
private external fun kniBridge4431(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4432")
private external fun kniBridge4432(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4433")
private external fun kniBridge4433(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4434")
private external fun kniBridge4434(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4435")
private external fun kniBridge4435(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4436")
private external fun kniBridge4436(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4437")
private external fun kniBridge4437(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4438")
private external fun kniBridge4438(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4439")
private external fun kniBridge4439(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4440")
private external fun kniBridge4440(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4441")
private external fun kniBridge4441(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4442")
private external fun kniBridge4442(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4443")
private external fun kniBridge4443(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4444")
private external fun kniBridge4444(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4445")
private external fun kniBridge4445(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4446")
private external fun kniBridge4446(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4447")
private external fun kniBridge4447(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4448")
private external fun kniBridge4448(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4449")
private external fun kniBridge4449(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4450")
private external fun kniBridge4450(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4451")
private external fun kniBridge4451(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4452")
private external fun kniBridge4452(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4453")
private external fun kniBridge4453(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4454")
private external fun kniBridge4454(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4455")
private external fun kniBridge4455(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4456")
private external fun kniBridge4456(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4457")
private external fun kniBridge4457(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4458")
private external fun kniBridge4458(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4459")
private external fun kniBridge4459(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4460")
private external fun kniBridge4460(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4461")
private external fun kniBridge4461(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4462")
private external fun kniBridge4462(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4463")
private external fun kniBridge4463(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4464")
private external fun kniBridge4464(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4465")
private external fun kniBridge4465(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4466")
private external fun kniBridge4466(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4467")
private external fun kniBridge4467(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4468")
private external fun kniBridge4468(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4469")
private external fun kniBridge4469(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4470")
private external fun kniBridge4470(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4471")
private external fun kniBridge4471(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4472")
private external fun kniBridge4472(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4473")
private external fun kniBridge4473(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4474")
private external fun kniBridge4474(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4475")
private external fun kniBridge4475(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4476")
private external fun kniBridge4476(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4477")
private external fun kniBridge4477(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4478")
private external fun kniBridge4478(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4479")
private external fun kniBridge4479(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4480")
private external fun kniBridge4480(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4481")
private external fun kniBridge4481(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4482")
private external fun kniBridge4482(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4483")
private external fun kniBridge4483(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4484")
private external fun kniBridge4484(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4485")
private external fun kniBridge4485(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4486")
private external fun kniBridge4486(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4487")
private external fun kniBridge4487(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4488")
private external fun kniBridge4488(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4489")
private external fun kniBridge4489(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4490")
private external fun kniBridge4490(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4491")
private external fun kniBridge4491(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4492")
private external fun kniBridge4492(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4493")
private external fun kniBridge4493(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4494")
private external fun kniBridge4494(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4495")
private external fun kniBridge4495(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4496")
private external fun kniBridge4496(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4497")
private external fun kniBridge4497(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4498")
private external fun kniBridge4498(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4499")
private external fun kniBridge4499(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4500")
private external fun kniBridge4500(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4501")
private external fun kniBridge4501(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4502")
private external fun kniBridge4502(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4503")
private external fun kniBridge4503(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4504")
private external fun kniBridge4504(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4505")
private external fun kniBridge4505(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4506")
private external fun kniBridge4506(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4507")
private external fun kniBridge4507(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4508")
private external fun kniBridge4508(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4509")
private external fun kniBridge4509(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4510")
private external fun kniBridge4510(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4511")
private external fun kniBridge4511(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4512")
private external fun kniBridge4512(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4513")
private external fun kniBridge4513(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4514")
private external fun kniBridge4514(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4515")
private external fun kniBridge4515(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4516")
private external fun kniBridge4516(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4517")
private external fun kniBridge4517(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4518")
private external fun kniBridge4518(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4519")
private external fun kniBridge4519(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4520")
private external fun kniBridge4520(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4521")
private external fun kniBridge4521(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4522")
private external fun kniBridge4522(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4523")
private external fun kniBridge4523(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4524")
private external fun kniBridge4524(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4525")
private external fun kniBridge4525(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4526")
private external fun kniBridge4526(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4527")
private external fun kniBridge4527(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4528")
private external fun kniBridge4528(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4529")
private external fun kniBridge4529(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4530")
private external fun kniBridge4530(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4531")
private external fun kniBridge4531(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4532")
private external fun kniBridge4532(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4533")
private external fun kniBridge4533(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4534")
private external fun kniBridge4534(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4535")
private external fun kniBridge4535(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4536")
private external fun kniBridge4536(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4537")
private external fun kniBridge4537(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4538")
private external fun kniBridge4538(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4539")
private external fun kniBridge4539(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4540")
private external fun kniBridge4540(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4541")
private external fun kniBridge4541(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4542")
private external fun kniBridge4542(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4543")
private external fun kniBridge4543(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4544")
private external fun kniBridge4544(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4545")
private external fun kniBridge4545(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4546")
private external fun kniBridge4546(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4547")
private external fun kniBridge4547(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4548")
private external fun kniBridge4548(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4549")
private external fun kniBridge4549(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4550")
private external fun kniBridge4550(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4551")
private external fun kniBridge4551(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4552")
private external fun kniBridge4552(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4553")
private external fun kniBridge4553(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4554")
private external fun kniBridge4554(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4555")
private external fun kniBridge4555(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4556")
private external fun kniBridge4556(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4557")
private external fun kniBridge4557(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4558")
private external fun kniBridge4558(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4559")
private external fun kniBridge4559(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4560")
private external fun kniBridge4560(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4561")
private external fun kniBridge4561(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4562")
private external fun kniBridge4562(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4563")
private external fun kniBridge4563(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4564")
private external fun kniBridge4564(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4565")
private external fun kniBridge4565(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4566")
private external fun kniBridge4566(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4567")
private external fun kniBridge4567(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4568")
private external fun kniBridge4568(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4569")
private external fun kniBridge4569(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4570")
private external fun kniBridge4570(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4571")
private external fun kniBridge4571(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4572")
private external fun kniBridge4572(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4573")
private external fun kniBridge4573(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4574")
private external fun kniBridge4574(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4575")
private external fun kniBridge4575(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4576")
private external fun kniBridge4576(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4577")
private external fun kniBridge4577(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4578")
private external fun kniBridge4578(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4579")
private external fun kniBridge4579(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4580")
private external fun kniBridge4580(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4581")
private external fun kniBridge4581(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4582")
private external fun kniBridge4582(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4583")
private external fun kniBridge4583(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4584")
private external fun kniBridge4584(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4585")
private external fun kniBridge4585(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4586")
private external fun kniBridge4586(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4587")
private external fun kniBridge4587(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4588")
private external fun kniBridge4588(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4589")
private external fun kniBridge4589(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4590")
private external fun kniBridge4590(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4591")
private external fun kniBridge4591(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4592")
private external fun kniBridge4592(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4593")
private external fun kniBridge4593(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4594")
private external fun kniBridge4594(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4595")
private external fun kniBridge4595(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4596")
private external fun kniBridge4596(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4597")
private external fun kniBridge4597(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4598")
private external fun kniBridge4598(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4599")
private external fun kniBridge4599(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4600")
private external fun kniBridge4600(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4601")
private external fun kniBridge4601(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4602")
private external fun kniBridge4602(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4603")
private external fun kniBridge4603(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4604")
private external fun kniBridge4604(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4605")
private external fun kniBridge4605(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4606")
private external fun kniBridge4606(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4607")
private external fun kniBridge4607(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4608")
private external fun kniBridge4608(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4609")
private external fun kniBridge4609(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4610")
private external fun kniBridge4610(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4611")
private external fun kniBridge4611(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4612")
private external fun kniBridge4612(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4613")
private external fun kniBridge4613(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4614")
private external fun kniBridge4614(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4615")
private external fun kniBridge4615(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4616")
private external fun kniBridge4616(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4617")
private external fun kniBridge4617(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4618")
private external fun kniBridge4618(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4619")
private external fun kniBridge4619(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4620")
private external fun kniBridge4620(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4621")
private external fun kniBridge4621(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4622")
private external fun kniBridge4622(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4623")
private external fun kniBridge4623(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4624")
private external fun kniBridge4624(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4625")
private external fun kniBridge4625(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4626")
private external fun kniBridge4626(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4627")
private external fun kniBridge4627(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4628")
private external fun kniBridge4628(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4629")
private external fun kniBridge4629(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4630")
private external fun kniBridge4630(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4631")
private external fun kniBridge4631(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4632")
private external fun kniBridge4632(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4633")
private external fun kniBridge4633(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4634")
private external fun kniBridge4634(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4635")
private external fun kniBridge4635(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4636")
private external fun kniBridge4636(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4637")
private external fun kniBridge4637(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4638")
private external fun kniBridge4638(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4639")
private external fun kniBridge4639(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4640")
private external fun kniBridge4640(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4641")
private external fun kniBridge4641(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4642")
private external fun kniBridge4642(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4643")
private external fun kniBridge4643(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4644")
private external fun kniBridge4644(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4645")
private external fun kniBridge4645(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4646")
private external fun kniBridge4646(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4647")
private external fun kniBridge4647(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4648")
private external fun kniBridge4648(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4649")
private external fun kniBridge4649(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4650")
private external fun kniBridge4650(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4651")
private external fun kniBridge4651(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4652")
private external fun kniBridge4652(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4653")
private external fun kniBridge4653(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4654")
private external fun kniBridge4654(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4655")
private external fun kniBridge4655(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4656")
private external fun kniBridge4656(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4657")
private external fun kniBridge4657(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4658")
private external fun kniBridge4658(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4659")
private external fun kniBridge4659(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4660")
private external fun kniBridge4660(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4661")
private external fun kniBridge4661(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4662")
private external fun kniBridge4662(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4663")
private external fun kniBridge4663(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4664")
private external fun kniBridge4664(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4665")
private external fun kniBridge4665(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4666")
private external fun kniBridge4666(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4667")
private external fun kniBridge4667(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4668")
private external fun kniBridge4668(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4669")
private external fun kniBridge4669(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4670")
private external fun kniBridge4670(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4671")
private external fun kniBridge4671(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4672")
private external fun kniBridge4672(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4673")
private external fun kniBridge4673(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4674")
private external fun kniBridge4674(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4675")
private external fun kniBridge4675(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4676")
private external fun kniBridge4676(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4677")
private external fun kniBridge4677(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4678")
private external fun kniBridge4678(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4679")
private external fun kniBridge4679(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4680")
private external fun kniBridge4680(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4681")
private external fun kniBridge4681(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4682")
private external fun kniBridge4682(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4683")
private external fun kniBridge4683(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4684")
private external fun kniBridge4684(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4685")
private external fun kniBridge4685(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4686")
private external fun kniBridge4686(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4687")
private external fun kniBridge4687(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4688")
private external fun kniBridge4688(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4689")
private external fun kniBridge4689(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4690")
private external fun kniBridge4690(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4691")
private external fun kniBridge4691(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4692")
private external fun kniBridge4692(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4693")
private external fun kniBridge4693(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4694")
private external fun kniBridge4694(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4695")
private external fun kniBridge4695(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4696")
private external fun kniBridge4696(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4697")
private external fun kniBridge4697(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4698")
private external fun kniBridge4698(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4699")
private external fun kniBridge4699(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4700")
private external fun kniBridge4700(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4701")
private external fun kniBridge4701(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4702")
private external fun kniBridge4702(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4703")
private external fun kniBridge4703(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4704")
private external fun kniBridge4704(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4705")
private external fun kniBridge4705(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4706")
private external fun kniBridge4706(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4707")
private external fun kniBridge4707(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4708")
private external fun kniBridge4708(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4709")
private external fun kniBridge4709(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4710")
private external fun kniBridge4710(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4711")
private external fun kniBridge4711(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4712")
private external fun kniBridge4712(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4713")
private external fun kniBridge4713(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4714")
private external fun kniBridge4714(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4715")
private external fun kniBridge4715(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4716")
private external fun kniBridge4716(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4717")
private external fun kniBridge4717(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4718")
private external fun kniBridge4718(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4719")
private external fun kniBridge4719(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4720")
private external fun kniBridge4720(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4721")
private external fun kniBridge4721(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4722")
private external fun kniBridge4722(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4723")
private external fun kniBridge4723(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4724")
private external fun kniBridge4724(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4725")
private external fun kniBridge4725(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4726")
private external fun kniBridge4726(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4727")
private external fun kniBridge4727(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4728")
private external fun kniBridge4728(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4729")
private external fun kniBridge4729(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4730")
private external fun kniBridge4730(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4731")
private external fun kniBridge4731(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4732")
private external fun kniBridge4732(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4733")
private external fun kniBridge4733(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4734")
private external fun kniBridge4734(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4735")
private external fun kniBridge4735(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4736")
private external fun kniBridge4736(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4737")
private external fun kniBridge4737(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4738")
private external fun kniBridge4738(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4739")
private external fun kniBridge4739(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4740")
private external fun kniBridge4740(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4741")
private external fun kniBridge4741(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4742")
private external fun kniBridge4742(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4743")
private external fun kniBridge4743(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4744")
private external fun kniBridge4744(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4745")
private external fun kniBridge4745(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4746")
private external fun kniBridge4746(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4747")
private external fun kniBridge4747(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4748")
private external fun kniBridge4748(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4749")
private external fun kniBridge4749(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4750")
private external fun kniBridge4750(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4751")
private external fun kniBridge4751(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4752")
private external fun kniBridge4752(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4753")
private external fun kniBridge4753(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4754")
private external fun kniBridge4754(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4755")
private external fun kniBridge4755(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4756")
private external fun kniBridge4756(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4757")
private external fun kniBridge4757(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4758")
private external fun kniBridge4758(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4759")
private external fun kniBridge4759(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4760")
private external fun kniBridge4760(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4761")
private external fun kniBridge4761(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4762")
private external fun kniBridge4762(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4763")
private external fun kniBridge4763(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4764")
private external fun kniBridge4764(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4765")
private external fun kniBridge4765(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4766")
private external fun kniBridge4766(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4767")
private external fun kniBridge4767(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4768")
private external fun kniBridge4768(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4769")
private external fun kniBridge4769(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4770")
private external fun kniBridge4770(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4771")
private external fun kniBridge4771(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4772")
private external fun kniBridge4772(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4773")
private external fun kniBridge4773(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4774")
private external fun kniBridge4774(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4775")
private external fun kniBridge4775(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4776")
private external fun kniBridge4776(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4777")
private external fun kniBridge4777(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4778")
private external fun kniBridge4778(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4779")
private external fun kniBridge4779(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4780")
private external fun kniBridge4780(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4781")
private external fun kniBridge4781(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4782")
private external fun kniBridge4782(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4783")
private external fun kniBridge4783(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4784")
private external fun kniBridge4784(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4785")
private external fun kniBridge4785(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4786")
private external fun kniBridge4786(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4787")
private external fun kniBridge4787(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4788")
private external fun kniBridge4788(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4789")
private external fun kniBridge4789(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4790")
private external fun kniBridge4790(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4791")
private external fun kniBridge4791(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4792")
private external fun kniBridge4792(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4793")
private external fun kniBridge4793(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4794")
private external fun kniBridge4794(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4795")
private external fun kniBridge4795(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4796")
private external fun kniBridge4796(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4797")
private external fun kniBridge4797(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4798")
private external fun kniBridge4798(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4799")
private external fun kniBridge4799(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4800")
private external fun kniBridge4800(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4801")
private external fun kniBridge4801(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4802")
private external fun kniBridge4802(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4803")
private external fun kniBridge4803(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4804")
private external fun kniBridge4804(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4805")
private external fun kniBridge4805(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4806")
private external fun kniBridge4806(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4807")
private external fun kniBridge4807(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4808")
private external fun kniBridge4808(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4809")
private external fun kniBridge4809(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4810")
private external fun kniBridge4810(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4811")
private external fun kniBridge4811(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4812")
private external fun kniBridge4812(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4813")
private external fun kniBridge4813(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4814")
private external fun kniBridge4814(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4815")
private external fun kniBridge4815(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4816")
private external fun kniBridge4816(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4817")
private external fun kniBridge4817(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4818")
private external fun kniBridge4818(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4819")
private external fun kniBridge4819(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4820")
private external fun kniBridge4820(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4821")
private external fun kniBridge4821(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4822")
private external fun kniBridge4822(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4823")
private external fun kniBridge4823(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4824")
private external fun kniBridge4824(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4825")
private external fun kniBridge4825(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4826")
private external fun kniBridge4826(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4827")
private external fun kniBridge4827(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4828")
private external fun kniBridge4828(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4829")
private external fun kniBridge4829(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4830")
private external fun kniBridge4830(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4831")
private external fun kniBridge4831(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4832")
private external fun kniBridge4832(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4833")
private external fun kniBridge4833(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4834")
private external fun kniBridge4834(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4835")
private external fun kniBridge4835(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4836")
private external fun kniBridge4836(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4837")
private external fun kniBridge4837(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4838")
private external fun kniBridge4838(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4839")
private external fun kniBridge4839(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4840")
private external fun kniBridge4840(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4841")
private external fun kniBridge4841(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4842")
private external fun kniBridge4842(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4843")
private external fun kniBridge4843(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4844")
private external fun kniBridge4844(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4845")
private external fun kniBridge4845(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4846")
private external fun kniBridge4846(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4847")
private external fun kniBridge4847(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4848")
private external fun kniBridge4848(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4849")
private external fun kniBridge4849(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4850")
private external fun kniBridge4850(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4851")
private external fun kniBridge4851(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4852")
private external fun kniBridge4852(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4853")
private external fun kniBridge4853(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4854")
private external fun kniBridge4854(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4855")
private external fun kniBridge4855(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4856")
private external fun kniBridge4856(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4857")
private external fun kniBridge4857(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4858")
private external fun kniBridge4858(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4859")
private external fun kniBridge4859(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4860")
private external fun kniBridge4860(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4861")
private external fun kniBridge4861(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4862")
private external fun kniBridge4862(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4863")
private external fun kniBridge4863(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4864")
private external fun kniBridge4864(): NativePtr
@SymbolName("glibresources_kniBridge4865")
private external fun kniBridge4865(): Int
@SymbolName("glibresources_kniBridge4866")
private external fun kniBridge4866(p0: Int): Unit
@SymbolName("glibresources_kniBridge4867")
private external fun kniBridge4867(): NativePtr
@SymbolName("glibresources_kniBridge4868")
private external fun kniBridge4868(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4869")
private external fun kniBridge4869(): NativePtr
@SymbolName("glibresources_kniBridge4870")
private external fun kniBridge4870(): NativePtr
@SymbolName("glibresources_kniBridge4871")
private external fun kniBridge4871(): NativePtr
@SymbolName("glibresources_kniBridge4872")
private external fun kniBridge4872(): NativePtr
@SymbolName("glibresources_kniBridge4873")
private external fun kniBridge4873(): NativePtr
@SymbolName("glibresources_kniBridge4874")
private external fun kniBridge4874(): NativePtr
@SymbolName("glibresources_kniBridge4875")
private external fun kniBridge4875(): NativePtr
@SymbolName("glibresources_kniBridge4876")
private external fun kniBridge4876(): NativePtr
@SymbolName("glibresources_kniBridge4877")
private external fun kniBridge4877(): NativePtr
@SymbolName("glibresources_kniBridge4878")
private external fun kniBridge4878(): UInt
@SymbolName("glibresources_kniBridge4879")
private external fun kniBridge4879(): UInt
@SymbolName("glibresources_kniBridge4880")
private external fun kniBridge4880(): UInt
@SymbolName("glibresources_kniBridge4881")
private external fun kniBridge4881(): UInt
@SymbolName("glibresources_kniBridge4882")
private external fun kniBridge4882(): UInt
@SymbolName("glibresources_kniBridge4883")
private external fun kniBridge4883(): NativePtr
@SymbolName("glibresources_kniBridge4884")
private external fun kniBridge4884(): Int
@SymbolName("glibresources_kniBridge4885")
private external fun kniBridge4885(p0: Int): Unit
@SymbolName("glibresources_kniBridge4886")
private external fun kniBridge4886(): NativePtr
@SymbolName("glibresources_kniBridge4887")
private external fun kniBridge4887(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4888")
private external fun kniBridge4888(): Int
@SymbolName("glibresources_kniBridge4889")
private external fun kniBridge4889(p0: Int): Unit
@SymbolName("glibresources_kniBridge4890")
private external fun kniBridge4890(): NativePtr
@SymbolName("glibresources_kniBridge4891")
private external fun kniBridge4891(p0: NativePtr): Unit
@SymbolName("glibresources_kniBridge4892")
private external fun kniBridge4892(): NativePtr
@SymbolName("glibresources_kniBridge4893")
private external fun kniBridge4893(): UInt
@SymbolName("glibresources_kniBridge4894")
private external fun kniBridge4894(): UInt
@SymbolName("glibresources_kniBridge4895")
private external fun kniBridge4895(): UInt
@SymbolName("glibresources_kniBridge4896")
private external fun kniBridge4896(): NativePtr
@SymbolName("glibresources_kniBridge4897")
private external fun kniBridge4897(): NativePtr
@SymbolName("glibresources_kniBridge4898")
private external fun kniBridge4898(): NativePtr
@SymbolName("glibresources_kniBridge4899")
private external fun kniBridge4899(): NativePtr
@SymbolName("glibresources_kniBridge4900")
private external fun kniBridge4900(): NativePtr
@SymbolName("glibresources_kniBridge4901")
private external fun kniBridge4901(): NativePtr
@SymbolName("glibresources_kniBridge4902")
private external fun kniBridge4902(): NativePtr
@SymbolName("glibresources_kniBridge4903")
private external fun kniBridge4903(): NativePtr
@SymbolName("glibresources_kniBridge4904")
private external fun kniBridge4904(): NativePtr
@SymbolName("glibresources_kniBridge4905")
private external fun kniBridge4905(): NativePtr
@SymbolName("glibresources_kniBridge4906")
private external fun kniBridge4906(): NativePtr
@SymbolName("glibresources_kniBridge4907")
private external fun kniBridge4907(): UInt
@SymbolName("glibresources_kniBridge4908")
private external fun kniBridge4908(): NativePtr
@SymbolName("glibresources_kniBridge4909")
private external fun kniBridge4909(): NativePtr
@SymbolName("glibresources_kniBridge4910")
private external fun kniBridge4910(): NativePtr
@SymbolName("glibresources_kniBridge4911")
private external fun kniBridge4911(): NativePtr
@SymbolName("glibresources_kniBridge4912")
private external fun kniBridge4912(): NativePtr
@SymbolName("glibresources_kniBridge4913")
private external fun kniBridge4913(): UInt
@SymbolName("glibresources_kniBridge4914")
private external fun kniBridge4914(): UInt
@SymbolName("glibresources_kniBridge4915")
private external fun kniBridge4915(): UInt
@SymbolName("glibresources_kniBridge4916")
private external fun kniBridge4916(): NativePtr
@SymbolName("glibresources_kniBridge4917")
private external fun kniBridge4917(): NativePtr
@SymbolName("glibresources_kniBridge4918")
private external fun kniBridge4918(): NativePtr
@SymbolName("glibresources_kniBridge4919")
private external fun kniBridge4919(): NativePtr
@SymbolName("glibresources_kniBridge4920")
private external fun kniBridge4920(): NativePtr
@SymbolName("glibresources_kniBridge4921")
private external fun kniBridge4921(): NativePtr
@SymbolName("glibresources_kniBridge4922")
private external fun kniBridge4922(): NativePtr
@SymbolName("glibresources_kniBridge4923")
private external fun kniBridge4923(): NativePtr
@SymbolName("glibresources_kniBridge4924")
private external fun kniBridge4924(): NativePtr
@SymbolName("glibresources_kniBridge4925")
private external fun kniBridge4925(): NativePtr
@SymbolName("glibresources_kniBridge4926")
private external fun kniBridge4926(): NativePtr
@SymbolName("glibresources_kniBridge4927")
private external fun kniBridge4927(): NativePtr
@SymbolName("glibresources_kniBridge4928")
private external fun kniBridge4928(): NativePtr
@SymbolName("glibresources_kniBridge4929")
private external fun kniBridge4929(): NativePtr
@SymbolName("glibresources_kniBridge4930")
private external fun kniBridge4930(): NativePtr
@SymbolName("glibresources_kniBridge4931")
private external fun kniBridge4931(): NativePtr
@SymbolName("glibresources_kniBridge4932")
private external fun kniBridge4932(): NativePtr
@SymbolName("glibresources_kniBridge4933")
private external fun kniBridge4933(): NativePtr
@SymbolName("glibresources_kniBridge4934")
private external fun kniBridge4934(): NativePtr
@SymbolName("glibresources_kniBridge4935")
private external fun kniBridge4935(): NativePtr
@SymbolName("glibresources_kniBridge4936")
private external fun kniBridge4936(): NativePtr
@SymbolName("glibresources_kniBridge4937")
private external fun kniBridge4937(): NativePtr
@SymbolName("glibresources_kniBridge4938")
private external fun kniBridge4938(): NativePtr
@SymbolName("glibresources_kniBridge4939")
private external fun kniBridge4939(): NativePtr
@SymbolName("glibresources_kniBridge4940")
private external fun kniBridge4940(): NativePtr
@SymbolName("glibresources_kniBridge4941")
private external fun kniBridge4941(): NativePtr
@SymbolName("glibresources_kniBridge4942")
private external fun kniBridge4942(): NativePtr
@SymbolName("glibresources_kniBridge4943")
private external fun kniBridge4943(): UInt
@SymbolName("glibresources_kniBridge4944")
private external fun kniBridge4944(): NativePtr
@SymbolName("glibresources_kniBridge4945")
private external fun kniBridge4945(): UInt
@SymbolName("glibresources_kniBridge4946")
private external fun kniBridge4946(): UInt
@SymbolName("glibresources_kniBridge4947")
private external fun kniBridge4947(): UInt
@SymbolName("glibresources_kniBridge4948")
private external fun kniBridge4948(): UInt
@SymbolName("glibresources_kniBridge4949")
private external fun kniBridge4949(): UInt
@SymbolName("glibresources_kniBridge4950")
private external fun kniBridge4950(): UInt
@SymbolName("glibresources_kniBridge4951")
private external fun kniBridge4951(): NativePtr
@SymbolName("glibresources_kniBridge4952")
private external fun kniBridge4952(): NativePtr
@SymbolName("glibresources_kniBridge4953")
private external fun kniBridge4953(): NativePtr
@SymbolName("glibresources_kniBridge4954")
private external fun kniBridge4954(): ULong
@SymbolName("glibresources_kniBridge4955")
private external fun kniBridge4955(): ULong
@SymbolName("glibresources_kniBridge4956")
private external fun kniBridge4956(): ULong
@SymbolName("glibresources_kniBridge4957")
private external fun kniBridge4957(): ULong
@SymbolName("glibresources_kniBridge4958")
private external fun kniBridge4958(): ULong
@SymbolName("glibresources_kniBridge4959")
private external fun kniBridge4959(): ULong
@SymbolName("glibresources_kniBridge4960")
private external fun kniBridge4960(): ULong
@SymbolName("glibresources_kniBridge4961")
private external fun kniBridge4961(): ULong
@SymbolName("glibresources_kniBridge4962")
private external fun kniBridge4962(): ULong
@SymbolName("glibresources_kniBridge4963")
private external fun kniBridge4963(): ULong
@SymbolName("glibresources_kniBridge4964")
private external fun kniBridge4964(): ULong
@SymbolName("glibresources_kniBridge4965")
private external fun kniBridge4965(): ULong
@SymbolName("glibresources_kniBridge4966")
private external fun kniBridge4966(): ULong
@SymbolName("glibresources_kniBridge4967")
private external fun kniBridge4967(): ULong
@SymbolName("glibresources_kniBridge4968")
private external fun kniBridge4968(): ULong
@SymbolName("glibresources_kniBridge4969")
private external fun kniBridge4969(): ULong
@SymbolName("glibresources_kniBridge4970")
private external fun kniBridge4970(): ULong
@SymbolName("glibresources_kniBridge4971")
private external fun kniBridge4971(): ULong
@SymbolName("glibresources_kniBridge4972")
private external fun kniBridge4972(): ULong
@SymbolName("glibresources_kniBridge4973")
private external fun kniBridge4973(): ULong
@SymbolName("glibresources_kniBridge4974")
private external fun kniBridge4974(): ULong
@SymbolName("glibresources_kniBridge4975")
private external fun kniBridge4975(): ULong
@SymbolName("glibresources_kniBridge4976")
private external fun kniBridge4976(): ULong
@SymbolName("glibresources_kniBridge4977")
private external fun kniBridge4977(): ULong
@SymbolName("glibresources_kniBridge4978")
private external fun kniBridge4978(): ULong
@SymbolName("glibresources_kniBridge4979")
private external fun kniBridge4979(): ULong
@SymbolName("glibresources_kniBridge4980")
private external fun kniBridge4980(): ULong
@SymbolName("glibresources_kniBridge4981")
private external fun kniBridge4981(): ULong
@SymbolName("glibresources_kniBridge4982")
private external fun kniBridge4982(): ULong
@SymbolName("glibresources_kniBridge4983")
private external fun kniBridge4983(): ULong
@SymbolName("glibresources_kniBridge4984")
private external fun kniBridge4984(): ULong
@SymbolName("glibresources_kniBridge4985")
private external fun kniBridge4985(): ULong
@SymbolName("glibresources_kniBridge4986")
private external fun kniBridge4986(): ULong
@SymbolName("glibresources_kniBridge4987")
private external fun kniBridge4987(): ULong
@SymbolName("glibresources_kniBridge4988")
private external fun kniBridge4988(): ULong
@SymbolName("glibresources_kniBridge4989")
private external fun kniBridge4989(): ULong
@SymbolName("glibresources_kniBridge4990")
private external fun kniBridge4990(): ULong
@SymbolName("glibresources_kniBridge4991")
private external fun kniBridge4991(): ULong
@SymbolName("glibresources_kniBridge4992")
private external fun kniBridge4992(): ULong
@SymbolName("glibresources_kniBridge4993")
private external fun kniBridge4993(): ULong
@SymbolName("glibresources_kniBridge4994")
private external fun kniBridge4994(): ULong
@SymbolName("glibresources_kniBridge4995")
private external fun kniBridge4995(): ULong
@SymbolName("glibresources_kniBridge4996")
private external fun kniBridge4996(): ULong
@SymbolName("glibresources_kniBridge4997")
private external fun kniBridge4997(): ULong
@SymbolName("glibresources_kniBridge4998")
private external fun kniBridge4998(): ULong
@SymbolName("glibresources_kniBridge4999")
private external fun kniBridge4999(): ULong
@SymbolName("glibresources_kniBridge5000")
private external fun kniBridge5000(): ULong
@SymbolName("glibresources_kniBridge5001")
private external fun kniBridge5001(): ULong
@SymbolName("glibresources_kniBridge5002")
private external fun kniBridge5002(): ULong
@SymbolName("glibresources_kniBridge5003")
private external fun kniBridge5003(): ULong
@SymbolName("glibresources_kniBridge5004")
private external fun kniBridge5004(): ULong
@SymbolName("glibresources_kniBridge5005")
private external fun kniBridge5005(): ULong
@SymbolName("glibresources_kniBridge5006")
private external fun kniBridge5006(): ULong
@SymbolName("glibresources_kniBridge5007")
private external fun kniBridge5007(): ULong
@SymbolName("glibresources_kniBridge5008")
private external fun kniBridge5008(): ULong
@SymbolName("glibresources_kniBridge5009")
private external fun kniBridge5009(): ULong
@SymbolName("glibresources_kniBridge5010")
private external fun kniBridge5010(): ULong
@SymbolName("glibresources_kniBridge5011")
private external fun kniBridge5011(): ULong
@SymbolName("glibresources_kniBridge5012")
private external fun kniBridge5012(): ULong
@SymbolName("glibresources_kniBridge5013")
private external fun kniBridge5013(): ULong
@SymbolName("glibresources_kniBridge5014")
private external fun kniBridge5014(): ULong
@SymbolName("glibresources_kniBridge5015")
private external fun kniBridge5015(): ULong
@SymbolName("glibresources_kniBridge5016")
private external fun kniBridge5016(): ULong
@SymbolName("glibresources_kniBridge5017")
private external fun kniBridge5017(): ULong
@SymbolName("glibresources_kniBridge5018")
private external fun kniBridge5018(): ULong
@SymbolName("glibresources_kniBridge5019")
private external fun kniBridge5019(): ULong
@SymbolName("glibresources_kniBridge5020")
private external fun kniBridge5020(): ULong
@SymbolName("glibresources_kniBridge5021")
private external fun kniBridge5021(): ULong
@SymbolName("glibresources_kniBridge5022")
private external fun kniBridge5022(): ULong
@SymbolName("glibresources_kniBridge5023")
private external fun kniBridge5023(): ULong
@SymbolName("glibresources_kniBridge5024")
private external fun kniBridge5024(): ULong
@SymbolName("glibresources_kniBridge5025")
private external fun kniBridge5025(): ULong
@SymbolName("glibresources_kniBridge5026")
private external fun kniBridge5026(): ULong
@SymbolName("glibresources_kniBridge5027")
private external fun kniBridge5027(): ULong
@SymbolName("glibresources_kniBridge5028")
private external fun kniBridge5028(): ULong
@SymbolName("glibresources_kniBridge5029")
private external fun kniBridge5029(): ULong
@SymbolName("glibresources_kniBridge5030")
private external fun kniBridge5030(): ULong
@SymbolName("glibresources_kniBridge5031")
private external fun kniBridge5031(): ULong
@SymbolName("glibresources_kniBridge5032")
private external fun kniBridge5032(): ULong
@SymbolName("glibresources_kniBridge5033")
private external fun kniBridge5033(): ULong
@SymbolName("glibresources_kniBridge5034")
private external fun kniBridge5034(): ULong
@SymbolName("glibresources_kniBridge5035")
private external fun kniBridge5035(): ULong
@SymbolName("glibresources_kniBridge5036")
private external fun kniBridge5036(): ULong
@SymbolName("glibresources_kniBridge5037")
private external fun kniBridge5037(): ULong
@SymbolName("glibresources_kniBridge5038")
private external fun kniBridge5038(): ULong
@SymbolName("glibresources_kniBridge5039")
private external fun kniBridge5039(): ULong
@SymbolName("glibresources_kniBridge5040")
private external fun kniBridge5040(): ULong
@SymbolName("glibresources_kniBridge5041")
private external fun kniBridge5041(): ULong
@SymbolName("glibresources_kniBridge5042")
private external fun kniBridge5042(): ULong
@SymbolName("glibresources_kniBridge5043")
private external fun kniBridge5043(): ULong
@SymbolName("glibresources_kniBridge5044")
private external fun kniBridge5044(): ULong
@SymbolName("glibresources_kniBridge5045")
private external fun kniBridge5045(): ULong
@SymbolName("glibresources_kniBridge5046")
private external fun kniBridge5046(): ULong
@SymbolName("glibresources_kniBridge5047")
private external fun kniBridge5047(): UInt
@SymbolName("glibresources_kniBridge5048")
private external fun kniBridge5048(): ULong
@SymbolName("glibresources_kniBridge5049")
private external fun kniBridge5049(): ULong
@SymbolName("glibresources_kniBridge5050")
private external fun kniBridge5050(): ULong
@SymbolName("glibresources_kniBridge5051")
private external fun kniBridge5051(): ULong
@SymbolName("glibresources_kniBridge5052")
private external fun kniBridge5052(): ULong
@SymbolName("glibresources_kniBridge5053")
private external fun kniBridge5053(): ULong
@SymbolName("glibresources_kniBridge5054")
private external fun kniBridge5054(): ULong
@SymbolName("glibresources_kniBridge5055")
private external fun kniBridge5055(): ULong
@SymbolName("glibresources_kniBridge5056")
private external fun kniBridge5056(): ULong
@SymbolName("glibresources_kniBridge5057")
private external fun kniBridge5057(): ULong
@SymbolName("glibresources_kniBridge5058")
private external fun kniBridge5058(): ULong
@SymbolName("glibresources_kniBridge5059")
private external fun kniBridge5059(): ULong
@SymbolName("glibresources_kniBridge5060")
private external fun kniBridge5060(): ULong
@SymbolName("glibresources_kniBridge5061")
private external fun kniBridge5061(): ULong
@SymbolName("glibresources_kniBridge5062")
private external fun kniBridge5062(): ULong
@SymbolName("glibresources_kniBridge5063")
private external fun kniBridge5063(): ULong
@SymbolName("glibresources_kniBridge5064")
private external fun kniBridge5064(): ULong
@SymbolName("glibresources_kniBridge5065")
private external fun kniBridge5065(): ULong
@SymbolName("glibresources_kniBridge5066")
private external fun kniBridge5066(): ULong
@SymbolName("glibresources_kniBridge5067")
private external fun kniBridge5067(): ULong
@SymbolName("glibresources_kniBridge5068")
private external fun kniBridge5068(): ULong
@SymbolName("glibresources_kniBridge5069")
private external fun kniBridge5069(): ULong
@SymbolName("glibresources_kniBridge5070")
private external fun kniBridge5070(): ULong
@SymbolName("glibresources_kniBridge5071")
private external fun kniBridge5071(): ULong
@SymbolName("glibresources_kniBridge5072")
private external fun kniBridge5072(): ULong
@SymbolName("glibresources_kniBridge5073")
private external fun kniBridge5073(): UInt
@SymbolName("glibresources_kniBridge5074")
private external fun kniBridge5074(): ULong
@SymbolName("glibresources_kniBridge5075")
private external fun kniBridge5075(): ULong
@SymbolName("glibresources_kniBridge5076")
private external fun kniBridge5076(): ULong
@SymbolName("glibresources_kniBridge5077")
private external fun kniBridge5077(): ULong
@SymbolName("glibresources_kniBridge5078")
private external fun kniBridge5078(): ULong
@SymbolName("glibresources_kniBridge5079")
private external fun kniBridge5079(): ULong
@SymbolName("glibresources_kniBridge5080")
private external fun kniBridge5080(): ULong
@SymbolName("glibresources_kniBridge5081")
private external fun kniBridge5081(): ULong
@SymbolName("glibresources_kniBridge5082")
private external fun kniBridge5082(): ULong
@SymbolName("glibresources_kniBridge5083")
private external fun kniBridge5083(): ULong
@SymbolName("glibresources_kniBridge5084")
private external fun kniBridge5084(): ULong
@SymbolName("glibresources_kniBridge5085")
private external fun kniBridge5085(): ULong
@SymbolName("glibresources_kniBridge5086")
private external fun kniBridge5086(): ULong
@SymbolName("glibresources_kniBridge5087")
private external fun kniBridge5087(): ULong
@SymbolName("glibresources_kniBridge5088")
private external fun kniBridge5088(): ULong
@SymbolName("glibresources_kniBridge5089")
private external fun kniBridge5089(): ULong
@SymbolName("glibresources_kniBridge5090")
private external fun kniBridge5090(): ULong
@SymbolName("glibresources_kniBridge5091")
private external fun kniBridge5091(): ULong
@SymbolName("glibresources_kniBridge5092")
private external fun kniBridge5092(): ULong
@SymbolName("glibresources_kniBridge5093")
private external fun kniBridge5093(): ULong
@SymbolName("glibresources_kniBridge5094")
private external fun kniBridge5094(): ULong
@SymbolName("glibresources_kniBridge5095")
private external fun kniBridge5095(): ULong
@SymbolName("glibresources_kniBridge5096")
private external fun kniBridge5096(): ULong
@SymbolName("glibresources_kniBridge5097")
private external fun kniBridge5097(): ULong
@SymbolName("glibresources_kniBridge5098")
private external fun kniBridge5098(): ULong
@SymbolName("glibresources_kniBridge5099")
private external fun kniBridge5099(): ULong
@SymbolName("glibresources_kniBridge5100")
private external fun kniBridge5100(): ULong
@SymbolName("glibresources_kniBridge5101")
private external fun kniBridge5101(): ULong
@SymbolName("glibresources_kniBridge5102")
private external fun kniBridge5102(): ULong
@SymbolName("glibresources_kniBridge5103")
private external fun kniBridge5103(): ULong
@SymbolName("glibresources_kniBridge5104")
private external fun kniBridge5104(): ULong
@SymbolName("glibresources_kniBridge5105")
private external fun kniBridge5105(): ULong
@SymbolName("glibresources_kniBridge5106")
private external fun kniBridge5106(): ULong
@SymbolName("glibresources_kniBridge5107")
private external fun kniBridge5107(): ULong
@SymbolName("glibresources_kniBridge5108")
private external fun kniBridge5108(): ULong
@SymbolName("glibresources_kniBridge5109")
private external fun kniBridge5109(): ULong
@SymbolName("glibresources_kniBridge5110")
private external fun kniBridge5110(): ULong
@SymbolName("glibresources_kniBridge5111")
private external fun kniBridge5111(): ULong
@SymbolName("glibresources_kniBridge5112")
private external fun kniBridge5112(): ULong
@SymbolName("glibresources_kniBridge5113")
private external fun kniBridge5113(): ULong
@SymbolName("glibresources_kniBridge5114")
private external fun kniBridge5114(): ULong
@SymbolName("glibresources_kniBridge5115")
private external fun kniBridge5115(): ULong
@SymbolName("glibresources_kniBridge5116")
private external fun kniBridge5116(): ULong
@SymbolName("glibresources_kniBridge5117")
private external fun kniBridge5117(): ULong
@SymbolName("glibresources_kniBridge5118")
private external fun kniBridge5118(): ULong
@SymbolName("glibresources_kniBridge5119")
private external fun kniBridge5119(): ULong
@SymbolName("glibresources_kniBridge5120")
private external fun kniBridge5120(): ULong
@SymbolName("glibresources_kniBridge5121")
private external fun kniBridge5121(): ULong
@SymbolName("glibresources_kniBridge5122")
private external fun kniBridge5122(): ULong
@SymbolName("glibresources_kniBridge5123")
private external fun kniBridge5123(): ULong
@SymbolName("glibresources_kniBridge5124")
private external fun kniBridge5124(): ULong
@SymbolName("glibresources_kniBridge5125")
private external fun kniBridge5125(): ULong
@SymbolName("glibresources_kniBridge5126")
private external fun kniBridge5126(): ULong
@SymbolName("glibresources_kniBridge5127")
private external fun kniBridge5127(): ULong
@SymbolName("glibresources_kniBridge5128")
private external fun kniBridge5128(): ULong
@SymbolName("glibresources_kniBridge5129")
private external fun kniBridge5129(): ULong
@SymbolName("glibresources_kniBridge5130")
private external fun kniBridge5130(): ULong
@SymbolName("glibresources_kniBridge5131")
private external fun kniBridge5131(): ULong
@SymbolName("glibresources_kniBridge5132")
private external fun kniBridge5132(): ULong
@SymbolName("glibresources_kniBridge5133")
private external fun kniBridge5133(): ULong
@SymbolName("glibresources_kniBridge5134")
private external fun kniBridge5134(): ULong
@SymbolName("glibresources_kniBridge5135")
private external fun kniBridge5135(): ULong
@SymbolName("glibresources_kniBridge5136")
private external fun kniBridge5136(): ULong
@SymbolName("glibresources_kniBridge5137")
private external fun kniBridge5137(): ULong
@SymbolName("glibresources_kniBridge5138")
private external fun kniBridge5138(): ULong
@SymbolName("glibresources_kniBridge5139")
private external fun kniBridge5139(): ULong
@SymbolName("glibresources_kniBridge5140")
private external fun kniBridge5140(): ULong
@SymbolName("glibresources_kniBridge5141")
private external fun kniBridge5141(): ULong
@SymbolName("glibresources_kniBridge5142")
private external fun kniBridge5142(): ULong
@SymbolName("glibresources_kniBridge5143")
private external fun kniBridge5143(): ULong
@SymbolName("glibresources_kniBridge5144")
private external fun kniBridge5144(): ULong
@SymbolName("glibresources_kniBridge5145")
private external fun kniBridge5145(): ULong
@SymbolName("glibresources_kniBridge5146")
private external fun kniBridge5146(): ULong
@SymbolName("glibresources_kniBridge5147")
private external fun kniBridge5147(): ULong
@SymbolName("glibresources_kniBridge5148")
private external fun kniBridge5148(): ULong
@SymbolName("glibresources_kniBridge5149")
private external fun kniBridge5149(): ULong
@SymbolName("glibresources_kniBridge5150")
private external fun kniBridge5150(): ULong
@SymbolName("glibresources_kniBridge5151")
private external fun kniBridge5151(): ULong
@SymbolName("glibresources_kniBridge5152")
private external fun kniBridge5152(): ULong
@SymbolName("glibresources_kniBridge5153")
private external fun kniBridge5153(): ULong
@SymbolName("glibresources_kniBridge5154")
private external fun kniBridge5154(): ULong
@SymbolName("glibresources_kniBridge5155")
private external fun kniBridge5155(): ULong
@SymbolName("glibresources_kniBridge5156")
private external fun kniBridge5156(): ULong
@SymbolName("glibresources_kniBridge5157")
private external fun kniBridge5157(): ULong
@SymbolName("glibresources_kniBridge5158")
private external fun kniBridge5158(): ULong
@SymbolName("glibresources_kniBridge5159")
private external fun kniBridge5159(): ULong
@SymbolName("glibresources_kniBridge5160")
private external fun kniBridge5160(): ULong
@SymbolName("glibresources_kniBridge5161")
private external fun kniBridge5161(): ULong
@SymbolName("glibresources_kniBridge5162")
private external fun kniBridge5162(): ULong
@SymbolName("glibresources_kniBridge5163")
private external fun kniBridge5163(): ULong
@SymbolName("glibresources_kniBridge5164")
private external fun kniBridge5164(): ULong
@SymbolName("glibresources_kniBridge5165")
private external fun kniBridge5165(): ULong
@SymbolName("glibresources_kniBridge5166")
private external fun kniBridge5166(): ULong
@SymbolName("glibresources_kniBridge5167")
private external fun kniBridge5167(): ULong
@SymbolName("glibresources_kniBridge5168")
private external fun kniBridge5168(): ULong
@SymbolName("glibresources_kniBridge5169")
private external fun kniBridge5169(): ULong
@SymbolName("glibresources_kniBridge5170")
private external fun kniBridge5170(): ULong
@SymbolName("glibresources_kniBridge5171")
private external fun kniBridge5171(): ULong
@SymbolName("glibresources_kniBridge5172")
private external fun kniBridge5172(): ULong
@SymbolName("glibresources_kniBridge5173")
private external fun kniBridge5173(): ULong
@SymbolName("glibresources_kniBridge5174")
private external fun kniBridge5174(): ULong
@SymbolName("glibresources_kniBridge5175")
private external fun kniBridge5175(): ULong
@SymbolName("glibresources_kniBridge5176")
private external fun kniBridge5176(): ULong
@SymbolName("glibresources_kniBridge5177")
private external fun kniBridge5177(): ULong
@SymbolName("glibresources_kniBridge5178")
private external fun kniBridge5178(): ULong
@SymbolName("glibresources_kniBridge5179")
private external fun kniBridge5179(): ULong
@SymbolName("glibresources_kniBridge5180")
private external fun kniBridge5180(): ULong
@SymbolName("glibresources_kniBridge5181")
private external fun kniBridge5181(): ULong
@SymbolName("glibresources_kniBridge5182")
private external fun kniBridge5182(): ULong
@SymbolName("glibresources_kniBridge5183")
private external fun kniBridge5183(): UInt
@SymbolName("glibresources_kniBridge5184")
private external fun kniBridge5184(): ULong
@SymbolName("glibresources_kniBridge5185")
private external fun kniBridge5185(): UInt
@SymbolName("glibresources_kniBridge5186")
private external fun kniBridge5186(): ULong
@SymbolName("glibresources_kniBridge5187")
private external fun kniBridge5187(): ULong
@SymbolName("glibresources_kniBridge5188")
private external fun kniBridge5188(): ULong
@SymbolName("glibresources_kniBridge5189")
private external fun kniBridge5189(): ULong
@SymbolName("glibresources_kniBridge5190")
private external fun kniBridge5190(): ULong
@SymbolName("glibresources_kniBridge5191")
private external fun kniBridge5191(): ULong
@SymbolName("glibresources_kniBridge5192")
private external fun kniBridge5192(): ULong
@SymbolName("glibresources_kniBridge5193")
private external fun kniBridge5193(): ULong
@SymbolName("glibresources_kniBridge5194")
private external fun kniBridge5194(): ULong
@SymbolName("glibresources_kniBridge5195")
private external fun kniBridge5195(): ULong
@SymbolName("glibresources_kniBridge5196")
private external fun kniBridge5196(): ULong
@SymbolName("glibresources_kniBridge5197")
private external fun kniBridge5197(): ULong
@SymbolName("glibresources_kniBridge5198")
private external fun kniBridge5198(): ULong
@SymbolName("glibresources_kniBridge5199")
private external fun kniBridge5199(): ULong
@SymbolName("glibresources_kniBridge5200")
private external fun kniBridge5200(): ULong
@SymbolName("glibresources_kniBridge5201")
private external fun kniBridge5201(): ULong
@SymbolName("glibresources_kniBridge5202")
private external fun kniBridge5202(): ULong
@SymbolName("glibresources_kniBridge5203")
private external fun kniBridge5203(): ULong
@SymbolName("glibresources_kniBridge5204")
private external fun kniBridge5204(): ULong
@SymbolName("glibresources_kniBridge5205")
private external fun kniBridge5205(): ULong
@SymbolName("glibresources_kniBridge5206")
private external fun kniBridge5206(): ULong
@SymbolName("glibresources_kniBridge5207")
private external fun kniBridge5207(): ULong
@SymbolName("glibresources_kniBridge5208")
private external fun kniBridge5208(): ULong
@SymbolName("glibresources_kniBridge5209")
private external fun kniBridge5209(): ULong
@SymbolName("glibresources_kniBridge5210")
private external fun kniBridge5210(): ULong
@SymbolName("glibresources_kniBridge5211")
private external fun kniBridge5211(): ULong
@SymbolName("glibresources_kniBridge5212")
private external fun kniBridge5212(): ULong
@SymbolName("glibresources_kniBridge5213")
private external fun kniBridge5213(): ULong
@SymbolName("glibresources_kniBridge5214")
private external fun kniBridge5214(): ULong
@SymbolName("glibresources_kniBridge5215")
private external fun kniBridge5215(): ULong
@SymbolName("glibresources_kniBridge5216")
private external fun kniBridge5216(): UInt
@SymbolName("glibresources_kniBridge5217")
private external fun kniBridge5217(): ULong
@SymbolName("glibresources_kniBridge5218")
private external fun kniBridge5218(): ULong
@SymbolName("glibresources_kniBridge5219")
private external fun kniBridge5219(): ULong
@SymbolName("glibresources_kniBridge5220")
private external fun kniBridge5220(): ULong
@SymbolName("glibresources_kniBridge5221")
private external fun kniBridge5221(): ULong
@SymbolName("glibresources_kniBridge5222")
private external fun kniBridge5222(): ULong
@SymbolName("glibresources_kniBridge5223")
private external fun kniBridge5223(): ULong
@SymbolName("glibresources_kniBridge5224")
private external fun kniBridge5224(): ULong
@SymbolName("glibresources_kniBridge5225")
private external fun kniBridge5225(): ULong
@SymbolName("glibresources_kniBridge5226")
private external fun kniBridge5226(): ULong
@SymbolName("glibresources_kniBridge5227")
private external fun kniBridge5227(): ULong
@SymbolName("glibresources_kniBridge5228")
private external fun kniBridge5228(): ULong
@SymbolName("glibresources_kniBridge5229")
private external fun kniBridge5229(): ULong
@SymbolName("glibresources_kniBridge5230")
private external fun kniBridge5230(): ULong
@SymbolName("glibresources_kniBridge5231")
private external fun kniBridge5231(): ULong
@SymbolName("glibresources_kniBridge5232")
private external fun kniBridge5232(): ULong
@SymbolName("glibresources_kniBridge5233")
private external fun kniBridge5233(): ULong
@SymbolName("glibresources_kniBridge5234")
private external fun kniBridge5234(): ULong
@SymbolName("glibresources_kniBridge5235")
private external fun kniBridge5235(): ULong
@SymbolName("glibresources_kniBridge5236")
private external fun kniBridge5236(): ULong
@SymbolName("glibresources_kniBridge5237")
private external fun kniBridge5237(): ULong
@SymbolName("glibresources_kniBridge5238")
private external fun kniBridge5238(): ULong
@SymbolName("glibresources_kniBridge5239")
private external fun kniBridge5239(): ULong
@SymbolName("glibresources_kniBridge5240")
private external fun kniBridge5240(): ULong
@SymbolName("glibresources_kniBridge5241")
private external fun kniBridge5241(): ULong
@SymbolName("glibresources_kniBridge5242")
private external fun kniBridge5242(): ULong
@SymbolName("glibresources_kniBridge5243")
private external fun kniBridge5243(): ULong
@SymbolName("glibresources_kniBridge5244")
private external fun kniBridge5244(): ULong
@SymbolName("glibresources_kniBridge5245")
private external fun kniBridge5245(): ULong
