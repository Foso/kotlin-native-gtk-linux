@file:kotlinx.cinterop.InteropStubs
@file:Suppress("UNUSED_VARIABLE", "UNUSED_EXPRESSION")
package libgtk3

import kotlin.native.SymbolName
import kotlinx.cinterop.internal.*
import kotlinx.cinterop.*
import cnames.structs._GAction
import cnames.structs._GActionGroup
import cnames.structs._GActionMap
import cnames.structs._GAppInfo
import cnames.structs._GAppInfoMonitor
import cnames.structs._GAppLaunchContextPrivate
import cnames.structs._GApplicationCommandLinePrivate
import cnames.structs._GApplicationPrivate
import cnames.structs._GAsyncInitable
import cnames.structs._GAsyncResult
import cnames.structs._GBinding
import cnames.structs._GBufferedInputStreamPrivate
import cnames.structs._GBufferedOutputStreamPrivate
import cnames.structs._GBytes
import cnames.structs._GBytesIcon
import cnames.structs._GCancellablePrivate
import cnames.structs._GCharsetConverter
import cnames.structs._GConverter
import cnames.structs._GConverterInputStreamPrivate
import cnames.structs._GConverterOutputStreamPrivate
import cnames.structs._GCredentials
import cnames.structs._GCredentialsClass
import cnames.structs._GDBusActionGroup
import cnames.structs._GDBusAuthObserver
import cnames.structs._GDBusConnection
import cnames.structs._GDBusInterface
import cnames.structs._GDBusInterfaceSkeletonPrivate
import cnames.structs._GDBusMenuModel
import cnames.structs._GDBusMessage
import cnames.structs._GDBusMethodInvocation
import cnames.structs._GDBusObject
import cnames.structs._GDBusObjectManager
import cnames.structs._GDBusObjectManagerClientPrivate
import cnames.structs._GDBusObjectManagerServerPrivate
import cnames.structs._GDBusObjectProxyPrivate
import cnames.structs._GDBusObjectSkeletonPrivate
import cnames.structs._GDBusProxyPrivate
import cnames.structs._GDBusServer
import cnames.structs._GData
import cnames.structs._GDataInputStreamPrivate
import cnames.structs._GDataOutputStreamPrivate
import cnames.structs._GDatagramBased
import cnames.structs._GDateTime
import cnames.structs._GDrive
import cnames.structs._GDtlsClientConnection
import cnames.structs._GDtlsConnection
import cnames.structs._GDtlsServerConnection
import cnames.structs._GEmblem
import cnames.structs._GEmblemClass
import cnames.structs._GEmblemedIconPrivate
import cnames.structs._GFile
import cnames.structs._GFileAttributeMatcher
import cnames.structs._GFileDescriptorBased
import cnames.structs._GFileEnumeratorPrivate
import cnames.structs._GFileIOStreamPrivate
import cnames.structs._GFileIcon
import cnames.structs._GFileIconClass
import cnames.structs._GFileInfo
import cnames.structs._GFileInfoClass
import cnames.structs._GFileInputStreamPrivate
import cnames.structs._GFileMonitorPrivate
import cnames.structs._GFileOutputStreamPrivate
import cnames.structs._GFilenameCompleter
import cnames.structs._GHashTable
import cnames.structs._GIOExtension
import cnames.structs._GIOExtensionPoint
import cnames.structs._GIOModule
import cnames.structs._GIOModuleClass
import cnames.structs._GIOModuleScope
import cnames.structs._GIOSchedulerJob
import cnames.structs._GIOStreamAdapter
import cnames.structs._GIOStreamPrivate
import cnames.structs._GIcon
import cnames.structs._GInetAddressMaskPrivate
import cnames.structs._GInetAddressPrivate
import cnames.structs._GInetSocketAddressPrivate
import cnames.structs._GInitable
import cnames.structs._GInputStreamPrivate
import cnames.structs._GKeyFile
import cnames.structs._GListModel
import cnames.structs._GListStore
import cnames.structs._GLoadableIcon
import cnames.structs._GMainContext
import cnames.structs._GMarkupParseContext
import cnames.structs._GMemoryInputStreamPrivate
import cnames.structs._GMemoryOutputStreamPrivate
import cnames.structs._GMenu
import cnames.structs._GMenuAttributeIterPrivate
import cnames.structs._GMenuItem
import cnames.structs._GMenuLinkIterPrivate
import cnames.structs._GMenuModelPrivate
import cnames.structs._GMount
import cnames.structs._GMountOperationPrivate
import cnames.structs._GNativeSocketAddressPrivate
import cnames.structs._GNetworkAddressPrivate
import cnames.structs._GNetworkMonitor
import cnames.structs._GNetworkServicePrivate
import cnames.structs._GNotification
import cnames.structs._GOptionGroup
import cnames.structs._GOutputStreamPrivate
import cnames.structs._GParamSpecPool
import cnames.structs._GPermissionPrivate
import cnames.structs._GPollableInputStream
import cnames.structs._GPollableOutputStream
import cnames.structs._GPropertyAction
import cnames.structs._GProxy
import cnames.structs._GProxyAddressEnumeratorPrivate
import cnames.structs._GProxyAddressPrivate
import cnames.structs._GProxyResolver
import cnames.structs._GRemoteActionGroup
import cnames.structs._GResolverPrivate
import cnames.structs._GResource
import cnames.structs._GSeekable
import cnames.structs._GSettingsBackend
import cnames.structs._GSettingsPrivate
import cnames.structs._GSettingsSchema
import cnames.structs._GSettingsSchemaKey
import cnames.structs._GSettingsSchemaSource
import cnames.structs._GSimpleAction
import cnames.structs._GSimpleActionGroupPrivate
import cnames.structs._GSimpleAsyncResult
import cnames.structs._GSimpleAsyncResultClass
import cnames.structs._GSimpleIOStream
import cnames.structs._GSimplePermission
import cnames.structs._GSimpleProxyResolverPrivate
import cnames.structs._GSocketClientPrivate
import cnames.structs._GSocketConnectable
import cnames.structs._GSocketConnectionPrivate
import cnames.structs._GSocketControlMessagePrivate
import cnames.structs._GSocketListenerPrivate
import cnames.structs._GSocketPrivate
import cnames.structs._GSocketServicePrivate
import cnames.structs._GSourcePrivate
import cnames.structs._GSrvTarget
import cnames.structs._GSubprocess
import cnames.structs._GSubprocessLauncher
import cnames.structs._GTask
import cnames.structs._GTaskClass
import cnames.structs._GTcpConnectionPrivate
import cnames.structs._GTcpWrapperConnectionPrivate
import cnames.structs._GTestDBus
import cnames.structs._GThemedIcon
import cnames.structs._GThemedIconClass
import cnames.structs._GThreadedSocketServicePrivate
import cnames.structs._GTlsBackend
import cnames.structs._GTlsCertificatePrivate
import cnames.structs._GTlsClientConnection
import cnames.structs._GTlsConnectionPrivate
import cnames.structs._GTlsDatabasePrivate
import cnames.structs._GTlsFileDatabase
import cnames.structs._GTlsInteractionPrivate
import cnames.structs._GTlsPasswordPrivate
import cnames.structs._GTlsServerConnection
import cnames.structs._GTypeCValue
import cnames.structs._GTypePlugin
import cnames.structs._GUnixCredentialsMessage
import cnames.structs._GUnixFDList
import cnames.structs._GVariant
import cnames.structs._GVariantType
import cnames.structs._GVolume
import cnames.structs._GZlibCompressor
import cnames.structs._GZlibDecompressor
import cnames.structs._GdkAtom
import cnames.structs._GdkDevice
import cnames.structs._GdkDeviceTool
import cnames.structs._GdkDisplay
import cnames.structs._GdkDragContext
import cnames.structs._GdkEventSequence
import cnames.structs._GdkFrameClock
import cnames.structs._GdkGLContext
import cnames.structs._GdkMonitor
import cnames.structs._GdkPixbuf
import cnames.structs._GdkPixbufAnimation
import cnames.structs._GdkScreen
import cnames.structs._GdkVisual
import cnames.structs._GdkWindow
import cnames.structs._GtkAboutDialogPrivate
import cnames.structs._GtkAccelGroupPrivate
import cnames.structs._GtkAccelLabelPrivate
import cnames.structs._GtkAccelMap
import cnames.structs._GtkAccelMapClass
import cnames.structs._GtkAccessiblePrivate
import cnames.structs._GtkActionBarPrivate
import cnames.structs._GtkActionable
import cnames.structs._GtkAdjustmentPrivate
import cnames.structs._GtkAppChooser
import cnames.structs._GtkAppChooserButtonPrivate
import cnames.structs._GtkAppChooserDialogPrivate
import cnames.structs._GtkAppChooserWidgetPrivate
import cnames.structs._GtkApplicationPrivate
import cnames.structs._GtkApplicationWindowPrivate
import cnames.structs._GtkAspectFramePrivate
import cnames.structs._GtkAssistantPrivate
import cnames.structs._GtkBinPrivate
import cnames.structs._GtkBoxPrivate
import cnames.structs._GtkBuildable
import cnames.structs._GtkBuilderPrivate
import cnames.structs._GtkButtonBoxPrivate
import cnames.structs._GtkButtonPrivate
import cnames.structs._GtkCalendarPrivate
import cnames.structs._GtkCellAreaBoxPrivate
import cnames.structs._GtkCellAreaContextPrivate
import cnames.structs._GtkCellAreaPrivate
import cnames.structs._GtkCellEditable
import cnames.structs._GtkCellLayout
import cnames.structs._GtkCellRendererAccelPrivate
import cnames.structs._GtkCellRendererClassPrivate
import cnames.structs._GtkCellRendererComboPrivate
import cnames.structs._GtkCellRendererPixbufPrivate
import cnames.structs._GtkCellRendererPrivate
import cnames.structs._GtkCellRendererProgressPrivate
import cnames.structs._GtkCellRendererSpinPrivate
import cnames.structs._GtkCellRendererSpinnerPrivate
import cnames.structs._GtkCellRendererTextPrivate
import cnames.structs._GtkCellRendererTogglePrivate
import cnames.structs._GtkCellViewPrivate
import cnames.structs._GtkCheckMenuItemPrivate
import cnames.structs._GtkClipboard
import cnames.structs._GtkColorButtonPrivate
import cnames.structs._GtkColorChooser
import cnames.structs._GtkColorChooserDialogPrivate
import cnames.structs._GtkColorChooserWidgetPrivate
import cnames.structs._GtkComboBoxPrivate
import cnames.structs._GtkComboBoxTextPrivate
import cnames.structs._GtkContainerPrivate
import cnames.structs._GtkCssProviderPrivate
import cnames.structs._GtkCssSection
import cnames.structs._GtkDialogPrivate
import cnames.structs._GtkEditable
import cnames.structs._GtkEntryBufferPrivate
import cnames.structs._GtkEntryCompletionPrivate
import cnames.structs._GtkEntryPrivate
import cnames.structs._GtkEventBoxPrivate
import cnames.structs._GtkEventController
import cnames.structs._GtkEventControllerClass
import cnames.structs._GtkEventControllerKey
import cnames.structs._GtkEventControllerKeyClass
import cnames.structs._GtkEventControllerMotion
import cnames.structs._GtkEventControllerMotionClass
import cnames.structs._GtkEventControllerScroll
import cnames.structs._GtkEventControllerScrollClass
import cnames.structs._GtkExpanderPrivate
import cnames.structs._GtkFileChooser
import cnames.structs._GtkFileChooserButtonPrivate
import cnames.structs._GtkFileChooserDialogPrivate
import cnames.structs._GtkFileChooserNative
import cnames.structs._GtkFileChooserWidgetPrivate
import cnames.structs._GtkFileFilter
import cnames.structs._GtkFixedPrivate
import cnames.structs._GtkFontButtonPrivate
import cnames.structs._GtkFontChooser
import cnames.structs._GtkFontChooserDialogPrivate
import cnames.structs._GtkFontChooserWidgetPrivate
import cnames.structs._GtkFramePrivate
import cnames.structs._GtkGesture
import cnames.structs._GtkGestureClass
import cnames.structs._GtkGestureDrag
import cnames.structs._GtkGestureDragClass
import cnames.structs._GtkGestureLongPress
import cnames.structs._GtkGestureLongPressClass
import cnames.structs._GtkGestureMultiPress
import cnames.structs._GtkGestureMultiPressClass
import cnames.structs._GtkGesturePan
import cnames.structs._GtkGesturePanClass
import cnames.structs._GtkGestureRotate
import cnames.structs._GtkGestureRotateClass
import cnames.structs._GtkGestureSingle
import cnames.structs._GtkGestureSingleClass
import cnames.structs._GtkGestureStylus
import cnames.structs._GtkGestureStylusClass
import cnames.structs._GtkGestureSwipe
import cnames.structs._GtkGestureSwipeClass
import cnames.structs._GtkGestureZoom
import cnames.structs._GtkGestureZoomClass
import cnames.structs._GtkGridPrivate
import cnames.structs._GtkHeaderBarPrivate
import cnames.structs._GtkIMContextSimplePrivate
import cnames.structs._GtkIMMulticontextPrivate
import cnames.structs._GtkIconFactoryPrivate
import cnames.structs._GtkIconInfo
import cnames.structs._GtkIconInfoClass
import cnames.structs._GtkIconSet
import cnames.structs._GtkIconSource
import cnames.structs._GtkIconThemePrivate
import cnames.structs._GtkIconViewPrivate
import cnames.structs._GtkImagePrivate
import cnames.structs._GtkInfoBarPrivate
import cnames.structs._GtkInvisiblePrivate
import cnames.structs._GtkLabelPrivate
import cnames.structs._GtkLabelSelectionInfo
import cnames.structs._GtkLayoutPrivate
import cnames.structs._GtkLevelBarPrivate
import cnames.structs._GtkLinkButtonPrivate
import cnames.structs._GtkListStorePrivate
import cnames.structs._GtkLockButtonPrivate
import cnames.structs._GtkMenuBarPrivate
import cnames.structs._GtkMenuButtonPrivate
import cnames.structs._GtkMenuItemPrivate
import cnames.structs._GtkMenuPrivate
import cnames.structs._GtkMenuShellPrivate
import cnames.structs._GtkMenuToolButtonPrivate
import cnames.structs._GtkMessageDialogPrivate
import cnames.structs._GtkMiscPrivate
import cnames.structs._GtkModelButton
import cnames.structs._GtkMountOperationPrivate
import cnames.structs._GtkNotebookPrivate
import cnames.structs._GtkOrientable
import cnames.structs._GtkOverlayPrivate
import cnames.structs._GtkPadController
import cnames.structs._GtkPadControllerClass
import cnames.structs._GtkPageSetup
import cnames.structs._GtkPanedPrivate
import cnames.structs._GtkPaperSize
import cnames.structs._GtkPlacesSidebar
import cnames.structs._GtkPlacesSidebarClass
import cnames.structs._GtkPopoverMenu
import cnames.structs._GtkPopoverPrivate
import cnames.structs._GtkPrintContext
import cnames.structs._GtkPrintOperationPreview
import cnames.structs._GtkPrintOperationPrivate
import cnames.structs._GtkPrintSettings
import cnames.structs._GtkProgressBarPrivate
import cnames.structs._GtkRadioButtonPrivate
import cnames.structs._GtkRadioMenuItemPrivate
import cnames.structs._GtkRangePrivate
import cnames.structs._GtkRecentChooser
import cnames.structs._GtkRecentChooserDialogPrivate
import cnames.structs._GtkRecentChooserMenuPrivate
import cnames.structs._GtkRecentChooserWidgetPrivate
import cnames.structs._GtkRecentFilter
import cnames.structs._GtkRecentInfo
import cnames.structs._GtkRecentManagerPrivate
import cnames.structs._GtkScaleButtonPrivate
import cnames.structs._GtkScalePrivate
import cnames.structs._GtkScrollable
import cnames.structs._GtkScrolledWindowPrivate
import cnames.structs._GtkSelectionData
import cnames.structs._GtkSeparatorPrivate
import cnames.structs._GtkSeparatorToolItemPrivate
import cnames.structs._GtkSettingsPrivate
import cnames.structs._GtkShortcutLabel
import cnames.structs._GtkShortcutLabelClass
import cnames.structs._GtkShortcutsGroup
import cnames.structs._GtkShortcutsGroupClass
import cnames.structs._GtkShortcutsSection
import cnames.structs._GtkShortcutsSectionClass
import cnames.structs._GtkShortcutsShortcut
import cnames.structs._GtkShortcutsShortcutClass
import cnames.structs._GtkSizeGroupPrivate
import cnames.structs._GtkSpinButtonPrivate
import cnames.structs._GtkSpinnerPrivate
import cnames.structs._GtkStackSidebarPrivate
import cnames.structs._GtkStatusbarPrivate
import cnames.structs._GtkStyleContextPrivate
import cnames.structs._GtkStylePropertiesPrivate
import cnames.structs._GtkStyleProvider
import cnames.structs._GtkSwitchPrivate
import cnames.structs._GtkTargetList
import cnames.structs._GtkTextBTree
import cnames.structs._GtkTextBufferPrivate
import cnames.structs._GtkTextTagPrivate
import cnames.structs._GtkTextTagTablePrivate
import cnames.structs._GtkTextViewPrivate
import cnames.structs._GtkToggleButtonPrivate
import cnames.structs._GtkToggleToolButtonPrivate
import cnames.structs._GtkToolButtonPrivate
import cnames.structs._GtkToolItemGroupPrivate
import cnames.structs._GtkToolItemPrivate
import cnames.structs._GtkToolPalettePrivate
import cnames.structs._GtkToolShell
import cnames.structs._GtkToolbarPrivate
import cnames.structs._GtkTooltip
import cnames.structs._GtkTreeDragDest
import cnames.structs._GtkTreeDragSource
import cnames.structs._GtkTreeModel
import cnames.structs._GtkTreeModelFilterPrivate
import cnames.structs._GtkTreeModelSortPrivate
import cnames.structs._GtkTreePath
import cnames.structs._GtkTreeRowReference
import cnames.structs._GtkTreeSelectionPrivate
import cnames.structs._GtkTreeSortable
import cnames.structs._GtkTreeStorePrivate
import cnames.structs._GtkTreeViewColumnPrivate
import cnames.structs._GtkTreeViewPrivate
import cnames.structs._GtkViewportPrivate
import cnames.structs._GtkWidgetClassPrivate
import cnames.structs._GtkWidgetPath
import cnames.structs._GtkWidgetPrivate
import cnames.structs._GtkWindowGeometryInfo
import cnames.structs._GtkWindowGroupPrivate
import cnames.structs._GtkWindowPrivate
import cnames.structs._PangoAttrList
import cnames.structs._PangoContext
import cnames.structs._PangoFontDescription
import cnames.structs._PangoLanguage
import cnames.structs._PangoLayout
import cnames.structs._PangoTabArray
import cnames.structs._cairo
import cnames.structs._cairo_font_options
import cnames.structs._cairo_pattern
import cnames.structs._cairo_region
import cnames.structs._cairo_surface
import platform.posix.__gnuc_va_list

// NOTE THIS FILE IS AUTO-GENERATED

@CStruct("struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; }")
class _GValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var g_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    val data: CArrayPointer<anonymousStruct1>
        get() = arrayMemberAt(8)
}

@CStruct("union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; }")
class anonymousStruct1(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var v_int: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var v_uint: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var v_long: glong
        get() = memberAt<glongVar>(0).value
        set(value) { memberAt<glongVar>(0).value = value }
    
    var v_ulong: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_int64: gint64
        get() = memberAt<gint64Var>(0).value
        set(value) { memberAt<gint64Var>(0).value = value }
    
    var v_uint64: guint64
        get() = memberAt<guint64Var>(0).value
        set(value) { memberAt<guint64Var>(0).value = value }
    
    var v_float: gfloat
        get() = memberAt<gfloatVar>(0).value
        set(value) { memberAt<gfloatVar>(0).value = value }
    
    var v_double: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    var v_pointer: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
}

@CStruct("struct { unsigned long p0; }")
class _GTypeClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var g_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
}

@CStruct("struct { unsigned long p0; unsigned long p1; }")
class _GTypeInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var g_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    var g_instance_type: GType
        get() = memberAt<GTypeVar>(8).value
        set(value) { memberAt<GTypeVar>(8).value = value }
}

@CStruct("struct { void* p0; }")
class _GTypeInstance(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var g_class: CPointer<GTypeClass>?
        get() = memberAt<CPointerVar<GTypeClass>>(0).value
        set(value) { memberAt<CPointerVar<GTypeClass>>(0).value = value }
}

@CStruct("struct { unsigned short p0; void* p1; void* p2; void* p3; void* p4; void* p5; unsigned short p6; unsigned short p7; void* p8; void* p9; }")
class _GTypeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    var class_size: guint16
        get() = memberAt<guint16Var>(0).value
        set(value) { memberAt<guint16Var>(0).value = value }
    
    var base_init: GBaseInitFunc?
        get() = memberAt<GBaseInitFuncVar>(8).value
        set(value) { memberAt<GBaseInitFuncVar>(8).value = value }
    
    var base_finalize: GBaseFinalizeFunc?
        get() = memberAt<GBaseFinalizeFuncVar>(16).value
        set(value) { memberAt<GBaseFinalizeFuncVar>(16).value = value }
    
    var class_init: GClassInitFunc?
        get() = memberAt<GClassInitFuncVar>(24).value
        set(value) { memberAt<GClassInitFuncVar>(24).value = value }
    
    var class_finalize: GClassFinalizeFunc?
        get() = memberAt<GClassFinalizeFuncVar>(32).value
        set(value) { memberAt<GClassFinalizeFuncVar>(32).value = value }
    
    var class_data: gconstpointer?
        get() = memberAt<gconstpointerVar>(40).value
        set(value) { memberAt<gconstpointerVar>(40).value = value }
    
    var instance_size: guint16
        get() = memberAt<guint16Var>(48).value
        set(value) { memberAt<guint16Var>(48).value = value }
    
    var n_preallocs: guint16
        get() = memberAt<guint16Var>(50).value
        set(value) { memberAt<guint16Var>(50).value = value }
    
    var instance_init: GInstanceInitFunc?
        get() = memberAt<GInstanceInitFuncVar>(56).value
        set(value) { memberAt<GInstanceInitFuncVar>(56).value = value }
    
    var value_table: CPointer<GTypeValueTable>?
        get() = memberAt<CPointerVar<GTypeValueTable>>(64).value
        set(value) { memberAt<CPointerVar<GTypeValueTable>>(64).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GTypeValueTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var value_init: CPointer<CFunction<(CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(0).value = value }
    
    var value_free: CPointer<CFunction<(CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> Unit>>>(8).value = value }
    
    var value_copy: CPointer<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>>(16).value = value }
    
    var value_peek_pointer: CPointer<CFunction<(CPointer<GValue>?) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> gpointer?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?) -> gpointer?>>>(24).value = value }
    
    var collect_format: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
    
    var collect_value: CPointer<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(40).value = value }
    
    var lcopy_format: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(48).value
        set(value) { memberAt<CPointerVar<gcharVar>>(48).value = value }
    
    var lcopy_value: CPointer<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GValue>?, guint, CPointer<GTypeCValue>?, guint) -> CPointer<gcharVar>?>>>(56).value = value }
}

@CStruct("struct { unsigned int p0; }")
class _GTypeFundamentalInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var type_flags: GTypeFundamentalFlags
        get() = memberAt<GTypeFundamentalFlagsVar>(0).value
        set(value) { memberAt<GTypeFundamentalFlagsVar>(0).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; }")
class _GInterfaceInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var interface_init: GInterfaceInitFunc?
        get() = memberAt<GInterfaceInitFuncVar>(0).value
        set(value) { memberAt<GInterfaceInitFuncVar>(0).value = value }
    
    var interface_finalize: GInterfaceFinalizeFunc?
        get() = memberAt<GInterfaceFinalizeFuncVar>(8).value
        set(value) { memberAt<GInterfaceFinalizeFuncVar>(8).value = value }
    
    var interface_data: gpointer?
        get() = memberAt<gpointerVar>(16).value
        set(value) { memberAt<gpointerVar>(16).value = value }
}

@CStruct("struct { unsigned long p0; void* p1; unsigned int p2; unsigned int p3; }")
class _GTypeQuery(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    var type_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var class_size: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var instance_size: guint
        get() = memberAt<guintVar>(20).value
        set(value) { memberAt<guintVar>(20).value = value }
}

@CStruct("struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; }")
class _GParamSpec(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val g_type_instance: GTypeInstance
        get() = memberAt(0)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var flags: GParamFlags
        get() = memberAt<GParamFlagsVar>(16).value
        set(value) { memberAt<GParamFlagsVar>(16).value = value }
    
    var value_type: GType
        get() = memberAt<GTypeVar>(24).value
        set(value) { memberAt<GTypeVar>(24).value = value }
    
    var owner_type: GType
        get() = memberAt<GTypeVar>(32).value
        set(value) { memberAt<GTypeVar>(32).value = value }
    
    var _nick: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(40).value
        set(value) { memberAt<CPointerVar<gcharVar>>(40).value = value }
    
    var _blurb: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(48).value
        set(value) { memberAt<CPointerVar<gcharVar>>(48).value = value }
    
    var qdata: CPointer<GData>?
        get() = memberAt<CPointerVar<GData>>(56).value
        set(value) { memberAt<CPointerVar<GData>>(56).value = value }
    
    var ref_count: guint
        get() = memberAt<guintVar>(64).value
        set(value) { memberAt<guintVar>(64).value = value }
    
    var param_id: guint
        get() = memberAt<guintVar>(68).value
        set(value) { memberAt<guintVar>(68).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; unsigned long p1; void* p2; void* p3; void* p4; void* p5; void* p6[4]; }")
class _GParamSpecClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var value_type: GType
        get() = memberAt<GTypeVar>(8).value
        set(value) { memberAt<GTypeVar>(8).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(16).value = value }
    
    var value_set_default: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(24).value = value }
    
    var value_validate: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(32).value = value }
    
    var values_cmp: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(40).value = value }
    
    val dummy: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(48)
}

@CStruct("struct { void* p0; struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; } p1; }")
class _GParameter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    val value: GValue
        get() = memberAt(8)
}

@CStruct("struct { unsigned short p0; unsigned short p1; void* p2; unsigned long p3; void* p4; void* p5; void* p6; void* p7; }")
class _GParamSpecTypeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var instance_size: guint16
        get() = memberAt<guint16Var>(0).value
        set(value) { memberAt<guint16Var>(0).value = value }
    
    var n_preallocs: guint16
        get() = memberAt<guint16Var>(2).value
        set(value) { memberAt<guint16Var>(2).value = value }
    
    var instance_init: CPointer<CFunction<(CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(8).value = value }
    
    var value_type: GType
        get() = memberAt<GTypeVar>(16).value
        set(value) { memberAt<GTypeVar>(16).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?) -> Unit>>>(24).value = value }
    
    var value_set_default: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> Unit>>>(32).value = value }
    
    var value_validate: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(40).value = value }
    
    var values_cmp: CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GParamSpec>?, CPointer<GValue>?, CPointer<GValue>?) -> gint>>>(48).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; }")
class _GList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var next: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(8).value
        set(value) { memberAt<CPointerVar<GList>>(8).value = value }
    
    var prev: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(16).value
        set(value) { memberAt<CPointerVar<GList>>(16).value = value }
}

class _GClosure(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var marshal: CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>>(8).value = value }
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(16).value
        set(value) { memberAt<gpointerVar>(16).value = value }
    
    var notifiers: CPointer<GClosureNotifyData>?
        get() = memberAt<CPointerVar<GClosureNotifyData>>(24).value
        set(value) { memberAt<CPointerVar<GClosureNotifyData>>(24).value = value }
    
    var ref_count: guint
        get() = readBits(this.rawPtr, 0, 15, false).toUInt()
        set(value) { writeBits(this.rawPtr, 0, 15, value.toLong()) }
    
    var meta_marshal_nouse: guint
        get() = readBits(this.rawPtr, 15, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 15, 1, value.toLong()) }
    
    var n_guards: guint
        get() = readBits(this.rawPtr, 16, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 16, 1, value.toLong()) }
    
    var n_fnotifiers: guint
        get() = readBits(this.rawPtr, 17, 2, false).toUInt()
        set(value) { writeBits(this.rawPtr, 17, 2, value.toLong()) }
    
    var n_inotifiers: guint
        get() = readBits(this.rawPtr, 19, 8, false).toUInt()
        set(value) { writeBits(this.rawPtr, 19, 8, value.toLong()) }
    
    var in_inotify: guint
        get() = readBits(this.rawPtr, 27, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 27, 1, value.toLong()) }
    
    var floating: guint
        get() = readBits(this.rawPtr, 28, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 28, 1, value.toLong()) }
    
    var derivative_flag: guint
        get() = readBits(this.rawPtr, 29, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 29, 1, value.toLong()) }
    
    var in_marshal: guint
        get() = readBits(this.rawPtr, 30, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 30, 1, value.toLong()) }
    
    var is_invalid: guint
        get() = readBits(this.rawPtr, 31, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 31, 1, value.toLong()) }
}

@CStruct("struct { void* p0; void* p1; }")
class _GClosureNotifyData(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var notify: GClosureNotify?
        get() = memberAt<GClosureNotifyVar>(8).value
        set(value) { memberAt<GClosureNotifyVar>(8).value = value }
}

@CStruct("struct { null p0; void* p1; }")
class _GCClosure(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val closure: GClosure
        get() = memberAt(0)
    
    var callback: gpointer?
        get() = memberAt<gpointerVar>(32).value
        set(value) { memberAt<gpointerVar>(32).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; unsigned long p2; unsigned int p3; unsigned long p4; unsigned int p5; void* p6; }")
class _GSignalQuery(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var signal_id: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var signal_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var itype: GType
        get() = memberAt<GTypeVar>(16).value
        set(value) { memberAt<GTypeVar>(16).value = value }
    
    var signal_flags: GSignalFlags
        get() = memberAt<GSignalFlagsVar>(24).value
        set(value) { memberAt<GSignalFlagsVar>(24).value = value }
    
    var return_type: GType
        get() = memberAt<GTypeVar>(32).value
        set(value) { memberAt<GTypeVar>(32).value = value }
    
    var n_params: guint
        get() = memberAt<guintVar>(40).value
        set(value) { memberAt<guintVar>(40).value = value }
    
    var param_types: CPointer<GTypeVar>?
        get() = memberAt<CPointerVar<GTypeVar>>(48).value
        set(value) { memberAt<CPointerVar<GTypeVar>>(48).value = value }
}

@CStruct("struct { unsigned int p0; unsigned int p1; unsigned int p2; }")
class _GSignalInvocationHint(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var signal_id: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var detail: GQuark
        get() = memberAt<GQuarkVar>(4).value
        set(value) { memberAt<GQuarkVar>(4).value = value }
    
    var run_type: GSignalFlags
        get() = memberAt<GSignalFlagsVar>(8).value
        set(value) { memberAt<GSignalFlagsVar>(8).value = value }
}

@CStruct("struct { struct { void* p0; } p0; unsigned int p1; void* p2; }")
class _GObject(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_type_instance: GTypeInstance
        get() = memberAt(0)
    
    var ref_count: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var qdata: CPointer<GData>?
        get() = memberAt<CPointerVar<GData>>(16).value
        set(value) { memberAt<CPointerVar<GData>>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; }")
class _GObjectClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var construct_properties: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(8).value
        set(value) { memberAt<CPointerVar<GSList>>(8).value = value }
    
    var constructor: CPointer<CFunction<(GType, guint, CPointer<GObjectConstructParam>?) -> CPointer<GObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(GType, guint, CPointer<GObjectConstructParam>?) -> CPointer<GObject>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(GType, guint, CPointer<GObjectConstructParam>?) -> CPointer<GObject>?>>>(16).value = value }
    
    var set_property: CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(24).value = value }
    
    var get_property: CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(32).value = value }
    
    var dispose: CPointer<CFunction<(CPointer<GObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(40).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(48).value = value }
    
    var dispatch_properties_changed: CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>>(56).value = value }
    
    var notify: CPointer<CFunction<(CPointer<GObject>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?, CPointer<GParamSpec>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?, CPointer<GParamSpec>?) -> Unit>>>(64).value = value }
    
    var constructed: CPointer<CFunction<(CPointer<GObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GObject>?) -> Unit>>>(72).value = value }
    
    var flags: gsize
        get() = memberAt<gsizeVar>(80).value
        set(value) { memberAt<gsizeVar>(80).value = value }
    
    val pdummy: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(88)
}

@CStruct("struct { void* p0; void* p1; }")
class _GSList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var next: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(8).value
        set(value) { memberAt<CPointerVar<GSList>>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; }")
class _GObjectConstructParam(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var pspec: CPointer<GParamSpec>?
        get() = memberAt<CPointerVar<GParamSpec>>(0).value
        set(value) { memberAt<CPointerVar<GParamSpec>>(0).value = value }
    
    var value: CPointer<GValue>?
        get() = memberAt<CPointerVar<GValue>>(8).value
        set(value) { memberAt<CPointerVar<GValue>>(8).value = value }
}

@CStruct("struct { union { void* p0; } p0; }")
class GWeakRef(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    val priv: anonymousStruct2
        get() = memberAt(0)
}

@CStruct("union { void* p0; }")
class anonymousStruct2(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var p: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; int p1; int p2; unsigned int p3; void* p4; }")
class _GEnumClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var minimum: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var maximum: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
    
    var n_values: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var values: CPointer<GEnumValue>?
        get() = memberAt<CPointerVar<GEnumValue>>(24).value
        set(value) { memberAt<CPointerVar<GEnumValue>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; }")
class _GEnumValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var value: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var value_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var value_nick: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; } p0; unsigned int p1; unsigned int p2; void* p3; }")
class _GFlagsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_type_class: GTypeClass
        get() = memberAt(0)
    
    var mask: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var n_values: guint
        get() = memberAt<guintVar>(12).value
        set(value) { memberAt<guintVar>(12).value = value }
    
    var values: CPointer<GFlagsValue>?
        get() = memberAt<CPointerVar<GFlagsValue>>(16).value
        set(value) { memberAt<CPointerVar<GFlagsValue>>(16).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; void* p2; }")
class _GFlagsValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var value: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var value_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var value_nick: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; signed char p1; signed char p2; signed char p3; }")
class _GParamSpecChar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gint8
        get() = memberAt<gint8Var>(72).value
        set(value) { memberAt<gint8Var>(72).value = value }
    
    var maximum: gint8
        get() = memberAt<gint8Var>(73).value
        set(value) { memberAt<gint8Var>(73).value = value }
    
    var default_value: gint8
        get() = memberAt<gint8Var>(74).value
        set(value) { memberAt<gint8Var>(74).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned char p1; unsigned char p2; unsigned char p3; }")
class _GParamSpecUChar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: guint8
        get() = memberAt<guint8Var>(72).value
        set(value) { memberAt<guint8Var>(72).value = value }
    
    var maximum: guint8
        get() = memberAt<guint8Var>(73).value
        set(value) { memberAt<guint8Var>(73).value = value }
    
    var default_value: guint8
        get() = memberAt<guint8Var>(74).value
        set(value) { memberAt<guint8Var>(74).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; int p1; }")
class _GParamSpecBoolean(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var default_value: gboolean
        get() = memberAt<gbooleanVar>(72).value
        set(value) { memberAt<gbooleanVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; int p1; int p2; int p3; }")
class _GParamSpecInt(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gint
        get() = memberAt<gintVar>(72).value
        set(value) { memberAt<gintVar>(72).value = value }
    
    var maximum: gint
        get() = memberAt<gintVar>(76).value
        set(value) { memberAt<gintVar>(76).value = value }
    
    var default_value: gint
        get() = memberAt<gintVar>(80).value
        set(value) { memberAt<gintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned int p1; unsigned int p2; unsigned int p3; }")
class _GParamSpecUInt(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: guint
        get() = memberAt<guintVar>(72).value
        set(value) { memberAt<guintVar>(72).value = value }
    
    var maximum: guint
        get() = memberAt<guintVar>(76).value
        set(value) { memberAt<guintVar>(76).value = value }
    
    var default_value: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; long p1; long p2; long p3; }")
class _GParamSpecLong(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: glong
        get() = memberAt<glongVar>(72).value
        set(value) { memberAt<glongVar>(72).value = value }
    
    var maximum: glong
        get() = memberAt<glongVar>(80).value
        set(value) { memberAt<glongVar>(80).value = value }
    
    var default_value: glong
        get() = memberAt<glongVar>(88).value
        set(value) { memberAt<glongVar>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned long p1; unsigned long p2; unsigned long p3; }")
class _GParamSpecULong(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gulong
        get() = memberAt<gulongVar>(72).value
        set(value) { memberAt<gulongVar>(72).value = value }
    
    var maximum: gulong
        get() = memberAt<gulongVar>(80).value
        set(value) { memberAt<gulongVar>(80).value = value }
    
    var default_value: gulong
        get() = memberAt<gulongVar>(88).value
        set(value) { memberAt<gulongVar>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; long p1; long p2; long p3; }")
class _GParamSpecInt64(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gint64
        get() = memberAt<gint64Var>(72).value
        set(value) { memberAt<gint64Var>(72).value = value }
    
    var maximum: gint64
        get() = memberAt<gint64Var>(80).value
        set(value) { memberAt<gint64Var>(80).value = value }
    
    var default_value: gint64
        get() = memberAt<gint64Var>(88).value
        set(value) { memberAt<gint64Var>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned long p1; unsigned long p2; unsigned long p3; }")
class _GParamSpecUInt64(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: guint64
        get() = memberAt<guint64Var>(72).value
        set(value) { memberAt<guint64Var>(72).value = value }
    
    var maximum: guint64
        get() = memberAt<guint64Var>(80).value
        set(value) { memberAt<guint64Var>(80).value = value }
    
    var default_value: guint64
        get() = memberAt<guint64Var>(88).value
        set(value) { memberAt<guint64Var>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned int p1; }")
class _GParamSpecUnichar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var default_value: gunichar
        get() = memberAt<gunicharVar>(72).value
        set(value) { memberAt<gunicharVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; int p2; }")
class _GParamSpecEnum(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var enum_class: CPointer<GEnumClass>?
        get() = memberAt<CPointerVar<GEnumClass>>(72).value
        set(value) { memberAt<CPointerVar<GEnumClass>>(72).value = value }
    
    var default_value: gint
        get() = memberAt<gintVar>(80).value
        set(value) { memberAt<gintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; unsigned int p2; }")
class _GParamSpecFlags(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var flags_class: CPointer<GFlagsClass>?
        get() = memberAt<CPointerVar<GFlagsClass>>(72).value
        set(value) { memberAt<CPointerVar<GFlagsClass>>(72).value = value }
    
    var default_value: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; float p1; float p2; float p3; float p4; }")
class _GParamSpecFloat(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gfloat
        get() = memberAt<gfloatVar>(72).value
        set(value) { memberAt<gfloatVar>(72).value = value }
    
    var maximum: gfloat
        get() = memberAt<gfloatVar>(76).value
        set(value) { memberAt<gfloatVar>(76).value = value }
    
    var default_value: gfloat
        get() = memberAt<gfloatVar>(80).value
        set(value) { memberAt<gfloatVar>(80).value = value }
    
    var epsilon: gfloat
        get() = memberAt<gfloatVar>(84).value
        set(value) { memberAt<gfloatVar>(84).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; double p1; double p2; double p3; double p4; }")
class _GParamSpecDouble(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(104, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var minimum: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
    
    var maximum: gdouble
        get() = memberAt<gdoubleVar>(80).value
        set(value) { memberAt<gdoubleVar>(80).value = value }
    
    var default_value: gdouble
        get() = memberAt<gdoubleVar>(88).value
        set(value) { memberAt<gdoubleVar>(88).value = value }
    
    var epsilon: gdouble
        get() = memberAt<gdoubleVar>(96).value
        set(value) { memberAt<gdoubleVar>(96).value = value }
}

class _GParamSpecString(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(104, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var default_value: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(72).value
        set(value) { memberAt<CPointerVar<gcharVar>>(72).value = value }
    
    var cset_first: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(80).value
        set(value) { memberAt<CPointerVar<gcharVar>>(80).value = value }
    
    var cset_nth: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(88).value
        set(value) { memberAt<CPointerVar<gcharVar>>(88).value = value }
    
    var substitutor: gchar
        get() = memberAt<gcharVar>(96).value
        set(value) { memberAt<gcharVar>(96).value = value }
    
    var null_fold_if_empty: guint
        get() = readBits(this.rawPtr, 776, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 776, 1, value.toLong()) }
    
    var ensure_non_null: guint
        get() = readBits(this.rawPtr, 777, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 777, 1, value.toLong()) }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecParam(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecBoxed(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecPointer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; unsigned int p2; }")
class _GParamSpecValueArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var element_spec: CPointer<GParamSpec>?
        get() = memberAt<CPointerVar<GParamSpec>>(72).value
        set(value) { memberAt<CPointerVar<GParamSpec>>(72).value = value }
    
    var fixed_n_elements: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; }")
class _GParamSpecObject(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; }")
class _GParamSpecOverride(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var overridden: CPointer<GParamSpec>?
        get() = memberAt<CPointerVar<GParamSpec>>(72).value
        set(value) { memberAt<CPointerVar<GParamSpec>>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; unsigned long p1; }")
class _GParamSpecGType(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var is_a_type: GType
        get() = memberAt<GTypeVar>(72).value
        set(value) { memberAt<GTypeVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; void* p1; int p2; unsigned long p3; unsigned long p4; void* p5; void* p6; void* p7; unsigned int p8; unsigned int p9; } p0; void* p1; void* p2; void* p3[4]; }")
class _GParamSpecVariant(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(120, 8)
    
    val parent_instance: GParamSpec
        get() = memberAt(0)
    
    var type: CPointer<GVariantType>?
        get() = memberAt<CPointerVar<GVariantType>>(72).value
        set(value) { memberAt<CPointerVar<GVariantType>>(72).value = value }
    
    var default_value: CPointer<GVariant>?
        get() = memberAt<CPointerVar<GVariant>>(80).value
        set(value) { memberAt<CPointerVar<GVariant>>(80).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(88)
}

@CStruct("struct { void* p0; void* p1; void* p2; unsigned int p3; void* p4; int p5; unsigned int p6; unsigned int p7; void* p8; void* p9; void* p10; void* p11; void* p12; }")
class _GSource(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var callback_data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var callback_funcs: CPointer<GSourceCallbackFuncs>?
        get() = memberAt<CPointerVar<GSourceCallbackFuncs>>(8).value
        set(value) { memberAt<CPointerVar<GSourceCallbackFuncs>>(8).value = value }
    
    var source_funcs: CPointer<GSourceFuncs>?
        get() = memberAt<CPointerVar<GSourceFuncs>>(16).value
        set(value) { memberAt<CPointerVar<GSourceFuncs>>(16).value = value }
    
    var ref_count: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var context: CPointer<GMainContext>?
        get() = memberAt<CPointerVar<GMainContext>>(32).value
        set(value) { memberAt<CPointerVar<GMainContext>>(32).value = value }
    
    var priority: gint
        get() = memberAt<gintVar>(40).value
        set(value) { memberAt<gintVar>(40).value = value }
    
    var flags: guint
        get() = memberAt<guintVar>(44).value
        set(value) { memberAt<guintVar>(44).value = value }
    
    var source_id: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    var poll_fds: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(56).value
        set(value) { memberAt<CPointerVar<GSList>>(56).value = value }
    
    var prev: CPointer<GSource>?
        get() = memberAt<CPointerVar<GSource>>(64).value
        set(value) { memberAt<CPointerVar<GSource>>(64).value = value }
    
    var next: CPointer<GSource>?
        get() = memberAt<CPointerVar<GSource>>(72).value
        set(value) { memberAt<CPointerVar<GSource>>(72).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(80).value
        set(value) { memberAt<CPointerVar<ByteVar>>(80).value = value }
    
    var priv: CPointer<GSourcePrivate>?
        get() = memberAt<CPointerVar<GSourcePrivate>>(88).value
        set(value) { memberAt<CPointerVar<GSourcePrivate>>(88).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; }")
class _GSourceCallbackFuncs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var ref: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(0).value = value }
    
    var unref: CPointer<CFunction<(gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?) -> Unit>>>(8).value = value }
    
    var get: CPointer<CFunction<(gpointer?, CPointer<GSource>?, CPointer<GSourceFuncVar>?, CPointer<gpointerVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(gpointer?, CPointer<GSource>?, CPointer<GSourceFuncVar>?, CPointer<gpointerVar>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(gpointer?, CPointer<GSource>?, CPointer<GSourceFuncVar>?, CPointer<gpointerVar>?) -> Unit>>>(16).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSourceFuncs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var prepare: CPointer<CFunction<(CPointer<GSource>?, CPointer<gintVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?, CPointer<gintVar>?) -> gboolean>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?, CPointer<gintVar>?) -> gboolean>>>(0).value = value }
    
    var check: CPointer<CFunction<(CPointer<GSource>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> gboolean>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> gboolean>>>(8).value = value }
    
    var dispatch: CPointer<CFunction<(CPointer<GSource>?, GSourceFunc?, gpointer?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?, GSourceFunc?, gpointer?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?, GSourceFunc?, gpointer?) -> gboolean>>>(16).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<GSource>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSource>?) -> Unit>>>(24).value = value }
    
    var closure_callback: GSourceFunc?
        get() = memberAt<GSourceFuncVar>(32).value
        set(value) { memberAt<GSourceFuncVar>(32).value = value }
    
    var closure_marshal: GSourceDummyMarshal?
        get() = memberAt<GSourceDummyMarshalVar>(40).value
        set(value) { memberAt<GSourceDummyMarshalVar>(40).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; unsigned int p1; void* p2; void* p3; void* p4; }")
class _GTypeModule(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var use_count: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var type_infos: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(32).value
        set(value) { memberAt<CPointerVar<GSList>>(32).value = value }
    
    var interface_infos: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(40).value
        set(value) { memberAt<CPointerVar<GSList>>(40).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(48).value
        set(value) { memberAt<CPointerVar<gcharVar>>(48).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GTypeModuleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var load: CPointer<CFunction<(CPointer<GTypeModule>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> gboolean>>>(136).value = value }
    
    var unload: CPointer<CFunction<(CPointer<GTypeModule>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTypeModule>?) -> Unit>>>(144).value = value }
    
    var reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; }")
class _GQueue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var head: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(0).value
        set(value) { memberAt<CPointerVar<GList>>(0).value = value }
    
    var tail: CPointer<GList>?
        get() = memberAt<CPointerVar<GList>>(8).value
        set(value) { memberAt<CPointerVar<GList>>(8).value = value }
    
    var length: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GTypePluginClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
    
    var use_plugin: GTypePluginUse?
        get() = memberAt<GTypePluginUseVar>(16).value
        set(value) { memberAt<GTypePluginUseVar>(16).value = value }
    
    var unuse_plugin: GTypePluginUnuse?
        get() = memberAt<GTypePluginUnuseVar>(24).value
        set(value) { memberAt<GTypePluginUnuseVar>(24).value = value }
    
    var complete_type_info: GTypePluginCompleteTypeInfo?
        get() = memberAt<GTypePluginCompleteTypeInfoVar>(32).value
        set(value) { memberAt<GTypePluginCompleteTypeInfoVar>(32).value = value }
    
    var complete_interface_info: GTypePluginCompleteInterfaceInfo?
        get() = memberAt<GTypePluginCompleteInterfaceInfoVar>(40).value
        set(value) { memberAt<GTypePluginCompleteInterfaceInfoVar>(40).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; unsigned int p2; }")
class _GValueArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var n_values: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var values: CPointer<GValue>?
        get() = memberAt<CPointerVar<GValue>>(8).value
        set(value) { memberAt<CPointerVar<GValue>>(8).value = value }
    
    var n_prealloced: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GAppLaunchContext(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GAppLaunchContextPrivate>?
        get() = memberAt<CPointerVar<GAppLaunchContextPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GAppLaunchContextPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GBufferedInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GBufferedInputStreamPrivate>?
        get() = memberAt<CPointerVar<GBufferedInputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GBufferedInputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFilterInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInputStream
        get() = memberAt(0)
    
    var base_stream: CPointer<GInputStream>?
        get() = memberAt<CPointerVar<GInputStream>>(32).value
        set(value) { memberAt<CPointerVar<GInputStream>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GInputStreamPrivate>?
        get() = memberAt<CPointerVar<GInputStreamPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInputStreamPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GBufferedOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GBufferedOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GBufferedOutputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GBufferedOutputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFilterOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GOutputStream
        get() = memberAt(0)
    
    var base_stream: CPointer<GOutputStream>?
        get() = memberAt<CPointerVar<GOutputStream>>(32).value
        set(value) { memberAt<CPointerVar<GOutputStream>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GOutputStreamPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GOutputStreamPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GCancellable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GCancellablePrivate>?
        get() = memberAt<CPointerVar<GCancellablePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GCancellablePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GConverterInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GConverterInputStreamPrivate>?
        get() = memberAt<CPointerVar<GConverterInputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GConverterInputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GConverterOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GConverterOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GConverterOutputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GConverterOutputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GDataInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GBufferedInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GDataInputStreamPrivate>?
        get() = memberAt<CPointerVar<GDataInputStreamPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GDataInputStreamPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSimpleActionGroup(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSimpleActionGroupPrivate>?
        get() = memberAt<CPointerVar<GSimpleActionGroupPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSimpleActionGroupPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GApplication(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GApplicationPrivate>?
        get() = memberAt<CPointerVar<GApplicationPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GApplicationPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GApplicationCommandLine(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GApplicationCommandLinePrivate>?
        get() = memberAt<CPointerVar<GApplicationCommandLinePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GApplicationCommandLinePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSettings(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSettingsPrivate>?
        get() = memberAt<CPointerVar<GSettingsPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSettingsPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GPermission(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GPermissionPrivate>?
        get() = memberAt<CPointerVar<GPermissionPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GPermissionPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMenuModel(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMenuModelPrivate>?
        get() = memberAt<CPointerVar<GMenuModelPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMenuModelPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GFileEnumerator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GFileEnumeratorPrivate>?
        get() = memberAt<CPointerVar<GFileEnumeratorPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GFileEnumeratorPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GFileMonitor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GFileMonitorPrivate>?
        get() = memberAt<CPointerVar<GFileMonitorPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GFileMonitorPrivate>>(24).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; unsigned int p2; }")
class _GFileAttributeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var type: GFileAttributeType
        get() = memberAt<GFileAttributeTypeVar>(8).value
        set(value) { memberAt<GFileAttributeTypeVar>(8).value = value }
    
    var flags: GFileAttributeInfoFlags
        get() = memberAt<GFileAttributeInfoFlagsVar>(12).value
        set(value) { memberAt<GFileAttributeInfoFlagsVar>(12).value = value }
}

@CStruct("struct { void* p0; int p1; }")
class _GFileAttributeInfoList(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var infos: CPointer<GFileAttributeInfo>?
        get() = memberAt<CPointerVar<GFileAttributeInfo>>(0).value
        set(value) { memberAt<CPointerVar<GFileAttributeInfo>>(0).value = value }
    
    var n_infos: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFileInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GFileInputStreamPrivate>?
        get() = memberAt<CPointerVar<GFileInputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GFileInputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFileOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GFileOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GFileOutputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GFileOutputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GFileIOStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GIOStream
        get() = memberAt(0)
    
    var priv: CPointer<GFileIOStreamPrivate>?
        get() = memberAt<CPointerVar<GFileIOStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GFileIOStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GIOStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GIOStreamPrivate>?
        get() = memberAt<CPointerVar<GIOStreamPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GIOStreamPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GInetAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GInetAddressPrivate>?
        get() = memberAt<CPointerVar<GInetAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInetAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GInetAddressMask(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GInetAddressMaskPrivate>?
        get() = memberAt<CPointerVar<GInetAddressMaskPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInetAddressMaskPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GInetSocketAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GSocketAddress
        get() = memberAt(0)
    
    var priv: CPointer<GInetSocketAddressPrivate>?
        get() = memberAt<CPointerVar<GInetSocketAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GInetSocketAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GSocketAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GNativeSocketAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GSocketAddress
        get() = memberAt(0)
    
    var priv: CPointer<GNativeSocketAddressPrivate>?
        get() = memberAt<CPointerVar<GNativeSocketAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GNativeSocketAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GMemoryInputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInputStream
        get() = memberAt(0)
    
    var priv: CPointer<GMemoryInputStreamPrivate>?
        get() = memberAt<CPointerVar<GMemoryInputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GMemoryInputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GMemoryOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GMemoryOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GMemoryOutputStreamPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GMemoryOutputStreamPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMountOperation(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMountOperationPrivate>?
        get() = memberAt<CPointerVar<GMountOperationPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMountOperationPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GNetworkAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GNetworkAddressPrivate>?
        get() = memberAt<CPointerVar<GNetworkAddressPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GNetworkAddressPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GNetworkService(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GNetworkServicePrivate>?
        get() = memberAt<CPointerVar<GNetworkServicePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GNetworkServicePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GResolver(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GResolverPrivate>?
        get() = memberAt<CPointerVar<GResolverPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GResolverPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocket(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketPrivate>?
        get() = memberAt<CPointerVar<GSocketPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocketControlMessage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketControlMessagePrivate>?
        get() = memberAt<CPointerVar<GSocketControlMessagePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketControlMessagePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocketClient(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketClientPrivate>?
        get() = memberAt<CPointerVar<GSocketClientPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketClientPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GSocketConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GIOStream
        get() = memberAt(0)
    
    var priv: CPointer<GSocketConnectionPrivate>?
        get() = memberAt<CPointerVar<GSocketConnectionPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GSocketConnectionPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSocketListener(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSocketListenerPrivate>?
        get() = memberAt<CPointerVar<GSocketListenerPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSocketListenerPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GSocketService(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GSocketListener
        get() = memberAt(0)
    
    var priv: CPointer<GSocketServicePrivate>?
        get() = memberAt<CPointerVar<GSocketServicePrivate>>(32).value
        set(value) { memberAt<CPointerVar<GSocketServicePrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GSocketAddressEnumerator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GTcpConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GSocketConnection
        get() = memberAt(0)
    
    var priv: CPointer<GTcpConnectionPrivate>?
        get() = memberAt<CPointerVar<GTcpConnectionPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GTcpConnectionPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GTcpWrapperConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GTcpConnection
        get() = memberAt(0)
    
    var priv: CPointer<GTcpWrapperConnectionPrivate>?
        get() = memberAt<CPointerVar<GTcpWrapperConnectionPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GTcpWrapperConnectionPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GThreadedSocketService(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GSocketService
        get() = memberAt(0)
    
    var priv: CPointer<GThreadedSocketServicePrivate>?
        get() = memberAt<CPointerVar<GThreadedSocketServicePrivate>>(40).value
        set(value) { memberAt<CPointerVar<GThreadedSocketServicePrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsCertificate(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsCertificatePrivate>?
        get() = memberAt<CPointerVar<GTlsCertificatePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsCertificatePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GTlsConnection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GIOStream
        get() = memberAt(0)
    
    var priv: CPointer<GTlsConnectionPrivate>?
        get() = memberAt<CPointerVar<GTlsConnectionPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GTlsConnectionPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsDatabase(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsDatabasePrivate>?
        get() = memberAt<CPointerVar<GTlsDatabasePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsDatabasePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsInteraction(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsInteractionPrivate>?
        get() = memberAt<CPointerVar<GTlsInteractionPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsInteractionPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GTlsPassword(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GTlsPasswordPrivate>?
        get() = memberAt<CPointerVar<GTlsPasswordPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GTlsPasswordPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GVfs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; } p0; void* p1; }")
class _GProxyAddress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GInetSocketAddress
        get() = memberAt(0)
    
    var priv: CPointer<GProxyAddressPrivate>?
        get() = memberAt<CPointerVar<GProxyAddressPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GProxyAddressPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GProxyAddressEnumerator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GSocketAddressEnumerator
        get() = memberAt(0)
    
    var priv: CPointer<GProxyAddressEnumeratorPrivate>?
        get() = memberAt<CPointerVar<GProxyAddressEnumeratorPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GProxyAddressEnumeratorPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GVolumeMonitor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; }")
class _GInputVector(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var buffer: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var size: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; unsigned long p3; int p4; void* p5; void* p6; }")
class _GInputMessage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var address: CPointer<CPointerVar<GSocketAddress>>?
        get() = memberAt<CPointerVar<CPointerVar<GSocketAddress>>>(0).value
        set(value) { memberAt<CPointerVar<CPointerVar<GSocketAddress>>>(0).value = value }
    
    var vectors: CPointer<GInputVector>?
        get() = memberAt<CPointerVar<GInputVector>>(8).value
        set(value) { memberAt<CPointerVar<GInputVector>>(8).value = value }
    
    var num_vectors: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var bytes_received: gsize
        get() = memberAt<gsizeVar>(24).value
        set(value) { memberAt<gsizeVar>(24).value = value }
    
    var flags: gint
        get() = memberAt<gintVar>(32).value
        set(value) { memberAt<gintVar>(32).value = value }
    
    var control_messages: CPointer<CPointerVar<CPointerVar<GSocketControlMessage>>>?
        get() = memberAt<CPointerVar<CPointerVar<CPointerVar<GSocketControlMessage>>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<CPointerVar<GSocketControlMessage>>>>(40).value = value }
    
    var num_control_messages: CPointer<guintVar>?
        get() = memberAt<CPointerVar<guintVar>>(48).value
        set(value) { memberAt<CPointerVar<guintVar>>(48).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; }")
class _GOutputVector(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var buffer: gconstpointer?
        get() = memberAt<gconstpointerVar>(0).value
        set(value) { memberAt<gconstpointerVar>(0).value = value }
    
    var size: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; unsigned int p3; void* p4; unsigned int p5; }")
class _GOutputMessage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var address: CPointer<GSocketAddress>?
        get() = memberAt<CPointerVar<GSocketAddress>>(0).value
        set(value) { memberAt<CPointerVar<GSocketAddress>>(0).value = value }
    
    var vectors: CPointer<GOutputVector>?
        get() = memberAt<CPointerVar<GOutputVector>>(8).value
        set(value) { memberAt<CPointerVar<GOutputVector>>(8).value = value }
    
    var num_vectors: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var bytes_sent: guint
        get() = memberAt<guintVar>(20).value
        set(value) { memberAt<guintVar>(20).value = value }
    
    var control_messages: CPointer<CPointerVar<GSocketControlMessage>>?
        get() = memberAt<CPointerVar<CPointerVar<GSocketControlMessage>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GSocketControlMessage>>>(24).value = value }
    
    var num_control_messages: guint
        get() = memberAt<guintVar>(32).value
        set(value) { memberAt<guintVar>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusProxy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusProxyPrivate>?
        get() = memberAt<CPointerVar<GDBusProxyPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusProxyPrivate>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; }")
class _GDBusErrorEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var error_code: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var dbus_error_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3[8]; }")
class _GDBusInterfaceVTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    var method_call: GDBusInterfaceMethodCallFunc?
        get() = memberAt<GDBusInterfaceMethodCallFuncVar>(0).value
        set(value) { memberAt<GDBusInterfaceMethodCallFuncVar>(0).value = value }
    
    var get_property: GDBusInterfaceGetPropertyFunc?
        get() = memberAt<GDBusInterfaceGetPropertyFuncVar>(8).value
        set(value) { memberAt<GDBusInterfaceGetPropertyFuncVar>(8).value = value }
    
    var set_property: GDBusInterfaceSetPropertyFunc?
        get() = memberAt<GDBusInterfaceSetPropertyFuncVar>(16).value
        set(value) { memberAt<GDBusInterfaceSetPropertyFuncVar>(16).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(24)
}

@CStruct("struct { unsigned int p0; int p1; void* p2; }")
class _GError(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var domain: GQuark
        get() = memberAt<GQuarkVar>(0).value
        set(value) { memberAt<GQuarkVar>(0).value = value }
    
    var code: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
    
    var message: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3[8]; }")
class _GDBusSubtreeVTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    var enumerate: GDBusSubtreeEnumerateFunc?
        get() = memberAt<GDBusSubtreeEnumerateFuncVar>(0).value
        set(value) { memberAt<GDBusSubtreeEnumerateFuncVar>(0).value = value }
    
    var introspect: GDBusSubtreeIntrospectFunc?
        get() = memberAt<GDBusSubtreeIntrospectFuncVar>(8).value
        set(value) { memberAt<GDBusSubtreeIntrospectFuncVar>(8).value = value }
    
    var dispatch: GDBusSubtreeDispatchFunc?
        get() = memberAt<GDBusSubtreeDispatchFuncVar>(16).value
        set(value) { memberAt<GDBusSubtreeDispatchFuncVar>(16).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(24)
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDBusInterfaceInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var methods: CPointer<CPointerVar<GDBusMethodInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusMethodInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusMethodInfo>>>(16).value = value }
    
    var signals: CPointer<CPointerVar<GDBusSignalInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusSignalInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusSignalInfo>>>(24).value = value }
    
    var properties: CPointer<CPointerVar<GDBusPropertyInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusPropertyInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusPropertyInfo>>>(32).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(40).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; void* p4; }")
class _GDBusMethodInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var in_args: CPointer<CPointerVar<GDBusArgInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value = value }
    
    var out_args: CPointer<CPointerVar<GDBusArgInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(24).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GDBusArgInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var signature: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GDBusAnnotationInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var key: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var value: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GDBusSignalInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var args: CPointer<CPointerVar<GDBusArgInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusArgInfo>>>(16).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; unsigned int p3; void* p4; }")
class _GDBusPropertyInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var signature: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var flags: GDBusPropertyInfoFlags
        get() = memberAt<GDBusPropertyInfoFlagsVar>(24).value
        set(value) { memberAt<GDBusPropertyInfoFlagsVar>(24).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value = value }
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; void* p4; }")
class _GDBusNodeInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ref_count: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var path: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var interfaces: CPointer<CPointerVar<GDBusInterfaceInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusInterfaceInfo>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusInterfaceInfo>>>(16).value = value }
    
    var nodes: CPointer<CPointerVar<GDBusNodeInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusNodeInfo>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusNodeInfo>>>(24).value = value }
    
    var annotations: CPointer<CPointerVar<GDBusAnnotationInfo>>?
        get() = memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<GDBusAnnotationInfo>>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusInterfaceSkeleton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusInterfaceSkeletonPrivate>?
        get() = memberAt<CPointerVar<GDBusInterfaceSkeletonPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusInterfaceSkeletonPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectSkeleton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectSkeletonPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectSkeletonPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectSkeletonPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectProxy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectProxyPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectProxyPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectProxyPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectManagerClient(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectManagerClientPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectManagerClientPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectManagerClientPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GDBusObjectManagerServer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GDBusObjectManagerServerPrivate>?
        get() = memberAt<CPointerVar<GDBusObjectManagerServerPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GDBusObjectManagerServerPrivate>>(24).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GActionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_name: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var get_parameter_type: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(24).value = value }
    
    var get_state_type: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariantType>?>>>(32).value = value }
    
    var get_state_hint: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(40).value = value }
    
    var get_enabled: CPointer<CFunction<(CPointer<GAction>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> gboolean>>>(48).value = value }
    
    var get_state: CPointer<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?) -> CPointer<GVariant>?>>>(56).value = value }
    
    var change_state: CPointer<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(64).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAction>?, CPointer<GVariant>?) -> Unit>>>(72).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GActionGroupInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var has_action: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(16).value = value }
    
    var list_actions: CPointer<CFunction<(CPointer<GActionGroup>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value = value }
    
    var get_action_enabled: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> gboolean>>>(32).value = value }
    
    var get_action_parameter_type: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(40).value = value }
    
    var get_action_state_type: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariantType>?>>>(48).value = value }
    
    var get_action_state_hint: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(56).value = value }
    
    var get_action_state: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> CPointer<GVariant>?>>>(64).value = value }
    
    var change_action_state: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(72).value = value }
    
    var activate_action: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(80).value = value }
    
    var action_added: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(88).value = value }
    
    var action_removed: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?) -> Unit>>>(96).value = value }
    
    var action_enabled_changed: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, gboolean) -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, gboolean) -> Unit>>>(104).value = value }
    
    var action_state_changed: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(112).value = value }
    
    var query_action: CPointer<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<gbooleanVar>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariant>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<gbooleanVar>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariant>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionGroup>?, CPointer<gcharVar>?, CPointer<gbooleanVar>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariantType>>?, CPointer<CPointerVar<GVariant>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(120).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GActionMapInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var lookup_action: CPointer<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> CPointer<GAction>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> CPointer<GAction>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> CPointer<GAction>?>>>(16).value = value }
    
    var add_action: CPointer<CFunction<(CPointer<GActionMap>?, CPointer<GAction>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<GAction>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<GAction>?) -> Unit>>>(24).value = value }
    
    var remove_action: CPointer<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GActionMap>?, CPointer<gcharVar>?) -> Unit>>>(32).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; unsigned long p5[3]; }")
class _GActionEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(8).value = value }
    
    var parameter_type: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var state: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var change_state: CPointer<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSimpleAction>?, CPointer<GVariant>?, gpointer?) -> Unit>>>(32).value = value }
    
    val padding: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(40)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GAppLaunchContextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_display: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(136).value = value }
    
    var get_startup_notify_id: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GList>?) -> CPointer<ByteVar>?>>>(144).value = value }
    
    var launch_failed: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<ByteVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<ByteVar>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<ByteVar>?) -> Unit>>>(152).value = value }
    
    var launched: CPointer<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GVariant>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppLaunchContext>?, CPointer<GAppInfo>?, CPointer<GVariant>?) -> Unit>>>(160).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; }")
class _GAppInfoIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var dup: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<GAppInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GAppInfo>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GAppInfo>?>>>(16).value = value }
    
    var equal: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAppInfo>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAppInfo>?) -> gboolean>>>(24).value = value }
    
    var get_id: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(32).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(40).value = value }
    
    var get_description: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(48).value = value }
    
    var get_executable: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(56).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GIcon>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<GIcon>?>>>(64).value = value }
    
    var launch: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(72).value = value }
    
    var supports_uris: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(80).value = value }
    
    var supports_files: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(88).value = value }
    
    var launch_uris: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value = value }
    
    var should_show: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(104).value = value }
    
    var set_as_default_for_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value = value }
    
    var set_as_default_for_extension: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value = value }
    
    var add_supports_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(128).value = value }
    
    var can_remove_supports_type: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(136).value = value }
    
    var remove_supports_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value = value }
    
    var can_delete: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(152).value = value }
    
    var do_delete: CPointer<CFunction<(CPointer<GAppInfo>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> gboolean>>>(160).value = value }
    
    var get_commandline: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(168).value = value }
    
    var get_display_name: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<ByteVar>?>>>(176).value = value }
    
    var set_as_last_used_for_type: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value = value }
    
    var get_supported_types: CPointer<CFunction<(CPointer<GAppInfo>?) -> CPointer<CPointerVar<ByteVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<CPointerVar<ByteVar>>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?) -> CPointer<CPointerVar<ByteVar>>?>>>(192).value = value }
    
    var launch_uris_async: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GList>?, CPointer<GAppLaunchContext>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var launch_uris_finish: CPointer<CFunction<(CPointer<GAppInfo>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAppInfo>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16[7]; }")
class _GApplicationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var startup: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(136).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(144).value = value }
    
    var open: CPointer<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<GFile>>?, gint, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<GFile>>?, gint, CPointer<gcharVar>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<GFile>>?, gint, CPointer<gcharVar>?) -> Unit>>>(152).value = value }
    
    var command_line: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GApplicationCommandLine>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GApplicationCommandLine>?) -> Int>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GApplicationCommandLine>?) -> Int>>>(160).value = value }
    
    var local_command_line: CPointer<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?, CPointer<IntVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?, CPointer<IntVar>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?, CPointer<IntVar>?) -> gboolean>>>(168).value = value }
    
    var before_emit: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(176).value = value }
    
    var after_emit: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariant>?) -> Unit>>>(184).value = value }
    
    var add_platform_data: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariantBuilder>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantBuilder>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantBuilder>?) -> Unit>>>(192).value = value }
    
    var quit_mainloop: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(200).value = value }
    
    var run_mainloop: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(208).value = value }
    
    var shutdown: CPointer<CFunction<(CPointer<GApplication>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> Unit>>>(216).value = value }
    
    var dbus_register: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value = value }
    
    var dbus_unregister: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GDBusConnection>?, CPointer<gcharVar>?) -> Unit>>>(232).value = value }
    
    var handle_local_options: CPointer<CFunction<(CPointer<GApplication>?, CPointer<GVariantDict>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantDict>?) -> gint>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?, CPointer<GVariantDict>?) -> gint>>>(240).value = value }
    
    var name_lost: CPointer<CFunction<(CPointer<GApplication>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> gboolean>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplication>?) -> gboolean>>>(248).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(256)
}

@CStruct("struct { union { struct { unsigned long p0; void* p1; unsigned long p2[14]; } p0; unsigned long p1[16]; } p0; }")
class _GVariantBuilder(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val u: anonymousStruct3
        get() = memberAt(0)
}

@CStruct("union { struct { unsigned long p0; void* p1; unsigned long p2[14]; } p0; unsigned long p1[16]; }")
class anonymousStruct3(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val s: anonymousStruct4
        get() = memberAt(0)
    
    val x: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(0)
}

@CStruct("struct { unsigned long p0; void* p1; unsigned long p2[14]; }")
class anonymousStruct4(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    var partial_magic: gsize
        get() = memberAt<gsizeVar>(0).value
        set(value) { memberAt<gsizeVar>(0).value = value }
    
    var type: CPointer<GVariantType>?
        get() = memberAt<CPointerVar<GVariantType>>(8).value
        set(value) { memberAt<CPointerVar<GVariantType>>(8).value = value }
    
    val y: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { union { struct { void* p0; unsigned long p1; unsigned long p2[14]; } p0; unsigned long p1[16]; } p0; }")
class _GVariantDict(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val u: anonymousStruct5
        get() = memberAt(0)
}

@CStruct("union { struct { void* p0; unsigned long p1; unsigned long p2[14]; } p0; unsigned long p1[16]; }")
class anonymousStruct5(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val s: anonymousStruct6
        get() = memberAt(0)
    
    val x: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(0)
}

@CStruct("struct { void* p0; unsigned long p1; unsigned long p2[14]; }")
class anonymousStruct6(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    var asv: CPointer<GVariant>?
        get() = memberAt<CPointerVar<GVariant>>(0).value
        set(value) { memberAt<CPointerVar<GVariant>>(0).value = value }
    
    var partial_magic: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
    
    val y: CArrayPointer<gsizeVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { void* p0; char p1; int p2; unsigned int p3; void* p4; void* p5; void* p6; }")
class _GOptionEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var long_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var short_name: gchar
        get() = memberAt<gcharVar>(8).value
        set(value) { memberAt<gcharVar>(8).value = value }
    
    var flags: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
    
    var arg: GOptionArg
        get() = memberAt<GOptionArg.Var>(16).value
        set(value) { memberAt<GOptionArg.Var>(16).value = value }
    
    var arg_data: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
    
    var description: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
    
    var arg_description: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(40).value
        set(value) { memberAt<CPointerVar<gcharVar>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4[11]; }")
class _GApplicationCommandLineClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var print_literal: CPointer<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(136).value = value }
    
    var printerr_literal: CPointer<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?, CPointer<gcharVar>?) -> Unit>>>(144).value = value }
    
    var get_stdin: CPointer<CFunction<(CPointer<GApplicationCommandLine>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?) -> CPointer<GInputStream>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GApplicationCommandLine>?) -> CPointer<GInputStream>?>>>(152).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(160)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; }")
class _GInitableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var init: CPointer<CFunction<(CPointer<GInitable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInitable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInitable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(16).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GAsyncInitableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var init_async: CPointer<CFunction<(CPointer<GAsyncInitable>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(16).value = value }
    
    var init_finish: CPointer<CFunction<(CPointer<GAsyncInitable>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncInitable>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GAsyncResultIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_user_data: CPointer<CFunction<(CPointer<GAsyncResult>?) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> gpointer?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> gpointer?>>>(16).value = value }
    
    var get_source_object: CPointer<CFunction<(CPointer<GAsyncResult>?) -> CPointer<GObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> CPointer<GObject>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?) -> CPointer<GObject>?>>>(24).value = value }
    
    var is_tagged: CPointer<CFunction<(CPointer<GAsyncResult>?, gpointer?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?, gpointer?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GAsyncResult>?, gpointer?) -> gboolean>>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var read_fn: CPointer<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value = value }
    
    var skip: CPointer<CFunction<(CPointer<GInputStream>?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var read_async: CPointer<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value = value }
    
    var read_finish: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(168).value = value }
    
    var skip_async: CPointer<CFunction<(CPointer<GInputStream>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var skip_finish: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(184).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GInputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; }")
class _GFilterInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val parent_class: GInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GBufferedInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GFilterInputStreamClass
        get() = memberAt(0)
    
    var fill: CPointer<CFunction<(CPointer<GBufferedInputStream>?, gssize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(272).value = value }
    
    var fill_async: CPointer<CFunction<(CPointer<GBufferedInputStream>?, gssize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, gssize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value = value }
    
    var fill_finish: CPointer<CFunction<(CPointer<GBufferedInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GBufferedInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(288).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; }")
class _GOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var write_fn: CPointer<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(136).value = value }
    
    var splice: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(144).value = value }
    
    var flush: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value = value }
    
    var write_async: CPointer<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, COpaquePointer?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var write_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(176).value = value }
    
    var splice_async: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GInputStream>?, GOutputStreamSpliceFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value = value }
    
    var splice_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gssize>>>(192).value = value }
    
    var flush_async: CPointer<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var flush_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(208).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(224).value = value }
    
    var writev_fn: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(232).value = value }
    
    var writev_async: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GOutputVector>?, gsize, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value = value }
    
    var writev_finish: CPointer<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GOutputStream>?, CPointer<GAsyncResult>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(248).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; }")
class _GFilterOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(320, 8)
    
    val parent_class: GOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; }")
class _GBufferedOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GFilterOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GCancellableClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var cancelled: CPointer<CFunction<(CPointer<GCancellable>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GCancellable>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GCancellable>?) -> Unit>>>(136).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
}

@CStruct("struct { int p0; unsigned short p1; unsigned short p2; }")
class _GPollFD(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var fd: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var events: gushort
        get() = memberAt<gushortVar>(4).value
        set(value) { memberAt<gushortVar>(4).value = value }
    
    var revents: gushort
        get() = memberAt<gushortVar>(6).value
        set(value) { memberAt<gushortVar>(6).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GConverterIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var convert: CPointer<CFunction<(CPointer<GConverter>?, COpaquePointer?, gsize, COpaquePointer?, gsize, GConverterFlags, CPointer<gsizeVar>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GConverterResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GConverter>?, COpaquePointer?, gsize, COpaquePointer?, gsize, GConverterFlags, CPointer<gsizeVar>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GConverterResult>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GConverter>?, COpaquePointer?, gsize, COpaquePointer?, gsize, GConverterFlags, CPointer<gsizeVar>?, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GConverterResult>>>(16).value = value }
    
    var reset: CPointer<CFunction<(CPointer<GConverter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GConverter>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GConverter>?) -> Unit>>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GCharsetConverterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GConverterInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GFilterInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GConverterOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(360, 8)
    
    val parent_class: GFilterOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDatagramBasedInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var receive_messages: CPointer<CFunction<(CPointer<GDatagramBased>?, CPointer<GInputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GInputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GInputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(16).value = value }
    
    var send_messages: CPointer<CFunction<(CPointer<GDatagramBased>?, CPointer<GOutputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GOutputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, CPointer<GOutputMessage>?, guint, gint, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gint>>>(24).value = value }
    
    var create_source: CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition, CPointer<GCancellable>?) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value = value }
    
    var condition_check: CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition) -> GIOCondition>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition) -> GIOCondition>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition) -> GIOCondition>>>(40).value = value }
    
    var condition_wait: CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gint64, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDataInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(376, 8)
    
    val parent_class: GBufferedInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GDataOutputStream(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GFilterOutputStream
        get() = memberAt(0)
    
    var priv: CPointer<GDataOutputStreamPrivate>?
        get() = memberAt<CPointerVar<GDataOutputStreamPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GDataOutputStreamPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDataOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(360, 8)
    
    val parent_class: GFilterOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; unsigned long p2; }")
class _GString(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var str: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var len: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
    
    var allocated_len: gsize
        get() = memberAt<gsizeVar>(16).value
        set(value) { memberAt<gsizeVar>(16).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3[32]; }")
class _GDBusProxyClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(408, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var g_properties_changed: CPointer<CFunction<(CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(136).value = value }
    
    var g_signal: CPointer<CFunction<(CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(144).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(152)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; }")
class _GDriveIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(16).value = value }
    
    var disconnected: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(24).value = value }
    
    var eject_button: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(32).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<ByteVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<ByteVar>?>>>(40).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(48).value = value }
    
    var has_volumes: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(56).value = value }
    
    var get_volumes: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GList>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GList>?>>>(64).value = value }
    
    var is_media_removable: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(72).value = value }
    
    var has_media: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(80).value = value }
    
    var is_media_check_automatic: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(88).value = value }
    
    var can_eject: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(96).value = value }
    
    var can_poll_for_media: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(104).value = value }
    
    var eject: CPointer<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value = value }
    
    var eject_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value = value }
    
    var poll_for_media: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value = value }
    
    var poll_for_media_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value = value }
    
    var get_identifier: CPointer<CFunction<(CPointer<GDrive>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(144).value = value }
    
    var enumerate_identifiers: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<CPointerVar<ByteVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<CPointerVar<ByteVar>>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<CPointerVar<ByteVar>>?>>>(152).value = value }
    
    var get_start_stop_type: CPointer<CFunction<(CPointer<GDrive>?) -> GDriveStartStopType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> GDriveStartStopType>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> GDriveStartStopType>>>(160).value = value }
    
    var can_start: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(168).value = value }
    
    var can_start_degraded: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(176).value = value }
    
    var start: CPointer<CFunction<(CPointer<GDrive>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(184).value = value }
    
    var start_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value = value }
    
    var can_stop: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(200).value = value }
    
    var stop: CPointer<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(208).value = value }
    
    var stop_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(216).value = value }
    
    var stop_button: CPointer<CFunction<(CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> Unit>>>(224).value = value }
    
    var eject_with_operation: CPointer<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(232).value = value }
    
    var eject_with_operation_finish: CPointer<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(240).value = value }
    
    var get_sort_key: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<gcharVar>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<gcharVar>?>>>(248).value = value }
    
    var get_symbolic_icon: CPointer<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> CPointer<GIcon>?>>>(256).value = value }
    
    var is_removable: CPointer<CFunction<(CPointer<GDrive>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDrive>?) -> gboolean>>>(264).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GDtlsConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var accept_certificate: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(16).value = value }
    
    var handshake: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value = value }
    
    var handshake_async: CPointer<CFunction<(CPointer<GDtlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value = value }
    
    var handshake_finish: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value = value }
    
    var shutdown: CPointer<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value = value }
    
    var shutdown_async: CPointer<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, gboolean, gboolean, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(56).value = value }
    
    var shutdown_finish: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(64).value = value }
    
    var set_advertised_protocols: CPointer<CFunction<(CPointer<GDtlsConnection>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(72).value = value }
    
    var get_negotiated_protocol: CPointer<CFunction<(CPointer<GDtlsConnection>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?) -> CPointer<gcharVar>?>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDtlsConnection>?) -> CPointer<gcharVar>?>>>(80).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GDtlsClientConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GDtlsServerConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GIconIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var hash: CPointer<CFunction<(CPointer<GIcon>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> guint>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> guint>>>(16).value = value }
    
    var equal: CPointer<CFunction<(CPointer<GIcon>?, CPointer<GIcon>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GIcon>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GIcon>?) -> gboolean>>>(24).value = value }
    
    var to_tokens: CPointer<CFunction<(CPointer<GIcon>?, CPointer<GPtrArray>?, CPointer<gintVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GPtrArray>?, CPointer<gintVar>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?, CPointer<GPtrArray>?, CPointer<gintVar>?) -> gboolean>>>(32).value = value }
    
    var from_tokens: CPointer<CFunction<(CPointer<CPointerVar<gcharVar>>?, gint, gint, CPointer<CPointerVar<GError>>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<CPointerVar<gcharVar>>?, gint, gint, CPointer<CPointerVar<GError>>?) -> CPointer<GIcon>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<CPointerVar<gcharVar>>?, gint, gint, CPointer<CPointerVar<GError>>?) -> CPointer<GIcon>?>>>(40).value = value }
    
    var serialize: CPointer<CFunction<(CPointer<GIcon>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> CPointer<GVariant>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIcon>?) -> CPointer<GVariant>?>>>(48).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GPtrArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var pdata: CPointer<gpointerVar>?
        get() = memberAt<CPointerVar<gpointerVar>>(0).value
        set(value) { memberAt<CPointerVar<gpointerVar>>(0).value = value }
    
    var len: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GEmblemedIcon(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GEmblemedIconPrivate>?
        get() = memberAt<CPointerVar<GEmblemedIconPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GEmblemedIconPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GEmblemedIconClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; }")
class _GFileEnumeratorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(240, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var next_file: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(136).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(144).value = value }
    
    var next_files_async: CPointer<CFunction<(CPointer<GFileEnumerator>?, Int, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var next_files_finish: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GFileEnumerator>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; void* p87; void* p88; void* p89; void* p90; void* p91; void* p92; void* p93; int p94; void* p95; void* p96; void* p97; void* p98; void* p99; void* p100; void* p101; void* p102; void* p103; }")
class _GFileIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(840, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var dup: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(16).value = value }
    
    var hash: CPointer<CFunction<(CPointer<GFile>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> guint>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> guint>>>(24).value = value }
    
    var equal: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(32).value = value }
    
    var is_native: CPointer<CFunction<(CPointer<GFile>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> gboolean>>>(40).value = value }
    
    var has_uri_scheme: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> gboolean>>>(48).value = value }
    
    var get_uri_scheme: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(56).value = value }
    
    var get_basename: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(64).value = value }
    
    var get_path: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(72).value = value }
    
    var get_uri: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(80).value = value }
    
    var get_parse_name: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<ByteVar>?>>>(88).value = value }
    
    var get_parent: CPointer<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?) -> CPointer<GFile>?>>>(96).value = value }
    
    var prefix_matches: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> gboolean>>>(104).value = value }
    
    var get_relative_path: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> CPointer<ByteVar>?>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?) -> CPointer<ByteVar>?>>>(112).value = value }
    
    var resolve_relative_path: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(120).value = value }
    
    var get_child_for_display_name: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(128).value = value }
    
    var enumerate_children: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(136).value = value }
    
    var enumerate_children_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var enumerate_children_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileEnumerator>?>>>(152).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(160).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(176).value = value }
    
    var query_filesystem_info: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(184).value = value }
    
    var query_filesystem_info_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value = value }
    
    var query_filesystem_info_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(200).value = value }
    
    var find_enclosing_mount: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(208).value = value }
    
    var find_enclosing_mount_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(216).value = value }
    
    var find_enclosing_mount_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GMount>?>>>(224).value = value }
    
    var set_display_name: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(232).value = value }
    
    var set_display_name_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value = value }
    
    var set_display_name_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(248).value = value }
    
    var query_settable_attributes: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(256).value = value }
    
    var _query_settable_attributes_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _query_settable_attributes_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var query_writable_namespaces: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileAttributeInfoList>?>>>(280).value = value }
    
    var _query_writable_namespaces_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _query_writable_namespaces_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var set_attribute: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileAttributeType, gpointer?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileAttributeType, gpointer?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, GFileAttributeType, gpointer?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(304).value = value }
    
    var set_attributes_from_info: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value = value }
    
    var set_attributes_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(320).value = value }
    
    var set_attributes_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GFileInfo>>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GFileInfo>>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GFileInfo>>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value = value }
    
    var read_fn: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(336).value = value }
    
    var read_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value = value }
    
    var read_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInputStream>?>>>(352).value = value }
    
    var append_to: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(360).value = value }
    
    var append_to_async: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(368).value = value }
    
    var append_to_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(376).value = value }
    
    var create: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(384).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(384).value = value }
    
    var create_async: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(392).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(392).value = value }
    
    var create_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(400).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(400).value = value }
    
    var replace: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(408).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(408).value = value }
    
    var replace_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(416).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(416).value = value }
    
    var replace_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(424).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileOutputStream>?>>>(424).value = value }
    
    var delete_file: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(432).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(432).value = value }
    
    var delete_file_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(440).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(440).value = value }
    
    var delete_file_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(448).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(448).value = value }
    
    var trash: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(456).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(456).value = value }
    
    var trash_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(464).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(464).value = value }
    
    var trash_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(472).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(472).value = value }
    
    var make_directory: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(480).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(480).value = value }
    
    var make_directory_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(488).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(488).value = value }
    
    var make_directory_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(496).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(496).value = value }
    
    var make_symbolic_link: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(504).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(504).value = value }
    
    var _make_symbolic_link_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(512).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(512).value = value }
    
    var _make_symbolic_link_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(520).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(520).value = value }
    
    var copy: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(528).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(528).value = value }
    
    var copy_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, Int, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, Int, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(536).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, Int, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(536).value = value }
    
    var copy_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(544).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(544).value = value }
    
    var move: CPointer<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(552).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GFile>?, GFileCopyFlags, CPointer<GCancellable>?, GFileProgressCallback?, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(552).value = value }
    
    var _move_async: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(560).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(560).value = value }
    
    var _move_finish: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(568).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(568).value = value }
    
    var mount_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(576).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(576).value = value }
    
    var mount_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(584).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFile>?>>>(584).value = value }
    
    var unmount_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(592).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(592).value = value }
    
    var unmount_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(600).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(600).value = value }
    
    var eject_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(608).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(608).value = value }
    
    var eject_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(616).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(616).value = value }
    
    var mount_enclosing_volume: CPointer<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(624).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(624).value = value }
    
    var mount_enclosing_volume_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(632).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(632).value = value }
    
    var monitor_dir: CPointer<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(640).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(640).value = value }
    
    var monitor_file: CPointer<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(648).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMonitorFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileMonitor>?>>>(648).value = value }
    
    var open_readwrite: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(656).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(656).value = value }
    
    var open_readwrite_async: CPointer<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(664).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(664).value = value }
    
    var open_readwrite_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(672).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(672).value = value }
    
    var create_readwrite: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(680).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(680).value = value }
    
    var create_readwrite_async: CPointer<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(688).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(688).value = value }
    
    var create_readwrite_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(696).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(696).value = value }
    
    var replace_readwrite: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(704).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(704).value = value }
    
    var replace_readwrite_async: CPointer<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(712).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<ByteVar>?, gboolean, GFileCreateFlags, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(712).value = value }
    
    var replace_readwrite_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(720).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileIOStream>?>>>(720).value = value }
    
    var start_mountable: CPointer<CFunction<(CPointer<GFile>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(728).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GDriveStartFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(728).value = value }
    
    var start_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(736).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(736).value = value }
    
    var stop_mountable: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(744).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(744).value = value }
    
    var stop_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(752).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(752).value = value }
    
    var supports_thread_contexts: gboolean
        get() = memberAt<gbooleanVar>(760).value
        set(value) { memberAt<gbooleanVar>(760).value = value }
    
    var unmount_mountable_with_operation: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(768).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(768).value = value }
    
    var unmount_mountable_with_operation_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(776).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(776).value = value }
    
    var eject_mountable_with_operation: CPointer<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(784).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(784).value = value }
    
    var eject_mountable_with_operation_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(792).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(792).value = value }
    
    var poll_mountable: CPointer<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(800).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(800).value = value }
    
    var poll_mountable_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(808).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(808).value = value }
    
    var measure_disk_usage: CPointer<CFunction<(CPointer<GFile>?, GFileMeasureFlags, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(816).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(816).value = value }
    
    var measure_disk_usage_async: CPointer<CFunction<(CPointer<GFile>?, GFileMeasureFlags, gint, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, gint, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, GFileMeasureFlags, gint, CPointer<GCancellable>?, GFileMeasureProgressCallback?, gpointer?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(824).value = value }
    
    var measure_disk_usage_finish: CPointer<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFile>?, CPointer<GAsyncResult>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<guint64Var>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(832).value = value }
}

@CStruct("struct { long p0; long p1; }")
class _GTimeVal(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var tv_sec: glong
        get() = memberAt<glongVar>(0).value
        set(value) { memberAt<glongVar>(0).value = value }
    
    var tv_usec: glong
        get() = memberAt<glongVar>(8).value
        set(value) { memberAt<glongVar>(8).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; }")
class _GFileInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GInputStreamClass
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GFileInputStream>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> goffset>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> goffset>>>(248).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GFileInputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> gboolean>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?) -> gboolean>>>(256).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GFileInputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(272).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(280).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFileInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileInputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(288).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; }")
class _GIOStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(256, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_input_stream: CPointer<CFunction<(CPointer<GIOStream>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GInputStream>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GInputStream>?>>>(136).value = value }
    
    var get_output_stream: CPointer<CFunction<(CPointer<GIOStream>?) -> CPointer<GOutputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GOutputStream>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?) -> CPointer<GOutputStream>?>>>(144).value = value }
    
    var close_fn: CPointer<CFunction<(CPointer<GIOStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var close_async: CPointer<CFunction<(CPointer<GIOStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(160).value = value }
    
    var close_finish: CPointer<CFunction<(CPointer<GIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(168).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved9: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _g_reserved10: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GFileIOStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(368, 8)
    
    val parent_class: GIOStreamClass
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GFileIOStream>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> goffset>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> goffset>>>(256).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(264).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GFileIOStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(272).value = value }
    
    var can_truncate: CPointer<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> gboolean>>>(280).value = value }
    
    var truncate_fn: CPointer<CFunction<(CPointer<GFileIOStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(288).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(296).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(304).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFileIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(312).value = value }
    
    var get_etag: CPointer<CFunction<(CPointer<GFileIOStream>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> CPointer<ByteVar>?>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileIOStream>?) -> CPointer<ByteVar>?>>>(320).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GFileMonitorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GFileMonitor>?, CPointer<GFile>?, CPointer<GFile>?, GFileMonitorEvent) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?, CPointer<GFile>?, CPointer<GFile>?, GFileMonitorEvent) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?, CPointer<GFile>?, CPointer<GFile>?, GFileMonitorEvent) -> Unit>>>(136).value = value }
    
    var cancel: CPointer<CFunction<(CPointer<GFileMonitor>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileMonitor>?) -> gboolean>>>(144).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GFilenameCompleterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var got_completion_data: CPointer<CFunction<(CPointer<GFilenameCompleter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFilenameCompleter>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFilenameCompleter>?) -> Unit>>>(136).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GFileOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(408, 8)
    
    val parent_class: GOutputStreamClass
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> goffset>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> goffset>>>(296).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(304).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GFileOutputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(312).value = value }
    
    var can_truncate: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> gboolean>>>(320).value = value }
    
    var truncate_fn: CPointer<CFunction<(CPointer<GFileOutputStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(328).value = value }
    
    var query_info: CPointer<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(336).value = value }
    
    var query_info_async: CPointer<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<ByteVar>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(344).value = value }
    
    var query_info_finish: CPointer<CFunction<(CPointer<GFileOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GFileInfo>?>>>(352).value = value }
    
    var get_etag: CPointer<CFunction<(CPointer<GFileOutputStream>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> CPointer<ByteVar>?>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GFileOutputStream>?) -> CPointer<ByteVar>?>>>(360).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(384).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(384).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(392).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(392).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(400).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(400).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; }")
class _GInetAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(152, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var to_string: CPointer<CFunction<(CPointer<GInetAddress>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<gcharVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<gcharVar>?>>>(136).value = value }
    
    var to_bytes: CPointer<CFunction<(CPointer<GInetAddress>?) -> CPointer<guint8Var>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<guint8Var>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GInetAddress>?) -> CPointer<guint8Var>?>>>(144).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GInetAddressMaskClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; }")
class _GSocketAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_family: CPointer<CFunction<(CPointer<GSocketAddress>?) -> GSocketFamily>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> GSocketFamily>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> GSocketFamily>>>(136).value = value }
    
    var get_native_size: CPointer<CFunction<(CPointer<GSocketAddress>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> gssize>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?) -> gssize>>>(144).value = value }
    
    var to_native: CPointer<CFunction<(CPointer<GSocketAddress>?, gpointer?, gsize, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?, gpointer?, gsize, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddress>?, gpointer?, gsize, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; }")
class _GInetSocketAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GSocketAddressClass
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GLoadableIconIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var load: CPointer<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<CPointerVar<ByteVar>>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<CPointerVar<ByteVar>>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<CPointerVar<ByteVar>>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(16).value = value }
    
    var load_async: CPointer<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value = value }
    
    var load_finish: CPointer<CFunction<(CPointer<GLoadableIcon>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GLoadableIcon>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<GError>>?) -> CPointer<GInputStream>?>>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GMemoryInputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(288, 8)
    
    val parent_class: GInputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GMemoryOutputStreamClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GOutputStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; }")
class _GMountIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(232, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(16).value = value }
    
    var unmounted: CPointer<CFunction<(CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(24).value = value }
    
    var get_root: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(32).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(40).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(48).value = value }
    
    var get_uuid: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<ByteVar>?>>>(56).value = value }
    
    var get_volume: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GVolume>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GVolume>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GVolume>?>>>(64).value = value }
    
    var get_drive: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GDrive>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GDrive>?>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GDrive>?>>>(72).value = value }
    
    var can_unmount: CPointer<CFunction<(CPointer<GMount>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(80).value = value }
    
    var can_eject: CPointer<CFunction<(CPointer<GMount>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> gboolean>>>(88).value = value }
    
    var unmount: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(96).value = value }
    
    var unmount_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(104).value = value }
    
    var eject: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(112).value = value }
    
    var eject_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(120).value = value }
    
    var remount: CPointer<CFunction<(CPointer<GMount>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(128).value = value }
    
    var remount_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value = value }
    
    var guess_content_type: CPointer<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var guess_content_type_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(152).value = value }
    
    var guess_content_type_sync: CPointer<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, gboolean, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value = value }
    
    var pre_unmount: CPointer<CFunction<(CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> Unit>>>(168).value = value }
    
    var unmount_with_operation: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var unmount_with_operation_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(184).value = value }
    
    var eject_with_operation: CPointer<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(192).value = value }
    
    var eject_with_operation_finish: CPointer<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(200).value = value }
    
    var get_default_location: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GFile>?>>>(208).value = value }
    
    var get_sort_key: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<gcharVar>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<gcharVar>?>>>(216).value = value }
    
    var get_symbolic_icon: CPointer<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?) -> CPointer<GIcon>?>>>(224).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; }")
class _GMountOperationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(256, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var ask_password: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, GAskPasswordFlags) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, GAskPasswordFlags) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, GAskPasswordFlags) -> Unit>>>(136).value = value }
    
    var ask_question: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CArrayPointer<CPointerVar<ByteVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CArrayPointer<CPointerVar<ByteVar>>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<ByteVar>?, CArrayPointer<CPointerVar<ByteVar>>?) -> Unit>>>(144).value = value }
    
    var reply: CPointer<CFunction<(CPointer<GMountOperation>?, GMountOperationResult) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, GMountOperationResult) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, GMountOperationResult) -> Unit>>>(152).value = value }
    
    var aborted: CPointer<CFunction<(CPointer<GMountOperation>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?) -> Unit>>>(160).value = value }
    
    var show_processes: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, CPointer<GArray>?, CArrayPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, CPointer<GArray>?, CArrayPointer<CPointerVar<gcharVar>>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, CPointer<GArray>?, CArrayPointer<CPointerVar<gcharVar>>?) -> Unit>>>(168).value = value }
    
    var show_unmount_progress: CPointer<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, gint64, gint64) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, gint64, gint64) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMountOperation>?, CPointer<gcharVar>?, gint64, gint64) -> Unit>>>(176).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _g_reserved9: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var len: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; }")
class _GNativeSocketAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GSocketAddressClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; }")
class _GVolumeMonitorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var volume_added: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(136).value = value }
    
    var volume_removed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(144).value = value }
    
    var volume_changed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GVolume>?) -> Unit>>>(152).value = value }
    
    var mount_added: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(160).value = value }
    
    var mount_removed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(168).value = value }
    
    var mount_pre_unmount: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(176).value = value }
    
    var mount_changed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GMount>?) -> Unit>>>(184).value = value }
    
    var drive_connected: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(192).value = value }
    
    var drive_disconnected: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(200).value = value }
    
    var drive_changed: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(208).value = value }
    
    var is_supported: CPointer<CFunction<() -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<() -> gboolean>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> gboolean>>>(216).value = value }
    
    var get_connected_drives: CPointer<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(224).value = value }
    
    var get_volumes: CPointer<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(232).value = value }
    
    var get_mounts: CPointer<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?) -> CPointer<GList>?>>>(240).value = value }
    
    var get_volume_for_uuid: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GVolume>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GVolume>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GVolume>?>>>(248).value = value }
    
    var get_mount_for_uuid: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GMount>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<ByteVar>?) -> CPointer<GMount>?>>>(256).value = value }
    
    var adopt_orphan_mount: CPointer<CFunction<(CPointer<GMount>?, CPointer<GVolumeMonitor>?) -> CPointer<GVolume>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GVolumeMonitor>?) -> CPointer<GVolume>?>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMount>?, CPointer<GVolumeMonitor>?) -> CPointer<GVolume>?>>>(264).value = value }
    
    var drive_eject_button: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(272).value = value }
    
    var drive_stop_button: CPointer<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolumeMonitor>?, CPointer<GDrive>?) -> Unit>>>(280).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; }")
class _GNativeVolumeMonitor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GVolumeMonitor
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; } p0; void* p1; }")
class _GNativeVolumeMonitorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(344, 8)
    
    val parent_class: GVolumeMonitorClass
        get() = memberAt(0)
    
    var get_mount_for_mount_path: CPointer<CFunction<(CPointer<ByteVar>?, CPointer<GCancellable>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<ByteVar>?, CPointer<GCancellable>?) -> CPointer<GMount>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<ByteVar>?, CPointer<GCancellable>?) -> CPointer<GMount>?>>>(336).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GNetworkAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GNetworkMonitorInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var network_changed: CPointer<CFunction<(CPointer<GNetworkMonitor>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, gboolean) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, gboolean) -> Unit>>>(16).value = value }
    
    var can_reach: CPointer<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(24).value = value }
    
    var can_reach_async: CPointer<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GSocketConnectable>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value = value }
    
    var can_reach_finish: CPointer<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GNetworkMonitor>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GNetworkServiceClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7[16]; }")
class _GPermissionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var acquire: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(136).value = value }
    
    var acquire_async: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var acquire_finish: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(152).value = value }
    
    var release: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value = value }
    
    var release_async: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var release_finish: CPointer<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPermission>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(176).value = value }
    
    val reserved: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(184)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GPollableInputStreamInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var can_poll: CPointer<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(16).value = value }
    
    var is_readable: CPointer<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?) -> gboolean>>>(24).value = value }
    
    var create_source: CPointer<CFunction<(CPointer<GPollableInputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value = value }
    
    var read_nonblocking: CPointer<CFunction<(CPointer<GPollableInputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableInputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GPollableOutputStreamInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var can_poll: CPointer<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(16).value = value }
    
    var is_writable: CPointer<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?) -> gboolean>>>(24).value = value }
    
    var create_source: CPointer<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GCancellable>?) -> CPointer<GSource>?>>>(32).value = value }
    
    var write_nonblocking: CPointer<CFunction<(CPointer<GPollableOutputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, COpaquePointer?, gsize, CPointer<CPointerVar<GError>>?) -> gssize>>>(40).value = value }
    
    var writev_nonblocking: CPointer<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GPollableReturn>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GPollableReturn>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GPollableOutputStream>?, CPointer<GOutputVector>?, gsize, CPointer<gsizeVar>?, CPointer<CPointerVar<GError>>?) -> GPollableReturn>>>(48).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GProxyInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var connect: CPointer<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(16).value = value }
    
    var connect_async: CPointer<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GIOStream>?, CPointer<GProxyAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(24).value = value }
    
    var connect_finish: CPointer<CFunction<(CPointer<GProxy>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GIOStream>?>>>(32).value = value }
    
    var supports_hostname: CPointer<CFunction<(CPointer<GProxy>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxy>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxy>?) -> gboolean>>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; } p0; }")
class _GProxyAddressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GInetSocketAddressClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; }")
class _GSocketAddressEnumeratorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(160, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var next: CPointer<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(136).value = value }
    
    var next_async: CPointer<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var next_finish: CPointer<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketAddressEnumerator>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GSocketAddress>?>>>(152).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GProxyAddressEnumeratorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GSocketAddressEnumeratorClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GProxyResolverInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var is_supported: CPointer<CFunction<(CPointer<GProxyResolver>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?) -> gboolean>>>(16).value = value }
    
    var lookup: CPointer<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(24).value = value }
    
    var lookup_async: CPointer<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(32).value = value }
    
    var lookup_finish: CPointer<CFunction<(CPointer<GProxyResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GProxyResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<CPointerVar<gcharVar>>?>>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; }")
class _GResolverClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(264, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var reload: CPointer<CFunction<(CPointer<GResolver>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?) -> Unit>>>(136).value = value }
    
    var lookup_by_name: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(144).value = value }
    
    var lookup_by_name_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var lookup_by_name_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(160).value = value }
    
    var lookup_by_address: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(168).value = value }
    
    var lookup_by_address_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GInetAddress>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var lookup_by_address_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<gcharVar>?>>>(184).value = value }
    
    var lookup_service: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(192).value = value }
    
    var lookup_service_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var lookup_service_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(208).value = value }
    
    var lookup_records: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value = value }
    
    var lookup_records_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverRecordType, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value = value }
    
    var lookup_records_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value = value }
    
    var lookup_by_name_with_flags_async: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(240).value = value }
    
    var lookup_by_name_with_flags_finish: CPointer<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(248).value = value }
    
    var lookup_by_name_with_flags: CPointer<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GResolver>?, CPointer<gcharVar>?, GResolverNameLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(256).value = value }
}

@CStruct("struct { void* p0; unsigned long p1; void* p2; void* p3; void* p4; }")
class _GStaticResource(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var data: CPointer<guint8Var>?
        get() = memberAt<CPointerVar<guint8Var>>(0).value
        set(value) { memberAt<CPointerVar<guint8Var>>(0).value = value }
    
    var data_len: gsize
        get() = memberAt<gsizeVar>(8).value
        set(value) { memberAt<gsizeVar>(8).value = value }
    
    var resource: CPointer<GResource>?
        get() = memberAt<CPointerVar<GResource>>(16).value
        set(value) { memberAt<CPointerVar<GResource>>(16).value = value }
    
    var next: CPointer<GStaticResource>?
        get() = memberAt<CPointerVar<GStaticResource>>(24).value
        set(value) { memberAt<CPointerVar<GStaticResource>>(24).value = value }
    
    var padding: gpointer?
        get() = memberAt<gpointerVar>(32).value
        set(value) { memberAt<gpointerVar>(32).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSeekableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var tell: CPointer<CFunction<(CPointer<GSeekable>?) -> goffset>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> goffset>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> goffset>>>(16).value = value }
    
    var can_seek: CPointer<CFunction<(CPointer<GSeekable>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(24).value = value }
    
    var seek: CPointer<CFunction<(CPointer<GSeekable>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, GSeekType, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(32).value = value }
    
    var can_truncate: CPointer<CFunction<(CPointer<GSeekable>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?) -> gboolean>>>(40).value = value }
    
    var truncate_fn: CPointer<CFunction<(CPointer<GSeekable>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSeekable>?, goffset, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(48).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[20]; }")
class _GSettingsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(328, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var writable_changed: CPointer<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(136).value = value }
    
    var changed: CPointer<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<gcharVar>?) -> Unit>>>(144).value = value }
    
    var writable_change_event: CPointer<CFunction<(CPointer<GSettings>?, GQuark) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, GQuark) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, GQuark) -> gboolean>>>(152).value = value }
    
    var change_event: CPointer<CFunction<(CPointer<GSettings>?, CPointer<GQuarkVar>?, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<GQuarkVar>?, gint) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSettings>?, CPointer<GQuarkVar>?, gint) -> gboolean>>>(160).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(168)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1[12]; }")
class _GSimpleActionGroupClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(232, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(136)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSocketClientClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var event: CPointer<CFunction<(CPointer<GSocketClient>?, GSocketClientEvent, CPointer<GSocketConnectable>?, CPointer<GIOStream>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketClient>?, GSocketClientEvent, CPointer<GSocketConnectable>?, CPointer<GIOStream>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketClient>?, GSocketClientEvent, CPointer<GSocketConnectable>?, CPointer<GIOStream>?) -> Unit>>>(136).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GSocketConnectableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var enumerate: CPointer<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(16).value = value }
    
    var proxy_enumerate: CPointer<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<GSocketAddressEnumerator>?>>>(24).value = value }
    
    var to_string: CPointer<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<gcharVar>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketConnectable>?) -> CPointer<gcharVar>?>>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GSocketClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved9: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved10: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GSocketConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GIOStreamClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GSocketControlMessageClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_size: CPointer<CFunction<(CPointer<GSocketControlMessage>?) -> gsize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> gsize>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> gsize>>>(136).value = value }
    
    var get_level: CPointer<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(144).value = value }
    
    var get_type: CPointer<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?) -> Int>>>(152).value = value }
    
    var serialize: CPointer<CFunction<(CPointer<GSocketControlMessage>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketControlMessage>?, gpointer?) -> Unit>>>(160).value = value }
    
    var deserialize: CPointer<CFunction<(Int, Int, gsize, gpointer?) -> CPointer<GSocketControlMessage>?>>?
        get() = memberAt<CPointerVar<CFunction<(Int, Int, gsize, gpointer?) -> CPointer<GSocketControlMessage>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(Int, Int, gsize, gpointer?) -> CPointer<GSocketControlMessage>?>>>(168).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GSocketListenerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GSocketListener>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?) -> Unit>>>(136).value = value }
    
    var event: CPointer<CFunction<(CPointer<GSocketListener>?, GSocketListenerEvent, CPointer<GSocket>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?, GSocketListenerEvent, CPointer<GSocket>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketListener>?, GSocketListenerEvent, CPointer<GSocket>?) -> Unit>>>(144).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GSocketServiceClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GSocketListenerClass
        get() = memberAt(0)
    
    var incoming: CPointer<CFunction<(CPointer<GSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(192).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GSimpleProxyResolver(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GSimpleProxyResolverPrivate>?
        get() = memberAt<CPointerVar<GSimpleProxyResolverPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GSimpleProxyResolverPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GSimpleProxyResolverClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; }")
class _GTcpConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GSocketConnectionClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; } p0; }")
class _GTcpWrapperConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GTcpConnectionClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GThreadedSocketServiceClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GSocketServiceClass
        get() = memberAt(0)
    
    var run: CPointer<CFunction<(CPointer<GThreadedSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GThreadedSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GThreadedSocketService>?, CPointer<GSocketConnection>?, CPointer<GObject>?) -> gboolean>>>(248).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GTlsBackendInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var supports_tls: CPointer<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(16).value = value }
    
    var get_certificate_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(24).value = value }
    
    var get_client_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(32).value = value }
    
    var get_server_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(40).value = value }
    
    var get_file_database_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(48).value = value }
    
    var get_default_database: CPointer<CFunction<(CPointer<GTlsBackend>?) -> CPointer<GTlsDatabase>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> CPointer<GTlsDatabase>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> CPointer<GTlsDatabase>?>>>(56).value = value }
    
    var supports_dtls: CPointer<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsBackend>?) -> gboolean>>>(64).value = value }
    
    var get_dtls_client_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(72).value = value }
    
    var get_dtls_server_connection_type: CPointer<CFunction<() -> GType>>?
        get() = memberAt<CPointerVar<CFunction<() -> GType>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<() -> GType>>>(80).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2[8]; }")
class _GTlsCertificateClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(208, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var verify: CPointer<CFunction<(CPointer<GTlsCertificate>?, CPointer<GSocketConnectable>?, CPointer<GTlsCertificate>?) -> GTlsCertificateFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsCertificate>?, CPointer<GSocketConnectable>?, CPointer<GTlsCertificate>?) -> GTlsCertificateFlags>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsCertificate>?, CPointer<GSocketConnectable>?, CPointer<GTlsCertificate>?) -> GTlsCertificateFlags>>>(136).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(144)
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[8]; }")
class _GTlsConnectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(352, 8)
    
    val parent_class: GIOStreamClass
        get() = memberAt(0)
    
    var accept_certificate: CPointer<CFunction<(CPointer<GTlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GTlsCertificate>?, GTlsCertificateFlags) -> gboolean>>>(256).value = value }
    
    var handshake: CPointer<CFunction<(CPointer<GTlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(264).value = value }
    
    var handshake_async: CPointer<CFunction<(CPointer<GTlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, Int, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(272).value = value }
    
    var handshake_finish: CPointer<CFunction<(CPointer<GTlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsConnection>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(280).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(288)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; }")
class _GTlsClientConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var copy_session_state: CPointer<CFunction<(CPointer<GTlsClientConnection>?, CPointer<GTlsClientConnection>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsClientConnection>?, CPointer<GTlsClientConnection>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsClientConnection>?, CPointer<GTlsClientConnection>?) -> Unit>>>(16).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14[16]; }")
class _GTlsDatabaseClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(368, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var verify_chain: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(136).value = value }
    
    var verify_chain_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<gcharVar>?, CPointer<GSocketConnectable>?, CPointer<GTlsInteraction>?, GTlsDatabaseVerifyFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var verify_chain_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsCertificateFlags>>>(152).value = value }
    
    var create_certificate_handle: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?) -> CPointer<gcharVar>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?) -> CPointer<gcharVar>?>>>(160).value = value }
    
    var lookup_certificate_for_handle: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(168).value = value }
    
    var lookup_certificate_for_handle_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<gcharVar>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(176).value = value }
    
    var lookup_certificate_for_handle_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(184).value = value }
    
    var lookup_certificate_issuer: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(192).value = value }
    
    var lookup_certificate_issuer_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GTlsCertificate>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(200).value = value }
    
    var lookup_certificate_issuer_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GTlsCertificate>?>>>(208).value = value }
    
    var lookup_certificates_issued_by: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(216).value = value }
    
    var lookup_certificates_issued_by_async: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GByteArray>?, CPointer<GTlsInteraction>?, GTlsDatabaseLookupFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(224).value = value }
    
    var lookup_certificates_issued_by_finish: CPointer<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsDatabase>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> CPointer<GList>?>>>(232).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(240)
}

@CStruct("struct { void* p0; unsigned int p1; }")
class _GByteArray(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: CPointer<guint8Var>?
        get() = memberAt<CPointerVar<guint8Var>>(0).value
        set(value) { memberAt<CPointerVar<guint8Var>>(0).value = value }
    
    var len: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1[8]; }")
class _GTlsFileDatabaseInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(16)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7[21]; }")
class _GTlsInteractionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(352, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var ask_password: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(136).value = value }
    
    var ask_password_async: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsPassword>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(144).value = value }
    
    var ask_password_finish: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(152).value = value }
    
    var request_certificate: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(160).value = value }
    
    var request_certificate_async: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GTlsConnection>?, GTlsCertificateRequestFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(168).value = value }
    
    var request_certificate_finish: CPointer<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsInteraction>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> GTlsInteractionResult>>>(176).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(184)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GTlsServerConnectionInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4[4]; }")
class _GTlsPasswordClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_value: CPointer<CFunction<(CPointer<GTlsPassword>?, CPointer<gsizeVar>?) -> CPointer<gucharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gsizeVar>?) -> CPointer<gucharVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gsizeVar>?) -> CPointer<gucharVar>?>>>(136).value = value }
    
    var set_value: CPointer<CFunction<(CPointer<GTlsPassword>?, CPointer<gucharVar>?, gssize, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gucharVar>?, gssize, GDestroyNotify?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?, CPointer<gucharVar>?, gssize, GDestroyNotify?) -> Unit>>>(144).value = value }
    
    var get_default_warning: CPointer<CFunction<(CPointer<GTlsPassword>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?) -> CPointer<gcharVar>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GTlsPassword>?) -> CPointer<gcharVar>?>>>(152).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(160)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; }")
class _GVfsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var is_active: CPointer<CFunction<(CPointer<GVfs>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> gboolean>>>(136).value = value }
    
    var get_file_for_path: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(144).value = value }
    
    var get_file_for_uri: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(152).value = value }
    
    var get_supported_uri_schemes: CPointer<CFunction<(CPointer<GVfs>?) -> CPointer<CPointerVar<gcharVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?) -> CPointer<CPointerVar<gcharVar>>?>>>(160).value = value }
    
    var parse_name: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> CPointer<GFile>?>>>(168).value = value }
    
    var local_file_add_info: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, guint64, CPointer<GFileAttributeMatcher>?, CPointer<GFileInfo>?, CPointer<GCancellable>?, CPointer<gpointerVar>?, CPointer<GDestroyNotifyVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, guint64, CPointer<GFileAttributeMatcher>?, CPointer<GFileInfo>?, CPointer<GCancellable>?, CPointer<gpointerVar>?, CPointer<GDestroyNotifyVar>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, guint64, CPointer<GFileAttributeMatcher>?, CPointer<GFileInfo>?, CPointer<GCancellable>?, CPointer<gpointerVar>?, CPointer<GDestroyNotifyVar>?) -> Unit>>>(176).value = value }
    
    var add_writable_namespaces: CPointer<CFunction<(CPointer<GVfs>?, CPointer<GFileAttributeInfoList>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GFileAttributeInfoList>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GFileAttributeInfoList>?) -> Unit>>>(184).value = value }
    
    var local_file_set_attributes: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<GFileInfo>?, GFileQueryInfoFlags, CPointer<GCancellable>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(192).value = value }
    
    var local_file_removed: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?) -> Unit>>>(200).value = value }
    
    var local_file_moved: CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Unit>>>(208).value = value }
    
    var deserialize_icon: CPointer<CFunction<(CPointer<GVfs>?, CPointer<GVariant>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GVariant>?) -> CPointer<GIcon>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVfs>?, CPointer<GVariant>?) -> CPointer<GIcon>?>>>(216).value = value }
    
    var _g_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _g_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _g_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _g_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _g_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _g_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; }")
class _GVolumeIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(16).value = value }
    
    var removed: CPointer<CFunction<(CPointer<GVolume>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> Unit>>>(24).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(32).value = value }
    
    var get_icon: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(40).value = value }
    
    var get_uuid: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<ByteVar>?>>>(48).value = value }
    
    var get_drive: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GDrive>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GDrive>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GDrive>?>>>(56).value = value }
    
    var get_mount: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GMount>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GMount>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GMount>?>>>(64).value = value }
    
    var can_mount: CPointer<CFunction<(CPointer<GVolume>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(72).value = value }
    
    var can_eject: CPointer<CFunction<(CPointer<GVolume>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(80).value = value }
    
    var mount_fn: CPointer<CFunction<(CPointer<GVolume>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountMountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(88).value = value }
    
    var mount_finish: CPointer<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(96).value = value }
    
    var eject: CPointer<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(104).value = value }
    
    var eject_finish: CPointer<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(112).value = value }
    
    var get_identifier: CPointer<CFunction<(CPointer<GVolume>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<ByteVar>?) -> CPointer<ByteVar>?>>>(120).value = value }
    
    var enumerate_identifiers: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<CPointerVar<ByteVar>>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<CPointerVar<ByteVar>>?>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<CPointerVar<ByteVar>>?>>>(128).value = value }
    
    var should_automount: CPointer<CFunction<(CPointer<GVolume>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> gboolean>>>(136).value = value }
    
    var get_activation_root: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GFile>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GFile>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GFile>?>>>(144).value = value }
    
    var eject_with_operation: CPointer<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, GMountUnmountFlags, CPointer<GMountOperation>?, CPointer<GCancellable>?, GAsyncReadyCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var eject_with_operation_finish: CPointer<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?, CPointer<GAsyncResult>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(160).value = value }
    
    var get_sort_key: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<gcharVar>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<gcharVar>?>>>(168).value = value }
    
    var get_symbolic_icon: CPointer<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GVolume>?) -> CPointer<GIcon>?>>>(176).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GZlibCompressorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class _GZlibDecompressorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GDBusInterfaceIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_info: CPointer<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusInterfaceInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusInterfaceInfo>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusInterfaceInfo>?>>>(16).value = value }
    
    var get_object: CPointer<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(24).value = value }
    
    var set_object: CPointer<CFunction<(CPointer<GDBusInterface>?, CPointer<GDBusObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?, CPointer<GDBusObject>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?, CPointer<GDBusObject>?) -> Unit>>>(32).value = value }
    
    var dup_object: CPointer<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterface>?) -> CPointer<GDBusObject>?>>>(40).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[8]; void* p6; void* p7[8]; }")
class _GDBusInterfaceSkeletonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_info: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceInfo>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceInfo>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceInfo>?>>>(136).value = value }
    
    var get_vtable: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceVTable>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceVTable>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GDBusInterfaceVTable>?>>>(144).value = value }
    
    var get_properties: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GVariant>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> CPointer<GVariant>?>>>(152).value = value }
    
    var flush: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?) -> Unit>>>(160).value = value }
    
    val vfunc_padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(168)
    
    var g_authorize_method: CPointer<CFunction<(CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(232).value = value }
    
    val signal_padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(240)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GDBusObjectIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_object_path: CPointer<CFunction<(CPointer<GDBusObject>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var get_interfaces: CPointer<CFunction<(CPointer<GDBusObject>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<GList>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?) -> CPointer<GList>?>>>(24).value = value }
    
    var get_interface: CPointer<CFunction<(CPointer<GDBusObject>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(32).value = value }
    
    var interface_added: CPointer<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(40).value = value }
    
    var interface_removed: CPointer<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(48).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2[8]; }")
class _GDBusObjectSkeletonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(208, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var authorize_method: CPointer<CFunction<(CPointer<GDBusObjectSkeleton>?, CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectSkeleton>?, CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectSkeleton>?, CPointer<GDBusInterfaceSkeleton>?, CPointer<GDBusMethodInvocation>?) -> gboolean>>>(136).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(144)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1[8]; }")
class _GDBusObjectProxyClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(136)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GDBusObjectManagerIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_object_path: CPointer<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var get_objects: CPointer<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<GList>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?) -> CPointer<GList>?>>>(24).value = value }
    
    var get_object: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?) -> CPointer<GDBusObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?) -> CPointer<GDBusObject>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?) -> CPointer<GDBusObject>?>>>(32).value = value }
    
    var get_interface: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> CPointer<GDBusInterface>?>>>(40).value = value }
    
    var object_added: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(48).value = value }
    
    var object_removed: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?) -> Unit>>>(56).value = value }
    
    var interface_added: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(64).value = value }
    
    var interface_removed: CPointer<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManager>?, CPointer<GDBusObject>?, CPointer<GDBusInterface>?) -> Unit>>>(72).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3[8]; }")
class _GDBusObjectManagerClientClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var interface_proxy_signal: CPointer<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?) -> Unit>>>(136).value = value }
    
    var interface_proxy_properties_changed: CPointer<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<GDBusObjectProxy>?, CPointer<GDBusProxy>?, CPointer<GVariant>?, CPointer<CPointerVar<gcharVar>>?) -> Unit>>>(144).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(152)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1[8]; }")
class _GDBusObjectManagerServerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(136)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GRemoteActionGroupInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var activate_action_full: CPointer<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(16).value = value }
    
    var change_action_state_full: CPointer<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GRemoteActionGroup>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GVariant>?) -> Unit>>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GMenuModelClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var is_mutable: CPointer<CFunction<(CPointer<GMenuModel>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gboolean>>>(136).value = value }
    
    var get_n_items: CPointer<CFunction<(CPointer<GMenuModel>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gint>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?) -> gint>>>(144).value = value }
    
    var get_item_attributes: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(152).value = value }
    
    var iterate_item_attributes: CPointer<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuAttributeIter>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuAttributeIter>?>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuAttributeIter>?>>>(160).value = value }
    
    var get_item_attribute_value: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?, CPointer<GVariantType>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?, CPointer<GVariantType>?) -> CPointer<GVariant>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?, CPointer<GVariantType>?) -> CPointer<GVariant>?>>>(168).value = value }
    
    var get_item_links: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<CPointerVar<GHashTable>>?) -> Unit>>>(176).value = value }
    
    var iterate_item_links: CPointer<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuLinkIter>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuLinkIter>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint) -> CPointer<GMenuLinkIter>?>>>(184).value = value }
    
    var get_item_link: CPointer<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?) -> CPointer<GMenuModel>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?) -> CPointer<GMenuModel>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuModel>?, gint, CPointer<gcharVar>?) -> CPointer<GMenuModel>?>>>(192).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMenuAttributeIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMenuAttributeIterPrivate>?
        get() = memberAt<CPointerVar<GMenuAttributeIterPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMenuAttributeIterPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GMenuLinkIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GMenuLinkIterPrivate>?
        get() = memberAt<CPointerVar<GMenuLinkIterPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GMenuLinkIterPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; }")
class _GMenuAttributeIterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_next: CPointer<CFunction<(CPointer<GMenuAttributeIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuAttributeIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuAttributeIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GVariant>>?) -> gboolean>>>(136).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; }")
class _GMenuLinkIterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_next: CPointer<CFunction<(CPointer<GMenuLinkIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GMenuModel>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMenuLinkIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GMenuModel>>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMenuLinkIter>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<GMenuModel>>?) -> gboolean>>>(136).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GListModelInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_item_type: CPointer<CFunction<(CPointer<GListModel>?) -> GType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> GType>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> GType>>>(16).value = value }
    
    var get_n_items: CPointer<CFunction<(CPointer<GListModel>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> guint>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GListModel>?) -> guint>>>(24).value = value }
    
    var get_item: CPointer<CFunction<(CPointer<GListModel>?, guint) -> gpointer?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GListModel>?, guint) -> gpointer?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GListModel>?, guint) -> gpointer?>>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; }")
class GListStoreClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkAccelGroup(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkAccelGroupPrivate>?
        get() = memberAt<CPointerVar<GtkAccelGroupPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkAccelGroupPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkAccelGroupClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var accel_changed: CPointer<CFunction<(CPointer<GtkAccelGroup>?, guint, GdkModifierType, CPointer<GClosure>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAccelGroup>?, guint, GdkModifierType, CPointer<GClosure>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAccelGroup>?, guint, GdkModifierType, CPointer<GClosure>?) -> Unit>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

class _GtkAccelKey(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var accel_key: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var accel_mods: GdkModifierType
        get() = memberAt<GdkModifierTypeVar>(4).value
        set(value) { memberAt<GdkModifierTypeVar>(4).value = value }
    
    var accel_flags: guint
        get() = readBits(this.rawPtr, 64, 16, false).toUInt()
        set(value) { writeBits(this.rawPtr, 64, 16, value.toLong()) }
}

@CStruct("struct { null p0; void* p1; unsigned int p2; }")
class _GtkAccelGroupEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val key: GtkAccelKey
        get() = memberAt(0)
    
    var closure: CPointer<GClosure>?
        get() = memberAt<CPointerVar<GClosure>>(16).value
        set(value) { memberAt<CPointerVar<GClosure>>(16).value = value }
    
    var accel_path_quark: GQuark
        get() = memberAt<GQuarkVar>(24).value
        set(value) { memberAt<GQuarkVar>(24).value = value }
}

@CStruct("struct { short p0; short p1; short p2; short p3; }")
class _GtkBorder(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 2)
    
    var left: gint16
        get() = memberAt<gint16Var>(0).value
        set(value) { memberAt<gint16Var>(0).value = value }
    
    var right: gint16
        get() = memberAt<gint16Var>(2).value
        set(value) { memberAt<gint16Var>(2).value = value }
    
    var top: gint16
        get() = memberAt<gint16Var>(4).value
        set(value) { memberAt<gint16Var>(4).value = value }
    
    var bottom: gint16
        get() = memberAt<gint16Var>(6).value
        set(value) { memberAt<gint16Var>(6).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkAdjustment(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GInitiallyUnowned
        get() = memberAt(0)
    
    var priv: CPointer<GtkAdjustmentPrivate>?
        get() = memberAt<CPointerVar<GtkAdjustmentPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkAdjustmentPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkBuilder(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkBuilderPrivate>?
        get() = memberAt<CPointerVar<GtkBuilderPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkBuilderPrivate>>(24).value = value }
}

class _GtkRcStyle(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(384, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    val bg_pixmap_name: CArrayPointer<CPointerVar<gcharVar>>
        get() = arrayMemberAt(32)
    
    var font_desc: CPointer<PangoFontDescription>?
        get() = memberAt<CPointerVar<PangoFontDescription>>(72).value
        set(value) { memberAt<CPointerVar<PangoFontDescription>>(72).value = value }
    
    val color_flags: CArrayPointer<GtkRcFlagsVar>
        get() = arrayMemberAt(80)
    
    val fg: CArrayPointer<GdkColor>
        get() = arrayMemberAt(100)
    
    val bg: CArrayPointer<GdkColor>
        get() = arrayMemberAt(160)
    
    val text: CArrayPointer<GdkColor>
        get() = arrayMemberAt(220)
    
    val base: CArrayPointer<GdkColor>
        get() = arrayMemberAt(280)
    
    var xthickness: gint
        get() = memberAt<gintVar>(340).value
        set(value) { memberAt<gintVar>(340).value = value }
    
    var ythickness: gint
        get() = memberAt<gintVar>(344).value
        set(value) { memberAt<gintVar>(344).value = value }
    
    var rc_properties: CPointer<GArray>?
        get() = memberAt<CPointerVar<GArray>>(352).value
        set(value) { memberAt<CPointerVar<GArray>>(352).value = value }
    
    var rc_style_lists: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(360).value
        set(value) { memberAt<CPointerVar<GSList>>(360).value = value }
    
    var icon_factories: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(368).value
        set(value) { memberAt<CPointerVar<GSList>>(368).value = value }
    
    var engine_specified: guint
        get() = readBits(this.rawPtr, 3008, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 3008, 1, value.toLong()) }
}

@CStruct("struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; }")
class _GdkColor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var pixel: guint32
        get() = memberAt<guint32Var>(0).value
        set(value) { memberAt<guint32Var>(0).value = value }
    
    var red: guint16
        get() = memberAt<guint16Var>(4).value
        set(value) { memberAt<guint16Var>(4).value = value }
    
    var green: guint16
        get() = memberAt<guint16Var>(6).value
        set(value) { memberAt<guint16Var>(6).value = value }
    
    var blue: guint16
        get() = memberAt<guint16Var>(8).value
        set(value) { memberAt<guint16Var>(8).value = value }
}

@CStruct("struct { int p0; int p1; }")
class _GtkRequisition(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var width: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var height: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkSettings(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkSettingsPrivate>?
        get() = memberAt<CPointerVar<GtkSettingsPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkSettingsPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p1[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p2[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p3[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p4[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p5[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p6[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p7[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p8[5]; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p9; struct { unsigned int p0; unsigned short p1; unsigned short p2; unsigned short p3; } p10; void* p11; int p12; int p13; void* p14[5]; int p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; }")
class _GtkStyle(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(640, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    val fg: CArrayPointer<GdkColor>
        get() = arrayMemberAt(24)
    
    val bg: CArrayPointer<GdkColor>
        get() = arrayMemberAt(84)
    
    val light: CArrayPointer<GdkColor>
        get() = arrayMemberAt(144)
    
    val dark: CArrayPointer<GdkColor>
        get() = arrayMemberAt(204)
    
    val mid: CArrayPointer<GdkColor>
        get() = arrayMemberAt(264)
    
    val text: CArrayPointer<GdkColor>
        get() = arrayMemberAt(324)
    
    val base: CArrayPointer<GdkColor>
        get() = arrayMemberAt(384)
    
    val text_aa: CArrayPointer<GdkColor>
        get() = arrayMemberAt(444)
    
    val black: GdkColor
        get() = memberAt(504)
    
    val white: GdkColor
        get() = memberAt(516)
    
    var font_desc: CPointer<PangoFontDescription>?
        get() = memberAt<CPointerVar<PangoFontDescription>>(528).value
        set(value) { memberAt<CPointerVar<PangoFontDescription>>(528).value = value }
    
    var xthickness: gint
        get() = memberAt<gintVar>(536).value
        set(value) { memberAt<gintVar>(536).value = value }
    
    var ythickness: gint
        get() = memberAt<gintVar>(540).value
        set(value) { memberAt<gintVar>(540).value = value }
    
    val background: CArrayPointer<CPointerVar<cairo_pattern_t>>
        get() = arrayMemberAt(544)
    
    var attach_count: gint
        get() = memberAt<gintVar>(584).value
        set(value) { memberAt<gintVar>(584).value = value }
    
    var visual: CPointer<GdkVisual>?
        get() = memberAt<CPointerVar<GdkVisual>>(592).value
        set(value) { memberAt<CPointerVar<GdkVisual>>(592).value = value }
    
    var private_font_desc: CPointer<PangoFontDescription>?
        get() = memberAt<CPointerVar<PangoFontDescription>>(600).value
        set(value) { memberAt<CPointerVar<PangoFontDescription>>(600).value = value }
    
    var rc_style: CPointer<GtkRcStyle>?
        get() = memberAt<CPointerVar<GtkRcStyle>>(608).value
        set(value) { memberAt<CPointerVar<GtkRcStyle>>(608).value = value }
    
    var styles: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(616).value
        set(value) { memberAt<CPointerVar<GSList>>(616).value = value }
    
    var property_cache: CPointer<GArray>?
        get() = memberAt<CPointerVar<GArray>>(624).value
        set(value) { memberAt<CPointerVar<GArray>>(624).value = value }
    
    var icon_factories: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(632).value
        set(value) { memberAt<CPointerVar<GSList>>(632).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkStyleContext(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_object: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkStyleContextPrivate>?
        get() = memberAt<CPointerVar<GtkStyleContextPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkStyleContextPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkWidget(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GInitiallyUnowned
        get() = memberAt(0)
    
    var priv: CPointer<GtkWidgetPrivate>?
        get() = memberAt<CPointerVar<GtkWidgetPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkWidgetPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkWindow(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkWindowPrivate>?
        get() = memberAt<CPointerVar<GtkWindowPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkWindowPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkBin(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkBinPrivate>?
        get() = memberAt<CPointerVar<GtkBinPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkBinPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkContainer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkContainerPrivate>?
        get() = memberAt<CPointerVar<GtkContainerPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkContainerPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; }")
class _GtkWidgetClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(824, 8)
    
    val parent_class: GInitiallyUnownedClass
        get() = memberAt(0)
    
    var activate_signal: guint
        get() = memberAt<guintVar>(136).value
        set(value) { memberAt<guintVar>(136).value = value }
    
    var dispatch_child_properties_changed: CPointer<CFunction<(CPointer<GtkWidget>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, guint, CPointer<CPointerVar<GParamSpec>>?) -> Unit>>>(144).value = value }
    
    var destroy: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(152).value = value }
    
    var show: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(160).value = value }
    
    var show_all: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(168).value = value }
    
    var hide: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(176).value = value }
    
    var map: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(184).value = value }
    
    var unmap: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(192).value = value }
    
    var realize: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(200).value = value }
    
    var unrealize: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(208).value = value }
    
    var size_allocate: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkAllocation>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkAllocation>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkAllocation>?) -> Unit>>>(216).value = value }
    
    var state_changed: CPointer<CFunction<(CPointer<GtkWidget>?, GtkStateType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkStateType) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkStateType) -> Unit>>>(224).value = value }
    
    var state_flags_changed: CPointer<CFunction<(CPointer<GtkWidget>?, GtkStateFlags) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkStateFlags) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkStateFlags) -> Unit>>>(232).value = value }
    
    var parent_set: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkWidget>?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkWidget>?) -> Unit>>>(240).value = value }
    
    var hierarchy_changed: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkWidget>?) -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkWidget>?) -> Unit>>>(248).value = value }
    
    var style_set: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkStyle>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkStyle>?) -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkStyle>?) -> Unit>>>(256).value = value }
    
    var direction_changed: CPointer<CFunction<(CPointer<GtkWidget>?, GtkTextDirection) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkTextDirection) -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkTextDirection) -> Unit>>>(264).value = value }
    
    var grab_notify: CPointer<CFunction<(CPointer<GtkWidget>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gboolean) -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gboolean) -> Unit>>>(272).value = value }
    
    var child_notify: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GParamSpec>?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GParamSpec>?) -> Unit>>>(280).value = value }
    
    var draw: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<cairo_t>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<cairo_t>?) -> gboolean>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<cairo_t>?) -> gboolean>>>(288).value = value }
    
    var get_request_mode: CPointer<CFunction<(CPointer<GtkWidget>?) -> GtkSizeRequestMode>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> GtkSizeRequestMode>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> GtkSizeRequestMode>>>(296).value = value }
    
    var get_preferred_height: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(304).value = value }
    
    var get_preferred_width_for_height: CPointer<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(312).value = value }
    
    var get_preferred_width: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(320).value = value }
    
    var get_preferred_height_for_width: CPointer<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(328).value = value }
    
    var mnemonic_activate: CPointer<CFunction<(CPointer<GtkWidget>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gboolean) -> gboolean>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gboolean) -> gboolean>>>(336).value = value }
    
    var grab_focus: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(344).value = value }
    
    var focus: CPointer<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> gboolean>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> gboolean>>>(352).value = value }
    
    var move_focus: CPointer<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> Unit>>>(360).value = value }
    
    var keynav_failed: CPointer<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> gboolean>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkDirectionType) -> gboolean>>>(368).value = value }
    
    var event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEvent>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEvent>?) -> gboolean>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEvent>?) -> gboolean>>>(376).value = value }
    
    var button_press_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventButton>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventButton>?) -> gboolean>>>(384).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventButton>?) -> gboolean>>>(384).value = value }
    
    var button_release_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventButton>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventButton>?) -> gboolean>>>(392).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventButton>?) -> gboolean>>>(392).value = value }
    
    var scroll_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventScroll>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventScroll>?) -> gboolean>>>(400).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventScroll>?) -> gboolean>>>(400).value = value }
    
    var motion_notify_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventMotion>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventMotion>?) -> gboolean>>>(408).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventMotion>?) -> gboolean>>>(408).value = value }
    
    var delete_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(416).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(416).value = value }
    
    var destroy_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(424).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(424).value = value }
    
    var key_press_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?) -> gboolean>>>(432).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?) -> gboolean>>>(432).value = value }
    
    var key_release_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?) -> gboolean>>>(440).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?) -> gboolean>>>(440).value = value }
    
    var enter_notify_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventCrossing>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventCrossing>?) -> gboolean>>>(448).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventCrossing>?) -> gboolean>>>(448).value = value }
    
    var leave_notify_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventCrossing>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventCrossing>?) -> gboolean>>>(456).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventCrossing>?) -> gboolean>>>(456).value = value }
    
    var configure_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventConfigure>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventConfigure>?) -> gboolean>>>(464).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventConfigure>?) -> gboolean>>>(464).value = value }
    
    var focus_in_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventFocus>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventFocus>?) -> gboolean>>>(472).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventFocus>?) -> gboolean>>>(472).value = value }
    
    var focus_out_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventFocus>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventFocus>?) -> gboolean>>>(480).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventFocus>?) -> gboolean>>>(480).value = value }
    
    var map_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(488).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(488).value = value }
    
    var unmap_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(496).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventAny>?) -> gboolean>>>(496).value = value }
    
    var property_notify_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProperty>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProperty>?) -> gboolean>>>(504).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProperty>?) -> gboolean>>>(504).value = value }
    
    var selection_clear_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>>(512).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>>(512).value = value }
    
    var selection_request_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>>(520).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>>(520).value = value }
    
    var selection_notify_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>>(528).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventSelection>?) -> gboolean>>>(528).value = value }
    
    var proximity_in_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProximity>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProximity>?) -> gboolean>>>(536).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProximity>?) -> gboolean>>>(536).value = value }
    
    var proximity_out_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProximity>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProximity>?) -> gboolean>>>(544).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventProximity>?) -> gboolean>>>(544).value = value }
    
    var visibility_notify_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventVisibility>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventVisibility>?) -> gboolean>>>(552).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventVisibility>?) -> gboolean>>>(552).value = value }
    
    var window_state_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventWindowState>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventWindowState>?) -> gboolean>>>(560).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventWindowState>?) -> gboolean>>>(560).value = value }
    
    var damage_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventExpose>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventExpose>?) -> gboolean>>>(568).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventExpose>?) -> gboolean>>>(568).value = value }
    
    var grab_broken_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventGrabBroken>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventGrabBroken>?) -> gboolean>>>(576).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventGrabBroken>?) -> gboolean>>>(576).value = value }
    
    var selection_get: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>>(584).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>>(584).value = value }
    
    var selection_received: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkSelectionData>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkSelectionData>?, guint) -> Unit>>>(592).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GtkSelectionData>?, guint) -> Unit>>>(592).value = value }
    
    var drag_begin: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>>(600).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>>(600).value = value }
    
    var drag_end: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>>(608).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>>(608).value = value }
    
    var drag_data_get: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>>(616).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>>(616).value = value }
    
    var drag_data_delete: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>>(624).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?) -> Unit>>>(624).value = value }
    
    var drag_leave: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, guint) -> Unit>>>(632).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, guint) -> Unit>>>(632).value = value }
    
    var drag_motion: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, guint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, guint) -> gboolean>>>(640).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, guint) -> gboolean>>>(640).value = value }
    
    var drag_drop: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, guint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, guint) -> gboolean>>>(648).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, guint) -> gboolean>>>(648).value = value }
    
    var drag_data_received: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>>(656).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, gint, gint, CPointer<GtkSelectionData>?, guint, guint) -> Unit>>>(656).value = value }
    
    var drag_failed: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, GtkDragResult) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, GtkDragResult) -> gboolean>>>(664).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkDragContext>?, GtkDragResult) -> gboolean>>>(664).value = value }
    
    var popup_menu: CPointer<CFunction<(CPointer<GtkWidget>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> gboolean>>>(672).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> gboolean>>>(672).value = value }
    
    var show_help: CPointer<CFunction<(CPointer<GtkWidget>?, GtkWidgetHelpType) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkWidgetHelpType) -> gboolean>>>(680).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkWidgetHelpType) -> gboolean>>>(680).value = value }
    
    var get_accessible: CPointer<CFunction<(CPointer<GtkWidget>?) -> CPointer<AtkObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> CPointer<AtkObject>?>>>(688).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> CPointer<AtkObject>?>>>(688).value = value }
    
    var screen_changed: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkScreen>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkScreen>?) -> Unit>>>(696).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkScreen>?) -> Unit>>>(696).value = value }
    
    var can_activate_accel: CPointer<CFunction<(CPointer<GtkWidget>?, guint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, guint) -> gboolean>>>(704).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, guint) -> gboolean>>>(704).value = value }
    
    var composited_changed: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(712).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(712).value = value }
    
    var query_tooltip: CPointer<CFunction<(CPointer<GtkWidget>?, gint, gint, gboolean, CPointer<GtkTooltip>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, gint, gboolean, CPointer<GtkTooltip>?) -> gboolean>>>(720).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, gint, gboolean, CPointer<GtkTooltip>?) -> gboolean>>>(720).value = value }
    
    var compute_expand: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<gbooleanVar>?, CPointer<gbooleanVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gbooleanVar>?, CPointer<gbooleanVar>?) -> Unit>>>(728).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gbooleanVar>?, CPointer<gbooleanVar>?) -> Unit>>>(728).value = value }
    
    var adjust_size_request: CPointer<CFunction<(CPointer<GtkWidget>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(736).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(736).value = value }
    
    var adjust_size_allocation: CPointer<CFunction<(CPointer<GtkWidget>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(744).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(744).value = value }
    
    var style_updated: CPointer<CFunction<(CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(752).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?) -> Unit>>>(752).value = value }
    
    var touch_event: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventTouch>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventTouch>?) -> gboolean>>>(760).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventTouch>?) -> gboolean>>>(760).value = value }
    
    var get_preferred_height_and_baseline_for_width: CPointer<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(768).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(768).value = value }
    
    var adjust_baseline_request: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(776).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(776).value = value }
    
    var adjust_baseline_allocation: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?) -> Unit>>>(784).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<gintVar>?) -> Unit>>>(784).value = value }
    
    var queue_draw_region: CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<cairo_region_t>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<cairo_region_t>?) -> Unit>>>(792).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWidget>?, CPointer<cairo_region_t>?) -> Unit>>>(792).value = value }
    
    var priv: CPointer<GtkWidgetClassPrivate>?
        get() = memberAt<CPointerVar<GtkWidgetClassPrivate>>(800).value
        set(value) { memberAt<CPointerVar<GtkWidgetClassPrivate>>(800).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(808).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(808).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(816).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(816).value = value }
}

@CStruct("struct { int p0; int p1; int p2; int p3; }")
class _cairo_rectangle_int(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 4)
    
    var x: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var width: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var height: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
}

@CStruct("union { int p0; struct { int p0; void* p1; signed char p2; } p1; struct { int p0; void* p1; signed char p2; struct { int p0; int p1; int p2; int p3; } p3; void* p4; int p5; } p2; struct { int p0; void* p1; signed char p2; unsigned int p3; } p3; struct { int p0; void* p1; signed char p2; unsigned int p3; double p4; double p5; void* p6; unsigned int p7; short p8; void* p9; double p10; double p11; } p4; struct { int p0; void* p1; signed char p2; unsigned int p3; double p4; double p5; void* p6; unsigned int p7; unsigned int p8; void* p9; double p10; double p11; } p5; struct { int p0; void* p1; signed char p2; unsigned int p3; double p4; double p5; void* p6; unsigned int p7; void* p8; int p9; void* p10; double p11; double p12; } p6; null p7; null p8; struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; double p5; double p6; double p7; double p8; unsigned int p9; unsigned int p10; int p11; unsigned int p12; } p9; struct { int p0; void* p1; signed char p2; short p3; } p10; struct { int p0; void* p1; signed char p2; int p3; int p4; int p5; int p6; } p11; struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; unsigned int p5; } p12; struct { int p0; void* p1; signed char p2; void* p3; void* p4; void* p5; unsigned int p6; void* p7; } p13; struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; void* p5; unsigned int p6; unsigned int p7; } p14; struct { int p0; void* p1; signed char p2; unsigned int p3; void* p4; } p15; struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; short p5; short p6; } p16; struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; } p17; struct { int p0; void* p1; signed char p2; unsigned int p3; void* p4; } p18; struct { int p0; void* p1; signed char p2; int p3; int p4; void* p5; } p19; struct { int p0; void* p1; signed char p2; signed char p3; signed char p4; unsigned int p5; double p6; double p7; double p8; double p9; double p10; double p11; unsigned int p12; } p20; struct { int p0; void* p1; signed char p2; signed char p3; signed char p4; unsigned int p5; double p6; double p7; double p8; double p9; double p10; double p11; double p12; double p13; unsigned int p14; } p21; struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; unsigned int p5; unsigned int p6; } p22; struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; unsigned int p5; unsigned int p6; double p7; } p23; struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; unsigned int p5; } p24; }")
class _GdkEvent(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    val any: GdkEventAny
        get() = memberAt(0)
    
    val expose: GdkEventExpose
        get() = memberAt(0)
    
    val visibility: GdkEventVisibility
        get() = memberAt(0)
    
    val motion: GdkEventMotion
        get() = memberAt(0)
    
    val button: GdkEventButton
        get() = memberAt(0)
    
    val touch: GdkEventTouch
        get() = memberAt(0)
    
    val scroll: GdkEventScroll
        get() = memberAt(0)
    
    val key: GdkEventKey
        get() = memberAt(0)
    
    val crossing: GdkEventCrossing
        get() = memberAt(0)
    
    val focus_change: GdkEventFocus
        get() = memberAt(0)
    
    val configure: GdkEventConfigure
        get() = memberAt(0)
    
    val property: GdkEventProperty
        get() = memberAt(0)
    
    val selection: GdkEventSelection
        get() = memberAt(0)
    
    val owner_change: GdkEventOwnerChange
        get() = memberAt(0)
    
    val proximity: GdkEventProximity
        get() = memberAt(0)
    
    val dnd: GdkEventDND
        get() = memberAt(0)
    
    val window_state: GdkEventWindowState
        get() = memberAt(0)
    
    val setting: GdkEventSetting
        get() = memberAt(0)
    
    val grab_broken: GdkEventGrabBroken
        get() = memberAt(0)
    
    val touchpad_swipe: GdkEventTouchpadSwipe
        get() = memberAt(0)
    
    val touchpad_pinch: GdkEventTouchpadPinch
        get() = memberAt(0)
    
    val pad_button: GdkEventPadButton
        get() = memberAt(0)
    
    val pad_axis: GdkEventPadAxis
        get() = memberAt(0)
    
    val pad_group_mode: GdkEventPadGroupMode
        get() = memberAt(0)
}

@CStruct("struct { int p0; void* p1; signed char p2; }")
class _GdkEventAny(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; struct { int p0; int p1; int p2; int p3; } p3; void* p4; int p5; }")
class _GdkEventExpose(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    val area: GdkRectangle
        get() = memberAt(20)
    
    var region: CPointer<cairo_region_t>?
        get() = memberAt<CPointerVar<cairo_region_t>>(40).value
        set(value) { memberAt<CPointerVar<cairo_region_t>>(40).value = value }
    
    var count: gint
        get() = memberAt<gintVar>(48).value
        set(value) { memberAt<gintVar>(48).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; }")
class _GdkEventVisibility(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var state: GdkVisibilityState
        get() = memberAt<GdkVisibilityState.Var>(20).value
        set(value) { memberAt<GdkVisibilityState.Var>(20).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; double p4; double p5; void* p6; unsigned int p7; short p8; void* p9; double p10; double p11; }")
class _GdkEventMotion(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var axes: CPointer<gdoubleVar>?
        get() = memberAt<CPointerVar<gdoubleVar>>(40).value
        set(value) { memberAt<CPointerVar<gdoubleVar>>(40).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    var is_hint: gint16
        get() = memberAt<gint16Var>(52).value
        set(value) { memberAt<gint16Var>(52).value = value }
    
    var device: CPointer<GdkDevice>?
        get() = memberAt<CPointerVar<GdkDevice>>(56).value
        set(value) { memberAt<CPointerVar<GdkDevice>>(56).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(64).value
        set(value) { memberAt<gdoubleVar>(64).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; double p4; double p5; void* p6; unsigned int p7; unsigned int p8; void* p9; double p10; double p11; }")
class _GdkEventButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var axes: CPointer<gdoubleVar>?
        get() = memberAt<CPointerVar<gdoubleVar>>(40).value
        set(value) { memberAt<CPointerVar<gdoubleVar>>(40).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    var button: guint
        get() = memberAt<guintVar>(52).value
        set(value) { memberAt<guintVar>(52).value = value }
    
    var device: CPointer<GdkDevice>?
        get() = memberAt<CPointerVar<GdkDevice>>(56).value
        set(value) { memberAt<CPointerVar<GdkDevice>>(56).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(64).value
        set(value) { memberAt<gdoubleVar>(64).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; double p4; double p5; void* p6; unsigned int p7; void* p8; int p9; void* p10; double p11; double p12; }")
class _GdkEventTouch(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var axes: CPointer<gdoubleVar>?
        get() = memberAt<CPointerVar<gdoubleVar>>(40).value
        set(value) { memberAt<CPointerVar<gdoubleVar>>(40).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(48).value
        set(value) { memberAt<guintVar>(48).value = value }
    
    var sequence: CPointer<GdkEventSequence>?
        get() = memberAt<CPointerVar<GdkEventSequence>>(56).value
        set(value) { memberAt<CPointerVar<GdkEventSequence>>(56).value = value }
    
    var emulating_pointer: gboolean
        get() = memberAt<gbooleanVar>(64).value
        set(value) { memberAt<gbooleanVar>(64).value = value }
    
    var device: CPointer<GdkDevice>?
        get() = memberAt<CPointerVar<GdkDevice>>(72).value
        set(value) { memberAt<CPointerVar<GdkDevice>>(72).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(80).value
        set(value) { memberAt<gdoubleVar>(80).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(88).value
        set(value) { memberAt<gdoubleVar>(88).value = value }
}

class _GdkEventScroll(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(40).value
        set(value) { memberAt<guintVar>(40).value = value }
    
    var direction: GdkScrollDirection
        get() = memberAt<GdkScrollDirection.Var>(44).value
        set(value) { memberAt<GdkScrollDirection.Var>(44).value = value }
    
    var device: CPointer<GdkDevice>?
        get() = memberAt<CPointerVar<GdkDevice>>(48).value
        set(value) { memberAt<CPointerVar<GdkDevice>>(48).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(56).value
        set(value) { memberAt<gdoubleVar>(56).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(64).value
        set(value) { memberAt<gdoubleVar>(64).value = value }
    
    var delta_x: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
    
    var delta_y: gdouble
        get() = memberAt<gdoubleVar>(80).value
        set(value) { memberAt<gdoubleVar>(80).value = value }
    
    var is_stop: guint
        get() = readBits(this.rawPtr, 704, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 704, 1, value.toLong()) }
}

class _GdkEventKey(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var keyval: guint
        get() = memberAt<guintVar>(28).value
        set(value) { memberAt<guintVar>(28).value = value }
    
    var length: gint
        get() = memberAt<gintVar>(32).value
        set(value) { memberAt<gintVar>(32).value = value }
    
    var string: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(40).value
        set(value) { memberAt<CPointerVar<gcharVar>>(40).value = value }
    
    var hardware_keycode: guint16
        get() = memberAt<guint16Var>(48).value
        set(value) { memberAt<guint16Var>(48).value = value }
    
    var group: guint8
        get() = memberAt<guint8Var>(50).value
        set(value) { memberAt<guint8Var>(50).value = value }
    
    var is_modifier: guint
        get() = readBits(this.rawPtr, 408, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 408, 1, value.toLong()) }
}

@CStruct("struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; double p5; double p6; double p7; double p8; unsigned int p9; unsigned int p10; int p11; unsigned int p12; }")
class _GdkEventCrossing(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var subwindow: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(24).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(24).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(32).value
        set(value) { memberAt<guint32Var>(32).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(40).value
        set(value) { memberAt<gdoubleVar>(40).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(48).value
        set(value) { memberAt<gdoubleVar>(48).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(56).value
        set(value) { memberAt<gdoubleVar>(56).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(64).value
        set(value) { memberAt<gdoubleVar>(64).value = value }
    
    var mode: GdkCrossingMode
        get() = memberAt<GdkCrossingMode.Var>(72).value
        set(value) { memberAt<GdkCrossingMode.Var>(72).value = value }
    
    var detail: GdkNotifyType
        get() = memberAt<GdkNotifyTypeVar>(76).value
        set(value) { memberAt<GdkNotifyTypeVar>(76).value = value }
    
    var focus: gboolean
        get() = memberAt<gbooleanVar>(80).value
        set(value) { memberAt<gbooleanVar>(80).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(84).value
        set(value) { memberAt<guintVar>(84).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; short p3; }")
class _GdkEventFocus(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var `in`: gint16
        get() = memberAt<gint16Var>(18).value
        set(value) { memberAt<gint16Var>(18).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; int p3; int p4; int p5; int p6; }")
class _GdkEventConfigure(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var x: gint
        get() = memberAt<gintVar>(20).value
        set(value) { memberAt<gintVar>(20).value = value }
    
    var y: gint
        get() = memberAt<gintVar>(24).value
        set(value) { memberAt<gintVar>(24).value = value }
    
    var width: gint
        get() = memberAt<gintVar>(28).value
        set(value) { memberAt<gintVar>(28).value = value }
    
    var height: gint
        get() = memberAt<gintVar>(32).value
        set(value) { memberAt<gintVar>(32).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; unsigned int p5; }")
class _GdkEventProperty(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var atom: GdkAtom?
        get() = memberAt<GdkAtomVar>(24).value
        set(value) { memberAt<GdkAtomVar>(24).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(32).value
        set(value) { memberAt<guint32Var>(32).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(36).value
        set(value) { memberAt<guintVar>(36).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; void* p3; void* p4; void* p5; unsigned int p6; void* p7; }")
class _GdkEventSelection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var selection: GdkAtom?
        get() = memberAt<GdkAtomVar>(24).value
        set(value) { memberAt<GdkAtomVar>(24).value = value }
    
    var target: GdkAtom?
        get() = memberAt<GdkAtomVar>(32).value
        set(value) { memberAt<GdkAtomVar>(32).value = value }
    
    var property: GdkAtom?
        get() = memberAt<GdkAtomVar>(40).value
        set(value) { memberAt<GdkAtomVar>(40).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(48).value
        set(value) { memberAt<guint32Var>(48).value = value }
    
    var requestor: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(56).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(56).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; void* p5; unsigned int p6; unsigned int p7; }")
class _GdkEventOwnerChange(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var owner: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(24).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(24).value = value }
    
    var reason: GdkOwnerChange
        get() = memberAt<GdkOwnerChange.Var>(32).value
        set(value) { memberAt<GdkOwnerChange.Var>(32).value = value }
    
    var selection: GdkAtom?
        get() = memberAt<GdkAtomVar>(40).value
        set(value) { memberAt<GdkAtomVar>(40).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(48).value
        set(value) { memberAt<guint32Var>(48).value = value }
    
    var selection_time: guint32
        get() = memberAt<guint32Var>(52).value
        set(value) { memberAt<guint32Var>(52).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; void* p4; }")
class _GdkEventProximity(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var device: CPointer<GdkDevice>?
        get() = memberAt<CPointerVar<GdkDevice>>(24).value
        set(value) { memberAt<CPointerVar<GdkDevice>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; void* p3; unsigned int p4; short p5; short p6; }")
class _GdkEventDND(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var context: CPointer<GdkDragContext>?
        get() = memberAt<CPointerVar<GdkDragContext>>(24).value
        set(value) { memberAt<CPointerVar<GdkDragContext>>(24).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(32).value
        set(value) { memberAt<guint32Var>(32).value = value }
    
    var x_root: gshort
        get() = memberAt<gshortVar>(36).value
        set(value) { memberAt<gshortVar>(36).value = value }
    
    var y_root: gshort
        get() = memberAt<gshortVar>(38).value
        set(value) { memberAt<gshortVar>(38).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; }")
class _GdkEventWindowState(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var changed_mask: GdkWindowState
        get() = memberAt<GdkWindowStateVar>(20).value
        set(value) { memberAt<GdkWindowStateVar>(20).value = value }
    
    var new_window_state: GdkWindowState
        get() = memberAt<GdkWindowStateVar>(24).value
        set(value) { memberAt<GdkWindowStateVar>(24).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; void* p4; }")
class _GdkEventSetting(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var action: GdkSettingAction
        get() = memberAt<GdkSettingAction.Var>(20).value
        set(value) { memberAt<GdkSettingAction.Var>(20).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; int p3; int p4; void* p5; }")
class _GdkEventGrabBroken(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var keyboard: gboolean
        get() = memberAt<gbooleanVar>(20).value
        set(value) { memberAt<gbooleanVar>(20).value = value }
    
    var implicit: gboolean
        get() = memberAt<gbooleanVar>(24).value
        set(value) { memberAt<gbooleanVar>(24).value = value }
    
    var grab_window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(32).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(32).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; signed char p3; signed char p4; unsigned int p5; double p6; double p7; double p8; double p9; double p10; double p11; unsigned int p12; }")
class _GdkEventTouchpadSwipe(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var phase: gint8
        get() = memberAt<gint8Var>(17).value
        set(value) { memberAt<gint8Var>(17).value = value }
    
    var n_fingers: gint8
        get() = memberAt<gint8Var>(18).value
        set(value) { memberAt<gint8Var>(18).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var dx: gdouble
        get() = memberAt<gdoubleVar>(40).value
        set(value) { memberAt<gdoubleVar>(40).value = value }
    
    var dy: gdouble
        get() = memberAt<gdoubleVar>(48).value
        set(value) { memberAt<gdoubleVar>(48).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(56).value
        set(value) { memberAt<gdoubleVar>(56).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(64).value
        set(value) { memberAt<gdoubleVar>(64).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(72).value
        set(value) { memberAt<guintVar>(72).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; signed char p3; signed char p4; unsigned int p5; double p6; double p7; double p8; double p9; double p10; double p11; double p12; double p13; unsigned int p14; }")
class _GdkEventTouchpadPinch(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var phase: gint8
        get() = memberAt<gint8Var>(17).value
        set(value) { memberAt<gint8Var>(17).value = value }
    
    var n_fingers: gint8
        get() = memberAt<gint8Var>(18).value
        set(value) { memberAt<gint8Var>(18).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var x: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
    
    var y: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var dx: gdouble
        get() = memberAt<gdoubleVar>(40).value
        set(value) { memberAt<gdoubleVar>(40).value = value }
    
    var dy: gdouble
        get() = memberAt<gdoubleVar>(48).value
        set(value) { memberAt<gdoubleVar>(48).value = value }
    
    var angle_delta: gdouble
        get() = memberAt<gdoubleVar>(56).value
        set(value) { memberAt<gdoubleVar>(56).value = value }
    
    var scale: gdouble
        get() = memberAt<gdoubleVar>(64).value
        set(value) { memberAt<gdoubleVar>(64).value = value }
    
    var x_root: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
    
    var y_root: gdouble
        get() = memberAt<gdoubleVar>(80).value
        set(value) { memberAt<gdoubleVar>(80).value = value }
    
    var state: guint
        get() = memberAt<guintVar>(88).value
        set(value) { memberAt<guintVar>(88).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; unsigned int p5; unsigned int p6; }")
class _GdkEventPadButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var group: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var button: guint
        get() = memberAt<guintVar>(28).value
        set(value) { memberAt<guintVar>(28).value = value }
    
    var mode: guint
        get() = memberAt<guintVar>(32).value
        set(value) { memberAt<guintVar>(32).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; unsigned int p5; unsigned int p6; double p7; }")
class _GdkEventPadAxis(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var group: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var index: guint
        get() = memberAt<guintVar>(28).value
        set(value) { memberAt<guintVar>(28).value = value }
    
    var mode: guint
        get() = memberAt<guintVar>(32).value
        set(value) { memberAt<guintVar>(32).value = value }
    
    var value: gdouble
        get() = memberAt<gdoubleVar>(40).value
        set(value) { memberAt<gdoubleVar>(40).value = value }
}

@CStruct("struct { int p0; void* p1; signed char p2; unsigned int p3; unsigned int p4; unsigned int p5; }")
class _GdkEventPadGroupMode(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var type: GdkEventType
        get() = memberAt<GdkEventTypeVar>(0).value
        set(value) { memberAt<GdkEventTypeVar>(0).value = value }
    
    var window: CPointer<GdkWindow>?
        get() = memberAt<CPointerVar<GdkWindow>>(8).value
        set(value) { memberAt<CPointerVar<GdkWindow>>(8).value = value }
    
    var send_event: gint8
        get() = memberAt<gint8Var>(16).value
        set(value) { memberAt<gint8Var>(16).value = value }
    
    var time: guint32
        get() = memberAt<guint32Var>(20).value
        set(value) { memberAt<guint32Var>(20).value = value }
    
    var group: guint
        get() = memberAt<guintVar>(24).value
        set(value) { memberAt<guintVar>(24).value = value }
    
    var mode: guint
        get() = memberAt<guintVar>(28).value
        set(value) { memberAt<guintVar>(28).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; void* p2; void* p3; unsigned int p4; void* p5; unsigned int p6; }")
class _AtkObject(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var description: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
    
    var accessible_parent: CPointer<AtkObject>?
        get() = memberAt<CPointerVar<AtkObject>>(40).value
        set(value) { memberAt<CPointerVar<AtkObject>>(40).value = value }
    
    var role: AtkRole
        get() = memberAt<AtkRoleVar>(48).value
        set(value) { memberAt<AtkRoleVar>(48).value = value }
    
    var relation_set: CPointer<AtkRelationSet>?
        get() = memberAt<CPointerVar<AtkRelationSet>>(56).value
        set(value) { memberAt<CPointerVar<AtkRelationSet>>(56).value = value }
    
    var layer: AtkLayer
        get() = memberAt<AtkLayer.Var>(64).value
        set(value) { memberAt<AtkLayer.Var>(64).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _AtkRelationSet(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var relations: CPointer<GPtrArray>?
        get() = memberAt<CPointerVar<GPtrArray>>(24).value
        set(value) { memberAt<CPointerVar<GPtrArray>>(24).value = value }
}

@CStruct("struct { double p0; double p1; double p2; double p3; }")
class _GdkRGBA(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var red: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    var green: gdouble
        get() = memberAt<gdoubleVar>(8).value
        set(value) { memberAt<gdoubleVar>(8).value = value }
    
    var blue: gdouble
        get() = memberAt<gdoubleVar>(16).value
        set(value) { memberAt<gdoubleVar>(16).value = value }
    
    var alpha: gdouble
        get() = memberAt<gdoubleVar>(24).value
        set(value) { memberAt<gdoubleVar>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _PangoFontMap(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkApplication(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GApplication
        get() = memberAt(0)
    
    var priv: CPointer<GtkApplicationPrivate>?
        get() = memberAt<CPointerVar<GtkApplicationPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkApplicationPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16[7]; } p0; void* p1; void* p2; void* p3[12]; }")
class _GtkApplicationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(424, 8)
    
    val parent_class: GApplicationClass
        get() = memberAt(0)
    
    var window_added: CPointer<CFunction<(CPointer<GtkApplication>?, CPointer<GtkWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkApplication>?, CPointer<GtkWindow>?) -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkApplication>?, CPointer<GtkWindow>?) -> Unit>>>(312).value = value }
    
    var window_removed: CPointer<CFunction<(CPointer<GtkApplication>?, CPointer<GtkWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkApplication>?, CPointer<GtkWindow>?) -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkApplication>?, CPointer<GtkWindow>?) -> Unit>>>(320).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(328)
}

class _GtkContainerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(976, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var add: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>>(824).value = value }
    
    var remove: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>>(832).value = value }
    
    var check_resize: CPointer<CFunction<(CPointer<GtkContainer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?) -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?) -> Unit>>>(840).value = value }
    
    var forall: CPointer<CFunction<(CPointer<GtkContainer>?, gboolean, GtkCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, gboolean, GtkCallback?, gpointer?) -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, gboolean, GtkCallback?, gpointer?) -> Unit>>>(848).value = value }
    
    var set_focus_child: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> Unit>>>(856).value = value }
    
    var child_type: CPointer<CFunction<(CPointer<GtkContainer>?) -> GType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?) -> GType>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?) -> GType>>>(864).value = value }
    
    var composite_name: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> CPointer<gcharVar>?>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> CPointer<gcharVar>?>>>(872).value = value }
    
    var set_child_property: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(880).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(880).value = value }
    
    var get_child_property: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(888).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(888).value = value }
    
    var get_path_for_child: CPointer<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> CPointer<GtkWidgetPath>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> CPointer<GtkWidgetPath>?>>>(896).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkContainer>?, CPointer<GtkWidget>?) -> CPointer<GtkWidgetPath>?>>>(896).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(912).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(912).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(920).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(920).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(952).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(952).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(960).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(960).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(968).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(968).value = value }
    
    var _handle_border_width: UInt
        get() = readBits(this.rawPtr, 7232, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 7232, 1, value.toLong()) }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkBinClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GtkWindowClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1072, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var set_focus: CPointer<CFunction<(CPointer<GtkWindow>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?, CPointer<GtkWidget>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?, CPointer<GtkWidget>?) -> Unit>>>(1008).value = value }
    
    var activate_focus: CPointer<CFunction<(CPointer<GtkWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?) -> Unit>>>(1016).value = value }
    
    var activate_default: CPointer<CFunction<(CPointer<GtkWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?) -> Unit>>>(1024).value = value }
    
    var keys_changed: CPointer<CFunction<(CPointer<GtkWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?) -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?) -> Unit>>>(1032).value = value }
    
    var enable_debugging: CPointer<CFunction<(CPointer<GtkWindow>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?, gboolean) -> gboolean>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkWindow>?, gboolean) -> gboolean>>>(1040).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkWindowGroup(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkWindowGroupPrivate>?
        get() = memberAt<CPointerVar<GtkWindowGroupPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkWindowGroupPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkWindowGroupClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { int p0; int p1; int p2; int p3; int p4; int p5; int p6; int p7; double p8; double p9; unsigned int p10; }")
class _GdkGeometry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var min_width: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var min_height: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
    
    var max_width: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var max_height: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
    
    var base_width: gint
        get() = memberAt<gintVar>(16).value
        set(value) { memberAt<gintVar>(16).value = value }
    
    var base_height: gint
        get() = memberAt<gintVar>(20).value
        set(value) { memberAt<gintVar>(20).value = value }
    
    var width_inc: gint
        get() = memberAt<gintVar>(24).value
        set(value) { memberAt<gintVar>(24).value = value }
    
    var height_inc: gint
        get() = memberAt<gintVar>(28).value
        set(value) { memberAt<gintVar>(28).value = value }
    
    var min_aspect: gdouble
        get() = memberAt<gdoubleVar>(32).value
        set(value) { memberAt<gdoubleVar>(32).value = value }
    
    var max_aspect: gdouble
        get() = memberAt<gdoubleVar>(40).value
        set(value) { memberAt<gdoubleVar>(40).value = value }
    
    var win_gravity: GdkGravity
        get() = memberAt<GdkGravityVar>(48).value
        set(value) { memberAt<GdkGravityVar>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val window: GtkWindow
        get() = memberAt(0)
    
    var priv: CPointer<GtkDialogPrivate>?
        get() = memberAt<CPointerVar<GtkDialogPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkDialogPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1120, 8)
    
    val parent_class: GtkWindowClass
        get() = memberAt(0)
    
    var response: CPointer<CFunction<(CPointer<GtkDialog>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkDialog>?, gint) -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkDialog>?, gint) -> Unit>>>(1072).value = value }
    
    var close: CPointer<CFunction<(CPointer<GtkDialog>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkDialog>?) -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkDialog>?) -> Unit>>>(1080).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAboutDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkAboutDialogPrivate>?
        get() = memberAt<CPointerVar<GtkAboutDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkAboutDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkAboutDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1160, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    var activate_link: CPointer<CFunction<(CPointer<GtkAboutDialog>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAboutDialog>?, CPointer<gcharVar>?) -> gboolean>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAboutDialog>?, CPointer<gcharVar>?) -> gboolean>>>(1120).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMenuShell(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkMenuShellPrivate>?
        get() = memberAt<CPointerVar<GtkMenuShellPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkMenuShellPrivate>>(40).value = value }
}

class _GtkMenuShellClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1088, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var deactivate: CPointer<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>>(984).value = value }
    
    var selection_done: CPointer<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>>(992).value = value }
    
    var move_current: CPointer<CFunction<(CPointer<GtkMenuShell>?, GtkMenuDirectionType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, GtkMenuDirectionType) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, GtkMenuDirectionType) -> Unit>>>(1000).value = value }
    
    var activate_current: CPointer<CFunction<(CPointer<GtkMenuShell>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, gboolean) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, gboolean) -> Unit>>>(1008).value = value }
    
    var cancel: CPointer<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> Unit>>>(1016).value = value }
    
    var select_item: CPointer<CFunction<(CPointer<GtkMenuShell>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, CPointer<GtkWidget>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, CPointer<GtkWidget>?) -> Unit>>>(1024).value = value }
    
    var insert: CPointer<CFunction<(CPointer<GtkMenuShell>?, CPointer<GtkWidget>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, CPointer<GtkWidget>?, gint) -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, CPointer<GtkWidget>?, gint) -> Unit>>>(1032).value = value }
    
    var get_popup_delay: CPointer<CFunction<(CPointer<GtkMenuShell>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> gint>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?) -> gint>>>(1040).value = value }
    
    var move_selected: CPointer<CFunction<(CPointer<GtkMenuShell>?, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, gint) -> gboolean>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuShell>?, gint) -> gboolean>>>(1048).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
    
    var submenu_placement: guint
        get() = readBits(this.rawPtr, 7808, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 7808, 1, value.toLong()) }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMenu(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val menu_shell: GtkMenuShell
        get() = memberAt(0)
    
    var priv: CPointer<GtkMenuPrivate>?
        get() = memberAt<CPointerVar<GtkMenuPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkMenuPrivate>>(48).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkMenuClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1120, 8)
    
    val parent_class: GtkMenuShellClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkLabel(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val misc: GtkMisc
        get() = memberAt(0)
    
    var priv: CPointer<GtkLabelPrivate>?
        get() = memberAt<CPointerVar<GtkLabelPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkLabelPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkMisc(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkMiscPrivate>?
        get() = memberAt<CPointerVar<GtkMiscPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkMiscPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; }")
class _GtkLabelClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(952, 8)
    
    val parent_class: GtkMiscClass
        get() = memberAt(0)
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkLabel>?, GtkMovementStep, gint, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?, GtkMovementStep, gint, gboolean) -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?, GtkMovementStep, gint, gboolean) -> Unit>>>(856).value = value }
    
    var copy_clipboard: CPointer<CFunction<(CPointer<GtkLabel>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?) -> Unit>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?) -> Unit>>>(864).value = value }
    
    var populate_popup: CPointer<CFunction<(CPointer<GtkLabel>?, CPointer<GtkMenu>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?, CPointer<GtkMenu>?) -> Unit>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?, CPointer<GtkMenu>?) -> Unit>>>(872).value = value }
    
    var activate_link: CPointer<CFunction<(CPointer<GtkLabel>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?, CPointer<gcharVar>?) -> gboolean>>>(880).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkLabel>?, CPointer<gcharVar>?) -> gboolean>>>(880).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(888).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(888).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(896).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(896).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(904).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(904).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(912).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(912).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(920).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(920).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkMiscClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAccelLabel(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val label: GtkLabel
        get() = memberAt(0)
    
    var priv: CPointer<GtkAccelLabelPrivate>?
        get() = memberAt<CPointerVar<GtkAccelLabelPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkAccelLabelPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GtkAccelLabelClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1032, 8)
    
    val parent_class: GtkLabelClass
        get() = memberAt(0)
    
    var signal_quote1: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(952).value
        set(value) { memberAt<CPointerVar<gcharVar>>(952).value = value }
    
    var signal_quote2: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(960).value
        set(value) { memberAt<CPointerVar<gcharVar>>(960).value = value }
    
    var mod_name_shift: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(968).value
        set(value) { memberAt<CPointerVar<gcharVar>>(968).value = value }
    
    var mod_name_control: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(976).value
        set(value) { memberAt<CPointerVar<gcharVar>>(976).value = value }
    
    var mod_name_alt: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(984).value
        set(value) { memberAt<CPointerVar<gcharVar>>(984).value = value }
    
    var mod_separator: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(992).value
        set(value) { memberAt<CPointerVar<gcharVar>>(992).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; unsigned int p2; void* p3; void* p4; void* p5; unsigned int p6; union { void* p0; void* p1; unsigned long p2; unsigned long p3; unsigned long p4; unsigned long p5; double p6; unsigned long p7; void* p8; void* p9; unsigned char p10; unsigned int p11; } p7; unsigned int p8; unsigned int p9; unsigned int p10; union { void* p0; void* p1; unsigned long p2; unsigned long p3; unsigned long p4; unsigned long p5; double p6; unsigned long p7; void* p8; void* p9; unsigned char p10; unsigned int p11; } p11; unsigned int p12; unsigned int p13; void* p14; int p15; void* p16; void* p17; void* p18; unsigned int p19; void* p20; }")
class _GScanner(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    var user_data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var max_parse_errors: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var parse_errors: guint
        get() = memberAt<guintVar>(12).value
        set(value) { memberAt<guintVar>(12).value = value }
    
    var input_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var qdata: CPointer<GData>?
        get() = memberAt<CPointerVar<GData>>(24).value
        set(value) { memberAt<CPointerVar<GData>>(24).value = value }
    
    var config: CPointer<GScannerConfig>?
        get() = memberAt<CPointerVar<GScannerConfig>>(32).value
        set(value) { memberAt<CPointerVar<GScannerConfig>>(32).value = value }
    
    var token: GTokenType
        get() = memberAt<GTokenTypeVar>(40).value
        set(value) { memberAt<GTokenTypeVar>(40).value = value }
    
    val value: GTokenValue
        get() = memberAt(48)
    
    var line: guint
        get() = memberAt<guintVar>(56).value
        set(value) { memberAt<guintVar>(56).value = value }
    
    var position: guint
        get() = memberAt<guintVar>(60).value
        set(value) { memberAt<guintVar>(60).value = value }
    
    var next_token: GTokenType
        get() = memberAt<GTokenTypeVar>(64).value
        set(value) { memberAt<GTokenTypeVar>(64).value = value }
    
    val next_value: GTokenValue
        get() = memberAt(72)
    
    var next_line: guint
        get() = memberAt<guintVar>(80).value
        set(value) { memberAt<guintVar>(80).value = value }
    
    var next_position: guint
        get() = memberAt<guintVar>(84).value
        set(value) { memberAt<guintVar>(84).value = value }
    
    var symbol_table: CPointer<GHashTable>?
        get() = memberAt<CPointerVar<GHashTable>>(88).value
        set(value) { memberAt<CPointerVar<GHashTable>>(88).value = value }
    
    var input_fd: gint
        get() = memberAt<gintVar>(96).value
        set(value) { memberAt<gintVar>(96).value = value }
    
    var text: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(104).value
        set(value) { memberAt<CPointerVar<gcharVar>>(104).value = value }
    
    var text_end: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(112).value
        set(value) { memberAt<CPointerVar<gcharVar>>(112).value = value }
    
    var buffer: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(120).value
        set(value) { memberAt<CPointerVar<gcharVar>>(120).value = value }
    
    var scope_id: guint
        get() = memberAt<guintVar>(128).value
        set(value) { memberAt<guintVar>(128).value = value }
    
    var msg_handler: GScannerMsgFunc?
        get() = memberAt<GScannerMsgFuncVar>(136).value
        set(value) { memberAt<GScannerMsgFuncVar>(136).value = value }
}

class _GScannerConfig(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var cset_skip_characters: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var cset_identifier_first: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var cset_identifier_nth: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var cpair_comment_single: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var padding_dummy: guint
        get() = memberAt<guintVar>(36).value
        set(value) { memberAt<guintVar>(36).value = value }
    
    var case_sensitive: guint
        get() = readBits(this.rawPtr, 256, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 256, 1, value.toLong()) }
    
    var skip_comment_multi: guint
        get() = readBits(this.rawPtr, 257, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 257, 1, value.toLong()) }
    
    var skip_comment_single: guint
        get() = readBits(this.rawPtr, 258, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 258, 1, value.toLong()) }
    
    var scan_comment_multi: guint
        get() = readBits(this.rawPtr, 259, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 259, 1, value.toLong()) }
    
    var scan_identifier: guint
        get() = readBits(this.rawPtr, 260, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 260, 1, value.toLong()) }
    
    var scan_identifier_1char: guint
        get() = readBits(this.rawPtr, 261, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 261, 1, value.toLong()) }
    
    var scan_identifier_NULL: guint
        get() = readBits(this.rawPtr, 262, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 262, 1, value.toLong()) }
    
    var scan_symbols: guint
        get() = readBits(this.rawPtr, 263, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 263, 1, value.toLong()) }
    
    var scan_binary: guint
        get() = readBits(this.rawPtr, 264, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 264, 1, value.toLong()) }
    
    var scan_octal: guint
        get() = readBits(this.rawPtr, 265, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 265, 1, value.toLong()) }
    
    var scan_float: guint
        get() = readBits(this.rawPtr, 266, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 266, 1, value.toLong()) }
    
    var scan_hex: guint
        get() = readBits(this.rawPtr, 267, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 267, 1, value.toLong()) }
    
    var scan_hex_dollar: guint
        get() = readBits(this.rawPtr, 268, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 268, 1, value.toLong()) }
    
    var scan_string_sq: guint
        get() = readBits(this.rawPtr, 269, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 269, 1, value.toLong()) }
    
    var scan_string_dq: guint
        get() = readBits(this.rawPtr, 270, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 270, 1, value.toLong()) }
    
    var numbers_2_int: guint
        get() = readBits(this.rawPtr, 271, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 271, 1, value.toLong()) }
    
    var int_2_float: guint
        get() = readBits(this.rawPtr, 272, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 272, 1, value.toLong()) }
    
    var identifier_2_string: guint
        get() = readBits(this.rawPtr, 273, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 273, 1, value.toLong()) }
    
    var char_2_token: guint
        get() = readBits(this.rawPtr, 274, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 274, 1, value.toLong()) }
    
    var symbol_2_token: guint
        get() = readBits(this.rawPtr, 275, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 275, 1, value.toLong()) }
    
    var scope_0_fallback: guint
        get() = readBits(this.rawPtr, 276, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 276, 1, value.toLong()) }
    
    var store_int64: guint
        get() = readBits(this.rawPtr, 277, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 277, 1, value.toLong()) }
}

@CStruct("union { void* p0; void* p1; unsigned long p2; unsigned long p3; unsigned long p4; unsigned long p5; double p6; unsigned long p7; void* p8; void* p9; unsigned char p10; unsigned int p11; }")
class _GTokenValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var v_symbol: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var v_identifier: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var v_binary: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_octal: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_int: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_int64: guint64
        get() = memberAt<guint64Var>(0).value
        set(value) { memberAt<guint64Var>(0).value = value }
    
    var v_float: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    var v_hex: gulong
        get() = memberAt<gulongVar>(0).value
        set(value) { memberAt<gulongVar>(0).value = value }
    
    var v_string: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var v_comment: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var v_char: guchar
        get() = memberAt<gucharVar>(0).value
        set(value) { memberAt<gucharVar>(0).value = value }
    
    var v_error: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; void* p2; void* p3; unsigned int p4; void* p5; unsigned int p6; } p0; void* p1; }")
class _GtkAccessible(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    val parent: AtkObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkAccessiblePrivate>?
        get() = memberAt<CPointerVar<GtkAccessiblePrivate>>(72).value
        set(value) { memberAt<CPointerVar<GtkAccessiblePrivate>>(72).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkAccessibleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(392, 8)
    
    val parent_class: AtkObjectClass
        get() = memberAt(0)
    
    var connect_widget_destroyed: CPointer<CFunction<(CPointer<GtkAccessible>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAccessible>?) -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAccessible>?) -> Unit>>>(352).value = value }
    
    var widget_set: CPointer<CFunction<(CPointer<GtkAccessible>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAccessible>?) -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAccessible>?) -> Unit>>>(360).value = value }
    
    var widget_unset: CPointer<CFunction<(CPointer<GtkAccessible>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAccessible>?) -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAccessible>?) -> Unit>>>(368).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(384).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(384).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; }")
class _AtkObjectClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(352, 8)
    
    val parent: GObjectClass
        get() = memberAt(0)
    
    var get_name: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>>(136).value = value }
    
    var get_description: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>>(144).value = value }
    
    var get_parent: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkObject>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkObject>?>>>(152).value = value }
    
    var get_n_children: CPointer<CFunction<(CPointer<AtkObject>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> gint>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> gint>>>(160).value = value }
    
    var ref_child: CPointer<CFunction<(CPointer<AtkObject>?, gint) -> CPointer<AtkObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, gint) -> CPointer<AtkObject>?>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, gint) -> CPointer<AtkObject>?>>>(168).value = value }
    
    var get_index_in_parent: CPointer<CFunction<(CPointer<AtkObject>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> gint>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> gint>>>(176).value = value }
    
    var ref_relation_set: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkRelationSet>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkRelationSet>?>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkRelationSet>?>>>(184).value = value }
    
    var get_role: CPointer<CFunction<(CPointer<AtkObject>?) -> AtkRole>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> AtkRole>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> AtkRole>>>(192).value = value }
    
    var get_layer: CPointer<CFunction<(CPointer<AtkObject>?) -> AtkLayer>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> AtkLayer>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> AtkLayer>>>(200).value = value }
    
    var get_mdi_zorder: CPointer<CFunction<(CPointer<AtkObject>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> gint>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> gint>>>(208).value = value }
    
    var ref_state_set: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkStateSet>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkStateSet>?>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkStateSet>?>>>(216).value = value }
    
    var set_name: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?) -> Unit>>>(224).value = value }
    
    var set_description: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?) -> Unit>>>(232).value = value }
    
    var set_parent: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<AtkObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<AtkObject>?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<AtkObject>?) -> Unit>>>(240).value = value }
    
    var set_role: CPointer<CFunction<(CPointer<AtkObject>?, AtkRole) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, AtkRole) -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, AtkRole) -> Unit>>>(248).value = value }
    
    var connect_property_change_handler: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyChangeHandlerVar>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyChangeHandlerVar>?) -> guint>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyChangeHandlerVar>?) -> guint>>>(256).value = value }
    
    var remove_property_change_handler: CPointer<CFunction<(CPointer<AtkObject>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, guint) -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, guint) -> Unit>>>(264).value = value }
    
    var initialize: CPointer<CFunction<(CPointer<AtkObject>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, gpointer?) -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, gpointer?) -> Unit>>>(272).value = value }
    
    var children_changed: CPointer<CFunction<(CPointer<AtkObject>?, guint, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, guint, gpointer?) -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, guint, gpointer?) -> Unit>>>(280).value = value }
    
    var focus_event: CPointer<CFunction<(CPointer<AtkObject>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, gboolean) -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, gboolean) -> Unit>>>(288).value = value }
    
    var property_change: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyValues>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyValues>?) -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyValues>?) -> Unit>>>(296).value = value }
    
    var state_change: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?, gboolean) -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gcharVar>?, gboolean) -> Unit>>>(304).value = value }
    
    var visible_data_changed: CPointer<CFunction<(CPointer<AtkObject>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> Unit>>>(312).value = value }
    
    var active_descendant_changed: CPointer<CFunction<(CPointer<AtkObject>?, CPointer<gpointerVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gpointerVar>?) -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?, CPointer<gpointerVar>?) -> Unit>>>(320).value = value }
    
    var get_attributes: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkAttributeSet>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkAttributeSet>?>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<AtkAttributeSet>?>>>(328).value = value }
    
    var get_object_locale: CPointer<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<AtkObject>?) -> CPointer<gcharVar>?>>>(336).value = value }
    
    var pad1: AtkFunction?
        get() = memberAt<AtkFunctionVar>(344).value
        set(value) { memberAt<AtkFunctionVar>(344).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _AtkStateSet(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent: GObject
        get() = memberAt(0)
}

@CStruct("struct { void* p0; struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; } p1; struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; } p2; }")
class _AtkPropertyValues(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var property_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    val old_value: GValue
        get() = memberAt(8)
    
    val new_value: GValue
        get() = memberAt(32)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkActionableInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_action_name: CPointer<CFunction<(CPointer<GtkActionable>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?) -> CPointer<gcharVar>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?) -> CPointer<gcharVar>?>>>(16).value = value }
    
    var set_action_name: CPointer<CFunction<(CPointer<GtkActionable>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?, CPointer<gcharVar>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?, CPointer<gcharVar>?) -> Unit>>>(24).value = value }
    
    var get_action_target_value: CPointer<CFunction<(CPointer<GtkActionable>?) -> CPointer<GVariant>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?) -> CPointer<GVariant>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?) -> CPointer<GVariant>?>>>(32).value = value }
    
    var set_action_target_value: CPointer<CFunction<(CPointer<GtkActionable>?, CPointer<GVariant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?, CPointer<GVariant>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkActionable>?, CPointer<GVariant>?) -> Unit>>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkActionBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkActionBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkAdjustmentClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val parent_class: GInitiallyUnownedClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GtkAdjustment>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAdjustment>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAdjustment>?) -> Unit>>>(136).value = value }
    
    var value_changed: CPointer<CFunction<(CPointer<GtkAdjustment>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAdjustment>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAdjustment>?) -> Unit>>>(144).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAppChooserDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkAppChooserDialogPrivate>?
        get() = memberAt<CPointerVar<GtkAppChooserDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkAppChooserDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1[16]; }")
class _GtkAppChooserDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1248, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(1120)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkBoxPrivate>?
        get() = memberAt<CPointerVar<GtkBoxPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkBoxPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAppChooserWidget(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkAppChooserWidgetPrivate>?
        get() = memberAt<CPointerVar<GtkAppChooserWidgetPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkAppChooserWidgetPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4[16]; }")
class _GtkAppChooserWidgetClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1160, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var application_selected: CPointer<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GAppInfo>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GAppInfo>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GAppInfo>?) -> Unit>>>(1008).value = value }
    
    var application_activated: CPointer<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GAppInfo>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GAppInfo>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GAppInfo>?) -> Unit>>>(1016).value = value }
    
    var populate_popup: CPointer<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GtkMenu>?, CPointer<GAppInfo>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GtkMenu>?, CPointer<GAppInfo>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserWidget>?, CPointer<GtkMenu>?, CPointer<GAppInfo>?) -> Unit>>>(1024).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(1032)
}

@CStruct("struct { int p0; void* p1; void* p2; void* p3; }")
class _GtkTreeIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var stamp: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var user_data: gpointer?
        get() = memberAt<gpointerVar>(8).value
        set(value) { memberAt<gpointerVar>(8).value = value }
    
    var user_data2: gpointer?
        get() = memberAt<gpointerVar>(16).value
        set(value) { memberAt<gpointerVar>(16).value = value }
    
    var user_data3: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; }")
class _GtkTreeModelIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var row_changed: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>>(16).value = value }
    
    var row_inserted: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>>(24).value = value }
    
    var row_has_child_toggled: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?) -> Unit>>>(32).value = value }
    
    var row_deleted: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?) -> Unit>>>(40).value = value }
    
    var rows_reordered: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?, CPointer<gintVar>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?, CPointer<gintVar>?) -> Unit>>>(48).value = value }
    
    var get_flags: CPointer<CFunction<(CPointer<GtkTreeModel>?) -> GtkTreeModelFlags>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?) -> GtkTreeModelFlags>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?) -> GtkTreeModelFlags>>>(56).value = value }
    
    var get_n_columns: CPointer<CFunction<(CPointer<GtkTreeModel>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?) -> gint>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?) -> gint>>>(64).value = value }
    
    var get_column_type: CPointer<CFunction<(CPointer<GtkTreeModel>?, gint) -> GType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, gint) -> GType>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, gint) -> GType>>>(72).value = value }
    
    var get_iter: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>>(80).value = value }
    
    var get_path: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> CPointer<GtkTreePath>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> CPointer<GtkTreePath>?>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> CPointer<GtkTreePath>?>>>(88).value = value }
    
    var get_value: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gint, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gint, CPointer<GValue>?) -> Unit>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gint, CPointer<GValue>?) -> Unit>>>(96).value = value }
    
    var iter_next: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(104).value = value }
    
    var iter_previous: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(112).value = value }
    
    var iter_children: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?) -> gboolean>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?) -> gboolean>>>(120).value = value }
    
    var iter_has_child: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(128).value = value }
    
    var iter_n_children: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gint>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gint>>>(136).value = value }
    
    var iter_nth_child: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?, gint) -> gboolean>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?, gint) -> gboolean>>>(144).value = value }
    
    var iter_parent: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?) -> gboolean>>>(152).value = value }
    
    var ref_node: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> Unit>>>(160).value = value }
    
    var unref_node: CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GtkCellEditableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var editing_done: CPointer<CFunction<(CPointer<GtkCellEditable>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellEditable>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellEditable>?) -> Unit>>>(16).value = value }
    
    var remove_widget: CPointer<CFunction<(CPointer<GtkCellEditable>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellEditable>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellEditable>?) -> Unit>>>(24).value = value }
    
    var start_editing: CPointer<CFunction<(CPointer<GtkCellEditable>?, CPointer<GdkEvent>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellEditable>?, CPointer<GdkEvent>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellEditable>?, CPointer<GdkEvent>?) -> Unit>>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkCellRenderer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GInitiallyUnowned
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkCellRendererPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; }")
class _GtkCellRendererClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(264, 8)
    
    val parent_class: GInitiallyUnownedClass
        get() = memberAt(0)
    
    var get_request_mode: CPointer<CFunction<(CPointer<GtkCellRenderer>?) -> GtkSizeRequestMode>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?) -> GtkSizeRequestMode>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?) -> GtkSizeRequestMode>>>(136).value = value }
    
    var get_preferred_width: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(144).value = value }
    
    var get_preferred_height_for_width: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(152).value = value }
    
    var get_preferred_height: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(160).value = value }
    
    var get_preferred_width_for_height: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(168).value = value }
    
    var get_aligned_area: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, GtkCellRendererState, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, GtkCellRendererState, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, GtkCellRendererState, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?) -> Unit>>>(176).value = value }
    
    var get_size: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(184).value = value }
    
    var render: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<cairo_t>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<cairo_t>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<cairo_t>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> Unit>>>(192).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkEvent>?, CPointer<GtkWidget>?, CPointer<gcharVar>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkEvent>?, CPointer<GtkWidget>?, CPointer<gcharVar>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkEvent>?, CPointer<GtkWidget>?, CPointer<gcharVar>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> gboolean>>>(200).value = value }
    
    var start_editing: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkEvent>?, CPointer<GtkWidget>?, CPointer<gcharVar>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> CPointer<GtkCellEditable>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkEvent>?, CPointer<GtkWidget>?, CPointer<gcharVar>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> CPointer<GtkCellEditable>?>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkEvent>?, CPointer<GtkWidget>?, CPointer<gcharVar>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> CPointer<GtkCellEditable>?>>>(208).value = value }
    
    var editing_canceled: CPointer<CFunction<(CPointer<GtkCellRenderer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?) -> Unit>>>(216).value = value }
    
    var editing_started: CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkCellEditable>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkCellEditable>?, CPointer<gcharVar>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GtkCellEditable>?, CPointer<gcharVar>?) -> Unit>>>(224).value = value }
    
    var priv: CPointer<GtkCellRendererClassPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererClassPrivate>>(232).value
        set(value) { memberAt<CPointerVar<GtkCellRendererClassPrivate>>(232).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkTreeSortableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var sort_column_changed: CPointer<CFunction<(CPointer<GtkTreeSortable>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?) -> Unit>>>(16).value = value }
    
    var get_sort_column_id: CPointer<CFunction<(CPointer<GtkTreeSortable>?, CPointer<gintVar>?, CPointer<GtkSortType.Var>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, CPointer<gintVar>?, CPointer<GtkSortType.Var>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, CPointer<gintVar>?, CPointer<GtkSortType.Var>?) -> gboolean>>>(24).value = value }
    
    var set_sort_column_id: CPointer<CFunction<(CPointer<GtkTreeSortable>?, gint, GtkSortType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, gint, GtkSortType) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, gint, GtkSortType) -> Unit>>>(32).value = value }
    
    var set_sort_func: CPointer<CFunction<(CPointer<GtkTreeSortable>?, gint, GtkTreeIterCompareFunc?, gpointer?, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, gint, GtkTreeIterCompareFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, gint, GtkTreeIterCompareFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(40).value = value }
    
    var set_default_sort_func: CPointer<CFunction<(CPointer<GtkTreeSortable>?, GtkTreeIterCompareFunc?, gpointer?, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, GtkTreeIterCompareFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?, GtkTreeIterCompareFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(48).value = value }
    
    var has_default_sort_func: CPointer<CFunction<(CPointer<GtkTreeSortable>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?) -> gboolean>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSortable>?) -> gboolean>>>(56).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkCellArea(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GInitiallyUnowned
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellAreaPrivate>?
        get() = memberAt<CPointerVar<GtkCellAreaPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkCellAreaPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; }")
class _GtkCellAreaClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(352, 8)
    
    val parent_class: GInitiallyUnownedClass
        get() = memberAt(0)
    
    var add: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?) -> Unit>>>(136).value = value }
    
    var remove: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?) -> Unit>>>(144).value = value }
    
    var foreach: CPointer<CFunction<(CPointer<GtkCellArea>?, GtkCellCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, GtkCellCallback?, gpointer?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, GtkCellCallback?, gpointer?) -> Unit>>>(152).value = value }
    
    var foreach_alloc: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellAllocCallback?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellAllocCallback?, gpointer?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellAllocCallback?, gpointer?) -> Unit>>>(160).value = value }
    
    var event: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkEvent>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkEvent>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> gint>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkEvent>?, CPointer<GdkRectangle>?, GtkCellRendererState) -> gint>>>(168).value = value }
    
    var render: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<cairo_t>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<cairo_t>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState, gboolean) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<cairo_t>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, GtkCellRendererState, gboolean) -> Unit>>>(176).value = value }
    
    var apply_attributes: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gboolean, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gboolean, gboolean) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gboolean, gboolean) -> Unit>>>(184).value = value }
    
    var create_context: CPointer<CFunction<(CPointer<GtkCellArea>?) -> CPointer<GtkCellAreaContext>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?) -> CPointer<GtkCellAreaContext>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?) -> CPointer<GtkCellAreaContext>?>>>(192).value = value }
    
    var copy_context: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?) -> CPointer<GtkCellAreaContext>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?) -> CPointer<GtkCellAreaContext>?>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?) -> CPointer<GtkCellAreaContext>?>>>(200).value = value }
    
    var get_request_mode: CPointer<CFunction<(CPointer<GtkCellArea>?) -> GtkSizeRequestMode>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?) -> GtkSizeRequestMode>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?) -> GtkSizeRequestMode>>>(208).value = value }
    
    var get_preferred_width: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(216).value = value }
    
    var get_preferred_height_for_width: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(224).value = value }
    
    var get_preferred_height: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(232).value = value }
    
    var get_preferred_width_for_height: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(240).value = value }
    
    var set_cell_property: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(248).value = value }
    
    var get_cell_property: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellRenderer>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>>(256).value = value }
    
    var focus: CPointer<CFunction<(CPointer<GtkCellArea>?, GtkDirectionType) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, GtkDirectionType) -> gboolean>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, GtkDirectionType) -> gboolean>>>(264).value = value }
    
    var is_activatable: CPointer<CFunction<(CPointer<GtkCellArea>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?) -> gboolean>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?) -> gboolean>>>(272).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, GtkCellRendererState, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, GtkCellRendererState, gboolean) -> gboolean>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellArea>?, CPointer<GtkCellAreaContext>?, CPointer<GtkWidget>?, CPointer<GdkRectangle>?, GtkCellRendererState, gboolean) -> gboolean>>>(280).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkCellAreaContext(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellAreaContextPrivate>?
        get() = memberAt<CPointerVar<GtkCellAreaContextPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkCellAreaContextPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTreeViewColumn(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GInitiallyUnowned
        get() = memberAt(0)
    
    var priv: CPointer<GtkTreeViewColumnPrivate>?
        get() = memberAt<CPointerVar<GtkTreeViewColumnPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTreeViewColumnPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkTreeViewColumnClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GInitiallyUnownedClass
        get() = memberAt(0)
    
    var clicked: CPointer<CFunction<(CPointer<GtkTreeViewColumn>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeViewColumn>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeViewColumn>?) -> Unit>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

class _GtkTextAttributes(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    var refcount: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    val appearance: GtkTextAppearance
        get() = memberAt(8)
    
    var justification: GtkJustification
        get() = memberAt<GtkJustification.Var>(56).value
        set(value) { memberAt<GtkJustification.Var>(56).value = value }
    
    var direction: GtkTextDirection
        get() = memberAt<GtkTextDirection.Var>(60).value
        set(value) { memberAt<GtkTextDirection.Var>(60).value = value }
    
    var font: CPointer<PangoFontDescription>?
        get() = memberAt<CPointerVar<PangoFontDescription>>(64).value
        set(value) { memberAt<CPointerVar<PangoFontDescription>>(64).value = value }
    
    var font_scale: gdouble
        get() = memberAt<gdoubleVar>(72).value
        set(value) { memberAt<gdoubleVar>(72).value = value }
    
    var left_margin: gint
        get() = memberAt<gintVar>(80).value
        set(value) { memberAt<gintVar>(80).value = value }
    
    var right_margin: gint
        get() = memberAt<gintVar>(84).value
        set(value) { memberAt<gintVar>(84).value = value }
    
    var indent: gint
        get() = memberAt<gintVar>(88).value
        set(value) { memberAt<gintVar>(88).value = value }
    
    var pixels_above_lines: gint
        get() = memberAt<gintVar>(92).value
        set(value) { memberAt<gintVar>(92).value = value }
    
    var pixels_below_lines: gint
        get() = memberAt<gintVar>(96).value
        set(value) { memberAt<gintVar>(96).value = value }
    
    var pixels_inside_wrap: gint
        get() = memberAt<gintVar>(100).value
        set(value) { memberAt<gintVar>(100).value = value }
    
    var tabs: CPointer<PangoTabArray>?
        get() = memberAt<CPointerVar<PangoTabArray>>(104).value
        set(value) { memberAt<CPointerVar<PangoTabArray>>(104).value = value }
    
    var wrap_mode: GtkWrapMode
        get() = memberAt<GtkWrapMode.Var>(112).value
        set(value) { memberAt<GtkWrapMode.Var>(112).value = value }
    
    var language: CPointer<PangoLanguage>?
        get() = memberAt<CPointerVar<PangoLanguage>>(120).value
        set(value) { memberAt<CPointerVar<PangoLanguage>>(120).value = value }
    
    var pg_bg_color: CPointer<GdkColor>?
        get() = memberAt<CPointerVar<GdkColor>>(128).value
        set(value) { memberAt<CPointerVar<GdkColor>>(128).value = value }
    
    var pg_bg_rgba: CPointer<GdkRGBA>?
        get() = memberAt<CPointerVar<GdkRGBA>>(144).value
        set(value) { memberAt<CPointerVar<GdkRGBA>>(144).value = value }
    
    var letter_spacing: gint
        get() = memberAt<gintVar>(152).value
        set(value) { memberAt<gintVar>(152).value = value }
    
    var font_features: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(160).value
        set(value) { memberAt<CPointerVar<gcharVar>>(160).value = value }
    
    var invisible: guint
        get() = readBits(this.rawPtr, 1088, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 1088, 1, value.toLong()) }
    
    var bg_full_height: guint
        get() = readBits(this.rawPtr, 1089, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 1089, 1, value.toLong()) }
    
    var editable: guint
        get() = readBits(this.rawPtr, 1090, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 1090, 1, value.toLong()) }
    
    var no_fallback: guint
        get() = readBits(this.rawPtr, 1091, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 1091, 1, value.toLong()) }
}

class _GtkTextAppearance(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val bg_color: GdkColor
        get() = memberAt(0)
    
    val fg_color: GdkColor
        get() = memberAt(12)
    
    var rise: gint
        get() = memberAt<gintVar>(24).value
        set(value) { memberAt<gintVar>(24).value = value }
    
    val rgba: CArrayPointer<CPointerVar<GdkRGBA>>
        get() = arrayMemberAt(32)
    
    var underline: guint
        get() = readBits(this.rawPtr, 224, 4, false).toUInt()
        set(value) { writeBits(this.rawPtr, 224, 4, value.toLong()) }
    
    var strikethrough: guint
        get() = readBits(this.rawPtr, 228, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 228, 1, value.toLong()) }
    
    var draw_bg: guint
        get() = readBits(this.rawPtr, 229, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 229, 1, value.toLong()) }
    
    var inside_selection: guint
        get() = readBits(this.rawPtr, 230, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 230, 1, value.toLong()) }
    
    var is_text: guint
        get() = readBits(this.rawPtr, 231, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 231, 1, value.toLong()) }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTextChildAnchor(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var segment: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkTextChildAnchorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { void* p0; void* p1; int p2; int p3; int p4; int p5; int p6; int p7; void* p8; void* p9; int p10; int p11; int p12; void* p13; }")
class _GtkTextIter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    var dummy1: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var dummy2: gpointer?
        get() = memberAt<gpointerVar>(8).value
        set(value) { memberAt<gpointerVar>(8).value = value }
    
    var dummy3: gint
        get() = memberAt<gintVar>(16).value
        set(value) { memberAt<gintVar>(16).value = value }
    
    var dummy4: gint
        get() = memberAt<gintVar>(20).value
        set(value) { memberAt<gintVar>(20).value = value }
    
    var dummy5: gint
        get() = memberAt<gintVar>(24).value
        set(value) { memberAt<gintVar>(24).value = value }
    
    var dummy6: gint
        get() = memberAt<gintVar>(28).value
        set(value) { memberAt<gintVar>(28).value = value }
    
    var dummy7: gint
        get() = memberAt<gintVar>(32).value
        set(value) { memberAt<gintVar>(32).value = value }
    
    var dummy8: gint
        get() = memberAt<gintVar>(36).value
        set(value) { memberAt<gintVar>(36).value = value }
    
    var dummy9: gpointer?
        get() = memberAt<gpointerVar>(40).value
        set(value) { memberAt<gpointerVar>(40).value = value }
    
    var dummy10: gpointer?
        get() = memberAt<gpointerVar>(48).value
        set(value) { memberAt<gpointerVar>(48).value = value }
    
    var dummy11: gint
        get() = memberAt<gintVar>(56).value
        set(value) { memberAt<gintVar>(56).value = value }
    
    var dummy12: gint
        get() = memberAt<gintVar>(60).value
        set(value) { memberAt<gintVar>(60).value = value }
    
    var dummy13: gint
        get() = memberAt<gintVar>(64).value
        set(value) { memberAt<gintVar>(64).value = value }
    
    var dummy14: gpointer?
        get() = memberAt<gpointerVar>(72).value
        set(value) { memberAt<gpointerVar>(72).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTextTagTable(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTextTagTablePrivate>?
        get() = memberAt<CPointerVar<GtkTextTagTablePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTextTagTablePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTextTag(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTextTagPrivate>?
        get() = memberAt<CPointerVar<GtkTextTagPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTextTagPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkTextTagClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var event: CPointer<CFunction<(CPointer<GtkTextTag>?, CPointer<GObject>?, CPointer<GdkEvent>?, CPointer<GtkTextIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextTag>?, CPointer<GObject>?, CPointer<GdkEvent>?, CPointer<GtkTextIter>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextTag>?, CPointer<GObject>?, CPointer<GdkEvent>?, CPointer<GtkTextIter>?) -> gboolean>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTextBuffer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTextBufferPrivate>?
        get() = memberAt<CPointerVar<GtkTextBufferPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTextBufferPrivate>>(24).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; unsigned int p2; }")
class _GtkTargetPair(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var target: GdkAtom?
        get() = memberAt<GdkAtomVar>(0).value
        set(value) { memberAt<GdkAtomVar>(0).value = value }
    
    var flags: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var info: guint
        get() = memberAt<guintVar>(12).value
        set(value) { memberAt<guintVar>(12).value = value }
}

@CStruct("struct { void* p0; unsigned int p1; unsigned int p2; }")
class _GtkTargetEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var target: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var flags: guint
        get() = memberAt<guintVar>(8).value
        set(value) { memberAt<guintVar>(8).value = value }
    
    var info: guint
        get() = memberAt<guintVar>(12).value
        set(value) { memberAt<guintVar>(12).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GtkEditableInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
    
    var insert_text: CPointer<CFunction<(CPointer<GtkEditable>?, CPointer<gcharVar>?, gint, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, CPointer<gcharVar>?, gint, CPointer<gintVar>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, CPointer<gcharVar>?, gint, CPointer<gintVar>?) -> Unit>>>(16).value = value }
    
    var delete_text: CPointer<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>>(24).value = value }
    
    var changed: CPointer<CFunction<(CPointer<GtkEditable>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?) -> Unit>>>(32).value = value }
    
    var do_insert_text: CPointer<CFunction<(CPointer<GtkEditable>?, CPointer<gcharVar>?, gint, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, CPointer<gcharVar>?, gint, CPointer<gintVar>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, CPointer<gcharVar>?, gint, CPointer<gintVar>?) -> Unit>>>(40).value = value }
    
    var do_delete_text: CPointer<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>>(48).value = value }
    
    var get_chars: CPointer<CFunction<(CPointer<GtkEditable>?, gint, gint) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> CPointer<gcharVar>?>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> CPointer<gcharVar>?>>>(56).value = value }
    
    var set_selection_bounds: CPointer<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint, gint) -> Unit>>>(64).value = value }
    
    var get_selection_bounds: CPointer<CFunction<(CPointer<GtkEditable>?, CPointer<gintVar>?, CPointer<gintVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, CPointer<gintVar>?, CPointer<gintVar>?) -> gboolean>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, CPointer<gintVar>?, CPointer<gintVar>?) -> gboolean>>>(72).value = value }
    
    var set_position: CPointer<CFunction<(CPointer<GtkEditable>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint) -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?, gint) -> Unit>>>(80).value = value }
    
    var get_position: CPointer<CFunction<(CPointer<GtkEditable>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?) -> gint>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEditable>?) -> gint>>>(88).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GtkIMContext(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; }")
class _GtkIMContextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var preedit_start: CPointer<CFunction<(CPointer<GtkIMContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(136).value = value }
    
    var preedit_end: CPointer<CFunction<(CPointer<GtkIMContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(144).value = value }
    
    var preedit_changed: CPointer<CFunction<(CPointer<GtkIMContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(152).value = value }
    
    var commit: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<gcharVar>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<gcharVar>?) -> Unit>>>(160).value = value }
    
    var retrieve_surrounding: CPointer<CFunction<(CPointer<GtkIMContext>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> gboolean>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> gboolean>>>(168).value = value }
    
    var delete_surrounding: CPointer<CFunction<(CPointer<GtkIMContext>?, gint, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, gint, gint) -> gboolean>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, gint, gint) -> gboolean>>>(176).value = value }
    
    var set_client_window: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkWindow>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkWindow>?) -> Unit>>>(184).value = value }
    
    var get_preedit_string: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<PangoAttrList>>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<PangoAttrList>>?, CPointer<gintVar>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<PangoAttrList>>?, CPointer<gintVar>?) -> Unit>>>(192).value = value }
    
    var filter_keypress: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkEventKey>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkEventKey>?) -> gboolean>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkEventKey>?) -> gboolean>>>(200).value = value }
    
    var focus_in: CPointer<CFunction<(CPointer<GtkIMContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(208).value = value }
    
    var focus_out: CPointer<CFunction<(CPointer<GtkIMContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(216).value = value }
    
    var reset: CPointer<CFunction<(CPointer<GtkIMContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?) -> Unit>>>(224).value = value }
    
    var set_cursor_location: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkRectangle>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkRectangle>?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<GdkRectangle>?) -> Unit>>>(232).value = value }
    
    var set_use_preedit: CPointer<CFunction<(CPointer<GtkIMContext>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, gboolean) -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, gboolean) -> Unit>>>(240).value = value }
    
    var set_surrounding: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<gcharVar>?, gint, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<gcharVar>?, gint, gint) -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<gcharVar>?, gint, gint) -> Unit>>>(248).value = value }
    
    var get_surrounding: CPointer<CFunction<(CPointer<GtkIMContext>?, CPointer<CPointerVar<gcharVar>>?, CPointer<gintVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<CPointerVar<gcharVar>>?, CPointer<gintVar>?) -> gboolean>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIMContext>?, CPointer<CPointerVar<gcharVar>>?, CPointer<gintVar>?) -> gboolean>>>(256).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkEntryBuffer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkEntryBufferPrivate>?
        get() = memberAt<CPointerVar<GtkEntryBufferPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkEntryBufferPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GtkEntryBufferClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(248, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var inserted_text: CPointer<CFunction<(CPointer<GtkEntryBuffer>?, guint, CPointer<gcharVar>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, CPointer<gcharVar>?, guint) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, CPointer<gcharVar>?, guint) -> Unit>>>(136).value = value }
    
    var deleted_text: CPointer<CFunction<(CPointer<GtkEntryBuffer>?, guint, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, guint) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, guint) -> Unit>>>(144).value = value }
    
    var get_text: CPointer<CFunction<(CPointer<GtkEntryBuffer>?, CPointer<gsizeVar>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, CPointer<gsizeVar>?) -> CPointer<gcharVar>?>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, CPointer<gsizeVar>?) -> CPointer<gcharVar>?>>>(152).value = value }
    
    var get_length: CPointer<CFunction<(CPointer<GtkEntryBuffer>?) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?) -> guint>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?) -> guint>>>(160).value = value }
    
    var insert_text: CPointer<CFunction<(CPointer<GtkEntryBuffer>?, guint, CPointer<gcharVar>?, guint) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, CPointer<gcharVar>?, guint) -> guint>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, CPointer<gcharVar>?, guint) -> guint>>>(168).value = value }
    
    var delete_text: CPointer<CFunction<(CPointer<GtkEntryBuffer>?, guint, guint) -> guint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, guint) -> guint>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryBuffer>?, guint, guint) -> guint>>>(176).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(216).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkListStore(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkListStorePrivate>?
        get() = memberAt<CPointerVar<GtkListStorePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkListStorePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkListStoreClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTreeModelFilter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTreeModelFilterPrivate>?
        get() = memberAt<CPointerVar<GtkTreeModelFilterPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTreeModelFilterPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkTreeModelFilterClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(184, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var visible: CPointer<CFunction<(CPointer<GtkTreeModelFilter>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModelFilter>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModelFilter>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(136).value = value }
    
    var modify: CPointer<CFunction<(CPointer<GtkTreeModelFilter>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GValue>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModelFilter>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GValue>?, gint) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeModelFilter>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GValue>?, gint) -> Unit>>>(144).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkEntryCompletion(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkEntryCompletionPrivate>?
        get() = memberAt<CPointerVar<GtkEntryCompletionPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkEntryCompletionPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GtkEntryCompletionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(200, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var match_selected: CPointer<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(136).value = value }
    
    var action_activated: CPointer<CFunction<(CPointer<GtkEntryCompletion>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, gint) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, gint) -> Unit>>>(144).value = value }
    
    var insert_prefix: CPointer<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<gcharVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<gcharVar>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<gcharVar>?) -> gboolean>>>(152).value = value }
    
    var cursor_on_match: CPointer<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?) -> gboolean>>>(160).value = value }
    
    var no_matches: CPointer<CFunction<(CPointer<GtkEntryCompletion>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntryCompletion>?) -> Unit>>>(168).value = value }
    
    var _gtk_reserved0: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkImage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val misc: GtkMisc
        get() = memberAt(0)
    
    var priv: CPointer<GtkImagePrivate>?
        get() = memberAt<CPointerVar<GtkImagePrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkImagePrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkImageClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(888, 8)
    
    val parent_class: GtkMiscClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(856).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(864).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(872).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(880).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(880).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkEntryPrivate>?
        get() = memberAt<CPointerVar<GtkEntryPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkEntryPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; }")
class _GtkEntryClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(976, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var populate_popup: CPointer<CFunction<(CPointer<GtkEntry>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<GtkWidget>?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<GtkWidget>?) -> Unit>>>(824).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(832).value = value }
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkEntry>?, GtkMovementStep, gint, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, GtkMovementStep, gint, gboolean) -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, GtkMovementStep, gint, gboolean) -> Unit>>>(840).value = value }
    
    var insert_at_cursor: CPointer<CFunction<(CPointer<GtkEntry>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<gcharVar>?) -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<gcharVar>?) -> Unit>>>(848).value = value }
    
    var delete_from_cursor: CPointer<CFunction<(CPointer<GtkEntry>?, GtkDeleteType, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, GtkDeleteType, gint) -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, GtkDeleteType, gint) -> Unit>>>(856).value = value }
    
    var backspace: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(864).value = value }
    
    var cut_clipboard: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(872).value = value }
    
    var copy_clipboard: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(880).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(880).value = value }
    
    var paste_clipboard: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(888).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(888).value = value }
    
    var toggle_overwrite: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(896).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(896).value = value }
    
    var get_text_area_size: CPointer<CFunction<(CPointer<GtkEntry>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(904).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(904).value = value }
    
    var get_frame_size: CPointer<CFunction<(CPointer<GtkEntry>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(912).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(912).value = value }
    
    var insert_emoji: CPointer<CFunction<(CPointer<GtkEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(920).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkEntry>?) -> Unit>>>(920).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(952).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(952).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(960).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(960).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(968).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(968).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkTreeView(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkTreeViewPrivate>?
        get() = memberAt<CPointerVar<GtkTreeViewPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkTreeViewPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; }")
class _GtkTreeViewClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1160, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var row_activated: CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreePath>?, CPointer<GtkTreeViewColumn>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreePath>?, CPointer<GtkTreeViewColumn>?) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreePath>?, CPointer<GtkTreeViewColumn>?) -> Unit>>>(976).value = value }
    
    var test_expand_row: CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>>(984).value = value }
    
    var test_collapse_row: CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> gboolean>>>(992).value = value }
    
    var row_expanded: CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> Unit>>>(1000).value = value }
    
    var row_collapsed: CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeIter>?, CPointer<GtkTreePath>?) -> Unit>>>(1008).value = value }
    
    var columns_changed: CPointer<CFunction<(CPointer<GtkTreeView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> Unit>>>(1016).value = value }
    
    var cursor_changed: CPointer<CFunction<(CPointer<GtkTreeView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> Unit>>>(1024).value = value }
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkTreeView>?, GtkMovementStep, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, GtkMovementStep, gint) -> gboolean>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, GtkMovementStep, gint) -> gboolean>>>(1032).value = value }
    
    var select_all: CPointer<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1040).value = value }
    
    var unselect_all: CPointer<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1048).value = value }
    
    var select_cursor_row: CPointer<CFunction<(CPointer<GtkTreeView>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, gboolean) -> gboolean>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, gboolean) -> gboolean>>>(1056).value = value }
    
    var toggle_cursor_row: CPointer<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1064).value = value }
    
    var expand_collapse_cursor_row: CPointer<CFunction<(CPointer<GtkTreeView>?, gboolean, gboolean, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, gboolean, gboolean, gboolean) -> gboolean>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?, gboolean, gboolean, gboolean) -> gboolean>>>(1072).value = value }
    
    var select_cursor_parent: CPointer<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1080).value = value }
    
    var start_interactive_search: CPointer<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeView>?) -> gboolean>>>(1088).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTreeSelection(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTreeSelectionPrivate>?
        get() = memberAt<CPointerVar<GtkTreeSelectionPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTreeSelectionPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkTreeSelectionClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GtkTreeSelection>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSelection>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeSelection>?) -> Unit>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkComboBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkComboBoxPrivate>?
        get() = memberAt<CPointerVar<GtkComboBoxPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkComboBoxPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkComboBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1048, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GtkComboBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkComboBox>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkComboBox>?) -> Unit>>>(1008).value = value }
    
    var format_entry_text: CPointer<CFunction<(CPointer<GtkComboBox>?, CPointer<gcharVar>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkComboBox>?, CPointer<gcharVar>?) -> CPointer<gcharVar>?>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkComboBox>?, CPointer<gcharVar>?) -> CPointer<gcharVar>?>>>(1016).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAppChooserButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkComboBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkAppChooserButtonPrivate>?
        get() = memberAt<CPointerVar<GtkAppChooserButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkAppChooserButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2[16]; }")
class _GtkAppChooserButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1184, 8)
    
    val parent_class: GtkComboBoxClass
        get() = memberAt(0)
    
    var custom_item_activated: CPointer<CFunction<(CPointer<GtkAppChooserButton>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserButton>?, CPointer<gcharVar>?) -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAppChooserButton>?, CPointer<gcharVar>?) -> Unit>>>(1048).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(1056)
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkShortcutsWindow(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val window: GtkWindow
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; }")
class _GtkShortcutsWindowClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1088, 8)
    
    val parent_class: GtkWindowClass
        get() = memberAt(0)
    
    var close: CPointer<CFunction<(CPointer<GtkShortcutsWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkShortcutsWindow>?) -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkShortcutsWindow>?) -> Unit>>>(1072).value = value }
    
    var search: CPointer<CFunction<(CPointer<GtkShortcutsWindow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkShortcutsWindow>?) -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkShortcutsWindow>?) -> Unit>>>(1080).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1[14]; }")
class _GtkApplicationWindowClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1184, 8)
    
    val parent_class: GtkWindowClass
        get() = memberAt(0)
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(1072)
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkApplicationWindow(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent_instance: GtkWindow
        get() = memberAt(0)
    
    var priv: CPointer<GtkApplicationWindowPrivate>?
        get() = memberAt<CPointerVar<GtkApplicationWindowPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkApplicationWindowPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFrame(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkFramePrivate>?
        get() = memberAt<CPointerVar<GtkFramePrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkFramePrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkFrameClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1048, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var compute_child_allocation: CPointer<CFunction<(CPointer<GtkFrame>?, CPointer<GtkAllocation>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFrame>?, CPointer<GtkAllocation>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFrame>?, CPointer<GtkAllocation>?) -> Unit>>>(1008).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAspectFrame(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val frame: GtkFrame
        get() = memberAt(0)
    
    var priv: CPointer<GtkAspectFramePrivate>?
        get() = memberAt<CPointerVar<GtkAspectFramePrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkAspectFramePrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkAspectFrameClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1080, 8)
    
    val parent_class: GtkFrameClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkAssistant(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkWindow
        get() = memberAt(0)
    
    var priv: CPointer<GtkAssistantPrivate>?
        get() = memberAt<CPointerVar<GtkAssistantPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkAssistantPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GtkAssistantClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1144, 8)
    
    val parent_class: GtkWindowClass
        get() = memberAt(0)
    
    var prepare: CPointer<CFunction<(CPointer<GtkAssistant>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?, CPointer<GtkWidget>?) -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?, CPointer<GtkWidget>?) -> Unit>>>(1072).value = value }
    
    var apply: CPointer<CFunction<(CPointer<GtkAssistant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?) -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?) -> Unit>>>(1080).value = value }
    
    var close: CPointer<CFunction<(CPointer<GtkAssistant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?) -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?) -> Unit>>>(1088).value = value }
    
    var cancel: CPointer<CFunction<(CPointer<GtkAssistant>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?) -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkAssistant>?) -> Unit>>>(1096).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkButtonBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val box: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkButtonBoxPrivate>?
        get() = memberAt<CPointerVar<GtkButtonBoxPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkButtonBoxPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkButtonBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

class _GtkBindingSet(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var set_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var priority: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var widget_path_pspecs: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(16).value
        set(value) { memberAt<CPointerVar<GSList>>(16).value = value }
    
    var widget_class_pspecs: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(24).value
        set(value) { memberAt<CPointerVar<GSList>>(24).value = value }
    
    var class_branch_pspecs: CPointer<GSList>?
        get() = memberAt<CPointerVar<GSList>>(32).value
        set(value) { memberAt<CPointerVar<GSList>>(32).value = value }
    
    var entries: CPointer<GtkBindingEntry>?
        get() = memberAt<CPointerVar<GtkBindingEntry>>(40).value
        set(value) { memberAt<CPointerVar<GtkBindingEntry>>(40).value = value }
    
    var current: CPointer<GtkBindingEntry>?
        get() = memberAt<CPointerVar<GtkBindingEntry>>(48).value
        set(value) { memberAt<CPointerVar<GtkBindingEntry>>(48).value = value }
    
    var parsed: guint
        get() = readBits(this.rawPtr, 448, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 448, 1, value.toLong()) }
}

class _GtkBindingEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var keyval: guint
        get() = memberAt<guintVar>(0).value
        set(value) { memberAt<guintVar>(0).value = value }
    
    var modifiers: GdkModifierType
        get() = memberAt<GdkModifierTypeVar>(4).value
        set(value) { memberAt<GdkModifierTypeVar>(4).value = value }
    
    var binding_set: CPointer<GtkBindingSet>?
        get() = memberAt<CPointerVar<GtkBindingSet>>(8).value
        set(value) { memberAt<CPointerVar<GtkBindingSet>>(8).value = value }
    
    var set_next: CPointer<GtkBindingEntry>?
        get() = memberAt<CPointerVar<GtkBindingEntry>>(24).value
        set(value) { memberAt<CPointerVar<GtkBindingEntry>>(24).value = value }
    
    var hash_next: CPointer<GtkBindingEntry>?
        get() = memberAt<CPointerVar<GtkBindingEntry>>(32).value
        set(value) { memberAt<CPointerVar<GtkBindingEntry>>(32).value = value }
    
    var signals: CPointer<GtkBindingSignal>?
        get() = memberAt<CPointerVar<GtkBindingSignal>>(40).value
        set(value) { memberAt<CPointerVar<GtkBindingSignal>>(40).value = value }
    
    var destroyed: guint
        get() = readBits(this.rawPtr, 128, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 128, 1, value.toLong()) }
    
    var in_emission: guint
        get() = readBits(this.rawPtr, 129, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 129, 1, value.toLong()) }
    
    var marks_unbound: guint
        get() = readBits(this.rawPtr, 130, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 130, 1, value.toLong()) }
}

@CStruct("struct { void* p0; void* p1; unsigned int p2; void* p3; }")
class _GtkBindingSignal(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var next: CPointer<GtkBindingSignal>?
        get() = memberAt<CPointerVar<GtkBindingSignal>>(0).value
        set(value) { memberAt<CPointerVar<GtkBindingSignal>>(0).value = value }
    
    var signal_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var n_args: guint
        get() = memberAt<guintVar>(16).value
        set(value) { memberAt<guintVar>(16).value = value }
    
    var args: CPointer<GtkBindingArg>?
        get() = memberAt<CPointerVar<GtkBindingArg>>(24).value
        set(value) { memberAt<CPointerVar<GtkBindingArg>>(24).value = value }
}

@CStruct("struct { unsigned long p0; union { long p0; double p1; void* p2; } p1; }")
class _GtkBindingArg(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var arg_type: GType
        get() = memberAt<GTypeVar>(0).value
        set(value) { memberAt<GTypeVar>(0).value = value }
    
    val d: anonymousStruct7
        get() = memberAt(8)
}

@CStruct("union { long p0; double p1; void* p2; }")
class anonymousStruct7(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var long_data: glong
        get() = memberAt<glongVar>(0).value
        set(value) { memberAt<glongVar>(0).value = value }
    
    var double_data: gdouble
        get() = memberAt<gdoubleVar>(0).value
        set(value) { memberAt<gdoubleVar>(0).value = value }
    
    var string_data: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GtkBuilderClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(208, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var get_type_from_name: CPointer<CFunction<(CPointer<GtkBuilder>?, CPointer<ByteVar>?) -> GType>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuilder>?, CPointer<ByteVar>?) -> GType>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuilder>?, CPointer<ByteVar>?) -> GType>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GtkBuildableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var set_name: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<gcharVar>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<gcharVar>?) -> Unit>>>(16).value = value }
    
    var get_name: CPointer<CFunction<(CPointer<GtkBuildable>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?) -> CPointer<gcharVar>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?) -> CPointer<gcharVar>?>>>(24).value = value }
    
    var add_child: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?) -> Unit>>>(32).value = value }
    
    var set_buildable_property: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?, CPointer<GValue>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?, CPointer<GValue>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?, CPointer<GValue>?) -> Unit>>>(40).value = value }
    
    var construct_child: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?) -> CPointer<GObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?) -> CPointer<GObject>?>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?) -> CPointer<GObject>?>>>(48).value = value }
    
    var custom_tag_start: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<GMarkupParser>?, CPointer<gpointerVar>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<GMarkupParser>?, CPointer<gpointerVar>?) -> gboolean>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<GMarkupParser>?, CPointer<gpointerVar>?) -> gboolean>>>(56).value = value }
    
    var custom_tag_end: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<gpointerVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<gpointerVar>?) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<gpointerVar>?) -> Unit>>>(64).value = value }
    
    var custom_finished: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, gpointer?) -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, gpointer?) -> Unit>>>(72).value = value }
    
    var parser_finished: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?) -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?) -> Unit>>>(80).value = value }
    
    var get_internal_child: CPointer<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?) -> CPointer<GObject>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?) -> CPointer<GObject>?>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkBuildable>?, CPointer<GtkBuilder>?, CPointer<gcharVar>?) -> CPointer<GObject>?>>>(88).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; }")
class _GMarkupParser(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var start_element: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<gcharVar>>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<gcharVar>>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, CPointer<CPointerVar<gcharVar>>?, CPointer<CPointerVar<gcharVar>>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(0).value = value }
    
    var end_element: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(8).value = value }
    
    var text: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(16).value = value }
    
    var passthrough: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<gcharVar>?, gsize, gpointer?, CPointer<CPointerVar<GError>>?) -> Unit>>>(24).value = value }
    
    var error: CPointer<CFunction<(CPointer<GMarkupParseContext>?, CPointer<GError>?, gpointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<GError>?, gpointer?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GMarkupParseContext>?, CPointer<GError>?, gpointer?) -> Unit>>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkButtonPrivate>?
        get() = memberAt<CPointerVar<GtkButtonPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkButtonPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GtkButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1088, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var pressed: CPointer<CFunction<(CPointer<GtkButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1008).value = value }
    
    var released: CPointer<CFunction<(CPointer<GtkButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1016).value = value }
    
    var clicked: CPointer<CFunction<(CPointer<GtkButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1024).value = value }
    
    var enter: CPointer<CFunction<(CPointer<GtkButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1032).value = value }
    
    var leave: CPointer<CFunction<(CPointer<GtkButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1040).value = value }
    
    var activate: CPointer<CFunction<(CPointer<GtkButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkButton>?) -> Unit>>>(1048).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCalendar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkCalendarPrivate>?
        get() = memberAt<CPointerVar<GtkCalendarPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCalendarPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; }")
class _GtkCalendarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(912, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var month_changed: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(824).value = value }
    
    var day_selected: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(832).value = value }
    
    var day_selected_double_click: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(840).value = value }
    
    var prev_month: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(848).value = value }
    
    var next_month: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(856).value = value }
    
    var prev_year: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(864).value = value }
    
    var next_year: CPointer<CFunction<(CPointer<GtkCalendar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCalendar>?) -> Unit>>>(872).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(880).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(880).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(888).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(888).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(896).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(896).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(904).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(904).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellAreaBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkCellArea
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellAreaBoxPrivate>?
        get() = memberAt<CPointerVar<GtkCellAreaBoxPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellAreaBoxPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellAreaBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(384, 8)
    
    val parent_class: GtkCellAreaClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(360).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(368).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(376).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GtkCellAreaContextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var allocate: CPointer<CFunction<(CPointer<GtkCellAreaContext>?, gint, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?, gint, gint) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?, gint, gint) -> Unit>>>(136).value = value }
    
    var reset: CPointer<CFunction<(CPointer<GtkCellAreaContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?) -> Unit>>>(144).value = value }
    
    var get_preferred_height_for_width: CPointer<CFunction<(CPointer<GtkCellAreaContext>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(152).value = value }
    
    var get_preferred_width_for_height: CPointer<CFunction<(CPointer<GtkCellAreaContext>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellAreaContext>?, gint, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(160).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(192).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(200).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(208).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GtkCellLayoutIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var pack_start: CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gboolean) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gboolean) -> Unit>>>(16).value = value }
    
    var pack_end: CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gboolean) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gboolean) -> Unit>>>(24).value = value }
    
    var clear: CPointer<CFunction<(CPointer<GtkCellLayout>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?) -> Unit>>>(32).value = value }
    
    var add_attribute: CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, CPointer<gcharVar>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, CPointer<gcharVar>?, gint) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, CPointer<gcharVar>?, gint) -> Unit>>>(40).value = value }
    
    var set_cell_data_func: CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, GtkCellLayoutDataFunc?, gpointer?, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, GtkCellLayoutDataFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, GtkCellLayoutDataFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(48).value = value }
    
    var clear_attributes: CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?) -> Unit>>>(56).value = value }
    
    var reorder: CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gint) -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, gint) -> Unit>>>(64).value = value }
    
    var get_cells: CPointer<CFunction<(CPointer<GtkCellLayout>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?) -> CPointer<GList>?>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?) -> CPointer<GList>?>>>(72).value = value }
    
    var get_area: CPointer<CFunction<(CPointer<GtkCellLayout>?) -> CPointer<GtkCellArea>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?) -> CPointer<GtkCellArea>?>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellLayout>?) -> CPointer<GtkCellArea>?>>>(80).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererText(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkCellRenderer
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererTextPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererTextPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellRendererTextPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkCellRendererTextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GtkCellRendererClass
        get() = memberAt(0)
    
    var edited: CPointer<CFunction<(CPointer<GtkCellRendererText>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererText>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererText>?, CPointer<gcharVar>?, CPointer<gcharVar>?) -> Unit>>>(264).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererAccel(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkCellRendererText
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererAccelPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererAccelPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkCellRendererAccelPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkCellRendererAccelClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(360, 8)
    
    val parent_class: GtkCellRendererTextClass
        get() = memberAt(0)
    
    var accel_edited: CPointer<CFunction<(CPointer<GtkCellRendererAccel>?, CPointer<gcharVar>?, guint, GdkModifierType, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererAccel>?, CPointer<gcharVar>?, guint, GdkModifierType, guint) -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererAccel>?, CPointer<gcharVar>?, guint, GdkModifierType, guint) -> Unit>>>(304).value = value }
    
    var accel_cleared: CPointer<CFunction<(CPointer<GtkCellRendererAccel>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererAccel>?, CPointer<gcharVar>?) -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererAccel>?, CPointer<gcharVar>?) -> Unit>>>(312).value = value }
    
    var _gtk_reserved0: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(344).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(352).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererCombo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkCellRendererText
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererComboPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererComboPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkCellRendererComboPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellRendererComboClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent: GtkCellRendererTextClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererPixbuf(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkCellRenderer
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererPixbufPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererPixbufPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellRendererPixbufPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellRendererPixbufClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GtkCellRendererClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererProgress(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkCellRenderer
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererProgressPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererProgressPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellRendererProgressPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellRendererProgressClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GtkCellRendererClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererSpin(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkCellRendererText
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererSpinPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererSpinPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkCellRendererSpinPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellRendererSpinClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(336, 8)
    
    val parent: GtkCellRendererTextClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(304).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererSpinner(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkCellRenderer
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererSpinnerPrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererSpinnerPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellRendererSpinnerPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellRendererSpinnerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(296, 8)
    
    val parent_class: GtkCellRendererClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellRendererToggle(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkCellRenderer
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellRendererTogglePrivate>?
        get() = memberAt<CPointerVar<GtkCellRendererTogglePrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellRendererTogglePrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkCellRendererToggleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(304, 8)
    
    val parent_class: GtkCellRendererClass
        get() = memberAt(0)
    
    var toggled: CPointer<CFunction<(CPointer<GtkCellRendererToggle>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererToggle>?, CPointer<gcharVar>?) -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCellRendererToggle>?, CPointer<gcharVar>?) -> Unit>>>(264).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(288).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(296).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkCellView(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkCellViewPrivate>?
        get() = memberAt<CPointerVar<GtkCellViewPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkCellViewPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCellViewClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToggleButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val button: GtkButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkToggleButtonPrivate>?
        get() = memberAt<CPointerVar<GtkToggleButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkToggleButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkToggleButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1128, 8)
    
    val parent_class: GtkButtonClass
        get() = memberAt(0)
    
    var toggled: CPointer<CFunction<(CPointer<GtkToggleButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToggleButton>?) -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToggleButton>?) -> Unit>>>(1088).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkCheckButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val toggle_button: GtkToggleButton
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkCheckButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1168, 8)
    
    val parent_class: GtkToggleButtonClass
        get() = memberAt(0)
    
    var draw_indicator: CPointer<CFunction<(CPointer<GtkCheckButton>?, CPointer<cairo_t>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCheckButton>?, CPointer<cairo_t>?) -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCheckButton>?, CPointer<cairo_t>?) -> Unit>>>(1128).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1160).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMenuItem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkMenuItemPrivate>?
        get() = memberAt<CPointerVar<GtkMenuItemPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkMenuItemPrivate>>(48).value = value }
}

class _GtkMenuItemClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1112, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var activate: CPointer<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1016).value = value }
    
    var activate_item: CPointer<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1024).value = value }
    
    var toggle_size_request: CPointer<CFunction<(CPointer<GtkMenuItem>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?, CPointer<gintVar>?) -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?, CPointer<gintVar>?) -> Unit>>>(1032).value = value }
    
    var toggle_size_allocate: CPointer<CFunction<(CPointer<GtkMenuItem>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?, gint) -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?, gint) -> Unit>>>(1040).value = value }
    
    var set_label: CPointer<CFunction<(CPointer<GtkMenuItem>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?, CPointer<gcharVar>?) -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?, CPointer<gcharVar>?) -> Unit>>>(1048).value = value }
    
    var get_label: CPointer<CFunction<(CPointer<GtkMenuItem>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> CPointer<gcharVar>?>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> CPointer<gcharVar>?>>>(1056).value = value }
    
    var select: CPointer<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1064).value = value }
    
    var deselect: CPointer<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuItem>?) -> Unit>>>(1072).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var hide_on_activate: guint
        get() = readBits(this.rawPtr, 8064, 1, false).toUInt()
        set(value) { writeBits(this.rawPtr, 8064, 1, value.toLong()) }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkCheckMenuItem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val menu_item: GtkMenuItem
        get() = memberAt(0)
    
    var priv: CPointer<GtkCheckMenuItemPrivate>?
        get() = memberAt<CPointerVar<GtkCheckMenuItemPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkCheckMenuItemPrivate>>(56).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkCheckMenuItemClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1160, 8)
    
    val parent_class: GtkMenuItemClass
        get() = memberAt(0)
    
    var toggled: CPointer<CFunction<(CPointer<GtkCheckMenuItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCheckMenuItem>?) -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCheckMenuItem>?) -> Unit>>>(1112).value = value }
    
    var draw_indicator: CPointer<CFunction<(CPointer<GtkCheckMenuItem>?, CPointer<cairo_t>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCheckMenuItem>?, CPointer<cairo_t>?) -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCheckMenuItem>?, CPointer<cairo_t>?) -> Unit>>>(1120).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkColorButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val button: GtkButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkColorButtonPrivate>?
        get() = memberAt<CPointerVar<GtkColorButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkColorButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkColorButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1128, 8)
    
    val parent_class: GtkButtonClass
        get() = memberAt(0)
    
    var color_set: CPointer<CFunction<(CPointer<GtkColorButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkColorButton>?) -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkColorButton>?) -> Unit>>>(1088).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5[12]; }")
class _GtkColorChooserInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(144, 8)
    
    val base_interface: GTypeInterface
        get() = memberAt(0)
    
    var get_rgba: CPointer<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>>(16).value = value }
    
    var set_rgba: CPointer<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>>(24).value = value }
    
    var add_palette: CPointer<CFunction<(CPointer<GtkColorChooser>?, GtkOrientation, gint, gint, CPointer<GdkRGBA>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, GtkOrientation, gint, gint, CPointer<GdkRGBA>?) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, GtkOrientation, gint, gint, CPointer<GdkRGBA>?) -> Unit>>>(32).value = value }
    
    var color_activated: CPointer<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkColorChooser>?, CPointer<GdkRGBA>?) -> Unit>>>(40).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(48)
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkColorChooserDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkColorChooserDialogPrivate>?
        get() = memberAt<CPointerVar<GtkColorChooserDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkColorChooserDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkColorChooserDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkColorChooserWidget(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkColorChooserWidgetPrivate>?
        get() = memberAt<CPointerVar<GtkColorChooserWidgetPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkColorChooserWidgetPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GtkColorChooserWidgetClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1072, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkComboBoxText(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent_instance: GtkComboBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkComboBoxTextPrivate>?
        get() = memberAt<CPointerVar<GtkComboBoxTextPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkComboBoxTextPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkComboBoxTextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1080, 8)
    
    val parent_class: GtkComboBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkCssProvider(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkCssProviderPrivate>?
        get() = memberAt<CPointerVar<GtkCssProviderPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkCssProviderPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkCssProviderClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var parsing_error: CPointer<CFunction<(CPointer<GtkCssProvider>?, CPointer<GtkCssSection>?, CPointer<GError>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkCssProvider>?, CPointer<GtkCssSection>?, CPointer<GError>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkCssProvider>?, CPointer<GtkCssSection>?, CPointer<GError>?) -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkDrawingArea(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var dummy: gpointer?
        get() = memberAt<gpointerVar>(32).value
        set(value) { memberAt<gpointerVar>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkDrawingAreaClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkEventBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkEventBoxPrivate>?
        get() = memberAt<CPointerVar<GtkEventBoxPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkEventBoxPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkEventBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkExpander(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkExpanderPrivate>?
        get() = memberAt<CPointerVar<GtkExpanderPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkExpanderPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkExpanderClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1048, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var activate: CPointer<CFunction<(CPointer<GtkExpander>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkExpander>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkExpander>?) -> Unit>>>(1008).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFixed(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkFixedPrivate>?
        get() = memberAt<CPointerVar<GtkFixedPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkFixedPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkFixedClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { void* p0; int p1; int p2; }")
class _GtkFixedChild(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var widget: CPointer<GtkWidget>?
        get() = memberAt<CPointerVar<GtkWidget>>(0).value
        set(value) { memberAt<CPointerVar<GtkWidget>>(0).value = value }
    
    var x: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var y: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkFileFilterInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var contains: GtkFileFilterFlags
        get() = memberAt<GtkFileFilterFlagsVar>(0).value
        set(value) { memberAt<GtkFileFilterFlagsVar>(0).value = value }
    
    var filename: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var uri: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var display_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var mime_type: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFileChooserButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkFileChooserButtonPrivate>?
        get() = memberAt<CPointerVar<GtkFileChooserButtonPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkFileChooserButtonPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkFileChooserButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1048, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var file_set: CPointer<CFunction<(CPointer<GtkFileChooserButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFileChooserButton>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFileChooserButton>?) -> Unit>>>(1008).value = value }
    
    var __gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var __gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var __gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var __gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFileChooserDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkFileChooserDialogPrivate>?
        get() = memberAt<CPointerVar<GtkFileChooserDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkFileChooserDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkFileChooserDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _GtkNativeDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkNativeDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var response: CPointer<CFunction<(CPointer<GtkNativeDialog>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNativeDialog>?, gint) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNativeDialog>?, gint) -> Unit>>>(136).value = value }
    
    var show: CPointer<CFunction<(CPointer<GtkNativeDialog>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNativeDialog>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNativeDialog>?) -> Unit>>>(144).value = value }
    
    var hide: CPointer<CFunction<(CPointer<GtkNativeDialog>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNativeDialog>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNativeDialog>?) -> Unit>>>(152).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; } p0; }")
class GtkFileChooserNativeClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GtkNativeDialogClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFileChooserWidget(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkFileChooserWidgetPrivate>?
        get() = memberAt<CPointerVar<GtkFileChooserWidgetPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkFileChooserWidgetPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkFileChooserWidgetClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkFlowBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; }")
class _GtkFlowBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1080, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var child_activated: CPointer<CFunction<(CPointer<GtkFlowBox>?, CPointer<GtkFlowBoxChild>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?, CPointer<GtkFlowBoxChild>?) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?, CPointer<GtkFlowBoxChild>?) -> Unit>>>(976).value = value }
    
    var selected_children_changed: CPointer<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(984).value = value }
    
    var activate_cursor_child: CPointer<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(992).value = value }
    
    var toggle_cursor_child: CPointer<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(1000).value = value }
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkFlowBox>?, GtkMovementStep, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?, GtkMovementStep, gint) -> gboolean>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?, GtkMovementStep, gint) -> gboolean>>>(1008).value = value }
    
    var select_all: CPointer<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(1016).value = value }
    
    var unselect_all: CPointer<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBox>?) -> Unit>>>(1024).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkFlowBoxChild(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GtkBin
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; }")
class _GtkFlowBoxChildClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1032, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var activate: CPointer<CFunction<(CPointer<GtkFlowBoxChild>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBoxChild>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFlowBoxChild>?) -> Unit>>>(1008).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFontButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val button: GtkButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkFontButtonPrivate>?
        get() = memberAt<CPointerVar<GtkFontButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkFontButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkFontButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1128, 8)
    
    val parent_class: GtkButtonClass
        get() = memberAt(0)
    
    var font_set: CPointer<CFunction<(CPointer<GtkFontButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontButton>?) -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontButton>?) -> Unit>>>(1088).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _PangoFontFamily(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; }")
class _PangoFontFace(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8[10]; }")
class _GtkFontChooserIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(152, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_font_family: CPointer<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontFamily>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontFamily>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontFamily>?>>>(16).value = value }
    
    var get_font_face: CPointer<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontFace>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontFace>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontFace>?>>>(24).value = value }
    
    var get_font_size: CPointer<CFunction<(CPointer<GtkFontChooser>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> gint>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> gint>>>(32).value = value }
    
    var set_filter_func: CPointer<CFunction<(CPointer<GtkFontChooser>?, GtkFontFilterFunc?, gpointer?, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?, GtkFontFilterFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?, GtkFontFilterFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(40).value = value }
    
    var font_activated: CPointer<CFunction<(CPointer<GtkFontChooser>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?, CPointer<gcharVar>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?, CPointer<gcharVar>?) -> Unit>>>(48).value = value }
    
    var set_font_map: CPointer<CFunction<(CPointer<GtkFontChooser>?, CPointer<PangoFontMap>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?, CPointer<PangoFontMap>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?, CPointer<PangoFontMap>?) -> Unit>>>(56).value = value }
    
    var get_font_map: CPointer<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontMap>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontMap>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkFontChooser>?) -> CPointer<PangoFontMap>?>>>(64).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(72)
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFontChooserDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkFontChooserDialogPrivate>?
        get() = memberAt<CPointerVar<GtkFontChooserDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkFontChooserDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkFontChooserDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkFontChooserWidget(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkFontChooserWidgetPrivate>?
        get() = memberAt<CPointerVar<GtkFontChooserWidgetPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkFontChooserWidgetPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GtkFontChooserWidgetClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1072, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; }")
class _GtkGLArea(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GtkWidget
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4[6]; }")
class _GtkGLAreaClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(896, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var render: CPointer<CFunction<(CPointer<GtkGLArea>?, CPointer<GdkGLContext>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkGLArea>?, CPointer<GdkGLContext>?) -> gboolean>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkGLArea>?, CPointer<GdkGLContext>?) -> gboolean>>>(824).value = value }
    
    var resize: CPointer<CFunction<(CPointer<GtkGLArea>?, Int, Int) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkGLArea>?, Int, Int) -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkGLArea>?, Int, Int) -> Unit>>>(832).value = value }
    
    var create_context: CPointer<CFunction<(CPointer<GtkGLArea>?) -> CPointer<GdkGLContext>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkGLArea>?) -> CPointer<GdkGLContext>?>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkGLArea>?) -> CPointer<GdkGLContext>?>>>(840).value = value }
    
    val _padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(848)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkGrid(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkGridPrivate>?
        get() = memberAt<CPointerVar<GtkGridPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkGridPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GtkGridClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkHeaderBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkHeaderBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GtkStyleProviderIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_style: CPointer<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?) -> CPointer<GtkStyleProperties>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?) -> CPointer<GtkStyleProperties>?>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?) -> CPointer<GtkStyleProperties>?>>>(16).value = value }
    
    var get_style_property: CPointer<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?, GtkStateFlags, CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?, GtkStateFlags, CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?, GtkStateFlags, CPointer<GParamSpec>?, CPointer<GValue>?) -> gboolean>>>(24).value = value }
    
    var get_icon_factory: CPointer<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?) -> CPointer<GtkIconFactory>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?) -> CPointer<GtkIconFactory>?>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkStyleProvider>?, CPointer<GtkWidgetPath>?) -> CPointer<GtkIconFactory>?>>>(32).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkStyleProperties(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_object: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkStylePropertiesPrivate>?
        get() = memberAt<CPointerVar<GtkStylePropertiesPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkStylePropertiesPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkIconFactory(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkIconFactoryPrivate>?
        get() = memberAt<CPointerVar<GtkIconFactoryPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkIconFactoryPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkStyleContextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GtkStyleContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkStyleContext>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkStyleContext>?) -> Unit>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkIconTheme(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkIconThemePrivate>?
        get() = memberAt<CPointerVar<GtkIconThemePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkIconThemePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkIconThemeClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GtkIconTheme>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconTheme>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconTheme>?) -> Unit>>>(136).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { int p0; int p1; }")
class _GdkPoint(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var x: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var y: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkIconView(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkIconViewPrivate>?
        get() = memberAt<CPointerVar<GtkIconViewPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkIconViewPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; }")
class _GtkIconViewClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1072, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var item_activated: CPointer<CFunction<(CPointer<GtkIconView>?, CPointer<GtkTreePath>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?, CPointer<GtkTreePath>?) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?, CPointer<GtkTreePath>?) -> Unit>>>(976).value = value }
    
    var selection_changed: CPointer<CFunction<(CPointer<GtkIconView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(984).value = value }
    
    var select_all: CPointer<CFunction<(CPointer<GtkIconView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(992).value = value }
    
    var unselect_all: CPointer<CFunction<(CPointer<GtkIconView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(1000).value = value }
    
    var select_cursor_item: CPointer<CFunction<(CPointer<GtkIconView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(1008).value = value }
    
    var toggle_cursor_item: CPointer<CFunction<(CPointer<GtkIconView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> Unit>>>(1016).value = value }
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkIconView>?, GtkMovementStep, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?, GtkMovementStep, gint) -> gboolean>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?, GtkMovementStep, gint) -> gboolean>>>(1024).value = value }
    
    var activate_cursor_item: CPointer<CFunction<(CPointer<GtkIconView>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> gboolean>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkIconView>?) -> gboolean>>>(1032).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkIMContextInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var context_id: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var context_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var domain: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var domain_dirname: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var default_locales: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GtkIMContextSimple(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val `object`: GtkIMContext
        get() = memberAt(0)
    
    var priv: CPointer<GtkIMContextSimplePrivate>?
        get() = memberAt<CPointerVar<GtkIMContextSimplePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkIMContextSimplePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; } p0; }")
class _GtkIMContextSimpleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(312, 8)
    
    val parent_class: GtkIMContextClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; } p0; void* p1; }")
class _GtkIMMulticontext(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val `object`: GtkIMContext
        get() = memberAt(0)
    
    var priv: CPointer<GtkIMMulticontextPrivate>?
        get() = memberAt<CPointerVar<GtkIMMulticontextPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkIMMulticontextPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkIMMulticontextClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(344, 8)
    
    val parent_class: GtkIMContextClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(312).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(320).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(328).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(336).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkInfoBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1056, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var response: CPointer<CFunction<(CPointer<GtkInfoBar>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkInfoBar>?, gint) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkInfoBar>?, gint) -> Unit>>>(1008).value = value }
    
    var close: CPointer<CFunction<(CPointer<GtkInfoBar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkInfoBar>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkInfoBar>?) -> Unit>>>(1016).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkInfoBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkInfoBarPrivate>?
        get() = memberAt<CPointerVar<GtkInfoBarPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkInfoBarPrivate>>(48).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkInvisible(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkInvisiblePrivate>?
        get() = memberAt<CPointerVar<GtkInvisiblePrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkInvisiblePrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkInvisibleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkLayout(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkLayoutPrivate>?
        get() = memberAt<CPointerVar<GtkLayoutPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkLayoutPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkLayoutClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2[16]; }")
class _GtkLevelBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(960, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var offset_changed: CPointer<CFunction<(CPointer<GtkLevelBar>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkLevelBar>?, CPointer<gcharVar>?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkLevelBar>?, CPointer<gcharVar>?) -> Unit>>>(824).value = value }
    
    val padding: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(832)
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkLevelBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkLevelBarPrivate>?
        get() = memberAt<CPointerVar<GtkLevelBarPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkLevelBarPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkLinkButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent_instance: GtkButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkLinkButtonPrivate>?
        get() = memberAt<CPointerVar<GtkLinkButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkLinkButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkLinkButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1128, 8)
    
    val parent_class: GtkButtonClass
        get() = memberAt(0)
    
    var activate_link: CPointer<CFunction<(CPointer<GtkLinkButton>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkLinkButton>?) -> gboolean>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkLinkButton>?) -> gboolean>>>(1088).value = value }
    
    var _gtk_padding1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_padding2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_padding3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_padding4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkListBox(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkContainer
        get() = memberAt(0)
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; }")
class _GtkListBoxClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1064, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var row_selected: CPointer<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?) -> Unit>>>(976).value = value }
    
    var row_activated: CPointer<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?) -> Unit>>>(984).value = value }
    
    var activate_cursor_row: CPointer<CFunction<(CPointer<GtkListBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(992).value = value }
    
    var toggle_cursor_row: CPointer<CFunction<(CPointer<GtkListBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1000).value = value }
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkListBox>?, GtkMovementStep, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?, GtkMovementStep, gint) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?, GtkMovementStep, gint) -> Unit>>>(1008).value = value }
    
    var selected_rows_changed: CPointer<CFunction<(CPointer<GtkListBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1016).value = value }
    
    var select_all: CPointer<CFunction<(CPointer<GtkListBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1024).value = value }
    
    var unselect_all: CPointer<CFunction<(CPointer<GtkListBox>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBox>?) -> Unit>>>(1032).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkListBoxRow(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GtkBin
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; }")
class _GtkListBoxRowClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1032, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var activate: CPointer<CFunction<(CPointer<GtkListBoxRow>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkListBoxRow>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkListBoxRow>?) -> Unit>>>(1008).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkLockButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkLockButtonPrivate>?
        get() = memberAt<CPointerVar<GtkLockButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkLockButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; }")
class _GtkLockButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkButtonClass
        get() = memberAt(0)
    
    var reserved0: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMenuBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val menu_shell: GtkMenuShell
        get() = memberAt(0)
    
    var priv: CPointer<GtkMenuBarPrivate>?
        get() = memberAt<CPointerVar<GtkMenuBarPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkMenuBarPrivate>>(48).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkMenuBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1120, 8)
    
    val parent_class: GtkMenuShellClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkPopover(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkPopoverPrivate>?
        get() = memberAt<CPointerVar<GtkPopoverPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkPopoverPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2[10]; }")
class _GtkPopoverClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1096, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var closed: CPointer<CFunction<(CPointer<GtkPopover>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPopover>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPopover>?) -> Unit>>>(1008).value = value }
    
    val reserved: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(1016)
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMenuButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent: GtkToggleButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkMenuButtonPrivate>?
        get() = memberAt<CPointerVar<GtkMenuButtonPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkMenuButtonPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkMenuButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1160, 8)
    
    val parent_class: GtkToggleButtonClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkSizeGroup(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkSizeGroupPrivate>?
        get() = memberAt<CPointerVar<GtkSizeGroupPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkSizeGroupPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSizeGroupClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToolItem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkToolItemPrivate>?
        get() = memberAt<CPointerVar<GtkToolItemPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkToolItemPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkToolItemClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1056, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var create_menu_proxy: CPointer<CFunction<(CPointer<GtkToolItem>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolItem>?) -> gboolean>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolItem>?) -> gboolean>>>(1008).value = value }
    
    var toolbar_reconfigured: CPointer<CFunction<(CPointer<GtkToolItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolItem>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolItem>?) -> Unit>>>(1016).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToolButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkToolItem
        get() = memberAt(0)
    
    var priv: CPointer<GtkToolButtonPrivate>?
        get() = memberAt<CPointerVar<GtkToolButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkToolButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; unsigned long p1; void* p2; void* p3; void* p4; void* p5; void* p6; }")
class _GtkToolButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1104, 8)
    
    val parent_class: GtkToolItemClass
        get() = memberAt(0)
    
    var button_type: GType
        get() = memberAt<GTypeVar>(1056).value
        set(value) { memberAt<GTypeVar>(1056).value = value }
    
    var clicked: CPointer<CFunction<(CPointer<GtkToolButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolButton>?) -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolButton>?) -> Unit>>>(1064).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; unsigned long p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkMenuToolButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1144, 8)
    
    val parent_class: GtkToolButtonClass
        get() = memberAt(0)
    
    var show_menu: CPointer<CFunction<(CPointer<GtkMenuToolButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkMenuToolButton>?) -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkMenuToolButton>?) -> Unit>>>(1104).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMenuToolButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent: GtkToolButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkMenuToolButtonPrivate>?
        get() = memberAt<CPointerVar<GtkMenuToolButtonPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkMenuToolButtonPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkMessageDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkMessageDialogPrivate>?
        get() = memberAt<CPointerVar<GtkMessageDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkMessageDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkMessageDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkMountOperation(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GMountOperation
        get() = memberAt(0)
    
    var priv: CPointer<GtkMountOperationPrivate>?
        get() = memberAt<CPointerVar<GtkMountOperationPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkMountOperationPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkMountOperationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(288, 8)
    
    val parent_class: GMountOperationClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkNotebook(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkNotebookPrivate>?
        get() = memberAt<CPointerVar<GtkNotebookPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkNotebookPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; }")
class _GtkNotebookClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1128, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var switch_page: CPointer<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(976).value = value }
    
    var select_page: CPointer<CFunction<(CPointer<GtkNotebook>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, gboolean) -> gboolean>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, gboolean) -> gboolean>>>(984).value = value }
    
    var focus_tab: CPointer<CFunction<(CPointer<GtkNotebook>?, GtkNotebookTab) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, GtkNotebookTab) -> gboolean>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, GtkNotebookTab) -> gboolean>>>(992).value = value }
    
    var change_current_page: CPointer<CFunction<(CPointer<GtkNotebook>?, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, gint) -> gboolean>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, gint) -> gboolean>>>(1000).value = value }
    
    var move_focus_out: CPointer<CFunction<(CPointer<GtkNotebook>?, GtkDirectionType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, GtkDirectionType) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, GtkDirectionType) -> Unit>>>(1008).value = value }
    
    var reorder_tab: CPointer<CFunction<(CPointer<GtkNotebook>?, GtkDirectionType, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, GtkDirectionType, gboolean) -> gboolean>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, GtkDirectionType, gboolean) -> gboolean>>>(1016).value = value }
    
    var insert_page: CPointer<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, CPointer<GtkWidget>?, CPointer<GtkWidget>?, gint) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, CPointer<GtkWidget>?, CPointer<GtkWidget>?, gint) -> gint>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, CPointer<GtkWidget>?, CPointer<GtkWidget>?, gint) -> gint>>>(1024).value = value }
    
    var create_window: CPointer<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, gint, gint) -> CPointer<GtkNotebook>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, gint, gint) -> CPointer<GtkNotebook>?>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, gint, gint) -> CPointer<GtkNotebook>?>>>(1032).value = value }
    
    var page_reordered: CPointer<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(1040).value = value }
    
    var page_removed: CPointer<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(1048).value = value }
    
    var page_added: CPointer<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkNotebook>?, CPointer<GtkWidget>?, guint) -> Unit>>>(1056).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkOffscreenWindow(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_object: GtkWindow
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkOffscreenWindowClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1104, 8)
    
    val parent_class: GtkWindowClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; }")
class _GtkOrientableIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkOverlay(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkOverlayPrivate>?
        get() = memberAt<CPointerVar<GtkOverlayPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkOverlayPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GtkOverlayClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1080, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var get_child_position: CPointer<CFunction<(CPointer<GtkOverlay>?, CPointer<GtkWidget>?, CPointer<GtkAllocation>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkOverlay>?, CPointer<GtkWidget>?, CPointer<GtkAllocation>?) -> gboolean>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkOverlay>?, CPointer<GtkWidget>?, CPointer<GtkAllocation>?) -> gboolean>>>(1008).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
}

@CStruct("struct { unsigned int p0; int p1; int p2; void* p3; void* p4; }")
class _GtkPadActionEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var type: GtkPadActionType
        get() = memberAt<GtkPadActionType.Var>(0).value
        set(value) { memberAt<GtkPadActionType.Var>(0).value = value }
    
    var index: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
    
    var mode: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var label: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var action_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkPaned(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkPanedPrivate>?
        get() = memberAt<CPointerVar<GtkPanedPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkPanedPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; }")
class _GtkPanedClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1056, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var cycle_child_focus: CPointer<CFunction<(CPointer<GtkPaned>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?, gboolean) -> gboolean>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?, gboolean) -> gboolean>>>(976).value = value }
    
    var toggle_handle_focus: CPointer<CFunction<(CPointer<GtkPaned>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?) -> gboolean>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?) -> gboolean>>>(984).value = value }
    
    var move_handle: CPointer<CFunction<(CPointer<GtkPaned>?, GtkScrollType) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?, GtkScrollType) -> gboolean>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?, GtkScrollType) -> gboolean>>>(992).value = value }
    
    var cycle_handle_focus: CPointer<CFunction<(CPointer<GtkPaned>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?, gboolean) -> gboolean>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?, gboolean) -> gboolean>>>(1000).value = value }
    
    var accept_position: CPointer<CFunction<(CPointer<GtkPaned>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?) -> gboolean>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?) -> gboolean>>>(1008).value = value }
    
    var cancel_position: CPointer<CFunction<(CPointer<GtkPaned>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?) -> gboolean>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPaned>?) -> gboolean>>>(1016).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2[10]; } p0; void* p1[10]; }")
class _GtkPopoverMenuClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1176, 8)
    
    val parent_class: GtkPopoverClass
        get() = memberAt(0)
    
    val reserved: CArrayPointer<gpointerVar>
        get() = arrayMemberAt(1096)
}

@CStruct("struct { int p0; int p1; }")
class _GtkPageRange(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var start: gint
        get() = memberAt<gintVar>(0).value
        set(value) { memberAt<gintVar>(0).value = value }
    
    var end: gint
        get() = memberAt<gintVar>(4).value
        set(value) { memberAt<gintVar>(4).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; }")
class _GtkPrintOperationPreviewIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(120, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var ready: CPointer<CFunction<(CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?) -> Unit>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?) -> Unit>>>(16).value = value }
    
    var got_page_size: CPointer<CFunction<(CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?, CPointer<GtkPageSetup>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?, CPointer<GtkPageSetup>?) -> Unit>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?, CPointer<GtkPageSetup>?) -> Unit>>>(24).value = value }
    
    var render_page: CPointer<CFunction<(CPointer<GtkPrintOperationPreview>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, gint) -> Unit>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, gint) -> Unit>>>(32).value = value }
    
    var is_selected: CPointer<CFunction<(CPointer<GtkPrintOperationPreview>?, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, gint) -> gboolean>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?, gint) -> gboolean>>>(40).value = value }
    
    var end_preview: CPointer<CFunction<(CPointer<GtkPrintOperationPreview>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperationPreview>?) -> Unit>>>(48).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(56).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(64).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(72).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(80).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(88).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(96).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(104).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(112).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; }")
class _GtkPrintOperationClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(288, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var done: CPointer<CFunction<(CPointer<GtkPrintOperation>?, GtkPrintOperationResult) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, GtkPrintOperationResult) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, GtkPrintOperationResult) -> Unit>>>(136).value = value }
    
    var begin_print: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> Unit>>>(144).value = value }
    
    var paginate: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> gboolean>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> gboolean>>>(152).value = value }
    
    var request_page_setup: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?, gint, CPointer<GtkPageSetup>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?, gint, CPointer<GtkPageSetup>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?, gint, CPointer<GtkPageSetup>?) -> Unit>>>(160).value = value }
    
    var draw_page: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?, gint) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?, gint) -> Unit>>>(168).value = value }
    
    var end_print: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintContext>?) -> Unit>>>(176).value = value }
    
    var status_changed: CPointer<CFunction<(CPointer<GtkPrintOperation>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?) -> Unit>>>(184).value = value }
    
    var create_custom_widget: CPointer<CFunction<(CPointer<GtkPrintOperation>?) -> CPointer<GtkWidget>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?) -> CPointer<GtkWidget>?>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?) -> CPointer<GtkWidget>?>>>(192).value = value }
    
    var custom_widget_apply: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkWidget>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkWidget>?) -> Unit>>>(200).value = value }
    
    var preview: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?, CPointer<GtkWindow>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?, CPointer<GtkWindow>?) -> gboolean>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkPrintOperationPreview>?, CPointer<GtkPrintContext>?, CPointer<GtkWindow>?) -> gboolean>>>(208).value = value }
    
    var update_custom_widget: CPointer<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkWidget>?, CPointer<GtkPageSetup>?, CPointer<GtkPrintSettings>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkWidget>?, CPointer<GtkPageSetup>?, CPointer<GtkPrintSettings>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkPrintOperation>?, CPointer<GtkWidget>?, CPointer<GtkPageSetup>?, CPointer<GtkPrintSettings>?) -> Unit>>>(216).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(224).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(232).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _gtk_reserved5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _gtk_reserved6: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
    
    var _gtk_reserved7: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(272).value = value }
    
    var _gtk_reserved8: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(280).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkPrintOperation(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkPrintOperationPrivate>?
        get() = memberAt<CPointerVar<GtkPrintOperationPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkPrintOperationPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkProgressBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkProgressBarPrivate>?
        get() = memberAt<CPointerVar<GtkProgressBarPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkProgressBarPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkProgressBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; } p0; void* p1; }")
class _GtkRadioButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val check_button: GtkCheckButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkRadioButtonPrivate>?
        get() = memberAt<CPointerVar<GtkRadioButtonPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkRadioButtonPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkRadioButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1208, 8)
    
    val parent_class: GtkCheckButtonClass
        get() = memberAt(0)
    
    var group_changed: CPointer<CFunction<(CPointer<GtkRadioButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRadioButton>?) -> Unit>>>(1168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRadioButton>?) -> Unit>>>(1168).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1176).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1184).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1192).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1200).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1200).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkRadioMenuItem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val check_menu_item: GtkCheckMenuItem
        get() = memberAt(0)
    
    var priv: CPointer<GtkRadioMenuItemPrivate>?
        get() = memberAt<CPointerVar<GtkRadioMenuItemPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkRadioMenuItemPrivate>>(64).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkRadioMenuItemClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1200, 8)
    
    val parent_class: GtkCheckMenuItemClass
        get() = memberAt(0)
    
    var group_changed: CPointer<CFunction<(CPointer<GtkRadioMenuItem>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRadioMenuItem>?) -> Unit>>>(1160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRadioMenuItem>?) -> Unit>>>(1160).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1168).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1176).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1184).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1192).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1192).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToggleToolButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent: GtkToolButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkToggleToolButtonPrivate>?
        get() = memberAt<CPointerVar<GtkToggleToolButtonPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkToggleToolButtonPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; unsigned long p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkToggleToolButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1144, 8)
    
    val parent_class: GtkToolButtonClass
        get() = memberAt(0)
    
    var toggled: CPointer<CFunction<(CPointer<GtkToggleToolButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToggleToolButton>?) -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToggleToolButton>?) -> Unit>>>(1104).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkRadioToolButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent: GtkToggleToolButton
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; unsigned long p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkRadioToolButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1176, 8)
    
    val parent_class: GtkToggleToolButtonClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1160).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1168).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkRange(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkRangePrivate>?
        get() = memberAt<CPointerVar<GtkRangePrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkRangePrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; }")
class _GtkRangeClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(912, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var slider_detail: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(824).value
        set(value) { memberAt<CPointerVar<gcharVar>>(824).value = value }
    
    var stepper_detail: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(832).value
        set(value) { memberAt<CPointerVar<gcharVar>>(832).value = value }
    
    var value_changed: CPointer<CFunction<(CPointer<GtkRange>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?) -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?) -> Unit>>>(840).value = value }
    
    var adjust_bounds: CPointer<CFunction<(CPointer<GtkRange>?, gdouble) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, gdouble) -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, gdouble) -> Unit>>>(848).value = value }
    
    var move_slider: CPointer<CFunction<(CPointer<GtkRange>?, GtkScrollType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, GtkScrollType) -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, GtkScrollType) -> Unit>>>(856).value = value }
    
    var get_range_border: CPointer<CFunction<(CPointer<GtkRange>?, CPointer<GtkBorder>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, CPointer<GtkBorder>?) -> Unit>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, CPointer<GtkBorder>?) -> Unit>>>(864).value = value }
    
    var change_value: CPointer<CFunction<(CPointer<GtkRange>?, GtkScrollType, gdouble) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, GtkScrollType, gdouble) -> gboolean>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, GtkScrollType, gdouble) -> gboolean>>>(872).value = value }
    
    var get_range_size_request: CPointer<CFunction<(CPointer<GtkRange>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(880).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRange>?, GtkOrientation, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(880).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(888).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(888).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(896).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(896).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(904).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(904).value = value }
}

@CStruct("struct { void* p0; void* p1; void* p2; void* p3; void* p4; void* p5; int p6; }")
class _GtkRecentData(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var display_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    var description: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var mime_type: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var app_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var app_exec: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(32).value
        set(value) { memberAt<CPointerVar<gcharVar>>(32).value = value }
    
    var groups: CPointer<CPointerVar<gcharVar>>?
        get() = memberAt<CPointerVar<CPointerVar<gcharVar>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<gcharVar>>>(40).value = value }
    
    var is_private: gboolean
        get() = memberAt<gbooleanVar>(48).value
        set(value) { memberAt<gbooleanVar>(48).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkRecentManager(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkRecentManagerPrivate>?
        get() = memberAt<CPointerVar<GtkRecentManagerPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkRecentManagerPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkRecentManagerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(176, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var changed: CPointer<CFunction<(CPointer<GtkRecentManager>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentManager>?) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentManager>?) -> Unit>>>(136).value = value }
    
    var _gtk_recent1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_recent2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_recent3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_recent4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
}

@CStruct("struct { unsigned int p0; void* p1; void* p2; void* p3; void* p4; void* p5; int p6; }")
class _GtkRecentFilterInfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var contains: GtkRecentFilterFlags
        get() = memberAt<GtkRecentFilterFlagsVar>(0).value
        set(value) { memberAt<GtkRecentFilterFlagsVar>(0).value = value }
    
    var uri: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(8).value
        set(value) { memberAt<CPointerVar<gcharVar>>(8).value = value }
    
    var display_name: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(16).value
        set(value) { memberAt<CPointerVar<gcharVar>>(16).value = value }
    
    var mime_type: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(24).value
        set(value) { memberAt<CPointerVar<gcharVar>>(24).value = value }
    
    var applications: CPointer<CPointerVar<gcharVar>>?
        get() = memberAt<CPointerVar<CPointerVar<gcharVar>>>(32).value
        set(value) { memberAt<CPointerVar<CPointerVar<gcharVar>>>(32).value = value }
    
    var groups: CPointer<CPointerVar<gcharVar>>?
        get() = memberAt<CPointerVar<CPointerVar<gcharVar>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<gcharVar>>>(40).value = value }
    
    var age: gint
        get() = memberAt<gintVar>(48).value
        set(value) { memberAt<gintVar>(48).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; }")
class _GtkRecentChooserIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
    
    var set_current_uri: CPointer<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(16).value = value }
    
    var get_current_uri: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<gcharVar>?>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<gcharVar>?>>>(24).value = value }
    
    var select_uri: CPointer<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?) -> gboolean>>>(32).value = value }
    
    var unselect_uri: CPointer<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<gcharVar>?) -> Unit>>>(40).value = value }
    
    var select_all: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(48).value = value }
    
    var unselect_all: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(56).value = value }
    
    var get_items: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GList>?>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GList>?>>>(64).value = value }
    
    var get_recent_manager: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GtkRecentManager>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GtkRecentManager>?>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GtkRecentManager>?>>>(72).value = value }
    
    var add_filter: CPointer<CFunction<(CPointer<GtkRecentChooser>?, CPointer<GtkRecentFilter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<GtkRecentFilter>?) -> Unit>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<GtkRecentFilter>?) -> Unit>>>(80).value = value }
    
    var remove_filter: CPointer<CFunction<(CPointer<GtkRecentChooser>?, CPointer<GtkRecentFilter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<GtkRecentFilter>?) -> Unit>>>(88).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, CPointer<GtkRecentFilter>?) -> Unit>>>(88).value = value }
    
    var list_filters: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GSList>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GSList>?>>>(96).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> CPointer<GSList>?>>>(96).value = value }
    
    var set_sort_func: CPointer<CFunction<(CPointer<GtkRecentChooser>?, GtkRecentSortFunc?, gpointer?, GDestroyNotify?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, GtkRecentSortFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(104).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?, GtkRecentSortFunc?, gpointer?, GDestroyNotify?) -> Unit>>>(104).value = value }
    
    var item_activated: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(112).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(112).value = value }
    
    var selection_changed: CPointer<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(120).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkRecentChooser>?) -> Unit>>>(120).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkRecentChooserDialog(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val parent_instance: GtkDialog
        get() = memberAt(0)
    
    var priv: CPointer<GtkRecentChooserDialogPrivate>?
        get() = memberAt<CPointerVar<GtkRecentChooserDialogPrivate>>(64).value
        set(value) { memberAt<CPointerVar<GtkRecentChooserDialogPrivate>>(64).value = value }
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkRecentChooserDialogClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkDialogClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkRecentChooserMenu(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent_instance: GtkMenu
        get() = memberAt(0)
    
    var priv: CPointer<GtkRecentChooserMenuPrivate>?
        get() = memberAt<CPointerVar<GtkRecentChooserMenuPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkRecentChooserMenuPrivate>>(56).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkRecentChooserMenuClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1152, 8)
    
    val parent_class: GtkMenuClass
        get() = memberAt(0)
    
    var gtk_recent1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var gtk_recent2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var gtk_recent3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var gtk_recent4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkRecentChooserWidget(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_instance: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkRecentChooserWidgetPrivate>?
        get() = memberAt<CPointerVar<GtkRecentChooserWidgetPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkRecentChooserWidgetPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkRecentChooserWidgetClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkRevealer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GtkBin
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; }")
class _GtkRevealerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkScale(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val range: GtkRange
        get() = memberAt(0)
    
    var priv: CPointer<GtkScalePrivate>?
        get() = memberAt<CPointerVar<GtkScalePrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkScalePrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkScaleClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(968, 8)
    
    val parent_class: GtkRangeClass
        get() = memberAt(0)
    
    var format_value: CPointer<CFunction<(CPointer<GtkScale>?, gdouble) -> CPointer<gcharVar>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScale>?, gdouble) -> CPointer<gcharVar>?>>>(912).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScale>?, gdouble) -> CPointer<gcharVar>?>>>(912).value = value }
    
    var draw_value: CPointer<CFunction<(CPointer<GtkScale>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScale>?) -> Unit>>>(920).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScale>?) -> Unit>>>(920).value = value }
    
    var get_layout_offsets: CPointer<CFunction<(CPointer<GtkScale>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScale>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(928).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScale>?, CPointer<gintVar>?, CPointer<gintVar>?) -> Unit>>>(928).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(944).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(952).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(952).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(960).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(960).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkScaleButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkButton
        get() = memberAt(0)
    
    var priv: CPointer<GtkScaleButtonPrivate>?
        get() = memberAt<CPointerVar<GtkScaleButtonPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkScaleButtonPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; }")
class _GtkScaleButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1128, 8)
    
    val parent_class: GtkButtonClass
        get() = memberAt(0)
    
    var value_changed: CPointer<CFunction<(CPointer<GtkScaleButton>?, gdouble) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScaleButton>?, gdouble) -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScaleButton>?, gdouble) -> Unit>>>(1088).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; }")
class _GtkScrollableInterface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val base_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_border: CPointer<CFunction<(CPointer<GtkScrollable>?, CPointer<GtkBorder>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScrollable>?, CPointer<GtkBorder>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScrollable>?, CPointer<GtkBorder>?) -> gboolean>>>(16).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkScrollbar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val range: GtkRange
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkScrollbarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(944, 8)
    
    val parent_class: GtkRangeClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(912).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(912).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(920).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(920).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(928).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(936).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkScrolledWindow(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val container: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkScrolledWindowPrivate>?
        get() = memberAt<CPointerVar<GtkScrolledWindowPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkScrolledWindowPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkScrolledWindowClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1064, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var scrollbar_spacing: gint
        get() = memberAt<gintVar>(1008).value
        set(value) { memberAt<gintVar>(1008).value = value }
    
    var scroll_child: CPointer<CFunction<(CPointer<GtkScrolledWindow>?, GtkScrollType, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScrolledWindow>?, GtkScrollType, gboolean) -> gboolean>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScrolledWindow>?, GtkScrollType, gboolean) -> gboolean>>>(1016).value = value }
    
    var move_focus_out: CPointer<CFunction<(CPointer<GtkScrolledWindow>?, GtkDirectionType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkScrolledWindow>?, GtkDirectionType) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkScrolledWindow>?, GtkDirectionType) -> Unit>>>(1024).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkSearchBar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkBin
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSearchBarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkSearchEntry(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkEntry
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSearchEntryClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkEntryClass
        get() = memberAt(0)
    
    var search_changed: CPointer<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(976).value = value }
    
    var next_match: CPointer<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(984).value = value }
    
    var previous_match: CPointer<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(992).value = value }
    
    var stop_search: CPointer<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSearchEntry>?) -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkSeparator(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val widget: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkSeparatorPrivate>?
        get() = memberAt<CPointerVar<GtkSeparatorPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkSeparatorPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSeparatorClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkSeparatorMenuItem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val menu_item: GtkMenuItem
        get() = memberAt(0)
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSeparatorMenuItemClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1144, 8)
    
    val parent_class: GtkMenuItemClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1120).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkSeparatorToolItem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkToolItem
        get() = memberAt(0)
    
    var priv: CPointer<GtkSeparatorToolItemPrivate>?
        get() = memberAt<CPointerVar<GtkSeparatorToolItemPrivate>>(56).value
        set(value) { memberAt<CPointerVar<GtkSeparatorToolItemPrivate>>(56).value = value }
}

@CStruct("struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSeparatorToolItemClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1088, 8)
    
    val parent_class: GtkToolItemClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1064).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1072).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1080).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSettingsClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { void* p0; struct { unsigned long p0; union { int p0; unsigned int p1; long p2; unsigned long p3; long p4; unsigned long p5; float p6; double p7; void* p8; } p1[2]; } p1; }")
class _GtkSettingsValue(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var origin: CPointer<gcharVar>?
        get() = memberAt<CPointerVar<gcharVar>>(0).value
        set(value) { memberAt<CPointerVar<gcharVar>>(0).value = value }
    
    val value: GValue
        get() = memberAt(8)
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkStack(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkContainer
        get() = memberAt(0)
}

@CStruct("struct { null p0; }")
class _GtkStackClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(976, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkStackSidebar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent: GtkBin
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkStackSidebarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { void* p0; int p1; int p2; }")
class _GtkRequestedSize(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var data: gpointer?
        get() = memberAt<gpointerVar>(0).value
        set(value) { memberAt<gpointerVar>(0).value = value }
    
    var minimum_size: gint
        get() = memberAt<gintVar>(8).value
        set(value) { memberAt<gintVar>(8).value = value }
    
    var natural_size: gint
        get() = memberAt<gintVar>(12).value
        set(value) { memberAt<gintVar>(12).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkSpinButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val entry: GtkEntry
        get() = memberAt(0)
    
    var priv: CPointer<GtkSpinButtonPrivate>?
        get() = memberAt<CPointerVar<GtkSpinButtonPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkSpinButtonPrivate>>(40).value = value }
}

@CStruct("struct { struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GtkSpinButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1048, 8)
    
    val parent_class: GtkEntryClass
        get() = memberAt(0)
    
    var input: CPointer<CFunction<(CPointer<GtkSpinButton>?, CPointer<gdoubleVar>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?, CPointer<gdoubleVar>?) -> gint>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?, CPointer<gdoubleVar>?) -> gint>>>(976).value = value }
    
    var output: CPointer<CFunction<(CPointer<GtkSpinButton>?) -> gint>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?) -> gint>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?) -> gint>>>(984).value = value }
    
    var value_changed: CPointer<CFunction<(CPointer<GtkSpinButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?) -> Unit>>>(992).value = value }
    
    var change_value: CPointer<CFunction<(CPointer<GtkSpinButton>?, GtkScrollType) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?, GtkScrollType) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?, GtkScrollType) -> Unit>>>(1000).value = value }
    
    var wrapped: CPointer<CFunction<(CPointer<GtkSpinButton>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSpinButton>?) -> Unit>>>(1008).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkSpinner(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkSpinnerPrivate>?
        get() = memberAt<CPointerVar<GtkSpinnerPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkSpinnerPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkSpinnerClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(856, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(824).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(832).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkStackSwitcher(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val widget: GtkBox
        get() = memberAt(0)
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkStackSwitcherClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkStatusbar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val parent_widget: GtkBox
        get() = memberAt(0)
    
    var priv: CPointer<GtkStatusbarPrivate>?
        get() = memberAt<CPointerVar<GtkStatusbarPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkStatusbarPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkStatusbarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1064, 8)
    
    val parent_class: GtkBoxClass
        get() = memberAt(0)
    
    var reserved: gpointer?
        get() = memberAt<gpointerVar>(1008).value
        set(value) { memberAt<gpointerVar>(1008).value = value }
    
    var text_pushed: CPointer<CFunction<(CPointer<GtkStatusbar>?, guint, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkStatusbar>?, guint, CPointer<gcharVar>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkStatusbar>?, guint, CPointer<gcharVar>?) -> Unit>>>(1016).value = value }
    
    var text_popped: CPointer<CFunction<(CPointer<GtkStatusbar>?, guint, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkStatusbar>?, guint, CPointer<gcharVar>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkStatusbar>?, guint, CPointer<gcharVar>?) -> Unit>>>(1024).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1040).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1048).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1056).value = value }
}

@CStruct("struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; }")
class _GtkSwitch(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val parent_instance: GtkWidget
        get() = memberAt(0)
    
    var priv: CPointer<GtkSwitchPrivate>?
        get() = memberAt<CPointerVar<GtkSwitchPrivate>>(32).value
        set(value) { memberAt<CPointerVar<GtkSwitchPrivate>>(32).value = value }
}

@CStruct("struct { struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; unsigned int p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; void* p19; void* p20; void* p21; void* p22; void* p23; void* p24; void* p25; void* p26; void* p27; void* p28; void* p29; void* p30; void* p31; void* p32; void* p33; void* p34; void* p35; void* p36; void* p37; void* p38; void* p39; void* p40; void* p41; void* p42; void* p43; void* p44; void* p45; void* p46; void* p47; void* p48; void* p49; void* p50; void* p51; void* p52; void* p53; void* p54; void* p55; void* p56; void* p57; void* p58; void* p59; void* p60; void* p61; void* p62; void* p63; void* p64; void* p65; void* p66; void* p67; void* p68; void* p69; void* p70; void* p71; void* p72; void* p73; void* p74; void* p75; void* p76; void* p77; void* p78; void* p79; void* p80; void* p81; void* p82; void* p83; void* p84; void* p85; void* p86; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkSwitchClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(880, 8)
    
    val parent_class: GtkWidgetClass
        get() = memberAt(0)
    
    var activate: CPointer<CFunction<(CPointer<GtkSwitch>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSwitch>?) -> Unit>>>(824).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSwitch>?) -> Unit>>>(824).value = value }
    
    var state_set: CPointer<CFunction<(CPointer<GtkSwitch>?, gboolean) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkSwitch>?, gboolean) -> gboolean>>>(832).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkSwitch>?, gboolean) -> gboolean>>>(832).value = value }
    
    var _switch_padding_1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(840).value = value }
    
    var _switch_padding_2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(848).value = value }
    
    var _switch_padding_3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(856).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(856).value = value }
    
    var _switch_padding_4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(864).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(864).value = value }
    
    var _switch_padding_5: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(872).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(872).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkTextTagTableClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var tag_changed: CPointer<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?, gboolean) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?, gboolean) -> Unit>>>(136).value = value }
    
    var tag_added: CPointer<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?) -> Unit>>>(144).value = value }
    
    var tag_removed: CPointer<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextTagTable>?, CPointer<GtkTextTag>?) -> Unit>>>(152).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(168).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(176).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(184).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTextMark(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent_instance: GObject
        get() = memberAt(0)
    
    var segment: gpointer?
        get() = memberAt<gpointerVar>(24).value
        set(value) { memberAt<gpointerVar>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkTextMarkClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; }")
class _GtkTextBufferClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var insert_text: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<gcharVar>?, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<gcharVar>?, gint) -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<gcharVar>?, gint) -> Unit>>>(136).value = value }
    
    var insert_pixbuf: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GdkPixbuf>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GdkPixbuf>?) -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GdkPixbuf>?) -> Unit>>>(144).value = value }
    
    var insert_child_anchor: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextChildAnchor>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextChildAnchor>?) -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextChildAnchor>?) -> Unit>>>(152).value = value }
    
    var delete_range: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>>(160).value = value }
    
    var changed: CPointer<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(168).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(168).value = value }
    
    var modified_changed: CPointer<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(176).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(176).value = value }
    
    var mark_set: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextMark>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextMark>?) -> Unit>>>(184).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextMark>?) -> Unit>>>(184).value = value }
    
    var mark_deleted: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextMark>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextMark>?) -> Unit>>>(192).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextMark>?) -> Unit>>>(192).value = value }
    
    var apply_tag: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextTag>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextTag>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>>(200).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextTag>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>>(200).value = value }
    
    var remove_tag: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextTag>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextTag>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>>(208).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextTag>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> Unit>>>(208).value = value }
    
    var begin_user_action: CPointer<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(216).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(216).value = value }
    
    var end_user_action: CPointer<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(224).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?) -> Unit>>>(224).value = value }
    
    var paste_done: CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkClipboard>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkClipboard>?) -> Unit>>>(232).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkClipboard>?) -> Unit>>>(232).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(240).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(248).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(256).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(264).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkTextView(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkTextViewPrivate>?
        get() = memberAt<CPointerVar<GtkTextViewPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkTextViewPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; void* p11; void* p12; void* p13; void* p14; void* p15; void* p16; void* p17; void* p18; }")
class _GtkTextViewClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1120, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var populate_popup: CPointer<CFunction<(CPointer<GtkTextView>?, CPointer<GtkWidget>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, CPointer<GtkWidget>?) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, CPointer<GtkWidget>?) -> Unit>>>(976).value = value }
    
    var move_cursor: CPointer<CFunction<(CPointer<GtkTextView>?, GtkMovementStep, gint, gboolean) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkMovementStep, gint, gboolean) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkMovementStep, gint, gboolean) -> Unit>>>(984).value = value }
    
    var set_anchor: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(992).value = value }
    
    var insert_at_cursor: CPointer<CFunction<(CPointer<GtkTextView>?, CPointer<gcharVar>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, CPointer<gcharVar>?) -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, CPointer<gcharVar>?) -> Unit>>>(1000).value = value }
    
    var delete_from_cursor: CPointer<CFunction<(CPointer<GtkTextView>?, GtkDeleteType, gint) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkDeleteType, gint) -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkDeleteType, gint) -> Unit>>>(1008).value = value }
    
    var backspace: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1016).value = value }
    
    var cut_clipboard: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1024).value = value }
    
    var copy_clipboard: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1032).value = value }
    
    var paste_clipboard: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1040).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1040).value = value }
    
    var toggle_overwrite: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1048).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1048).value = value }
    
    var create_buffer: CPointer<CFunction<(CPointer<GtkTextView>?) -> CPointer<GtkTextBuffer>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> CPointer<GtkTextBuffer>?>>>(1056).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> CPointer<GtkTextBuffer>?>>>(1056).value = value }
    
    var draw_layer: CPointer<CFunction<(CPointer<GtkTextView>?, GtkTextViewLayer, CPointer<cairo_t>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkTextViewLayer, CPointer<cairo_t>?) -> Unit>>>(1064).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkTextViewLayer, CPointer<cairo_t>?) -> Unit>>>(1064).value = value }
    
    var extend_selection: CPointer<CFunction<(CPointer<GtkTextView>?, GtkTextExtendSelection, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkTextExtendSelection, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> gboolean>>>(1072).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?, GtkTextExtendSelection, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?) -> gboolean>>>(1072).value = value }
    
    var insert_emoji: CPointer<CFunction<(CPointer<GtkTextView>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1080).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTextView>?) -> Unit>>>(1080).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1088).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1096).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1104).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1112).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToolbar(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val container: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkToolbarPrivate>?
        get() = memberAt<CPointerVar<GtkToolbarPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkToolbarPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; }")
class _GtkToolbarClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1032, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var orientation_changed: CPointer<CFunction<(CPointer<GtkToolbar>?, GtkOrientation) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolbar>?, GtkOrientation) -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolbar>?, GtkOrientation) -> Unit>>>(976).value = value }
    
    var style_changed: CPointer<CFunction<(CPointer<GtkToolbar>?, GtkToolbarStyle) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolbar>?, GtkToolbarStyle) -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolbar>?, GtkToolbarStyle) -> Unit>>>(984).value = value }
    
    var popup_context_menu: CPointer<CFunction<(CPointer<GtkToolbar>?, gint, gint, gint) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolbar>?, gint, gint, gint) -> gboolean>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolbar>?, gint, gint, gint) -> gboolean>>>(992).value = value }
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToolItemGroup(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkToolItemGroupPrivate>?
        get() = memberAt<CPointerVar<GtkToolItemGroupPrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkToolItemGroupPrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkToolItemGroupClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkToolPalette(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val parent_instance: GtkContainer
        get() = memberAt(0)
    
    var priv: CPointer<GtkToolPalettePrivate>?
        get() = memberAt<CPointerVar<GtkToolPalettePrivate>>(40).value
        set(value) { memberAt<CPointerVar<GtkToolPalettePrivate>>(40).value = value }
}

@CStruct("struct { null p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkToolPaletteClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1008, 8)
    
    val parent_class: GtkContainerClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(976).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(984).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(992).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1000).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; }")
class _GtkToolShellIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var get_icon_size: CPointer<CFunction<(CPointer<GtkToolShell>?) -> GtkIconSize>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkIconSize>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkIconSize>>>(16).value = value }
    
    var get_orientation: CPointer<CFunction<(CPointer<GtkToolShell>?) -> GtkOrientation>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkOrientation>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkOrientation>>>(24).value = value }
    
    var get_style: CPointer<CFunction<(CPointer<GtkToolShell>?) -> GtkToolbarStyle>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkToolbarStyle>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkToolbarStyle>>>(32).value = value }
    
    var get_relief_style: CPointer<CFunction<(CPointer<GtkToolShell>?) -> GtkReliefStyle>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkReliefStyle>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkReliefStyle>>>(40).value = value }
    
    var rebuild_menu: CPointer<CFunction<(CPointer<GtkToolShell>?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> Unit>>>(48).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> Unit>>>(48).value = value }
    
    var get_text_orientation: CPointer<CFunction<(CPointer<GtkToolShell>?) -> GtkOrientation>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkOrientation>>>(56).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> GtkOrientation>>>(56).value = value }
    
    var get_text_alignment: CPointer<CFunction<(CPointer<GtkToolShell>?) -> gfloat>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> gfloat>>>(64).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> gfloat>>>(64).value = value }
    
    var get_ellipsize_mode: CPointer<CFunction<(CPointer<GtkToolShell>?) -> PangoEllipsizeMode>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> PangoEllipsizeMode>>>(72).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> PangoEllipsizeMode>>>(72).value = value }
    
    var get_text_size_group: CPointer<CFunction<(CPointer<GtkToolShell>?) -> CPointer<GtkSizeGroup>?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> CPointer<GtkSizeGroup>?>>>(80).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkToolShell>?) -> CPointer<GtkSizeGroup>?>>>(80).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; void* p3; }")
class _GtkTreeDragSourceIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var row_draggable: CPointer<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?) -> gboolean>>>(16).value = value }
    
    var drag_data_get: CPointer<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>>(24).value = value }
    
    var drag_data_delete: CPointer<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?) -> gboolean>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragSource>?, CPointer<GtkTreePath>?) -> gboolean>>>(32).value = value }
}

@CStruct("struct { struct { unsigned long p0; unsigned long p1; } p0; void* p1; void* p2; }")
class _GtkTreeDragDestIface(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val g_iface: GTypeInterface
        get() = memberAt(0)
    
    var drag_data_received: CPointer<CFunction<(CPointer<GtkTreeDragDest>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragDest>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragDest>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>>(16).value = value }
    
    var row_drop_possible: CPointer<CFunction<(CPointer<GtkTreeDragDest>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragDest>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<GtkTreeDragDest>?, CPointer<GtkTreePath>?, CPointer<GtkSelectionData>?) -> gboolean>>>(24).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTreeModelSort(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTreeModelSortPrivate>?
        get() = memberAt<CPointerVar<GtkTreeModelSortPrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTreeModelSortPrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkTreeModelSortClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; }")
class _GtkTreeStore(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val parent: GObject
        get() = memberAt(0)
    
    var priv: CPointer<GtkTreeStorePrivate>?
        get() = memberAt<CPointerVar<GtkTreeStorePrivate>>(24).value
        set(value) { memberAt<CPointerVar<GtkTreeStorePrivate>>(24).value = value }
}

@CStruct("struct { struct { struct { unsigned long p0; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; unsigned long p10; void* p11[6]; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkTreeStoreClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(168, 8)
    
    val parent_class: GObjectClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(136).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(144).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(152).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(160).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; }")
class _GtkViewport(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val bin: GtkBin
        get() = memberAt(0)
    
    var priv: CPointer<GtkViewportPrivate>?
        get() = memberAt<CPointerVar<GtkViewportPrivate>>(48).value
        set(value) { memberAt<CPointerVar<GtkViewportPrivate>>(48).value = value }
}

@CStruct("struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkViewportClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1040, 8)
    
    val parent_class: GtkBinClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1008).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1016).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1024).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1032).value = value }
}

@CStruct("struct { struct { struct { struct { struct { struct { struct { struct { void* p0; } p0; unsigned int p1; void* p2; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; void* p1; } p0; }")
class _GtkVolumeButton(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    val parent: GtkScaleButton
        get() = memberAt(0)
}

@CStruct("struct { struct { struct { struct { null p0; void* p1; void* p2; void* p3; void* p4; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; void* p6; void* p7; void* p8; void* p9; void* p10; } p0; void* p1; void* p2; void* p3; void* p4; void* p5; } p0; void* p1; void* p2; void* p3; void* p4; }")
class _GtkVolumeButtonClass(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1160, 8)
    
    val parent_class: GtkScaleButtonClass
        get() = memberAt(0)
    
    var _gtk_reserved1: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1128).value = value }
    
    var _gtk_reserved2: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1136).value = value }
    
    var _gtk_reserved3: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1144).value = value }
    
    var _gtk_reserved4: CPointer<CFunction<() -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value
        set(value) { memberAt<CPointerVar<CFunction<() -> Unit>>>(1152).value = value }
}

enum class GDataStreamByteOrder(override val value: UInt) : CEnum {
    G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN(0u),
    G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN(1u),
    G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDataStreamByteOrder.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDataStreamByteOrder
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDataStreamNewlineType(override val value: UInt) : CEnum {
    G_DATA_STREAM_NEWLINE_TYPE_LF(0u),
    G_DATA_STREAM_NEWLINE_TYPE_CR(1u),
    G_DATA_STREAM_NEWLINE_TYPE_CR_LF(2u),
    G_DATA_STREAM_NEWLINE_TYPE_ANY(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDataStreamNewlineType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDataStreamNewlineType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDriveStartStopType(override val value: UInt) : CEnum {
    G_DRIVE_START_STOP_TYPE_UNKNOWN(0u),
    G_DRIVE_START_STOP_TYPE_SHUTDOWN(1u),
    G_DRIVE_START_STOP_TYPE_NETWORK(2u),
    G_DRIVE_START_STOP_TYPE_MULTIDISK(3u),
    G_DRIVE_START_STOP_TYPE_PASSWORD(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDriveStartStopType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDriveStartStopType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GFileMonitorEvent(override val value: UInt) : CEnum {
    G_FILE_MONITOR_EVENT_CHANGED(0u),
    G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT(1u),
    G_FILE_MONITOR_EVENT_DELETED(2u),
    G_FILE_MONITOR_EVENT_CREATED(3u),
    G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED(4u),
    G_FILE_MONITOR_EVENT_PRE_UNMOUNT(5u),
    G_FILE_MONITOR_EVENT_UNMOUNTED(6u),
    G_FILE_MONITOR_EVENT_MOVED(7u),
    G_FILE_MONITOR_EVENT_RENAMED(8u),
    G_FILE_MONITOR_EVENT_MOVED_IN(9u),
    G_FILE_MONITOR_EVENT_MOVED_OUT(10u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GFileMonitorEvent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GFileMonitorEvent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GPasswordSave(override val value: UInt) : CEnum {
    G_PASSWORD_SAVE_NEVER(0u),
    G_PASSWORD_SAVE_FOR_SESSION(1u),
    G_PASSWORD_SAVE_PERMANENTLY(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GPasswordSave.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GPasswordSave
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GMountOperationResult(override val value: UInt) : CEnum {
    G_MOUNT_OPERATION_HANDLED(0u),
    G_MOUNT_OPERATION_ABORTED(1u),
    G_MOUNT_OPERATION_UNHANDLED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GMountOperationResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GMountOperationResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GEmblemOrigin(override val value: UInt) : CEnum {
    G_EMBLEM_ORIGIN_UNKNOWN(0u),
    G_EMBLEM_ORIGIN_DEVICE(1u),
    G_EMBLEM_ORIGIN_LIVEMETADATA(2u),
    G_EMBLEM_ORIGIN_TAG(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GEmblemOrigin.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GEmblemOrigin
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GResolverError(override val value: UInt) : CEnum {
    G_RESOLVER_ERROR_NOT_FOUND(0u),
    G_RESOLVER_ERROR_TEMPORARY_FAILURE(1u),
    G_RESOLVER_ERROR_INTERNAL(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GResolverError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GResolverError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GResourceError(override val value: UInt) : CEnum {
    G_RESOURCE_ERROR_NOT_FOUND(0u),
    G_RESOURCE_ERROR_INTERNAL(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GResourceError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GResourceError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSocketType(override val value: UInt) : CEnum {
    G_SOCKET_TYPE_INVALID(0u),
    G_SOCKET_TYPE_STREAM(1u),
    G_SOCKET_TYPE_DATAGRAM(2u),
    G_SOCKET_TYPE_SEQPACKET(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSocketType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSocketType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GZlibCompressorFormat(override val value: UInt) : CEnum {
    G_ZLIB_COMPRESSOR_FORMAT_ZLIB(0u),
    G_ZLIB_COMPRESSOR_FORMAT_GZIP(1u),
    G_ZLIB_COMPRESSOR_FORMAT_RAW(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GZlibCompressorFormat.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GZlibCompressorFormat
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GUnixSocketAddressType(override val value: UInt) : CEnum {
    G_UNIX_SOCKET_ADDRESS_INVALID(0u),
    G_UNIX_SOCKET_ADDRESS_ANONYMOUS(1u),
    G_UNIX_SOCKET_ADDRESS_PATH(2u),
    G_UNIX_SOCKET_ADDRESS_ABSTRACT(3u),
    G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GUnixSocketAddressType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GUnixSocketAddressType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDBusError(override val value: UInt) : CEnum {
    G_DBUS_ERROR_FAILED(0u),
    G_DBUS_ERROR_NO_MEMORY(1u),
    G_DBUS_ERROR_SERVICE_UNKNOWN(2u),
    G_DBUS_ERROR_NAME_HAS_NO_OWNER(3u),
    G_DBUS_ERROR_NO_REPLY(4u),
    G_DBUS_ERROR_IO_ERROR(5u),
    G_DBUS_ERROR_BAD_ADDRESS(6u),
    G_DBUS_ERROR_NOT_SUPPORTED(7u),
    G_DBUS_ERROR_LIMITS_EXCEEDED(8u),
    G_DBUS_ERROR_ACCESS_DENIED(9u),
    G_DBUS_ERROR_AUTH_FAILED(10u),
    G_DBUS_ERROR_NO_SERVER(11u),
    G_DBUS_ERROR_TIMEOUT(12u),
    G_DBUS_ERROR_NO_NETWORK(13u),
    G_DBUS_ERROR_ADDRESS_IN_USE(14u),
    G_DBUS_ERROR_DISCONNECTED(15u),
    G_DBUS_ERROR_INVALID_ARGS(16u),
    G_DBUS_ERROR_FILE_NOT_FOUND(17u),
    G_DBUS_ERROR_FILE_EXISTS(18u),
    G_DBUS_ERROR_UNKNOWN_METHOD(19u),
    G_DBUS_ERROR_TIMED_OUT(20u),
    G_DBUS_ERROR_MATCH_RULE_NOT_FOUND(21u),
    G_DBUS_ERROR_MATCH_RULE_INVALID(22u),
    G_DBUS_ERROR_SPAWN_EXEC_FAILED(23u),
    G_DBUS_ERROR_SPAWN_FORK_FAILED(24u),
    G_DBUS_ERROR_SPAWN_CHILD_EXITED(25u),
    G_DBUS_ERROR_SPAWN_CHILD_SIGNALED(26u),
    G_DBUS_ERROR_SPAWN_FAILED(27u),
    G_DBUS_ERROR_SPAWN_SETUP_FAILED(28u),
    G_DBUS_ERROR_SPAWN_CONFIG_INVALID(29u),
    G_DBUS_ERROR_SPAWN_SERVICE_INVALID(30u),
    G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND(31u),
    G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID(32u),
    G_DBUS_ERROR_SPAWN_FILE_INVALID(33u),
    G_DBUS_ERROR_SPAWN_NO_MEMORY(34u),
    G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN(35u),
    G_DBUS_ERROR_INVALID_SIGNATURE(36u),
    G_DBUS_ERROR_INVALID_FILE_CONTENT(37u),
    G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN(38u),
    G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN(39u),
    G_DBUS_ERROR_OBJECT_PATH_IN_USE(40u),
    G_DBUS_ERROR_UNKNOWN_OBJECT(41u),
    G_DBUS_ERROR_UNKNOWN_INTERFACE(42u),
    G_DBUS_ERROR_UNKNOWN_PROPERTY(43u),
    G_DBUS_ERROR_PROPERTY_READ_ONLY(44u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDBusError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDBusError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDBusMessageType(override val value: UInt) : CEnum {
    G_DBUS_MESSAGE_TYPE_INVALID(0u),
    G_DBUS_MESSAGE_TYPE_METHOD_CALL(1u),
    G_DBUS_MESSAGE_TYPE_METHOD_RETURN(2u),
    G_DBUS_MESSAGE_TYPE_ERROR(3u),
    G_DBUS_MESSAGE_TYPE_SIGNAL(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDBusMessageType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDBusMessageType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GDBusMessageHeaderField(override val value: UInt) : CEnum {
    G_DBUS_MESSAGE_HEADER_FIELD_INVALID(0u),
    G_DBUS_MESSAGE_HEADER_FIELD_PATH(1u),
    G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE(2u),
    G_DBUS_MESSAGE_HEADER_FIELD_MEMBER(3u),
    G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME(4u),
    G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL(5u),
    G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION(6u),
    G_DBUS_MESSAGE_HEADER_FIELD_SENDER(7u),
    G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE(8u),
    G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS(9u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GDBusMessageHeaderField.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GDBusMessageHeaderField
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GCredentialsType(override val value: UInt) : CEnum {
    G_CREDENTIALS_TYPE_INVALID(0u),
    G_CREDENTIALS_TYPE_LINUX_UCRED(1u),
    G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED(2u),
    G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED(3u),
    G_CREDENTIALS_TYPE_SOLARIS_UCRED(4u),
    G_CREDENTIALS_TYPE_NETBSD_UNPCBID(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GCredentialsType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GCredentialsType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsError(override val value: UInt) : CEnum {
    G_TLS_ERROR_UNAVAILABLE(0u),
    G_TLS_ERROR_MISC(1u),
    G_TLS_ERROR_BAD_CERTIFICATE(2u),
    G_TLS_ERROR_NOT_TLS(3u),
    G_TLS_ERROR_HANDSHAKE(4u),
    G_TLS_ERROR_CERTIFICATE_REQUIRED(5u),
    G_TLS_ERROR_EOF(6u),
    G_TLS_ERROR_INAPPROPRIATE_FALLBACK(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsAuthenticationMode(override val value: UInt) : CEnum {
    G_TLS_AUTHENTICATION_NONE(0u),
    G_TLS_AUTHENTICATION_REQUESTED(1u),
    G_TLS_AUTHENTICATION_REQUIRED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsAuthenticationMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsAuthenticationMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsRehandshakeMode(override val value: UInt) : CEnum {
    G_TLS_REHANDSHAKE_NEVER(0u),
    G_TLS_REHANDSHAKE_SAFELY(1u),
    G_TLS_REHANDSHAKE_UNSAFELY(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsRehandshakeMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsRehandshakeMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GTlsInteractionResult(override val value: UInt) : CEnum {
    G_TLS_INTERACTION_UNHANDLED(0u),
    G_TLS_INTERACTION_HANDLED(1u),
    G_TLS_INTERACTION_FAILED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GTlsInteractionResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GTlsInteractionResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GIOModuleScopeFlags(override val value: UInt) : CEnum {
    G_IO_MODULE_SCOPE_NONE(0u),
    G_IO_MODULE_SCOPE_BLOCK_DUPLICATES(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GIOModuleScopeFlags.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GIOModuleScopeFlags
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSocketClientEvent(override val value: UInt) : CEnum {
    G_SOCKET_CLIENT_RESOLVING(0u),
    G_SOCKET_CLIENT_RESOLVED(1u),
    G_SOCKET_CLIENT_CONNECTING(2u),
    G_SOCKET_CLIENT_CONNECTED(3u),
    G_SOCKET_CLIENT_PROXY_NEGOTIATING(4u),
    G_SOCKET_CLIENT_PROXY_NEGOTIATED(5u),
    G_SOCKET_CLIENT_TLS_HANDSHAKING(6u),
    G_SOCKET_CLIENT_TLS_HANDSHAKED(7u),
    G_SOCKET_CLIENT_COMPLETE(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSocketClientEvent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSocketClientEvent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSocketListenerEvent(override val value: UInt) : CEnum {
    G_SOCKET_LISTENER_BINDING(0u),
    G_SOCKET_LISTENER_BOUND(1u),
    G_SOCKET_LISTENER_LISTENING(2u),
    G_SOCKET_LISTENER_LISTENED(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSocketListenerEvent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSocketListenerEvent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GNotificationPriority(override val value: UInt) : CEnum {
    G_NOTIFICATION_PRIORITY_NORMAL(0u),
    G_NOTIFICATION_PRIORITY_LOW(1u),
    G_NOTIFICATION_PRIORITY_HIGH(2u),
    G_NOTIFICATION_PRIORITY_URGENT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GNotificationPriority.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GNotificationPriority
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GOptionArg(override val value: UInt) : CEnum {
    G_OPTION_ARG_NONE(0u),
    G_OPTION_ARG_STRING(1u),
    G_OPTION_ARG_INT(2u),
    G_OPTION_ARG_CALLBACK(3u),
    G_OPTION_ARG_FILENAME(4u),
    G_OPTION_ARG_STRING_ARRAY(5u),
    G_OPTION_ARG_FILENAME_ARRAY(6u),
    G_OPTION_ARG_DOUBLE(7u),
    G_OPTION_ARG_INT64(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GOptionArg.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GOptionArg
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GSeekType(override val value: UInt) : CEnum {
    G_SEEK_CUR(0u),
    G_SEEK_SET(1u),
    G_SEEK_END(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GSeekType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GSeekType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkAlign(override val value: UInt) : CEnum {
    GTK_ALIGN_FILL(0u),
    GTK_ALIGN_START(1u),
    GTK_ALIGN_END(2u),
    GTK_ALIGN_CENTER(3u),
    GTK_ALIGN_BASELINE(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkAlign.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkAlign
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkArrowType(override val value: UInt) : CEnum {
    GTK_ARROW_UP(0u),
    GTK_ARROW_DOWN(1u),
    GTK_ARROW_LEFT(2u),
    GTK_ARROW_RIGHT(3u),
    GTK_ARROW_NONE(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkArrowType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkArrowType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkBaselinePosition(override val value: UInt) : CEnum {
    GTK_BASELINE_POSITION_TOP(0u),
    GTK_BASELINE_POSITION_CENTER(1u),
    GTK_BASELINE_POSITION_BOTTOM(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkBaselinePosition.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkBaselinePosition
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkDeleteType(override val value: UInt) : CEnum {
    GTK_DELETE_CHARS(0u),
    GTK_DELETE_WORD_ENDS(1u),
    GTK_DELETE_WORDS(2u),
    GTK_DELETE_DISPLAY_LINES(3u),
    GTK_DELETE_DISPLAY_LINE_ENDS(4u),
    GTK_DELETE_PARAGRAPH_ENDS(5u),
    GTK_DELETE_PARAGRAPHS(6u),
    GTK_DELETE_WHITESPACE(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkDeleteType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkDeleteType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkDirectionType(override val value: UInt) : CEnum {
    GTK_DIR_TAB_FORWARD(0u),
    GTK_DIR_TAB_BACKWARD(1u),
    GTK_DIR_UP(2u),
    GTK_DIR_DOWN(3u),
    GTK_DIR_LEFT(4u),
    GTK_DIR_RIGHT(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkDirectionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkDirectionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkIconSize(override val value: UInt) : CEnum {
    GTK_ICON_SIZE_INVALID(0u),
    GTK_ICON_SIZE_MENU(1u),
    GTK_ICON_SIZE_SMALL_TOOLBAR(2u),
    GTK_ICON_SIZE_LARGE_TOOLBAR(3u),
    GTK_ICON_SIZE_BUTTON(4u),
    GTK_ICON_SIZE_DND(5u),
    GTK_ICON_SIZE_DIALOG(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkIconSize.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkIconSize
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkSensitivityType(override val value: UInt) : CEnum {
    GTK_SENSITIVITY_AUTO(0u),
    GTK_SENSITIVITY_ON(1u),
    GTK_SENSITIVITY_OFF(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkSensitivityType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkSensitivityType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTextDirection(override val value: UInt) : CEnum {
    GTK_TEXT_DIR_NONE(0u),
    GTK_TEXT_DIR_LTR(1u),
    GTK_TEXT_DIR_RTL(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTextDirection.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTextDirection
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkJustification(override val value: UInt) : CEnum {
    GTK_JUSTIFY_LEFT(0u),
    GTK_JUSTIFY_RIGHT(1u),
    GTK_JUSTIFY_CENTER(2u),
    GTK_JUSTIFY_FILL(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkJustification.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkJustification
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkMenuDirectionType(override val value: UInt) : CEnum {
    GTK_MENU_DIR_PARENT(0u),
    GTK_MENU_DIR_CHILD(1u),
    GTK_MENU_DIR_NEXT(2u),
    GTK_MENU_DIR_PREV(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkMenuDirectionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkMenuDirectionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkMessageType(override val value: UInt) : CEnum {
    GTK_MESSAGE_INFO(0u),
    GTK_MESSAGE_WARNING(1u),
    GTK_MESSAGE_QUESTION(2u),
    GTK_MESSAGE_ERROR(3u),
    GTK_MESSAGE_OTHER(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkMessageType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkMessageType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkMovementStep(override val value: UInt) : CEnum {
    GTK_MOVEMENT_LOGICAL_POSITIONS(0u),
    GTK_MOVEMENT_VISUAL_POSITIONS(1u),
    GTK_MOVEMENT_WORDS(2u),
    GTK_MOVEMENT_DISPLAY_LINES(3u),
    GTK_MOVEMENT_DISPLAY_LINE_ENDS(4u),
    GTK_MOVEMENT_PARAGRAPHS(5u),
    GTK_MOVEMENT_PARAGRAPH_ENDS(6u),
    GTK_MOVEMENT_PAGES(7u),
    GTK_MOVEMENT_BUFFER_ENDS(8u),
    GTK_MOVEMENT_HORIZONTAL_PAGES(9u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkMovementStep.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkMovementStep
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkScrollStep(override val value: UInt) : CEnum {
    GTK_SCROLL_STEPS(0u),
    GTK_SCROLL_PAGES(1u),
    GTK_SCROLL_ENDS(2u),
    GTK_SCROLL_HORIZONTAL_STEPS(3u),
    GTK_SCROLL_HORIZONTAL_PAGES(4u),
    GTK_SCROLL_HORIZONTAL_ENDS(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkScrollStep.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkScrollStep
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkOrientation(override val value: UInt) : CEnum {
    GTK_ORIENTATION_HORIZONTAL(0u),
    GTK_ORIENTATION_VERTICAL(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkOrientation.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkOrientation
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPackType(override val value: UInt) : CEnum {
    GTK_PACK_START(0u),
    GTK_PACK_END(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPackType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPackType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPositionType(override val value: UInt) : CEnum {
    GTK_POS_LEFT(0u),
    GTK_POS_RIGHT(1u),
    GTK_POS_TOP(2u),
    GTK_POS_BOTTOM(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPositionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPositionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkReliefStyle(override val value: UInt) : CEnum {
    GTK_RELIEF_NORMAL(0u),
    GTK_RELIEF_HALF(1u),
    GTK_RELIEF_NONE(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkReliefStyle.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkReliefStyle
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkScrollType(override val value: UInt) : CEnum {
    GTK_SCROLL_NONE(0u),
    GTK_SCROLL_JUMP(1u),
    GTK_SCROLL_STEP_BACKWARD(2u),
    GTK_SCROLL_STEP_FORWARD(3u),
    GTK_SCROLL_PAGE_BACKWARD(4u),
    GTK_SCROLL_PAGE_FORWARD(5u),
    GTK_SCROLL_STEP_UP(6u),
    GTK_SCROLL_STEP_DOWN(7u),
    GTK_SCROLL_PAGE_UP(8u),
    GTK_SCROLL_PAGE_DOWN(9u),
    GTK_SCROLL_STEP_LEFT(10u),
    GTK_SCROLL_STEP_RIGHT(11u),
    GTK_SCROLL_PAGE_LEFT(12u),
    GTK_SCROLL_PAGE_RIGHT(13u),
    GTK_SCROLL_START(14u),
    GTK_SCROLL_END(15u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkScrollType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkScrollType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkSelectionMode(override val value: UInt) : CEnum {
    GTK_SELECTION_NONE(0u),
    GTK_SELECTION_SINGLE(1u),
    GTK_SELECTION_BROWSE(2u),
    GTK_SELECTION_MULTIPLE(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkSelectionMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkSelectionMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkShadowType(override val value: UInt) : CEnum {
    GTK_SHADOW_NONE(0u),
    GTK_SHADOW_IN(1u),
    GTK_SHADOW_OUT(2u),
    GTK_SHADOW_ETCHED_IN(3u),
    GTK_SHADOW_ETCHED_OUT(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkShadowType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkShadowType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkStateType(override val value: UInt) : CEnum {
    GTK_STATE_NORMAL(0u),
    GTK_STATE_ACTIVE(1u),
    GTK_STATE_PRELIGHT(2u),
    GTK_STATE_SELECTED(3u),
    GTK_STATE_INSENSITIVE(4u),
    GTK_STATE_INCONSISTENT(5u),
    GTK_STATE_FOCUSED(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkStateType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkStateType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkToolbarStyle(override val value: UInt) : CEnum {
    GTK_TOOLBAR_ICONS(0u),
    GTK_TOOLBAR_TEXT(1u),
    GTK_TOOLBAR_BOTH(2u),
    GTK_TOOLBAR_BOTH_HORIZ(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkToolbarStyle.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkToolbarStyle
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkWrapMode(override val value: UInt) : CEnum {
    GTK_WRAP_NONE(0u),
    GTK_WRAP_CHAR(1u),
    GTK_WRAP_WORD(2u),
    GTK_WRAP_WORD_CHAR(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkWrapMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkWrapMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkSortType(override val value: UInt) : CEnum {
    GTK_SORT_ASCENDING(0u),
    GTK_SORT_DESCENDING(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkSortType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkSortType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkIMPreeditStyle(override val value: UInt) : CEnum {
    GTK_IM_PREEDIT_NOTHING(0u),
    GTK_IM_PREEDIT_CALLBACK(1u),
    GTK_IM_PREEDIT_NONE(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkIMPreeditStyle.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkIMPreeditStyle
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkIMStatusStyle(override val value: UInt) : CEnum {
    GTK_IM_STATUS_NOTHING(0u),
    GTK_IM_STATUS_CALLBACK(1u),
    GTK_IM_STATUS_NONE(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkIMStatusStyle.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkIMStatusStyle
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPackDirection(override val value: UInt) : CEnum {
    GTK_PACK_DIRECTION_LTR(0u),
    GTK_PACK_DIRECTION_RTL(1u),
    GTK_PACK_DIRECTION_TTB(2u),
    GTK_PACK_DIRECTION_BTT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPackDirection.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPackDirection
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintPages(override val value: UInt) : CEnum {
    GTK_PRINT_PAGES_ALL(0u),
    GTK_PRINT_PAGES_CURRENT(1u),
    GTK_PRINT_PAGES_RANGES(2u),
    GTK_PRINT_PAGES_SELECTION(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintPages.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintPages
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPageSet(override val value: UInt) : CEnum {
    GTK_PAGE_SET_ALL(0u),
    GTK_PAGE_SET_EVEN(1u),
    GTK_PAGE_SET_ODD(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPageSet.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPageSet
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkNumberUpLayout(override val value: UInt) : CEnum {
    GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM(0u),
    GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP(1u),
    GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM(2u),
    GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP(3u),
    GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT(4u),
    GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT(5u),
    GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT(6u),
    GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkNumberUpLayout.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkNumberUpLayout
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPageOrientation(override val value: UInt) : CEnum {
    GTK_PAGE_ORIENTATION_PORTRAIT(0u),
    GTK_PAGE_ORIENTATION_LANDSCAPE(1u),
    GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT(2u),
    GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPageOrientation.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPageOrientation
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintQuality(override val value: UInt) : CEnum {
    GTK_PRINT_QUALITY_LOW(0u),
    GTK_PRINT_QUALITY_NORMAL(1u),
    GTK_PRINT_QUALITY_HIGH(2u),
    GTK_PRINT_QUALITY_DRAFT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintQuality.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintQuality
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintDuplex(override val value: UInt) : CEnum {
    GTK_PRINT_DUPLEX_SIMPLEX(0u),
    GTK_PRINT_DUPLEX_HORIZONTAL(1u),
    GTK_PRINT_DUPLEX_VERTICAL(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintDuplex.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintDuplex
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkUnit(override val value: UInt) : CEnum {
    GTK_UNIT_NONE(0u),
    GTK_UNIT_POINTS(1u),
    GTK_UNIT_INCH(2u),
    GTK_UNIT_MM(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkUnit.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkUnit
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTreeViewGridLines(override val value: UInt) : CEnum {
    GTK_TREE_VIEW_GRID_LINES_NONE(0u),
    GTK_TREE_VIEW_GRID_LINES_HORIZONTAL(1u),
    GTK_TREE_VIEW_GRID_LINES_VERTICAL(2u),
    GTK_TREE_VIEW_GRID_LINES_BOTH(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTreeViewGridLines.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTreeViewGridLines
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkDragResult(override val value: UInt) : CEnum {
    GTK_DRAG_RESULT_SUCCESS(0u),
    GTK_DRAG_RESULT_NO_TARGET(1u),
    GTK_DRAG_RESULT_USER_CANCELLED(2u),
    GTK_DRAG_RESULT_TIMEOUT_EXPIRED(3u),
    GTK_DRAG_RESULT_GRAB_BROKEN(4u),
    GTK_DRAG_RESULT_ERROR(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkDragResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkDragResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkSizeGroupMode(override val value: UInt) : CEnum {
    GTK_SIZE_GROUP_NONE(0u),
    GTK_SIZE_GROUP_HORIZONTAL(1u),
    GTK_SIZE_GROUP_VERTICAL(2u),
    GTK_SIZE_GROUP_BOTH(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkSizeGroupMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkSizeGroupMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkBorderStyle(override val value: UInt) : CEnum {
    GTK_BORDER_STYLE_NONE(0u),
    GTK_BORDER_STYLE_SOLID(1u),
    GTK_BORDER_STYLE_INSET(2u),
    GTK_BORDER_STYLE_OUTSET(3u),
    GTK_BORDER_STYLE_HIDDEN(4u),
    GTK_BORDER_STYLE_DOTTED(5u),
    GTK_BORDER_STYLE_DASHED(6u),
    GTK_BORDER_STYLE_DOUBLE(7u),
    GTK_BORDER_STYLE_GROOVE(8u),
    GTK_BORDER_STYLE_RIDGE(9u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkBorderStyle.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkBorderStyle
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkLevelBarMode(override val value: UInt) : CEnum {
    GTK_LEVEL_BAR_MODE_CONTINUOUS(0u),
    GTK_LEVEL_BAR_MODE_DISCRETE(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkLevelBarMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkLevelBarMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkInputPurpose(override val value: UInt) : CEnum {
    GTK_INPUT_PURPOSE_FREE_FORM(0u),
    GTK_INPUT_PURPOSE_ALPHA(1u),
    GTK_INPUT_PURPOSE_DIGITS(2u),
    GTK_INPUT_PURPOSE_NUMBER(3u),
    GTK_INPUT_PURPOSE_PHONE(4u),
    GTK_INPUT_PURPOSE_URL(5u),
    GTK_INPUT_PURPOSE_EMAIL(6u),
    GTK_INPUT_PURPOSE_NAME(7u),
    GTK_INPUT_PURPOSE_PASSWORD(8u),
    GTK_INPUT_PURPOSE_PIN(9u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkInputPurpose.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkInputPurpose
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPropagationPhase(override val value: UInt) : CEnum {
    GTK_PHASE_NONE(0u),
    GTK_PHASE_CAPTURE(1u),
    GTK_PHASE_BUBBLE(2u),
    GTK_PHASE_TARGET(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPropagationPhase.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPropagationPhase
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkEventSequenceState(override val value: UInt) : CEnum {
    GTK_EVENT_SEQUENCE_NONE(0u),
    GTK_EVENT_SEQUENCE_CLAIMED(1u),
    GTK_EVENT_SEQUENCE_DENIED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkEventSequenceState.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkEventSequenceState
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPanDirection(override val value: UInt) : CEnum {
    GTK_PAN_DIRECTION_LEFT(0u),
    GTK_PAN_DIRECTION_RIGHT(1u),
    GTK_PAN_DIRECTION_UP(2u),
    GTK_PAN_DIRECTION_DOWN(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPanDirection.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPanDirection
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPopoverConstraint(override val value: UInt) : CEnum {
    GTK_POPOVER_CONSTRAINT_NONE(0u),
    GTK_POPOVER_CONSTRAINT_WINDOW(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPopoverConstraint.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPopoverConstraint
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkWidgetHelpType(override val value: UInt) : CEnum {
    GTK_WIDGET_HELP_TOOLTIP(0u),
    GTK_WIDGET_HELP_WHATS_THIS(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkWidgetHelpType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkWidgetHelpType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkVisibilityState(override val value: UInt) : CEnum {
    GDK_VISIBILITY_UNOBSCURED(0u),
    GDK_VISIBILITY_PARTIAL(1u),
    GDK_VISIBILITY_FULLY_OBSCURED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkVisibilityState.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkVisibilityState
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkScrollDirection(override val value: UInt) : CEnum {
    GDK_SCROLL_UP(0u),
    GDK_SCROLL_DOWN(1u),
    GDK_SCROLL_LEFT(2u),
    GDK_SCROLL_RIGHT(3u),
    GDK_SCROLL_SMOOTH(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkScrollDirection.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkScrollDirection
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkCrossingMode(override val value: UInt) : CEnum {
    GDK_CROSSING_NORMAL(0u),
    GDK_CROSSING_GRAB(1u),
    GDK_CROSSING_UNGRAB(2u),
    GDK_CROSSING_GTK_GRAB(3u),
    GDK_CROSSING_GTK_UNGRAB(4u),
    GDK_CROSSING_STATE_CHANGED(5u),
    GDK_CROSSING_TOUCH_BEGIN(6u),
    GDK_CROSSING_TOUCH_END(7u),
    GDK_CROSSING_DEVICE_SWITCH(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkCrossingMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkCrossingMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkOwnerChange(override val value: UInt) : CEnum {
    GDK_OWNER_CHANGE_NEW_OWNER(0u),
    GDK_OWNER_CHANGE_DESTROY(1u),
    GDK_OWNER_CHANGE_CLOSE(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkOwnerChange.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkOwnerChange
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkSettingAction(override val value: UInt) : CEnum {
    GDK_SETTING_ACTION_NEW(0u),
    GDK_SETTING_ACTION_CHANGED(1u),
    GDK_SETTING_ACTION_DELETED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkSettingAction.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkSettingAction
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class AtkLayer(override val value: UInt) : CEnum {
    ATK_LAYER_INVALID(0u),
    ATK_LAYER_BACKGROUND(1u),
    ATK_LAYER_CANVAS(2u),
    ATK_LAYER_WIDGET(3u),
    ATK_LAYER_MDI(4u),
    ATK_LAYER_POPUP(5u),
    ATK_LAYER_OVERLAY(6u),
    ATK_LAYER_WINDOW(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = AtkLayer.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: AtkLayer
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkModifierIntent(override val value: UInt) : CEnum {
    GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR(0u),
    GDK_MODIFIER_INTENT_CONTEXT_MENU(1u),
    GDK_MODIFIER_INTENT_EXTEND_SELECTION(2u),
    GDK_MODIFIER_INTENT_MODIFY_SELECTION(3u),
    GDK_MODIFIER_INTENT_NO_TEXT_INPUT(4u),
    GDK_MODIFIER_INTENT_SHIFT_GROUP(5u),
    GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkModifierIntent.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkModifierIntent
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkResizeMode(override val value: UInt) : CEnum {
    GTK_RESIZE_PARENT(0u),
    GTK_RESIZE_QUEUE(1u),
    GTK_RESIZE_IMMEDIATE(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkResizeMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkResizeMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkWindowType(override val value: UInt) : CEnum {
    GTK_WINDOW_TOPLEVEL(0u),
    GTK_WINDOW_POPUP(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkWindowType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkWindowType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkWindowPosition(override val value: UInt) : CEnum {
    GTK_WIN_POS_NONE(0u),
    GTK_WIN_POS_CENTER(1u),
    GTK_WIN_POS_MOUSE(2u),
    GTK_WIN_POS_CENTER_ALWAYS(3u),
    GTK_WIN_POS_CENTER_ON_PARENT(4u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkWindowPosition.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkWindowPosition
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkWindowTypeHint(override val value: UInt) : CEnum {
    GDK_WINDOW_TYPE_HINT_NORMAL(0u),
    GDK_WINDOW_TYPE_HINT_DIALOG(1u),
    GDK_WINDOW_TYPE_HINT_MENU(2u),
    GDK_WINDOW_TYPE_HINT_TOOLBAR(3u),
    GDK_WINDOW_TYPE_HINT_SPLASHSCREEN(4u),
    GDK_WINDOW_TYPE_HINT_UTILITY(5u),
    GDK_WINDOW_TYPE_HINT_DOCK(6u),
    GDK_WINDOW_TYPE_HINT_DESKTOP(7u),
    GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU(8u),
    GDK_WINDOW_TYPE_HINT_POPUP_MENU(9u),
    GDK_WINDOW_TYPE_HINT_TOOLTIP(10u),
    GDK_WINDOW_TYPE_HINT_NOTIFICATION(11u),
    GDK_WINDOW_TYPE_HINT_COMBO(12u),
    GDK_WINDOW_TYPE_HINT_DND(13u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkWindowTypeHint.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkWindowTypeHint
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkWindowEdge(override val value: UInt) : CEnum {
    GDK_WINDOW_EDGE_NORTH_WEST(0u),
    GDK_WINDOW_EDGE_NORTH(1u),
    GDK_WINDOW_EDGE_NORTH_EAST(2u),
    GDK_WINDOW_EDGE_WEST(3u),
    GDK_WINDOW_EDGE_EAST(4u),
    GDK_WINDOW_EDGE_SOUTH_WEST(5u),
    GDK_WINDOW_EDGE_SOUTH(6u),
    GDK_WINDOW_EDGE_SOUTH_EAST(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkWindowEdge.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkWindowEdge
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkLicense(override val value: UInt) : CEnum {
    GTK_LICENSE_UNKNOWN(0u),
    GTK_LICENSE_CUSTOM(1u),
    GTK_LICENSE_GPL_2_0(2u),
    GTK_LICENSE_GPL_3_0(3u),
    GTK_LICENSE_LGPL_2_1(4u),
    GTK_LICENSE_LGPL_3_0(5u),
    GTK_LICENSE_BSD(6u),
    GTK_LICENSE_MIT_X11(7u),
    GTK_LICENSE_ARTISTIC(8u),
    GTK_LICENSE_GPL_2_0_ONLY(9u),
    GTK_LICENSE_GPL_3_0_ONLY(10u),
    GTK_LICENSE_LGPL_2_1_ONLY(11u),
    GTK_LICENSE_LGPL_3_0_ONLY(12u),
    GTK_LICENSE_AGPL_3_0(13u),
    GTK_LICENSE_AGPL_3_0_ONLY(14u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkLicense.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkLicense
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkArrowPlacement(override val value: UInt) : CEnum {
    GTK_ARROWS_BOTH(0u),
    GTK_ARROWS_START(1u),
    GTK_ARROWS_END(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkArrowPlacement.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkArrowPlacement
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class PangoEllipsizeMode(override val value: UInt) : CEnum {
    PANGO_ELLIPSIZE_NONE(0u),
    PANGO_ELLIPSIZE_START(1u),
    PANGO_ELLIPSIZE_MIDDLE(2u),
    PANGO_ELLIPSIZE_END(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = PangoEllipsizeMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: PangoEllipsizeMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class PangoWrapMode(override val value: UInt) : CEnum {
    PANGO_WRAP_WORD(0u),
    PANGO_WRAP_CHAR(1u),
    PANGO_WRAP_WORD_CHAR(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = PangoWrapMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: PangoWrapMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkCellRendererMode(override val value: UInt) : CEnum {
    GTK_CELL_RENDERER_MODE_INERT(0u),
    GTK_CELL_RENDERER_MODE_ACTIVATABLE(1u),
    GTK_CELL_RENDERER_MODE_EDITABLE(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkCellRendererMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkCellRendererMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTreeViewColumnSizing(override val value: UInt) : CEnum {
    GTK_TREE_VIEW_COLUMN_GROW_ONLY(0u),
    GTK_TREE_VIEW_COLUMN_AUTOSIZE(1u),
    GTK_TREE_VIEW_COLUMN_FIXED(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTreeViewColumnSizing.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTreeViewColumnSizing
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkImageType(override val value: UInt) : CEnum {
    GTK_IMAGE_EMPTY(0u),
    GTK_IMAGE_PIXBUF(1u),
    GTK_IMAGE_STOCK(2u),
    GTK_IMAGE_ICON_SET(3u),
    GTK_IMAGE_ANIMATION(4u),
    GTK_IMAGE_ICON_NAME(5u),
    GTK_IMAGE_GICON(6u),
    GTK_IMAGE_SURFACE(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkImageType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkImageType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkEntryIconPosition(override val value: UInt) : CEnum {
    GTK_ENTRY_ICON_PRIMARY(0u),
    GTK_ENTRY_ICON_SECONDARY(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkEntryIconPosition.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkEntryIconPosition
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTreeViewDropPosition(override val value: UInt) : CEnum {
    GTK_TREE_VIEW_DROP_BEFORE(0u),
    GTK_TREE_VIEW_DROP_AFTER(1u),
    GTK_TREE_VIEW_DROP_INTO_OR_BEFORE(2u),
    GTK_TREE_VIEW_DROP_INTO_OR_AFTER(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTreeViewDropPosition.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTreeViewDropPosition
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkAssistantPageType(override val value: UInt) : CEnum {
    GTK_ASSISTANT_PAGE_CONTENT(0u),
    GTK_ASSISTANT_PAGE_INTRO(1u),
    GTK_ASSISTANT_PAGE_CONFIRM(2u),
    GTK_ASSISTANT_PAGE_SUMMARY(3u),
    GTK_ASSISTANT_PAGE_PROGRESS(4u),
    GTK_ASSISTANT_PAGE_CUSTOM(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkAssistantPageType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkAssistantPageType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkBuilderError(override val value: UInt) : CEnum {
    GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION(0u),
    GTK_BUILDER_ERROR_UNHANDLED_TAG(1u),
    GTK_BUILDER_ERROR_MISSING_ATTRIBUTE(2u),
    GTK_BUILDER_ERROR_INVALID_ATTRIBUTE(3u),
    GTK_BUILDER_ERROR_INVALID_TAG(4u),
    GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE(5u),
    GTK_BUILDER_ERROR_INVALID_VALUE(6u),
    GTK_BUILDER_ERROR_VERSION_MISMATCH(7u),
    GTK_BUILDER_ERROR_DUPLICATE_ID(8u),
    GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED(9u),
    GTK_BUILDER_ERROR_TEMPLATE_MISMATCH(10u),
    GTK_BUILDER_ERROR_INVALID_PROPERTY(11u),
    GTK_BUILDER_ERROR_INVALID_SIGNAL(12u),
    GTK_BUILDER_ERROR_INVALID_ID(13u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkBuilderError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkBuilderError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkCellRendererAccelMode(override val value: UInt) : CEnum {
    GTK_CELL_RENDERER_ACCEL_MODE_GTK(0u),
    GTK_CELL_RENDERER_ACCEL_MODE_OTHER(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkCellRendererAccelMode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkCellRendererAccelMode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkCssSectionType(override val value: UInt) : CEnum {
    GTK_CSS_SECTION_DOCUMENT(0u),
    GTK_CSS_SECTION_IMPORT(1u),
    GTK_CSS_SECTION_COLOR_DEFINITION(2u),
    GTK_CSS_SECTION_BINDING_SET(3u),
    GTK_CSS_SECTION_RULESET(4u),
    GTK_CSS_SECTION_SELECTOR(5u),
    GTK_CSS_SECTION_DECLARATION(6u),
    GTK_CSS_SECTION_VALUE(7u),
    GTK_CSS_SECTION_KEYFRAMES(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkCssSectionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkCssSectionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkCssProviderError(override val value: UInt) : CEnum {
    GTK_CSS_PROVIDER_ERROR_FAILED(0u),
    GTK_CSS_PROVIDER_ERROR_SYNTAX(1u),
    GTK_CSS_PROVIDER_ERROR_IMPORT(2u),
    GTK_CSS_PROVIDER_ERROR_NAME(3u),
    GTK_CSS_PROVIDER_ERROR_DEPRECATED(4u),
    GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkCssProviderError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkCssProviderError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkFileChooserAction(override val value: UInt) : CEnum {
    GTK_FILE_CHOOSER_ACTION_OPEN(0u),
    GTK_FILE_CHOOSER_ACTION_SAVE(1u),
    GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER(2u),
    GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkFileChooserAction.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkFileChooserAction
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkFileChooserConfirmation(override val value: UInt) : CEnum {
    GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM(0u),
    GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME(1u),
    GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkFileChooserConfirmation.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkFileChooserConfirmation
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkFileChooserError(override val value: UInt) : CEnum {
    GTK_FILE_CHOOSER_ERROR_NONEXISTENT(0u),
    GTK_FILE_CHOOSER_ERROR_BAD_FILENAME(1u),
    GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS(2u),
    GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkFileChooserError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkFileChooserError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GdkAxisUse(override val value: UInt) : CEnum {
    GDK_AXIS_IGNORE(0u),
    GDK_AXIS_X(1u),
    GDK_AXIS_Y(2u),
    GDK_AXIS_PRESSURE(3u),
    GDK_AXIS_XTILT(4u),
    GDK_AXIS_YTILT(5u),
    GDK_AXIS_WHEEL(6u),
    GDK_AXIS_DISTANCE(7u),
    GDK_AXIS_ROTATION(8u),
    GDK_AXIS_SLIDER(9u),
    GDK_AXIS_LAST(10u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GdkAxisUse.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GdkAxisUse
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class PangoDirection(override val value: UInt) : CEnum {
    PANGO_DIRECTION_LTR(0u),
    PANGO_DIRECTION_RTL(1u),
    PANGO_DIRECTION_TTB_LTR(2u),
    PANGO_DIRECTION_TTB_RTL(3u),
    PANGO_DIRECTION_WEAK_LTR(4u),
    PANGO_DIRECTION_WEAK_RTL(5u),
    PANGO_DIRECTION_NEUTRAL(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = PangoDirection.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: PangoDirection
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkIconThemeError(override val value: UInt) : CEnum {
    GTK_ICON_THEME_NOT_FOUND(0u),
    GTK_ICON_THEME_FAILED(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkIconThemeError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkIconThemeError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkIconViewDropPosition(override val value: UInt) : CEnum {
    GTK_ICON_VIEW_NO_DROP(0u),
    GTK_ICON_VIEW_DROP_INTO(1u),
    GTK_ICON_VIEW_DROP_LEFT(2u),
    GTK_ICON_VIEW_DROP_RIGHT(3u),
    GTK_ICON_VIEW_DROP_ABOVE(4u),
    GTK_ICON_VIEW_DROP_BELOW(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkIconViewDropPosition.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkIconViewDropPosition
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkButtonsType(override val value: UInt) : CEnum {
    GTK_BUTTONS_NONE(0u),
    GTK_BUTTONS_OK(1u),
    GTK_BUTTONS_CLOSE(2u),
    GTK_BUTTONS_CANCEL(3u),
    GTK_BUTTONS_YES_NO(4u),
    GTK_BUTTONS_OK_CANCEL(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkButtonsType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkButtonsType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkButtonRole(override val value: UInt) : CEnum {
    GTK_BUTTON_ROLE_NORMAL(0u),
    GTK_BUTTON_ROLE_CHECK(1u),
    GTK_BUTTON_ROLE_RADIO(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkButtonRole.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkButtonRole
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkNotebookTab(override val value: UInt) : CEnum {
    GTK_NOTEBOOK_TAB_FIRST(0u),
    GTK_NOTEBOOK_TAB_LAST(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkNotebookTab.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkNotebookTab
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPadActionType(override val value: UInt) : CEnum {
    GTK_PAD_ACTION_BUTTON(0u),
    GTK_PAD_ACTION_RING(1u),
    GTK_PAD_ACTION_STRIP(2u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPadActionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPadActionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintOperationResult(override val value: UInt) : CEnum {
    GTK_PRINT_OPERATION_RESULT_ERROR(0u),
    GTK_PRINT_OPERATION_RESULT_APPLY(1u),
    GTK_PRINT_OPERATION_RESULT_CANCEL(2u),
    GTK_PRINT_OPERATION_RESULT_IN_PROGRESS(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintOperationResult.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintOperationResult
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintStatus(override val value: UInt) : CEnum {
    GTK_PRINT_STATUS_INITIAL(0u),
    GTK_PRINT_STATUS_PREPARING(1u),
    GTK_PRINT_STATUS_GENERATING_DATA(2u),
    GTK_PRINT_STATUS_SENDING_DATA(3u),
    GTK_PRINT_STATUS_PENDING(4u),
    GTK_PRINT_STATUS_PENDING_ISSUE(5u),
    GTK_PRINT_STATUS_PRINTING(6u),
    GTK_PRINT_STATUS_FINISHED(7u),
    GTK_PRINT_STATUS_FINISHED_ABORTED(8u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintStatus.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintStatus
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintOperationAction(override val value: UInt) : CEnum {
    GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG(0u),
    GTK_PRINT_OPERATION_ACTION_PRINT(1u),
    GTK_PRINT_OPERATION_ACTION_PREVIEW(2u),
    GTK_PRINT_OPERATION_ACTION_EXPORT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintOperationAction.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintOperationAction
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPrintError(override val value: UInt) : CEnum {
    GTK_PRINT_ERROR_GENERAL(0u),
    GTK_PRINT_ERROR_INTERNAL_ERROR(1u),
    GTK_PRINT_ERROR_NOMEM(2u),
    GTK_PRINT_ERROR_INVALID_FILE(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPrintError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPrintError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkRecentManagerError(override val value: UInt) : CEnum {
    GTK_RECENT_MANAGER_ERROR_NOT_FOUND(0u),
    GTK_RECENT_MANAGER_ERROR_INVALID_URI(1u),
    GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING(2u),
    GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED(3u),
    GTK_RECENT_MANAGER_ERROR_READ(4u),
    GTK_RECENT_MANAGER_ERROR_WRITE(5u),
    GTK_RECENT_MANAGER_ERROR_UNKNOWN(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkRecentManagerError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkRecentManagerError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkRecentChooserError(override val value: UInt) : CEnum {
    GTK_RECENT_CHOOSER_ERROR_NOT_FOUND(0u),
    GTK_RECENT_CHOOSER_ERROR_INVALID_URI(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkRecentChooserError.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkRecentChooserError
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkRevealerTransitionType(override val value: UInt) : CEnum {
    GTK_REVEALER_TRANSITION_TYPE_NONE(0u),
    GTK_REVEALER_TRANSITION_TYPE_CROSSFADE(1u),
    GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT(2u),
    GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT(3u),
    GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP(4u),
    GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN(5u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkRevealerTransitionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkRevealerTransitionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkCornerType(override val value: UInt) : CEnum {
    GTK_CORNER_TOP_LEFT(0u),
    GTK_CORNER_BOTTOM_LEFT(1u),
    GTK_CORNER_TOP_RIGHT(2u),
    GTK_CORNER_BOTTOM_RIGHT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkCornerType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkCornerType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkPolicyType(override val value: UInt) : CEnum {
    GTK_POLICY_ALWAYS(0u),
    GTK_POLICY_AUTOMATIC(1u),
    GTK_POLICY_NEVER(2u),
    GTK_POLICY_EXTERNAL(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkPolicyType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkPolicyType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkShortcutType(override val value: UInt) : CEnum {
    GTK_SHORTCUT_ACCELERATOR(0u),
    GTK_SHORTCUT_GESTURE_PINCH(1u),
    GTK_SHORTCUT_GESTURE_STRETCH(2u),
    GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE(3u),
    GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE(4u),
    GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT(5u),
    GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT(6u),
    GTK_SHORTCUT_GESTURE(7u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkShortcutType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkShortcutType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkStackTransitionType(override val value: UInt) : CEnum {
    GTK_STACK_TRANSITION_TYPE_NONE(0u),
    GTK_STACK_TRANSITION_TYPE_CROSSFADE(1u),
    GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT(2u),
    GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT(3u),
    GTK_STACK_TRANSITION_TYPE_SLIDE_UP(4u),
    GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN(5u),
    GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT(6u),
    GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN(7u),
    GTK_STACK_TRANSITION_TYPE_OVER_UP(8u),
    GTK_STACK_TRANSITION_TYPE_OVER_DOWN(9u),
    GTK_STACK_TRANSITION_TYPE_OVER_LEFT(10u),
    GTK_STACK_TRANSITION_TYPE_OVER_RIGHT(11u),
    GTK_STACK_TRANSITION_TYPE_UNDER_UP(12u),
    GTK_STACK_TRANSITION_TYPE_UNDER_DOWN(13u),
    GTK_STACK_TRANSITION_TYPE_UNDER_LEFT(14u),
    GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT(15u),
    GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN(16u),
    GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP(17u),
    GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT(18u),
    GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT(19u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkStackTransitionType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkStackTransitionType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkSpinButtonUpdatePolicy(override val value: UInt) : CEnum {
    GTK_UPDATE_ALWAYS(0u),
    GTK_UPDATE_IF_VALID(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkSpinButtonUpdatePolicy.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkSpinButtonUpdatePolicy
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkSpinType(override val value: UInt) : CEnum {
    GTK_SPIN_STEP_FORWARD(0u),
    GTK_SPIN_STEP_BACKWARD(1u),
    GTK_SPIN_PAGE_FORWARD(2u),
    GTK_SPIN_PAGE_BACKWARD(3u),
    GTK_SPIN_HOME(4u),
    GTK_SPIN_END(5u),
    GTK_SPIN_USER_DEFINED(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkSpinType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkSpinType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTextWindowType(override val value: UInt) : CEnum {
    GTK_TEXT_WINDOW_PRIVATE(0u),
    GTK_TEXT_WINDOW_WIDGET(1u),
    GTK_TEXT_WINDOW_TEXT(2u),
    GTK_TEXT_WINDOW_LEFT(3u),
    GTK_TEXT_WINDOW_RIGHT(4u),
    GTK_TEXT_WINDOW_TOP(5u),
    GTK_TEXT_WINDOW_BOTTOM(6u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTextWindowType.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTextWindowType
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTextViewLayer(override val value: UInt) : CEnum {
    GTK_TEXT_VIEW_LAYER_BELOW(0u),
    GTK_TEXT_VIEW_LAYER_ABOVE(1u),
    GTK_TEXT_VIEW_LAYER_BELOW_TEXT(2u),
    GTK_TEXT_VIEW_LAYER_ABOVE_TEXT(3u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTextViewLayer.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTextViewLayer
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkTextExtendSelection(override val value: UInt) : CEnum {
    GTK_TEXT_EXTEND_SELECTION_WORD(0u),
    GTK_TEXT_EXTEND_SELECTION_LINE(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkTextExtendSelection.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkTextExtendSelection
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class GtkToolbarSpaceStyle(override val value: UInt) : CEnum {
    GTK_TOOLBAR_SPACE_EMPTY(0u),
    GTK_TOOLBAR_SPACE_LINE(1u),
    ;
    
    companion object {
        
        fun byValue(value: UInt) = GtkToolbarSpaceStyle.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: GtkToolbarSpaceStyle
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

fun g_type_init(): Unit {
    return kniBridge0()
}

fun g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags): Unit {
    return kniBridge1(debug_flags)
}

fun g_type_name(type: GType): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge2(type))
}

fun g_type_qname(type: GType): GQuark {
    return kniBridge3(type)
}

fun g_type_from_name(@CCall.CString name: String?): GType {
    memScoped {
        return kniBridge4(name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_type_parent(type: GType): GType {
    return kniBridge5(type)
}

fun g_type_depth(type: GType): guint {
    return kniBridge6(type)
}

fun g_type_next_base(leaf_type: GType, root_type: GType): GType {
    return kniBridge7(leaf_type, root_type)
}

fun g_type_is_a(type: GType, is_a_type: GType): gboolean {
    return kniBridge8(type, is_a_type)
}

fun g_type_class_ref(type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge9(type))
}

fun g_type_class_peek(type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge10(type))
}

fun g_type_class_peek_static(type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge11(type))
}

fun g_type_class_unref(g_class: gpointer?): Unit {
    return kniBridge12(g_class.rawValue)
}

fun g_type_class_peek_parent(g_class: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge13(g_class.rawValue))
}

fun g_type_interface_peek(instance_class: gpointer?, iface_type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge14(instance_class.rawValue, iface_type))
}

fun g_type_interface_peek_parent(g_iface: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge15(g_iface.rawValue))
}

fun g_type_default_interface_ref(g_type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge16(g_type))
}

fun g_type_default_interface_peek(g_type: GType): gpointer? {
    return interpretCPointer<COpaque>(kniBridge17(g_type))
}

fun g_type_default_interface_unref(g_iface: gpointer?): Unit {
    return kniBridge18(g_iface.rawValue)
}

fun g_type_children(type: GType, n_children: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge19(type, n_children?.getPointer(memScope).rawValue))
    }
}

fun g_type_interfaces(type: GType, n_interfaces: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge20(type, n_interfaces?.getPointer(memScope).rawValue))
    }
}

fun g_type_set_qdata(type: GType, quark: GQuark, data: gpointer?): Unit {
    return kniBridge21(type, quark, data.rawValue)
}

fun g_type_get_qdata(type: GType, quark: GQuark): gpointer? {
    return interpretCPointer<COpaque>(kniBridge22(type, quark))
}

fun g_type_query(type: GType, query: CValuesRef<GTypeQuery>?): Unit {
    memScoped {
        return kniBridge23(type, query?.getPointer(memScope).rawValue)
    }
}

fun g_type_get_instance_count(type: GType): Int {
    return kniBridge24(type)
}

fun g_type_register_static(parent_type: GType, @CCall.CString type_name: String?, info: CValuesRef<GTypeInfo>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge25(parent_type, type_name?.cstr?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_register_static_simple(parent_type: GType, @CCall.CString type_name: String?, class_size: guint, class_init: GClassInitFunc?, instance_size: guint, instance_init: GInstanceInitFunc?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge26(parent_type, type_name?.cstr?.getPointer(memScope).rawValue, class_size, class_init.rawValue, instance_size, instance_init.rawValue, flags)
    }
}

fun g_type_register_dynamic(parent_type: GType, @CCall.CString type_name: String?, plugin: CValuesRef<GTypePlugin>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge27(parent_type, type_name?.cstr?.getPointer(memScope).rawValue, plugin?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_register_fundamental(type_id: GType, @CCall.CString type_name: String?, info: CValuesRef<GTypeInfo>?, finfo: CValuesRef<GTypeFundamentalInfo>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge28(type_id, type_name?.cstr?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, finfo?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_add_interface_static(instance_type: GType, interface_type: GType, info: CValuesRef<GInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge29(instance_type, interface_type, info?.getPointer(memScope).rawValue)
    }
}

fun g_type_add_interface_dynamic(instance_type: GType, interface_type: GType, plugin: CValuesRef<GTypePlugin>?): Unit {
    memScoped {
        return kniBridge30(instance_type, interface_type, plugin?.getPointer(memScope).rawValue)
    }
}

fun g_type_interface_add_prerequisite(interface_type: GType, prerequisite_type: GType): Unit {
    return kniBridge31(interface_type, prerequisite_type)
}

fun g_type_interface_prerequisites(interface_type: GType, n_prerequisites: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge32(interface_type, n_prerequisites?.getPointer(memScope).rawValue))
    }
}

fun g_type_class_add_private(g_class: gpointer?, private_size: gsize): Unit {
    return kniBridge33(g_class.rawValue, private_size)
}

fun g_type_add_instance_private(class_type: GType, private_size: gsize): gint {
    return kniBridge34(class_type, private_size)
}

fun g_type_instance_get_private(instance: CValuesRef<GTypeInstance>?, private_type: GType): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge35(instance?.getPointer(memScope).rawValue, private_type))
    }
}

fun g_type_class_adjust_private_offset(g_class: gpointer?, private_size_or_offset: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge36(g_class.rawValue, private_size_or_offset?.getPointer(memScope).rawValue)
    }
}

fun g_type_add_class_private(class_type: GType, private_size: gsize): Unit {
    return kniBridge37(class_type, private_size)
}

fun g_type_class_get_private(klass: CValuesRef<GTypeClass>?, private_type: GType): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge38(klass?.getPointer(memScope).rawValue, private_type))
    }
}

fun g_type_class_get_instance_private_offset(g_class: gpointer?): gint {
    return kniBridge39(g_class.rawValue)
}

fun g_type_ensure(type: GType): Unit {
    return kniBridge40(type)
}

fun g_type_get_type_registration_serial(): guint {
    return kniBridge41()
}

fun g_type_get_plugin(type: GType): CPointer<GTypePlugin>? {
    return interpretCPointer<GTypePlugin>(kniBridge42(type))
}

fun g_type_interface_get_plugin(instance_type: GType, interface_type: GType): CPointer<GTypePlugin>? {
    return interpretCPointer<GTypePlugin>(kniBridge43(instance_type, interface_type))
}

fun g_type_fundamental_next(): GType {
    return kniBridge44()
}

fun g_type_fundamental(type_id: GType): GType {
    return kniBridge45(type_id)
}

fun g_type_create_instance(type: GType): CPointer<GTypeInstance>? {
    return interpretCPointer<GTypeInstance>(kniBridge46(type))
}

fun g_type_free_instance(instance: CValuesRef<GTypeInstance>?): Unit {
    memScoped {
        return kniBridge47(instance?.getPointer(memScope).rawValue)
    }
}

fun g_type_add_class_cache_func(cache_data: gpointer?, cache_func: GTypeClassCacheFunc?): Unit {
    return kniBridge48(cache_data.rawValue, cache_func.rawValue)
}

fun g_type_remove_class_cache_func(cache_data: gpointer?, cache_func: GTypeClassCacheFunc?): Unit {
    return kniBridge49(cache_data.rawValue, cache_func.rawValue)
}

fun g_type_class_unref_uncached(g_class: gpointer?): Unit {
    return kniBridge50(g_class.rawValue)
}

fun g_type_add_interface_check(check_data: gpointer?, check_func: GTypeInterfaceCheckFunc?): Unit {
    return kniBridge51(check_data.rawValue, check_func.rawValue)
}

fun g_type_remove_interface_check(check_data: gpointer?, check_func: GTypeInterfaceCheckFunc?): Unit {
    return kniBridge52(check_data.rawValue, check_func.rawValue)
}

fun g_type_value_table_peek(type: GType): CPointer<GTypeValueTable>? {
    return interpretCPointer<GTypeValueTable>(kniBridge53(type))
}

fun g_type_check_instance(instance: CValuesRef<GTypeInstance>?): gboolean {
    memScoped {
        return kniBridge54(instance?.getPointer(memScope).rawValue)
    }
}

fun g_type_check_instance_cast(instance: CValuesRef<GTypeInstance>?, iface_type: GType): CPointer<GTypeInstance>? {
    memScoped {
        return interpretCPointer<GTypeInstance>(kniBridge55(instance?.getPointer(memScope).rawValue, iface_type))
    }
}

fun g_type_check_instance_is_a(instance: CValuesRef<GTypeInstance>?, iface_type: GType): gboolean {
    memScoped {
        return kniBridge56(instance?.getPointer(memScope).rawValue, iface_type)
    }
}

fun g_type_check_instance_is_fundamentally_a(instance: CValuesRef<GTypeInstance>?, fundamental_type: GType): gboolean {
    memScoped {
        return kniBridge57(instance?.getPointer(memScope).rawValue, fundamental_type)
    }
}

fun g_type_check_class_cast(g_class: CValuesRef<GTypeClass>?, is_a_type: GType): CPointer<GTypeClass>? {
    memScoped {
        return interpretCPointer<GTypeClass>(kniBridge58(g_class?.getPointer(memScope).rawValue, is_a_type))
    }
}

fun g_type_check_class_is_a(g_class: CValuesRef<GTypeClass>?, is_a_type: GType): gboolean {
    memScoped {
        return kniBridge59(g_class?.getPointer(memScope).rawValue, is_a_type)
    }
}

fun g_type_check_is_value_type(type: GType): gboolean {
    return kniBridge60(type)
}

fun g_type_check_value(value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge61(value?.getPointer(memScope).rawValue)
    }
}

fun g_type_check_value_holds(value: CValuesRef<GValue>?, type: GType): gboolean {
    memScoped {
        return kniBridge62(value?.getPointer(memScope).rawValue, type)
    }
}

fun g_type_test_flags(type: GType, flags: guint): gboolean {
    return kniBridge63(type, flags)
}

fun g_type_name_from_instance(instance: CValuesRef<GTypeInstance>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge64(instance?.getPointer(memScope).rawValue))
    }
}

fun g_type_name_from_class(g_class: CValuesRef<GTypeClass>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge65(g_class?.getPointer(memScope).rawValue))
    }
}

fun g_value_init(value: CValuesRef<GValue>?, g_type: GType): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge66(value?.getPointer(memScope).rawValue, g_type))
    }
}

fun g_value_copy(src_value: CValuesRef<GValue>?, dest_value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge67(src_value?.getPointer(memScope).rawValue, dest_value?.getPointer(memScope).rawValue)
    }
}

fun g_value_reset(value: CValuesRef<GValue>?): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge68(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_unset(value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge69(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_instance(value: CValuesRef<GValue>?, instance: gpointer?): Unit {
    memScoped {
        return kniBridge70(value?.getPointer(memScope).rawValue, instance.rawValue)
    }
}

fun g_value_init_from_instance(value: CValuesRef<GValue>?, instance: gpointer?): Unit {
    memScoped {
        return kniBridge71(value?.getPointer(memScope).rawValue, instance.rawValue)
    }
}

fun g_value_fits_pointer(value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge72(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_peek_pointer(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge73(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_type_compatible(src_type: GType, dest_type: GType): gboolean {
    return kniBridge74(src_type, dest_type)
}

fun g_value_type_transformable(src_type: GType, dest_type: GType): gboolean {
    return kniBridge75(src_type, dest_type)
}

fun g_value_transform(src_value: CValuesRef<GValue>?, dest_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge76(src_value?.getPointer(memScope).rawValue, dest_value?.getPointer(memScope).rawValue)
    }
}

fun g_value_register_transform_func(src_type: GType, dest_type: GType, transform_func: GValueTransform?): Unit {
    return kniBridge77(src_type, dest_type, transform_func.rawValue)
}

fun g_param_spec_ref(pspec: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge78(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_unref(pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge79(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_sink(pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge80(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_ref_sink(pspec: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge81(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_qdata(pspec: CValuesRef<GParamSpec>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge82(pspec?.getPointer(memScope).rawValue, quark))
    }
}

fun g_param_spec_set_qdata(pspec: CValuesRef<GParamSpec>?, quark: GQuark, data: gpointer?): Unit {
    memScoped {
        return kniBridge83(pspec?.getPointer(memScope).rawValue, quark, data.rawValue)
    }
}

fun g_param_spec_set_qdata_full(pspec: CValuesRef<GParamSpec>?, quark: GQuark, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge84(pspec?.getPointer(memScope).rawValue, quark, data.rawValue, destroy.rawValue)
    }
}

fun g_param_spec_steal_qdata(pspec: CValuesRef<GParamSpec>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge85(pspec?.getPointer(memScope).rawValue, quark))
    }
}

fun g_param_spec_get_redirect_target(pspec: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge86(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_value_set_default(pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge87(pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_param_value_defaults(pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge88(pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_param_value_validate(pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge89(pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_param_value_convert(pspec: CValuesRef<GParamSpec>?, src_value: CValuesRef<GValue>?, dest_value: CValuesRef<GValue>?, strict_validation: gboolean): gboolean {
    memScoped {
        return kniBridge90(pspec?.getPointer(memScope).rawValue, src_value?.getPointer(memScope).rawValue, dest_value?.getPointer(memScope).rawValue, strict_validation)
    }
}

fun g_param_values_cmp(pspec: CValuesRef<GParamSpec>?, value1: CValuesRef<GValue>?, value2: CValuesRef<GValue>?): gint {
    memScoped {
        return kniBridge91(pspec?.getPointer(memScope).rawValue, value1?.getPointer(memScope).rawValue, value2?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_get_name(pspec: CValuesRef<GParamSpec>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge92(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_nick(pspec: CValuesRef<GParamSpec>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge93(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_blurb(pspec: CValuesRef<GParamSpec>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge94(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_value_set_param(value: CValuesRef<GValue>?, param: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge95(value?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun g_value_get_param(value: CValuesRef<GValue>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge96(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_param(value: CValuesRef<GValue>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge97(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_take_param(value: CValuesRef<GValue>?, param: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge98(value?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_param_take_ownership(value: CValuesRef<GValue>?, param: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge99(value?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_get_default_value(pspec: CValuesRef<GParamSpec>?): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge100(pspec?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_get_name_quark(pspec: CValuesRef<GParamSpec>?): GQuark {
    memScoped {
        return kniBridge101(pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_type_register_static(@CCall.CString name: String?, pspec_info: CValuesRef<GParamSpecTypeInfo>?): GType {
    memScoped {
        return kniBridge102(name?.cstr?.getPointer(memScope).rawValue, pspec_info?.getPointer(memScope).rawValue)
    }
}

fun _g_param_type_register_static_constant(@CCall.CString name: String?, pspec_info: CValuesRef<GParamSpecTypeInfo>?, opt_type: GType): GType {
    memScoped {
        return kniBridge103(name?.cstr?.getPointer(memScope).rawValue, pspec_info?.getPointer(memScope).rawValue, opt_type)
    }
}

fun g_param_spec_internal(param_type: GType, @CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, flags: GParamFlags): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge104(param_type, name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_pool_new(type_prefixing: gboolean): CPointer<GParamSpecPool>? {
    return interpretCPointer<GParamSpecPool>(kniBridge105(type_prefixing))
}

fun g_param_spec_pool_insert(pool: CValuesRef<GParamSpecPool>?, pspec: CValuesRef<GParamSpec>?, owner_type: GType): Unit {
    memScoped {
        return kniBridge106(pool?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue, owner_type)
    }
}

fun g_param_spec_pool_remove(pool: CValuesRef<GParamSpecPool>?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge107(pool?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_pool_lookup(pool: CValuesRef<GParamSpecPool>?, @CCall.CString param_name: String?, owner_type: GType, walk_ancestors: gboolean): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge108(pool?.getPointer(memScope).rawValue, param_name?.cstr?.getPointer(memScope).rawValue, owner_type, walk_ancestors))
    }
}

fun g_param_spec_pool_list_owned(pool: CValuesRef<GParamSpecPool>?, owner_type: GType): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge109(pool?.getPointer(memScope).rawValue, owner_type))
    }
}

fun g_param_spec_pool_list(pool: CValuesRef<GParamSpecPool>?, owner_type: GType, n_pspecs_p: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge110(pool?.getPointer(memScope).rawValue, owner_type, n_pspecs_p?.getPointer(memScope).rawValue))
    }
}

fun g_cclosure_new(callback_func: GCallback?, user_data: gpointer?, destroy_data: GClosureNotify?): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge111(callback_func.rawValue, user_data.rawValue, destroy_data.rawValue))
}

fun g_cclosure_new_swap(callback_func: GCallback?, user_data: gpointer?, destroy_data: GClosureNotify?): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge112(callback_func.rawValue, user_data.rawValue, destroy_data.rawValue))
}

fun g_signal_type_cclosure_new(itype: GType, struct_offset: guint): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge113(itype, struct_offset))
}

fun g_closure_ref(closure: CValuesRef<GClosure>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge114(closure?.getPointer(memScope).rawValue))
    }
}

fun g_closure_sink(closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge115(closure?.getPointer(memScope).rawValue)
    }
}

fun g_closure_unref(closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge116(closure?.getPointer(memScope).rawValue)
    }
}

fun g_closure_new_simple(sizeof_closure: guint, data: gpointer?): CPointer<GClosure>? {
    return interpretCPointer<GClosure>(kniBridge117(sizeof_closure, data.rawValue))
}

fun g_closure_add_finalize_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge118(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_remove_finalize_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge119(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_add_invalidate_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge120(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_remove_invalidate_notifier(closure: CValuesRef<GClosure>?, notify_data: gpointer?, notify_func: GClosureNotify?): Unit {
    memScoped {
        return kniBridge121(closure?.getPointer(memScope).rawValue, notify_data.rawValue, notify_func.rawValue)
    }
}

fun g_closure_add_marshal_guards(closure: CValuesRef<GClosure>?, pre_marshal_data: gpointer?, pre_marshal_notify: GClosureNotify?, post_marshal_data: gpointer?, post_marshal_notify: GClosureNotify?): Unit {
    memScoped {
        return kniBridge122(closure?.getPointer(memScope).rawValue, pre_marshal_data.rawValue, pre_marshal_notify.rawValue, post_marshal_data.rawValue, post_marshal_notify.rawValue)
    }
}

fun g_closure_set_marshal(closure: CValuesRef<GClosure>?, marshal: GClosureMarshal?): Unit {
    memScoped {
        return kniBridge123(closure?.getPointer(memScope).rawValue, marshal.rawValue)
    }
}

fun g_closure_set_meta_marshal(closure: CValuesRef<GClosure>?, marshal_data: gpointer?, meta_marshal: GClosureMarshal?): Unit {
    memScoped {
        return kniBridge124(closure?.getPointer(memScope).rawValue, marshal_data.rawValue, meta_marshal.rawValue)
    }
}

fun g_closure_invalidate(closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge125(closure?.getPointer(memScope).rawValue)
    }
}

fun g_closure_invoke(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?): Unit {
    memScoped {
        return kniBridge126(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue)
    }
}

fun g_cclosure_marshal_generic(closure: CValuesRef<GClosure>?, return_gvalue: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge127(closure?.getPointer(memScope).rawValue, return_gvalue?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_generic_va(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args_list: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge128(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args_list.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__VOID(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge129(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__VOIDv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge130(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOOLEAN(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge131(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOOLEANv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge132(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__CHAR(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge133(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__CHARv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge134(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__UCHAR(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge135(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__UCHARv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge136(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__INT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge137(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__INTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge138(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge139(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge140(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__LONG(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge141(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__LONGv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge142(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__ULONG(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge143(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__ULONGv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge144(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__ENUM(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge145(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__ENUMv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge146(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLAGS(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge147(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLAGSv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge148(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLOAT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge149(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__FLOATv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge150(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__DOUBLE(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge151(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__DOUBLEv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge152(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__STRING(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge153(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__STRINGv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge154(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__PARAM(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge155(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__PARAMv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge156(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOXED(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge157(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__BOXEDv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge158(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__POINTER(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge159(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__POINTERv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge160(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__OBJECT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge161(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__OBJECTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge162(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__VARIANT(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge163(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__VARIANTv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge164(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINT_POINTER(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge165(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_VOID__UINT_POINTERv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge166(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__FLAGS(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge167(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__FLAGSv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge168(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_STRING__OBJECT_POINTER(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge169(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge170(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, n_param_values: guint, param_values: CValuesRef<GValue>?, invocation_hint: gpointer?, marshal_data: gpointer?): Unit {
    memScoped {
        return kniBridge171(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, n_param_values, param_values?.getPointer(memScope).rawValue, invocation_hint.rawValue, marshal_data.rawValue)
    }
}

fun g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: CValuesRef<GClosure>?, return_value: CValuesRef<GValue>?, instance: gpointer?, args: platform.posix.va_list?, marshal_data: gpointer?, n_params: Int, param_types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge172(closure?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue, instance.rawValue, args.rawValue, marshal_data.rawValue, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_signal_newv(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_closure: CValuesRef<GClosure>?, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, param_types: CValuesRef<GTypeVar>?): guint {
    memScoped {
        return kniBridge173(signal_name?.cstr?.getPointer(memScope).rawValue, itype, signal_flags, class_closure?.getPointer(memScope).rawValue, accumulator.rawValue, accu_data.rawValue, c_marshaller.rawValue, return_type, n_params, param_types?.getPointer(memScope).rawValue)
    }
}

fun g_signal_new_valist(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_closure: CValuesRef<GClosure>?, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, args: platform.posix.va_list?): guint {
    memScoped {
        return kniBridge174(signal_name?.cstr?.getPointer(memScope).rawValue, itype, signal_flags, class_closure?.getPointer(memScope).rawValue, accumulator.rawValue, accu_data.rawValue, c_marshaller.rawValue, return_type, n_params, args.rawValue)
    }
}

@CCall("knifunptr_libgtk30")
external fun g_signal_new(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_offset: guint, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, vararg variadicArguments: Any?): guint

@CCall("knifunptr_libgtk31")
external fun g_signal_new_class_handler(@CCall.CString signal_name: String?, itype: GType, signal_flags: GSignalFlags, class_handler: GCallback?, accumulator: GSignalAccumulator?, accu_data: gpointer?, c_marshaller: GSignalCMarshaller?, return_type: GType, n_params: guint, vararg variadicArguments: Any?): guint

fun g_signal_set_va_marshaller(signal_id: guint, instance_type: GType, va_marshaller: GSignalCVaMarshaller?): Unit {
    return kniBridge175(signal_id, instance_type, va_marshaller.rawValue)
}

fun g_signal_emitv(instance_and_params: CValuesRef<GValue>?, signal_id: guint, detail: GQuark, return_value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge176(instance_and_params?.getPointer(memScope).rawValue, signal_id, detail, return_value?.getPointer(memScope).rawValue)
    }
}

fun g_signal_emit_valist(instance: gpointer?, signal_id: guint, detail: GQuark, var_args: platform.posix.va_list?): Unit {
    return kniBridge177(instance.rawValue, signal_id, detail, var_args.rawValue)
}

@CCall("knifunptr_libgtk32")
external fun g_signal_emit(instance: gpointer?, signal_id: guint, detail: GQuark, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk33")
external fun g_signal_emit_by_name(instance: gpointer?, @CCall.CString detailed_signal: String?, vararg variadicArguments: Any?): Unit

fun g_signal_lookup(@CCall.CString name: String?, itype: GType): guint {
    memScoped {
        return kniBridge178(name?.cstr?.getPointer(memScope).rawValue, itype)
    }
}

fun g_signal_name(signal_id: guint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge179(signal_id))
}

fun g_signal_query(signal_id: guint, query: CValuesRef<GSignalQuery>?): Unit {
    memScoped {
        return kniBridge180(signal_id, query?.getPointer(memScope).rawValue)
    }
}

fun g_signal_list_ids(itype: GType, n_ids: CValuesRef<guintVar>?): CPointer<guintVar>? {
    memScoped {
        return interpretCPointer<guintVar>(kniBridge181(itype, n_ids?.getPointer(memScope).rawValue))
    }
}

fun g_signal_parse_name(@CCall.CString detailed_signal: String?, itype: GType, signal_id_p: CValuesRef<guintVar>?, detail_p: CValuesRef<GQuarkVar>?, force_detail_quark: gboolean): gboolean {
    memScoped {
        return kniBridge182(detailed_signal?.cstr?.getPointer(memScope).rawValue, itype, signal_id_p?.getPointer(memScope).rawValue, detail_p?.getPointer(memScope).rawValue, force_detail_quark)
    }
}

fun g_signal_get_invocation_hint(instance: gpointer?): CPointer<GSignalInvocationHint>? {
    return interpretCPointer<GSignalInvocationHint>(kniBridge183(instance.rawValue))
}

fun g_signal_stop_emission(instance: gpointer?, signal_id: guint, detail: GQuark): Unit {
    return kniBridge184(instance.rawValue, signal_id, detail)
}

fun g_signal_stop_emission_by_name(instance: gpointer?, @CCall.CString detailed_signal: String?): Unit {
    memScoped {
        return kniBridge185(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_signal_add_emission_hook(signal_id: guint, detail: GQuark, hook_func: GSignalEmissionHook?, hook_data: gpointer?, data_destroy: GDestroyNotify?): gulong {
    return kniBridge186(signal_id, detail, hook_func.rawValue, hook_data.rawValue, data_destroy.rawValue)
}

fun g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong): Unit {
    return kniBridge187(signal_id, hook_id)
}

fun g_signal_has_handler_pending(instance: gpointer?, signal_id: guint, detail: GQuark, may_be_blocked: gboolean): gboolean {
    return kniBridge188(instance.rawValue, signal_id, detail, may_be_blocked)
}

fun g_signal_connect_closure_by_id(instance: gpointer?, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, after: gboolean): gulong {
    memScoped {
        return kniBridge189(instance.rawValue, signal_id, detail, closure?.getPointer(memScope).rawValue, after)
    }
}

fun g_signal_connect_closure(instance: gpointer?, @CCall.CString detailed_signal: String?, closure: CValuesRef<GClosure>?, after: gboolean): gulong {
    memScoped {
        return kniBridge190(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue, after)
    }
}

fun g_signal_connect_data(instance: gpointer?, @CCall.CString detailed_signal: String?, c_handler: GCallback?, data: gpointer?, destroy_data: GClosureNotify?, connect_flags: GConnectFlags): gulong {
    memScoped {
        return kniBridge191(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue, c_handler.rawValue, data.rawValue, destroy_data.rawValue, connect_flags)
    }
}

fun g_signal_handler_block(instance: gpointer?, handler_id: gulong): Unit {
    return kniBridge192(instance.rawValue, handler_id)
}

fun g_signal_handler_unblock(instance: gpointer?, handler_id: gulong): Unit {
    return kniBridge193(instance.rawValue, handler_id)
}

fun g_signal_handler_disconnect(instance: gpointer?, handler_id: gulong): Unit {
    return kniBridge194(instance.rawValue, handler_id)
}

fun g_signal_handler_is_connected(instance: gpointer?, handler_id: gulong): gboolean {
    return kniBridge195(instance.rawValue, handler_id)
}

fun g_signal_handler_find(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): gulong {
    memScoped {
        return kniBridge196(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_signal_handlers_block_matched(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): guint {
    memScoped {
        return kniBridge197(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_signal_handlers_unblock_matched(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): guint {
    memScoped {
        return kniBridge198(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_signal_handlers_disconnect_matched(instance: gpointer?, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: CValuesRef<GClosure>?, func: gpointer?, data: gpointer?): guint {
    memScoped {
        return kniBridge199(instance.rawValue, mask, signal_id, detail, closure?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun g_clear_signal_handler(handler_id_ptr: CValuesRef<gulongVar>?, instance: gpointer?): Unit {
    memScoped {
        return kniBridge200(handler_id_ptr?.getPointer(memScope).rawValue, instance.rawValue)
    }
}

fun g_signal_override_class_closure(signal_id: guint, instance_type: GType, class_closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge201(signal_id, instance_type, class_closure?.getPointer(memScope).rawValue)
    }
}

fun g_signal_override_class_handler(@CCall.CString signal_name: String?, instance_type: GType, class_handler: GCallback?): Unit {
    memScoped {
        return kniBridge202(signal_name?.cstr?.getPointer(memScope).rawValue, instance_type, class_handler.rawValue)
    }
}

fun g_signal_chain_from_overridden(instance_and_params: CValuesRef<GValue>?, return_value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge203(instance_and_params?.getPointer(memScope).rawValue, return_value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk34")
external fun g_signal_chain_from_overridden_handler(instance: gpointer?, vararg variadicArguments: Any?): Unit

fun g_signal_accumulator_true_handled(ihint: CValuesRef<GSignalInvocationHint>?, return_accu: CValuesRef<GValue>?, handler_return: CValuesRef<GValue>?, dummy: gpointer?): gboolean {
    memScoped {
        return kniBridge204(ihint?.getPointer(memScope).rawValue, return_accu?.getPointer(memScope).rawValue, handler_return?.getPointer(memScope).rawValue, dummy.rawValue)
    }
}

fun g_signal_accumulator_first_wins(ihint: CValuesRef<GSignalInvocationHint>?, return_accu: CValuesRef<GValue>?, handler_return: CValuesRef<GValue>?, dummy: gpointer?): gboolean {
    memScoped {
        return kniBridge205(ihint?.getPointer(memScope).rawValue, return_accu?.getPointer(memScope).rawValue, handler_return?.getPointer(memScope).rawValue, dummy.rawValue)
    }
}

fun g_signal_handlers_destroy(instance: gpointer?): Unit {
    return kniBridge206(instance.rawValue)
}

fun _g_signals_destroy(itype: GType): Unit {
    return kniBridge207(itype)
}

fun g_date_get_type(): GType {
    return kniBridge208()
}

fun g_strv_get_type(): GType {
    return kniBridge209()
}

fun g_gstring_get_type(): GType {
    return kniBridge210()
}

fun g_hash_table_get_type(): GType {
    return kniBridge211()
}

fun g_array_get_type(): GType {
    return kniBridge212()
}

fun g_byte_array_get_type(): GType {
    return kniBridge213()
}

fun g_ptr_array_get_type(): GType {
    return kniBridge214()
}

fun g_bytes_get_type(): GType {
    return kniBridge215()
}

fun g_variant_type_get_gtype(): GType {
    return kniBridge216()
}

fun g_regex_get_type(): GType {
    return kniBridge217()
}

fun g_match_info_get_type(): GType {
    return kniBridge218()
}

fun g_error_get_type(): GType {
    return kniBridge219()
}

fun g_date_time_get_type(): GType {
    return kniBridge220()
}

fun g_time_zone_get_type(): GType {
    return kniBridge221()
}

fun g_io_channel_get_type(): GType {
    return kniBridge222()
}

fun g_io_condition_get_type(): GType {
    return kniBridge223()
}

fun g_variant_builder_get_type(): GType {
    return kniBridge224()
}

fun g_variant_dict_get_type(): GType {
    return kniBridge225()
}

fun g_key_file_get_type(): GType {
    return kniBridge226()
}

fun g_main_loop_get_type(): GType {
    return kniBridge227()
}

fun g_main_context_get_type(): GType {
    return kniBridge228()
}

fun g_source_get_type(): GType {
    return kniBridge229()
}

fun g_pollfd_get_type(): GType {
    return kniBridge230()
}

fun g_thread_get_type(): GType {
    return kniBridge231()
}

fun g_checksum_get_type(): GType {
    return kniBridge232()
}

fun g_markup_parse_context_get_type(): GType {
    return kniBridge233()
}

fun g_mapped_file_get_type(): GType {
    return kniBridge234()
}

fun g_option_group_get_type(): GType {
    return kniBridge235()
}

fun g_variant_get_gtype(): GType {
    return kniBridge236()
}

fun g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge237(boxed_type, src_boxed.rawValue))
}

fun g_boxed_free(boxed_type: GType, boxed: gpointer?): Unit {
    return kniBridge238(boxed_type, boxed.rawValue)
}

fun g_value_set_boxed(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge239(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_set_static_boxed(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge240(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_take_boxed(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge241(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_set_boxed_take_ownership(value: CValuesRef<GValue>?, v_boxed: gconstpointer?): Unit {
    memScoped {
        return kniBridge242(value?.getPointer(memScope).rawValue, v_boxed.rawValue)
    }
}

fun g_value_get_boxed(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge243(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_boxed(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge244(value?.getPointer(memScope).rawValue))
    }
}

fun g_boxed_type_register_static(@CCall.CString name: String?, boxed_copy: GBoxedCopyFunc?, boxed_free: GBoxedFreeFunc?): GType {
    memScoped {
        return kniBridge245(name?.cstr?.getPointer(memScope).rawValue, boxed_copy.rawValue, boxed_free.rawValue)
    }
}

fun g_closure_get_type(): GType {
    return kniBridge246()
}

fun g_value_get_type(): GType {
    return kniBridge247()
}

fun g_initially_unowned_get_type(): GType {
    return kniBridge248()
}

fun g_object_class_install_property(oclass: CValuesRef<GObjectClass>?, property_id: guint, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge249(oclass?.getPointer(memScope).rawValue, property_id, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_object_class_find_property(oclass: CValuesRef<GObjectClass>?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge250(oclass?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_class_list_properties(oclass: CValuesRef<GObjectClass>?, n_properties: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge251(oclass?.getPointer(memScope).rawValue, n_properties?.getPointer(memScope).rawValue))
    }
}

fun g_object_class_override_property(oclass: CValuesRef<GObjectClass>?, property_id: guint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge252(oclass?.getPointer(memScope).rawValue, property_id, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_object_class_install_properties(oclass: CValuesRef<GObjectClass>?, n_pspecs: guint, pspecs: CValuesRef<CPointerVar<GParamSpec>>?): Unit {
    memScoped {
        return kniBridge253(oclass?.getPointer(memScope).rawValue, n_pspecs, pspecs?.getPointer(memScope).rawValue)
    }
}

fun g_object_interface_install_property(g_iface: gpointer?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge254(g_iface.rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_object_interface_find_property(g_iface: gpointer?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge255(g_iface.rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_interface_list_properties(g_iface: gpointer?, n_properties_p: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge256(g_iface.rawValue, n_properties_p?.getPointer(memScope).rawValue))
    }
}

fun g_object_get_type(): GType {
    return kniBridge257()
}

@CCall("knifunptr_libgtk35")
external fun g_object_new(object_type: GType, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): gpointer?

fun g_object_new_with_properties(object_type: GType, n_properties: guint, names: CValuesRef<CPointerVar<ByteVar>>?, values: CValuesRef<GValue>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge258(object_type, n_properties, names?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue))
    }
}

fun g_object_newv(object_type: GType, n_parameters: guint, parameters: CValuesRef<GParameter>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge259(object_type, n_parameters, parameters?.getPointer(memScope).rawValue))
    }
}

fun g_object_new_valist(object_type: GType, @CCall.CString first_property_name: String?, var_args: platform.posix.va_list?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge260(object_type, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue))
    }
}

@CCall("knifunptr_libgtk36")
external fun g_object_set(`object`: gpointer?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk37")
external fun g_object_get(`object`: gpointer?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk38")
external fun g_object_connect(`object`: gpointer?, @CCall.CString signal_spec: String?, vararg variadicArguments: Any?): gpointer?

@CCall("knifunptr_libgtk39")
external fun g_object_disconnect(`object`: gpointer?, @CCall.CString signal_spec: String?, vararg variadicArguments: Any?): Unit

fun g_object_setv(`object`: CValuesRef<GObject>?, n_properties: guint, names: CValuesRef<CPointerVar<gcharVar>>?, values: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge261(`object`?.getPointer(memScope).rawValue, n_properties, names?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue)
    }
}

fun g_object_set_valist(`object`: CValuesRef<GObject>?, @CCall.CString first_property_name: String?, var_args: platform.posix.va_list?): Unit {
    memScoped {
        return kniBridge262(`object`?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_object_getv(`object`: CValuesRef<GObject>?, n_properties: guint, names: CValuesRef<CPointerVar<gcharVar>>?, values: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge263(`object`?.getPointer(memScope).rawValue, n_properties, names?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue)
    }
}

fun g_object_get_valist(`object`: CValuesRef<GObject>?, @CCall.CString first_property_name: String?, var_args: platform.posix.va_list?): Unit {
    memScoped {
        return kniBridge264(`object`?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_object_set_property(`object`: CValuesRef<GObject>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge265(`object`?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_object_get_property(`object`: CValuesRef<GObject>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge266(`object`?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_object_freeze_notify(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge267(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_object_notify(`object`: CValuesRef<GObject>?, @CCall.CString property_name: String?): Unit {
    memScoped {
        return kniBridge268(`object`?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_object_notify_by_pspec(`object`: CValuesRef<GObject>?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge269(`object`?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun g_object_thaw_notify(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge270(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_object_is_floating(`object`: gpointer?): gboolean {
    return kniBridge271(`object`.rawValue)
}

fun g_object_ref_sink(`object`: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge272(`object`.rawValue))
}

fun g_object_ref(`object`: gpointer?): gpointer? {
    return interpretCPointer<COpaque>(kniBridge273(`object`.rawValue))
}

fun g_object_unref(`object`: gpointer?): Unit {
    return kniBridge274(`object`.rawValue)
}

fun g_object_weak_ref(`object`: CValuesRef<GObject>?, notify: GWeakNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge275(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_weak_unref(`object`: CValuesRef<GObject>?, notify: GWeakNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge276(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_add_weak_pointer(`object`: CValuesRef<GObject>?, weak_pointer_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge277(`object`?.getPointer(memScope).rawValue, weak_pointer_location?.getPointer(memScope).rawValue)
    }
}

fun g_object_remove_weak_pointer(`object`: CValuesRef<GObject>?, weak_pointer_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge278(`object`?.getPointer(memScope).rawValue, weak_pointer_location?.getPointer(memScope).rawValue)
    }
}

fun g_object_add_toggle_ref(`object`: CValuesRef<GObject>?, notify: GToggleNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge279(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_remove_toggle_ref(`object`: CValuesRef<GObject>?, notify: GToggleNotify?, data: gpointer?): Unit {
    memScoped {
        return kniBridge280(`object`?.getPointer(memScope).rawValue, notify.rawValue, data.rawValue)
    }
}

fun g_object_get_qdata(`object`: CValuesRef<GObject>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge281(`object`?.getPointer(memScope).rawValue, quark))
    }
}

fun g_object_set_qdata(`object`: CValuesRef<GObject>?, quark: GQuark, data: gpointer?): Unit {
    memScoped {
        return kniBridge282(`object`?.getPointer(memScope).rawValue, quark, data.rawValue)
    }
}

fun g_object_set_qdata_full(`object`: CValuesRef<GObject>?, quark: GQuark, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge283(`object`?.getPointer(memScope).rawValue, quark, data.rawValue, destroy.rawValue)
    }
}

fun g_object_steal_qdata(`object`: CValuesRef<GObject>?, quark: GQuark): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge284(`object`?.getPointer(memScope).rawValue, quark))
    }
}

fun g_object_dup_qdata(`object`: CValuesRef<GObject>?, quark: GQuark, dup_func: GDuplicateFunc?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge285(`object`?.getPointer(memScope).rawValue, quark, dup_func.rawValue, user_data.rawValue))
    }
}

fun g_object_replace_qdata(`object`: CValuesRef<GObject>?, quark: GQuark, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, old_destroy: CValuesRef<GDestroyNotifyVar>?): gboolean {
    memScoped {
        return kniBridge286(`object`?.getPointer(memScope).rawValue, quark, oldval.rawValue, newval.rawValue, destroy.rawValue, old_destroy?.getPointer(memScope).rawValue)
    }
}

fun g_object_get_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge287(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_set_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, data: gpointer?): Unit {
    memScoped {
        return kniBridge288(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_object_set_data_full(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge289(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, data.rawValue, destroy.rawValue)
    }
}

fun g_object_steal_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge290(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_object_dup_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, dup_func: GDuplicateFunc?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge291(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, dup_func.rawValue, user_data.rawValue))
    }
}

fun g_object_replace_data(`object`: CValuesRef<GObject>?, @CCall.CString key: String?, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, old_destroy: CValuesRef<GDestroyNotifyVar>?): gboolean {
    memScoped {
        return kniBridge292(`object`?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, oldval.rawValue, newval.rawValue, destroy.rawValue, old_destroy?.getPointer(memScope).rawValue)
    }
}

fun g_object_watch_closure(`object`: CValuesRef<GObject>?, closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge293(`object`?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue)
    }
}

fun g_cclosure_new_object(callback_func: GCallback?, `object`: CValuesRef<GObject>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge294(callback_func.rawValue, `object`?.getPointer(memScope).rawValue))
    }
}

fun g_cclosure_new_object_swap(callback_func: GCallback?, `object`: CValuesRef<GObject>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge295(callback_func.rawValue, `object`?.getPointer(memScope).rawValue))
    }
}

fun g_closure_new_object(sizeof_closure: guint, `object`: CValuesRef<GObject>?): CPointer<GClosure>? {
    memScoped {
        return interpretCPointer<GClosure>(kniBridge296(sizeof_closure, `object`?.getPointer(memScope).rawValue))
    }
}

fun g_value_set_object(value: CValuesRef<GValue>?, v_object: gpointer?): Unit {
    memScoped {
        return kniBridge297(value?.getPointer(memScope).rawValue, v_object.rawValue)
    }
}

fun g_value_get_object(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge298(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_object(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge299(value?.getPointer(memScope).rawValue))
    }
}

fun g_signal_connect_object(instance: gpointer?, @CCall.CString detailed_signal: String?, c_handler: GCallback?, gobject: gpointer?, connect_flags: GConnectFlags): gulong {
    memScoped {
        return kniBridge300(instance.rawValue, detailed_signal?.cstr?.getPointer(memScope).rawValue, c_handler.rawValue, gobject.rawValue, connect_flags)
    }
}

fun g_object_force_floating(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge301(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_object_run_dispose(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge302(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_value_take_object(value: CValuesRef<GValue>?, v_object: gpointer?): Unit {
    memScoped {
        return kniBridge303(value?.getPointer(memScope).rawValue, v_object.rawValue)
    }
}

fun g_value_set_object_take_ownership(value: CValuesRef<GValue>?, v_object: gpointer?): Unit {
    memScoped {
        return kniBridge304(value?.getPointer(memScope).rawValue, v_object.rawValue)
    }
}

fun g_object_compat_control(what: gsize, data: gpointer?): gsize {
    return kniBridge305(what, data.rawValue)
}

fun g_clear_object(object_ptr: CValuesRef<CPointerVar<GObject>>?): Unit {
    memScoped {
        return kniBridge306(object_ptr?.getPointer(memScope).rawValue)
    }
}

fun g_set_object(object_ptr: CValuesRef<CPointerVar<GObject>>?, new_object: CValuesRef<GObject>?): gboolean {
    memScoped {
        return kniBridge307(object_ptr?.getPointer(memScope).rawValue, new_object?.getPointer(memScope).rawValue)
    }
}

fun g_assert_finalize_object(`object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge308(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_clear_weak_pointer(weak_pointer_location: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge309(weak_pointer_location?.getPointer(memScope).rawValue)
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
fun g_set_weak_pointer(weak_pointer_location: CValuesRef<gpointerVar>?, new_object: CValuesRef<GObject>?): gboolean = throw UnsupportedOperationException()

fun g_weak_ref_init(weak_ref: CValuesRef<GWeakRef>?, `object`: gpointer?): Unit {
    memScoped {
        return kniBridge311(weak_ref?.getPointer(memScope).rawValue, `object`.rawValue)
    }
}

fun g_weak_ref_clear(weak_ref: CValuesRef<GWeakRef>?): Unit {
    memScoped {
        return kniBridge312(weak_ref?.getPointer(memScope).rawValue)
    }
}

fun g_weak_ref_get(weak_ref: CValuesRef<GWeakRef>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge313(weak_ref?.getPointer(memScope).rawValue))
    }
}

fun g_weak_ref_set(weak_ref: CValuesRef<GWeakRef>?, `object`: gpointer?): Unit {
    memScoped {
        return kniBridge314(weak_ref?.getPointer(memScope).rawValue, `object`.rawValue)
    }
}

fun g_binding_flags_get_type(): GType {
    return kniBridge315()
}

fun g_binding_get_type(): GType {
    return kniBridge316()
}

fun g_binding_get_flags(binding: CValuesRef<GBinding>?): GBindingFlags {
    memScoped {
        return kniBridge317(binding?.getPointer(memScope).rawValue)
    }
}

fun g_binding_get_source(binding: CValuesRef<GBinding>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge318(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_get_target(binding: CValuesRef<GBinding>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge319(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_get_source_property(binding: CValuesRef<GBinding>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge320(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_get_target_property(binding: CValuesRef<GBinding>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge321(binding?.getPointer(memScope).rawValue))
    }
}

fun g_binding_unbind(binding: CValuesRef<GBinding>?): Unit {
    memScoped {
        return kniBridge322(binding?.getPointer(memScope).rawValue)
    }
}

fun g_object_bind_property(source: gpointer?, @CCall.CString source_property: String?, target: gpointer?, @CCall.CString target_property: String?, flags: GBindingFlags): CPointer<GBinding>? {
    memScoped {
        return interpretCPointer<GBinding>(kniBridge323(source.rawValue, source_property?.cstr?.getPointer(memScope).rawValue, target.rawValue, target_property?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_object_bind_property_full(source: gpointer?, @CCall.CString source_property: String?, target: gpointer?, @CCall.CString target_property: String?, flags: GBindingFlags, transform_to: GBindingTransformFunc?, transform_from: GBindingTransformFunc?, user_data: gpointer?, notify: GDestroyNotify?): CPointer<GBinding>? {
    memScoped {
        return interpretCPointer<GBinding>(kniBridge324(source.rawValue, source_property?.cstr?.getPointer(memScope).rawValue, target.rawValue, target_property?.cstr?.getPointer(memScope).rawValue, flags, transform_to.rawValue, transform_from.rawValue, user_data.rawValue, notify.rawValue))
    }
}

fun g_object_bind_property_with_closures(source: gpointer?, @CCall.CString source_property: String?, target: gpointer?, @CCall.CString target_property: String?, flags: GBindingFlags, transform_to: CValuesRef<GClosure>?, transform_from: CValuesRef<GClosure>?): CPointer<GBinding>? {
    memScoped {
        return interpretCPointer<GBinding>(kniBridge325(source.rawValue, source_property?.cstr?.getPointer(memScope).rawValue, target.rawValue, target_property?.cstr?.getPointer(memScope).rawValue, flags, transform_to?.getPointer(memScope).rawValue, transform_from?.getPointer(memScope).rawValue))
    }
}

fun g_enum_get_value(enum_class: CValuesRef<GEnumClass>?, value: gint): CPointer<GEnumValue>? {
    memScoped {
        return interpretCPointer<GEnumValue>(kniBridge326(enum_class?.getPointer(memScope).rawValue, value))
    }
}

fun g_enum_get_value_by_name(enum_class: CValuesRef<GEnumClass>?, @CCall.CString name: String?): CPointer<GEnumValue>? {
    memScoped {
        return interpretCPointer<GEnumValue>(kniBridge327(enum_class?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_enum_get_value_by_nick(enum_class: CValuesRef<GEnumClass>?, @CCall.CString nick: String?): CPointer<GEnumValue>? {
    memScoped {
        return interpretCPointer<GEnumValue>(kniBridge328(enum_class?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_flags_get_first_value(flags_class: CValuesRef<GFlagsClass>?, value: guint): CPointer<GFlagsValue>? {
    memScoped {
        return interpretCPointer<GFlagsValue>(kniBridge329(flags_class?.getPointer(memScope).rawValue, value))
    }
}

fun g_flags_get_value_by_name(flags_class: CValuesRef<GFlagsClass>?, @CCall.CString name: String?): CPointer<GFlagsValue>? {
    memScoped {
        return interpretCPointer<GFlagsValue>(kniBridge330(flags_class?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_flags_get_value_by_nick(flags_class: CValuesRef<GFlagsClass>?, @CCall.CString nick: String?): CPointer<GFlagsValue>? {
    memScoped {
        return interpretCPointer<GFlagsValue>(kniBridge331(flags_class?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_enum_to_string(g_enum_type: GType, value: gint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge332(g_enum_type, value))
}

fun g_flags_to_string(flags_type: GType, value: guint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge333(flags_type, value))
}

fun g_value_set_enum(value: CValuesRef<GValue>?, v_enum: gint): Unit {
    memScoped {
        return kniBridge334(value?.getPointer(memScope).rawValue, v_enum)
    }
}

fun g_value_get_enum(value: CValuesRef<GValue>?): gint {
    memScoped {
        return kniBridge335(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_flags(value: CValuesRef<GValue>?, v_flags: guint): Unit {
    memScoped {
        return kniBridge336(value?.getPointer(memScope).rawValue, v_flags)
    }
}

fun g_value_get_flags(value: CValuesRef<GValue>?): guint {
    memScoped {
        return kniBridge337(value?.getPointer(memScope).rawValue)
    }
}

fun g_enum_register_static(@CCall.CString name: String?, const_static_values: CValuesRef<GEnumValue>?): GType {
    memScoped {
        return kniBridge338(name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_flags_register_static(@CCall.CString name: String?, const_static_values: CValuesRef<GFlagsValue>?): GType {
    memScoped {
        return kniBridge339(name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_enum_complete_type_info(g_enum_type: GType, info: CValuesRef<GTypeInfo>?, const_values: CValuesRef<GEnumValue>?): Unit {
    memScoped {
        return kniBridge340(g_enum_type, info?.getPointer(memScope).rawValue, const_values?.getPointer(memScope).rawValue)
    }
}

fun g_flags_complete_type_info(g_flags_type: GType, info: CValuesRef<GTypeInfo>?, const_values: CValuesRef<GFlagsValue>?): Unit {
    memScoped {
        return kniBridge341(g_flags_type, info?.getPointer(memScope).rawValue, const_values?.getPointer(memScope).rawValue)
    }
}

fun g_param_spec_char(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gint8, maximum: gint8, default_value: gint8, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge342(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_uchar(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: guint8, maximum: guint8, default_value: guint8, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge343(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_boolean(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, default_value: gboolean, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge344(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, default_value, flags))
    }
}

fun g_param_spec_int(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gint, maximum: gint, default_value: gint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge345(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_uint(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: guint, maximum: guint, default_value: guint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge346(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_long(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: glong, maximum: glong, default_value: glong, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge347(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_ulong(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gulong, maximum: gulong, default_value: gulong, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge348(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_int64(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gint64, maximum: gint64, default_value: gint64, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge349(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_uint64(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: guint64, maximum: guint64, default_value: guint64, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge350(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_unichar(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, default_value: gunichar, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge351(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, default_value, flags))
    }
}

fun g_param_spec_enum(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, enum_type: GType, default_value: gint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge352(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, enum_type, default_value, flags))
    }
}

fun g_param_spec_flags(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, flags_type: GType, default_value: guint, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge353(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, flags_type, default_value, flags))
    }
}

fun g_param_spec_float(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gfloat, maximum: gfloat, default_value: gfloat, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge354(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_double(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, minimum: gdouble, maximum: gdouble, default_value: gdouble, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge355(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, minimum, maximum, default_value, flags))
    }
}

fun g_param_spec_string(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, @CCall.CString default_value: String?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge356(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, default_value?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_param(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, param_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge357(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, param_type, flags))
    }
}

fun g_param_spec_boxed(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, boxed_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge358(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, boxed_type, flags))
    }
}

fun g_param_spec_pointer(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge359(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_value_array(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, element_spec: CValuesRef<GParamSpec>?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge360(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, element_spec?.getPointer(memScope).rawValue, flags))
    }
}

fun g_param_spec_object(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, object_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge361(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, object_type, flags))
    }
}

fun g_param_spec_override(@CCall.CString name: String?, overridden: CValuesRef<GParamSpec>?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge362(name?.cstr?.getPointer(memScope).rawValue, overridden?.getPointer(memScope).rawValue))
    }
}

fun g_param_spec_gtype(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, is_a_type: GType, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge363(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, is_a_type, flags))
    }
}

fun g_param_spec_variant(@CCall.CString name: String?, @CCall.CString nick: String?, @CCall.CString blurb: String?, type: CValuesRef<GVariantType>?, default_value: CValuesRef<GVariant>?, flags: GParamFlags): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge364(name?.cstr?.getPointer(memScope).rawValue, nick?.cstr?.getPointer(memScope).rawValue, blurb?.cstr?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, default_value?.getPointer(memScope).rawValue, flags))
    }
}

fun g_source_set_closure(source: CValuesRef<GSource>?, closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge365(source?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue)
    }
}

fun g_source_set_dummy_callback(source: CValuesRef<GSource>?): Unit {
    memScoped {
        return kniBridge366(source?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTypeModule(_ptr: CValuesRef<GTypeModule>?): Unit {
    memScoped {
        return kniBridge367(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTypeModule(_ptr: CValuesRef<CPointerVar<GTypeModule>>?): Unit {
    memScoped {
        return kniBridge368(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTypeModule(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge369(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTypeModule(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge370(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTypeModule(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge371(_q?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_get_type(): GType {
    return kniBridge372()
}

fun g_type_module_use(module: CValuesRef<GTypeModule>?): gboolean {
    memScoped {
        return kniBridge373(module?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_unuse(module: CValuesRef<GTypeModule>?): Unit {
    memScoped {
        return kniBridge374(module?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_set_name(module: CValuesRef<GTypeModule>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge375(module?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_register_type(module: CValuesRef<GTypeModule>?, parent_type: GType, @CCall.CString type_name: String?, type_info: CValuesRef<GTypeInfo>?, flags: GTypeFlags): GType {
    memScoped {
        return kniBridge376(module?.getPointer(memScope).rawValue, parent_type, type_name?.cstr?.getPointer(memScope).rawValue, type_info?.getPointer(memScope).rawValue, flags)
    }
}

fun g_type_module_add_interface(module: CValuesRef<GTypeModule>?, instance_type: GType, interface_type: GType, interface_info: CValuesRef<GInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge377(module?.getPointer(memScope).rawValue, instance_type, interface_type, interface_info?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_register_enum(module: CValuesRef<GTypeModule>?, @CCall.CString name: String?, const_static_values: CValuesRef<GEnumValue>?): GType {
    memScoped {
        return kniBridge378(module?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_type_module_register_flags(module: CValuesRef<GTypeModule>?, @CCall.CString name: String?, const_static_values: CValuesRef<GFlagsValue>?): GType {
    memScoped {
        return kniBridge379(module?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, const_static_values?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_get_type(): GType {
    return kniBridge380()
}

fun g_type_plugin_use(plugin: CValuesRef<GTypePlugin>?): Unit {
    memScoped {
        return kniBridge381(plugin?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_unuse(plugin: CValuesRef<GTypePlugin>?): Unit {
    memScoped {
        return kniBridge382(plugin?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_complete_type_info(plugin: CValuesRef<GTypePlugin>?, g_type: GType, info: CValuesRef<GTypeInfo>?, value_table: CValuesRef<GTypeValueTable>?): Unit {
    memScoped {
        return kniBridge383(plugin?.getPointer(memScope).rawValue, g_type, info?.getPointer(memScope).rawValue, value_table?.getPointer(memScope).rawValue)
    }
}

fun g_type_plugin_complete_interface_info(plugin: CValuesRef<GTypePlugin>?, instance_type: GType, interface_type: GType, info: CValuesRef<GInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge384(plugin?.getPointer(memScope).rawValue, instance_type, interface_type, info?.getPointer(memScope).rawValue)
    }
}

fun g_value_array_get_type(): GType {
    return kniBridge385()
}

fun g_value_array_get_nth(value_array: CValuesRef<GValueArray>?, index_: guint): CPointer<GValue>? {
    memScoped {
        return interpretCPointer<GValue>(kniBridge386(value_array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_value_array_new(n_prealloced: guint): CPointer<GValueArray>? {
    return interpretCPointer<GValueArray>(kniBridge387(n_prealloced))
}

fun g_value_array_free(value_array: CValuesRef<GValueArray>?): Unit {
    memScoped {
        return kniBridge388(value_array?.getPointer(memScope).rawValue)
    }
}

fun g_value_array_copy(value_array: CValuesRef<GValueArray>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge389(value_array?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_prepend(value_array: CValuesRef<GValueArray>?, value: CValuesRef<GValue>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge390(value_array?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_append(value_array: CValuesRef<GValueArray>?, value: CValuesRef<GValue>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge391(value_array?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_insert(value_array: CValuesRef<GValueArray>?, index_: guint, value: CValuesRef<GValue>?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge392(value_array?.getPointer(memScope).rawValue, index_, value?.getPointer(memScope).rawValue))
    }
}

fun g_value_array_remove(value_array: CValuesRef<GValueArray>?, index_: guint): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge393(value_array?.getPointer(memScope).rawValue, index_))
    }
}

fun g_value_array_sort(value_array: CValuesRef<GValueArray>?, compare_func: GCompareFunc?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge394(value_array?.getPointer(memScope).rawValue, compare_func.rawValue))
    }
}

fun g_value_array_sort_with_data(value_array: CValuesRef<GValueArray>?, compare_func: GCompareDataFunc?, user_data: gpointer?): CPointer<GValueArray>? {
    memScoped {
        return interpretCPointer<GValueArray>(kniBridge395(value_array?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue))
    }
}

fun g_value_set_char(value: CValuesRef<GValue>?, v_char: gchar): Unit {
    memScoped {
        return kniBridge396(value?.getPointer(memScope).rawValue, v_char)
    }
}

fun g_value_get_char(value: CValuesRef<GValue>?): gchar {
    memScoped {
        return kniBridge397(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_schar(value: CValuesRef<GValue>?, v_char: gint8): Unit {
    memScoped {
        return kniBridge398(value?.getPointer(memScope).rawValue, v_char)
    }
}

fun g_value_get_schar(value: CValuesRef<GValue>?): gint8 {
    memScoped {
        return kniBridge399(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_uchar(value: CValuesRef<GValue>?, v_uchar: guchar): Unit {
    memScoped {
        return kniBridge400(value?.getPointer(memScope).rawValue, v_uchar)
    }
}

fun g_value_get_uchar(value: CValuesRef<GValue>?): guchar {
    memScoped {
        return kniBridge401(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_boolean(value: CValuesRef<GValue>?, v_boolean: gboolean): Unit {
    memScoped {
        return kniBridge402(value?.getPointer(memScope).rawValue, v_boolean)
    }
}

fun g_value_get_boolean(value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge403(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_int(value: CValuesRef<GValue>?, v_int: gint): Unit {
    memScoped {
        return kniBridge404(value?.getPointer(memScope).rawValue, v_int)
    }
}

fun g_value_get_int(value: CValuesRef<GValue>?): gint {
    memScoped {
        return kniBridge405(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_uint(value: CValuesRef<GValue>?, v_uint: guint): Unit {
    memScoped {
        return kniBridge406(value?.getPointer(memScope).rawValue, v_uint)
    }
}

fun g_value_get_uint(value: CValuesRef<GValue>?): guint {
    memScoped {
        return kniBridge407(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_long(value: CValuesRef<GValue>?, v_long: glong): Unit {
    memScoped {
        return kniBridge408(value?.getPointer(memScope).rawValue, v_long)
    }
}

fun g_value_get_long(value: CValuesRef<GValue>?): glong {
    memScoped {
        return kniBridge409(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_ulong(value: CValuesRef<GValue>?, v_ulong: gulong): Unit {
    memScoped {
        return kniBridge410(value?.getPointer(memScope).rawValue, v_ulong)
    }
}

fun g_value_get_ulong(value: CValuesRef<GValue>?): gulong {
    memScoped {
        return kniBridge411(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_int64(value: CValuesRef<GValue>?, v_int64: gint64): Unit {
    memScoped {
        return kniBridge412(value?.getPointer(memScope).rawValue, v_int64)
    }
}

fun g_value_get_int64(value: CValuesRef<GValue>?): gint64 {
    memScoped {
        return kniBridge413(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_uint64(value: CValuesRef<GValue>?, v_uint64: guint64): Unit {
    memScoped {
        return kniBridge414(value?.getPointer(memScope).rawValue, v_uint64)
    }
}

fun g_value_get_uint64(value: CValuesRef<GValue>?): guint64 {
    memScoped {
        return kniBridge415(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_float(value: CValuesRef<GValue>?, v_float: gfloat): Unit {
    memScoped {
        return kniBridge416(value?.getPointer(memScope).rawValue, v_float)
    }
}

fun g_value_get_float(value: CValuesRef<GValue>?): gfloat {
    memScoped {
        return kniBridge417(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_double(value: CValuesRef<GValue>?, v_double: gdouble): Unit {
    memScoped {
        return kniBridge418(value?.getPointer(memScope).rawValue, v_double)
    }
}

fun g_value_get_double(value: CValuesRef<GValue>?): gdouble {
    memScoped {
        return kniBridge419(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_string(value: CValuesRef<GValue>?, @CCall.CString v_string: String?): Unit {
    memScoped {
        return kniBridge420(value?.getPointer(memScope).rawValue, v_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_static_string(value: CValuesRef<GValue>?, @CCall.CString v_string: String?): Unit {
    memScoped {
        return kniBridge421(value?.getPointer(memScope).rawValue, v_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_value_get_string(value: CValuesRef<GValue>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge422(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_string(value: CValuesRef<GValue>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge423(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_set_pointer(value: CValuesRef<GValue>?, v_pointer: gpointer?): Unit {
    memScoped {
        return kniBridge424(value?.getPointer(memScope).rawValue, v_pointer.rawValue)
    }
}

fun g_value_get_pointer(value: CValuesRef<GValue>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge425(value?.getPointer(memScope).rawValue))
    }
}

fun g_gtype_get_type(): GType {
    return kniBridge426()
}

fun g_value_set_gtype(value: CValuesRef<GValue>?, v_gtype: GType): Unit {
    memScoped {
        return kniBridge427(value?.getPointer(memScope).rawValue, v_gtype)
    }
}

fun g_value_get_gtype(value: CValuesRef<GValue>?): GType {
    memScoped {
        return kniBridge428(value?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_variant(value: CValuesRef<GValue>?, variant: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge429(value?.getPointer(memScope).rawValue, variant?.getPointer(memScope).rawValue)
    }
}

fun g_value_take_variant(value: CValuesRef<GValue>?, variant: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge430(value?.getPointer(memScope).rawValue, variant?.getPointer(memScope).rawValue)
    }
}

fun g_value_get_variant(value: CValuesRef<GValue>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge431(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_dup_variant(value: CValuesRef<GValue>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge432(value?.getPointer(memScope).rawValue))
    }
}

fun g_pointer_type_register_static(@CCall.CString name: String?): GType {
    memScoped {
        return kniBridge433(name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_strdup_value_contents(value: CValuesRef<GValue>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge434(value?.getPointer(memScope).rawValue))
    }
}

fun g_value_take_string(value: CValuesRef<GValue>?, v_string: CValuesRef<gcharVar>?): Unit {
    memScoped {
        return kniBridge435(value?.getPointer(memScope).rawValue, v_string?.getPointer(memScope).rawValue)
    }
}

fun g_value_set_string_take_ownership(value: CValuesRef<GValue>?, v_string: CValuesRef<gcharVar>?): Unit {
    memScoped {
        return kniBridge436(value?.getPointer(memScope).rawValue, v_string?.getPointer(memScope).rawValue)
    }
}

fun g_unicode_type_get_type(): GType {
    return kniBridge437()
}

fun g_unicode_break_type_get_type(): GType {
    return kniBridge438()
}

fun g_unicode_script_get_type(): GType {
    return kniBridge439()
}

fun g_normalize_mode_get_type(): GType {
    return kniBridge440()
}

fun glib_autoptr_clear_GClosure(_ptr: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge441(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GClosure(_ptr: CValuesRef<CPointerVar<GClosure>>?): Unit {
    memScoped {
        return kniBridge442(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GClosure(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge443(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GClosure(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge444(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GClosure(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge445(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GEnumClass(_ptr: CValuesRef<GEnumClass>?): Unit {
    memScoped {
        return kniBridge446(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GEnumClass(_ptr: CValuesRef<CPointerVar<GEnumClass>>?): Unit {
    memScoped {
        return kniBridge447(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GEnumClass(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge448(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GEnumClass(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge449(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GEnumClass(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge450(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFlagsClass(_ptr: CValuesRef<GFlagsClass>?): Unit {
    memScoped {
        return kniBridge451(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFlagsClass(_ptr: CValuesRef<CPointerVar<GFlagsClass>>?): Unit {
    memScoped {
        return kniBridge452(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFlagsClass(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge453(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFlagsClass(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge454(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFlagsClass(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge455(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GObject(_ptr: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge456(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GObject(_ptr: CValuesRef<CPointerVar<GObject>>?): Unit {
    memScoped {
        return kniBridge457(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GObject(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge458(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GObject(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge459(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GObject(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge460(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInitiallyUnowned(_ptr: CValuesRef<GInitiallyUnowned>?): Unit {
    memScoped {
        return kniBridge461(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInitiallyUnowned(_ptr: CValuesRef<CPointerVar<GInitiallyUnowned>>?): Unit {
    memScoped {
        return kniBridge462(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInitiallyUnowned(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge463(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInitiallyUnowned(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge464(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInitiallyUnowned(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge465(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GParamSpec(_ptr: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge466(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GParamSpec(_ptr: CValuesRef<CPointerVar<GParamSpec>>?): Unit {
    memScoped {
        return kniBridge467(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GParamSpec(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge468(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GParamSpec(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge469(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GParamSpec(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge470(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTypeClass(_ptr: CValuesRef<GTypeClass>?): Unit {
    memScoped {
        return kniBridge471(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTypeClass(_ptr: CValuesRef<CPointerVar<GTypeClass>>?): Unit {
    memScoped {
        return kniBridge472(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTypeClass(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge473(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTypeClass(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge474(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTypeClass(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge475(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_auto_cleanup_GValue(_ptr: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge476(_ptr?.getPointer(memScope).rawValue)
    }
}

fun g_action_get_type(): GType {
    return kniBridge477()
}

fun g_action_get_name(action: CValuesRef<GAction>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge478(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_parameter_type(action: CValuesRef<GAction>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge479(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_state_type(action: CValuesRef<GAction>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge480(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_state_hint(action: CValuesRef<GAction>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge481(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_get_enabled(action: CValuesRef<GAction>?): gboolean {
    memScoped {
        return kniBridge482(action?.getPointer(memScope).rawValue)
    }
}

fun g_action_get_state(action: CValuesRef<GAction>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge483(action?.getPointer(memScope).rawValue))
    }
}

fun g_action_change_state(action: CValuesRef<GAction>?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge484(action?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_action_activate(action: CValuesRef<GAction>?, parameter: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge485(action?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue)
    }
}

fun g_action_name_is_valid(@CCall.CString action_name: String?): gboolean {
    memScoped {
        return kniBridge486(action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_parse_detailed_name(@CCall.CString detailed_name: String?, action_name: CValuesRef<CPointerVar<gcharVar>>?, target_value: CValuesRef<CPointerVar<GVariant>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge487(detailed_name?.cstr?.getPointer(memScope).rawValue, action_name?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_action_print_detailed_name(@CCall.CString action_name: String?, target_value: CValuesRef<GVariant>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge488(action_name?.cstr?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_type(): GType {
    return kniBridge489()
}

fun g_action_group_has_action(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): gboolean {
    memScoped {
        return kniBridge490(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_list_actions(action_group: CValuesRef<GActionGroup>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge491(action_group?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_parameter_type(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge492(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_state_type(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge493(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_state_hint(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge494(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_get_action_enabled(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): gboolean {
    memScoped {
        return kniBridge495(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_get_action_state(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge496(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_group_change_action_state(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge497(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_activate_action(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, parameter: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge498(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_action_added(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge499(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_action_removed(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge500(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_action_enabled_changed(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge501(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, enabled)
    }
}

fun g_action_group_action_state_changed(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, state: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge502(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue)
    }
}

fun g_action_group_query_action(action_group: CValuesRef<GActionGroup>?, @CCall.CString action_name: String?, enabled: CValuesRef<gbooleanVar>?, parameter_type: CValuesRef<CPointerVar<GVariantType>>?, state_type: CValuesRef<CPointerVar<GVariantType>>?, state_hint: CValuesRef<CPointerVar<GVariant>>?, state: CValuesRef<CPointerVar<GVariant>>?): gboolean {
    memScoped {
        return kniBridge503(action_group?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, enabled?.getPointer(memScope).rawValue, parameter_type?.getPointer(memScope).rawValue, state_type?.getPointer(memScope).rawValue, state_hint?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_export_action_group(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, action_group: CValuesRef<GActionGroup>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge504(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, action_group?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unexport_action_group(connection: CValuesRef<GDBusConnection>?, export_id: guint): Unit {
    memScoped {
        return kniBridge505(connection?.getPointer(memScope).rawValue, export_id)
    }
}

fun g_action_map_get_type(): GType {
    return kniBridge506()
}

fun g_action_map_lookup_action(action_map: CValuesRef<GActionMap>?, @CCall.CString action_name: String?): CPointer<GAction>? {
    memScoped {
        return interpretCPointer<GAction>(kniBridge507(action_map?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_action_map_add_action(action_map: CValuesRef<GActionMap>?, action: CValuesRef<GAction>?): Unit {
    memScoped {
        return kniBridge508(action_map?.getPointer(memScope).rawValue, action?.getPointer(memScope).rawValue)
    }
}

fun g_action_map_remove_action(action_map: CValuesRef<GActionMap>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge509(action_map?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_action_map_add_action_entries(action_map: CValuesRef<GActionMap>?, entries: CValuesRef<GActionEntry>?, n_entries: gint, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge510(action_map?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, n_entries, user_data.rawValue)
    }
}

fun g_app_info_get_type(): GType {
    return kniBridge511()
}

fun g_app_info_create_from_commandline(@CCall.CString commandline: String?, @CCall.CString application_name: String?, flags: GAppInfoCreateFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge512(commandline?.cstr?.getPointer(memScope).rawValue, application_name?.cstr?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_dup(appinfo: CValuesRef<GAppInfo>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge513(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_equal(appinfo1: CValuesRef<GAppInfo>?, appinfo2: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge514(appinfo1?.getPointer(memScope).rawValue, appinfo2?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_id(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge515(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_name(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge516(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_display_name(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge517(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_description(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge518(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_executable(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge519(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_commandline(appinfo: CValuesRef<GAppInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge520(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_icon(appinfo: CValuesRef<GAppInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge521(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_launch(appinfo: CValuesRef<GAppInfo>?, files: CValuesRef<GList>?, context: CValuesRef<GAppLaunchContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge522(appinfo?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_supports_uris(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge523(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_supports_files(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge524(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_launch_uris(appinfo: CValuesRef<GAppInfo>?, uris: CValuesRef<GList>?, context: CValuesRef<GAppLaunchContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge525(appinfo?.getPointer(memScope).rawValue, uris?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_launch_uris_async(appinfo: CValuesRef<GAppInfo>?, uris: CValuesRef<GList>?, context: CValuesRef<GAppLaunchContext>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge526(appinfo?.getPointer(memScope).rawValue, uris?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_app_info_launch_uris_finish(appinfo: CValuesRef<GAppInfo>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge527(appinfo?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_should_show(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge528(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_set_as_default_for_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge529(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_set_as_default_for_extension(appinfo: CValuesRef<GAppInfo>?, @CCall.CString extension: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge530(appinfo?.getPointer(memScope).rawValue, extension?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_add_supports_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge531(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_can_remove_supports_type(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge532(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_remove_supports_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge533(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_supported_types(appinfo: CValuesRef<GAppInfo>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge534(appinfo?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_can_delete(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge535(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_delete(appinfo: CValuesRef<GAppInfo>?): gboolean {
    memScoped {
        return kniBridge536(appinfo?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_set_as_last_used_for_type(appinfo: CValuesRef<GAppInfo>?, @CCall.CString content_type: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge537(appinfo?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_all(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge538())
}

fun g_app_info_get_all_for_type(@CCall.CString content_type: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge539(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_recommended_for_type(@CCall.CString content_type: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge540(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_get_fallback_for_type(@CCall.CString content_type: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge541(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_reset_type_associations(@CCall.CString content_type: String?): Unit {
    memScoped {
        return kniBridge542(content_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_get_default_for_type(@CCall.CString content_type: String?, must_support_uris: gboolean): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge543(content_type?.cstr?.getPointer(memScope).rawValue, must_support_uris))
    }
}

fun g_app_info_get_default_for_uri_scheme(@CCall.CString uri_scheme: String?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge544(uri_scheme?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_app_info_launch_default_for_uri(@CCall.CString uri: String?, context: CValuesRef<GAppLaunchContext>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge545(uri?.cstr?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_launch_default_for_uri_async(@CCall.CString uri: String?, context: CValuesRef<GAppLaunchContext>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge546(uri?.cstr?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_app_info_launch_default_for_uri_finish(result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge547(result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_app_launch_context_get_type(): GType {
    return kniBridge548()
}

fun g_app_launch_context_new(): CPointer<GAppLaunchContext>? {
    return interpretCPointer<GAppLaunchContext>(kniBridge549())
}

fun g_app_launch_context_setenv(context: CValuesRef<GAppLaunchContext>?, @CCall.CString variable: String?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge550(context?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_launch_context_unsetenv(context: CValuesRef<GAppLaunchContext>?, @CCall.CString variable: String?): Unit {
    memScoped {
        return kniBridge551(context?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_launch_context_get_environment(context: CValuesRef<GAppLaunchContext>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge552(context?.getPointer(memScope).rawValue))
    }
}

fun g_app_launch_context_get_display(context: CValuesRef<GAppLaunchContext>?, info: CValuesRef<GAppInfo>?, files: CValuesRef<GList>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge553(context?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue))
    }
}

fun g_app_launch_context_get_startup_notify_id(context: CValuesRef<GAppLaunchContext>?, info: CValuesRef<GAppInfo>?, files: CValuesRef<GList>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge554(context?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue))
    }
}

fun g_app_launch_context_launch_failed(context: CValuesRef<GAppLaunchContext>?, @CCall.CString startup_notify_id: String?): Unit {
    memScoped {
        return kniBridge555(context?.getPointer(memScope).rawValue, startup_notify_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_monitor_get_type(): GType {
    return kniBridge556()
}

fun g_app_info_monitor_get(): CPointer<GAppInfoMonitor>? {
    return interpretCPointer<GAppInfoMonitor>(kniBridge557())
}

fun g_application_get_type(): GType {
    return kniBridge558()
}

fun g_application_id_is_valid(@CCall.CString application_id: String?): gboolean {
    memScoped {
        return kniBridge559(application_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_new(@CCall.CString application_id: String?, flags: GApplicationFlags): CPointer<GApplication>? {
    memScoped {
        return interpretCPointer<GApplication>(kniBridge560(application_id?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun g_application_get_application_id(application: CValuesRef<GApplication>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge561(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_set_application_id(application: CValuesRef<GApplication>?, @CCall.CString application_id: String?): Unit {
    memScoped {
        return kniBridge562(application?.getPointer(memScope).rawValue, application_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_dbus_connection(application: CValuesRef<GApplication>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge563(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_get_dbus_object_path(application: CValuesRef<GApplication>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge564(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_get_inactivity_timeout(application: CValuesRef<GApplication>?): guint {
    memScoped {
        return kniBridge565(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_inactivity_timeout(application: CValuesRef<GApplication>?, inactivity_timeout: guint): Unit {
    memScoped {
        return kniBridge566(application?.getPointer(memScope).rawValue, inactivity_timeout)
    }
}

fun g_application_get_flags(application: CValuesRef<GApplication>?): GApplicationFlags {
    memScoped {
        return kniBridge567(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_flags(application: CValuesRef<GApplication>?, flags: GApplicationFlags): Unit {
    memScoped {
        return kniBridge568(application?.getPointer(memScope).rawValue, flags)
    }
}

fun g_application_get_resource_base_path(application: CValuesRef<GApplication>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge569(application?.getPointer(memScope).rawValue))
    }
}

fun g_application_set_resource_base_path(application: CValuesRef<GApplication>?, @CCall.CString resource_path: String?): Unit {
    memScoped {
        return kniBridge570(application?.getPointer(memScope).rawValue, resource_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_action_group(application: CValuesRef<GApplication>?, action_group: CValuesRef<GActionGroup>?): Unit {
    memScoped {
        return kniBridge571(application?.getPointer(memScope).rawValue, action_group?.getPointer(memScope).rawValue)
    }
}

fun g_application_add_main_option_entries(application: CValuesRef<GApplication>?, entries: CValuesRef<GOptionEntry>?): Unit {
    memScoped {
        return kniBridge572(application?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue)
    }
}

fun g_application_add_main_option(application: CValuesRef<GApplication>?, @CCall.CString long_name: String?, short_name: Byte, flags: GOptionFlags, arg: GOptionArg, @CCall.CString description: String?, @CCall.CString arg_description: String?): Unit {
    memScoped {
        return kniBridge573(application?.getPointer(memScope).rawValue, long_name?.cstr?.getPointer(memScope).rawValue, short_name, flags, arg.value, description?.cstr?.getPointer(memScope).rawValue, arg_description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_add_option_group(application: CValuesRef<GApplication>?, group: CValuesRef<GOptionGroup>?): Unit {
    memScoped {
        return kniBridge574(application?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_option_context_parameter_string(application: CValuesRef<GApplication>?, @CCall.CString parameter_string: String?): Unit {
    memScoped {
        return kniBridge575(application?.getPointer(memScope).rawValue, parameter_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_option_context_summary(application: CValuesRef<GApplication>?, @CCall.CString summary: String?): Unit {
    memScoped {
        return kniBridge576(application?.getPointer(memScope).rawValue, summary?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_set_option_context_description(application: CValuesRef<GApplication>?, @CCall.CString description: String?): Unit {
    memScoped {
        return kniBridge577(application?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_is_registered(application: CValuesRef<GApplication>?): gboolean {
    memScoped {
        return kniBridge578(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_is_remote(application: CValuesRef<GApplication>?): gboolean {
    memScoped {
        return kniBridge579(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_register(application: CValuesRef<GApplication>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge580(application?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_application_hold(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge581(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_release(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge582(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_activate(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge583(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_open(application: CValuesRef<GApplication>?, files: CValuesRef<CPointerVar<GFile>>?, n_files: gint, @CCall.CString hint: String?): Unit {
    memScoped {
        return kniBridge584(application?.getPointer(memScope).rawValue, files?.getPointer(memScope).rawValue, n_files, hint?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_run(application: CValuesRef<GApplication>?, argc: Int, argv: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge585(application?.getPointer(memScope).rawValue, argc, argv?.getPointer(memScope).rawValue)
    }
}

fun g_application_quit(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge586(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_default(): CPointer<GApplication>? {
    return interpretCPointer<GApplication>(kniBridge587())
}

fun g_application_set_default(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge588(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_mark_busy(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge589(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_unmark_busy(application: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge590(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_get_is_busy(application: CValuesRef<GApplication>?): gboolean {
    memScoped {
        return kniBridge591(application?.getPointer(memScope).rawValue)
    }
}

fun g_application_send_notification(application: CValuesRef<GApplication>?, @CCall.CString id: String?, notification: CValuesRef<GNotification>?): Unit {
    memScoped {
        return kniBridge592(application?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue, notification?.getPointer(memScope).rawValue)
    }
}

fun g_application_withdraw_notification(application: CValuesRef<GApplication>?, @CCall.CString id: String?): Unit {
    memScoped {
        return kniBridge593(application?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_bind_busy_property(application: CValuesRef<GApplication>?, `object`: gpointer?, @CCall.CString property: String?): Unit {
    memScoped {
        return kniBridge594(application?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_unbind_busy_property(application: CValuesRef<GApplication>?, `object`: gpointer?, @CCall.CString property: String?): Unit {
    memScoped {
        return kniBridge595(application?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_application_command_line_get_type(): GType {
    return kniBridge596()
}

fun g_application_command_line_get_arguments(cmdline: CValuesRef<GApplicationCommandLine>?, argc: CValuesRef<IntVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge597(cmdline?.getPointer(memScope).rawValue, argc?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_options_dict(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<GVariantDict>? {
    memScoped {
        return interpretCPointer<GVariantDict>(kniBridge598(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_stdin(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge599(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_environ(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge600(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_getenv(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge601(cmdline?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_cwd(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge602(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_get_is_remote(cmdline: CValuesRef<GApplicationCommandLine>?): gboolean {
    memScoped {
        return kniBridge603(cmdline?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk310")
external fun g_application_command_line_print(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk311")
external fun g_application_command_line_printerr(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_application_command_line_get_exit_status(cmdline: CValuesRef<GApplicationCommandLine>?): Int {
    memScoped {
        return kniBridge604(cmdline?.getPointer(memScope).rawValue)
    }
}

fun g_application_command_line_set_exit_status(cmdline: CValuesRef<GApplicationCommandLine>?, exit_status: Int): Unit {
    memScoped {
        return kniBridge605(cmdline?.getPointer(memScope).rawValue, exit_status)
    }
}

fun g_application_command_line_get_platform_data(cmdline: CValuesRef<GApplicationCommandLine>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge606(cmdline?.getPointer(memScope).rawValue))
    }
}

fun g_application_command_line_create_file_for_arg(cmdline: CValuesRef<GApplicationCommandLine>?, @CCall.CString arg: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge607(cmdline?.getPointer(memScope).rawValue, arg?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_initable_get_type(): GType {
    return kniBridge608()
}

fun g_initable_init(initable: CValuesRef<GInitable>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge609(initable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk312")
external fun g_initable_new(object_type: GType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): gpointer?

fun g_initable_newv(object_type: GType, n_parameters: guint, parameters: CValuesRef<GParameter>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge610(object_type, n_parameters, parameters?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_initable_new_valist(object_type: GType, @CCall.CString first_property_name: String?, var_args: platform.posix.va_list?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge611(object_type, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_async_initable_get_type(): GType {
    return kniBridge612()
}

fun g_async_initable_init_async(initable: CValuesRef<GAsyncInitable>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge613(initable?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_async_initable_init_finish(initable: CValuesRef<GAsyncInitable>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge614(initable?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk313")
external fun g_async_initable_new_async(object_type: GType, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

fun g_async_initable_newv_async(object_type: GType, n_parameters: guint, parameters: CValuesRef<GParameter>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge615(object_type, n_parameters, parameters?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_async_initable_new_valist_async(object_type: GType, @CCall.CString first_property_name: String?, var_args: platform.posix.va_list?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge616(object_type, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_async_initable_new_finish(initable: CValuesRef<GAsyncInitable>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge617(initable?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_async_result_get_type(): GType {
    return kniBridge618()
}

fun g_async_result_get_user_data(res: CValuesRef<GAsyncResult>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge619(res?.getPointer(memScope).rawValue))
    }
}

fun g_async_result_get_source_object(res: CValuesRef<GAsyncResult>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge620(res?.getPointer(memScope).rawValue))
    }
}

fun g_async_result_legacy_propagate_error(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge621(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_async_result_is_tagged(res: CValuesRef<GAsyncResult>?, source_tag: gpointer?): gboolean {
    memScoped {
        return kniBridge622(res?.getPointer(memScope).rawValue, source_tag.rawValue)
    }
}

fun g_input_stream_get_type(): GType {
    return kniBridge623()
}

fun g_input_stream_read(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge624(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_all(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, bytes_read: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge625(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, bytes_read?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_bytes(stream: CValuesRef<GInputStream>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge626(stream?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_input_stream_skip(stream: CValuesRef<GInputStream>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge627(stream?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_close(stream: CValuesRef<GInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge628(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_async(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge629(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_read_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge630(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_all_async(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge631(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_read_all_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, bytes_read: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge632(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_read?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_read_bytes_async(stream: CValuesRef<GInputStream>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge633(stream?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_read_bytes_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge634(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_input_stream_skip_async(stream: CValuesRef<GInputStream>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge635(stream?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_skip_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge636(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_close_async(stream: CValuesRef<GInputStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge637(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_input_stream_close_finish(stream: CValuesRef<GInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge638(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_is_closed(stream: CValuesRef<GInputStream>?): gboolean {
    memScoped {
        return kniBridge639(stream?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_has_pending(stream: CValuesRef<GInputStream>?): gboolean {
    memScoped {
        return kniBridge640(stream?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_set_pending(stream: CValuesRef<GInputStream>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge641(stream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_input_stream_clear_pending(stream: CValuesRef<GInputStream>?): Unit {
    memScoped {
        return kniBridge642(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_input_stream_get_type(): GType {
    return kniBridge643()
}

fun g_filter_input_stream_get_base_stream(stream: CValuesRef<GFilterInputStream>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge644(stream?.getPointer(memScope).rawValue))
    }
}

fun g_filter_input_stream_get_close_base_stream(stream: CValuesRef<GFilterInputStream>?): gboolean {
    memScoped {
        return kniBridge645(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_input_stream_set_close_base_stream(stream: CValuesRef<GFilterInputStream>?, close_base: gboolean): Unit {
    memScoped {
        return kniBridge646(stream?.getPointer(memScope).rawValue, close_base)
    }
}

fun g_buffered_input_stream_get_type(): GType {
    return kniBridge647()
}

fun g_buffered_input_stream_new(base_stream: CValuesRef<GInputStream>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge648(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_buffered_input_stream_new_sized(base_stream: CValuesRef<GInputStream>?, size: gsize): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge649(base_stream?.getPointer(memScope).rawValue, size))
    }
}

fun g_buffered_input_stream_get_buffer_size(stream: CValuesRef<GBufferedInputStream>?): gsize {
    memScoped {
        return kniBridge650(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_set_buffer_size(stream: CValuesRef<GBufferedInputStream>?, size: gsize): Unit {
    memScoped {
        return kniBridge651(stream?.getPointer(memScope).rawValue, size)
    }
}

fun g_buffered_input_stream_get_available(stream: CValuesRef<GBufferedInputStream>?): gsize {
    memScoped {
        return kniBridge652(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_peek(stream: CValuesRef<GBufferedInputStream>?, buffer: CValuesRef<*>?, offset: gsize, count: gsize): gsize {
    memScoped {
        return kniBridge653(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, offset, count)
    }
}

fun g_buffered_input_stream_peek_buffer(stream: CValuesRef<GBufferedInputStream>?, count: CValuesRef<gsizeVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge654(stream?.getPointer(memScope).rawValue, count?.getPointer(memScope).rawValue))
    }
}

fun g_buffered_input_stream_fill(stream: CValuesRef<GBufferedInputStream>?, count: gssize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge655(stream?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_fill_async(stream: CValuesRef<GBufferedInputStream>?, count: gssize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge656(stream?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_buffered_input_stream_fill_finish(stream: CValuesRef<GBufferedInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge657(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_input_stream_read_byte(stream: CValuesRef<GBufferedInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): Int {
    memScoped {
        return kniBridge658(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_get_type(): GType {
    return kniBridge659()
}

fun g_output_stream_write(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge660(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_all(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge661(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge662(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev_all(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge663(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk314")
external fun g_output_stream_printf(stream: CValuesRef<GOutputStream>?, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString format: String?, vararg variadicArguments: Any?): gboolean

fun g_output_stream_vprintf(stream: CValuesRef<GOutputStream>?, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString format: String?, args: platform.posix.va_list?): gboolean {
    memScoped {
        return kniBridge664(stream?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_output_stream_write_bytes(stream: CValuesRef<GOutputStream>?, bytes: CValuesRef<GBytes>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge665(stream?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_splice(stream: CValuesRef<GOutputStream>?, source: CValuesRef<GInputStream>?, flags: GOutputStreamSpliceFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge666(stream?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_flush(stream: CValuesRef<GOutputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge667(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_close(stream: CValuesRef<GOutputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge668(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_async(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge669(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_write_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge670(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_all_async(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge671(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_write_all_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge672(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev_async(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge673(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_writev_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge674(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_writev_all_async(stream: CValuesRef<GOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge675(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_writev_all_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge676(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_write_bytes_async(stream: CValuesRef<GOutputStream>?, bytes: CValuesRef<GBytes>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge677(stream?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_write_bytes_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge678(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_splice_async(stream: CValuesRef<GOutputStream>?, source: CValuesRef<GInputStream>?, flags: GOutputStreamSpliceFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge679(stream?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_splice_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge680(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_flush_async(stream: CValuesRef<GOutputStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge681(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_flush_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge682(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_close_async(stream: CValuesRef<GOutputStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge683(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_output_stream_close_finish(stream: CValuesRef<GOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge684(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_is_closed(stream: CValuesRef<GOutputStream>?): gboolean {
    memScoped {
        return kniBridge685(stream?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_is_closing(stream: CValuesRef<GOutputStream>?): gboolean {
    memScoped {
        return kniBridge686(stream?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_has_pending(stream: CValuesRef<GOutputStream>?): gboolean {
    memScoped {
        return kniBridge687(stream?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_set_pending(stream: CValuesRef<GOutputStream>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge688(stream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_output_stream_clear_pending(stream: CValuesRef<GOutputStream>?): Unit {
    memScoped {
        return kniBridge689(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_output_stream_get_type(): GType {
    return kniBridge690()
}

fun g_filter_output_stream_get_base_stream(stream: CValuesRef<GFilterOutputStream>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge691(stream?.getPointer(memScope).rawValue))
    }
}

fun g_filter_output_stream_get_close_base_stream(stream: CValuesRef<GFilterOutputStream>?): gboolean {
    memScoped {
        return kniBridge692(stream?.getPointer(memScope).rawValue)
    }
}

fun g_filter_output_stream_set_close_base_stream(stream: CValuesRef<GFilterOutputStream>?, close_base: gboolean): Unit {
    memScoped {
        return kniBridge693(stream?.getPointer(memScope).rawValue, close_base)
    }
}

fun g_buffered_output_stream_get_type(): GType {
    return kniBridge694()
}

fun g_buffered_output_stream_new(base_stream: CValuesRef<GOutputStream>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge695(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_buffered_output_stream_new_sized(base_stream: CValuesRef<GOutputStream>?, size: gsize): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge696(base_stream?.getPointer(memScope).rawValue, size))
    }
}

fun g_buffered_output_stream_get_buffer_size(stream: CValuesRef<GBufferedOutputStream>?): gsize {
    memScoped {
        return kniBridge697(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_output_stream_set_buffer_size(stream: CValuesRef<GBufferedOutputStream>?, size: gsize): Unit {
    memScoped {
        return kniBridge698(stream?.getPointer(memScope).rawValue, size)
    }
}

fun g_buffered_output_stream_get_auto_grow(stream: CValuesRef<GBufferedOutputStream>?): gboolean {
    memScoped {
        return kniBridge699(stream?.getPointer(memScope).rawValue)
    }
}

fun g_buffered_output_stream_set_auto_grow(stream: CValuesRef<GBufferedOutputStream>?, auto_grow: gboolean): Unit {
    memScoped {
        return kniBridge700(stream?.getPointer(memScope).rawValue, auto_grow)
    }
}

fun g_bytes_icon_get_type(): GType {
    return kniBridge701()
}

fun g_bytes_icon_new(bytes: CValuesRef<GBytes>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge702(bytes?.getPointer(memScope).rawValue))
    }
}

fun g_bytes_icon_get_bytes(icon: CValuesRef<GBytesIcon>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge703(icon?.getPointer(memScope).rawValue))
    }
}

fun g_cancellable_get_type(): GType {
    return kniBridge704()
}

fun g_cancellable_new(): CPointer<GCancellable>? {
    return interpretCPointer<GCancellable>(kniBridge705())
}

fun g_cancellable_is_cancelled(cancellable: CValuesRef<GCancellable>?): gboolean {
    memScoped {
        return kniBridge706(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_set_error_if_cancelled(cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge707(cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_get_fd(cancellable: CValuesRef<GCancellable>?): Int {
    memScoped {
        return kniBridge708(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_make_pollfd(cancellable: CValuesRef<GCancellable>?, pollfd: CValuesRef<GPollFD>?): gboolean {
    memScoped {
        return kniBridge709(cancellable?.getPointer(memScope).rawValue, pollfd?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_release_fd(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge710(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_source_new(cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge711(cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_cancellable_get_current(): CPointer<GCancellable>? {
    return interpretCPointer<GCancellable>(kniBridge712())
}

fun g_cancellable_push_current(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge713(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_pop_current(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge714(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_reset(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge715(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_cancellable_connect(cancellable: CValuesRef<GCancellable>?, callback: GCallback?, data: gpointer?, data_destroy_func: GDestroyNotify?): gulong {
    memScoped {
        return kniBridge716(cancellable?.getPointer(memScope).rawValue, callback.rawValue, data.rawValue, data_destroy_func.rawValue)
    }
}

fun g_cancellable_disconnect(cancellable: CValuesRef<GCancellable>?, handler_id: gulong): Unit {
    memScoped {
        return kniBridge717(cancellable?.getPointer(memScope).rawValue, handler_id)
    }
}

fun g_cancellable_cancel(cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge718(cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_converter_get_type(): GType {
    return kniBridge719()
}

fun g_converter_convert(converter: CValuesRef<GConverter>?, inbuf: CValuesRef<*>?, inbuf_size: gsize, outbuf: CValuesRef<*>?, outbuf_size: gsize, flags: GConverterFlags, bytes_read: CValuesRef<gsizeVar>?, bytes_written: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): GConverterResult {
    memScoped {
        return kniBridge720(converter?.getPointer(memScope).rawValue, inbuf?.getPointer(memScope).rawValue, inbuf_size, outbuf?.getPointer(memScope).rawValue, outbuf_size, flags, bytes_read?.getPointer(memScope).rawValue, bytes_written?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_converter_reset(converter: CValuesRef<GConverter>?): Unit {
    memScoped {
        return kniBridge721(converter?.getPointer(memScope).rawValue)
    }
}

fun g_charset_converter_get_type(): GType {
    return kniBridge722()
}

fun g_charset_converter_new(@CCall.CString to_charset: String?, @CCall.CString from_charset: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GCharsetConverter>? {
    memScoped {
        return interpretCPointer<GCharsetConverter>(kniBridge723(to_charset?.cstr?.getPointer(memScope).rawValue, from_charset?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_charset_converter_set_use_fallback(converter: CValuesRef<GCharsetConverter>?, use_fallback: gboolean): Unit {
    memScoped {
        return kniBridge724(converter?.getPointer(memScope).rawValue, use_fallback)
    }
}

fun g_charset_converter_get_use_fallback(converter: CValuesRef<GCharsetConverter>?): gboolean {
    memScoped {
        return kniBridge725(converter?.getPointer(memScope).rawValue)
    }
}

fun g_charset_converter_get_num_fallbacks(converter: CValuesRef<GCharsetConverter>?): guint {
    memScoped {
        return kniBridge726(converter?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_equals(@CCall.CString type1: String?, @CCall.CString type2: String?): gboolean {
    memScoped {
        return kniBridge727(type1?.cstr?.getPointer(memScope).rawValue, type2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_is_a(@CCall.CString type: String?, @CCall.CString supertype: String?): gboolean {
    memScoped {
        return kniBridge728(type?.cstr?.getPointer(memScope).rawValue, supertype?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_is_mime_type(@CCall.CString type: String?, @CCall.CString mime_type: String?): gboolean {
    memScoped {
        return kniBridge729(type?.cstr?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_is_unknown(@CCall.CString type: String?): gboolean {
    memScoped {
        return kniBridge730(type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_get_description(@CCall.CString type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge731(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_mime_type(@CCall.CString type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge732(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_icon(@CCall.CString type: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge733(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_symbolic_icon(@CCall.CString type: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge734(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_get_generic_icon_name(@CCall.CString type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge735(type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_can_be_executable(@CCall.CString type: String?): gboolean {
    memScoped {
        return kniBridge736(type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_content_type_from_mime_type(@CCall.CString mime_type: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge737(mime_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_guess(@CCall.CString filename: String?, data: CValuesRef<gucharVar>?, data_size: gsize, result_uncertain: CValuesRef<gbooleanVar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge738(filename?.cstr?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, data_size, result_uncertain?.getPointer(memScope).rawValue))
    }
}

fun g_content_type_guess_for_tree(root: CValuesRef<GFile>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge739(root?.getPointer(memScope).rawValue))
    }
}

fun g_content_types_get_registered(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge740())
}

fun g_content_type_get_mime_dirs(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge741())
}

fun g_content_type_set_mime_dirs(dirs: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge742(dirs?.getPointer(memScope).rawValue)
    }
}

fun g_converter_input_stream_get_type(): GType {
    return kniBridge743()
}

fun g_converter_input_stream_new(base_stream: CValuesRef<GInputStream>?, converter: CValuesRef<GConverter>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge744(base_stream?.getPointer(memScope).rawValue, converter?.getPointer(memScope).rawValue))
    }
}

fun g_converter_input_stream_get_converter(converter_stream: CValuesRef<GConverterInputStream>?): CPointer<GConverter>? {
    memScoped {
        return interpretCPointer<GConverter>(kniBridge745(converter_stream?.getPointer(memScope).rawValue))
    }
}

fun g_converter_output_stream_get_type(): GType {
    return kniBridge746()
}

fun g_converter_output_stream_new(base_stream: CValuesRef<GOutputStream>?, converter: CValuesRef<GConverter>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge747(base_stream?.getPointer(memScope).rawValue, converter?.getPointer(memScope).rawValue))
    }
}

fun g_converter_output_stream_get_converter(converter_stream: CValuesRef<GConverterOutputStream>?): CPointer<GConverter>? {
    memScoped {
        return interpretCPointer<GConverter>(kniBridge748(converter_stream?.getPointer(memScope).rawValue))
    }
}

fun g_credentials_get_type(): GType {
    return kniBridge749()
}

fun g_credentials_new(): CPointer<GCredentials>? {
    return interpretCPointer<GCredentials>(kniBridge750())
}

fun g_credentials_to_string(credentials: CValuesRef<GCredentials>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge751(credentials?.getPointer(memScope).rawValue))
    }
}

fun g_credentials_get_native(credentials: CValuesRef<GCredentials>?, native_type: GCredentialsType): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge752(credentials?.getPointer(memScope).rawValue, native_type.value))
    }
}

fun g_credentials_set_native(credentials: CValuesRef<GCredentials>?, native_type: GCredentialsType, native: gpointer?): Unit {
    memScoped {
        return kniBridge753(credentials?.getPointer(memScope).rawValue, native_type.value, native.rawValue)
    }
}

fun g_credentials_is_same_user(credentials: CValuesRef<GCredentials>?, other_credentials: CValuesRef<GCredentials>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge754(credentials?.getPointer(memScope).rawValue, other_credentials?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_credentials_get_unix_pid(credentials: CValuesRef<GCredentials>?, error: CValuesRef<CPointerVar<GError>>?): pid_t {
    memScoped {
        return kniBridge755(credentials?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_credentials_get_unix_user(credentials: CValuesRef<GCredentials>?, error: CValuesRef<CPointerVar<GError>>?): uid_t {
    memScoped {
        return kniBridge756(credentials?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_credentials_set_unix_user(credentials: CValuesRef<GCredentials>?, uid: uid_t, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge757(credentials?.getPointer(memScope).rawValue, uid, error?.getPointer(memScope).rawValue)
    }
}

fun g_datagram_based_get_type(): GType {
    return kniBridge758()
}

fun g_datagram_based_receive_messages(datagram_based: CValuesRef<GDatagramBased>?, messages: CValuesRef<GInputMessage>?, num_messages: guint, flags: gint, timeout: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge759(datagram_based?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, timeout, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_datagram_based_send_messages(datagram_based: CValuesRef<GDatagramBased>?, messages: CValuesRef<GOutputMessage>?, num_messages: guint, flags: gint, timeout: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge760(datagram_based?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, timeout, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_datagram_based_create_source(datagram_based: CValuesRef<GDatagramBased>?, condition: GIOCondition, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge761(datagram_based?.getPointer(memScope).rawValue, condition, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_datagram_based_condition_check(datagram_based: CValuesRef<GDatagramBased>?, condition: GIOCondition): GIOCondition {
    memScoped {
        return kniBridge762(datagram_based?.getPointer(memScope).rawValue, condition)
    }
}

fun g_datagram_based_condition_wait(datagram_based: CValuesRef<GDatagramBased>?, condition: GIOCondition, timeout: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge763(datagram_based?.getPointer(memScope).rawValue, condition, timeout, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_get_type(): GType {
    return kniBridge764()
}

fun g_data_input_stream_new(base_stream: CValuesRef<GInputStream>?): CPointer<GDataInputStream>? {
    memScoped {
        return interpretCPointer<GDataInputStream>(kniBridge765(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_set_byte_order(stream: CValuesRef<GDataInputStream>?, order: GDataStreamByteOrder): Unit {
    memScoped {
        return kniBridge766(stream?.getPointer(memScope).rawValue, order.value)
    }
}

fun g_data_input_stream_get_byte_order(stream: CValuesRef<GDataInputStream>?): GDataStreamByteOrder {
    memScoped {
        return GDataStreamByteOrder.byValue(kniBridge767(stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_set_newline_type(stream: CValuesRef<GDataInputStream>?, type: GDataStreamNewlineType): Unit {
    memScoped {
        return kniBridge768(stream?.getPointer(memScope).rawValue, type.value)
    }
}

fun g_data_input_stream_get_newline_type(stream: CValuesRef<GDataInputStream>?): GDataStreamNewlineType {
    memScoped {
        return GDataStreamNewlineType.byValue(kniBridge769(stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_byte(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guchar {
    memScoped {
        return kniBridge770(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_int16(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint16 {
    memScoped {
        return kniBridge771(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_uint16(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guint16 {
    memScoped {
        return kniBridge772(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_int32(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint32 {
    memScoped {
        return kniBridge773(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_uint32(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guint32 {
    memScoped {
        return kniBridge774(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_int64(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint64 {
    memScoped {
        return kniBridge775(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_uint64(stream: CValuesRef<GDataInputStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): guint64 {
    memScoped {
        return kniBridge776(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_input_stream_read_line(stream: CValuesRef<GDataInputStream>?, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge777(stream?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_line_utf8(stream: CValuesRef<GDataInputStream>?, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge778(stream?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_line_async(stream: CValuesRef<GDataInputStream>?, io_priority: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge779(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_data_input_stream_read_line_finish(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge780(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_line_finish_utf8(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge781(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_until(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge782(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_until_async(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, io_priority: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge783(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_data_input_stream_read_until_finish(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge784(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_upto(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, stop_chars_len: gssize, length: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge785(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, stop_chars_len, length?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_input_stream_read_upto_async(stream: CValuesRef<GDataInputStream>?, @CCall.CString stop_chars: String?, stop_chars_len: gssize, io_priority: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge786(stream?.getPointer(memScope).rawValue, stop_chars?.cstr?.getPointer(memScope).rawValue, stop_chars_len, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_data_input_stream_read_upto_finish(stream: CValuesRef<GDataInputStream>?, result: CValuesRef<GAsyncResult>?, length: CValuesRef<gsizeVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge787(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_data_output_stream_get_type(): GType {
    return kniBridge788()
}

fun g_data_output_stream_new(base_stream: CValuesRef<GOutputStream>?): CPointer<GDataOutputStream>? {
    memScoped {
        return interpretCPointer<GDataOutputStream>(kniBridge789(base_stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_output_stream_set_byte_order(stream: CValuesRef<GDataOutputStream>?, order: GDataStreamByteOrder): Unit {
    memScoped {
        return kniBridge790(stream?.getPointer(memScope).rawValue, order.value)
    }
}

fun g_data_output_stream_get_byte_order(stream: CValuesRef<GDataOutputStream>?): GDataStreamByteOrder {
    memScoped {
        return GDataStreamByteOrder.byValue(kniBridge791(stream?.getPointer(memScope).rawValue))
    }
}

fun g_data_output_stream_put_byte(stream: CValuesRef<GDataOutputStream>?, data: guchar, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge792(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_int16(stream: CValuesRef<GDataOutputStream>?, data: gint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge793(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_uint16(stream: CValuesRef<GDataOutputStream>?, data: guint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge794(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_int32(stream: CValuesRef<GDataOutputStream>?, data: gint32, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge795(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_uint32(stream: CValuesRef<GDataOutputStream>?, data: guint32, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge796(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_int64(stream: CValuesRef<GDataOutputStream>?, data: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge797(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_uint64(stream: CValuesRef<GDataOutputStream>?, data: guint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge798(stream?.getPointer(memScope).rawValue, data, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_data_output_stream_put_string(stream: CValuesRef<GDataOutputStream>?, @CCall.CString str: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge799(stream?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_address_escape_value(@CCall.CString string: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge800(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_is_address(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge801(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_supported_address(@CCall.CString string: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge802(string?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_address_get_stream(@CCall.CString address: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge803(address?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_address_get_stream_finish(res: CValuesRef<GAsyncResult>?, out_guid: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge804(res?.getPointer(memScope).rawValue, out_guid?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_address_get_stream_sync(@CCall.CString address: String?, out_guid: CValuesRef<CPointerVar<gcharVar>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge805(address?.cstr?.getPointer(memScope).rawValue, out_guid?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_address_get_for_bus_sync(bus_type: GBusType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge806(bus_type, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_auth_observer_get_type(): GType {
    return kniBridge807()
}

fun g_dbus_auth_observer_new(): CPointer<GDBusAuthObserver>? {
    return interpretCPointer<GDBusAuthObserver>(kniBridge808())
}

fun g_dbus_auth_observer_authorize_authenticated_peer(observer: CValuesRef<GDBusAuthObserver>?, stream: CValuesRef<GIOStream>?, credentials: CValuesRef<GCredentials>?): gboolean {
    memScoped {
        return kniBridge809(observer?.getPointer(memScope).rawValue, stream?.getPointer(memScope).rawValue, credentials?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_auth_observer_allow_mechanism(observer: CValuesRef<GDBusAuthObserver>?, @CCall.CString mechanism: String?): gboolean {
    memScoped {
        return kniBridge810(observer?.getPointer(memScope).rawValue, mechanism?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_type(): GType {
    return kniBridge811()
}

fun g_bus_get(bus_type: GBusType, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge812(bus_type, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_bus_get_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge813(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_bus_get_sync(bus_type: GBusType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge814(bus_type, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new(stream: CValuesRef<GIOStream>?, @CCall.CString guid: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge815(stream?.getPointer(memScope).rawValue, guid?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_new_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge816(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new_sync(stream: CValuesRef<GIOStream>?, @CCall.CString guid: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge817(stream?.getPointer(memScope).rawValue, guid?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new_for_address(@CCall.CString address: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge818(address?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_new_for_address_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge819(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_new_for_address_sync(@CCall.CString address: String?, flags: GDBusConnectionFlags, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge820(address?.cstr?.getPointer(memScope).rawValue, flags, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_start_message_processing(connection: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge821(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_is_closed(connection: CValuesRef<GDBusConnection>?): gboolean {
    memScoped {
        return kniBridge822(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_stream(connection: CValuesRef<GDBusConnection>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge823(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_guid(connection: CValuesRef<GDBusConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge824(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_unique_name(connection: CValuesRef<GDBusConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge825(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_peer_credentials(connection: CValuesRef<GDBusConnection>?): CPointer<GCredentials>? {
    memScoped {
        return interpretCPointer<GCredentials>(kniBridge826(connection?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_get_last_serial(connection: CValuesRef<GDBusConnection>?): guint32 {
    memScoped {
        return kniBridge827(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_exit_on_close(connection: CValuesRef<GDBusConnection>?): gboolean {
    memScoped {
        return kniBridge828(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_set_exit_on_close(connection: CValuesRef<GDBusConnection>?, exit_on_close: gboolean): Unit {
    memScoped {
        return kniBridge829(connection?.getPointer(memScope).rawValue, exit_on_close)
    }
}

fun g_dbus_connection_get_capabilities(connection: CValuesRef<GDBusConnection>?): GDBusCapabilityFlags {
    memScoped {
        return kniBridge830(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_get_flags(connection: CValuesRef<GDBusConnection>?): GDBusConnectionFlags {
    memScoped {
        return kniBridge831(connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_close(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge832(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_close_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge833(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_close_sync(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge834(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_flush(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge835(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_flush_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge836(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_flush_sync(connection: CValuesRef<GDBusConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge837(connection?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_send_message(connection: CValuesRef<GDBusConnection>?, message: CValuesRef<GDBusMessage>?, flags: GDBusSendMessageFlags, out_serial: CValuesRef<guint32Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge838(connection?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, flags, out_serial?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_send_message_with_reply(connection: CValuesRef<GDBusConnection>?, message: CValuesRef<GDBusMessage>?, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: CValuesRef<guint32Var>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge839(connection?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, flags, timeout_msec, out_serial?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_send_message_with_reply_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge840(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_send_message_with_reply_sync(connection: CValuesRef<GDBusConnection>?, message: CValuesRef<GDBusMessage>?, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: CValuesRef<guint32Var>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge841(connection?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, flags, timeout_msec, out_serial?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_emit_signal(connection: CValuesRef<GDBusConnection>?, @CCall.CString destination_bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString signal_name: String?, parameters: CValuesRef<GVariant>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge842(connection?.getPointer(memScope).rawValue, destination_bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, signal_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_call(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge843(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_call_finish(connection: CValuesRef<GDBusConnection>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge844(connection?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_call_sync(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge845(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_call_with_unix_fd_list(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge846(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_connection_call_with_unix_fd_list_finish(connection: CValuesRef<GDBusConnection>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge847(connection?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_call_with_unix_fd_list_sync(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, reply_type: CValuesRef<GVariantType>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge848(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, reply_type?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_connection_register_object(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, interface_info: CValuesRef<GDBusInterfaceInfo>?, vtable: CValuesRef<GDBusInterfaceVTable>?, user_data: gpointer?, user_data_free_func: GDestroyNotify?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge849(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_info?.getPointer(memScope).rawValue, vtable?.getPointer(memScope).rawValue, user_data.rawValue, user_data_free_func.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_register_object_with_closures(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, interface_info: CValuesRef<GDBusInterfaceInfo>?, method_call_closure: CValuesRef<GClosure>?, get_property_closure: CValuesRef<GClosure>?, set_property_closure: CValuesRef<GClosure>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge850(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_info?.getPointer(memScope).rawValue, method_call_closure?.getPointer(memScope).rawValue, get_property_closure?.getPointer(memScope).rawValue, set_property_closure?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unregister_object(connection: CValuesRef<GDBusConnection>?, registration_id: guint): gboolean {
    memScoped {
        return kniBridge851(connection?.getPointer(memScope).rawValue, registration_id)
    }
}

fun g_dbus_connection_register_subtree(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, vtable: CValuesRef<GDBusSubtreeVTable>?, flags: GDBusSubtreeFlags, user_data: gpointer?, user_data_free_func: GDestroyNotify?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge852(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, vtable?.getPointer(memScope).rawValue, flags, user_data.rawValue, user_data_free_func.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unregister_subtree(connection: CValuesRef<GDBusConnection>?, registration_id: guint): gboolean {
    memScoped {
        return kniBridge853(connection?.getPointer(memScope).rawValue, registration_id)
    }
}

fun g_dbus_connection_signal_subscribe(connection: CValuesRef<GDBusConnection>?, @CCall.CString sender: String?, @CCall.CString interface_name: String?, @CCall.CString member: String?, @CCall.CString object_path: String?, @CCall.CString arg0: String?, flags: GDBusSignalFlags, callback: GDBusSignalCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge854(connection?.getPointer(memScope).rawValue, sender?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, member?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, arg0?.cstr?.getPointer(memScope).rawValue, flags, callback.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_dbus_connection_signal_unsubscribe(connection: CValuesRef<GDBusConnection>?, subscription_id: guint): Unit {
    memScoped {
        return kniBridge855(connection?.getPointer(memScope).rawValue, subscription_id)
    }
}

fun g_dbus_connection_add_filter(connection: CValuesRef<GDBusConnection>?, filter_function: GDBusMessageFilterFunction?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge856(connection?.getPointer(memScope).rawValue, filter_function.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_dbus_connection_remove_filter(connection: CValuesRef<GDBusConnection>?, filter_id: guint): Unit {
    memScoped {
        return kniBridge857(connection?.getPointer(memScope).rawValue, filter_id)
    }
}

fun g_dbus_error_quark(): GQuark {
    return kniBridge858()
}

fun g_dbus_error_is_remote_error(error: CValuesRef<GError>?): gboolean {
    memScoped {
        return kniBridge859(error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_get_remote_error(error: CValuesRef<GError>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge860(error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_error_strip_remote_error(error: CValuesRef<GError>?): gboolean {
    memScoped {
        return kniBridge861(error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_register_error(error_domain: GQuark, error_code: gint, @CCall.CString dbus_error_name: String?): gboolean {
    memScoped {
        return kniBridge862(error_domain, error_code, dbus_error_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_unregister_error(error_domain: GQuark, error_code: gint, @CCall.CString dbus_error_name: String?): gboolean {
    memScoped {
        return kniBridge863(error_domain, error_code, dbus_error_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_error_register_error_domain(@CCall.CString error_domain_quark_name: String?, quark_volatile: CValuesRef<gsizeVar>?, entries: CValuesRef<GDBusErrorEntry>?, num_entries: guint): Unit {
    memScoped {
        return kniBridge864(error_domain_quark_name?.cstr?.getPointer(memScope).rawValue, quark_volatile?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, num_entries)
    }
}

fun g_dbus_error_new_for_dbus_error(@CCall.CString dbus_error_name: String?, @CCall.CString dbus_error_message: String?): CPointer<GError>? {
    memScoped {
        return interpretCPointer<GError>(kniBridge865(dbus_error_name?.cstr?.getPointer(memScope).rawValue, dbus_error_message?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk315")
external fun g_dbus_error_set_dbus_error(error: CValuesRef<CPointerVar<GError>>?, @CCall.CString dbus_error_name: String?, @CCall.CString dbus_error_message: String?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_dbus_error_set_dbus_error_valist(error: CValuesRef<CPointerVar<GError>>?, @CCall.CString dbus_error_name: String?, @CCall.CString dbus_error_message: String?, @CCall.CString format: String?, var_args: platform.posix.va_list?): Unit {
    memScoped {
        return kniBridge866(error?.getPointer(memScope).rawValue, dbus_error_name?.cstr?.getPointer(memScope).rawValue, dbus_error_message?.cstr?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_dbus_error_encode_gerror(error: CValuesRef<GError>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge867(error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_annotation_info_lookup(annotations: CValuesRef<CPointerVar<GDBusAnnotationInfo>>?, @CCall.CString name: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge868(annotations?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_lookup_method(info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?): CPointer<GDBusMethodInfo>? {
    memScoped {
        return interpretCPointer<GDBusMethodInfo>(kniBridge869(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_lookup_signal(info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?): CPointer<GDBusSignalInfo>? {
    memScoped {
        return interpretCPointer<GDBusSignalInfo>(kniBridge870(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_lookup_property(info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?): CPointer<GDBusPropertyInfo>? {
    memScoped {
        return interpretCPointer<GDBusPropertyInfo>(kniBridge871(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_cache_build(info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge872(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_info_cache_release(info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge873(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_info_generate_xml(info: CValuesRef<GDBusInterfaceInfo>?, indent: guint, string_builder: CValuesRef<GString>?): Unit {
    memScoped {
        return kniBridge874(info?.getPointer(memScope).rawValue, indent, string_builder?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_node_info_new_for_xml(@CCall.CString xml_data: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusNodeInfo>? {
    memScoped {
        return interpretCPointer<GDBusNodeInfo>(kniBridge875(xml_data?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_node_info_lookup_interface(info: CValuesRef<GDBusNodeInfo>?, @CCall.CString name: String?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge876(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_node_info_generate_xml(info: CValuesRef<GDBusNodeInfo>?, indent: guint, string_builder: CValuesRef<GString>?): Unit {
    memScoped {
        return kniBridge877(info?.getPointer(memScope).rawValue, indent, string_builder?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_node_info_ref(info: CValuesRef<GDBusNodeInfo>?): CPointer<GDBusNodeInfo>? {
    memScoped {
        return interpretCPointer<GDBusNodeInfo>(kniBridge878(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_info_ref(info: CValuesRef<GDBusInterfaceInfo>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge879(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_info_ref(info: CValuesRef<GDBusMethodInfo>?): CPointer<GDBusMethodInfo>? {
    memScoped {
        return interpretCPointer<GDBusMethodInfo>(kniBridge880(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_signal_info_ref(info: CValuesRef<GDBusSignalInfo>?): CPointer<GDBusSignalInfo>? {
    memScoped {
        return interpretCPointer<GDBusSignalInfo>(kniBridge881(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_property_info_ref(info: CValuesRef<GDBusPropertyInfo>?): CPointer<GDBusPropertyInfo>? {
    memScoped {
        return interpretCPointer<GDBusPropertyInfo>(kniBridge882(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_arg_info_ref(info: CValuesRef<GDBusArgInfo>?): CPointer<GDBusArgInfo>? {
    memScoped {
        return interpretCPointer<GDBusArgInfo>(kniBridge883(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_annotation_info_ref(info: CValuesRef<GDBusAnnotationInfo>?): CPointer<GDBusAnnotationInfo>? {
    memScoped {
        return interpretCPointer<GDBusAnnotationInfo>(kniBridge884(info?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_node_info_unref(info: CValuesRef<GDBusNodeInfo>?): Unit {
    memScoped {
        return kniBridge885(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_info_unref(info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge886(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_info_unref(info: CValuesRef<GDBusMethodInfo>?): Unit {
    memScoped {
        return kniBridge887(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_signal_info_unref(info: CValuesRef<GDBusSignalInfo>?): Unit {
    memScoped {
        return kniBridge888(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_property_info_unref(info: CValuesRef<GDBusPropertyInfo>?): Unit {
    memScoped {
        return kniBridge889(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_arg_info_unref(info: CValuesRef<GDBusArgInfo>?): Unit {
    memScoped {
        return kniBridge890(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_annotation_info_unref(info: CValuesRef<GDBusAnnotationInfo>?): Unit {
    memScoped {
        return kniBridge891(info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_node_info_get_type(): GType {
    return kniBridge892()
}

fun g_dbus_interface_info_get_type(): GType {
    return kniBridge893()
}

fun g_dbus_method_info_get_type(): GType {
    return kniBridge894()
}

fun g_dbus_signal_info_get_type(): GType {
    return kniBridge895()
}

fun g_dbus_property_info_get_type(): GType {
    return kniBridge896()
}

fun g_dbus_arg_info_get_type(): GType {
    return kniBridge897()
}

fun g_dbus_annotation_info_get_type(): GType {
    return kniBridge898()
}

fun g_dbus_message_get_type(): GType {
    return kniBridge899()
}

fun g_dbus_message_new(): CPointer<GDBusMessage>? {
    return interpretCPointer<GDBusMessage>(kniBridge900())
}

fun g_dbus_message_new_signal(@CCall.CString path: String?, @CCall.CString interface_: String?, @CCall.CString signal: String?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge901(path?.cstr?.getPointer(memScope).rawValue, interface_?.cstr?.getPointer(memScope).rawValue, signal?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_new_method_call(@CCall.CString name: String?, @CCall.CString path: String?, @CCall.CString interface_: String?, @CCall.CString method: String?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge902(name?.cstr?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, interface_?.cstr?.getPointer(memScope).rawValue, method?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_new_method_reply(method_call_message: CValuesRef<GDBusMessage>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge903(method_call_message?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk316")
external fun g_dbus_message_new_method_error(method_call_message: CValuesRef<GDBusMessage>?, @CCall.CString error_name: String?, @CCall.CString error_message_format: String?, vararg variadicArguments: Any?): CPointer<GDBusMessage>?

fun g_dbus_message_new_method_error_valist(method_call_message: CValuesRef<GDBusMessage>?, @CCall.CString error_name: String?, @CCall.CString error_message_format: String?, var_args: platform.posix.va_list?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge904(method_call_message?.getPointer(memScope).rawValue, error_name?.cstr?.getPointer(memScope).rawValue, error_message_format?.cstr?.getPointer(memScope).rawValue, var_args.rawValue))
    }
}

fun g_dbus_message_new_method_error_literal(method_call_message: CValuesRef<GDBusMessage>?, @CCall.CString error_name: String?, @CCall.CString error_message: String?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge905(method_call_message?.getPointer(memScope).rawValue, error_name?.cstr?.getPointer(memScope).rawValue, error_message?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_print(message: CValuesRef<GDBusMessage>?, indent: guint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge906(message?.getPointer(memScope).rawValue, indent))
    }
}

fun g_dbus_message_get_locked(message: CValuesRef<GDBusMessage>?): gboolean {
    memScoped {
        return kniBridge907(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_lock(message: CValuesRef<GDBusMessage>?): Unit {
    memScoped {
        return kniBridge908(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_copy(message: CValuesRef<GDBusMessage>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge909(message?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_get_byte_order(message: CValuesRef<GDBusMessage>?): GDBusMessageByteOrder {
    memScoped {
        return kniBridge910(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_byte_order(message: CValuesRef<GDBusMessage>?, byte_order: GDBusMessageByteOrder): Unit {
    memScoped {
        return kniBridge911(message?.getPointer(memScope).rawValue, byte_order)
    }
}

fun g_dbus_message_get_message_type(message: CValuesRef<GDBusMessage>?): GDBusMessageType {
    memScoped {
        return GDBusMessageType.byValue(kniBridge912(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_message_type(message: CValuesRef<GDBusMessage>?, type: GDBusMessageType): Unit {
    memScoped {
        return kniBridge913(message?.getPointer(memScope).rawValue, type.value)
    }
}

fun g_dbus_message_get_flags(message: CValuesRef<GDBusMessage>?): GDBusMessageFlags {
    memScoped {
        return kniBridge914(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_flags(message: CValuesRef<GDBusMessage>?, flags: GDBusMessageFlags): Unit {
    memScoped {
        return kniBridge915(message?.getPointer(memScope).rawValue, flags)
    }
}

fun g_dbus_message_get_serial(message: CValuesRef<GDBusMessage>?): guint32 {
    memScoped {
        return kniBridge916(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_serial(message: CValuesRef<GDBusMessage>?, serial: guint32): Unit {
    memScoped {
        return kniBridge917(message?.getPointer(memScope).rawValue, serial)
    }
}

fun g_dbus_message_get_header(message: CValuesRef<GDBusMessage>?, header_field: GDBusMessageHeaderField): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge918(message?.getPointer(memScope).rawValue, header_field.value))
    }
}

fun g_dbus_message_set_header(message: CValuesRef<GDBusMessage>?, header_field: GDBusMessageHeaderField, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge919(message?.getPointer(memScope).rawValue, header_field.value, value?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_header_fields(message: CValuesRef<GDBusMessage>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge920(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_get_body(message: CValuesRef<GDBusMessage>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge921(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_body(message: CValuesRef<GDBusMessage>?, body: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge922(message?.getPointer(memScope).rawValue, body?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_unix_fd_list(message: CValuesRef<GDBusMessage>?): CPointer<GUnixFDList>? {
    memScoped {
        return interpretCPointer<GUnixFDList>(kniBridge923(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_unix_fd_list(message: CValuesRef<GDBusMessage>?, fd_list: CValuesRef<GUnixFDList>?): Unit {
    memScoped {
        return kniBridge924(message?.getPointer(memScope).rawValue, fd_list?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_reply_serial(message: CValuesRef<GDBusMessage>?): guint32 {
    memScoped {
        return kniBridge925(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_reply_serial(message: CValuesRef<GDBusMessage>?, value: guint32): Unit {
    memScoped {
        return kniBridge926(message?.getPointer(memScope).rawValue, value)
    }
}

fun g_dbus_message_get_interface(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge927(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_interface(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge928(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_member(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge929(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_member(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge930(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_path(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge931(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_path(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge932(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_sender(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge933(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_sender(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge934(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_destination(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge935(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_destination(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge936(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_error_name(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge937(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_error_name(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge938(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_signature(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge939(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_set_signature(message: CValuesRef<GDBusMessage>?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge940(message?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_get_num_unix_fds(message: CValuesRef<GDBusMessage>?): guint32 {
    memScoped {
        return kniBridge941(message?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_set_num_unix_fds(message: CValuesRef<GDBusMessage>?, value: guint32): Unit {
    memScoped {
        return kniBridge942(message?.getPointer(memScope).rawValue, value)
    }
}

fun g_dbus_message_get_arg0(message: CValuesRef<GDBusMessage>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge943(message?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_new_from_blob(blob: CValuesRef<gucharVar>?, blob_len: gsize, capabilities: GDBusCapabilityFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge944(blob?.getPointer(memScope).rawValue, blob_len, capabilities, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_bytes_needed(blob: CValuesRef<gucharVar>?, blob_len: gsize, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge945(blob?.getPointer(memScope).rawValue, blob_len, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_message_to_blob(message: CValuesRef<GDBusMessage>?, out_size: CValuesRef<gsizeVar>?, capabilities: GDBusCapabilityFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge946(message?.getPointer(memScope).rawValue, out_size?.getPointer(memScope).rawValue, capabilities, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_message_to_gerror(message: CValuesRef<GDBusMessage>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge947(message?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_get_type(): GType {
    return kniBridge948()
}

fun g_dbus_method_invocation_get_sender(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge949(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_object_path(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge950(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_interface_name(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge951(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_method_name(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge952(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_method_info(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusMethodInfo>? {
    memScoped {
        return interpretCPointer<GDBusMethodInfo>(kniBridge953(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_property_info(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusPropertyInfo>? {
    memScoped {
        return interpretCPointer<GDBusPropertyInfo>(kniBridge954(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_connection(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge955(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_message(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GDBusMessage>? {
    memScoped {
        return interpretCPointer<GDBusMessage>(kniBridge956(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_parameters(invocation: CValuesRef<GDBusMethodInvocation>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge957(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_get_user_data(invocation: CValuesRef<GDBusMethodInvocation>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge958(invocation?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_method_invocation_return_value(invocation: CValuesRef<GDBusMethodInvocation>?, parameters: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge959(invocation?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_return_value_with_unix_fd_list(invocation: CValuesRef<GDBusMethodInvocation>?, parameters: CValuesRef<GVariant>?, fd_list: CValuesRef<GUnixFDList>?): Unit {
    memScoped {
        return kniBridge960(invocation?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, fd_list?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk317")
external fun g_dbus_method_invocation_return_error(invocation: CValuesRef<GDBusMethodInvocation>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_dbus_method_invocation_return_error_valist(invocation: CValuesRef<GDBusMethodInvocation>?, domain: GQuark, code: gint, @CCall.CString format: String?, var_args: platform.posix.va_list?): Unit {
    memScoped {
        return kniBridge961(invocation?.getPointer(memScope).rawValue, domain, code, format?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun g_dbus_method_invocation_return_error_literal(invocation: CValuesRef<GDBusMethodInvocation>?, domain: GQuark, code: gint, @CCall.CString message: String?): Unit {
    memScoped {
        return kniBridge962(invocation?.getPointer(memScope).rawValue, domain, code, message?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_return_gerror(invocation: CValuesRef<GDBusMethodInvocation>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge963(invocation?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_take_error(invocation: CValuesRef<GDBusMethodInvocation>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge964(invocation?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_method_invocation_return_dbus_error(invocation: CValuesRef<GDBusMethodInvocation>?, @CCall.CString error_name: String?, @CCall.CString error_message: String?): Unit {
    memScoped {
        return kniBridge965(invocation?.getPointer(memScope).rawValue, error_name?.cstr?.getPointer(memScope).rawValue, error_message?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_bus_own_name(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameOwnerFlags, bus_acquired_handler: GBusAcquiredCallback?, name_acquired_handler: GBusNameAcquiredCallback?, name_lost_handler: GBusNameLostCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge966(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, bus_acquired_handler.rawValue, name_acquired_handler.rawValue, name_lost_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_own_name_on_connection(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameOwnerFlags, name_acquired_handler: GBusNameAcquiredCallback?, name_lost_handler: GBusNameLostCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge967(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_acquired_handler.rawValue, name_lost_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_own_name_with_closures(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameOwnerFlags, bus_acquired_closure: CValuesRef<GClosure>?, name_acquired_closure: CValuesRef<GClosure>?, name_lost_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge968(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, bus_acquired_closure?.getPointer(memScope).rawValue, name_acquired_closure?.getPointer(memScope).rawValue, name_lost_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_own_name_on_connection_with_closures(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameOwnerFlags, name_acquired_closure: CValuesRef<GClosure>?, name_lost_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge969(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_acquired_closure?.getPointer(memScope).rawValue, name_lost_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_unown_name(owner_id: guint): Unit {
    return kniBridge970(owner_id)
}

fun g_bus_watch_name(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback?, name_vanished_handler: GBusNameVanishedCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge971(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_handler.rawValue, name_vanished_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_watch_name_on_connection(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback?, name_vanished_handler: GBusNameVanishedCallback?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): guint {
    memScoped {
        return kniBridge972(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_handler.rawValue, name_vanished_handler.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun g_bus_watch_name_with_closures(bus_type: GBusType, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_closure: CValuesRef<GClosure>?, name_vanished_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge973(bus_type, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_closure?.getPointer(memScope).rawValue, name_vanished_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_watch_name_on_connection_with_closures(connection: CValuesRef<GDBusConnection>?, @CCall.CString name: String?, flags: GBusNameWatcherFlags, name_appeared_closure: CValuesRef<GClosure>?, name_vanished_closure: CValuesRef<GClosure>?): guint {
    memScoped {
        return kniBridge974(connection?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, flags, name_appeared_closure?.getPointer(memScope).rawValue, name_vanished_closure?.getPointer(memScope).rawValue)
    }
}

fun g_bus_unwatch_name(watcher_id: guint): Unit {
    return kniBridge975(watcher_id)
}

fun g_dbus_proxy_get_type(): GType {
    return kniBridge976()
}

fun g_dbus_proxy_new(connection: CValuesRef<GDBusConnection>?, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge977(connection?.getPointer(memScope).rawValue, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_new_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge978(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_new_sync(connection: CValuesRef<GDBusConnection>?, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge979(connection?.getPointer(memScope).rawValue, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_new_for_bus(bus_type: GBusType, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge980(bus_type, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_new_for_bus_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge981(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_new_for_bus_sync(bus_type: GBusType, flags: GDBusProxyFlags, info: CValuesRef<GDBusInterfaceInfo>?, @CCall.CString name: String?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusProxy>? {
    memScoped {
        return interpretCPointer<GDBusProxy>(kniBridge982(bus_type, flags, info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_connection(proxy: CValuesRef<GDBusProxy>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge983(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_flags(proxy: CValuesRef<GDBusProxy>?): GDBusProxyFlags {
    memScoped {
        return kniBridge984(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_get_name(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge985(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_name_owner(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge986(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_object_path(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge987(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_interface_name(proxy: CValuesRef<GDBusProxy>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge988(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_get_default_timeout(proxy: CValuesRef<GDBusProxy>?): gint {
    memScoped {
        return kniBridge989(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_set_default_timeout(proxy: CValuesRef<GDBusProxy>?, timeout_msec: gint): Unit {
    memScoped {
        return kniBridge990(proxy?.getPointer(memScope).rawValue, timeout_msec)
    }
}

fun g_dbus_proxy_get_interface_info(proxy: CValuesRef<GDBusProxy>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge991(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_set_interface_info(proxy: CValuesRef<GDBusProxy>?, info: CValuesRef<GDBusInterfaceInfo>?): Unit {
    memScoped {
        return kniBridge992(proxy?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_get_cached_property(proxy: CValuesRef<GDBusProxy>?, @CCall.CString property_name: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge993(proxy?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_set_cached_property(proxy: CValuesRef<GDBusProxy>?, @CCall.CString property_name: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge994(proxy?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_proxy_get_cached_property_names(proxy: CValuesRef<GDBusProxy>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge995(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge996(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_call_finish(proxy: CValuesRef<GDBusProxy>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge997(proxy?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call_sync(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge998(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call_with_unix_fd_list(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge999(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_proxy_call_with_unix_fd_list_finish(proxy: CValuesRef<GDBusProxy>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1000(proxy?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_proxy_call_with_unix_fd_list_sync(proxy: CValuesRef<GDBusProxy>?, @CCall.CString method_name: String?, parameters: CValuesRef<GVariant>?, flags: GDBusCallFlags, timeout_msec: gint, fd_list: CValuesRef<GUnixFDList>?, out_fd_list: CValuesRef<CPointerVar<GUnixFDList>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1001(proxy?.getPointer(memScope).rawValue, method_name?.cstr?.getPointer(memScope).rawValue, parameters?.getPointer(memScope).rawValue, flags, timeout_msec, fd_list?.getPointer(memScope).rawValue, out_fd_list?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_type(): GType {
    return kniBridge1002()
}

fun g_dbus_server_new_sync(@CCall.CString address: String?, flags: GDBusServerFlags, @CCall.CString guid: String?, observer: CValuesRef<GDBusAuthObserver>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusServer>? {
    memScoped {
        return interpretCPointer<GDBusServer>(kniBridge1003(address?.cstr?.getPointer(memScope).rawValue, flags, guid?.cstr?.getPointer(memScope).rawValue, observer?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_client_address(server: CValuesRef<GDBusServer>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1004(server?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_guid(server: CValuesRef<GDBusServer>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1005(server?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_server_get_flags(server: CValuesRef<GDBusServer>?): GDBusServerFlags {
    memScoped {
        return kniBridge1006(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_server_start(server: CValuesRef<GDBusServer>?): Unit {
    memScoped {
        return kniBridge1007(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_server_stop(server: CValuesRef<GDBusServer>?): Unit {
    memScoped {
        return kniBridge1008(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_server_is_active(server: CValuesRef<GDBusServer>?): gboolean {
    memScoped {
        return kniBridge1009(server?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_guid(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1010(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_generate_guid(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge1011())
}

fun g_dbus_is_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1012(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_unique_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1013(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_member_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1014(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_is_interface_name(@CCall.CString string: String?): gboolean {
    memScoped {
        return kniBridge1015(string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_gvariant_to_gvalue(value: CValuesRef<GVariant>?, out_gvalue: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge1016(value?.getPointer(memScope).rawValue, out_gvalue?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_gvalue_to_gvariant(gvalue: CValuesRef<GValue>?, type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1017(gvalue?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_type(): GType {
    return kniBridge1018()
}

fun g_drive_get_name(drive: CValuesRef<GDrive>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1019(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_icon(drive: CValuesRef<GDrive>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1020(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_symbolic_icon(drive: CValuesRef<GDrive>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1021(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_has_volumes(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1022(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_get_volumes(drive: CValuesRef<GDrive>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1023(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_is_removable(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1024(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_is_media_removable(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1025(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_has_media(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1026(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_is_media_check_automatic(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1027(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_poll_for_media(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1028(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_eject(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1029(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_eject(drive: CValuesRef<GDrive>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1030(drive?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_eject_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1031(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_poll_for_media(drive: CValuesRef<GDrive>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1032(drive?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_poll_for_media_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1033(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_get_identifier(drive: CValuesRef<GDrive>?, @CCall.CString kind: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1034(drive?.getPointer(memScope).rawValue, kind?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_drive_enumerate_identifiers(drive: CValuesRef<GDrive>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1035(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_get_start_stop_type(drive: CValuesRef<GDrive>?): GDriveStartStopType {
    memScoped {
        return GDriveStartStopType.byValue(kniBridge1036(drive?.getPointer(memScope).rawValue))
    }
}

fun g_drive_can_start(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1037(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_start_degraded(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1038(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_start(drive: CValuesRef<GDrive>?, flags: GDriveStartFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1039(drive?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_start_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1040(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_can_stop(drive: CValuesRef<GDrive>?): gboolean {
    memScoped {
        return kniBridge1041(drive?.getPointer(memScope).rawValue)
    }
}

fun g_drive_stop(drive: CValuesRef<GDrive>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1042(drive?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_stop_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1043(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_eject_with_operation(drive: CValuesRef<GDrive>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1044(drive?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_drive_eject_with_operation_finish(drive: CValuesRef<GDrive>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1045(drive?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_drive_get_sort_key(drive: CValuesRef<GDrive>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1046(drive?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_get_type(): GType {
    return kniBridge1047()
}

fun g_dtls_connection_set_database(conn: CValuesRef<GDtlsConnection>?, database: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge1048(conn?.getPointer(memScope).rawValue, database?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_database(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge1049(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_set_certificate(conn: CValuesRef<GDtlsConnection>?, certificate: CValuesRef<GTlsCertificate>?): Unit {
    memScoped {
        return kniBridge1050(conn?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_certificate(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge1051(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_set_interaction(conn: CValuesRef<GDtlsConnection>?, interaction: CValuesRef<GTlsInteraction>?): Unit {
    memScoped {
        return kniBridge1052(conn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_interaction(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsInteraction>? {
    memScoped {
        return interpretCPointer<GTlsInteraction>(kniBridge1053(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_get_peer_certificate(conn: CValuesRef<GDtlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge1054(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_get_peer_certificate_errors(conn: CValuesRef<GDtlsConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge1055(conn?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_set_require_close_notify(conn: CValuesRef<GDtlsConnection>?, require_close_notify: gboolean): Unit {
    memScoped {
        return kniBridge1056(conn?.getPointer(memScope).rawValue, require_close_notify)
    }
}

fun g_dtls_connection_get_require_close_notify(conn: CValuesRef<GDtlsConnection>?): gboolean {
    memScoped {
        return kniBridge1057(conn?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_set_rehandshake_mode(conn: CValuesRef<GDtlsConnection>?, mode: GTlsRehandshakeMode): Unit {
    memScoped {
        return kniBridge1058(conn?.getPointer(memScope).rawValue, mode.value)
    }
}

fun g_dtls_connection_get_rehandshake_mode(conn: CValuesRef<GDtlsConnection>?): GTlsRehandshakeMode {
    memScoped {
        return GTlsRehandshakeMode.byValue(kniBridge1059(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_connection_handshake(conn: CValuesRef<GDtlsConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1060(conn?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_handshake_async(conn: CValuesRef<GDtlsConnection>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1061(conn?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dtls_connection_handshake_finish(conn: CValuesRef<GDtlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1062(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_shutdown(conn: CValuesRef<GDtlsConnection>?, shutdown_read: gboolean, shutdown_write: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1063(conn?.getPointer(memScope).rawValue, shutdown_read, shutdown_write, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_shutdown_async(conn: CValuesRef<GDtlsConnection>?, shutdown_read: gboolean, shutdown_write: gboolean, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1064(conn?.getPointer(memScope).rawValue, shutdown_read, shutdown_write, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dtls_connection_shutdown_finish(conn: CValuesRef<GDtlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1065(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_close(conn: CValuesRef<GDtlsConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1066(conn?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_close_async(conn: CValuesRef<GDtlsConnection>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1067(conn?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dtls_connection_close_finish(conn: CValuesRef<GDtlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1068(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_emit_accept_certificate(conn: CValuesRef<GDtlsConnection>?, peer_cert: CValuesRef<GTlsCertificate>?, errors: GTlsCertificateFlags): gboolean {
    memScoped {
        return kniBridge1069(conn?.getPointer(memScope).rawValue, peer_cert?.getPointer(memScope).rawValue, errors)
    }
}

fun g_dtls_connection_set_advertised_protocols(conn: CValuesRef<GDtlsConnection>?, protocols: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge1070(conn?.getPointer(memScope).rawValue, protocols?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_connection_get_negotiated_protocol(conn: CValuesRef<GDtlsConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1071(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_client_connection_get_type(): GType {
    return kniBridge1072()
}

fun g_dtls_client_connection_new(base_socket: CValuesRef<GDatagramBased>?, server_identity: CValuesRef<GSocketConnectable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDatagramBased>? {
    memScoped {
        return interpretCPointer<GDatagramBased>(kniBridge1073(base_socket?.getPointer(memScope).rawValue, server_identity?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_client_connection_get_validation_flags(conn: CValuesRef<GDtlsClientConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge1074(conn?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_client_connection_set_validation_flags(conn: CValuesRef<GDtlsClientConnection>?, flags: GTlsCertificateFlags): Unit {
    memScoped {
        return kniBridge1075(conn?.getPointer(memScope).rawValue, flags)
    }
}

fun g_dtls_client_connection_get_server_identity(conn: CValuesRef<GDtlsClientConnection>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge1076(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_client_connection_set_server_identity(conn: CValuesRef<GDtlsClientConnection>?, identity: CValuesRef<GSocketConnectable>?): Unit {
    memScoped {
        return kniBridge1077(conn?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue)
    }
}

fun g_dtls_client_connection_get_accepted_cas(conn: CValuesRef<GDtlsClientConnection>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1078(conn?.getPointer(memScope).rawValue))
    }
}

fun g_dtls_server_connection_get_type(): GType {
    return kniBridge1079()
}

fun g_dtls_server_connection_new(base_socket: CValuesRef<GDatagramBased>?, certificate: CValuesRef<GTlsCertificate>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDatagramBased>? {
    memScoped {
        return interpretCPointer<GDatagramBased>(kniBridge1080(base_socket?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_icon_get_type(): GType {
    return kniBridge1081()
}

fun g_icon_hash(icon: gconstpointer?): guint {
    return kniBridge1082(icon.rawValue)
}

fun g_icon_equal(icon1: CValuesRef<GIcon>?, icon2: CValuesRef<GIcon>?): gboolean {
    memScoped {
        return kniBridge1083(icon1?.getPointer(memScope).rawValue, icon2?.getPointer(memScope).rawValue)
    }
}

fun g_icon_to_string(icon: CValuesRef<GIcon>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1084(icon?.getPointer(memScope).rawValue))
    }
}

fun g_icon_new_for_string(@CCall.CString str: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1085(str?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_icon_serialize(icon: CValuesRef<GIcon>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1086(icon?.getPointer(memScope).rawValue))
    }
}

fun g_icon_deserialize(value: CValuesRef<GVariant>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1087(value?.getPointer(memScope).rawValue))
    }
}

fun g_emblem_get_type(): GType {
    return kniBridge1088()
}

fun g_emblem_new(icon: CValuesRef<GIcon>?): CPointer<GEmblem>? {
    memScoped {
        return interpretCPointer<GEmblem>(kniBridge1089(icon?.getPointer(memScope).rawValue))
    }
}

fun g_emblem_new_with_origin(icon: CValuesRef<GIcon>?, origin: GEmblemOrigin): CPointer<GEmblem>? {
    memScoped {
        return interpretCPointer<GEmblem>(kniBridge1090(icon?.getPointer(memScope).rawValue, origin.value))
    }
}

fun g_emblem_get_icon(emblem: CValuesRef<GEmblem>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1091(emblem?.getPointer(memScope).rawValue))
    }
}

fun g_emblem_get_origin(emblem: CValuesRef<GEmblem>?): GEmblemOrigin {
    memScoped {
        return GEmblemOrigin.byValue(kniBridge1092(emblem?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_get_type(): GType {
    return kniBridge1093()
}

fun g_emblemed_icon_new(icon: CValuesRef<GIcon>?, emblem: CValuesRef<GEmblem>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1094(icon?.getPointer(memScope).rawValue, emblem?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_get_icon(emblemed: CValuesRef<GEmblemedIcon>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1095(emblemed?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_get_emblems(emblemed: CValuesRef<GEmblemedIcon>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1096(emblemed?.getPointer(memScope).rawValue))
    }
}

fun g_emblemed_icon_add_emblem(emblemed: CValuesRef<GEmblemedIcon>?, emblem: CValuesRef<GEmblem>?): Unit {
    memScoped {
        return kniBridge1097(emblemed?.getPointer(memScope).rawValue, emblem?.getPointer(memScope).rawValue)
    }
}

fun g_emblemed_icon_clear_emblems(emblemed: CValuesRef<GEmblemedIcon>?): Unit {
    memScoped {
        return kniBridge1098(emblemed?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_info_list_get_type(): GType {
    return kniBridge1099()
}

fun g_file_attribute_info_list_new(): CPointer<GFileAttributeInfoList>? {
    return interpretCPointer<GFileAttributeInfoList>(kniBridge1100())
}

fun g_file_attribute_info_list_ref(list: CValuesRef<GFileAttributeInfoList>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge1101(list?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_info_list_unref(list: CValuesRef<GFileAttributeInfoList>?): Unit {
    memScoped {
        return kniBridge1102(list?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_info_list_dup(list: CValuesRef<GFileAttributeInfoList>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge1103(list?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_info_list_lookup(list: CValuesRef<GFileAttributeInfoList>?, @CCall.CString name: String?): CPointer<GFileAttributeInfo>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfo>(kniBridge1104(list?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_info_list_add(list: CValuesRef<GFileAttributeInfoList>?, @CCall.CString name: String?, type: GFileAttributeType, flags: GFileAttributeInfoFlags): Unit {
    memScoped {
        return kniBridge1105(list?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, type, flags)
    }
}

fun g_file_enumerator_get_type(): GType {
    return kniBridge1106()
}

fun g_file_enumerator_next_file(enumerator: CValuesRef<GFileEnumerator>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1107(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_close(enumerator: CValuesRef<GFileEnumerator>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1108(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_next_files_async(enumerator: CValuesRef<GFileEnumerator>?, num_files: Int, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1109(enumerator?.getPointer(memScope).rawValue, num_files, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_enumerator_next_files_finish(enumerator: CValuesRef<GFileEnumerator>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1110(enumerator?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_close_async(enumerator: CValuesRef<GFileEnumerator>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1111(enumerator?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_enumerator_close_finish(enumerator: CValuesRef<GFileEnumerator>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1112(enumerator?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_is_closed(enumerator: CValuesRef<GFileEnumerator>?): gboolean {
    memScoped {
        return kniBridge1113(enumerator?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_has_pending(enumerator: CValuesRef<GFileEnumerator>?): gboolean {
    memScoped {
        return kniBridge1114(enumerator?.getPointer(memScope).rawValue)
    }
}

fun g_file_enumerator_set_pending(enumerator: CValuesRef<GFileEnumerator>?, pending: gboolean): Unit {
    memScoped {
        return kniBridge1115(enumerator?.getPointer(memScope).rawValue, pending)
    }
}

fun g_file_enumerator_get_container(enumerator: CValuesRef<GFileEnumerator>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1116(enumerator?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_get_child(enumerator: CValuesRef<GFileEnumerator>?, info: CValuesRef<GFileInfo>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1117(enumerator?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerator_iterate(direnum: CValuesRef<GFileEnumerator>?, out_info: CValuesRef<CPointerVar<GFileInfo>>?, out_child: CValuesRef<CPointerVar<GFile>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1118(direnum?.getPointer(memScope).rawValue, out_info?.getPointer(memScope).rawValue, out_child?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_type(): GType {
    return kniBridge1119()
}

fun g_file_new_for_path(@CCall.CString path: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1120(path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_for_uri(@CCall.CString uri: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1121(uri?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_for_commandline_arg(@CCall.CString arg: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1122(arg?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_for_commandline_arg_and_cwd(@CCall.CString arg: String?, @CCall.CString cwd: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1123(arg?.cstr?.getPointer(memScope).rawValue, cwd?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_new_tmp(@CCall.CString tmpl: String?, iostream: CValuesRef<CPointerVar<GFileIOStream>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1124(tmpl?.cstr?.getPointer(memScope).rawValue, iostream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_parse_name(@CCall.CString parse_name: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1125(parse_name?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk318")
external fun g_file_new_build_filename(@CCall.CString first_element: String?, vararg variadicArguments: Any?): CPointer<GFile>?

fun g_file_dup(file: CValuesRef<GFile>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1126(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_hash(file: gconstpointer?): guint {
    return kniBridge1127(file.rawValue)
}

fun g_file_equal(file1: CValuesRef<GFile>?, file2: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge1128(file1?.getPointer(memScope).rawValue, file2?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_basename(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1129(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_path(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1130(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_peek_path(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1131(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_uri(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1132(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_parse_name(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1133(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_parent(file: CValuesRef<GFile>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1134(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_has_parent(file: CValuesRef<GFile>?, parent: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge1135(file?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_child(file: CValuesRef<GFile>?, @CCall.CString name: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1136(file?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_get_child_for_display_name(file: CValuesRef<GFile>?, @CCall.CString display_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1137(file?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_has_prefix(file: CValuesRef<GFile>?, prefix: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge1138(file?.getPointer(memScope).rawValue, prefix?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_relative_path(parent: CValuesRef<GFile>?, descendant: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1139(parent?.getPointer(memScope).rawValue, descendant?.getPointer(memScope).rawValue))
    }
}

fun g_file_resolve_relative_path(file: CValuesRef<GFile>?, @CCall.CString relative_path: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1140(file?.getPointer(memScope).rawValue, relative_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_is_native(file: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge1141(file?.getPointer(memScope).rawValue)
    }
}

fun g_file_has_uri_scheme(file: CValuesRef<GFile>?, @CCall.CString uri_scheme: String?): gboolean {
    memScoped {
        return kniBridge1142(file?.getPointer(memScope).rawValue, uri_scheme?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_get_uri_scheme(file: CValuesRef<GFile>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1143(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_read(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInputStream>? {
    memScoped {
        return interpretCPointer<GFileInputStream>(kniBridge1144(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_read_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1145(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_read_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInputStream>? {
    memScoped {
        return interpretCPointer<GFileInputStream>(kniBridge1146(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_append_to(file: CValuesRef<GFile>?, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge1147(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create(file: CValuesRef<GFile>?, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge1148(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge1149(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_append_to_async(file: CValuesRef<GFile>?, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1150(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_append_to_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge1151(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create_async(file: CValuesRef<GFile>?, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1152(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_create_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge1153(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace_async(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1154(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileOutputStream>? {
    memScoped {
        return interpretCPointer<GFileOutputStream>(kniBridge1155(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_open_readwrite(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge1156(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_open_readwrite_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1157(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_open_readwrite_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge1158(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create_readwrite(file: CValuesRef<GFile>?, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge1159(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_create_readwrite_async(file: CValuesRef<GFile>?, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1160(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_create_readwrite_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge1161(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace_readwrite(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge1162(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_replace_readwrite_async(file: CValuesRef<GFile>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1163(file?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_readwrite_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileIOStream>? {
    memScoped {
        return interpretCPointer<GFileIOStream>(kniBridge1164(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_exists(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?): gboolean {
    memScoped {
        return kniBridge1165(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_file_type(file: CValuesRef<GFile>?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?): GFileType {
    memScoped {
        return kniBridge1166(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_info(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1167(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_info_async(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1168(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_query_info_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1169(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_filesystem_info(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1170(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_filesystem_info_async(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1171(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_query_filesystem_info_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1172(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_find_enclosing_mount(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge1173(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_find_enclosing_mount_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1174(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_find_enclosing_mount_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge1175(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerate_children(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileEnumerator>? {
    memScoped {
        return interpretCPointer<GFileEnumerator>(kniBridge1176(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_enumerate_children_async(file: CValuesRef<GFile>?, @CCall.CString attributes: String?, flags: GFileQueryInfoFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1177(file?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_enumerate_children_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileEnumerator>? {
    memScoped {
        return interpretCPointer<GFileEnumerator>(kniBridge1178(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_set_display_name(file: CValuesRef<GFile>?, @CCall.CString display_name: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1179(file?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_set_display_name_async(file: CValuesRef<GFile>?, @CCall.CString display_name: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1180(file?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_set_display_name_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1181(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_delete(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1182(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_delete_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1183(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_delete_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1184(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_trash(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1185(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_trash_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1186(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_trash_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1187(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_copy(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileProgressCallback?, progress_callback_data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1188(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_callback_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_copy_async(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileProgressCallback?, progress_callback_data: gpointer?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1189(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_callback_data.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_copy_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1190(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_move(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileProgressCallback?, progress_callback_data: gpointer?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1191(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_callback_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_directory(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1192(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_directory_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1193(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_make_directory_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1194(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_directory_with_parents(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1195(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_make_symbolic_link(file: CValuesRef<GFile>?, @CCall.CString symlink_value: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1196(file?.getPointer(memScope).rawValue, symlink_value?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_settable_attributes(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge1197(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_writable_namespaces(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileAttributeInfoList>? {
    memScoped {
        return interpretCPointer<GFileAttributeInfoList>(kniBridge1198(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_set_attribute(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, type: GFileAttributeType, value_p: gpointer?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1199(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, type, value_p.rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attributes_from_info(file: CValuesRef<GFile>?, info: CValuesRef<GFileInfo>?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1200(file?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attributes_async(file: CValuesRef<GFile>?, info: CValuesRef<GFileInfo>?, flags: GFileQueryInfoFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1201(file?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_set_attributes_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, info: CValuesRef<CPointerVar<GFileInfo>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1202(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_string(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, @CCall.CString value: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1203(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_byte_string(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, @CCall.CString value: String?, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1204(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_uint32(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: guint32, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1205(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_int32(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: gint32, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1206(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_uint64(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: guint64, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1207(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_set_attribute_int64(file: CValuesRef<GFile>?, @CCall.CString attribute: String?, value: gint64, flags: GFileQueryInfoFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1208(file?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_mount_enclosing_volume(location: CValuesRef<GFile>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1209(location?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_mount_enclosing_volume_finish(location: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1210(location?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_mount_mountable(file: CValuesRef<GFile>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1211(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_mount_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1212(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_unmount_mountable(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1213(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_unmount_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1214(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_unmount_mountable_with_operation(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1215(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_unmount_mountable_with_operation_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1216(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_eject_mountable(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1217(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_eject_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1218(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_eject_mountable_with_operation(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1219(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_eject_mountable_with_operation_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1220(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_copy_attributes(source: CValuesRef<GFile>?, destination: CValuesRef<GFile>?, flags: GFileCopyFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1221(source?.getPointer(memScope).rawValue, destination?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_monitor_directory(file: CValuesRef<GFile>?, flags: GFileMonitorFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileMonitor>? {
    memScoped {
        return interpretCPointer<GFileMonitor>(kniBridge1222(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_monitor_file(file: CValuesRef<GFile>?, flags: GFileMonitorFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileMonitor>? {
    memScoped {
        return interpretCPointer<GFileMonitor>(kniBridge1223(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_monitor(file: CValuesRef<GFile>?, flags: GFileMonitorFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileMonitor>? {
    memScoped {
        return interpretCPointer<GFileMonitor>(kniBridge1224(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_measure_disk_usage(file: CValuesRef<GFile>?, flags: GFileMeasureFlags, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileMeasureProgressCallback?, progress_data: gpointer?, disk_usage: CValuesRef<guint64Var>?, num_dirs: CValuesRef<guint64Var>?, num_files: CValuesRef<guint64Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1225(file?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_data.rawValue, disk_usage?.getPointer(memScope).rawValue, num_dirs?.getPointer(memScope).rawValue, num_files?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_measure_disk_usage_async(file: CValuesRef<GFile>?, flags: GFileMeasureFlags, io_priority: gint, cancellable: CValuesRef<GCancellable>?, progress_callback: GFileMeasureProgressCallback?, progress_data: gpointer?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1226(file?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, progress_callback.rawValue, progress_data.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_measure_disk_usage_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, disk_usage: CValuesRef<guint64Var>?, num_dirs: CValuesRef<guint64Var>?, num_files: CValuesRef<guint64Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1227(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, disk_usage?.getPointer(memScope).rawValue, num_dirs?.getPointer(memScope).rawValue, num_files?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_start_mountable(file: CValuesRef<GFile>?, flags: GDriveStartFlags, start_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1228(file?.getPointer(memScope).rawValue, flags, start_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_start_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1229(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_stop_mountable(file: CValuesRef<GFile>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1230(file?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_stop_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1231(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_poll_mountable(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1232(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_poll_mountable_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1233(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_query_default_handler(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge1234(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_query_default_handler_async(file: CValuesRef<GFile>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1235(file?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_query_default_handler_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge1236(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_load_contents(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, contents: CValuesRef<CPointerVar<ByteVar>>?, length: CValuesRef<gsizeVar>?, etag_out: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1237(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_load_contents_async(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1238(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_load_contents_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, contents: CValuesRef<CPointerVar<ByteVar>>?, length: CValuesRef<gsizeVar>?, etag_out: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1239(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_load_partial_contents_async(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, read_more_callback: GFileReadMoreCallback?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1240(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, read_more_callback.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_load_partial_contents_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, contents: CValuesRef<CPointerVar<ByteVar>>?, length: CValuesRef<gsizeVar>?, etag_out: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1241(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_replace_contents(file: CValuesRef<GFile>?, @CCall.CString contents: String?, length: gsize, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, new_etag: CValuesRef<CPointerVar<ByteVar>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1242(file?.getPointer(memScope).rawValue, contents?.cstr?.getPointer(memScope).rawValue, length, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, new_etag?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_replace_contents_async(file: CValuesRef<GFile>?, @CCall.CString contents: String?, length: gsize, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1243(file?.getPointer(memScope).rawValue, contents?.cstr?.getPointer(memScope).rawValue, length, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_contents_bytes_async(file: CValuesRef<GFile>?, contents: CValuesRef<GBytes>?, @CCall.CString etag: String?, make_backup: gboolean, flags: GFileCreateFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1244(file?.getPointer(memScope).rawValue, contents?.getPointer(memScope).rawValue, etag?.cstr?.getPointer(memScope).rawValue, make_backup, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_replace_contents_finish(file: CValuesRef<GFile>?, res: CValuesRef<GAsyncResult>?, new_etag: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1245(file?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, new_etag?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_file_supports_thread_contexts(file: CValuesRef<GFile>?): gboolean {
    memScoped {
        return kniBridge1246(file?.getPointer(memScope).rawValue)
    }
}

fun g_file_load_bytes(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, etag_out: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge1247(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_load_bytes_async(file: CValuesRef<GFile>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1248(file?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_load_bytes_finish(file: CValuesRef<GFile>?, result: CValuesRef<GAsyncResult>?, etag_out: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge1249(file?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, etag_out?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_icon_get_type(): GType {
    return kniBridge1250()
}

fun g_file_icon_new(file: CValuesRef<GFile>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1251(file?.getPointer(memScope).rawValue))
    }
}

fun g_file_icon_get_file(icon: CValuesRef<GFileIcon>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1252(icon?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_type(): GType {
    return kniBridge1253()
}

fun g_file_info_new(): CPointer<GFileInfo>? {
    return interpretCPointer<GFileInfo>(kniBridge1254())
}

fun g_file_info_dup(other: CValuesRef<GFileInfo>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1255(other?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_copy_into(src_info: CValuesRef<GFileInfo>?, dest_info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge1256(src_info?.getPointer(memScope).rawValue, dest_info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_has_attribute(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge1257(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_has_namespace(info: CValuesRef<GFileInfo>?, @CCall.CString name_space: String?): gboolean {
    memScoped {
        return kniBridge1258(info?.getPointer(memScope).rawValue, name_space?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_list_attributes(info: CValuesRef<GFileInfo>?, @CCall.CString name_space: String?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1259(info?.getPointer(memScope).rawValue, name_space?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_data(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, type: CValuesRef<GFileAttributeTypeVar>?, value_pp: CValuesRef<gpointerVar>?, status: CValuesRef<GFileAttributeStatusVar>?): gboolean {
    memScoped {
        return kniBridge1260(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, value_pp?.getPointer(memScope).rawValue, status?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_type(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): GFileAttributeType {
    memScoped {
        return kniBridge1261(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_remove_attribute(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): Unit {
    memScoped {
        return kniBridge1262(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_status(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): GFileAttributeStatus {
    memScoped {
        return kniBridge1263(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_status(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, status: GFileAttributeStatus): gboolean {
    memScoped {
        return kniBridge1264(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, status)
    }
}

fun g_file_info_get_attribute_as_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1265(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1266(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_byte_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1267(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_boolean(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge1268(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_uint32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): guint32 {
    memScoped {
        return kniBridge1269(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_int32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gint32 {
    memScoped {
        return kniBridge1270(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_uint64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): guint64 {
    memScoped {
        return kniBridge1271(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_int64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): gint64 {
    memScoped {
        return kniBridge1272(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_attribute_object(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge1273(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_attribute_stringv(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1274(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_set_attribute(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, type: GFileAttributeType, value_p: gpointer?): Unit {
    memScoped {
        return kniBridge1275(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, type, value_p.rawValue)
    }
}

fun g_file_info_set_attribute_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, @CCall.CString attr_value: String?): Unit {
    memScoped {
        return kniBridge1276(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_byte_string(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, @CCall.CString attr_value: String?): Unit {
    memScoped {
        return kniBridge1277(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_boolean(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: gboolean): Unit {
    memScoped {
        return kniBridge1278(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_uint32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: guint32): Unit {
    memScoped {
        return kniBridge1279(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_int32(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: gint32): Unit {
    memScoped {
        return kniBridge1280(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_uint64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: guint64): Unit {
    memScoped {
        return kniBridge1281(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_int64(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: gint64): Unit {
    memScoped {
        return kniBridge1282(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value)
    }
}

fun g_file_info_set_attribute_object(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge1283(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_stringv(info: CValuesRef<GFileInfo>?, @CCall.CString attribute: String?, attr_value: CValuesRef<CPointerVar<ByteVar>>?): Unit {
    memScoped {
        return kniBridge1284(info?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, attr_value?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_clear_status(info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge1285(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_deletion_date(info: CValuesRef<GFileInfo>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge1286(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_file_type(info: CValuesRef<GFileInfo>?): GFileType {
    memScoped {
        return kniBridge1287(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_is_hidden(info: CValuesRef<GFileInfo>?): gboolean {
    memScoped {
        return kniBridge1288(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_is_backup(info: CValuesRef<GFileInfo>?): gboolean {
    memScoped {
        return kniBridge1289(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_is_symlink(info: CValuesRef<GFileInfo>?): gboolean {
    memScoped {
        return kniBridge1290(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_name(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1291(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_display_name(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1292(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_edit_name(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1293(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_icon(info: CValuesRef<GFileInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1294(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_symbolic_icon(info: CValuesRef<GFileInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1295(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_content_type(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1296(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_size(info: CValuesRef<GFileInfo>?): goffset {
    memScoped {
        return kniBridge1297(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_modification_time(info: CValuesRef<GFileInfo>?, result: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge1298(info?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_get_modification_date_time(info: CValuesRef<GFileInfo>?): CPointer<GDateTime>? {
    memScoped {
        return interpretCPointer<GDateTime>(kniBridge1299(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_symlink_target(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1300(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_etag(info: CValuesRef<GFileInfo>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1301(info?.getPointer(memScope).rawValue))
    }
}

fun g_file_info_get_sort_order(info: CValuesRef<GFileInfo>?): gint32 {
    memScoped {
        return kniBridge1302(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_attribute_mask(info: CValuesRef<GFileInfo>?, mask: CValuesRef<GFileAttributeMatcher>?): Unit {
    memScoped {
        return kniBridge1303(info?.getPointer(memScope).rawValue, mask?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_unset_attribute_mask(info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge1304(info?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_file_type(info: CValuesRef<GFileInfo>?, type: GFileType): Unit {
    memScoped {
        return kniBridge1305(info?.getPointer(memScope).rawValue, type)
    }
}

fun g_file_info_set_is_hidden(info: CValuesRef<GFileInfo>?, is_hidden: gboolean): Unit {
    memScoped {
        return kniBridge1306(info?.getPointer(memScope).rawValue, is_hidden)
    }
}

fun g_file_info_set_is_symlink(info: CValuesRef<GFileInfo>?, is_symlink: gboolean): Unit {
    memScoped {
        return kniBridge1307(info?.getPointer(memScope).rawValue, is_symlink)
    }
}

fun g_file_info_set_name(info: CValuesRef<GFileInfo>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge1308(info?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_display_name(info: CValuesRef<GFileInfo>?, @CCall.CString display_name: String?): Unit {
    memScoped {
        return kniBridge1309(info?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_edit_name(info: CValuesRef<GFileInfo>?, @CCall.CString edit_name: String?): Unit {
    memScoped {
        return kniBridge1310(info?.getPointer(memScope).rawValue, edit_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_icon(info: CValuesRef<GFileInfo>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge1311(info?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_symbolic_icon(info: CValuesRef<GFileInfo>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge1312(info?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_content_type(info: CValuesRef<GFileInfo>?, @CCall.CString content_type: String?): Unit {
    memScoped {
        return kniBridge1313(info?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_size(info: CValuesRef<GFileInfo>?, size: goffset): Unit {
    memScoped {
        return kniBridge1314(info?.getPointer(memScope).rawValue, size)
    }
}

fun g_file_info_set_modification_time(info: CValuesRef<GFileInfo>?, mtime: CValuesRef<GTimeVal>?): Unit {
    memScoped {
        return kniBridge1315(info?.getPointer(memScope).rawValue, mtime?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_modification_date_time(info: CValuesRef<GFileInfo>?, mtime: CValuesRef<GDateTime>?): Unit {
    memScoped {
        return kniBridge1316(info?.getPointer(memScope).rawValue, mtime?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_symlink_target(info: CValuesRef<GFileInfo>?, @CCall.CString symlink_target: String?): Unit {
    memScoped {
        return kniBridge1317(info?.getPointer(memScope).rawValue, symlink_target?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_info_set_sort_order(info: CValuesRef<GFileInfo>?, sort_order: gint32): Unit {
    memScoped {
        return kniBridge1318(info?.getPointer(memScope).rawValue, sort_order)
    }
}

fun g_file_attribute_matcher_get_type(): GType {
    return kniBridge1319()
}

fun g_file_attribute_matcher_new(@CCall.CString attributes: String?): CPointer<GFileAttributeMatcher>? {
    memScoped {
        return interpretCPointer<GFileAttributeMatcher>(kniBridge1320(attributes?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_ref(matcher: CValuesRef<GFileAttributeMatcher>?): CPointer<GFileAttributeMatcher>? {
    memScoped {
        return interpretCPointer<GFileAttributeMatcher>(kniBridge1321(matcher?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_unref(matcher: CValuesRef<GFileAttributeMatcher>?): Unit {
    memScoped {
        return kniBridge1322(matcher?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_subtract(matcher: CValuesRef<GFileAttributeMatcher>?, subtract: CValuesRef<GFileAttributeMatcher>?): CPointer<GFileAttributeMatcher>? {
    memScoped {
        return interpretCPointer<GFileAttributeMatcher>(kniBridge1323(matcher?.getPointer(memScope).rawValue, subtract?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_matches(matcher: CValuesRef<GFileAttributeMatcher>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge1324(matcher?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_matches_only(matcher: CValuesRef<GFileAttributeMatcher>?, @CCall.CString attribute: String?): gboolean {
    memScoped {
        return kniBridge1325(matcher?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_enumerate_namespace(matcher: CValuesRef<GFileAttributeMatcher>?, @CCall.CString ns: String?): gboolean {
    memScoped {
        return kniBridge1326(matcher?.getPointer(memScope).rawValue, ns?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_file_attribute_matcher_enumerate_next(matcher: CValuesRef<GFileAttributeMatcher>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1327(matcher?.getPointer(memScope).rawValue))
    }
}

fun g_file_attribute_matcher_to_string(matcher: CValuesRef<GFileAttributeMatcher>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1328(matcher?.getPointer(memScope).rawValue))
    }
}

fun g_file_input_stream_get_type(): GType {
    return kniBridge1329()
}

fun g_file_input_stream_query_info(stream: CValuesRef<GFileInputStream>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1330(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_input_stream_query_info_async(stream: CValuesRef<GFileInputStream>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1331(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_input_stream_query_info_finish(stream: CValuesRef<GFileInputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1332(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_io_error_quark(): GQuark {
    return kniBridge1333()
}

fun g_io_error_from_errno(err_no: gint): GIOErrorEnum {
    return kniBridge1334(err_no)
}

fun g_io_stream_get_type(): GType {
    return kniBridge1335()
}

fun g_io_stream_get_input_stream(stream: CValuesRef<GIOStream>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1336(stream?.getPointer(memScope).rawValue))
    }
}

fun g_io_stream_get_output_stream(stream: CValuesRef<GIOStream>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge1337(stream?.getPointer(memScope).rawValue))
    }
}

fun g_io_stream_splice_async(stream1: CValuesRef<GIOStream>?, stream2: CValuesRef<GIOStream>?, flags: GIOStreamSpliceFlags, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1338(stream1?.getPointer(memScope).rawValue, stream2?.getPointer(memScope).rawValue, flags, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_io_stream_splice_finish(result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1339(result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_close(stream: CValuesRef<GIOStream>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1340(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_close_async(stream: CValuesRef<GIOStream>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1341(stream?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_io_stream_close_finish(stream: CValuesRef<GIOStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1342(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_is_closed(stream: CValuesRef<GIOStream>?): gboolean {
    memScoped {
        return kniBridge1343(stream?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_has_pending(stream: CValuesRef<GIOStream>?): gboolean {
    memScoped {
        return kniBridge1344(stream?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_set_pending(stream: CValuesRef<GIOStream>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1345(stream?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_io_stream_clear_pending(stream: CValuesRef<GIOStream>?): Unit {
    memScoped {
        return kniBridge1346(stream?.getPointer(memScope).rawValue)
    }
}

fun g_file_io_stream_get_type(): GType {
    return kniBridge1347()
}

fun g_file_io_stream_query_info(stream: CValuesRef<GFileIOStream>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1348(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_io_stream_query_info_async(stream: CValuesRef<GFileIOStream>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1349(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_io_stream_query_info_finish(stream: CValuesRef<GFileIOStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1350(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_io_stream_get_etag(stream: CValuesRef<GFileIOStream>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1351(stream?.getPointer(memScope).rawValue))
    }
}

fun g_file_monitor_get_type(): GType {
    return kniBridge1352()
}

fun g_file_monitor_cancel(monitor: CValuesRef<GFileMonitor>?): gboolean {
    memScoped {
        return kniBridge1353(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_file_monitor_is_cancelled(monitor: CValuesRef<GFileMonitor>?): gboolean {
    memScoped {
        return kniBridge1354(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_file_monitor_set_rate_limit(monitor: CValuesRef<GFileMonitor>?, limit_msecs: gint): Unit {
    memScoped {
        return kniBridge1355(monitor?.getPointer(memScope).rawValue, limit_msecs)
    }
}

fun g_file_monitor_emit_event(monitor: CValuesRef<GFileMonitor>?, child: CValuesRef<GFile>?, other_file: CValuesRef<GFile>?, event_type: GFileMonitorEvent): Unit {
    memScoped {
        return kniBridge1356(monitor?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, other_file?.getPointer(memScope).rawValue, event_type.value)
    }
}

fun g_filename_completer_get_type(): GType {
    return kniBridge1357()
}

fun g_filename_completer_new(): CPointer<GFilenameCompleter>? {
    return interpretCPointer<GFilenameCompleter>(kniBridge1358())
}

fun g_filename_completer_get_completion_suffix(completer: CValuesRef<GFilenameCompleter>?, @CCall.CString initial_text: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1359(completer?.getPointer(memScope).rawValue, initial_text?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_filename_completer_get_completions(completer: CValuesRef<GFilenameCompleter>?, @CCall.CString initial_text: String?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1360(completer?.getPointer(memScope).rawValue, initial_text?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_filename_completer_set_dirs_only(completer: CValuesRef<GFilenameCompleter>?, dirs_only: gboolean): Unit {
    memScoped {
        return kniBridge1361(completer?.getPointer(memScope).rawValue, dirs_only)
    }
}

fun g_file_output_stream_get_type(): GType {
    return kniBridge1362()
}

fun g_file_output_stream_query_info(stream: CValuesRef<GFileOutputStream>?, @CCall.CString attributes: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1363(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_output_stream_query_info_async(stream: CValuesRef<GFileOutputStream>?, @CCall.CString attributes: String?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1364(stream?.getPointer(memScope).rawValue, attributes?.cstr?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_file_output_stream_query_info_finish(stream: CValuesRef<GFileOutputStream>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge1365(stream?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_file_output_stream_get_etag(stream: CValuesRef<GFileOutputStream>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1366(stream?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_get_type(): GType {
    return kniBridge1367()
}

fun g_inet_address_new_from_string(@CCall.CString string: String?): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge1368(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_new_from_bytes(bytes: CValuesRef<guint8Var>?, family: GSocketFamily): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge1369(bytes?.getPointer(memScope).rawValue, family))
    }
}

fun g_inet_address_new_loopback(family: GSocketFamily): CPointer<GInetAddress>? {
    return interpretCPointer<GInetAddress>(kniBridge1370(family))
}

fun g_inet_address_new_any(family: GSocketFamily): CPointer<GInetAddress>? {
    return interpretCPointer<GInetAddress>(kniBridge1371(family))
}

fun g_inet_address_equal(address: CValuesRef<GInetAddress>?, other_address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1372(address?.getPointer(memScope).rawValue, other_address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_to_string(address: CValuesRef<GInetAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1373(address?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_to_bytes(address: CValuesRef<GInetAddress>?): CPointer<guint8Var>? {
    memScoped {
        return interpretCPointer<guint8Var>(kniBridge1374(address?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_get_native_size(address: CValuesRef<GInetAddress>?): gsize {
    memScoped {
        return kniBridge1375(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_family(address: CValuesRef<GInetAddress>?): GSocketFamily {
    memScoped {
        return kniBridge1376(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_any(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1377(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_loopback(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1378(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_link_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1379(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_site_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1380(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_multicast(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1381(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_global(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1382(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_link_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1383(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_node_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1384(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_org_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1385(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_get_is_mc_site_local(address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1386(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_get_type(): GType {
    return kniBridge1387()
}

fun g_inet_address_mask_new(addr: CValuesRef<GInetAddress>?, length: guint, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInetAddressMask>? {
    memScoped {
        return interpretCPointer<GInetAddressMask>(kniBridge1388(addr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_new_from_string(@CCall.CString mask_string: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInetAddressMask>? {
    memScoped {
        return interpretCPointer<GInetAddressMask>(kniBridge1389(mask_string?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_to_string(mask: CValuesRef<GInetAddressMask>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1390(mask?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_get_family(mask: CValuesRef<GInetAddressMask>?): GSocketFamily {
    memScoped {
        return kniBridge1391(mask?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_get_address(mask: CValuesRef<GInetAddressMask>?): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge1392(mask?.getPointer(memScope).rawValue))
    }
}

fun g_inet_address_mask_get_length(mask: CValuesRef<GInetAddressMask>?): guint {
    memScoped {
        return kniBridge1393(mask?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_matches(mask: CValuesRef<GInetAddressMask>?, address: CValuesRef<GInetAddress>?): gboolean {
    memScoped {
        return kniBridge1394(mask?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_address_mask_equal(mask: CValuesRef<GInetAddressMask>?, mask2: CValuesRef<GInetAddressMask>?): gboolean {
    memScoped {
        return kniBridge1395(mask?.getPointer(memScope).rawValue, mask2?.getPointer(memScope).rawValue)
    }
}

fun g_socket_address_get_type(): GType {
    return kniBridge1396()
}

fun g_socket_address_get_family(address: CValuesRef<GSocketAddress>?): GSocketFamily {
    memScoped {
        return kniBridge1397(address?.getPointer(memScope).rawValue)
    }
}

fun g_socket_address_new_from_native(native: gpointer?, len: gsize): CPointer<GSocketAddress>? {
    return interpretCPointer<GSocketAddress>(kniBridge1398(native.rawValue, len))
}

fun g_socket_address_to_native(address: CValuesRef<GSocketAddress>?, dest: gpointer?, destlen: gsize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1399(address?.getPointer(memScope).rawValue, dest.rawValue, destlen, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_address_get_native_size(address: CValuesRef<GSocketAddress>?): gssize {
    memScoped {
        return kniBridge1400(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_socket_address_get_type(): GType {
    return kniBridge1401()
}

fun g_inet_socket_address_new(address: CValuesRef<GInetAddress>?, port: guint16): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1402(address?.getPointer(memScope).rawValue, port))
    }
}

fun g_inet_socket_address_new_from_string(@CCall.CString address: String?, port: guint): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1403(address?.cstr?.getPointer(memScope).rawValue, port))
    }
}

fun g_inet_socket_address_get_address(address: CValuesRef<GInetSocketAddress>?): CPointer<GInetAddress>? {
    memScoped {
        return interpretCPointer<GInetAddress>(kniBridge1404(address?.getPointer(memScope).rawValue))
    }
}

fun g_inet_socket_address_get_port(address: CValuesRef<GInetSocketAddress>?): guint16 {
    memScoped {
        return kniBridge1405(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_socket_address_get_flowinfo(address: CValuesRef<GInetSocketAddress>?): guint32 {
    memScoped {
        return kniBridge1406(address?.getPointer(memScope).rawValue)
    }
}

fun g_inet_socket_address_get_scope_id(address: CValuesRef<GInetSocketAddress>?): guint32 {
    memScoped {
        return kniBridge1407(address?.getPointer(memScope).rawValue)
    }
}

fun g_app_info_create_flags_get_type(): GType {
    return kniBridge1408()
}

fun g_converter_flags_get_type(): GType {
    return kniBridge1409()
}

fun g_converter_result_get_type(): GType {
    return kniBridge1410()
}

fun g_data_stream_byte_order_get_type(): GType {
    return kniBridge1411()
}

fun g_data_stream_newline_type_get_type(): GType {
    return kniBridge1412()
}

fun g_file_attribute_type_get_type(): GType {
    return kniBridge1413()
}

fun g_file_attribute_info_flags_get_type(): GType {
    return kniBridge1414()
}

fun g_file_attribute_status_get_type(): GType {
    return kniBridge1415()
}

fun g_file_query_info_flags_get_type(): GType {
    return kniBridge1416()
}

fun g_file_create_flags_get_type(): GType {
    return kniBridge1417()
}

fun g_file_measure_flags_get_type(): GType {
    return kniBridge1418()
}

fun g_mount_mount_flags_get_type(): GType {
    return kniBridge1419()
}

fun g_mount_unmount_flags_get_type(): GType {
    return kniBridge1420()
}

fun g_drive_start_flags_get_type(): GType {
    return kniBridge1421()
}

fun g_drive_start_stop_type_get_type(): GType {
    return kniBridge1422()
}

fun g_file_copy_flags_get_type(): GType {
    return kniBridge1423()
}

fun g_file_monitor_flags_get_type(): GType {
    return kniBridge1424()
}

fun g_file_type_get_type(): GType {
    return kniBridge1425()
}

fun g_filesystem_preview_type_get_type(): GType {
    return kniBridge1426()
}

fun g_file_monitor_event_get_type(): GType {
    return kniBridge1427()
}

fun g_io_error_enum_get_type(): GType {
    return kniBridge1428()
}

fun g_ask_password_flags_get_type(): GType {
    return kniBridge1429()
}

fun g_password_save_get_type(): GType {
    return kniBridge1430()
}

fun g_mount_operation_result_get_type(): GType {
    return kniBridge1431()
}

fun g_output_stream_splice_flags_get_type(): GType {
    return kniBridge1432()
}

fun g_io_stream_splice_flags_get_type(): GType {
    return kniBridge1433()
}

fun g_emblem_origin_get_type(): GType {
    return kniBridge1434()
}

fun g_resolver_error_get_type(): GType {
    return kniBridge1435()
}

fun g_resolver_record_type_get_type(): GType {
    return kniBridge1436()
}

fun g_resource_error_get_type(): GType {
    return kniBridge1437()
}

fun g_resource_flags_get_type(): GType {
    return kniBridge1438()
}

fun g_resource_lookup_flags_get_type(): GType {
    return kniBridge1439()
}

fun g_socket_family_get_type(): GType {
    return kniBridge1440()
}

fun g_socket_type_get_type(): GType {
    return kniBridge1441()
}

fun g_socket_msg_flags_get_type(): GType {
    return kniBridge1442()
}

fun g_socket_protocol_get_type(): GType {
    return kniBridge1443()
}

fun g_zlib_compressor_format_get_type(): GType {
    return kniBridge1444()
}

fun g_unix_socket_address_type_get_type(): GType {
    return kniBridge1445()
}

fun g_bus_type_get_type(): GType {
    return kniBridge1446()
}

fun g_bus_name_owner_flags_get_type(): GType {
    return kniBridge1447()
}

fun g_bus_name_watcher_flags_get_type(): GType {
    return kniBridge1448()
}

fun g_dbus_proxy_flags_get_type(): GType {
    return kniBridge1449()
}

fun g_dbus_error_get_type(): GType {
    return kniBridge1450()
}

fun g_dbus_connection_flags_get_type(): GType {
    return kniBridge1451()
}

fun g_dbus_capability_flags_get_type(): GType {
    return kniBridge1452()
}

fun g_dbus_call_flags_get_type(): GType {
    return kniBridge1453()
}

fun g_dbus_message_type_get_type(): GType {
    return kniBridge1454()
}

fun g_dbus_message_flags_get_type(): GType {
    return kniBridge1455()
}

fun g_dbus_message_header_field_get_type(): GType {
    return kniBridge1456()
}

fun g_dbus_property_info_flags_get_type(): GType {
    return kniBridge1457()
}

fun g_dbus_subtree_flags_get_type(): GType {
    return kniBridge1458()
}

fun g_dbus_server_flags_get_type(): GType {
    return kniBridge1459()
}

fun g_dbus_signal_flags_get_type(): GType {
    return kniBridge1460()
}

fun g_dbus_send_message_flags_get_type(): GType {
    return kniBridge1461()
}

fun g_credentials_type_get_type(): GType {
    return kniBridge1462()
}

fun g_dbus_message_byte_order_get_type(): GType {
    return kniBridge1463()
}

fun g_application_flags_get_type(): GType {
    return kniBridge1464()
}

fun g_tls_error_get_type(): GType {
    return kniBridge1465()
}

fun g_tls_certificate_flags_get_type(): GType {
    return kniBridge1466()
}

fun g_tls_authentication_mode_get_type(): GType {
    return kniBridge1467()
}

fun g_tls_rehandshake_mode_get_type(): GType {
    return kniBridge1468()
}

fun g_tls_password_flags_get_type(): GType {
    return kniBridge1469()
}

fun g_tls_interaction_result_get_type(): GType {
    return kniBridge1470()
}

fun g_dbus_interface_skeleton_flags_get_type(): GType {
    return kniBridge1471()
}

fun g_dbus_object_manager_client_flags_get_type(): GType {
    return kniBridge1472()
}

fun g_tls_database_verify_flags_get_type(): GType {
    return kniBridge1473()
}

fun g_tls_database_lookup_flags_get_type(): GType {
    return kniBridge1474()
}

fun g_tls_certificate_request_flags_get_type(): GType {
    return kniBridge1475()
}

fun g_io_module_scope_flags_get_type(): GType {
    return kniBridge1476()
}

fun g_socket_client_event_get_type(): GType {
    return kniBridge1477()
}

fun g_socket_listener_event_get_type(): GType {
    return kniBridge1478()
}

fun g_test_dbus_flags_get_type(): GType {
    return kniBridge1479()
}

fun g_subprocess_flags_get_type(): GType {
    return kniBridge1480()
}

fun g_notification_priority_get_type(): GType {
    return kniBridge1481()
}

fun g_network_connectivity_get_type(): GType {
    return kniBridge1482()
}

fun g_pollable_return_get_type(): GType {
    return kniBridge1483()
}

fun g_resolver_name_lookup_flags_get_type(): GType {
    return kniBridge1484()
}

fun g_settings_bind_flags_get_type(): GType {
    return kniBridge1485()
}

fun g_io_module_scope_new(flags: GIOModuleScopeFlags): CPointer<GIOModuleScope>? {
    return interpretCPointer<GIOModuleScope>(kniBridge1486(flags.value))
}

fun g_io_module_scope_free(scope: CValuesRef<GIOModuleScope>?): Unit {
    memScoped {
        return kniBridge1487(scope?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_scope_block(scope: CValuesRef<GIOModuleScope>?, @CCall.CString basename: String?): Unit {
    memScoped {
        return kniBridge1488(scope?.getPointer(memScope).rawValue, basename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_get_type(): GType {
    return kniBridge1489()
}

fun g_io_module_new(@CCall.CString filename: String?): CPointer<GIOModule>? {
    memScoped {
        return interpretCPointer<GIOModule>(kniBridge1490(filename?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_modules_scan_all_in_directory(@CCall.CString dirname: String?): Unit {
    memScoped {
        return kniBridge1491(dirname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_io_modules_load_all_in_directory(@CCall.CString dirname: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1492(dirname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_modules_scan_all_in_directory_with_scope(@CCall.CString dirname: String?, scope: CValuesRef<GIOModuleScope>?): Unit {
    memScoped {
        return kniBridge1493(dirname?.cstr?.getPointer(memScope).rawValue, scope?.getPointer(memScope).rawValue)
    }
}

fun g_io_modules_load_all_in_directory_with_scope(@CCall.CString dirname: String?, scope: CValuesRef<GIOModuleScope>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1494(dirname?.cstr?.getPointer(memScope).rawValue, scope?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_register(@CCall.CString name: String?): CPointer<GIOExtensionPoint>? {
    memScoped {
        return interpretCPointer<GIOExtensionPoint>(kniBridge1495(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_lookup(@CCall.CString name: String?): CPointer<GIOExtensionPoint>? {
    memScoped {
        return interpretCPointer<GIOExtensionPoint>(kniBridge1496(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_set_required_type(extension_point: CValuesRef<GIOExtensionPoint>?, type: GType): Unit {
    memScoped {
        return kniBridge1497(extension_point?.getPointer(memScope).rawValue, type)
    }
}

fun g_io_extension_point_get_required_type(extension_point: CValuesRef<GIOExtensionPoint>?): GType {
    memScoped {
        return kniBridge1498(extension_point?.getPointer(memScope).rawValue)
    }
}

fun g_io_extension_point_get_extensions(extension_point: CValuesRef<GIOExtensionPoint>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1499(extension_point?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_get_extension_by_name(extension_point: CValuesRef<GIOExtensionPoint>?, @CCall.CString name: String?): CPointer<GIOExtension>? {
    memScoped {
        return interpretCPointer<GIOExtension>(kniBridge1500(extension_point?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_point_implement(@CCall.CString extension_point_name: String?, type: GType, @CCall.CString extension_name: String?, priority: gint): CPointer<GIOExtension>? {
    memScoped {
        return interpretCPointer<GIOExtension>(kniBridge1501(extension_point_name?.cstr?.getPointer(memScope).rawValue, type, extension_name?.cstr?.getPointer(memScope).rawValue, priority))
    }
}

fun g_io_extension_get_type(extension: CValuesRef<GIOExtension>?): GType {
    memScoped {
        return kniBridge1502(extension?.getPointer(memScope).rawValue)
    }
}

fun g_io_extension_get_name(extension: CValuesRef<GIOExtension>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1503(extension?.getPointer(memScope).rawValue))
    }
}

fun g_io_extension_get_priority(extension: CValuesRef<GIOExtension>?): gint {
    memScoped {
        return kniBridge1504(extension?.getPointer(memScope).rawValue)
    }
}

fun g_io_extension_ref_class(extension: CValuesRef<GIOExtension>?): CPointer<GTypeClass>? {
    memScoped {
        return interpretCPointer<GTypeClass>(kniBridge1505(extension?.getPointer(memScope).rawValue))
    }
}

fun g_io_module_load(module: CValuesRef<GIOModule>?): Unit {
    memScoped {
        return kniBridge1506(module?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_unload(module: CValuesRef<GIOModule>?): Unit {
    memScoped {
        return kniBridge1507(module?.getPointer(memScope).rawValue)
    }
}

fun g_io_module_query(): CPointer<CPointerVar<ByteVar>>? {
    return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1508())
}

fun g_io_scheduler_push_job(job_func: GIOSchedulerJobFunc?, user_data: gpointer?, notify: GDestroyNotify?, io_priority: gint, cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge1509(job_func.rawValue, user_data.rawValue, notify.rawValue, io_priority, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_io_scheduler_cancel_all_jobs(): Unit {
    return kniBridge1510()
}

fun g_io_scheduler_job_send_to_mainloop(job: CValuesRef<GIOSchedulerJob>?, func: GSourceFunc?, user_data: gpointer?, notify: GDestroyNotify?): gboolean {
    memScoped {
        return kniBridge1511(job?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue, notify.rawValue)
    }
}

fun g_io_scheduler_job_send_to_mainloop_async(job: CValuesRef<GIOSchedulerJob>?, func: GSourceFunc?, user_data: gpointer?, notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1512(job?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue, notify.rawValue)
    }
}

fun g_loadable_icon_get_type(): GType {
    return kniBridge1513()
}

fun g_loadable_icon_load(icon: CValuesRef<GLoadableIcon>?, size: Int, type: CValuesRef<CPointerVar<ByteVar>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1514(icon?.getPointer(memScope).rawValue, size, type?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_loadable_icon_load_async(icon: CValuesRef<GLoadableIcon>?, size: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1515(icon?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_loadable_icon_load_finish(icon: CValuesRef<GLoadableIcon>?, res: CValuesRef<GAsyncResult>?, type: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1516(icon?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_memory_input_stream_get_type(): GType {
    return kniBridge1517()
}

fun g_memory_input_stream_new(): CPointer<GInputStream>? {
    return interpretCPointer<GInputStream>(kniBridge1518())
}

fun g_memory_input_stream_new_from_data(data: CValuesRef<*>?, len: gssize, destroy: GDestroyNotify?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1519(data?.getPointer(memScope).rawValue, len, destroy.rawValue))
    }
}

fun g_memory_input_stream_new_from_bytes(bytes: CValuesRef<GBytes>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1520(bytes?.getPointer(memScope).rawValue))
    }
}

fun g_memory_input_stream_add_data(stream: CValuesRef<GMemoryInputStream>?, data: CValuesRef<*>?, len: gssize, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1521(stream?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len, destroy.rawValue)
    }
}

fun g_memory_input_stream_add_bytes(stream: CValuesRef<GMemoryInputStream>?, bytes: CValuesRef<GBytes>?): Unit {
    memScoped {
        return kniBridge1522(stream?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue)
    }
}

fun g_memory_output_stream_get_type(): GType {
    return kniBridge1523()
}

fun g_memory_output_stream_new(data: gpointer?, size: gsize, realloc_function: GReallocFunc?, destroy_function: GDestroyNotify?): CPointer<GOutputStream>? {
    return interpretCPointer<GOutputStream>(kniBridge1524(data.rawValue, size, realloc_function.rawValue, destroy_function.rawValue))
}

fun g_memory_output_stream_new_resizable(): CPointer<GOutputStream>? {
    return interpretCPointer<GOutputStream>(kniBridge1525())
}

fun g_memory_output_stream_get_data(ostream: CValuesRef<GMemoryOutputStream>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1526(ostream?.getPointer(memScope).rawValue))
    }
}

fun g_memory_output_stream_get_size(ostream: CValuesRef<GMemoryOutputStream>?): gsize {
    memScoped {
        return kniBridge1527(ostream?.getPointer(memScope).rawValue)
    }
}

fun g_memory_output_stream_get_data_size(ostream: CValuesRef<GMemoryOutputStream>?): gsize {
    memScoped {
        return kniBridge1528(ostream?.getPointer(memScope).rawValue)
    }
}

fun g_memory_output_stream_steal_data(ostream: CValuesRef<GMemoryOutputStream>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1529(ostream?.getPointer(memScope).rawValue))
    }
}

fun g_memory_output_stream_steal_as_bytes(ostream: CValuesRef<GMemoryOutputStream>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge1530(ostream?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_type(): GType {
    return kniBridge1531()
}

fun g_mount_get_root(mount: CValuesRef<GMount>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1532(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_default_location(mount: CValuesRef<GMount>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge1533(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_name(mount: CValuesRef<GMount>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1534(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_icon(mount: CValuesRef<GMount>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1535(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_symbolic_icon(mount: CValuesRef<GMount>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge1536(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_uuid(mount: CValuesRef<GMount>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1537(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_volume(mount: CValuesRef<GMount>?): CPointer<GVolume>? {
    memScoped {
        return interpretCPointer<GVolume>(kniBridge1538(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_get_drive(mount: CValuesRef<GMount>?): CPointer<GDrive>? {
    memScoped {
        return interpretCPointer<GDrive>(kniBridge1539(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_can_unmount(mount: CValuesRef<GMount>?): gboolean {
    memScoped {
        return kniBridge1540(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_can_eject(mount: CValuesRef<GMount>?): gboolean {
    memScoped {
        return kniBridge1541(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_unmount(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1542(mount?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_unmount_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1543(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_eject(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1544(mount?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_eject_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1545(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_remount(mount: CValuesRef<GMount>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1546(mount?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_remount_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1547(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_guess_content_type(mount: CValuesRef<GMount>?, force_rescan: gboolean, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1548(mount?.getPointer(memScope).rawValue, force_rescan, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_guess_content_type_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1549(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_mount_guess_content_type_sync(mount: CValuesRef<GMount>?, force_rescan: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1550(mount?.getPointer(memScope).rawValue, force_rescan, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_mount_is_shadowed(mount: CValuesRef<GMount>?): gboolean {
    memScoped {
        return kniBridge1551(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_shadow(mount: CValuesRef<GMount>?): Unit {
    memScoped {
        return kniBridge1552(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_unshadow(mount: CValuesRef<GMount>?): Unit {
    memScoped {
        return kniBridge1553(mount?.getPointer(memScope).rawValue)
    }
}

fun g_mount_unmount_with_operation(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1554(mount?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_unmount_with_operation_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1555(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_eject_with_operation(mount: CValuesRef<GMount>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1556(mount?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_mount_eject_with_operation_finish(mount: CValuesRef<GMount>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1557(mount?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_mount_get_sort_key(mount: CValuesRef<GMount>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1558(mount?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_get_type(): GType {
    return kniBridge1559()
}

fun g_mount_operation_new(): CPointer<GMountOperation>? {
    return interpretCPointer<GMountOperation>(kniBridge1560())
}

fun g_mount_operation_get_username(op: CValuesRef<GMountOperation>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1561(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_username(op: CValuesRef<GMountOperation>?, @CCall.CString username: String?): Unit {
    memScoped {
        return kniBridge1562(op?.getPointer(memScope).rawValue, username?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_get_password(op: CValuesRef<GMountOperation>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1563(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_password(op: CValuesRef<GMountOperation>?, @CCall.CString password: String?): Unit {
    memScoped {
        return kniBridge1564(op?.getPointer(memScope).rawValue, password?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_get_anonymous(op: CValuesRef<GMountOperation>?): gboolean {
    memScoped {
        return kniBridge1565(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_anonymous(op: CValuesRef<GMountOperation>?, anonymous: gboolean): Unit {
    memScoped {
        return kniBridge1566(op?.getPointer(memScope).rawValue, anonymous)
    }
}

fun g_mount_operation_get_domain(op: CValuesRef<GMountOperation>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1567(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_domain(op: CValuesRef<GMountOperation>?, @CCall.CString domain: String?): Unit {
    memScoped {
        return kniBridge1568(op?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_get_password_save(op: CValuesRef<GMountOperation>?): GPasswordSave {
    memScoped {
        return GPasswordSave.byValue(kniBridge1569(op?.getPointer(memScope).rawValue))
    }
}

fun g_mount_operation_set_password_save(op: CValuesRef<GMountOperation>?, save: GPasswordSave): Unit {
    memScoped {
        return kniBridge1570(op?.getPointer(memScope).rawValue, save.value)
    }
}

fun g_mount_operation_get_choice(op: CValuesRef<GMountOperation>?): Int {
    memScoped {
        return kniBridge1571(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_choice(op: CValuesRef<GMountOperation>?, choice: Int): Unit {
    memScoped {
        return kniBridge1572(op?.getPointer(memScope).rawValue, choice)
    }
}

fun g_mount_operation_reply(op: CValuesRef<GMountOperation>?, result: GMountOperationResult): Unit {
    memScoped {
        return kniBridge1573(op?.getPointer(memScope).rawValue, result.value)
    }
}

fun g_mount_operation_get_is_tcrypt_hidden_volume(op: CValuesRef<GMountOperation>?): gboolean {
    memScoped {
        return kniBridge1574(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_is_tcrypt_hidden_volume(op: CValuesRef<GMountOperation>?, hidden_volume: gboolean): Unit {
    memScoped {
        return kniBridge1575(op?.getPointer(memScope).rawValue, hidden_volume)
    }
}

fun g_mount_operation_get_is_tcrypt_system_volume(op: CValuesRef<GMountOperation>?): gboolean {
    memScoped {
        return kniBridge1576(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_is_tcrypt_system_volume(op: CValuesRef<GMountOperation>?, system_volume: gboolean): Unit {
    memScoped {
        return kniBridge1577(op?.getPointer(memScope).rawValue, system_volume)
    }
}

fun g_mount_operation_get_pim(op: CValuesRef<GMountOperation>?): guint {
    memScoped {
        return kniBridge1578(op?.getPointer(memScope).rawValue)
    }
}

fun g_mount_operation_set_pim(op: CValuesRef<GMountOperation>?, pim: guint): Unit {
    memScoped {
        return kniBridge1579(op?.getPointer(memScope).rawValue, pim)
    }
}

fun g_native_socket_address_get_type(): GType {
    return kniBridge1580()
}

fun g_native_socket_address_new(native: gpointer?, len: gsize): CPointer<GSocketAddress>? {
    return interpretCPointer<GSocketAddress>(kniBridge1581(native.rawValue, len))
}

fun g_volume_monitor_get_type(): GType {
    return kniBridge1582()
}

fun g_volume_monitor_get(): CPointer<GVolumeMonitor>? {
    return interpretCPointer<GVolumeMonitor>(kniBridge1583())
}

fun g_volume_monitor_get_connected_drives(volume_monitor: CValuesRef<GVolumeMonitor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1584(volume_monitor?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_volumes(volume_monitor: CValuesRef<GVolumeMonitor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1585(volume_monitor?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_mounts(volume_monitor: CValuesRef<GVolumeMonitor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1586(volume_monitor?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_volume_for_uuid(volume_monitor: CValuesRef<GVolumeMonitor>?, @CCall.CString uuid: String?): CPointer<GVolume>? {
    memScoped {
        return interpretCPointer<GVolume>(kniBridge1587(volume_monitor?.getPointer(memScope).rawValue, uuid?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_get_mount_for_uuid(volume_monitor: CValuesRef<GVolumeMonitor>?, @CCall.CString uuid: String?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge1588(volume_monitor?.getPointer(memScope).rawValue, uuid?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_volume_monitor_adopt_orphan_mount(mount: CValuesRef<GMount>?): CPointer<GVolume>? {
    memScoped {
        return interpretCPointer<GVolume>(kniBridge1589(mount?.getPointer(memScope).rawValue))
    }
}

fun g_native_volume_monitor_get_type(): GType {
    return kniBridge1590()
}

fun g_network_address_get_type(): GType {
    return kniBridge1591()
}

fun g_network_address_new(@CCall.CString hostname: String?, port: guint16): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge1592(hostname?.cstr?.getPointer(memScope).rawValue, port))
    }
}

fun g_network_address_new_loopback(port: guint16): CPointer<GSocketConnectable>? {
    return interpretCPointer<GSocketConnectable>(kniBridge1593(port))
}

fun g_network_address_parse(@CCall.CString host_and_port: String?, default_port: guint16, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge1594(host_and_port?.cstr?.getPointer(memScope).rawValue, default_port, error?.getPointer(memScope).rawValue))
    }
}

fun g_network_address_parse_uri(@CCall.CString uri: String?, default_port: guint16, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge1595(uri?.cstr?.getPointer(memScope).rawValue, default_port, error?.getPointer(memScope).rawValue))
    }
}

fun g_network_address_get_hostname(addr: CValuesRef<GNetworkAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1596(addr?.getPointer(memScope).rawValue))
    }
}

fun g_network_address_get_port(addr: CValuesRef<GNetworkAddress>?): guint16 {
    memScoped {
        return kniBridge1597(addr?.getPointer(memScope).rawValue)
    }
}

fun g_network_address_get_scheme(addr: CValuesRef<GNetworkAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1598(addr?.getPointer(memScope).rawValue))
    }
}

fun g_network_monitor_get_type(): GType {
    return kniBridge1599()
}

fun g_network_monitor_get_default(): CPointer<GNetworkMonitor>? {
    return interpretCPointer<GNetworkMonitor>(kniBridge1600())
}

fun g_network_monitor_get_network_available(monitor: CValuesRef<GNetworkMonitor>?): gboolean {
    memScoped {
        return kniBridge1601(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_get_network_metered(monitor: CValuesRef<GNetworkMonitor>?): gboolean {
    memScoped {
        return kniBridge1602(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_get_connectivity(monitor: CValuesRef<GNetworkMonitor>?): GNetworkConnectivity {
    memScoped {
        return kniBridge1603(monitor?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_can_reach(monitor: CValuesRef<GNetworkMonitor>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1604(monitor?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_network_monitor_can_reach_async(monitor: CValuesRef<GNetworkMonitor>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1605(monitor?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_network_monitor_can_reach_finish(monitor: CValuesRef<GNetworkMonitor>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1606(monitor?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_network_service_get_type(): GType {
    return kniBridge1607()
}

fun g_network_service_new(@CCall.CString service: String?, @CCall.CString protocol: String?, @CCall.CString domain: String?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge1608(service?.cstr?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_service(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1609(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_protocol(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1610(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_domain(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1611(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_get_scheme(srv: CValuesRef<GNetworkService>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1612(srv?.getPointer(memScope).rawValue))
    }
}

fun g_network_service_set_scheme(srv: CValuesRef<GNetworkService>?, @CCall.CString scheme: String?): Unit {
    memScoped {
        return kniBridge1613(srv?.getPointer(memScope).rawValue, scheme?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_type(): GType {
    return kniBridge1614()
}

fun g_permission_acquire(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1615(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_acquire_async(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1616(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_permission_acquire_finish(permission: CValuesRef<GPermission>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1617(permission?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_release(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1618(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_release_async(permission: CValuesRef<GPermission>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1619(permission?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_permission_release_finish(permission: CValuesRef<GPermission>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1620(permission?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_allowed(permission: CValuesRef<GPermission>?): gboolean {
    memScoped {
        return kniBridge1621(permission?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_can_acquire(permission: CValuesRef<GPermission>?): gboolean {
    memScoped {
        return kniBridge1622(permission?.getPointer(memScope).rawValue)
    }
}

fun g_permission_get_can_release(permission: CValuesRef<GPermission>?): gboolean {
    memScoped {
        return kniBridge1623(permission?.getPointer(memScope).rawValue)
    }
}

fun g_permission_impl_update(permission: CValuesRef<GPermission>?, allowed: gboolean, can_acquire: gboolean, can_release: gboolean): Unit {
    memScoped {
        return kniBridge1624(permission?.getPointer(memScope).rawValue, allowed, can_acquire, can_release)
    }
}

fun g_pollable_input_stream_get_type(): GType {
    return kniBridge1625()
}

fun g_pollable_input_stream_can_poll(stream: CValuesRef<GPollableInputStream>?): gboolean {
    memScoped {
        return kniBridge1626(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_input_stream_is_readable(stream: CValuesRef<GPollableInputStream>?): gboolean {
    memScoped {
        return kniBridge1627(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_input_stream_create_source(stream: CValuesRef<GPollableInputStream>?, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge1628(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_input_stream_read_nonblocking(stream: CValuesRef<GPollableInputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1629(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_get_type(): GType {
    return kniBridge1630()
}

fun g_pollable_output_stream_can_poll(stream: CValuesRef<GPollableOutputStream>?): gboolean {
    memScoped {
        return kniBridge1631(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_is_writable(stream: CValuesRef<GPollableOutputStream>?): gboolean {
    memScoped {
        return kniBridge1632(stream?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_create_source(stream: CValuesRef<GPollableOutputStream>?, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge1633(stream?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_output_stream_write_nonblocking(stream: CValuesRef<GPollableOutputStream>?, buffer: CValuesRef<*>?, count: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1634(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_output_stream_writev_nonblocking(stream: CValuesRef<GPollableOutputStream>?, vectors: CValuesRef<GOutputVector>?, n_vectors: gsize, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GPollableReturn {
    memScoped {
        return kniBridge1635(stream?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, n_vectors, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_source_new(pollable_stream: CValuesRef<GObject>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge1636(pollable_stream?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_source_new_full(pollable_stream: gpointer?, child_source: CValuesRef<GSource>?, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge1637(pollable_stream.rawValue, child_source?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_pollable_stream_read(stream: CValuesRef<GInputStream>?, buffer: CValuesRef<*>?, count: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1638(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_stream_write(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1639(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_pollable_stream_write_all(stream: CValuesRef<GOutputStream>?, buffer: CValuesRef<*>?, count: gsize, blocking: gboolean, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1640(stream?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, count, blocking, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_property_action_get_type(): GType {
    return kniBridge1641()
}

fun g_property_action_new(@CCall.CString name: String?, `object`: gpointer?, @CCall.CString property_name: String?): CPointer<GPropertyAction>? {
    memScoped {
        return interpretCPointer<GPropertyAction>(kniBridge1642(name?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_get_type(): GType {
    return kniBridge1643()
}

fun g_proxy_get_default_for_protocol(@CCall.CString protocol: String?): CPointer<GProxy>? {
    memScoped {
        return interpretCPointer<GProxy>(kniBridge1644(protocol?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_connect(proxy: CValuesRef<GProxy>?, connection: CValuesRef<GIOStream>?, proxy_address: CValuesRef<GProxyAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge1645(proxy?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, proxy_address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_connect_async(proxy: CValuesRef<GProxy>?, connection: CValuesRef<GIOStream>?, proxy_address: CValuesRef<GProxyAddress>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1646(proxy?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, proxy_address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_proxy_connect_finish(proxy: CValuesRef<GProxy>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge1647(proxy?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_supports_hostname(proxy: CValuesRef<GProxy>?): gboolean {
    memScoped {
        return kniBridge1648(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_proxy_address_get_type(): GType {
    return kniBridge1649()
}

fun g_proxy_address_new(inetaddr: CValuesRef<GInetAddress>?, port: guint16, @CCall.CString protocol: String?, @CCall.CString dest_hostname: String?, dest_port: guint16, @CCall.CString username: String?, @CCall.CString password: String?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1650(inetaddr?.getPointer(memScope).rawValue, port, protocol?.cstr?.getPointer(memScope).rawValue, dest_hostname?.cstr?.getPointer(memScope).rawValue, dest_port, username?.cstr?.getPointer(memScope).rawValue, password?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_protocol(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1651(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_destination_protocol(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1652(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_destination_hostname(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1653(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_destination_port(proxy: CValuesRef<GProxyAddress>?): guint16 {
    memScoped {
        return kniBridge1654(proxy?.getPointer(memScope).rawValue)
    }
}

fun g_proxy_address_get_username(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1655(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_password(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1656(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_get_uri(proxy: CValuesRef<GProxyAddress>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1657(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_socket_address_enumerator_get_type(): GType {
    return kniBridge1658()
}

fun g_socket_address_enumerator_next(enumerator: CValuesRef<GSocketAddressEnumerator>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1659(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_address_enumerator_next_async(enumerator: CValuesRef<GSocketAddressEnumerator>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1660(enumerator?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_address_enumerator_next_finish(enumerator: CValuesRef<GSocketAddressEnumerator>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1661(enumerator?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_address_enumerator_get_type(): GType {
    return kniBridge1662()
}

fun g_proxy_resolver_get_type(): GType {
    return kniBridge1663()
}

fun g_proxy_resolver_get_default(): CPointer<GProxyResolver>? {
    return interpretCPointer<GProxyResolver>(kniBridge1664())
}

fun g_proxy_resolver_is_supported(resolver: CValuesRef<GProxyResolver>?): gboolean {
    memScoped {
        return kniBridge1665(resolver?.getPointer(memScope).rawValue)
    }
}

fun g_proxy_resolver_lookup(resolver: CValuesRef<GProxyResolver>?, @CCall.CString uri: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1666(resolver?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_proxy_resolver_lookup_async(resolver: CValuesRef<GProxyResolver>?, @CCall.CString uri: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1667(resolver?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_proxy_resolver_lookup_finish(resolver: CValuesRef<GProxyResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1668(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_get_type(): GType {
    return kniBridge1669()
}

fun g_resolver_get_default(): CPointer<GResolver>? {
    return interpretCPointer<GResolver>(kniBridge1670())
}

fun g_resolver_set_default(resolver: CValuesRef<GResolver>?): Unit {
    memScoped {
        return kniBridge1671(resolver?.getPointer(memScope).rawValue)
    }
}

fun g_resolver_lookup_by_name(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1672(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_name_async(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1673(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_by_name_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1674(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_name_with_flags_async(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, flags: GResolverNameLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1675(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_by_name_with_flags_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1676(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_name_with_flags(resolver: CValuesRef<GResolver>?, @CCall.CString hostname: String?, flags: GResolverNameLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1677(resolver?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_free_addresses(addresses: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1678(addresses?.getPointer(memScope).rawValue)
    }
}

fun g_resolver_lookup_by_address(resolver: CValuesRef<GResolver>?, address: CValuesRef<GInetAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1679(resolver?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_by_address_async(resolver: CValuesRef<GResolver>?, address: CValuesRef<GInetAddress>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1680(resolver?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_by_address_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1681(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_service(resolver: CValuesRef<GResolver>?, @CCall.CString service: String?, @CCall.CString protocol: String?, @CCall.CString domain: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1682(resolver?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_service_async(resolver: CValuesRef<GResolver>?, @CCall.CString service: String?, @CCall.CString protocol: String?, @CCall.CString domain: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1683(resolver?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_service_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1684(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_records(resolver: CValuesRef<GResolver>?, @CCall.CString rrname: String?, record_type: GResolverRecordType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1685(resolver?.getPointer(memScope).rawValue, rrname?.cstr?.getPointer(memScope).rawValue, record_type, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_lookup_records_async(resolver: CValuesRef<GResolver>?, @CCall.CString rrname: String?, record_type: GResolverRecordType, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1686(resolver?.getPointer(memScope).rawValue, rrname?.cstr?.getPointer(memScope).rawValue, record_type, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_resolver_lookup_records_finish(resolver: CValuesRef<GResolver>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1687(resolver?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resolver_free_targets(targets: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge1688(targets?.getPointer(memScope).rawValue)
    }
}

fun g_resolver_error_quark(): GQuark {
    return kniBridge1689()
}

fun g_resource_error_quark(): GQuark {
    return kniBridge1690()
}

fun g_resource_get_type(): GType {
    return kniBridge1691()
}

fun g_resource_new_from_data(data: CValuesRef<GBytes>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge1692(data?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_ref(resource: CValuesRef<GResource>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge1693(resource?.getPointer(memScope).rawValue))
    }
}

fun g_resource_unref(resource: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge1694(resource?.getPointer(memScope).rawValue)
    }
}

fun g_resource_load(@CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge1695(filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_open_stream(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1696(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_lookup_data(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge1697(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_enumerate_children(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1698(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resource_get_info(resource: CValuesRef<GResource>?, @CCall.CString path: String?, lookup_flags: GResourceLookupFlags, size: CValuesRef<gsizeVar>?, flags: CValuesRef<guint32Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1699(resource?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, lookup_flags, size?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_resources_register(resource: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge1700(resource?.getPointer(memScope).rawValue)
    }
}

fun g_resources_unregister(resource: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge1701(resource?.getPointer(memScope).rawValue)
    }
}

fun g_resources_open_stream(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge1702(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resources_lookup_data(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GBytes>? {
    memScoped {
        return interpretCPointer<GBytes>(kniBridge1703(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resources_enumerate_children(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge1704(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_resources_get_info(@CCall.CString path: String?, lookup_flags: GResourceLookupFlags, size: CValuesRef<gsizeVar>?, flags: CValuesRef<guint32Var>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1705(path?.cstr?.getPointer(memScope).rawValue, lookup_flags, size?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_static_resource_init(static_resource: CValuesRef<GStaticResource>?): Unit {
    memScoped {
        return kniBridge1706(static_resource?.getPointer(memScope).rawValue)
    }
}

fun g_static_resource_fini(static_resource: CValuesRef<GStaticResource>?): Unit {
    memScoped {
        return kniBridge1707(static_resource?.getPointer(memScope).rawValue)
    }
}

fun g_static_resource_get_resource(static_resource: CValuesRef<GStaticResource>?): CPointer<GResource>? {
    memScoped {
        return interpretCPointer<GResource>(kniBridge1708(static_resource?.getPointer(memScope).rawValue))
    }
}

fun g_seekable_get_type(): GType {
    return kniBridge1709()
}

fun g_seekable_tell(seekable: CValuesRef<GSeekable>?): goffset {
    memScoped {
        return kniBridge1710(seekable?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_can_seek(seekable: CValuesRef<GSeekable>?): gboolean {
    memScoped {
        return kniBridge1711(seekable?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_seek(seekable: CValuesRef<GSeekable>?, offset: goffset, type: GSeekType, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1712(seekable?.getPointer(memScope).rawValue, offset, type.value, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_can_truncate(seekable: CValuesRef<GSeekable>?): gboolean {
    memScoped {
        return kniBridge1713(seekable?.getPointer(memScope).rawValue)
    }
}

fun g_seekable_truncate(seekable: CValuesRef<GSeekable>?, offset: goffset, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1714(seekable?.getPointer(memScope).rawValue, offset, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_source_get_type(): GType {
    return kniBridge1715()
}

fun g_settings_schema_source_get_default(): CPointer<GSettingsSchemaSource>? {
    return interpretCPointer<GSettingsSchemaSource>(kniBridge1716())
}

fun g_settings_schema_source_ref(source: CValuesRef<GSettingsSchemaSource>?): CPointer<GSettingsSchemaSource>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaSource>(kniBridge1717(source?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_source_unref(source: CValuesRef<GSettingsSchemaSource>?): Unit {
    memScoped {
        return kniBridge1718(source?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_source_new_from_directory(@CCall.CString directory: String?, parent: CValuesRef<GSettingsSchemaSource>?, trusted: gboolean, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSettingsSchemaSource>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaSource>(kniBridge1719(directory?.cstr?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, trusted, error?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_source_lookup(source: CValuesRef<GSettingsSchemaSource>?, @CCall.CString schema_id: String?, recursive: gboolean): CPointer<GSettingsSchema>? {
    memScoped {
        return interpretCPointer<GSettingsSchema>(kniBridge1720(source?.getPointer(memScope).rawValue, schema_id?.cstr?.getPointer(memScope).rawValue, recursive))
    }
}

fun g_settings_schema_source_list_schemas(source: CValuesRef<GSettingsSchemaSource>?, recursive: gboolean, non_relocatable: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, relocatable: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?): Unit {
    memScoped {
        return kniBridge1721(source?.getPointer(memScope).rawValue, recursive, non_relocatable?.getPointer(memScope).rawValue, relocatable?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_get_type(): GType {
    return kniBridge1722()
}

fun g_settings_schema_ref(schema: CValuesRef<GSettingsSchema>?): CPointer<GSettingsSchema>? {
    memScoped {
        return interpretCPointer<GSettingsSchema>(kniBridge1723(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_unref(schema: CValuesRef<GSettingsSchema>?): Unit {
    memScoped {
        return kniBridge1724(schema?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_get_id(schema: CValuesRef<GSettingsSchema>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1725(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_get_path(schema: CValuesRef<GSettingsSchema>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1726(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_get_key(schema: CValuesRef<GSettingsSchema>?, @CCall.CString name: String?): CPointer<GSettingsSchemaKey>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaKey>(kniBridge1727(schema?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_has_key(schema: CValuesRef<GSettingsSchema>?, @CCall.CString name: String?): gboolean {
    memScoped {
        return kniBridge1728(schema?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_list_keys(schema: CValuesRef<GSettingsSchema>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1729(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_list_children(schema: CValuesRef<GSettingsSchema>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1730(schema?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_type(): GType {
    return kniBridge1731()
}

fun g_settings_schema_key_ref(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GSettingsSchemaKey>? {
    memScoped {
        return interpretCPointer<GSettingsSchemaKey>(kniBridge1732(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_unref(key: CValuesRef<GSettingsSchemaKey>?): Unit {
    memScoped {
        return kniBridge1733(key?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_key_get_value_type(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GVariantType>? {
    memScoped {
        return interpretCPointer<GVariantType>(kniBridge1734(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_default_value(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1735(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_range(key: CValuesRef<GSettingsSchemaKey>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1736(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_range_check(key: CValuesRef<GSettingsSchemaKey>?, value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge1737(key?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_schema_key_get_name(key: CValuesRef<GSettingsSchemaKey>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1738(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_summary(key: CValuesRef<GSettingsSchemaKey>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1739(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_schema_key_get_description(key: CValuesRef<GSettingsSchemaKey>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1740(key?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_type(): GType {
    return kniBridge1741()
}

fun g_settings_list_schemas(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1742())
}

fun g_settings_list_relocatable_schemas(): CPointer<CPointerVar<gcharVar>>? {
    return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1743())
}

fun g_settings_new(@CCall.CString schema_id: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge1744(schema_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_with_path(@CCall.CString schema_id: String?, @CCall.CString path: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge1745(schema_id?.cstr?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_with_backend(@CCall.CString schema_id: String?, backend: CValuesRef<GSettingsBackend>?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge1746(schema_id?.cstr?.getPointer(memScope).rawValue, backend?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_with_backend_and_path(@CCall.CString schema_id: String?, backend: CValuesRef<GSettingsBackend>?, @CCall.CString path: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge1747(schema_id?.cstr?.getPointer(memScope).rawValue, backend?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_new_full(schema: CValuesRef<GSettingsSchema>?, backend: CValuesRef<GSettingsBackend>?, @CCall.CString path: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge1748(schema?.getPointer(memScope).rawValue, backend?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_list_children(settings: CValuesRef<GSettings>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1749(settings?.getPointer(memScope).rawValue))
    }
}

fun g_settings_list_keys(settings: CValuesRef<GSettings>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1750(settings?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_range(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1751(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_range_check(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge1752(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: CValuesRef<GVariant>?): gboolean {
    memScoped {
        return kniBridge1753(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1754(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_user_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1755(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_default_value(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge1756(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk319")
external fun g_settings_set(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, @CCall.CString format: String?, vararg variadicArguments: Any?): gboolean

@CCall("knifunptr_libgtk320")
external fun g_settings_get(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_settings_reset(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): Unit {
    memScoped {
        return kniBridge1757(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_int(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gint {
    memScoped {
        return kniBridge1758(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_int(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gint): gboolean {
    memScoped {
        return kniBridge1759(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_int64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gint64 {
    memScoped {
        return kniBridge1760(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_int64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gint64): gboolean {
    memScoped {
        return kniBridge1761(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_uint(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): guint {
    memScoped {
        return kniBridge1762(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_uint(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: guint): gboolean {
    memScoped {
        return kniBridge1763(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_uint64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): guint64 {
    memScoped {
        return kniBridge1764(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_uint64(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: guint64): gboolean {
    memScoped {
        return kniBridge1765(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_string(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1766(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_set_string(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, @CCall.CString value: String?): gboolean {
    memScoped {
        return kniBridge1767(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_boolean(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gboolean {
    memScoped {
        return kniBridge1768(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_boolean(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gboolean): gboolean {
    memScoped {
        return kniBridge1769(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_double(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gdouble {
    memScoped {
        return kniBridge1770(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_double(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gdouble): gboolean {
    memScoped {
        return kniBridge1771(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_strv(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge1772(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_set_strv(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge1773(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_enum(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): gint {
    memScoped {
        return kniBridge1774(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_enum(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: gint): gboolean {
    memScoped {
        return kniBridge1775(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_flags(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): guint {
    memScoped {
        return kniBridge1776(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_set_flags(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, value: guint): gboolean {
    memScoped {
        return kniBridge1777(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun g_settings_get_child(settings: CValuesRef<GSettings>?, @CCall.CString name: String?): CPointer<GSettings>? {
    memScoped {
        return interpretCPointer<GSettings>(kniBridge1778(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_is_writable(settings: CValuesRef<GSettings>?, @CCall.CString name: String?): gboolean {
    memScoped {
        return kniBridge1779(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_delay(settings: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge1780(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_apply(settings: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge1781(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_revert(settings: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge1782(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_get_has_unapplied(settings: CValuesRef<GSettings>?): gboolean {
    memScoped {
        return kniBridge1783(settings?.getPointer(memScope).rawValue)
    }
}

fun g_settings_sync(): Unit {
    return kniBridge1784()
}

fun g_settings_bind(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, `object`: gpointer?, @CCall.CString property: String?, flags: GSettingsBindFlags): Unit {
    memScoped {
        return kniBridge1785(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue, flags)
    }
}

fun g_settings_bind_with_mapping(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, `object`: gpointer?, @CCall.CString property: String?, flags: GSettingsBindFlags, get_mapping: GSettingsBindGetMapping?, set_mapping: GSettingsBindSetMapping?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1786(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue, flags, get_mapping.rawValue, set_mapping.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun g_settings_bind_writable(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, `object`: gpointer?, @CCall.CString property: String?, inverted: gboolean): Unit {
    memScoped {
        return kniBridge1787(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, `object`.rawValue, property?.cstr?.getPointer(memScope).rawValue, inverted)
    }
}

fun g_settings_unbind(`object`: gpointer?, @CCall.CString property: String?): Unit {
    memScoped {
        return kniBridge1788(`object`.rawValue, property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_settings_create_action(settings: CValuesRef<GSettings>?, @CCall.CString key: String?): CPointer<GAction>? {
    memScoped {
        return interpretCPointer<GAction>(kniBridge1789(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_settings_get_mapped(settings: CValuesRef<GSettings>?, @CCall.CString key: String?, mapping: GSettingsGetMapping?, user_data: gpointer?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1790(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, mapping.rawValue, user_data.rawValue))
    }
}

fun g_simple_action_get_type(): GType {
    return kniBridge1791()
}

fun g_simple_action_new(@CCall.CString name: String?, parameter_type: CValuesRef<GVariantType>?): CPointer<GSimpleAction>? {
    memScoped {
        return interpretCPointer<GSimpleAction>(kniBridge1792(name?.cstr?.getPointer(memScope).rawValue, parameter_type?.getPointer(memScope).rawValue))
    }
}

fun g_simple_action_new_stateful(@CCall.CString name: String?, parameter_type: CValuesRef<GVariantType>?, state: CValuesRef<GVariant>?): CPointer<GSimpleAction>? {
    memScoped {
        return interpretCPointer<GSimpleAction>(kniBridge1793(name?.cstr?.getPointer(memScope).rawValue, parameter_type?.getPointer(memScope).rawValue, state?.getPointer(memScope).rawValue))
    }
}

fun g_simple_action_set_enabled(simple: CValuesRef<GSimpleAction>?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge1794(simple?.getPointer(memScope).rawValue, enabled)
    }
}

fun g_simple_action_set_state(simple: CValuesRef<GSimpleAction>?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1795(simple?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_set_state_hint(simple: CValuesRef<GSimpleAction>?, state_hint: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge1796(simple?.getPointer(memScope).rawValue, state_hint?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_group_get_type(): GType {
    return kniBridge1797()
}

fun g_simple_action_group_new(): CPointer<GSimpleActionGroup>? {
    return interpretCPointer<GSimpleActionGroup>(kniBridge1798())
}

fun g_simple_action_group_lookup(simple: CValuesRef<GSimpleActionGroup>?, @CCall.CString action_name: String?): CPointer<GAction>? {
    memScoped {
        return interpretCPointer<GAction>(kniBridge1799(simple?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_simple_action_group_insert(simple: CValuesRef<GSimpleActionGroup>?, action: CValuesRef<GAction>?): Unit {
    memScoped {
        return kniBridge1800(simple?.getPointer(memScope).rawValue, action?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_group_remove(simple: CValuesRef<GSimpleActionGroup>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge1801(simple?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_simple_action_group_add_entries(simple: CValuesRef<GSimpleActionGroup>?, entries: CValuesRef<GActionEntry>?, n_entries: gint, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1802(simple?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, n_entries, user_data.rawValue)
    }
}

fun g_simple_async_result_get_type(): GType {
    return kniBridge1803()
}

fun g_simple_async_result_new(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, source_tag: gpointer?): CPointer<GSimpleAsyncResult>? {
    memScoped {
        return interpretCPointer<GSimpleAsyncResult>(kniBridge1804(source_object?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, source_tag.rawValue))
    }
}

@CCall("knifunptr_libgtk321")
external fun g_simple_async_result_new_error(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): CPointer<GSimpleAsyncResult>?

fun g_simple_async_result_new_from_error(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): CPointer<GSimpleAsyncResult>? {
    memScoped {
        return interpretCPointer<GSimpleAsyncResult>(kniBridge1805(source_object?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_new_take_error(source_object: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): CPointer<GSimpleAsyncResult>? {
    memScoped {
        return interpretCPointer<GSimpleAsyncResult>(kniBridge1806(source_object?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_set_op_res_gpointer(simple: CValuesRef<GSimpleAsyncResult>?, op_res: gpointer?, destroy_op_res: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1807(simple?.getPointer(memScope).rawValue, op_res.rawValue, destroy_op_res.rawValue)
    }
}

fun g_simple_async_result_get_op_res_gpointer(simple: CValuesRef<GSimpleAsyncResult>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1808(simple?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_set_op_res_gssize(simple: CValuesRef<GSimpleAsyncResult>?, op_res: gssize): Unit {
    memScoped {
        return kniBridge1809(simple?.getPointer(memScope).rawValue, op_res)
    }
}

fun g_simple_async_result_get_op_res_gssize(simple: CValuesRef<GSimpleAsyncResult>?): gssize {
    memScoped {
        return kniBridge1810(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_set_op_res_gboolean(simple: CValuesRef<GSimpleAsyncResult>?, op_res: gboolean): Unit {
    memScoped {
        return kniBridge1811(simple?.getPointer(memScope).rawValue, op_res)
    }
}

fun g_simple_async_result_get_op_res_gboolean(simple: CValuesRef<GSimpleAsyncResult>?): gboolean {
    memScoped {
        return kniBridge1812(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_set_check_cancellable(simple: CValuesRef<GSimpleAsyncResult>?, check_cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge1813(simple?.getPointer(memScope).rawValue, check_cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_get_source_tag(simple: CValuesRef<GSimpleAsyncResult>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1814(simple?.getPointer(memScope).rawValue))
    }
}

fun g_simple_async_result_set_handle_cancellation(simple: CValuesRef<GSimpleAsyncResult>?, handle_cancellation: gboolean): Unit {
    memScoped {
        return kniBridge1815(simple?.getPointer(memScope).rawValue, handle_cancellation)
    }
}

fun g_simple_async_result_complete(simple: CValuesRef<GSimpleAsyncResult>?): Unit {
    memScoped {
        return kniBridge1816(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_complete_in_idle(simple: CValuesRef<GSimpleAsyncResult>?): Unit {
    memScoped {
        return kniBridge1817(simple?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_run_in_thread(simple: CValuesRef<GSimpleAsyncResult>?, func: GSimpleAsyncThreadFunc?, io_priority: Int, cancellable: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge1818(simple?.getPointer(memScope).rawValue, func.rawValue, io_priority, cancellable?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_set_from_error(simple: CValuesRef<GSimpleAsyncResult>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge1819(simple?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_take_error(simple: CValuesRef<GSimpleAsyncResult>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge1820(simple?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_result_propagate_error(simple: CValuesRef<GSimpleAsyncResult>?, dest: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1821(simple?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk322")
external fun g_simple_async_result_set_error(simple: CValuesRef<GSimpleAsyncResult>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_simple_async_result_set_error_va(simple: CValuesRef<GSimpleAsyncResult>?, domain: GQuark, code: gint, @CCall.CString format: String?, args: platform.posix.va_list?): Unit {
    memScoped {
        return kniBridge1822(simple?.getPointer(memScope).rawValue, domain, code, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun g_simple_async_result_is_valid(result: CValuesRef<GAsyncResult>?, source: CValuesRef<GObject>?, source_tag: gpointer?): gboolean {
    memScoped {
        return kniBridge1823(result?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, source_tag.rawValue)
    }
}

@CCall("knifunptr_libgtk323")
external fun g_simple_async_report_error_in_idle(`object`: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_simple_async_report_gerror_in_idle(`object`: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge1824(`object`?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_async_report_take_gerror_in_idle(`object`: CValuesRef<GObject>?, callback: GAsyncReadyCallback?, user_data: gpointer?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge1825(`object`?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_simple_io_stream_get_type(): GType {
    return kniBridge1826()
}

fun g_simple_io_stream_new(input_stream: CValuesRef<GInputStream>?, output_stream: CValuesRef<GOutputStream>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge1827(input_stream?.getPointer(memScope).rawValue, output_stream?.getPointer(memScope).rawValue))
    }
}

fun g_simple_permission_get_type(): GType {
    return kniBridge1828()
}

fun g_simple_permission_new(allowed: gboolean): CPointer<GPermission>? {
    return interpretCPointer<GPermission>(kniBridge1829(allowed))
}

fun g_socket_client_get_type(): GType {
    return kniBridge1830()
}

fun g_socket_client_new(): CPointer<GSocketClient>? {
    return interpretCPointer<GSocketClient>(kniBridge1831())
}

fun g_socket_client_get_family(client: CValuesRef<GSocketClient>?): GSocketFamily {
    memScoped {
        return kniBridge1832(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_family(client: CValuesRef<GSocketClient>?, family: GSocketFamily): Unit {
    memScoped {
        return kniBridge1833(client?.getPointer(memScope).rawValue, family)
    }
}

fun g_socket_client_get_socket_type(client: CValuesRef<GSocketClient>?): GSocketType {
    memScoped {
        return GSocketType.byValue(kniBridge1834(client?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_set_socket_type(client: CValuesRef<GSocketClient>?, type: GSocketType): Unit {
    memScoped {
        return kniBridge1835(client?.getPointer(memScope).rawValue, type.value)
    }
}

fun g_socket_client_get_protocol(client: CValuesRef<GSocketClient>?): GSocketProtocol {
    memScoped {
        return kniBridge1836(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_protocol(client: CValuesRef<GSocketClient>?, protocol: GSocketProtocol): Unit {
    memScoped {
        return kniBridge1837(client?.getPointer(memScope).rawValue, protocol)
    }
}

fun g_socket_client_get_local_address(client: CValuesRef<GSocketClient>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1838(client?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_set_local_address(client: CValuesRef<GSocketClient>?, address: CValuesRef<GSocketAddress>?): Unit {
    memScoped {
        return kniBridge1839(client?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_get_timeout(client: CValuesRef<GSocketClient>?): guint {
    memScoped {
        return kniBridge1840(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_timeout(client: CValuesRef<GSocketClient>?, timeout: guint): Unit {
    memScoped {
        return kniBridge1841(client?.getPointer(memScope).rawValue, timeout)
    }
}

fun g_socket_client_get_enable_proxy(client: CValuesRef<GSocketClient>?): gboolean {
    memScoped {
        return kniBridge1842(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_enable_proxy(client: CValuesRef<GSocketClient>?, enable: gboolean): Unit {
    memScoped {
        return kniBridge1843(client?.getPointer(memScope).rawValue, enable)
    }
}

fun g_socket_client_get_tls(client: CValuesRef<GSocketClient>?): gboolean {
    memScoped {
        return kniBridge1844(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_tls(client: CValuesRef<GSocketClient>?, tls: gboolean): Unit {
    memScoped {
        return kniBridge1845(client?.getPointer(memScope).rawValue, tls)
    }
}

fun g_socket_client_get_tls_validation_flags(client: CValuesRef<GSocketClient>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge1846(client?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_set_tls_validation_flags(client: CValuesRef<GSocketClient>?, flags: GTlsCertificateFlags): Unit {
    memScoped {
        return kniBridge1847(client?.getPointer(memScope).rawValue, flags)
    }
}

fun g_socket_client_get_proxy_resolver(client: CValuesRef<GSocketClient>?): CPointer<GProxyResolver>? {
    memScoped {
        return interpretCPointer<GProxyResolver>(kniBridge1848(client?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_set_proxy_resolver(client: CValuesRef<GSocketClient>?, proxy_resolver: CValuesRef<GProxyResolver>?): Unit {
    memScoped {
        return kniBridge1849(client?.getPointer(memScope).rawValue, proxy_resolver?.getPointer(memScope).rawValue)
    }
}

fun g_socket_client_connect(client: CValuesRef<GSocketClient>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1850(client?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_host(client: CValuesRef<GSocketClient>?, @CCall.CString host_and_port: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1851(client?.getPointer(memScope).rawValue, host_and_port?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_service(client: CValuesRef<GSocketClient>?, @CCall.CString domain: String?, @CCall.CString service: String?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1852(client?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_uri(client: CValuesRef<GSocketClient>?, @CCall.CString uri: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1853(client?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_async(client: CValuesRef<GSocketClient>?, connectable: CValuesRef<GSocketConnectable>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1854(client?.getPointer(memScope).rawValue, connectable?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1855(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_host_async(client: CValuesRef<GSocketClient>?, @CCall.CString host_and_port: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1856(client?.getPointer(memScope).rawValue, host_and_port?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_to_host_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1857(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_service_async(client: CValuesRef<GSocketClient>?, @CCall.CString domain: String?, @CCall.CString service: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1858(client?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_to_service_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1859(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_connect_to_uri_async(client: CValuesRef<GSocketClient>?, @CCall.CString uri: String?, default_port: guint16, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1860(client?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, default_port, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_client_connect_to_uri_finish(client: CValuesRef<GSocketClient>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1861(client?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_client_add_application_proxy(client: CValuesRef<GSocketClient>?, @CCall.CString protocol: String?): Unit {
    memScoped {
        return kniBridge1862(client?.getPointer(memScope).rawValue, protocol?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connectable_get_type(): GType {
    return kniBridge1863()
}

fun g_socket_connectable_enumerate(connectable: CValuesRef<GSocketConnectable>?): CPointer<GSocketAddressEnumerator>? {
    memScoped {
        return interpretCPointer<GSocketAddressEnumerator>(kniBridge1864(connectable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connectable_proxy_enumerate(connectable: CValuesRef<GSocketConnectable>?): CPointer<GSocketAddressEnumerator>? {
    memScoped {
        return interpretCPointer<GSocketAddressEnumerator>(kniBridge1865(connectable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connectable_to_string(connectable: CValuesRef<GSocketConnectable>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1866(connectable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_type(): GType {
    return kniBridge1867()
}

fun g_socket_new(family: GSocketFamily, type: GSocketType, protocol: GSocketProtocol, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge1868(family, type.value, protocol, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_new_from_fd(fd: gint, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge1869(fd, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_fd(socket: CValuesRef<GSocket>?): Int {
    memScoped {
        return kniBridge1870(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_family(socket: CValuesRef<GSocket>?): GSocketFamily {
    memScoped {
        return kniBridge1871(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_socket_type(socket: CValuesRef<GSocket>?): GSocketType {
    memScoped {
        return GSocketType.byValue(kniBridge1872(socket?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_protocol(socket: CValuesRef<GSocket>?): GSocketProtocol {
    memScoped {
        return kniBridge1873(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_local_address(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1874(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_get_remote_address(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1875(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_set_blocking(socket: CValuesRef<GSocket>?, blocking: gboolean): Unit {
    memScoped {
        return kniBridge1876(socket?.getPointer(memScope).rawValue, blocking)
    }
}

fun g_socket_get_blocking(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1877(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_keepalive(socket: CValuesRef<GSocket>?, keepalive: gboolean): Unit {
    memScoped {
        return kniBridge1878(socket?.getPointer(memScope).rawValue, keepalive)
    }
}

fun g_socket_get_keepalive(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1879(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_listen_backlog(socket: CValuesRef<GSocket>?): gint {
    memScoped {
        return kniBridge1880(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_listen_backlog(socket: CValuesRef<GSocket>?, backlog: gint): Unit {
    memScoped {
        return kniBridge1881(socket?.getPointer(memScope).rawValue, backlog)
    }
}

fun g_socket_get_timeout(socket: CValuesRef<GSocket>?): guint {
    memScoped {
        return kniBridge1882(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_timeout(socket: CValuesRef<GSocket>?, timeout: guint): Unit {
    memScoped {
        return kniBridge1883(socket?.getPointer(memScope).rawValue, timeout)
    }
}

fun g_socket_get_ttl(socket: CValuesRef<GSocket>?): guint {
    memScoped {
        return kniBridge1884(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_ttl(socket: CValuesRef<GSocket>?, ttl: guint): Unit {
    memScoped {
        return kniBridge1885(socket?.getPointer(memScope).rawValue, ttl)
    }
}

fun g_socket_get_broadcast(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1886(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_broadcast(socket: CValuesRef<GSocket>?, broadcast: gboolean): Unit {
    memScoped {
        return kniBridge1887(socket?.getPointer(memScope).rawValue, broadcast)
    }
}

fun g_socket_get_multicast_loopback(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1888(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_multicast_loopback(socket: CValuesRef<GSocket>?, loopback: gboolean): Unit {
    memScoped {
        return kniBridge1889(socket?.getPointer(memScope).rawValue, loopback)
    }
}

fun g_socket_get_multicast_ttl(socket: CValuesRef<GSocket>?): guint {
    memScoped {
        return kniBridge1890(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_multicast_ttl(socket: CValuesRef<GSocket>?, ttl: guint): Unit {
    memScoped {
        return kniBridge1891(socket?.getPointer(memScope).rawValue, ttl)
    }
}

fun g_socket_is_connected(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1892(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_bind(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, allow_reuse: gboolean, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1893(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, allow_reuse, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_join_multicast_group(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: gboolean, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1894(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_leave_multicast_group(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: gboolean, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1895(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_join_multicast_group_ssm(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: CValuesRef<GInetAddress>?, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1896(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific?.getPointer(memScope).rawValue, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_leave_multicast_group_ssm(socket: CValuesRef<GSocket>?, group: CValuesRef<GInetAddress>?, source_specific: CValuesRef<GInetAddress>?, @CCall.CString iface: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1897(socket?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, source_specific?.getPointer(memScope).rawValue, iface?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connect(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1898(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_check_connect_result(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1899(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_available_bytes(socket: CValuesRef<GSocket>?): gssize {
    memScoped {
        return kniBridge1900(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_condition_check(socket: CValuesRef<GSocket>?, condition: GIOCondition): GIOCondition {
    memScoped {
        return kniBridge1901(socket?.getPointer(memScope).rawValue, condition)
    }
}

fun g_socket_condition_wait(socket: CValuesRef<GSocket>?, condition: GIOCondition, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1902(socket?.getPointer(memScope).rawValue, condition, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_condition_timed_wait(socket: CValuesRef<GSocket>?, condition: GIOCondition, timeout_us: gint64, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1903(socket?.getPointer(memScope).rawValue, condition, timeout_us, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_accept(socket: CValuesRef<GSocket>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge1904(socket?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listen(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1905(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive(socket: CValuesRef<GSocket>?, buffer: CValuesRef<gcharVar>?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1906(socket?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive_from(socket: CValuesRef<GSocket>?, address: CValuesRef<CPointerVar<GSocketAddress>>?, buffer: CValuesRef<gcharVar>?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1907(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send(socket: CValuesRef<GSocket>?, @CCall.CString buffer: String?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1908(socket?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_to(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, @CCall.CString buffer: String?, size: gsize, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1909(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, size, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive_message(socket: CValuesRef<GSocket>?, address: CValuesRef<CPointerVar<GSocketAddress>>?, vectors: CValuesRef<GInputVector>?, num_vectors: gint, messages: CValuesRef<CPointerVar<CPointerVar<GSocketControlMessage>>>?, num_messages: CValuesRef<gintVar>?, flags: CValuesRef<gintVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1910(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, num_vectors, messages?.getPointer(memScope).rawValue, num_messages?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_message(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, vectors: CValuesRef<GOutputVector>?, num_vectors: gint, messages: CValuesRef<CPointerVar<GSocketControlMessage>>?, num_messages: gint, flags: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1911(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, num_vectors, messages?.getPointer(memScope).rawValue, num_messages, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_receive_messages(socket: CValuesRef<GSocket>?, messages: CValuesRef<GInputMessage>?, num_messages: guint, flags: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge1912(socket?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_messages(socket: CValuesRef<GSocket>?, messages: CValuesRef<GOutputMessage>?, num_messages: guint, flags: gint, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge1913(socket?.getPointer(memScope).rawValue, messages?.getPointer(memScope).rawValue, num_messages, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_close(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1914(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_shutdown(socket: CValuesRef<GSocket>?, shutdown_read: gboolean, shutdown_write: gboolean, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1915(socket?.getPointer(memScope).rawValue, shutdown_read, shutdown_write, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_is_closed(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1916(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_create_source(socket: CValuesRef<GSocket>?, condition: GIOCondition, cancellable: CValuesRef<GCancellable>?): CPointer<GSource>? {
    memScoped {
        return interpretCPointer<GSource>(kniBridge1917(socket?.getPointer(memScope).rawValue, condition, cancellable?.getPointer(memScope).rawValue))
    }
}

fun g_socket_speaks_ipv4(socket: CValuesRef<GSocket>?): gboolean {
    memScoped {
        return kniBridge1918(socket?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_credentials(socket: CValuesRef<GSocket>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GCredentials>? {
    memScoped {
        return interpretCPointer<GCredentials>(kniBridge1919(socket?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_receive_with_blocking(socket: CValuesRef<GSocket>?, buffer: CValuesRef<gcharVar>?, size: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1920(socket?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, size, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_with_blocking(socket: CValuesRef<GSocket>?, @CCall.CString buffer: String?, size: gsize, blocking: gboolean, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge1921(socket?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, size, blocking, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_send_message_with_timeout(socket: CValuesRef<GSocket>?, address: CValuesRef<GSocketAddress>?, vectors: CValuesRef<GOutputVector>?, num_vectors: gint, messages: CValuesRef<CPointerVar<GSocketControlMessage>>?, num_messages: gint, flags: gint, timeout_us: gint64, bytes_written: CValuesRef<gsizeVar>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GPollableReturn {
    memScoped {
        return kniBridge1922(socket?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, vectors?.getPointer(memScope).rawValue, num_vectors, messages?.getPointer(memScope).rawValue, num_messages, flags, timeout_us, bytes_written?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_get_option(socket: CValuesRef<GSocket>?, level: gint, optname: gint, value: CValuesRef<gintVar>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1923(socket?.getPointer(memScope).rawValue, level, optname, value?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_set_option(socket: CValuesRef<GSocket>?, level: gint, optname: gint, value: gint, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1924(socket?.getPointer(memScope).rawValue, level, optname, value, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_get_type(): GType {
    return kniBridge1925()
}

fun g_socket_connection_is_connected(connection: CValuesRef<GSocketConnection>?): gboolean {
    memScoped {
        return kniBridge1926(connection?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_connect(connection: CValuesRef<GSocketConnection>?, address: CValuesRef<GSocketAddress>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1927(connection?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_connect_async(connection: CValuesRef<GSocketConnection>?, address: CValuesRef<GSocketAddress>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1928(connection?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_connection_connect_finish(connection: CValuesRef<GSocketConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1929(connection?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_connection_get_socket(connection: CValuesRef<GSocketConnection>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge1930(connection?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connection_get_local_address(connection: CValuesRef<GSocketConnection>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1931(connection?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connection_get_remote_address(connection: CValuesRef<GSocketConnection>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketAddress>? {
    memScoped {
        return interpretCPointer<GSocketAddress>(kniBridge1932(connection?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_connection_factory_register_type(g_type: GType, family: GSocketFamily, type: GSocketType, protocol: gint): Unit {
    return kniBridge1933(g_type, family, type.value, protocol)
}

fun g_socket_connection_factory_lookup_type(family: GSocketFamily, type: GSocketType, protocol_id: gint): GType {
    return kniBridge1934(family, type.value, protocol_id)
}

fun g_socket_connection_factory_create_connection(socket: CValuesRef<GSocket>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1935(socket?.getPointer(memScope).rawValue))
    }
}

fun g_socket_control_message_get_type(): GType {
    return kniBridge1936()
}

fun g_socket_control_message_get_size(message: CValuesRef<GSocketControlMessage>?): gsize {
    memScoped {
        return kniBridge1937(message?.getPointer(memScope).rawValue)
    }
}

fun g_socket_control_message_get_level(message: CValuesRef<GSocketControlMessage>?): Int {
    memScoped {
        return kniBridge1938(message?.getPointer(memScope).rawValue)
    }
}

fun g_socket_control_message_get_msg_type(message: CValuesRef<GSocketControlMessage>?): Int {
    memScoped {
        return kniBridge1939(message?.getPointer(memScope).rawValue)
    }
}

fun g_socket_control_message_serialize(message: CValuesRef<GSocketControlMessage>?, data: gpointer?): Unit {
    memScoped {
        return kniBridge1940(message?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun g_socket_control_message_deserialize(level: Int, type: Int, size: gsize, data: gpointer?): CPointer<GSocketControlMessage>? {
    return interpretCPointer<GSocketControlMessage>(kniBridge1941(level, type, size, data.rawValue))
}

fun g_socket_listener_get_type(): GType {
    return kniBridge1942()
}

fun g_socket_listener_new(): CPointer<GSocketListener>? {
    return interpretCPointer<GSocketListener>(kniBridge1943())
}

fun g_socket_listener_set_backlog(listener: CValuesRef<GSocketListener>?, listen_backlog: Int): Unit {
    memScoped {
        return kniBridge1944(listener?.getPointer(memScope).rawValue, listen_backlog)
    }
}

fun g_socket_listener_add_socket(listener: CValuesRef<GSocketListener>?, socket: CValuesRef<GSocket>?, source_object: CValuesRef<GObject>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1945(listener?.getPointer(memScope).rawValue, socket?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_add_address(listener: CValuesRef<GSocketListener>?, address: CValuesRef<GSocketAddress>?, type: GSocketType, protocol: GSocketProtocol, source_object: CValuesRef<GObject>?, effective_address: CValuesRef<CPointerVar<GSocketAddress>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1946(listener?.getPointer(memScope).rawValue, address?.getPointer(memScope).rawValue, type.value, protocol, source_object?.getPointer(memScope).rawValue, effective_address?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_add_inet_port(listener: CValuesRef<GSocketListener>?, port: guint16, source_object: CValuesRef<GObject>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge1947(listener?.getPointer(memScope).rawValue, port, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_add_any_inet_port(listener: CValuesRef<GSocketListener>?, source_object: CValuesRef<GObject>?, error: CValuesRef<CPointerVar<GError>>?): guint16 {
    memScoped {
        return kniBridge1948(listener?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_socket_listener_accept_socket(listener: CValuesRef<GSocketListener>?, source_object: CValuesRef<CPointerVar<GObject>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge1949(listener?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_accept_socket_async(listener: CValuesRef<GSocketListener>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1950(listener?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_listener_accept_socket_finish(listener: CValuesRef<GSocketListener>?, result: CValuesRef<GAsyncResult>?, source_object: CValuesRef<CPointerVar<GObject>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocket>? {
    memScoped {
        return interpretCPointer<GSocket>(kniBridge1951(listener?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_accept(listener: CValuesRef<GSocketListener>?, source_object: CValuesRef<CPointerVar<GObject>>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1952(listener?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_accept_async(listener: CValuesRef<GSocketListener>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge1953(listener?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_socket_listener_accept_finish(listener: CValuesRef<GSocketListener>?, result: CValuesRef<GAsyncResult>?, source_object: CValuesRef<CPointerVar<GObject>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge1954(listener?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, source_object?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_socket_listener_close(listener: CValuesRef<GSocketListener>?): Unit {
    memScoped {
        return kniBridge1955(listener?.getPointer(memScope).rawValue)
    }
}

fun g_socket_service_get_type(): GType {
    return kniBridge1956()
}

fun g_socket_service_new(): CPointer<GSocketService>? {
    return interpretCPointer<GSocketService>(kniBridge1957())
}

fun g_socket_service_start(service: CValuesRef<GSocketService>?): Unit {
    memScoped {
        return kniBridge1958(service?.getPointer(memScope).rawValue)
    }
}

fun g_socket_service_stop(service: CValuesRef<GSocketService>?): Unit {
    memScoped {
        return kniBridge1959(service?.getPointer(memScope).rawValue)
    }
}

fun g_socket_service_is_active(service: CValuesRef<GSocketService>?): gboolean {
    memScoped {
        return kniBridge1960(service?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_type(): GType {
    return kniBridge1961()
}

fun g_srv_target_new(@CCall.CString hostname: String?, port: guint16, priority: guint16, weight: guint16): CPointer<GSrvTarget>? {
    memScoped {
        return interpretCPointer<GSrvTarget>(kniBridge1962(hostname?.cstr?.getPointer(memScope).rawValue, port, priority, weight))
    }
}

fun g_srv_target_copy(target: CValuesRef<GSrvTarget>?): CPointer<GSrvTarget>? {
    memScoped {
        return interpretCPointer<GSrvTarget>(kniBridge1963(target?.getPointer(memScope).rawValue))
    }
}

fun g_srv_target_free(target: CValuesRef<GSrvTarget>?): Unit {
    memScoped {
        return kniBridge1964(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_hostname(target: CValuesRef<GSrvTarget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1965(target?.getPointer(memScope).rawValue))
    }
}

fun g_srv_target_get_port(target: CValuesRef<GSrvTarget>?): guint16 {
    memScoped {
        return kniBridge1966(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_priority(target: CValuesRef<GSrvTarget>?): guint16 {
    memScoped {
        return kniBridge1967(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_get_weight(target: CValuesRef<GSrvTarget>?): guint16 {
    memScoped {
        return kniBridge1968(target?.getPointer(memScope).rawValue)
    }
}

fun g_srv_target_list_sort(targets: CValuesRef<GList>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge1969(targets?.getPointer(memScope).rawValue))
    }
}

fun g_simple_proxy_resolver_get_type(): GType {
    return kniBridge1970()
}

fun g_simple_proxy_resolver_new(@CCall.CString default_proxy: String?, ignore_hosts: CValuesRef<CPointerVar<gcharVar>>?): CPointer<GProxyResolver>? {
    memScoped {
        return interpretCPointer<GProxyResolver>(kniBridge1971(default_proxy?.cstr?.getPointer(memScope).rawValue, ignore_hosts?.getPointer(memScope).rawValue))
    }
}

fun g_simple_proxy_resolver_set_default_proxy(resolver: CValuesRef<GSimpleProxyResolver>?, @CCall.CString default_proxy: String?): Unit {
    memScoped {
        return kniBridge1972(resolver?.getPointer(memScope).rawValue, default_proxy?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_simple_proxy_resolver_set_ignore_hosts(resolver: CValuesRef<GSimpleProxyResolver>?, ignore_hosts: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge1973(resolver?.getPointer(memScope).rawValue, ignore_hosts?.getPointer(memScope).rawValue)
    }
}

fun g_simple_proxy_resolver_set_uri_proxy(resolver: CValuesRef<GSimpleProxyResolver>?, @CCall.CString uri_scheme: String?, @CCall.CString proxy: String?): Unit {
    memScoped {
        return kniBridge1974(resolver?.getPointer(memScope).rawValue, uri_scheme?.cstr?.getPointer(memScope).rawValue, proxy?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_type(): GType {
    return kniBridge1975()
}

fun g_task_new(source_object: gpointer?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, callback_data: gpointer?): CPointer<GTask>? {
    memScoped {
        return interpretCPointer<GTask>(kniBridge1976(source_object.rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, callback_data.rawValue))
    }
}

fun g_task_report_error(source_object: gpointer?, callback: GAsyncReadyCallback?, callback_data: gpointer?, source_tag: gpointer?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge1977(source_object.rawValue, callback.rawValue, callback_data.rawValue, source_tag.rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk324")
external fun g_task_report_new_error(source_object: gpointer?, callback: GAsyncReadyCallback?, callback_data: gpointer?, source_tag: gpointer?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_task_set_task_data(task: CValuesRef<GTask>?, task_data: gpointer?, task_data_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1978(task?.getPointer(memScope).rawValue, task_data.rawValue, task_data_destroy.rawValue)
    }
}

fun g_task_set_priority(task: CValuesRef<GTask>?, priority: gint): Unit {
    memScoped {
        return kniBridge1979(task?.getPointer(memScope).rawValue, priority)
    }
}

fun g_task_set_check_cancellable(task: CValuesRef<GTask>?, check_cancellable: gboolean): Unit {
    memScoped {
        return kniBridge1980(task?.getPointer(memScope).rawValue, check_cancellable)
    }
}

fun g_task_set_source_tag(task: CValuesRef<GTask>?, source_tag: gpointer?): Unit {
    memScoped {
        return kniBridge1981(task?.getPointer(memScope).rawValue, source_tag.rawValue)
    }
}

fun g_task_set_name(task: CValuesRef<GTask>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge1982(task?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_source_object(task: CValuesRef<GTask>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1983(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_task_data(task: CValuesRef<GTask>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1984(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_priority(task: CValuesRef<GTask>?): gint {
    memScoped {
        return kniBridge1985(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_context(task: CValuesRef<GTask>?): CPointer<GMainContext>? {
    memScoped {
        return interpretCPointer<GMainContext>(kniBridge1986(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_cancellable(task: CValuesRef<GTask>?): CPointer<GCancellable>? {
    memScoped {
        return interpretCPointer<GCancellable>(kniBridge1987(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_check_cancellable(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge1988(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_source_tag(task: CValuesRef<GTask>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1989(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_get_name(task: CValuesRef<GTask>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge1990(task?.getPointer(memScope).rawValue))
    }
}

fun g_task_is_valid(result: gpointer?, source_object: gpointer?): gboolean {
    return kniBridge1991(result.rawValue, source_object.rawValue)
}

fun g_task_run_in_thread(task: CValuesRef<GTask>?, task_func: GTaskThreadFunc?): Unit {
    memScoped {
        return kniBridge1992(task?.getPointer(memScope).rawValue, task_func.rawValue)
    }
}

fun g_task_run_in_thread_sync(task: CValuesRef<GTask>?, task_func: GTaskThreadFunc?): Unit {
    memScoped {
        return kniBridge1993(task?.getPointer(memScope).rawValue, task_func.rawValue)
    }
}

fun g_task_set_return_on_cancel(task: CValuesRef<GTask>?, return_on_cancel: gboolean): gboolean {
    memScoped {
        return kniBridge1994(task?.getPointer(memScope).rawValue, return_on_cancel)
    }
}

fun g_task_get_return_on_cancel(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge1995(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_attach_source(task: CValuesRef<GTask>?, source: CValuesRef<GSource>?, callback: GSourceFunc?): Unit {
    memScoped {
        return kniBridge1996(task?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, callback.rawValue)
    }
}

fun g_task_return_pointer(task: CValuesRef<GTask>?, result: gpointer?, result_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge1997(task?.getPointer(memScope).rawValue, result.rawValue, result_destroy.rawValue)
    }
}

fun g_task_return_boolean(task: CValuesRef<GTask>?, result: gboolean): Unit {
    memScoped {
        return kniBridge1998(task?.getPointer(memScope).rawValue, result)
    }
}

fun g_task_return_int(task: CValuesRef<GTask>?, result: gssize): Unit {
    memScoped {
        return kniBridge1999(task?.getPointer(memScope).rawValue, result)
    }
}

fun g_task_return_error(task: CValuesRef<GTask>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge2000(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk325")
external fun g_task_return_new_error(task: CValuesRef<GTask>?, domain: GQuark, code: gint, @CCall.CString format: String?, vararg variadicArguments: Any?): Unit

fun g_task_return_error_if_cancelled(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge2001(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_propagate_pointer(task: CValuesRef<GTask>?, error: CValuesRef<CPointerVar<GError>>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2002(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_task_propagate_boolean(task: CValuesRef<GTask>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2003(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_task_propagate_int(task: CValuesRef<GTask>?, error: CValuesRef<CPointerVar<GError>>?): gssize {
    memScoped {
        return kniBridge2004(task?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_task_had_error(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge2005(task?.getPointer(memScope).rawValue)
    }
}

fun g_task_get_completed(task: CValuesRef<GTask>?): gboolean {
    memScoped {
        return kniBridge2006(task?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_type(): GType {
    return kniBridge2007()
}

@CCall("knifunptr_libgtk326")
external fun g_subprocess_new(flags: GSubprocessFlags, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString argv0: String?, vararg variadicArguments: Any?): CPointer<GSubprocess>?

fun g_subprocess_newv(argv: CValuesRef<CPointerVar<gcharVar>>?, flags: GSubprocessFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSubprocess>? {
    memScoped {
        return interpretCPointer<GSubprocess>(kniBridge2008(argv?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_stdin_pipe(subprocess: CValuesRef<GSubprocess>?): CPointer<GOutputStream>? {
    memScoped {
        return interpretCPointer<GOutputStream>(kniBridge2009(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_stdout_pipe(subprocess: CValuesRef<GSubprocess>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2010(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_stderr_pipe(subprocess: CValuesRef<GSubprocess>?): CPointer<GInputStream>? {
    memScoped {
        return interpretCPointer<GInputStream>(kniBridge2011(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_get_identifier(subprocess: CValuesRef<GSubprocess>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2012(subprocess?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_send_signal(subprocess: CValuesRef<GSubprocess>?, signal_num: gint): Unit {
    memScoped {
        return kniBridge2013(subprocess?.getPointer(memScope).rawValue, signal_num)
    }
}

fun g_subprocess_force_exit(subprocess: CValuesRef<GSubprocess>?): Unit {
    memScoped {
        return kniBridge2014(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2015(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait_async(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2016(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_wait_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2017(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait_check(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2018(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_wait_check_async(subprocess: CValuesRef<GSubprocess>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2019(subprocess?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_wait_check_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2020(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_status(subprocess: CValuesRef<GSubprocess>?): gint {
    memScoped {
        return kniBridge2021(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_successful(subprocess: CValuesRef<GSubprocess>?): gboolean {
    memScoped {
        return kniBridge2022(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_if_exited(subprocess: CValuesRef<GSubprocess>?): gboolean {
    memScoped {
        return kniBridge2023(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_exit_status(subprocess: CValuesRef<GSubprocess>?): gint {
    memScoped {
        return kniBridge2024(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_if_signaled(subprocess: CValuesRef<GSubprocess>?): gboolean {
    memScoped {
        return kniBridge2025(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_get_term_sig(subprocess: CValuesRef<GSubprocess>?): gint {
    memScoped {
        return kniBridge2026(subprocess?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate(subprocess: CValuesRef<GSubprocess>?, stdin_buf: CValuesRef<GBytes>?, cancellable: CValuesRef<GCancellable>?, stdout_buf: CValuesRef<CPointerVar<GBytes>>?, stderr_buf: CValuesRef<CPointerVar<GBytes>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2027(subprocess?.getPointer(memScope).rawValue, stdin_buf?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate_async(subprocess: CValuesRef<GSubprocess>?, stdin_buf: CValuesRef<GBytes>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2028(subprocess?.getPointer(memScope).rawValue, stdin_buf?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_communicate_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, stdout_buf: CValuesRef<CPointerVar<GBytes>>?, stderr_buf: CValuesRef<CPointerVar<GBytes>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2029(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate_utf8(subprocess: CValuesRef<GSubprocess>?, @CCall.CString stdin_buf: String?, cancellable: CValuesRef<GCancellable>?, stdout_buf: CValuesRef<CPointerVar<ByteVar>>?, stderr_buf: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2030(subprocess?.getPointer(memScope).rawValue, stdin_buf?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_communicate_utf8_async(subprocess: CValuesRef<GSubprocess>?, @CCall.CString stdin_buf: String?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2031(subprocess?.getPointer(memScope).rawValue, stdin_buf?.cstr?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_subprocess_communicate_utf8_finish(subprocess: CValuesRef<GSubprocess>?, result: CValuesRef<GAsyncResult>?, stdout_buf: CValuesRef<CPointerVar<ByteVar>>?, stderr_buf: CValuesRef<CPointerVar<ByteVar>>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2032(subprocess?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, stdout_buf?.getPointer(memScope).rawValue, stderr_buf?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_get_type(): GType {
    return kniBridge2033()
}

fun g_subprocess_launcher_new(flags: GSubprocessFlags): CPointer<GSubprocessLauncher>? {
    return interpretCPointer<GSubprocessLauncher>(kniBridge2034(flags))
}

@CCall("knifunptr_libgtk327")
external fun g_subprocess_launcher_spawn(self: CValuesRef<GSubprocessLauncher>?, error: CValuesRef<CPointerVar<GError>>?, @CCall.CString argv0: String?, vararg variadicArguments: Any?): CPointer<GSubprocess>?

fun g_subprocess_launcher_spawnv(self: CValuesRef<GSubprocessLauncher>?, argv: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GSubprocess>? {
    memScoped {
        return interpretCPointer<GSubprocess>(kniBridge2035(self?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_launcher_set_environ(self: CValuesRef<GSubprocessLauncher>?, env: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge2036(self?.getPointer(memScope).rawValue, env?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_setenv(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString variable: String?, @CCall.CString value: String?, overwrite: gboolean): Unit {
    memScoped {
        return kniBridge2037(self?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue, overwrite)
    }
}

fun g_subprocess_launcher_unsetenv(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString variable: String?): Unit {
    memScoped {
        return kniBridge2038(self?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_getenv(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString variable: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2039(self?.getPointer(memScope).rawValue, variable?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_subprocess_launcher_set_cwd(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString cwd: String?): Unit {
    memScoped {
        return kniBridge2040(self?.getPointer(memScope).rawValue, cwd?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_set_flags(self: CValuesRef<GSubprocessLauncher>?, flags: GSubprocessFlags): Unit {
    memScoped {
        return kniBridge2041(self?.getPointer(memScope).rawValue, flags)
    }
}

fun g_subprocess_launcher_set_stdin_file_path(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge2042(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_take_stdin_fd(self: CValuesRef<GSubprocessLauncher>?, fd: gint): Unit {
    memScoped {
        return kniBridge2043(self?.getPointer(memScope).rawValue, fd)
    }
}

fun g_subprocess_launcher_set_stdout_file_path(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge2044(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_take_stdout_fd(self: CValuesRef<GSubprocessLauncher>?, fd: gint): Unit {
    memScoped {
        return kniBridge2045(self?.getPointer(memScope).rawValue, fd)
    }
}

fun g_subprocess_launcher_set_stderr_file_path(self: CValuesRef<GSubprocessLauncher>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge2046(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_subprocess_launcher_take_stderr_fd(self: CValuesRef<GSubprocessLauncher>?, fd: gint): Unit {
    memScoped {
        return kniBridge2047(self?.getPointer(memScope).rawValue, fd)
    }
}

fun g_subprocess_launcher_take_fd(self: CValuesRef<GSubprocessLauncher>?, source_fd: gint, target_fd: gint): Unit {
    memScoped {
        return kniBridge2048(self?.getPointer(memScope).rawValue, source_fd, target_fd)
    }
}

fun g_subprocess_launcher_set_child_setup(self: CValuesRef<GSubprocessLauncher>?, child_setup: GSpawnChildSetupFunc?, user_data: gpointer?, destroy_notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge2049(self?.getPointer(memScope).rawValue, child_setup.rawValue, user_data.rawValue, destroy_notify.rawValue)
    }
}

fun g_tcp_connection_get_type(): GType {
    return kniBridge2050()
}

fun g_tcp_connection_set_graceful_disconnect(connection: CValuesRef<GTcpConnection>?, graceful_disconnect: gboolean): Unit {
    memScoped {
        return kniBridge2051(connection?.getPointer(memScope).rawValue, graceful_disconnect)
    }
}

fun g_tcp_connection_get_graceful_disconnect(connection: CValuesRef<GTcpConnection>?): gboolean {
    memScoped {
        return kniBridge2052(connection?.getPointer(memScope).rawValue)
    }
}

fun g_tcp_wrapper_connection_get_type(): GType {
    return kniBridge2053()
}

fun g_tcp_wrapper_connection_new(base_io_stream: CValuesRef<GIOStream>?, socket: CValuesRef<GSocket>?): CPointer<GSocketConnection>? {
    memScoped {
        return interpretCPointer<GSocketConnection>(kniBridge2054(base_io_stream?.getPointer(memScope).rawValue, socket?.getPointer(memScope).rawValue))
    }
}

fun g_tcp_wrapper_connection_get_base_io_stream(conn: CValuesRef<GTcpWrapperConnection>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge2055(conn?.getPointer(memScope).rawValue))
    }
}

fun g_test_dbus_get_type(): GType {
    return kniBridge2056()
}

fun g_test_dbus_new(flags: GTestDBusFlags): CPointer<GTestDBus>? {
    return interpretCPointer<GTestDBus>(kniBridge2057(flags))
}

fun g_test_dbus_get_flags(self: CValuesRef<GTestDBus>?): GTestDBusFlags {
    memScoped {
        return kniBridge2058(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_get_bus_address(self: CValuesRef<GTestDBus>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2059(self?.getPointer(memScope).rawValue))
    }
}

fun g_test_dbus_add_service_dir(self: CValuesRef<GTestDBus>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge2060(self?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_up(self: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge2061(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_stop(self: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge2062(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_down(self: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge2063(self?.getPointer(memScope).rawValue)
    }
}

fun g_test_dbus_unset(): Unit {
    return kniBridge2064()
}

fun g_themed_icon_get_type(): GType {
    return kniBridge2065()
}

fun g_themed_icon_new(@CCall.CString iconname: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2066(iconname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_themed_icon_new_with_default_fallbacks(@CCall.CString iconname: String?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2067(iconname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_themed_icon_new_from_names(iconnames: CValuesRef<CPointerVar<ByteVar>>?, len: Int): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2068(iconnames?.getPointer(memScope).rawValue, len))
    }
}

fun g_themed_icon_prepend_name(icon: CValuesRef<GThemedIcon>?, @CCall.CString iconname: String?): Unit {
    memScoped {
        return kniBridge2069(icon?.getPointer(memScope).rawValue, iconname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_themed_icon_append_name(icon: CValuesRef<GThemedIcon>?, @CCall.CString iconname: String?): Unit {
    memScoped {
        return kniBridge2070(icon?.getPointer(memScope).rawValue, iconname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_themed_icon_get_names(icon: CValuesRef<GThemedIcon>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2071(icon?.getPointer(memScope).rawValue))
    }
}

fun g_threaded_socket_service_get_type(): GType {
    return kniBridge2072()
}

fun g_threaded_socket_service_new(max_threads: Int): CPointer<GSocketService>? {
    return interpretCPointer<GSocketService>(kniBridge2073(max_threads))
}

fun g_tls_backend_get_type(): GType {
    return kniBridge2074()
}

fun g_tls_backend_get_default(): CPointer<GTlsBackend>? {
    return interpretCPointer<GTlsBackend>(kniBridge2075())
}

fun g_tls_backend_get_default_database(backend: CValuesRef<GTlsBackend>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge2076(backend?.getPointer(memScope).rawValue))
    }
}

fun g_tls_backend_set_default_database(backend: CValuesRef<GTlsBackend>?, database: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge2077(backend?.getPointer(memScope).rawValue, database?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_supports_tls(backend: CValuesRef<GTlsBackend>?): gboolean {
    memScoped {
        return kniBridge2078(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_supports_dtls(backend: CValuesRef<GTlsBackend>?): gboolean {
    memScoped {
        return kniBridge2079(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_certificate_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge2080(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_client_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge2081(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_server_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge2082(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_file_database_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge2083(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_dtls_client_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge2084(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_backend_get_dtls_server_connection_type(backend: CValuesRef<GTlsBackend>?): GType {
    memScoped {
        return kniBridge2085(backend?.getPointer(memScope).rawValue)
    }
}

fun g_tls_certificate_get_type(): GType {
    return kniBridge2086()
}

fun g_tls_certificate_new_from_pem(@CCall.CString data: String?, length: gssize, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2087(data?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_new_from_file(@CCall.CString file: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2088(file?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_new_from_files(@CCall.CString cert_file: String?, @CCall.CString key_file: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2089(cert_file?.cstr?.getPointer(memScope).rawValue, key_file?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_list_new_from_file(@CCall.CString file: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2090(file?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_get_issuer(cert: CValuesRef<GTlsCertificate>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2091(cert?.getPointer(memScope).rawValue))
    }
}

fun g_tls_certificate_verify(cert: CValuesRef<GTlsCertificate>?, identity: CValuesRef<GSocketConnectable>?, trusted_ca: CValuesRef<GTlsCertificate>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2092(cert?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue, trusted_ca?.getPointer(memScope).rawValue)
    }
}

fun g_tls_certificate_is_same(cert_one: CValuesRef<GTlsCertificate>?, cert_two: CValuesRef<GTlsCertificate>?): gboolean {
    memScoped {
        return kniBridge2093(cert_one?.getPointer(memScope).rawValue, cert_two?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_type(): GType {
    return kniBridge2094()
}

fun g_tls_connection_set_use_system_certdb(conn: CValuesRef<GTlsConnection>?, use_system_certdb: gboolean): Unit {
    memScoped {
        return kniBridge2095(conn?.getPointer(memScope).rawValue, use_system_certdb)
    }
}

fun g_tls_connection_get_use_system_certdb(conn: CValuesRef<GTlsConnection>?): gboolean {
    memScoped {
        return kniBridge2096(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_set_database(conn: CValuesRef<GTlsConnection>?, database: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge2097(conn?.getPointer(memScope).rawValue, database?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_database(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge2098(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_set_certificate(conn: CValuesRef<GTlsConnection>?, certificate: CValuesRef<GTlsCertificate>?): Unit {
    memScoped {
        return kniBridge2099(conn?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_certificate(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2100(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_set_interaction(conn: CValuesRef<GTlsConnection>?, interaction: CValuesRef<GTlsInteraction>?): Unit {
    memScoped {
        return kniBridge2101(conn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_interaction(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsInteraction>? {
    memScoped {
        return interpretCPointer<GTlsInteraction>(kniBridge2102(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_get_peer_certificate(conn: CValuesRef<GTlsConnection>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2103(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_get_peer_certificate_errors(conn: CValuesRef<GTlsConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2104(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_set_require_close_notify(conn: CValuesRef<GTlsConnection>?, require_close_notify: gboolean): Unit {
    memScoped {
        return kniBridge2105(conn?.getPointer(memScope).rawValue, require_close_notify)
    }
}

fun g_tls_connection_get_require_close_notify(conn: CValuesRef<GTlsConnection>?): gboolean {
    memScoped {
        return kniBridge2106(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_set_rehandshake_mode(conn: CValuesRef<GTlsConnection>?, mode: GTlsRehandshakeMode): Unit {
    memScoped {
        return kniBridge2107(conn?.getPointer(memScope).rawValue, mode.value)
    }
}

fun g_tls_connection_get_rehandshake_mode(conn: CValuesRef<GTlsConnection>?): GTlsRehandshakeMode {
    memScoped {
        return GTlsRehandshakeMode.byValue(kniBridge2108(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_set_advertised_protocols(conn: CValuesRef<GTlsConnection>?, protocols: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge2109(conn?.getPointer(memScope).rawValue, protocols?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_get_negotiated_protocol(conn: CValuesRef<GTlsConnection>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2110(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_connection_handshake(conn: CValuesRef<GTlsConnection>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2111(conn?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_connection_handshake_async(conn: CValuesRef<GTlsConnection>?, io_priority: Int, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2112(conn?.getPointer(memScope).rawValue, io_priority, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_connection_handshake_finish(conn: CValuesRef<GTlsConnection>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2113(conn?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_error_quark(): GQuark {
    return kniBridge2114()
}

fun g_tls_connection_emit_accept_certificate(conn: CValuesRef<GTlsConnection>?, peer_cert: CValuesRef<GTlsCertificate>?, errors: GTlsCertificateFlags): gboolean {
    memScoped {
        return kniBridge2115(conn?.getPointer(memScope).rawValue, peer_cert?.getPointer(memScope).rawValue, errors)
    }
}

fun g_tls_client_connection_get_type(): GType {
    return kniBridge2116()
}

fun g_tls_client_connection_new(base_io_stream: CValuesRef<GIOStream>?, server_identity: CValuesRef<GSocketConnectable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge2117(base_io_stream?.getPointer(memScope).rawValue, server_identity?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_client_connection_get_validation_flags(conn: CValuesRef<GTlsClientConnection>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2118(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_client_connection_set_validation_flags(conn: CValuesRef<GTlsClientConnection>?, flags: GTlsCertificateFlags): Unit {
    memScoped {
        return kniBridge2119(conn?.getPointer(memScope).rawValue, flags)
    }
}

fun g_tls_client_connection_get_server_identity(conn: CValuesRef<GTlsClientConnection>?): CPointer<GSocketConnectable>? {
    memScoped {
        return interpretCPointer<GSocketConnectable>(kniBridge2120(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_client_connection_set_server_identity(conn: CValuesRef<GTlsClientConnection>?, identity: CValuesRef<GSocketConnectable>?): Unit {
    memScoped {
        return kniBridge2121(conn?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue)
    }
}

fun g_tls_client_connection_get_use_ssl3(conn: CValuesRef<GTlsClientConnection>?): gboolean {
    memScoped {
        return kniBridge2122(conn?.getPointer(memScope).rawValue)
    }
}

fun g_tls_client_connection_set_use_ssl3(conn: CValuesRef<GTlsClientConnection>?, use_ssl3: gboolean): Unit {
    memScoped {
        return kniBridge2123(conn?.getPointer(memScope).rawValue, use_ssl3)
    }
}

fun g_tls_client_connection_get_accepted_cas(conn: CValuesRef<GTlsClientConnection>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2124(conn?.getPointer(memScope).rawValue))
    }
}

fun g_tls_client_connection_copy_session_state(conn: CValuesRef<GTlsClientConnection>?, source: CValuesRef<GTlsClientConnection>?): Unit {
    memScoped {
        return kniBridge2125(conn?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue)
    }
}

fun g_tls_database_get_type(): GType {
    return kniBridge2126()
}

fun g_tls_database_verify_chain(self: CValuesRef<GTlsDatabase>?, chain: CValuesRef<GTlsCertificate>?, @CCall.CString purpose: String?, identity: CValuesRef<GSocketConnectable>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseVerifyFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2127(self?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue, purpose?.cstr?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_database_verify_chain_async(self: CValuesRef<GTlsDatabase>?, chain: CValuesRef<GTlsCertificate>?, @CCall.CString purpose: String?, identity: CValuesRef<GSocketConnectable>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseVerifyFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2128(self?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue, purpose?.cstr?.getPointer(memScope).rawValue, identity?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_verify_chain_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): GTlsCertificateFlags {
    memScoped {
        return kniBridge2129(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_tls_database_create_certificate_handle(self: CValuesRef<GTlsDatabase>?, certificate: CValuesRef<GTlsCertificate>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2130(self?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_for_handle(self: CValuesRef<GTlsDatabase>?, @CCall.CString handle: String?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2131(self?.getPointer(memScope).rawValue, handle?.cstr?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_for_handle_async(self: CValuesRef<GTlsDatabase>?, @CCall.CString handle: String?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2132(self?.getPointer(memScope).rawValue, handle?.cstr?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_lookup_certificate_for_handle_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2133(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_issuer(self: CValuesRef<GTlsDatabase>?, certificate: CValuesRef<GTlsCertificate>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2134(self?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificate_issuer_async(self: CValuesRef<GTlsDatabase>?, certificate: CValuesRef<GTlsCertificate>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2135(self?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_lookup_certificate_issuer_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsCertificate>? {
    memScoped {
        return interpretCPointer<GTlsCertificate>(kniBridge2136(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificates_issued_by(self: CValuesRef<GTlsDatabase>?, issuer_raw_dn: CValuesRef<GByteArray>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2137(self?.getPointer(memScope).rawValue, issuer_raw_dn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_database_lookup_certificates_issued_by_async(self: CValuesRef<GTlsDatabase>?, issuer_raw_dn: CValuesRef<GByteArray>?, interaction: CValuesRef<GTlsInteraction>?, flags: GTlsDatabaseLookupFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2138(self?.getPointer(memScope).rawValue, issuer_raw_dn?.getPointer(memScope).rawValue, interaction?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_database_lookup_certificates_issued_by_finish(self: CValuesRef<GTlsDatabase>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2139(self?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_file_database_get_type(): GType {
    return kniBridge2140()
}

fun g_tls_file_database_new(@CCall.CString anchors: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GTlsDatabase>? {
    memScoped {
        return interpretCPointer<GTlsDatabase>(kniBridge2141(anchors?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_get_type(): GType {
    return kniBridge2142()
}

fun g_tls_interaction_invoke_ask_password(interaction: CValuesRef<GTlsInteraction>?, password: CValuesRef<GTlsPassword>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge2143(interaction?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_ask_password(interaction: CValuesRef<GTlsInteraction>?, password: CValuesRef<GTlsPassword>?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge2144(interaction?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_ask_password_async(interaction: CValuesRef<GTlsInteraction>?, password: CValuesRef<GTlsPassword>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2145(interaction?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_interaction_ask_password_finish(interaction: CValuesRef<GTlsInteraction>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge2146(interaction?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_invoke_request_certificate(interaction: CValuesRef<GTlsInteraction>?, connection: CValuesRef<GTlsConnection>?, flags: GTlsCertificateRequestFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge2147(interaction?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_request_certificate(interaction: CValuesRef<GTlsInteraction>?, connection: CValuesRef<GTlsConnection>?, flags: GTlsCertificateRequestFlags, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge2148(interaction?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_interaction_request_certificate_async(interaction: CValuesRef<GTlsInteraction>?, connection: CValuesRef<GTlsConnection>?, flags: GTlsCertificateRequestFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2149(interaction?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_tls_interaction_request_certificate_finish(interaction: CValuesRef<GTlsInteraction>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): GTlsInteractionResult {
    memScoped {
        return GTlsInteractionResult.byValue(kniBridge2150(interaction?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_server_connection_get_type(): GType {
    return kniBridge2151()
}

fun g_tls_server_connection_new(base_io_stream: CValuesRef<GIOStream>?, certificate: CValuesRef<GTlsCertificate>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GIOStream>? {
    memScoped {
        return interpretCPointer<GIOStream>(kniBridge2152(base_io_stream?.getPointer(memScope).rawValue, certificate?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_get_type(): GType {
    return kniBridge2153()
}

fun g_tls_password_new(flags: GTlsPasswordFlags, @CCall.CString description: String?): CPointer<GTlsPassword>? {
    memScoped {
        return interpretCPointer<GTlsPassword>(kniBridge2154(flags, description?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_get_value(password: CValuesRef<GTlsPassword>?, length: CValuesRef<gsizeVar>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge2155(password?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_set_value(password: CValuesRef<GTlsPassword>?, value: CValuesRef<gucharVar>?, length: gssize): Unit {
    memScoped {
        return kniBridge2156(password?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, length)
    }
}

fun g_tls_password_set_value_full(password: CValuesRef<GTlsPassword>?, value: CValuesRef<gucharVar>?, length: gssize, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge2157(password?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, length, destroy.rawValue)
    }
}

fun g_tls_password_get_flags(password: CValuesRef<GTlsPassword>?): GTlsPasswordFlags {
    memScoped {
        return kniBridge2158(password?.getPointer(memScope).rawValue)
    }
}

fun g_tls_password_set_flags(password: CValuesRef<GTlsPassword>?, flags: GTlsPasswordFlags): Unit {
    memScoped {
        return kniBridge2159(password?.getPointer(memScope).rawValue, flags)
    }
}

fun g_tls_password_get_description(password: CValuesRef<GTlsPassword>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2160(password?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_set_description(password: CValuesRef<GTlsPassword>?, @CCall.CString description: String?): Unit {
    memScoped {
        return kniBridge2161(password?.getPointer(memScope).rawValue, description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_tls_password_get_warning(password: CValuesRef<GTlsPassword>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2162(password?.getPointer(memScope).rawValue))
    }
}

fun g_tls_password_set_warning(password: CValuesRef<GTlsPassword>?, @CCall.CString warning: String?): Unit {
    memScoped {
        return kniBridge2163(password?.getPointer(memScope).rawValue, warning?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_vfs_get_type(): GType {
    return kniBridge2164()
}

fun g_vfs_is_active(vfs: CValuesRef<GVfs>?): gboolean {
    memScoped {
        return kniBridge2165(vfs?.getPointer(memScope).rawValue)
    }
}

fun g_vfs_get_file_for_path(vfs: CValuesRef<GVfs>?, @CCall.CString path: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2166(vfs?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_get_file_for_uri(vfs: CValuesRef<GVfs>?, @CCall.CString uri: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2167(vfs?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_get_supported_uri_schemes(vfs: CValuesRef<GVfs>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge2168(vfs?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_parse_name(vfs: CValuesRef<GVfs>?, @CCall.CString parse_name: String?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2169(vfs?.getPointer(memScope).rawValue, parse_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_vfs_get_default(): CPointer<GVfs>? {
    return interpretCPointer<GVfs>(kniBridge2170())
}

fun g_vfs_get_local(): CPointer<GVfs>? {
    return interpretCPointer<GVfs>(kniBridge2171())
}

fun g_vfs_register_uri_scheme(vfs: CValuesRef<GVfs>?, @CCall.CString scheme: String?, uri_func: GVfsFileLookupFunc?, uri_data: gpointer?, uri_destroy: GDestroyNotify?, parse_name_func: GVfsFileLookupFunc?, parse_name_data: gpointer?, parse_name_destroy: GDestroyNotify?): gboolean {
    memScoped {
        return kniBridge2172(vfs?.getPointer(memScope).rawValue, scheme?.cstr?.getPointer(memScope).rawValue, uri_func.rawValue, uri_data.rawValue, uri_destroy.rawValue, parse_name_func.rawValue, parse_name_data.rawValue, parse_name_destroy.rawValue)
    }
}

fun g_vfs_unregister_uri_scheme(vfs: CValuesRef<GVfs>?, @CCall.CString scheme: String?): gboolean {
    memScoped {
        return kniBridge2173(vfs?.getPointer(memScope).rawValue, scheme?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_volume_get_type(): GType {
    return kniBridge2174()
}

fun g_volume_get_name(volume: CValuesRef<GVolume>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2175(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_icon(volume: CValuesRef<GVolume>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2176(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_symbolic_icon(volume: CValuesRef<GVolume>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge2177(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_uuid(volume: CValuesRef<GVolume>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2178(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_drive(volume: CValuesRef<GVolume>?): CPointer<GDrive>? {
    memScoped {
        return interpretCPointer<GDrive>(kniBridge2179(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_mount(volume: CValuesRef<GVolume>?): CPointer<GMount>? {
    memScoped {
        return interpretCPointer<GMount>(kniBridge2180(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_can_mount(volume: CValuesRef<GVolume>?): gboolean {
    memScoped {
        return kniBridge2181(volume?.getPointer(memScope).rawValue)
    }
}

fun g_volume_can_eject(volume: CValuesRef<GVolume>?): gboolean {
    memScoped {
        return kniBridge2182(volume?.getPointer(memScope).rawValue)
    }
}

fun g_volume_should_automount(volume: CValuesRef<GVolume>?): gboolean {
    memScoped {
        return kniBridge2183(volume?.getPointer(memScope).rawValue)
    }
}

fun g_volume_mount(volume: CValuesRef<GVolume>?, flags: GMountMountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2184(volume?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_volume_mount_finish(volume: CValuesRef<GVolume>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2185(volume?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_volume_eject(volume: CValuesRef<GVolume>?, flags: GMountUnmountFlags, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2186(volume?.getPointer(memScope).rawValue, flags, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_volume_eject_finish(volume: CValuesRef<GVolume>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2187(volume?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_volume_get_identifier(volume: CValuesRef<GVolume>?, @CCall.CString kind: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2188(volume?.getPointer(memScope).rawValue, kind?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_volume_enumerate_identifiers(volume: CValuesRef<GVolume>?): CPointer<CPointerVar<ByteVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<ByteVar>>(kniBridge2189(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_get_activation_root(volume: CValuesRef<GVolume>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge2190(volume?.getPointer(memScope).rawValue))
    }
}

fun g_volume_eject_with_operation(volume: CValuesRef<GVolume>?, flags: GMountUnmountFlags, mount_operation: CValuesRef<GMountOperation>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2191(volume?.getPointer(memScope).rawValue, flags, mount_operation?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_volume_eject_with_operation_finish(volume: CValuesRef<GVolume>?, result: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2192(volume?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_volume_get_sort_key(volume: CValuesRef<GVolume>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2193(volume?.getPointer(memScope).rawValue))
    }
}

fun g_zlib_compressor_get_type(): GType {
    return kniBridge2194()
}

fun g_zlib_compressor_new(format: GZlibCompressorFormat, level: Int): CPointer<GZlibCompressor>? {
    return interpretCPointer<GZlibCompressor>(kniBridge2195(format.value, level))
}

fun g_zlib_compressor_get_file_info(compressor: CValuesRef<GZlibCompressor>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge2196(compressor?.getPointer(memScope).rawValue))
    }
}

fun g_zlib_compressor_set_file_info(compressor: CValuesRef<GZlibCompressor>?, file_info: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge2197(compressor?.getPointer(memScope).rawValue, file_info?.getPointer(memScope).rawValue)
    }
}

fun g_zlib_decompressor_get_type(): GType {
    return kniBridge2198()
}

fun g_zlib_decompressor_new(format: GZlibCompressorFormat): CPointer<GZlibDecompressor>? {
    return interpretCPointer<GZlibDecompressor>(kniBridge2199(format.value))
}

fun g_zlib_decompressor_get_file_info(decompressor: CValuesRef<GZlibDecompressor>?): CPointer<GFileInfo>? {
    memScoped {
        return interpretCPointer<GFileInfo>(kniBridge2200(decompressor?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_get_type(): GType {
    return kniBridge2201()
}

fun g_dbus_interface_get_info(interface_: CValuesRef<GDBusInterface>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge2202(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_get_object(interface_: CValuesRef<GDBusInterface>?): CPointer<GDBusObject>? {
    memScoped {
        return interpretCPointer<GDBusObject>(kniBridge2203(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_set_object(interface_: CValuesRef<GDBusInterface>?, `object`: CValuesRef<GDBusObject>?): Unit {
    memScoped {
        return kniBridge2204(interface_?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_dup_object(interface_: CValuesRef<GDBusInterface>?): CPointer<GDBusObject>? {
    memScoped {
        return interpretCPointer<GDBusObject>(kniBridge2205(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_type(): GType {
    return kniBridge2206()
}

fun g_dbus_interface_skeleton_get_flags(interface_: CValuesRef<GDBusInterfaceSkeleton>?): GDBusInterfaceSkeletonFlags {
    memScoped {
        return kniBridge2207(interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_set_flags(interface_: CValuesRef<GDBusInterfaceSkeleton>?, flags: GDBusInterfaceSkeletonFlags): Unit {
    memScoped {
        return kniBridge2208(interface_?.getPointer(memScope).rawValue, flags)
    }
}

fun g_dbus_interface_skeleton_get_info(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GDBusInterfaceInfo>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceInfo>(kniBridge2209(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_vtable(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GDBusInterfaceVTable>? {
    memScoped {
        return interpretCPointer<GDBusInterfaceVTable>(kniBridge2210(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_properties(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2211(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_flush(interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge2212(interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_export(interface_: CValuesRef<GDBusInterfaceSkeleton>?, connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge2213(interface_?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_unexport(interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge2214(interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_unexport_from_connection(interface_: CValuesRef<GDBusInterfaceSkeleton>?, connection: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge2215(interface_?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_get_connection(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2216(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_get_connections(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2217(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_interface_skeleton_has_connection(interface_: CValuesRef<GDBusInterfaceSkeleton>?, connection: CValuesRef<GDBusConnection>?): gboolean {
    memScoped {
        return kniBridge2218(interface_?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_interface_skeleton_get_object_path(interface_: CValuesRef<GDBusInterfaceSkeleton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2219(interface_?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_get_type(): GType {
    return kniBridge2220()
}

fun g_dbus_object_get_object_path(`object`: CValuesRef<GDBusObject>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2221(`object`?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_get_interfaces(`object`: CValuesRef<GDBusObject>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2222(`object`?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_get_interface(`object`: CValuesRef<GDBusObject>?, @CCall.CString interface_name: String?): CPointer<GDBusInterface>? {
    memScoped {
        return interpretCPointer<GDBusInterface>(kniBridge2223(`object`?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_skeleton_get_type(): GType {
    return kniBridge2224()
}

fun g_dbus_object_skeleton_new(@CCall.CString object_path: String?): CPointer<GDBusObjectSkeleton>? {
    memScoped {
        return interpretCPointer<GDBusObjectSkeleton>(kniBridge2225(object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_skeleton_flush(`object`: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge2226(`object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_add_interface(`object`: CValuesRef<GDBusObjectSkeleton>?, interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge2227(`object`?.getPointer(memScope).rawValue, interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_remove_interface(`object`: CValuesRef<GDBusObjectSkeleton>?, interface_: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge2228(`object`?.getPointer(memScope).rawValue, interface_?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_remove_interface_by_name(`object`: CValuesRef<GDBusObjectSkeleton>?, @CCall.CString interface_name: String?): Unit {
    memScoped {
        return kniBridge2229(`object`?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_skeleton_set_object_path(`object`: CValuesRef<GDBusObjectSkeleton>?, @CCall.CString object_path: String?): Unit {
    memScoped {
        return kniBridge2230(`object`?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_proxy_get_type(): GType {
    return kniBridge2231()
}

fun g_dbus_object_proxy_new(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?): CPointer<GDBusObjectProxy>? {
    memScoped {
        return interpretCPointer<GDBusObjectProxy>(kniBridge2232(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_proxy_get_connection(proxy: CValuesRef<GDBusObjectProxy>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2233(proxy?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_type(): GType {
    return kniBridge2234()
}

fun g_dbus_object_manager_get_object_path(manager: CValuesRef<GDBusObjectManager>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2235(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_objects(manager: CValuesRef<GDBusObjectManager>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge2236(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_object(manager: CValuesRef<GDBusObjectManager>?, @CCall.CString object_path: String?): CPointer<GDBusObject>? {
    memScoped {
        return interpretCPointer<GDBusObject>(kniBridge2237(manager?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_get_interface(manager: CValuesRef<GDBusObjectManager>?, @CCall.CString object_path: String?, @CCall.CString interface_name: String?): CPointer<GDBusInterface>? {
    memScoped {
        return interpretCPointer<GDBusInterface>(kniBridge2238(manager?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, interface_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_type(): GType {
    return kniBridge2239()
}

fun g_dbus_object_manager_client_new(connection: CValuesRef<GDBusConnection>?, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2240(connection?.getPointer(memScope).rawValue, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_object_manager_client_new_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge2241(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_new_sync(connection: CValuesRef<GDBusConnection>?, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge2242(connection?.getPointer(memScope).rawValue, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_new_for_bus(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2243(bus_type, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun g_dbus_object_manager_client_new_for_bus_finish(res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge2244(res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_new_for_bus_sync(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, @CCall.CString name: String?, @CCall.CString object_path: String?, get_proxy_type_func: GDBusProxyTypeFunc?, get_proxy_type_user_data: gpointer?, get_proxy_type_destroy_notify: GDestroyNotify?, cancellable: CValuesRef<GCancellable>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GDBusObjectManager>? {
    memScoped {
        return interpretCPointer<GDBusObjectManager>(kniBridge2245(bus_type, flags, name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, get_proxy_type_func.rawValue, get_proxy_type_user_data.rawValue, get_proxy_type_destroy_notify.rawValue, cancellable?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_connection(manager: CValuesRef<GDBusObjectManagerClient>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2246(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_flags(manager: CValuesRef<GDBusObjectManagerClient>?): GDBusObjectManagerClientFlags {
    memScoped {
        return kniBridge2247(manager?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_client_get_name(manager: CValuesRef<GDBusObjectManagerClient>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2248(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_client_get_name_owner(manager: CValuesRef<GDBusObjectManagerClient>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2249(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_server_get_type(): GType {
    return kniBridge2250()
}

fun g_dbus_object_manager_server_new(@CCall.CString object_path: String?): CPointer<GDBusObjectManagerServer>? {
    memScoped {
        return interpretCPointer<GDBusObjectManagerServer>(kniBridge2251(object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_server_get_connection(manager: CValuesRef<GDBusObjectManagerServer>?): CPointer<GDBusConnection>? {
    memScoped {
        return interpretCPointer<GDBusConnection>(kniBridge2252(manager?.getPointer(memScope).rawValue))
    }
}

fun g_dbus_object_manager_server_set_connection(manager: CValuesRef<GDBusObjectManagerServer>?, connection: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge2253(manager?.getPointer(memScope).rawValue, connection?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_export(manager: CValuesRef<GDBusObjectManagerServer>?, `object`: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge2254(manager?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_export_uniquely(manager: CValuesRef<GDBusObjectManagerServer>?, `object`: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge2255(manager?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_is_exported(manager: CValuesRef<GDBusObjectManagerServer>?, `object`: CValuesRef<GDBusObjectSkeleton>?): gboolean {
    memScoped {
        return kniBridge2256(manager?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_object_manager_server_unexport(manager: CValuesRef<GDBusObjectManagerServer>?, @CCall.CString object_path: String?): gboolean {
    memScoped {
        return kniBridge2257(manager?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_action_group_get_type(): GType {
    return kniBridge2258()
}

fun g_dbus_action_group_get(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?): CPointer<GDBusActionGroup>? {
    memScoped {
        return interpretCPointer<GDBusActionGroup>(kniBridge2259(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_remote_action_group_get_type(): GType {
    return kniBridge2260()
}

fun g_remote_action_group_activate_action_full(remote: CValuesRef<GRemoteActionGroup>?, @CCall.CString action_name: String?, parameter: CValuesRef<GVariant>?, platform_data: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2261(remote?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue, platform_data?.getPointer(memScope).rawValue)
    }
}

fun g_remote_action_group_change_action_state_full(remote: CValuesRef<GRemoteActionGroup>?, @CCall.CString action_name: String?, value: CValuesRef<GVariant>?, platform_data: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2262(remote?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, platform_data?.getPointer(memScope).rawValue)
    }
}

fun g_menu_model_get_type(): GType {
    return kniBridge2263()
}

fun g_menu_model_is_mutable(model: CValuesRef<GMenuModel>?): gboolean {
    memScoped {
        return kniBridge2264(model?.getPointer(memScope).rawValue)
    }
}

fun g_menu_model_get_n_items(model: CValuesRef<GMenuModel>?): gint {
    memScoped {
        return kniBridge2265(model?.getPointer(memScope).rawValue)
    }
}

fun g_menu_model_iterate_item_attributes(model: CValuesRef<GMenuModel>?, item_index: gint): CPointer<GMenuAttributeIter>? {
    memScoped {
        return interpretCPointer<GMenuAttributeIter>(kniBridge2266(model?.getPointer(memScope).rawValue, item_index))
    }
}

fun g_menu_model_get_item_attribute_value(model: CValuesRef<GMenuModel>?, item_index: gint, @CCall.CString attribute: String?, expected_type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2267(model?.getPointer(memScope).rawValue, item_index, attribute?.cstr?.getPointer(memScope).rawValue, expected_type?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk328")
external fun g_menu_model_get_item_attribute(model: CValuesRef<GMenuModel>?, item_index: gint, @CCall.CString attribute: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_menu_model_iterate_item_links(model: CValuesRef<GMenuModel>?, item_index: gint): CPointer<GMenuLinkIter>? {
    memScoped {
        return interpretCPointer<GMenuLinkIter>(kniBridge2268(model?.getPointer(memScope).rawValue, item_index))
    }
}

fun g_menu_model_get_item_link(model: CValuesRef<GMenuModel>?, item_index: gint, @CCall.CString link: String?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge2269(model?.getPointer(memScope).rawValue, item_index, link?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_menu_model_items_changed(model: CValuesRef<GMenuModel>?, position: gint, removed: gint, added: gint): Unit {
    memScoped {
        return kniBridge2270(model?.getPointer(memScope).rawValue, position, removed, added)
    }
}

fun g_menu_attribute_iter_get_type(): GType {
    return kniBridge2271()
}

fun g_menu_attribute_iter_get_next(iter: CValuesRef<GMenuAttributeIter>?, out_name: CValuesRef<CPointerVar<gcharVar>>?, value: CValuesRef<CPointerVar<GVariant>>?): gboolean {
    memScoped {
        return kniBridge2272(iter?.getPointer(memScope).rawValue, out_name?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_menu_attribute_iter_next(iter: CValuesRef<GMenuAttributeIter>?): gboolean {
    memScoped {
        return kniBridge2273(iter?.getPointer(memScope).rawValue)
    }
}

fun g_menu_attribute_iter_get_name(iter: CValuesRef<GMenuAttributeIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2274(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_attribute_iter_get_value(iter: CValuesRef<GMenuAttributeIter>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2275(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_link_iter_get_type(): GType {
    return kniBridge2276()
}

fun g_menu_link_iter_get_next(iter: CValuesRef<GMenuLinkIter>?, out_link: CValuesRef<CPointerVar<gcharVar>>?, value: CValuesRef<CPointerVar<GMenuModel>>?): gboolean {
    memScoped {
        return kniBridge2277(iter?.getPointer(memScope).rawValue, out_link?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun g_menu_link_iter_next(iter: CValuesRef<GMenuLinkIter>?): gboolean {
    memScoped {
        return kniBridge2278(iter?.getPointer(memScope).rawValue)
    }
}

fun g_menu_link_iter_get_name(iter: CValuesRef<GMenuLinkIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge2279(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_link_iter_get_value(iter: CValuesRef<GMenuLinkIter>?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge2280(iter?.getPointer(memScope).rawValue))
    }
}

fun g_menu_get_type(): GType {
    return kniBridge2281()
}

fun g_menu_new(): CPointer<GMenu>? {
    return interpretCPointer<GMenu>(kniBridge2282())
}

fun g_menu_freeze(menu: CValuesRef<GMenu>?): Unit {
    memScoped {
        return kniBridge2283(menu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert_item(menu: CValuesRef<GMenu>?, position: gint, item: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge2284(menu?.getPointer(memScope).rawValue, position, item?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend_item(menu: CValuesRef<GMenu>?, item: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge2285(menu?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append_item(menu: CValuesRef<GMenu>?, item: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge2286(menu?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue)
    }
}

fun g_menu_remove(menu: CValuesRef<GMenu>?, position: gint): Unit {
    memScoped {
        return kniBridge2287(menu?.getPointer(memScope).rawValue, position)
    }
}

fun g_menu_remove_all(menu: CValuesRef<GMenu>?): Unit {
    memScoped {
        return kniBridge2288(menu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert(menu: CValuesRef<GMenu>?, position: gint, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge2289(menu?.getPointer(memScope).rawValue, position, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge2290(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge2291(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert_section(menu: CValuesRef<GMenu>?, position: gint, @CCall.CString label: String?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2292(menu?.getPointer(memScope).rawValue, position, label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend_section(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2293(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append_section(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2294(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_insert_submenu(menu: CValuesRef<GMenu>?, position: gint, @CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2295(menu?.getPointer(memScope).rawValue, position, label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_prepend_submenu(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2296(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_append_submenu(menu: CValuesRef<GMenu>?, @CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2297(menu?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_get_type(): GType {
    return kniBridge2298()
}

fun g_menu_item_new(@CCall.CString label: String?, @CCall.CString detailed_action: String?): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge2299(label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_new_from_model(model: CValuesRef<GMenuModel>?, item_index: gint): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge2300(model?.getPointer(memScope).rawValue, item_index))
    }
}

fun g_menu_item_new_submenu(@CCall.CString label: String?, submenu: CValuesRef<GMenuModel>?): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge2301(label?.cstr?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_new_section(@CCall.CString label: String?, section: CValuesRef<GMenuModel>?): CPointer<GMenuItem>? {
    memScoped {
        return interpretCPointer<GMenuItem>(kniBridge2302(label?.cstr?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_get_attribute_value(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, expected_type: CValuesRef<GVariantType>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge2303(menu_item?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, expected_type?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk329")
external fun g_menu_item_get_attribute(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): gboolean

fun g_menu_item_get_link(menu_item: CValuesRef<GMenuItem>?, @CCall.CString link: String?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge2304(menu_item?.getPointer(memScope).rawValue, link?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_menu_item_set_attribute_value(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2305(menu_item?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk330")
external fun g_menu_item_set_attribute(menu_item: CValuesRef<GMenuItem>?, @CCall.CString attribute: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_menu_item_set_link(menu_item: CValuesRef<GMenuItem>?, @CCall.CString link: String?, model: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2306(menu_item?.getPointer(memScope).rawValue, link?.cstr?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_label(menu_item: CValuesRef<GMenuItem>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge2307(menu_item?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_submenu(menu_item: CValuesRef<GMenuItem>?, submenu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2308(menu_item?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_section(menu_item: CValuesRef<GMenuItem>?, section: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2309(menu_item?.getPointer(memScope).rawValue, section?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_action_and_target_value(menu_item: CValuesRef<GMenuItem>?, @CCall.CString action: String?, target_value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2310(menu_item?.getPointer(memScope).rawValue, action?.cstr?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk331")
external fun g_menu_item_set_action_and_target(menu_item: CValuesRef<GMenuItem>?, @CCall.CString action: String?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun g_menu_item_set_detailed_action(menu_item: CValuesRef<GMenuItem>?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge2311(menu_item?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_menu_item_set_icon(menu_item: CValuesRef<GMenuItem>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge2312(menu_item?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_export_menu_model(connection: CValuesRef<GDBusConnection>?, @CCall.CString object_path: String?, menu: CValuesRef<GMenuModel>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge2313(connection?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue, menu?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun g_dbus_connection_unexport_menu_model(connection: CValuesRef<GDBusConnection>?, export_id: guint): Unit {
    memScoped {
        return kniBridge2314(connection?.getPointer(memScope).rawValue, export_id)
    }
}

fun g_dbus_menu_model_get_type(): GType {
    return kniBridge2315()
}

fun g_dbus_menu_model_get(connection: CValuesRef<GDBusConnection>?, @CCall.CString bus_name: String?, @CCall.CString object_path: String?): CPointer<GDBusMenuModel>? {
    memScoped {
        return interpretCPointer<GDBusMenuModel>(kniBridge2316(connection?.getPointer(memScope).rawValue, bus_name?.cstr?.getPointer(memScope).rawValue, object_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_notification_get_type(): GType {
    return kniBridge2317()
}

fun g_notification_new(@CCall.CString title: String?): CPointer<GNotification>? {
    memScoped {
        return interpretCPointer<GNotification>(kniBridge2318(title?.cstr?.getPointer(memScope).rawValue))
    }
}

fun g_notification_set_title(notification: CValuesRef<GNotification>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge2319(notification?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_body(notification: CValuesRef<GNotification>?, @CCall.CString body: String?): Unit {
    memScoped {
        return kniBridge2320(notification?.getPointer(memScope).rawValue, body?.cstr?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_icon(notification: CValuesRef<GNotification>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge2321(notification?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_urgent(notification: CValuesRef<GNotification>?, urgent: gboolean): Unit {
    memScoped {
        return kniBridge2322(notification?.getPointer(memScope).rawValue, urgent)
    }
}

fun g_notification_set_priority(notification: CValuesRef<GNotification>?, priority: GNotificationPriority): Unit {
    memScoped {
        return kniBridge2323(notification?.getPointer(memScope).rawValue, priority.value)
    }
}

fun g_notification_add_button(notification: CValuesRef<GNotification>?, @CCall.CString label: String?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge2324(notification?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk332")
external fun g_notification_add_button_with_target(notification: CValuesRef<GNotification>?, @CCall.CString label: String?, @CCall.CString action: String?, @CCall.CString target_format: String?, vararg variadicArguments: Any?): Unit

fun g_notification_add_button_with_target_value(notification: CValuesRef<GNotification>?, @CCall.CString label: String?, @CCall.CString action: String?, target: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2325(notification?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, action?.cstr?.getPointer(memScope).rawValue, target?.getPointer(memScope).rawValue)
    }
}

fun g_notification_set_default_action(notification: CValuesRef<GNotification>?, @CCall.CString detailed_action: String?): Unit {
    memScoped {
        return kniBridge2326(notification?.getPointer(memScope).rawValue, detailed_action?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk333")
external fun g_notification_set_default_action_and_target(notification: CValuesRef<GNotification>?, @CCall.CString action: String?, @CCall.CString target_format: String?, vararg variadicArguments: Any?): Unit

fun g_notification_set_default_action_and_target_value(notification: CValuesRef<GNotification>?, @CCall.CString action: String?, target: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge2327(notification?.getPointer(memScope).rawValue, action?.cstr?.getPointer(memScope).rawValue, target?.getPointer(memScope).rawValue)
    }
}

fun g_list_model_get_type(): GType {
    return kniBridge2328()
}

fun glib_autoptr_clear_GListModel(_ptr: CValuesRef<GListModel>?): Unit {
    memScoped {
        return kniBridge2329(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GListModel(_ptr: CValuesRef<CPointerVar<GListModel>>?): Unit {
    memScoped {
        return kniBridge2330(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GListModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2331(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GListModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2332(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GListModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2333(_q?.getPointer(memScope).rawValue)
    }
}

fun G_LIST_MODEL(ptr: gpointer?): CPointer<GListModel>? {
    return interpretCPointer<GListModel>(kniBridge2334(ptr.rawValue))
}

fun G_IS_LIST_MODEL(ptr: gpointer?): gboolean {
    return kniBridge2335(ptr.rawValue)
}

fun G_LIST_MODEL_GET_IFACE(ptr: gpointer?): CPointer<GListModelInterface>? {
    return interpretCPointer<GListModelInterface>(kniBridge2336(ptr.rawValue))
}

fun g_list_model_get_item_type(list: CValuesRef<GListModel>?): GType {
    memScoped {
        return kniBridge2337(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_model_get_n_items(list: CValuesRef<GListModel>?): guint {
    memScoped {
        return kniBridge2338(list?.getPointer(memScope).rawValue)
    }
}

fun g_list_model_get_item(list: CValuesRef<GListModel>?, position: guint): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2339(list?.getPointer(memScope).rawValue, position))
    }
}

fun g_list_model_get_object(list: CValuesRef<GListModel>?, position: guint): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge2340(list?.getPointer(memScope).rawValue, position))
    }
}

fun g_list_model_items_changed(list: CValuesRef<GListModel>?, position: guint, removed: guint, added: guint): Unit {
    memScoped {
        return kniBridge2341(list?.getPointer(memScope).rawValue, position, removed, added)
    }
}

fun g_list_store_get_type(): GType {
    return kniBridge2342()
}

fun glib_autoptr_clear_GListStore(_ptr: CValuesRef<GListStore>?): Unit {
    memScoped {
        return kniBridge2343(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GListStore(_ptr: CValuesRef<CPointerVar<GListStore>>?): Unit {
    memScoped {
        return kniBridge2344(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GListStore(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2345(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GListStore(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2346(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GListStore(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2347(_q?.getPointer(memScope).rawValue)
    }
}

fun G_LIST_STORE(ptr: gpointer?): CPointer<GListStore>? {
    return interpretCPointer<GListStore>(kniBridge2348(ptr.rawValue))
}

fun G_IS_LIST_STORE(ptr: gpointer?): gboolean {
    return kniBridge2349(ptr.rawValue)
}

fun g_list_store_new(item_type: GType): CPointer<GListStore>? {
    return interpretCPointer<GListStore>(kniBridge2350(item_type))
}

fun g_list_store_insert(store: CValuesRef<GListStore>?, position: guint, item: gpointer?): Unit {
    memScoped {
        return kniBridge2351(store?.getPointer(memScope).rawValue, position, item.rawValue)
    }
}

fun g_list_store_insert_sorted(store: CValuesRef<GListStore>?, item: gpointer?, compare_func: GCompareDataFunc?, user_data: gpointer?): guint {
    memScoped {
        return kniBridge2352(store?.getPointer(memScope).rawValue, item.rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_list_store_sort(store: CValuesRef<GListStore>?, compare_func: GCompareDataFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge2353(store?.getPointer(memScope).rawValue, compare_func.rawValue, user_data.rawValue)
    }
}

fun g_list_store_append(store: CValuesRef<GListStore>?, item: gpointer?): Unit {
    memScoped {
        return kniBridge2354(store?.getPointer(memScope).rawValue, item.rawValue)
    }
}

fun g_list_store_remove(store: CValuesRef<GListStore>?, position: guint): Unit {
    memScoped {
        return kniBridge2355(store?.getPointer(memScope).rawValue, position)
    }
}

fun g_list_store_remove_all(store: CValuesRef<GListStore>?): Unit {
    memScoped {
        return kniBridge2356(store?.getPointer(memScope).rawValue)
    }
}

fun g_list_store_splice(store: CValuesRef<GListStore>?, position: guint, n_removals: guint, additions: CValuesRef<gpointerVar>?, n_additions: guint): Unit {
    memScoped {
        return kniBridge2357(store?.getPointer(memScope).rawValue, position, n_removals, additions?.getPointer(memScope).rawValue, n_additions)
    }
}

fun glib_autoptr_clear_GAction(_ptr: CValuesRef<GAction>?): Unit {
    memScoped {
        return kniBridge2358(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAction(_ptr: CValuesRef<CPointerVar<GAction>>?): Unit {
    memScoped {
        return kniBridge2359(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2360(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2361(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2362(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GActionMap(_ptr: CValuesRef<GActionMap>?): Unit {
    memScoped {
        return kniBridge2363(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GActionMap(_ptr: CValuesRef<CPointerVar<GActionMap>>?): Unit {
    memScoped {
        return kniBridge2364(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GActionMap(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2365(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GActionMap(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2366(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GActionMap(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2367(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAppInfo(_ptr: CValuesRef<GAppInfo>?): Unit {
    memScoped {
        return kniBridge2368(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAppInfo(_ptr: CValuesRef<CPointerVar<GAppInfo>>?): Unit {
    memScoped {
        return kniBridge2369(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAppInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2370(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAppInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2371(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAppInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2372(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAppLaunchContext(_ptr: CValuesRef<GAppLaunchContext>?): Unit {
    memScoped {
        return kniBridge2373(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAppLaunchContext(_ptr: CValuesRef<CPointerVar<GAppLaunchContext>>?): Unit {
    memScoped {
        return kniBridge2374(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAppLaunchContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2375(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAppLaunchContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2376(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAppLaunchContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2377(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAppInfoMonitor(_ptr: CValuesRef<GAppInfoMonitor>?): Unit {
    memScoped {
        return kniBridge2378(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAppInfoMonitor(_ptr: CValuesRef<CPointerVar<GAppInfoMonitor>>?): Unit {
    memScoped {
        return kniBridge2379(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAppInfoMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2380(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAppInfoMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2381(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAppInfoMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2382(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GApplicationCommandLine(_ptr: CValuesRef<GApplicationCommandLine>?): Unit {
    memScoped {
        return kniBridge2383(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GApplicationCommandLine(_ptr: CValuesRef<CPointerVar<GApplicationCommandLine>>?): Unit {
    memScoped {
        return kniBridge2384(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GApplicationCommandLine(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2385(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GApplicationCommandLine(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2386(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GApplicationCommandLine(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2387(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GApplication(_ptr: CValuesRef<GApplication>?): Unit {
    memScoped {
        return kniBridge2388(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GApplication(_ptr: CValuesRef<CPointerVar<GApplication>>?): Unit {
    memScoped {
        return kniBridge2389(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GApplication(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2390(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GApplication(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2391(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GApplication(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2392(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAsyncInitable(_ptr: CValuesRef<GAsyncInitable>?): Unit {
    memScoped {
        return kniBridge2393(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAsyncInitable(_ptr: CValuesRef<CPointerVar<GAsyncInitable>>?): Unit {
    memScoped {
        return kniBridge2394(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAsyncInitable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2395(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAsyncInitable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2396(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAsyncInitable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2397(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GAsyncResult(_ptr: CValuesRef<GAsyncResult>?): Unit {
    memScoped {
        return kniBridge2398(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GAsyncResult(_ptr: CValuesRef<CPointerVar<GAsyncResult>>?): Unit {
    memScoped {
        return kniBridge2399(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GAsyncResult(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2400(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GAsyncResult(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2401(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GAsyncResult(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2402(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBufferedInputStream(_ptr: CValuesRef<GBufferedInputStream>?): Unit {
    memScoped {
        return kniBridge2403(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBufferedInputStream(_ptr: CValuesRef<CPointerVar<GBufferedInputStream>>?): Unit {
    memScoped {
        return kniBridge2404(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBufferedInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2405(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBufferedInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2406(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBufferedInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2407(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBufferedOutputStream(_ptr: CValuesRef<GBufferedOutputStream>?): Unit {
    memScoped {
        return kniBridge2408(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBufferedOutputStream(_ptr: CValuesRef<CPointerVar<GBufferedOutputStream>>?): Unit {
    memScoped {
        return kniBridge2409(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBufferedOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2410(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBufferedOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2411(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBufferedOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2412(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GBytesIcon(_ptr: CValuesRef<GBytesIcon>?): Unit {
    memScoped {
        return kniBridge2413(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GBytesIcon(_ptr: CValuesRef<CPointerVar<GBytesIcon>>?): Unit {
    memScoped {
        return kniBridge2414(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GBytesIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2415(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GBytesIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2416(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GBytesIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2417(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GCancellable(_ptr: CValuesRef<GCancellable>?): Unit {
    memScoped {
        return kniBridge2418(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GCancellable(_ptr: CValuesRef<CPointerVar<GCancellable>>?): Unit {
    memScoped {
        return kniBridge2419(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GCancellable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2420(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GCancellable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2421(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GCancellable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2422(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GCharsetConverter(_ptr: CValuesRef<GCharsetConverter>?): Unit {
    memScoped {
        return kniBridge2423(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GCharsetConverter(_ptr: CValuesRef<CPointerVar<GCharsetConverter>>?): Unit {
    memScoped {
        return kniBridge2424(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GCharsetConverter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2425(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GCharsetConverter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2426(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GCharsetConverter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2427(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GConverter(_ptr: CValuesRef<GConverter>?): Unit {
    memScoped {
        return kniBridge2428(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GConverter(_ptr: CValuesRef<CPointerVar<GConverter>>?): Unit {
    memScoped {
        return kniBridge2429(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GConverter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2430(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GConverter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2431(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GConverter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2432(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GConverterInputStream(_ptr: CValuesRef<GConverterInputStream>?): Unit {
    memScoped {
        return kniBridge2433(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GConverterInputStream(_ptr: CValuesRef<CPointerVar<GConverterInputStream>>?): Unit {
    memScoped {
        return kniBridge2434(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GConverterInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2435(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GConverterInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2436(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GConverterInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2437(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GConverterOutputStream(_ptr: CValuesRef<GConverterOutputStream>?): Unit {
    memScoped {
        return kniBridge2438(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GConverterOutputStream(_ptr: CValuesRef<CPointerVar<GConverterOutputStream>>?): Unit {
    memScoped {
        return kniBridge2439(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GConverterOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2440(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GConverterOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2441(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GConverterOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2442(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GCredentials(_ptr: CValuesRef<GCredentials>?): Unit {
    memScoped {
        return kniBridge2443(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GCredentials(_ptr: CValuesRef<CPointerVar<GCredentials>>?): Unit {
    memScoped {
        return kniBridge2444(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GCredentials(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2445(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GCredentials(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2446(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GCredentials(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2447(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDatagramBased(_ptr: CValuesRef<GDatagramBased>?): Unit {
    memScoped {
        return kniBridge2448(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDatagramBased(_ptr: CValuesRef<CPointerVar<GDatagramBased>>?): Unit {
    memScoped {
        return kniBridge2449(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDatagramBased(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2450(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDatagramBased(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2451(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDatagramBased(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2452(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDataInputStream(_ptr: CValuesRef<GDataInputStream>?): Unit {
    memScoped {
        return kniBridge2453(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDataInputStream(_ptr: CValuesRef<CPointerVar<GDataInputStream>>?): Unit {
    memScoped {
        return kniBridge2454(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDataInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2455(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDataInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2456(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDataInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2457(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDataOutputStream(_ptr: CValuesRef<GDataOutputStream>?): Unit {
    memScoped {
        return kniBridge2458(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDataOutputStream(_ptr: CValuesRef<CPointerVar<GDataOutputStream>>?): Unit {
    memScoped {
        return kniBridge2459(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDataOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2460(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDataOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2461(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDataOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2462(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusActionGroup(_ptr: CValuesRef<GDBusActionGroup>?): Unit {
    memScoped {
        return kniBridge2463(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusActionGroup(_ptr: CValuesRef<CPointerVar<GDBusActionGroup>>?): Unit {
    memScoped {
        return kniBridge2464(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusActionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2465(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusActionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2466(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusActionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2467(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusAuthObserver(_ptr: CValuesRef<GDBusAuthObserver>?): Unit {
    memScoped {
        return kniBridge2468(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusAuthObserver(_ptr: CValuesRef<CPointerVar<GDBusAuthObserver>>?): Unit {
    memScoped {
        return kniBridge2469(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusAuthObserver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2470(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusAuthObserver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2471(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusAuthObserver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2472(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusConnection(_ptr: CValuesRef<GDBusConnection>?): Unit {
    memScoped {
        return kniBridge2473(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusConnection(_ptr: CValuesRef<CPointerVar<GDBusConnection>>?): Unit {
    memScoped {
        return kniBridge2474(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2475(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2476(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2477(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusInterface(_ptr: CValuesRef<GDBusInterface>?): Unit {
    memScoped {
        return kniBridge2478(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusInterface(_ptr: CValuesRef<CPointerVar<GDBusInterface>>?): Unit {
    memScoped {
        return kniBridge2479(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusInterface(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2480(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusInterface(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2481(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusInterface(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2482(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusInterfaceSkeleton(_ptr: CValuesRef<GDBusInterfaceSkeleton>?): Unit {
    memScoped {
        return kniBridge2483(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusInterfaceSkeleton(_ptr: CValuesRef<CPointerVar<GDBusInterfaceSkeleton>>?): Unit {
    memScoped {
        return kniBridge2484(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusInterfaceSkeleton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2485(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2486(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusInterfaceSkeleton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2487(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusMenuModel(_ptr: CValuesRef<GDBusMenuModel>?): Unit {
    memScoped {
        return kniBridge2488(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusMenuModel(_ptr: CValuesRef<CPointerVar<GDBusMenuModel>>?): Unit {
    memScoped {
        return kniBridge2489(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusMenuModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2490(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusMenuModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2491(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusMenuModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2492(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusMessage(_ptr: CValuesRef<GDBusMessage>?): Unit {
    memScoped {
        return kniBridge2493(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusMessage(_ptr: CValuesRef<CPointerVar<GDBusMessage>>?): Unit {
    memScoped {
        return kniBridge2494(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusMessage(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2495(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusMessage(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2496(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusMessage(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2497(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusMethodInvocation(_ptr: CValuesRef<GDBusMethodInvocation>?): Unit {
    memScoped {
        return kniBridge2498(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusMethodInvocation(_ptr: CValuesRef<CPointerVar<GDBusMethodInvocation>>?): Unit {
    memScoped {
        return kniBridge2499(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusMethodInvocation(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2500(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusMethodInvocation(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2501(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusMethodInvocation(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2502(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusNodeInfo(_ptr: CValuesRef<GDBusNodeInfo>?): Unit {
    memScoped {
        return kniBridge2503(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusNodeInfo(_ptr: CValuesRef<CPointerVar<GDBusNodeInfo>>?): Unit {
    memScoped {
        return kniBridge2504(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusNodeInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2505(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusNodeInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2506(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusNodeInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2507(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObject(_ptr: CValuesRef<GDBusObject>?): Unit {
    memScoped {
        return kniBridge2508(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObject(_ptr: CValuesRef<CPointerVar<GDBusObject>>?): Unit {
    memScoped {
        return kniBridge2509(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObject(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2510(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObject(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2511(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObject(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2512(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectManagerClient(_ptr: CValuesRef<GDBusObjectManagerClient>?): Unit {
    memScoped {
        return kniBridge2513(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectManagerClient(_ptr: CValuesRef<CPointerVar<GDBusObjectManagerClient>>?): Unit {
    memScoped {
        return kniBridge2514(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectManagerClient(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2515(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectManagerClient(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2516(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectManagerClient(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2517(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectManager(_ptr: CValuesRef<GDBusObjectManager>?): Unit {
    memScoped {
        return kniBridge2518(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectManager(_ptr: CValuesRef<CPointerVar<GDBusObjectManager>>?): Unit {
    memScoped {
        return kniBridge2519(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectManager(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2520(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectManager(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2521(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectManager(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2522(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectManagerServer(_ptr: CValuesRef<GDBusObjectManagerServer>?): Unit {
    memScoped {
        return kniBridge2523(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectManagerServer(_ptr: CValuesRef<CPointerVar<GDBusObjectManagerServer>>?): Unit {
    memScoped {
        return kniBridge2524(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectManagerServer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2525(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectManagerServer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2526(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectManagerServer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2527(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectProxy(_ptr: CValuesRef<GDBusObjectProxy>?): Unit {
    memScoped {
        return kniBridge2528(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectProxy(_ptr: CValuesRef<CPointerVar<GDBusObjectProxy>>?): Unit {
    memScoped {
        return kniBridge2529(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectProxy(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2530(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectProxy(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2531(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectProxy(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2532(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusObjectSkeleton(_ptr: CValuesRef<GDBusObjectSkeleton>?): Unit {
    memScoped {
        return kniBridge2533(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusObjectSkeleton(_ptr: CValuesRef<CPointerVar<GDBusObjectSkeleton>>?): Unit {
    memScoped {
        return kniBridge2534(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusObjectSkeleton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2535(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusObjectSkeleton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2536(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusObjectSkeleton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2537(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusProxy(_ptr: CValuesRef<GDBusProxy>?): Unit {
    memScoped {
        return kniBridge2538(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusProxy(_ptr: CValuesRef<CPointerVar<GDBusProxy>>?): Unit {
    memScoped {
        return kniBridge2539(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusProxy(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2540(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusProxy(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2541(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusProxy(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2542(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDBusServer(_ptr: CValuesRef<GDBusServer>?): Unit {
    memScoped {
        return kniBridge2543(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDBusServer(_ptr: CValuesRef<CPointerVar<GDBusServer>>?): Unit {
    memScoped {
        return kniBridge2544(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDBusServer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2545(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDBusServer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2546(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDBusServer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2547(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GDrive(_ptr: CValuesRef<GDrive>?): Unit {
    memScoped {
        return kniBridge2548(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GDrive(_ptr: CValuesRef<CPointerVar<GDrive>>?): Unit {
    memScoped {
        return kniBridge2549(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GDrive(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2550(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GDrive(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2551(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GDrive(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2552(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GEmblemedIcon(_ptr: CValuesRef<GEmblemedIcon>?): Unit {
    memScoped {
        return kniBridge2553(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GEmblemedIcon(_ptr: CValuesRef<CPointerVar<GEmblemedIcon>>?): Unit {
    memScoped {
        return kniBridge2554(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GEmblemedIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2555(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GEmblemedIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2556(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GEmblemedIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2557(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GEmblem(_ptr: CValuesRef<GEmblem>?): Unit {
    memScoped {
        return kniBridge2558(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GEmblem(_ptr: CValuesRef<CPointerVar<GEmblem>>?): Unit {
    memScoped {
        return kniBridge2559(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GEmblem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2560(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GEmblem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2561(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GEmblem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2562(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileEnumerator(_ptr: CValuesRef<GFileEnumerator>?): Unit {
    memScoped {
        return kniBridge2563(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileEnumerator(_ptr: CValuesRef<CPointerVar<GFileEnumerator>>?): Unit {
    memScoped {
        return kniBridge2564(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileEnumerator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2565(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileEnumerator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2566(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileEnumerator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2567(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFile(_ptr: CValuesRef<GFile>?): Unit {
    memScoped {
        return kniBridge2568(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFile(_ptr: CValuesRef<CPointerVar<GFile>>?): Unit {
    memScoped {
        return kniBridge2569(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFile(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2570(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFile(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2571(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFile(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2572(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileAttributeInfoList(_ptr: CValuesRef<GFileAttributeInfoList>?): Unit {
    memScoped {
        return kniBridge2573(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileAttributeInfoList(_ptr: CValuesRef<CPointerVar<GFileAttributeInfoList>>?): Unit {
    memScoped {
        return kniBridge2574(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileAttributeInfoList(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2575(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileAttributeInfoList(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2576(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileAttributeInfoList(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2577(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileIcon(_ptr: CValuesRef<GFileIcon>?): Unit {
    memScoped {
        return kniBridge2578(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileIcon(_ptr: CValuesRef<CPointerVar<GFileIcon>>?): Unit {
    memScoped {
        return kniBridge2579(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2580(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2581(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2582(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileInfo(_ptr: CValuesRef<GFileInfo>?): Unit {
    memScoped {
        return kniBridge2583(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileInfo(_ptr: CValuesRef<CPointerVar<GFileInfo>>?): Unit {
    memScoped {
        return kniBridge2584(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2585(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2586(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2587(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileInputStream(_ptr: CValuesRef<GFileInputStream>?): Unit {
    memScoped {
        return kniBridge2588(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileInputStream(_ptr: CValuesRef<CPointerVar<GFileInputStream>>?): Unit {
    memScoped {
        return kniBridge2589(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2590(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2591(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2592(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileIOStream(_ptr: CValuesRef<GFileIOStream>?): Unit {
    memScoped {
        return kniBridge2593(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileIOStream(_ptr: CValuesRef<CPointerVar<GFileIOStream>>?): Unit {
    memScoped {
        return kniBridge2594(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileIOStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2595(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileIOStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2596(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileIOStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2597(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileMonitor(_ptr: CValuesRef<GFileMonitor>?): Unit {
    memScoped {
        return kniBridge2598(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileMonitor(_ptr: CValuesRef<CPointerVar<GFileMonitor>>?): Unit {
    memScoped {
        return kniBridge2599(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2600(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2601(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2602(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFilenameCompleter(_ptr: CValuesRef<GFilenameCompleter>?): Unit {
    memScoped {
        return kniBridge2603(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFilenameCompleter(_ptr: CValuesRef<CPointerVar<GFilenameCompleter>>?): Unit {
    memScoped {
        return kniBridge2604(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFilenameCompleter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2605(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFilenameCompleter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2606(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFilenameCompleter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2607(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFileOutputStream(_ptr: CValuesRef<GFileOutputStream>?): Unit {
    memScoped {
        return kniBridge2608(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFileOutputStream(_ptr: CValuesRef<CPointerVar<GFileOutputStream>>?): Unit {
    memScoped {
        return kniBridge2609(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFileOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2610(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFileOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2611(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFileOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2612(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFilterInputStream(_ptr: CValuesRef<GFilterInputStream>?): Unit {
    memScoped {
        return kniBridge2613(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFilterInputStream(_ptr: CValuesRef<CPointerVar<GFilterInputStream>>?): Unit {
    memScoped {
        return kniBridge2614(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFilterInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2615(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFilterInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2616(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFilterInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2617(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GFilterOutputStream(_ptr: CValuesRef<GFilterOutputStream>?): Unit {
    memScoped {
        return kniBridge2618(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GFilterOutputStream(_ptr: CValuesRef<CPointerVar<GFilterOutputStream>>?): Unit {
    memScoped {
        return kniBridge2619(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GFilterOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2620(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GFilterOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2621(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GFilterOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2622(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIcon(_ptr: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge2623(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIcon(_ptr: CValuesRef<CPointerVar<GIcon>>?): Unit {
    memScoped {
        return kniBridge2624(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2625(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2626(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2627(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInetAddress(_ptr: CValuesRef<GInetAddress>?): Unit {
    memScoped {
        return kniBridge2628(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInetAddress(_ptr: CValuesRef<CPointerVar<GInetAddress>>?): Unit {
    memScoped {
        return kniBridge2629(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInetAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2630(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInetAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2631(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInetAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2632(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInetAddressMask(_ptr: CValuesRef<GInetAddressMask>?): Unit {
    memScoped {
        return kniBridge2633(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInetAddressMask(_ptr: CValuesRef<CPointerVar<GInetAddressMask>>?): Unit {
    memScoped {
        return kniBridge2634(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInetAddressMask(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2635(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInetAddressMask(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2636(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInetAddressMask(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2637(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInetSocketAddress(_ptr: CValuesRef<GInetSocketAddress>?): Unit {
    memScoped {
        return kniBridge2638(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInetSocketAddress(_ptr: CValuesRef<CPointerVar<GInetSocketAddress>>?): Unit {
    memScoped {
        return kniBridge2639(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInetSocketAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2640(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInetSocketAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2641(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInetSocketAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2642(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInitable(_ptr: CValuesRef<GInitable>?): Unit {
    memScoped {
        return kniBridge2643(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInitable(_ptr: CValuesRef<CPointerVar<GInitable>>?): Unit {
    memScoped {
        return kniBridge2644(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInitable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2645(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInitable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2646(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInitable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2647(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GInputStream(_ptr: CValuesRef<GInputStream>?): Unit {
    memScoped {
        return kniBridge2648(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GInputStream(_ptr: CValuesRef<CPointerVar<GInputStream>>?): Unit {
    memScoped {
        return kniBridge2649(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2650(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2651(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2652(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIOModule(_ptr: CValuesRef<GIOModule>?): Unit {
    memScoped {
        return kniBridge2653(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIOModule(_ptr: CValuesRef<CPointerVar<GIOModule>>?): Unit {
    memScoped {
        return kniBridge2654(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIOModule(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2655(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIOModule(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2656(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIOModule(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2657(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GIOStream(_ptr: CValuesRef<GIOStream>?): Unit {
    memScoped {
        return kniBridge2658(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GIOStream(_ptr: CValuesRef<CPointerVar<GIOStream>>?): Unit {
    memScoped {
        return kniBridge2659(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GIOStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2660(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GIOStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2661(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GIOStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2662(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GLoadableIcon(_ptr: CValuesRef<GLoadableIcon>?): Unit {
    memScoped {
        return kniBridge2663(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GLoadableIcon(_ptr: CValuesRef<CPointerVar<GLoadableIcon>>?): Unit {
    memScoped {
        return kniBridge2664(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GLoadableIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2665(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GLoadableIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2666(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GLoadableIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2667(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMemoryInputStream(_ptr: CValuesRef<GMemoryInputStream>?): Unit {
    memScoped {
        return kniBridge2668(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMemoryInputStream(_ptr: CValuesRef<CPointerVar<GMemoryInputStream>>?): Unit {
    memScoped {
        return kniBridge2669(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMemoryInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2670(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMemoryInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2671(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMemoryInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2672(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMemoryOutputStream(_ptr: CValuesRef<GMemoryOutputStream>?): Unit {
    memScoped {
        return kniBridge2673(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMemoryOutputStream(_ptr: CValuesRef<CPointerVar<GMemoryOutputStream>>?): Unit {
    memScoped {
        return kniBridge2674(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMemoryOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2675(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMemoryOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2676(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMemoryOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2677(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenu(_ptr: CValuesRef<GMenu>?): Unit {
    memScoped {
        return kniBridge2678(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenu(_ptr: CValuesRef<CPointerVar<GMenu>>?): Unit {
    memScoped {
        return kniBridge2679(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenu(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2680(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenu(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2681(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenu(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2682(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuItem(_ptr: CValuesRef<GMenuItem>?): Unit {
    memScoped {
        return kniBridge2683(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuItem(_ptr: CValuesRef<CPointerVar<GMenuItem>>?): Unit {
    memScoped {
        return kniBridge2684(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2685(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2686(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2687(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuModel(_ptr: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge2688(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuModel(_ptr: CValuesRef<CPointerVar<GMenuModel>>?): Unit {
    memScoped {
        return kniBridge2689(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2690(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2691(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2692(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuAttributeIter(_ptr: CValuesRef<GMenuAttributeIter>?): Unit {
    memScoped {
        return kniBridge2693(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuAttributeIter(_ptr: CValuesRef<CPointerVar<GMenuAttributeIter>>?): Unit {
    memScoped {
        return kniBridge2694(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuAttributeIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2695(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuAttributeIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2696(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuAttributeIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2697(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMenuLinkIter(_ptr: CValuesRef<GMenuLinkIter>?): Unit {
    memScoped {
        return kniBridge2698(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMenuLinkIter(_ptr: CValuesRef<CPointerVar<GMenuLinkIter>>?): Unit {
    memScoped {
        return kniBridge2699(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMenuLinkIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2700(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMenuLinkIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2701(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMenuLinkIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2702(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMount(_ptr: CValuesRef<GMount>?): Unit {
    memScoped {
        return kniBridge2703(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMount(_ptr: CValuesRef<CPointerVar<GMount>>?): Unit {
    memScoped {
        return kniBridge2704(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMount(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2705(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMount(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2706(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMount(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2707(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GMountOperation(_ptr: CValuesRef<GMountOperation>?): Unit {
    memScoped {
        return kniBridge2708(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GMountOperation(_ptr: CValuesRef<CPointerVar<GMountOperation>>?): Unit {
    memScoped {
        return kniBridge2709(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GMountOperation(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2710(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GMountOperation(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2711(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GMountOperation(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2712(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNativeVolumeMonitor(_ptr: CValuesRef<GNativeVolumeMonitor>?): Unit {
    memScoped {
        return kniBridge2713(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNativeVolumeMonitor(_ptr: CValuesRef<CPointerVar<GNativeVolumeMonitor>>?): Unit {
    memScoped {
        return kniBridge2714(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNativeVolumeMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2715(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNativeVolumeMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2716(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNativeVolumeMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2717(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNetworkAddress(_ptr: CValuesRef<GNetworkAddress>?): Unit {
    memScoped {
        return kniBridge2718(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNetworkAddress(_ptr: CValuesRef<CPointerVar<GNetworkAddress>>?): Unit {
    memScoped {
        return kniBridge2719(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNetworkAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2720(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNetworkAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2721(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNetworkAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2722(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNetworkMonitor(_ptr: CValuesRef<GNetworkMonitor>?): Unit {
    memScoped {
        return kniBridge2723(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNetworkMonitor(_ptr: CValuesRef<CPointerVar<GNetworkMonitor>>?): Unit {
    memScoped {
        return kniBridge2724(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNetworkMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2725(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNetworkMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2726(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNetworkMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2727(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNetworkService(_ptr: CValuesRef<GNetworkService>?): Unit {
    memScoped {
        return kniBridge2728(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNetworkService(_ptr: CValuesRef<CPointerVar<GNetworkService>>?): Unit {
    memScoped {
        return kniBridge2729(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNetworkService(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2730(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNetworkService(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2731(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNetworkService(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2732(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GNotification(_ptr: CValuesRef<GNotification>?): Unit {
    memScoped {
        return kniBridge2733(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GNotification(_ptr: CValuesRef<CPointerVar<GNotification>>?): Unit {
    memScoped {
        return kniBridge2734(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GNotification(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2735(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GNotification(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2736(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GNotification(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2737(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GOutputStream(_ptr: CValuesRef<GOutputStream>?): Unit {
    memScoped {
        return kniBridge2738(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GOutputStream(_ptr: CValuesRef<CPointerVar<GOutputStream>>?): Unit {
    memScoped {
        return kniBridge2739(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2740(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2741(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2742(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPermission(_ptr: CValuesRef<GPermission>?): Unit {
    memScoped {
        return kniBridge2743(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPermission(_ptr: CValuesRef<CPointerVar<GPermission>>?): Unit {
    memScoped {
        return kniBridge2744(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPermission(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2745(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPermission(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2746(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPermission(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2747(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPollableInputStream(_ptr: CValuesRef<GPollableInputStream>?): Unit {
    memScoped {
        return kniBridge2748(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPollableInputStream(_ptr: CValuesRef<CPointerVar<GPollableInputStream>>?): Unit {
    memScoped {
        return kniBridge2749(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPollableInputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2750(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPollableInputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2751(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPollableInputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2752(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPollableOutputStream(_ptr: CValuesRef<GPollableOutputStream>?): Unit {
    memScoped {
        return kniBridge2753(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPollableOutputStream(_ptr: CValuesRef<CPointerVar<GPollableOutputStream>>?): Unit {
    memScoped {
        return kniBridge2754(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPollableOutputStream(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2755(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPollableOutputStream(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2756(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPollableOutputStream(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2757(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GPropertyAction(_ptr: CValuesRef<GPropertyAction>?): Unit {
    memScoped {
        return kniBridge2758(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GPropertyAction(_ptr: CValuesRef<CPointerVar<GPropertyAction>>?): Unit {
    memScoped {
        return kniBridge2759(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GPropertyAction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2760(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GPropertyAction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2761(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GPropertyAction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2762(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxyAddressEnumerator(_ptr: CValuesRef<GProxyAddressEnumerator>?): Unit {
    memScoped {
        return kniBridge2763(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxyAddressEnumerator(_ptr: CValuesRef<CPointerVar<GProxyAddressEnumerator>>?): Unit {
    memScoped {
        return kniBridge2764(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxyAddressEnumerator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2765(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxyAddressEnumerator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2766(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxyAddressEnumerator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2767(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxyAddress(_ptr: CValuesRef<GProxyAddress>?): Unit {
    memScoped {
        return kniBridge2768(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxyAddress(_ptr: CValuesRef<CPointerVar<GProxyAddress>>?): Unit {
    memScoped {
        return kniBridge2769(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxyAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2770(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxyAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2771(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxyAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2772(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxy(_ptr: CValuesRef<GProxy>?): Unit {
    memScoped {
        return kniBridge2773(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxy(_ptr: CValuesRef<CPointerVar<GProxy>>?): Unit {
    memScoped {
        return kniBridge2774(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxy(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2775(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxy(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2776(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxy(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2777(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GProxyResolver(_ptr: CValuesRef<GProxyResolver>?): Unit {
    memScoped {
        return kniBridge2778(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GProxyResolver(_ptr: CValuesRef<CPointerVar<GProxyResolver>>?): Unit {
    memScoped {
        return kniBridge2779(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GProxyResolver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2780(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GProxyResolver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2781(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GProxyResolver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2782(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GRemoteActionGroup(_ptr: CValuesRef<GRemoteActionGroup>?): Unit {
    memScoped {
        return kniBridge2783(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GRemoteActionGroup(_ptr: CValuesRef<CPointerVar<GRemoteActionGroup>>?): Unit {
    memScoped {
        return kniBridge2784(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GRemoteActionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2785(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GRemoteActionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2786(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GRemoteActionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2787(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GResolver(_ptr: CValuesRef<GResolver>?): Unit {
    memScoped {
        return kniBridge2788(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GResolver(_ptr: CValuesRef<CPointerVar<GResolver>>?): Unit {
    memScoped {
        return kniBridge2789(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GResolver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2790(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GResolver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2791(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GResolver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2792(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GResource(_ptr: CValuesRef<GResource>?): Unit {
    memScoped {
        return kniBridge2793(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GResource(_ptr: CValuesRef<CPointerVar<GResource>>?): Unit {
    memScoped {
        return kniBridge2794(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GResource(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2795(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GResource(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2796(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GResource(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2797(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSeekable(_ptr: CValuesRef<GSeekable>?): Unit {
    memScoped {
        return kniBridge2798(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSeekable(_ptr: CValuesRef<CPointerVar<GSeekable>>?): Unit {
    memScoped {
        return kniBridge2799(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSeekable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2800(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSeekable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2801(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSeekable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2802(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsBackend(_ptr: CValuesRef<GSettingsBackend>?): Unit {
    memScoped {
        return kniBridge2803(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsBackend(_ptr: CValuesRef<CPointerVar<GSettingsBackend>>?): Unit {
    memScoped {
        return kniBridge2804(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsBackend(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2805(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsBackend(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2806(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsBackend(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2807(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsSchema(_ptr: CValuesRef<GSettingsSchema>?): Unit {
    memScoped {
        return kniBridge2808(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsSchema(_ptr: CValuesRef<CPointerVar<GSettingsSchema>>?): Unit {
    memScoped {
        return kniBridge2809(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsSchema(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2810(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsSchema(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2811(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsSchema(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2812(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsSchemaKey(_ptr: CValuesRef<GSettingsSchemaKey>?): Unit {
    memScoped {
        return kniBridge2813(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsSchemaKey(_ptr: CValuesRef<CPointerVar<GSettingsSchemaKey>>?): Unit {
    memScoped {
        return kniBridge2814(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsSchemaKey(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2815(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsSchemaKey(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2816(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsSchemaKey(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2817(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettingsSchemaSource(_ptr: CValuesRef<GSettingsSchemaSource>?): Unit {
    memScoped {
        return kniBridge2818(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettingsSchemaSource(_ptr: CValuesRef<CPointerVar<GSettingsSchemaSource>>?): Unit {
    memScoped {
        return kniBridge2819(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettingsSchemaSource(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2820(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettingsSchemaSource(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2821(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettingsSchemaSource(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2822(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSettings(_ptr: CValuesRef<GSettings>?): Unit {
    memScoped {
        return kniBridge2823(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSettings(_ptr: CValuesRef<CPointerVar<GSettings>>?): Unit {
    memScoped {
        return kniBridge2824(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSettings(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2825(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSettings(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2826(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSettings(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2827(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleActionGroup(_ptr: CValuesRef<GSimpleActionGroup>?): Unit {
    memScoped {
        return kniBridge2828(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleActionGroup(_ptr: CValuesRef<CPointerVar<GSimpleActionGroup>>?): Unit {
    memScoped {
        return kniBridge2829(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleActionGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2830(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleActionGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2831(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleActionGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2832(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleAction(_ptr: CValuesRef<GSimpleAction>?): Unit {
    memScoped {
        return kniBridge2833(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleAction(_ptr: CValuesRef<CPointerVar<GSimpleAction>>?): Unit {
    memScoped {
        return kniBridge2834(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleAction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2835(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleAction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2836(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleAction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2837(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleAsyncResult(_ptr: CValuesRef<GSimpleAsyncResult>?): Unit {
    memScoped {
        return kniBridge2838(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleAsyncResult(_ptr: CValuesRef<CPointerVar<GSimpleAsyncResult>>?): Unit {
    memScoped {
        return kniBridge2839(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleAsyncResult(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2840(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleAsyncResult(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2841(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleAsyncResult(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2842(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimplePermission(_ptr: CValuesRef<GSimplePermission>?): Unit {
    memScoped {
        return kniBridge2843(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimplePermission(_ptr: CValuesRef<CPointerVar<GSimplePermission>>?): Unit {
    memScoped {
        return kniBridge2844(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimplePermission(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2845(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimplePermission(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2846(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimplePermission(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2847(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSimpleProxyResolver(_ptr: CValuesRef<GSimpleProxyResolver>?): Unit {
    memScoped {
        return kniBridge2848(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSimpleProxyResolver(_ptr: CValuesRef<CPointerVar<GSimpleProxyResolver>>?): Unit {
    memScoped {
        return kniBridge2849(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSimpleProxyResolver(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2850(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSimpleProxyResolver(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2851(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSimpleProxyResolver(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2852(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketAddressEnumerator(_ptr: CValuesRef<GSocketAddressEnumerator>?): Unit {
    memScoped {
        return kniBridge2853(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketAddressEnumerator(_ptr: CValuesRef<CPointerVar<GSocketAddressEnumerator>>?): Unit {
    memScoped {
        return kniBridge2854(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketAddressEnumerator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2855(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketAddressEnumerator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2856(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketAddressEnumerator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2857(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketAddress(_ptr: CValuesRef<GSocketAddress>?): Unit {
    memScoped {
        return kniBridge2858(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketAddress(_ptr: CValuesRef<CPointerVar<GSocketAddress>>?): Unit {
    memScoped {
        return kniBridge2859(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketAddress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2860(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketAddress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2861(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketAddress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2862(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketClient(_ptr: CValuesRef<GSocketClient>?): Unit {
    memScoped {
        return kniBridge2863(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketClient(_ptr: CValuesRef<CPointerVar<GSocketClient>>?): Unit {
    memScoped {
        return kniBridge2864(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketClient(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2865(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketClient(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2866(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketClient(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2867(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketConnectable(_ptr: CValuesRef<GSocketConnectable>?): Unit {
    memScoped {
        return kniBridge2868(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketConnectable(_ptr: CValuesRef<CPointerVar<GSocketConnectable>>?): Unit {
    memScoped {
        return kniBridge2869(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketConnectable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2870(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketConnectable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2871(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketConnectable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2872(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketConnection(_ptr: CValuesRef<GSocketConnection>?): Unit {
    memScoped {
        return kniBridge2873(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketConnection(_ptr: CValuesRef<CPointerVar<GSocketConnection>>?): Unit {
    memScoped {
        return kniBridge2874(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2875(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2876(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2877(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketControlMessage(_ptr: CValuesRef<GSocketControlMessage>?): Unit {
    memScoped {
        return kniBridge2878(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketControlMessage(_ptr: CValuesRef<CPointerVar<GSocketControlMessage>>?): Unit {
    memScoped {
        return kniBridge2879(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketControlMessage(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2880(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketControlMessage(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2881(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketControlMessage(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2882(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocket(_ptr: CValuesRef<GSocket>?): Unit {
    memScoped {
        return kniBridge2883(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocket(_ptr: CValuesRef<CPointerVar<GSocket>>?): Unit {
    memScoped {
        return kniBridge2884(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocket(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2885(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocket(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2886(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocket(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2887(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketListener(_ptr: CValuesRef<GSocketListener>?): Unit {
    memScoped {
        return kniBridge2888(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketListener(_ptr: CValuesRef<CPointerVar<GSocketListener>>?): Unit {
    memScoped {
        return kniBridge2889(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketListener(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2890(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketListener(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2891(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketListener(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2892(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSocketService(_ptr: CValuesRef<GSocketService>?): Unit {
    memScoped {
        return kniBridge2893(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSocketService(_ptr: CValuesRef<CPointerVar<GSocketService>>?): Unit {
    memScoped {
        return kniBridge2894(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSocketService(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2895(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSocketService(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2896(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSocketService(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2897(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSubprocess(_ptr: CValuesRef<GSubprocess>?): Unit {
    memScoped {
        return kniBridge2898(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSubprocess(_ptr: CValuesRef<CPointerVar<GSubprocess>>?): Unit {
    memScoped {
        return kniBridge2899(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSubprocess(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2900(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSubprocess(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2901(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSubprocess(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2902(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GSubprocessLauncher(_ptr: CValuesRef<GSubprocessLauncher>?): Unit {
    memScoped {
        return kniBridge2903(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GSubprocessLauncher(_ptr: CValuesRef<CPointerVar<GSubprocessLauncher>>?): Unit {
    memScoped {
        return kniBridge2904(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GSubprocessLauncher(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2905(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GSubprocessLauncher(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2906(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GSubprocessLauncher(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2907(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTask(_ptr: CValuesRef<GTask>?): Unit {
    memScoped {
        return kniBridge2908(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTask(_ptr: CValuesRef<CPointerVar<GTask>>?): Unit {
    memScoped {
        return kniBridge2909(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTask(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2910(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTask(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2911(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTask(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2912(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTcpConnection(_ptr: CValuesRef<GTcpConnection>?): Unit {
    memScoped {
        return kniBridge2913(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTcpConnection(_ptr: CValuesRef<CPointerVar<GTcpConnection>>?): Unit {
    memScoped {
        return kniBridge2914(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTcpConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2915(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTcpConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2916(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTcpConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2917(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTcpWrapperConnection(_ptr: CValuesRef<GTcpWrapperConnection>?): Unit {
    memScoped {
        return kniBridge2918(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTcpWrapperConnection(_ptr: CValuesRef<CPointerVar<GTcpWrapperConnection>>?): Unit {
    memScoped {
        return kniBridge2919(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTcpWrapperConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2920(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTcpWrapperConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2921(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTcpWrapperConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2922(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTestDBus(_ptr: CValuesRef<GTestDBus>?): Unit {
    memScoped {
        return kniBridge2923(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTestDBus(_ptr: CValuesRef<CPointerVar<GTestDBus>>?): Unit {
    memScoped {
        return kniBridge2924(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTestDBus(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2925(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTestDBus(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2926(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTestDBus(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2927(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GThemedIcon(_ptr: CValuesRef<GThemedIcon>?): Unit {
    memScoped {
        return kniBridge2928(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GThemedIcon(_ptr: CValuesRef<CPointerVar<GThemedIcon>>?): Unit {
    memScoped {
        return kniBridge2929(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GThemedIcon(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2930(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GThemedIcon(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2931(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GThemedIcon(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2932(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GThreadedSocketService(_ptr: CValuesRef<GThreadedSocketService>?): Unit {
    memScoped {
        return kniBridge2933(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GThreadedSocketService(_ptr: CValuesRef<CPointerVar<GThreadedSocketService>>?): Unit {
    memScoped {
        return kniBridge2934(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GThreadedSocketService(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2935(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GThreadedSocketService(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2936(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GThreadedSocketService(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2937(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsBackend(_ptr: CValuesRef<GTlsBackend>?): Unit {
    memScoped {
        return kniBridge2938(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsBackend(_ptr: CValuesRef<CPointerVar<GTlsBackend>>?): Unit {
    memScoped {
        return kniBridge2939(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsBackend(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2940(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsBackend(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2941(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsBackend(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2942(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsCertificate(_ptr: CValuesRef<GTlsCertificate>?): Unit {
    memScoped {
        return kniBridge2943(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsCertificate(_ptr: CValuesRef<CPointerVar<GTlsCertificate>>?): Unit {
    memScoped {
        return kniBridge2944(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsCertificate(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2945(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsCertificate(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2946(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsCertificate(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2947(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsClientConnection(_ptr: CValuesRef<GTlsClientConnection>?): Unit {
    memScoped {
        return kniBridge2948(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsClientConnection(_ptr: CValuesRef<CPointerVar<GTlsClientConnection>>?): Unit {
    memScoped {
        return kniBridge2949(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsClientConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2950(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsClientConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2951(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsClientConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2952(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsConnection(_ptr: CValuesRef<GTlsConnection>?): Unit {
    memScoped {
        return kniBridge2953(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsConnection(_ptr: CValuesRef<CPointerVar<GTlsConnection>>?): Unit {
    memScoped {
        return kniBridge2954(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2955(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2956(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2957(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsDatabase(_ptr: CValuesRef<GTlsDatabase>?): Unit {
    memScoped {
        return kniBridge2958(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsDatabase(_ptr: CValuesRef<CPointerVar<GTlsDatabase>>?): Unit {
    memScoped {
        return kniBridge2959(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsDatabase(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2960(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsDatabase(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2961(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsDatabase(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2962(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsFileDatabase(_ptr: CValuesRef<GTlsFileDatabase>?): Unit {
    memScoped {
        return kniBridge2963(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsFileDatabase(_ptr: CValuesRef<CPointerVar<GTlsFileDatabase>>?): Unit {
    memScoped {
        return kniBridge2964(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsFileDatabase(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2965(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsFileDatabase(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2966(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsFileDatabase(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2967(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsInteraction(_ptr: CValuesRef<GTlsInteraction>?): Unit {
    memScoped {
        return kniBridge2968(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsInteraction(_ptr: CValuesRef<CPointerVar<GTlsInteraction>>?): Unit {
    memScoped {
        return kniBridge2969(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsInteraction(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2970(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsInteraction(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2971(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsInteraction(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2972(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsPassword(_ptr: CValuesRef<GTlsPassword>?): Unit {
    memScoped {
        return kniBridge2973(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsPassword(_ptr: CValuesRef<CPointerVar<GTlsPassword>>?): Unit {
    memScoped {
        return kniBridge2974(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsPassword(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2975(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsPassword(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2976(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsPassword(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2977(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GTlsServerConnection(_ptr: CValuesRef<GTlsServerConnection>?): Unit {
    memScoped {
        return kniBridge2978(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GTlsServerConnection(_ptr: CValuesRef<CPointerVar<GTlsServerConnection>>?): Unit {
    memScoped {
        return kniBridge2979(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GTlsServerConnection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2980(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GTlsServerConnection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2981(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GTlsServerConnection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2982(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVfs(_ptr: CValuesRef<GVfs>?): Unit {
    memScoped {
        return kniBridge2983(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVfs(_ptr: CValuesRef<CPointerVar<GVfs>>?): Unit {
    memScoped {
        return kniBridge2984(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVfs(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2985(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVfs(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2986(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVfs(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2987(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVolume(_ptr: CValuesRef<GVolume>?): Unit {
    memScoped {
        return kniBridge2988(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVolume(_ptr: CValuesRef<CPointerVar<GVolume>>?): Unit {
    memScoped {
        return kniBridge2989(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVolume(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2990(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVolume(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2991(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVolume(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2992(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GVolumeMonitor(_ptr: CValuesRef<GVolumeMonitor>?): Unit {
    memScoped {
        return kniBridge2993(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GVolumeMonitor(_ptr: CValuesRef<CPointerVar<GVolumeMonitor>>?): Unit {
    memScoped {
        return kniBridge2994(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GVolumeMonitor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge2995(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GVolumeMonitor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge2996(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GVolumeMonitor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge2997(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GZlibCompressor(_ptr: CValuesRef<GZlibCompressor>?): Unit {
    memScoped {
        return kniBridge2998(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GZlibCompressor(_ptr: CValuesRef<CPointerVar<GZlibCompressor>>?): Unit {
    memScoped {
        return kniBridge2999(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GZlibCompressor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3000(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GZlibCompressor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3001(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GZlibCompressor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3002(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GZlibDecompressor(_ptr: CValuesRef<GZlibDecompressor>?): Unit {
    memScoped {
        return kniBridge3003(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GZlibDecompressor(_ptr: CValuesRef<CPointerVar<GZlibDecompressor>>?): Unit {
    memScoped {
        return kniBridge3004(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GZlibDecompressor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3005(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GZlibDecompressor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3006(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GZlibDecompressor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3007(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_get_type(): GType {
    return kniBridge3008()
}

fun gtk_accel_group_new(): CPointer<GtkAccelGroup>? {
    return interpretCPointer<GtkAccelGroup>(kniBridge3009())
}

fun gtk_accel_group_get_is_locked(accel_group: CValuesRef<GtkAccelGroup>?): gboolean {
    memScoped {
        return kniBridge3010(accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_get_modifier_mask(accel_group: CValuesRef<GtkAccelGroup>?): GdkModifierType {
    memScoped {
        return kniBridge3011(accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_lock(accel_group: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3012(accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_unlock(accel_group: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3013(accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_connect(accel_group: CValuesRef<GtkAccelGroup>?, accel_key: guint, accel_mods: GdkModifierType, accel_flags: GtkAccelFlags, closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge3014(accel_group?.getPointer(memScope).rawValue, accel_key, accel_mods, accel_flags, closure?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_connect_by_path(accel_group: CValuesRef<GtkAccelGroup>?, @CCall.CString accel_path: String?, closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge3015(accel_group?.getPointer(memScope).rawValue, accel_path?.cstr?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_disconnect(accel_group: CValuesRef<GtkAccelGroup>?, closure: CValuesRef<GClosure>?): gboolean {
    memScoped {
        return kniBridge3016(accel_group?.getPointer(memScope).rawValue, closure?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_group_disconnect_key(accel_group: CValuesRef<GtkAccelGroup>?, accel_key: guint, accel_mods: GdkModifierType): gboolean {
    memScoped {
        return kniBridge3017(accel_group?.getPointer(memScope).rawValue, accel_key, accel_mods)
    }
}

fun gtk_accel_group_activate(accel_group: CValuesRef<GtkAccelGroup>?, accel_quark: GQuark, acceleratable: CValuesRef<GObject>?, accel_key: guint, accel_mods: GdkModifierType): gboolean {
    memScoped {
        return kniBridge3018(accel_group?.getPointer(memScope).rawValue, accel_quark, acceleratable?.getPointer(memScope).rawValue, accel_key, accel_mods)
    }
}

fun _gtk_accel_group_attach(accel_group: CValuesRef<GtkAccelGroup>?, `object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge3019(accel_group?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun _gtk_accel_group_detach(accel_group: CValuesRef<GtkAccelGroup>?, `object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge3020(accel_group?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_groups_activate(`object`: CValuesRef<GObject>?, accel_key: guint, accel_mods: GdkModifierType): gboolean {
    memScoped {
        return kniBridge3021(`object`?.getPointer(memScope).rawValue, accel_key, accel_mods)
    }
}

fun gtk_accel_groups_from_object(`object`: CValuesRef<GObject>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge3022(`object`?.getPointer(memScope).rawValue))
    }
}

fun gtk_accel_group_find(accel_group: CValuesRef<GtkAccelGroup>?, find_func: GtkAccelGroupFindFunc?, data: gpointer?): CPointer<GtkAccelKey>? {
    memScoped {
        return interpretCPointer<GtkAccelKey>(kniBridge3023(accel_group?.getPointer(memScope).rawValue, find_func.rawValue, data.rawValue))
    }
}

fun gtk_accel_group_from_accel_closure(closure: CValuesRef<GClosure>?): CPointer<GtkAccelGroup>? {
    memScoped {
        return interpretCPointer<GtkAccelGroup>(kniBridge3024(closure?.getPointer(memScope).rawValue))
    }
}

fun gtk_accelerator_valid(keyval: guint, modifiers: GdkModifierType): gboolean {
    return kniBridge3025(keyval, modifiers)
}

fun gtk_accelerator_parse(@CCall.CString accelerator: String?, accelerator_key: CValuesRef<guintVar>?, accelerator_mods: CValuesRef<GdkModifierTypeVar>?): Unit {
    memScoped {
        return kniBridge3026(accelerator?.cstr?.getPointer(memScope).rawValue, accelerator_key?.getPointer(memScope).rawValue, accelerator_mods?.getPointer(memScope).rawValue)
    }
}

fun gtk_accelerator_parse_with_keycode(@CCall.CString accelerator: String?, accelerator_key: CValuesRef<guintVar>?, accelerator_codes: CValuesRef<CPointerVar<guintVar>>?, accelerator_mods: CValuesRef<GdkModifierTypeVar>?): Unit {
    memScoped {
        return kniBridge3027(accelerator?.cstr?.getPointer(memScope).rawValue, accelerator_key?.getPointer(memScope).rawValue, accelerator_codes?.getPointer(memScope).rawValue, accelerator_mods?.getPointer(memScope).rawValue)
    }
}

fun gtk_accelerator_name(accelerator_key: guint, accelerator_mods: GdkModifierType): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge3028(accelerator_key, accelerator_mods))
}

fun gtk_accelerator_name_with_keycode(display: CValuesRef<GdkDisplay>?, accelerator_key: guint, keycode: guint, accelerator_mods: GdkModifierType): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3029(display?.getPointer(memScope).rawValue, accelerator_key, keycode, accelerator_mods))
    }
}

fun gtk_accelerator_get_label(accelerator_key: guint, accelerator_mods: GdkModifierType): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge3030(accelerator_key, accelerator_mods))
}

fun gtk_accelerator_get_label_with_keycode(display: CValuesRef<GdkDisplay>?, accelerator_key: guint, keycode: guint, accelerator_mods: GdkModifierType): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3031(display?.getPointer(memScope).rawValue, accelerator_key, keycode, accelerator_mods))
    }
}

fun gtk_accelerator_set_default_mod_mask(default_mod_mask: GdkModifierType): Unit {
    return kniBridge3032(default_mod_mask)
}

fun gtk_accelerator_get_default_mod_mask(): GdkModifierType {
    return kniBridge3033()
}

fun gtk_accel_group_query(accel_group: CValuesRef<GtkAccelGroup>?, accel_key: guint, accel_mods: GdkModifierType, n_entries: CValuesRef<guintVar>?): CPointer<GtkAccelGroupEntry>? {
    memScoped {
        return interpretCPointer<GtkAccelGroupEntry>(kniBridge3034(accel_group?.getPointer(memScope).rawValue, accel_key, accel_mods, n_entries?.getPointer(memScope).rawValue))
    }
}

fun glib_autoptr_clear_GtkAccelGroup(_ptr: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3035(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAccelGroup(_ptr: CValuesRef<CPointerVar<GtkAccelGroup>>?): Unit {
    memScoped {
        return kniBridge3036(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAccelGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3037(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAccelGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3038(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAccelGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3039(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_border_get_type(): GType {
    return kniBridge3040()
}

fun gtk_border_new(): CPointer<GtkBorder>? {
    return interpretCPointer<GtkBorder>(kniBridge3041())
}

fun gtk_border_copy(border_: CValuesRef<GtkBorder>?): CPointer<GtkBorder>? {
    memScoped {
        return interpretCPointer<GtkBorder>(kniBridge3042(border_?.getPointer(memScope).rawValue))
    }
}

fun gtk_border_free(border_: CValuesRef<GtkBorder>?): Unit {
    memScoped {
        return kniBridge3043(border_?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkBorder(_ptr: CValuesRef<GtkBorder>?): Unit {
    memScoped {
        return kniBridge3044(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkBorder(_ptr: CValuesRef<CPointerVar<GtkBorder>>?): Unit {
    memScoped {
        return kniBridge3045(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkBorder(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3046(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkBorder(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3047(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkBorder(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3048(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_type(): GType {
    return kniBridge3049()
}

@CCall("knifunptr_libgtk334")
external fun gtk_widget_new(type: GType, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_widget_destroy(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3050(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_destroyed(widget: CValuesRef<GtkWidget>?, widget_pointer: CValuesRef<CPointerVar<GtkWidget>>?): Unit {
    memScoped {
        return kniBridge3051(widget?.getPointer(memScope).rawValue, widget_pointer?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_unparent(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3052(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_show(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3053(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_hide(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3054(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_show_now(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3055(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_show_all(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3056(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_no_show_all(widget: CValuesRef<GtkWidget>?, no_show_all: gboolean): Unit {
    memScoped {
        return kniBridge3057(widget?.getPointer(memScope).rawValue, no_show_all)
    }
}

fun gtk_widget_get_no_show_all(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3058(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_map(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3059(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_unmap(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3060(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_realize(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3061(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_unrealize(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3062(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_draw(widget: CValuesRef<GtkWidget>?, cr: CValuesRef<cairo_t>?): Unit {
    memScoped {
        return kniBridge3063(widget?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_queue_draw(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3064(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_queue_draw_area(widget: CValuesRef<GtkWidget>?, x: gint, y: gint, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3065(widget?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_widget_queue_draw_region(widget: CValuesRef<GtkWidget>?, region: CValuesRef<cairo_region_t>?): Unit {
    memScoped {
        return kniBridge3066(widget?.getPointer(memScope).rawValue, region?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_queue_resize(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3067(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_queue_resize_no_redraw(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3068(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_queue_allocate(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3069(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_frame_clock(widget: CValuesRef<GtkWidget>?): CPointer<GdkFrameClock>? {
    memScoped {
        return interpretCPointer<GdkFrameClock>(kniBridge3070(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_size_request(widget: CValuesRef<GtkWidget>?, requisition: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3071(widget?.getPointer(memScope).rawValue, requisition?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_size_allocate(widget: CValuesRef<GtkWidget>?, allocation: CValuesRef<GtkAllocation>?): Unit {
    memScoped {
        return kniBridge3072(widget?.getPointer(memScope).rawValue, allocation?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_size_allocate_with_baseline(widget: CValuesRef<GtkWidget>?, allocation: CValuesRef<GtkAllocation>?, baseline: gint): Unit {
    memScoped {
        return kniBridge3073(widget?.getPointer(memScope).rawValue, allocation?.getPointer(memScope).rawValue, baseline)
    }
}

fun gtk_widget_get_request_mode(widget: CValuesRef<GtkWidget>?): GtkSizeRequestMode {
    memScoped {
        return kniBridge3074(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_preferred_width(widget: CValuesRef<GtkWidget>?, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3075(widget?.getPointer(memScope).rawValue, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_preferred_height_for_width(widget: CValuesRef<GtkWidget>?, width: gint, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3076(widget?.getPointer(memScope).rawValue, width, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_preferred_height(widget: CValuesRef<GtkWidget>?, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3077(widget?.getPointer(memScope).rawValue, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_preferred_width_for_height(widget: CValuesRef<GtkWidget>?, height: gint, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3078(widget?.getPointer(memScope).rawValue, height, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_preferred_height_and_baseline_for_width(widget: CValuesRef<GtkWidget>?, width: gint, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?, minimum_baseline: CValuesRef<gintVar>?, natural_baseline: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3079(widget?.getPointer(memScope).rawValue, width, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue, minimum_baseline?.getPointer(memScope).rawValue, natural_baseline?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_preferred_size(widget: CValuesRef<GtkWidget>?, minimum_size: CValuesRef<GtkRequisition>?, natural_size: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3080(widget?.getPointer(memScope).rawValue, minimum_size?.getPointer(memScope).rawValue, natural_size?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_child_requisition(widget: CValuesRef<GtkWidget>?, requisition: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3081(widget?.getPointer(memScope).rawValue, requisition?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_add_accelerator(widget: CValuesRef<GtkWidget>?, @CCall.CString accel_signal: String?, accel_group: CValuesRef<GtkAccelGroup>?, accel_key: guint, accel_mods: GdkModifierType, accel_flags: GtkAccelFlags): Unit {
    memScoped {
        return kniBridge3082(widget?.getPointer(memScope).rawValue, accel_signal?.cstr?.getPointer(memScope).rawValue, accel_group?.getPointer(memScope).rawValue, accel_key, accel_mods, accel_flags)
    }
}

fun gtk_widget_remove_accelerator(widget: CValuesRef<GtkWidget>?, accel_group: CValuesRef<GtkAccelGroup>?, accel_key: guint, accel_mods: GdkModifierType): gboolean {
    memScoped {
        return kniBridge3083(widget?.getPointer(memScope).rawValue, accel_group?.getPointer(memScope).rawValue, accel_key, accel_mods)
    }
}

fun gtk_widget_set_accel_path(widget: CValuesRef<GtkWidget>?, @CCall.CString accel_path: String?, accel_group: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3084(widget?.getPointer(memScope).rawValue, accel_path?.cstr?.getPointer(memScope).rawValue, accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_list_accel_closures(widget: CValuesRef<GtkWidget>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3085(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_can_activate_accel(widget: CValuesRef<GtkWidget>?, signal_id: guint): gboolean {
    memScoped {
        return kniBridge3086(widget?.getPointer(memScope).rawValue, signal_id)
    }
}

fun gtk_widget_mnemonic_activate(widget: CValuesRef<GtkWidget>?, group_cycling: gboolean): gboolean {
    memScoped {
        return kniBridge3087(widget?.getPointer(memScope).rawValue, group_cycling)
    }
}

fun gtk_widget_event(widget: CValuesRef<GtkWidget>?, event: CValuesRef<GdkEvent>?): gboolean {
    memScoped {
        return kniBridge3088(widget?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_send_expose(widget: CValuesRef<GtkWidget>?, event: CValuesRef<GdkEvent>?): gint {
    memScoped {
        return kniBridge3089(widget?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_send_focus_change(widget: CValuesRef<GtkWidget>?, event: CValuesRef<GdkEvent>?): gboolean {
    memScoped {
        return kniBridge3090(widget?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_activate(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3091(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_reparent(widget: CValuesRef<GtkWidget>?, new_parent: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3092(widget?.getPointer(memScope).rawValue, new_parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_intersect(widget: CValuesRef<GtkWidget>?, area: CValuesRef<GdkRectangle>?, intersection: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge3093(widget?.getPointer(memScope).rawValue, area?.getPointer(memScope).rawValue, intersection?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_region_intersect(widget: CValuesRef<GtkWidget>?, region: CValuesRef<cairo_region_t>?): CPointer<cairo_region_t>? {
    memScoped {
        return interpretCPointer<cairo_region_t>(kniBridge3094(widget?.getPointer(memScope).rawValue, region?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_freeze_child_notify(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3095(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_child_notify(widget: CValuesRef<GtkWidget>?, @CCall.CString child_property: String?): Unit {
    memScoped {
        return kniBridge3096(widget?.getPointer(memScope).rawValue, child_property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_thaw_child_notify(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3097(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_can_focus(widget: CValuesRef<GtkWidget>?, can_focus: gboolean): Unit {
    memScoped {
        return kniBridge3098(widget?.getPointer(memScope).rawValue, can_focus)
    }
}

fun gtk_widget_get_can_focus(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3099(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_has_focus(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3100(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_is_focus(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3101(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_has_visible_focus(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3102(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_grab_focus(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3103(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_focus_on_click(widget: CValuesRef<GtkWidget>?, focus_on_click: gboolean): Unit {
    memScoped {
        return kniBridge3104(widget?.getPointer(memScope).rawValue, focus_on_click)
    }
}

fun gtk_widget_get_focus_on_click(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3105(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_can_default(widget: CValuesRef<GtkWidget>?, can_default: gboolean): Unit {
    memScoped {
        return kniBridge3106(widget?.getPointer(memScope).rawValue, can_default)
    }
}

fun gtk_widget_get_can_default(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3107(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_has_default(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3108(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_grab_default(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3109(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_receives_default(widget: CValuesRef<GtkWidget>?, receives_default: gboolean): Unit {
    memScoped {
        return kniBridge3110(widget?.getPointer(memScope).rawValue, receives_default)
    }
}

fun gtk_widget_get_receives_default(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3111(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_has_grab(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3112(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_device_is_shadowed(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?): gboolean {
    memScoped {
        return kniBridge3113(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_name(widget: CValuesRef<GtkWidget>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3114(widget?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_name(widget: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3115(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_state(widget: CValuesRef<GtkWidget>?, state: GtkStateType): Unit {
    memScoped {
        return kniBridge3116(widget?.getPointer(memScope).rawValue, state.value)
    }
}

fun gtk_widget_get_state(widget: CValuesRef<GtkWidget>?): GtkStateType {
    memScoped {
        return GtkStateType.byValue(kniBridge3117(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_state_flags(widget: CValuesRef<GtkWidget>?, flags: GtkStateFlags, clear: gboolean): Unit {
    memScoped {
        return kniBridge3118(widget?.getPointer(memScope).rawValue, flags, clear)
    }
}

fun gtk_widget_unset_state_flags(widget: CValuesRef<GtkWidget>?, flags: GtkStateFlags): Unit {
    memScoped {
        return kniBridge3119(widget?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_widget_get_state_flags(widget: CValuesRef<GtkWidget>?): GtkStateFlags {
    memScoped {
        return kniBridge3120(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_sensitive(widget: CValuesRef<GtkWidget>?, sensitive: gboolean): Unit {
    memScoped {
        return kniBridge3121(widget?.getPointer(memScope).rawValue, sensitive)
    }
}

fun gtk_widget_get_sensitive(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3122(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_is_sensitive(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3123(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_visible(widget: CValuesRef<GtkWidget>?, visible: gboolean): Unit {
    memScoped {
        return kniBridge3124(widget?.getPointer(memScope).rawValue, visible)
    }
}

fun gtk_widget_get_visible(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3125(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_is_visible(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3126(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_has_window(widget: CValuesRef<GtkWidget>?, has_window: gboolean): Unit {
    memScoped {
        return kniBridge3127(widget?.getPointer(memScope).rawValue, has_window)
    }
}

fun gtk_widget_get_has_window(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3128(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_is_toplevel(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3129(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_is_drawable(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3130(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_realized(widget: CValuesRef<GtkWidget>?, realized: gboolean): Unit {
    memScoped {
        return kniBridge3131(widget?.getPointer(memScope).rawValue, realized)
    }
}

fun gtk_widget_get_realized(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3132(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_mapped(widget: CValuesRef<GtkWidget>?, mapped: gboolean): Unit {
    memScoped {
        return kniBridge3133(widget?.getPointer(memScope).rawValue, mapped)
    }
}

fun gtk_widget_get_mapped(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3134(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_app_paintable(widget: CValuesRef<GtkWidget>?, app_paintable: gboolean): Unit {
    memScoped {
        return kniBridge3135(widget?.getPointer(memScope).rawValue, app_paintable)
    }
}

fun gtk_widget_get_app_paintable(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3136(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_double_buffered(widget: CValuesRef<GtkWidget>?, double_buffered: gboolean): Unit {
    memScoped {
        return kniBridge3137(widget?.getPointer(memScope).rawValue, double_buffered)
    }
}

fun gtk_widget_get_double_buffered(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3138(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_redraw_on_allocate(widget: CValuesRef<GtkWidget>?, redraw_on_allocate: gboolean): Unit {
    memScoped {
        return kniBridge3139(widget?.getPointer(memScope).rawValue, redraw_on_allocate)
    }
}

fun gtk_widget_set_parent(widget: CValuesRef<GtkWidget>?, parent: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3140(widget?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_parent(widget: CValuesRef<GtkWidget>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3141(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_parent_window(widget: CValuesRef<GtkWidget>?, parent_window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge3142(widget?.getPointer(memScope).rawValue, parent_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_parent_window(widget: CValuesRef<GtkWidget>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge3143(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_child_visible(widget: CValuesRef<GtkWidget>?, is_visible: gboolean): Unit {
    memScoped {
        return kniBridge3144(widget?.getPointer(memScope).rawValue, is_visible)
    }
}

fun gtk_widget_get_child_visible(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3145(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_window(widget: CValuesRef<GtkWidget>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge3146(widget?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_window(widget: CValuesRef<GtkWidget>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge3147(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_register_window(widget: CValuesRef<GtkWidget>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge3148(widget?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_unregister_window(widget: CValuesRef<GtkWidget>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge3149(widget?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_allocated_width(widget: CValuesRef<GtkWidget>?): Int {
    memScoped {
        return kniBridge3150(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_allocated_height(widget: CValuesRef<GtkWidget>?): Int {
    memScoped {
        return kniBridge3151(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_allocated_baseline(widget: CValuesRef<GtkWidget>?): Int {
    memScoped {
        return kniBridge3152(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_allocated_size(widget: CValuesRef<GtkWidget>?, allocation: CValuesRef<GtkAllocation>?, baseline: CValuesRef<IntVar>?): Unit {
    memScoped {
        return kniBridge3153(widget?.getPointer(memScope).rawValue, allocation?.getPointer(memScope).rawValue, baseline?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_allocation(widget: CValuesRef<GtkWidget>?, allocation: CValuesRef<GtkAllocation>?): Unit {
    memScoped {
        return kniBridge3154(widget?.getPointer(memScope).rawValue, allocation?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_allocation(widget: CValuesRef<GtkWidget>?, allocation: CValuesRef<GtkAllocation>?): Unit {
    memScoped {
        return kniBridge3155(widget?.getPointer(memScope).rawValue, allocation?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_clip(widget: CValuesRef<GtkWidget>?, clip: CValuesRef<GtkAllocation>?): Unit {
    memScoped {
        return kniBridge3156(widget?.getPointer(memScope).rawValue, clip?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_clip(widget: CValuesRef<GtkWidget>?, clip: CValuesRef<GtkAllocation>?): Unit {
    memScoped {
        return kniBridge3157(widget?.getPointer(memScope).rawValue, clip?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_requisition(widget: CValuesRef<GtkWidget>?, requisition: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3158(widget?.getPointer(memScope).rawValue, requisition?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_child_focus(widget: CValuesRef<GtkWidget>?, direction: GtkDirectionType): gboolean {
    memScoped {
        return kniBridge3159(widget?.getPointer(memScope).rawValue, direction.value)
    }
}

fun gtk_widget_keynav_failed(widget: CValuesRef<GtkWidget>?, direction: GtkDirectionType): gboolean {
    memScoped {
        return kniBridge3160(widget?.getPointer(memScope).rawValue, direction.value)
    }
}

fun gtk_widget_error_bell(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3161(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_size_request(widget: CValuesRef<GtkWidget>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3162(widget?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_widget_get_size_request(widget: CValuesRef<GtkWidget>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3163(widget?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_events(widget: CValuesRef<GtkWidget>?, events: gint): Unit {
    memScoped {
        return kniBridge3164(widget?.getPointer(memScope).rawValue, events)
    }
}

fun gtk_widget_add_events(widget: CValuesRef<GtkWidget>?, events: gint): Unit {
    memScoped {
        return kniBridge3165(widget?.getPointer(memScope).rawValue, events)
    }
}

fun gtk_widget_set_device_events(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?, events: GdkEventMask): Unit {
    memScoped {
        return kniBridge3166(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue, events)
    }
}

fun gtk_widget_add_device_events(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?, events: GdkEventMask): Unit {
    memScoped {
        return kniBridge3167(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue, events)
    }
}

fun gtk_widget_set_opacity(widget: CValuesRef<GtkWidget>?, opacity: Double): Unit {
    memScoped {
        return kniBridge3168(widget?.getPointer(memScope).rawValue, opacity)
    }
}

fun gtk_widget_get_opacity(widget: CValuesRef<GtkWidget>?): Double {
    memScoped {
        return kniBridge3169(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_device_enabled(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge3170(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue, enabled)
    }
}

fun gtk_widget_get_device_enabled(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?): gboolean {
    memScoped {
        return kniBridge3171(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_toplevel(widget: CValuesRef<GtkWidget>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3172(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_ancestor(widget: CValuesRef<GtkWidget>?, widget_type: GType): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3173(widget?.getPointer(memScope).rawValue, widget_type))
    }
}

fun gtk_widget_get_visual(widget: CValuesRef<GtkWidget>?): CPointer<GdkVisual>? {
    memScoped {
        return interpretCPointer<GdkVisual>(kniBridge3174(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_visual(widget: CValuesRef<GtkWidget>?, visual: CValuesRef<GdkVisual>?): Unit {
    memScoped {
        return kniBridge3175(widget?.getPointer(memScope).rawValue, visual?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_screen(widget: CValuesRef<GtkWidget>?): CPointer<GdkScreen>? {
    memScoped {
        return interpretCPointer<GdkScreen>(kniBridge3176(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_has_screen(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3177(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_scale_factor(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3178(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_display(widget: CValuesRef<GtkWidget>?): CPointer<GdkDisplay>? {
    memScoped {
        return interpretCPointer<GdkDisplay>(kniBridge3179(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_root_window(widget: CValuesRef<GtkWidget>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge3180(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_settings(widget: CValuesRef<GtkWidget>?): CPointer<GtkSettings>? {
    memScoped {
        return interpretCPointer<GtkSettings>(kniBridge3181(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_clipboard(widget: CValuesRef<GtkWidget>?, selection: GdkAtom?): CPointer<GtkClipboard>? {
    memScoped {
        return interpretCPointer<GtkClipboard>(kniBridge3182(widget?.getPointer(memScope).rawValue, selection.rawValue))
    }
}

fun gtk_widget_get_hexpand(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3183(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_hexpand(widget: CValuesRef<GtkWidget>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge3184(widget?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_widget_get_hexpand_set(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3185(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_hexpand_set(widget: CValuesRef<GtkWidget>?, set: gboolean): Unit {
    memScoped {
        return kniBridge3186(widget?.getPointer(memScope).rawValue, set)
    }
}

fun gtk_widget_get_vexpand(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3187(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_vexpand(widget: CValuesRef<GtkWidget>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge3188(widget?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_widget_get_vexpand_set(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3189(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_vexpand_set(widget: CValuesRef<GtkWidget>?, set: gboolean): Unit {
    memScoped {
        return kniBridge3190(widget?.getPointer(memScope).rawValue, set)
    }
}

fun gtk_widget_queue_compute_expand(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3191(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_compute_expand(widget: CValuesRef<GtkWidget>?, orientation: GtkOrientation): gboolean {
    memScoped {
        return kniBridge3192(widget?.getPointer(memScope).rawValue, orientation.value)
    }
}

fun gtk_widget_get_support_multidevice(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3193(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_support_multidevice(widget: CValuesRef<GtkWidget>?, support_multidevice: gboolean): Unit {
    memScoped {
        return kniBridge3194(widget?.getPointer(memScope).rawValue, support_multidevice)
    }
}

fun gtk_widget_class_set_accessible_type(widget_class: CValuesRef<GtkWidgetClass>?, type: GType): Unit {
    memScoped {
        return kniBridge3195(widget_class?.getPointer(memScope).rawValue, type)
    }
}

fun gtk_widget_class_set_accessible_role(widget_class: CValuesRef<GtkWidgetClass>?, role: AtkRole): Unit {
    memScoped {
        return kniBridge3196(widget_class?.getPointer(memScope).rawValue, role)
    }
}

fun gtk_widget_get_accessible(widget: CValuesRef<GtkWidget>?): CPointer<AtkObject>? {
    memScoped {
        return interpretCPointer<AtkObject>(kniBridge3197(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_halign(widget: CValuesRef<GtkWidget>?): GtkAlign {
    memScoped {
        return GtkAlign.byValue(kniBridge3198(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_halign(widget: CValuesRef<GtkWidget>?, align: GtkAlign): Unit {
    memScoped {
        return kniBridge3199(widget?.getPointer(memScope).rawValue, align.value)
    }
}

fun gtk_widget_get_valign(widget: CValuesRef<GtkWidget>?): GtkAlign {
    memScoped {
        return GtkAlign.byValue(kniBridge3200(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_valign_with_baseline(widget: CValuesRef<GtkWidget>?): GtkAlign {
    memScoped {
        return GtkAlign.byValue(kniBridge3201(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_valign(widget: CValuesRef<GtkWidget>?, align: GtkAlign): Unit {
    memScoped {
        return kniBridge3202(widget?.getPointer(memScope).rawValue, align.value)
    }
}

fun gtk_widget_get_margin_left(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3203(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_margin_left(widget: CValuesRef<GtkWidget>?, margin: gint): Unit {
    memScoped {
        return kniBridge3204(widget?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_widget_get_margin_right(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3205(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_margin_right(widget: CValuesRef<GtkWidget>?, margin: gint): Unit {
    memScoped {
        return kniBridge3206(widget?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_widget_get_margin_start(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3207(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_margin_start(widget: CValuesRef<GtkWidget>?, margin: gint): Unit {
    memScoped {
        return kniBridge3208(widget?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_widget_get_margin_end(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3209(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_margin_end(widget: CValuesRef<GtkWidget>?, margin: gint): Unit {
    memScoped {
        return kniBridge3210(widget?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_widget_get_margin_top(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3211(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_margin_top(widget: CValuesRef<GtkWidget>?, margin: gint): Unit {
    memScoped {
        return kniBridge3212(widget?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_widget_get_margin_bottom(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3213(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_margin_bottom(widget: CValuesRef<GtkWidget>?, margin: gint): Unit {
    memScoped {
        return kniBridge3214(widget?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_widget_get_events(widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3215(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_device_events(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?): GdkEventMask {
    memScoped {
        return kniBridge3216(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_pointer(widget: CValuesRef<GtkWidget>?, x: CValuesRef<gintVar>?, y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3217(widget?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_is_ancestor(widget: CValuesRef<GtkWidget>?, ancestor: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3218(widget?.getPointer(memScope).rawValue, ancestor?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_translate_coordinates(src_widget: CValuesRef<GtkWidget>?, dest_widget: CValuesRef<GtkWidget>?, src_x: gint, src_y: gint, dest_x: CValuesRef<gintVar>?, dest_y: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge3219(src_widget?.getPointer(memScope).rawValue, dest_widget?.getPointer(memScope).rawValue, src_x, src_y, dest_x?.getPointer(memScope).rawValue, dest_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_hide_on_delete(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3220(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_override_color(widget: CValuesRef<GtkWidget>?, state: GtkStateFlags, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge3221(widget?.getPointer(memScope).rawValue, state, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_override_background_color(widget: CValuesRef<GtkWidget>?, state: GtkStateFlags, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge3222(widget?.getPointer(memScope).rawValue, state, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_override_font(widget: CValuesRef<GtkWidget>?, font_desc: CValuesRef<PangoFontDescription>?): Unit {
    memScoped {
        return kniBridge3223(widget?.getPointer(memScope).rawValue, font_desc?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_override_symbolic_color(widget: CValuesRef<GtkWidget>?, @CCall.CString name: String?, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge3224(widget?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_override_cursor(widget: CValuesRef<GtkWidget>?, cursor: CValuesRef<GdkRGBA>?, secondary_cursor: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge3225(widget?.getPointer(memScope).rawValue, cursor?.getPointer(memScope).rawValue, secondary_cursor?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_reset_style(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3226(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_create_pango_context(widget: CValuesRef<GtkWidget>?): CPointer<PangoContext>? {
    memScoped {
        return interpretCPointer<PangoContext>(kniBridge3227(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_pango_context(widget: CValuesRef<GtkWidget>?): CPointer<PangoContext>? {
    memScoped {
        return interpretCPointer<PangoContext>(kniBridge3228(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_font_options(widget: CValuesRef<GtkWidget>?, options: CValuesRef<cairo_font_options_t>?): Unit {
    memScoped {
        return kniBridge3229(widget?.getPointer(memScope).rawValue, options?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_font_options(widget: CValuesRef<GtkWidget>?): CPointer<cairo_font_options_t>? {
    memScoped {
        return interpretCPointer<cairo_font_options_t>(kniBridge3230(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_create_pango_layout(widget: CValuesRef<GtkWidget>?, @CCall.CString text: String?): CPointer<PangoLayout>? {
    memScoped {
        return interpretCPointer<PangoLayout>(kniBridge3231(widget?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_render_icon_pixbuf(widget: CValuesRef<GtkWidget>?, @CCall.CString stock_id: String?, size: GtkIconSize): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge3232(widget?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_widget_set_composite_name(widget: CValuesRef<GtkWidget>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3233(widget?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_composite_name(widget: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3234(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_push_composite_child(): Unit {
    return kniBridge3235()
}

fun gtk_widget_pop_composite_child(): Unit {
    return kniBridge3236()
}

fun gtk_widget_class_install_style_property(klass: CValuesRef<GtkWidgetClass>?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge3237(klass?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_class_install_style_property_parser(klass: CValuesRef<GtkWidgetClass>?, pspec: CValuesRef<GParamSpec>?, parser: GtkRcPropertyParser?): Unit {
    memScoped {
        return kniBridge3238(klass?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue, parser.rawValue)
    }
}

fun gtk_widget_class_find_style_property(klass: CValuesRef<GtkWidgetClass>?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge3239(klass?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_class_list_style_properties(klass: CValuesRef<GtkWidgetClass>?, n_properties: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge3240(klass?.getPointer(memScope).rawValue, n_properties?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_style_get_property(widget: CValuesRef<GtkWidget>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge3241(widget?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_style_get_valist(widget: CValuesRef<GtkWidget>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge3242(widget?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

@CCall("knifunptr_libgtk335")
external fun gtk_widget_style_get(widget: CValuesRef<GtkWidget>?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

fun gtk_widget_set_direction(widget: CValuesRef<GtkWidget>?, dir: GtkTextDirection): Unit {
    memScoped {
        return kniBridge3243(widget?.getPointer(memScope).rawValue, dir.value)
    }
}

fun gtk_widget_get_direction(widget: CValuesRef<GtkWidget>?): GtkTextDirection {
    memScoped {
        return GtkTextDirection.byValue(kniBridge3244(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_default_direction(dir: GtkTextDirection): Unit {
    return kniBridge3245(dir.value)
}

fun gtk_widget_get_default_direction(): GtkTextDirection {
    return GtkTextDirection.byValue(kniBridge3246())
}

fun gtk_widget_is_composited(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3247(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_shape_combine_region(widget: CValuesRef<GtkWidget>?, region: CValuesRef<cairo_region_t>?): Unit {
    memScoped {
        return kniBridge3248(widget?.getPointer(memScope).rawValue, region?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_input_shape_combine_region(widget: CValuesRef<GtkWidget>?, region: CValuesRef<cairo_region_t>?): Unit {
    memScoped {
        return kniBridge3249(widget?.getPointer(memScope).rawValue, region?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_list_mnemonic_labels(widget: CValuesRef<GtkWidget>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3250(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_add_mnemonic_label(widget: CValuesRef<GtkWidget>?, label: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3251(widget?.getPointer(memScope).rawValue, label?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_remove_mnemonic_label(widget: CValuesRef<GtkWidget>?, label: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3252(widget?.getPointer(memScope).rawValue, label?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_tooltip_window(widget: CValuesRef<GtkWidget>?, custom_window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3253(widget?.getPointer(memScope).rawValue, custom_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_tooltip_window(widget: CValuesRef<GtkWidget>?): CPointer<GtkWindow>? {
    memScoped {
        return interpretCPointer<GtkWindow>(kniBridge3254(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_trigger_tooltip_query(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3255(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_set_tooltip_text(widget: CValuesRef<GtkWidget>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge3256(widget?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_tooltip_text(widget: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3257(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_tooltip_markup(widget: CValuesRef<GtkWidget>?, @CCall.CString markup: String?): Unit {
    memScoped {
        return kniBridge3258(widget?.getPointer(memScope).rawValue, markup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_tooltip_markup(widget: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3259(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_has_tooltip(widget: CValuesRef<GtkWidget>?, has_tooltip: gboolean): Unit {
    memScoped {
        return kniBridge3260(widget?.getPointer(memScope).rawValue, has_tooltip)
    }
}

fun gtk_widget_get_has_tooltip(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3261(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_cairo_should_draw_window(cr: CValuesRef<cairo_t>?, window: CValuesRef<GdkWindow>?): gboolean {
    memScoped {
        return kniBridge3262(cr?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_cairo_transform_to_window(cr: CValuesRef<cairo_t>?, widget: CValuesRef<GtkWidget>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge3263(cr?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_requisition_get_type(): GType {
    return kniBridge3264()
}

fun gtk_requisition_new(): CPointer<GtkRequisition>? {
    return interpretCPointer<GtkRequisition>(kniBridge3265())
}

fun gtk_requisition_copy(requisition: CValuesRef<GtkRequisition>?): CPointer<GtkRequisition>? {
    memScoped {
        return interpretCPointer<GtkRequisition>(kniBridge3266(requisition?.getPointer(memScope).rawValue))
    }
}

fun gtk_requisition_free(requisition: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3267(requisition?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_in_destruction(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge3268(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_style_context(widget: CValuesRef<GtkWidget>?): CPointer<GtkStyleContext>? {
    memScoped {
        return interpretCPointer<GtkStyleContext>(kniBridge3269(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_path(widget: CValuesRef<GtkWidget>?): CPointer<GtkWidgetPath>? {
    memScoped {
        return interpretCPointer<GtkWidgetPath>(kniBridge3270(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_class_set_css_name(widget_class: CValuesRef<GtkWidgetClass>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3271(widget_class?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_class_get_css_name(widget_class: CValuesRef<GtkWidgetClass>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3272(widget_class?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_get_modifier_mask(widget: CValuesRef<GtkWidget>?, intent: GdkModifierIntent): GdkModifierType {
    memScoped {
        return kniBridge3273(widget?.getPointer(memScope).rawValue, intent.value)
    }
}

fun gtk_widget_insert_action_group(widget: CValuesRef<GtkWidget>?, @CCall.CString name: String?, group: CValuesRef<GActionGroup>?): Unit {
    memScoped {
        return kniBridge3274(widget?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_add_tick_callback(widget: CValuesRef<GtkWidget>?, callback: GtkTickCallback?, user_data: gpointer?, notify: GDestroyNotify?): guint {
    memScoped {
        return kniBridge3275(widget?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue, notify.rawValue)
    }
}

fun gtk_widget_remove_tick_callback(widget: CValuesRef<GtkWidget>?, id: guint): Unit {
    memScoped {
        return kniBridge3276(widget?.getPointer(memScope).rawValue, id)
    }
}

fun gtk_widget_init_template(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3277(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_template_child(widget: CValuesRef<GtkWidget>?, widget_type: GType, @CCall.CString name: String?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge3278(widget?.getPointer(memScope).rawValue, widget_type, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_class_set_template(widget_class: CValuesRef<GtkWidgetClass>?, template_bytes: CValuesRef<GBytes>?): Unit {
    memScoped {
        return kniBridge3279(widget_class?.getPointer(memScope).rawValue, template_bytes?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_class_set_template_from_resource(widget_class: CValuesRef<GtkWidgetClass>?, @CCall.CString resource_name: String?): Unit {
    memScoped {
        return kniBridge3280(widget_class?.getPointer(memScope).rawValue, resource_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_class_bind_template_callback_full(widget_class: CValuesRef<GtkWidgetClass>?, @CCall.CString callback_name: String?, callback_symbol: GCallback?): Unit {
    memScoped {
        return kniBridge3281(widget_class?.getPointer(memScope).rawValue, callback_name?.cstr?.getPointer(memScope).rawValue, callback_symbol.rawValue)
    }
}

fun gtk_widget_class_set_connect_func(widget_class: CValuesRef<GtkWidgetClass>?, connect_func: GtkBuilderConnectFunc?, connect_data: gpointer?, connect_data_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3282(widget_class?.getPointer(memScope).rawValue, connect_func.rawValue, connect_data.rawValue, connect_data_destroy.rawValue)
    }
}

fun gtk_widget_class_bind_template_child_full(widget_class: CValuesRef<GtkWidgetClass>?, @CCall.CString name: String?, internal_child: gboolean, struct_offset: gssize): Unit {
    memScoped {
        return kniBridge3283(widget_class?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, internal_child, struct_offset)
    }
}

fun gtk_widget_get_action_group(widget: CValuesRef<GtkWidget>?, @CCall.CString prefix: String?): CPointer<GActionGroup>? {
    memScoped {
        return interpretCPointer<GActionGroup>(kniBridge3284(widget?.getPointer(memScope).rawValue, prefix?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_list_action_prefixes(widget: CValuesRef<GtkWidget>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3285(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_set_font_map(widget: CValuesRef<GtkWidget>?, font_map: CValuesRef<PangoFontMap>?): Unit {
    memScoped {
        return kniBridge3286(widget?.getPointer(memScope).rawValue, font_map?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_get_font_map(widget: CValuesRef<GtkWidget>?): CPointer<PangoFontMap>? {
    memScoped {
        return interpretCPointer<PangoFontMap>(kniBridge3287(widget?.getPointer(memScope).rawValue))
    }
}

fun glib_autoptr_clear_GtkWidget(_ptr: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3288(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkWidget(_ptr: CValuesRef<CPointerVar<GtkWidget>>?): Unit {
    memScoped {
        return kniBridge3289(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkWidget(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3290(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkWidget(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3291(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkWidget(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3292(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRequisition(_ptr: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3293(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRequisition(_ptr: CValuesRef<CPointerVar<GtkRequisition>>?): Unit {
    memScoped {
        return kniBridge3294(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRequisition(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3295(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRequisition(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3296(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRequisition(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3297(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_get_type(): GType {
    return kniBridge3298()
}

fun gtk_application_new(@CCall.CString application_id: String?, flags: GApplicationFlags): CPointer<GtkApplication>? {
    memScoped {
        return interpretCPointer<GtkApplication>(kniBridge3299(application_id?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun gtk_application_add_window(application: CValuesRef<GtkApplication>?, window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3300(application?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_remove_window(application: CValuesRef<GtkApplication>?, window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3301(application?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_get_windows(application: CValuesRef<GtkApplication>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3302(application?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_get_app_menu(application: CValuesRef<GtkApplication>?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge3303(application?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_set_app_menu(application: CValuesRef<GtkApplication>?, app_menu: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge3304(application?.getPointer(memScope).rawValue, app_menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_get_menubar(application: CValuesRef<GtkApplication>?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge3305(application?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_set_menubar(application: CValuesRef<GtkApplication>?, menubar: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge3306(application?.getPointer(memScope).rawValue, menubar?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_add_accelerator(application: CValuesRef<GtkApplication>?, @CCall.CString accelerator: String?, @CCall.CString action_name: String?, parameter: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge3307(application?.getPointer(memScope).rawValue, accelerator?.cstr?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_remove_accelerator(application: CValuesRef<GtkApplication>?, @CCall.CString action_name: String?, parameter: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge3308(application?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue, parameter?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_inhibit(application: CValuesRef<GtkApplication>?, window: CValuesRef<GtkWindow>?, flags: GtkApplicationInhibitFlags, @CCall.CString reason: String?): guint {
    memScoped {
        return kniBridge3309(application?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue, flags, reason?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_uninhibit(application: CValuesRef<GtkApplication>?, cookie: guint): Unit {
    memScoped {
        return kniBridge3310(application?.getPointer(memScope).rawValue, cookie)
    }
}

fun gtk_application_is_inhibited(application: CValuesRef<GtkApplication>?, flags: GtkApplicationInhibitFlags): gboolean {
    memScoped {
        return kniBridge3311(application?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_application_get_window_by_id(application: CValuesRef<GtkApplication>?, id: guint): CPointer<GtkWindow>? {
    memScoped {
        return interpretCPointer<GtkWindow>(kniBridge3312(application?.getPointer(memScope).rawValue, id))
    }
}

fun gtk_application_get_active_window(application: CValuesRef<GtkApplication>?): CPointer<GtkWindow>? {
    memScoped {
        return interpretCPointer<GtkWindow>(kniBridge3313(application?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_list_action_descriptions(application: CValuesRef<GtkApplication>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3314(application?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_get_accels_for_action(application: CValuesRef<GtkApplication>?, @CCall.CString detailed_action_name: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3315(application?.getPointer(memScope).rawValue, detailed_action_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_get_actions_for_accel(application: CValuesRef<GtkApplication>?, @CCall.CString accel: String?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3316(application?.getPointer(memScope).rawValue, accel?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_set_accels_for_action(application: CValuesRef<GtkApplication>?, @CCall.CString detailed_action_name: String?, accels: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3317(application?.getPointer(memScope).rawValue, detailed_action_name?.cstr?.getPointer(memScope).rawValue, accels?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_prefers_app_menu(application: CValuesRef<GtkApplication>?): gboolean {
    memScoped {
        return kniBridge3318(application?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_get_menu_by_id(application: CValuesRef<GtkApplication>?, @CCall.CString id: String?): CPointer<GMenu>? {
    memScoped {
        return interpretCPointer<GMenu>(kniBridge3319(application?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun glib_autoptr_clear_GtkApplication(_ptr: CValuesRef<GtkApplication>?): Unit {
    memScoped {
        return kniBridge3320(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkApplication(_ptr: CValuesRef<CPointerVar<GtkApplication>>?): Unit {
    memScoped {
        return kniBridge3321(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkApplication(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3322(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkApplication(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3323(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkApplication(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3324(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_get_type(): GType {
    return kniBridge3325()
}

fun gtk_container_set_border_width(container: CValuesRef<GtkContainer>?, border_width: guint): Unit {
    memScoped {
        return kniBridge3326(container?.getPointer(memScope).rawValue, border_width)
    }
}

fun gtk_container_get_border_width(container: CValuesRef<GtkContainer>?): guint {
    memScoped {
        return kniBridge3327(container?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_add(container: CValuesRef<GtkContainer>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3328(container?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_remove(container: CValuesRef<GtkContainer>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3329(container?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_set_resize_mode(container: CValuesRef<GtkContainer>?, resize_mode: GtkResizeMode): Unit {
    memScoped {
        return kniBridge3330(container?.getPointer(memScope).rawValue, resize_mode.value)
    }
}

fun gtk_container_get_resize_mode(container: CValuesRef<GtkContainer>?): GtkResizeMode {
    memScoped {
        return GtkResizeMode.byValue(kniBridge3331(container?.getPointer(memScope).rawValue))
    }
}

fun gtk_container_check_resize(container: CValuesRef<GtkContainer>?): Unit {
    memScoped {
        return kniBridge3332(container?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_foreach(container: CValuesRef<GtkContainer>?, callback: GtkCallback?, callback_data: gpointer?): Unit {
    memScoped {
        return kniBridge3333(container?.getPointer(memScope).rawValue, callback.rawValue, callback_data.rawValue)
    }
}

fun gtk_container_get_children(container: CValuesRef<GtkContainer>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3334(container?.getPointer(memScope).rawValue))
    }
}

fun gtk_container_propagate_draw(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, cr: CValuesRef<cairo_t>?): Unit {
    memScoped {
        return kniBridge3335(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_set_focus_chain(container: CValuesRef<GtkContainer>?, focusable_widgets: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge3336(container?.getPointer(memScope).rawValue, focusable_widgets?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_get_focus_chain(container: CValuesRef<GtkContainer>?, focusable_widgets: CValuesRef<CPointerVar<GList>>?): gboolean {
    memScoped {
        return kniBridge3337(container?.getPointer(memScope).rawValue, focusable_widgets?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_unset_focus_chain(container: CValuesRef<GtkContainer>?): Unit {
    memScoped {
        return kniBridge3338(container?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_set_reallocate_redraws(container: CValuesRef<GtkContainer>?, needs_redraws: gboolean): Unit {
    memScoped {
        return kniBridge3339(container?.getPointer(memScope).rawValue, needs_redraws)
    }
}

fun gtk_container_set_focus_child(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3340(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_get_focus_child(container: CValuesRef<GtkContainer>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3341(container?.getPointer(memScope).rawValue))
    }
}

fun gtk_container_set_focus_vadjustment(container: CValuesRef<GtkContainer>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge3342(container?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_get_focus_vadjustment(container: CValuesRef<GtkContainer>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge3343(container?.getPointer(memScope).rawValue))
    }
}

fun gtk_container_set_focus_hadjustment(container: CValuesRef<GtkContainer>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge3344(container?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_get_focus_hadjustment(container: CValuesRef<GtkContainer>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge3345(container?.getPointer(memScope).rawValue))
    }
}

fun gtk_container_resize_children(container: CValuesRef<GtkContainer>?): Unit {
    memScoped {
        return kniBridge3346(container?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_child_type(container: CValuesRef<GtkContainer>?): GType {
    memScoped {
        return kniBridge3347(container?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_class_install_child_property(cclass: CValuesRef<GtkContainerClass>?, property_id: guint, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge3348(cclass?.getPointer(memScope).rawValue, property_id, pspec?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_class_install_child_properties(cclass: CValuesRef<GtkContainerClass>?, n_pspecs: guint, pspecs: CValuesRef<CPointerVar<GParamSpec>>?): Unit {
    memScoped {
        return kniBridge3349(cclass?.getPointer(memScope).rawValue, n_pspecs, pspecs?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_class_find_child_property(cclass: CValuesRef<GObjectClass>?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge3350(cclass?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_container_class_list_child_properties(cclass: CValuesRef<GObjectClass>?, n_properties: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge3351(cclass?.getPointer(memScope).rawValue, n_properties?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk336")
external fun gtk_container_add_with_properties(container: CValuesRef<GtkContainer>?, widget: CValuesRef<GtkWidget>?, @CCall.CString first_prop_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk337")
external fun gtk_container_child_set(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString first_prop_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk338")
external fun gtk_container_child_get(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString first_prop_name: String?, vararg variadicArguments: Any?): Unit

fun gtk_container_child_set_valist(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge3352(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_container_child_get_valist(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge3353(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_container_child_set_property(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge3354(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_child_get_property(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge3355(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_child_notify(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, @CCall.CString child_property: String?): Unit {
    memScoped {
        return kniBridge3356(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, child_property?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_child_notify_by_pspec(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge3357(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_forall(container: CValuesRef<GtkContainer>?, callback: GtkCallback?, callback_data: gpointer?): Unit {
    memScoped {
        return kniBridge3358(container?.getPointer(memScope).rawValue, callback.rawValue, callback_data.rawValue)
    }
}

fun gtk_container_class_handle_border_width(klass: CValuesRef<GtkContainerClass>?): Unit {
    memScoped {
        return kniBridge3359(klass?.getPointer(memScope).rawValue)
    }
}

fun gtk_container_get_path_for_child(container: CValuesRef<GtkContainer>?, child: CValuesRef<GtkWidget>?): CPointer<GtkWidgetPath>? {
    memScoped {
        return interpretCPointer<GtkWidgetPath>(kniBridge3360(container?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue))
    }
}

fun glib_autoptr_clear_GtkContainer(_ptr: CValuesRef<GtkContainer>?): Unit {
    memScoped {
        return kniBridge3361(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkContainer(_ptr: CValuesRef<CPointerVar<GtkContainer>>?): Unit {
    memScoped {
        return kniBridge3362(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkContainer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3363(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkContainer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3364(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkContainer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3365(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_bin_get_type(): GType {
    return kniBridge3366()
}

fun gtk_bin_get_child(bin: CValuesRef<GtkBin>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3367(bin?.getPointer(memScope).rawValue))
    }
}

fun _gtk_bin_set_child(bin: CValuesRef<GtkBin>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3368(bin?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkBin(_ptr: CValuesRef<GtkBin>?): Unit {
    memScoped {
        return kniBridge3369(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkBin(_ptr: CValuesRef<CPointerVar<GtkBin>>?): Unit {
    memScoped {
        return kniBridge3370(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkBin(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3371(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkBin(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3372(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkBin(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3373(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_type(): GType {
    return kniBridge3374()
}

fun gtk_window_new(type: GtkWindowType): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge3375(type.value))
}

fun gtk_window_set_title(window: CValuesRef<GtkWindow>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge3376(window?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_title(window: CValuesRef<GtkWindow>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3377(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_wmclass(window: CValuesRef<GtkWindow>?, @CCall.CString wmclass_name: String?, @CCall.CString wmclass_class: String?): Unit {
    memScoped {
        return kniBridge3378(window?.getPointer(memScope).rawValue, wmclass_name?.cstr?.getPointer(memScope).rawValue, wmclass_class?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_role(window: CValuesRef<GtkWindow>?, @CCall.CString role: String?): Unit {
    memScoped {
        return kniBridge3379(window?.getPointer(memScope).rawValue, role?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_startup_id(window: CValuesRef<GtkWindow>?, @CCall.CString startup_id: String?): Unit {
    memScoped {
        return kniBridge3380(window?.getPointer(memScope).rawValue, startup_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_role(window: CValuesRef<GtkWindow>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3381(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_add_accel_group(window: CValuesRef<GtkWindow>?, accel_group: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3382(window?.getPointer(memScope).rawValue, accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_remove_accel_group(window: CValuesRef<GtkWindow>?, accel_group: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3383(window?.getPointer(memScope).rawValue, accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_position(window: CValuesRef<GtkWindow>?, position: GtkWindowPosition): Unit {
    memScoped {
        return kniBridge3384(window?.getPointer(memScope).rawValue, position.value)
    }
}

fun gtk_window_activate_focus(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3385(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_focus(window: CValuesRef<GtkWindow>?, focus: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3386(window?.getPointer(memScope).rawValue, focus?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_focus(window: CValuesRef<GtkWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3387(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_default(window: CValuesRef<GtkWindow>?, default_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3388(window?.getPointer(memScope).rawValue, default_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_default_widget(window: CValuesRef<GtkWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3389(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_activate_default(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3390(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_transient_for(window: CValuesRef<GtkWindow>?, parent: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3391(window?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_transient_for(window: CValuesRef<GtkWindow>?): CPointer<GtkWindow>? {
    memScoped {
        return interpretCPointer<GtkWindow>(kniBridge3392(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_attached_to(window: CValuesRef<GtkWindow>?, attach_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3393(window?.getPointer(memScope).rawValue, attach_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_attached_to(window: CValuesRef<GtkWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3394(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_opacity(window: CValuesRef<GtkWindow>?, opacity: gdouble): Unit {
    memScoped {
        return kniBridge3395(window?.getPointer(memScope).rawValue, opacity)
    }
}

fun gtk_window_get_opacity(window: CValuesRef<GtkWindow>?): gdouble {
    memScoped {
        return kniBridge3396(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_type_hint(window: CValuesRef<GtkWindow>?, hint: GdkWindowTypeHint): Unit {
    memScoped {
        return kniBridge3397(window?.getPointer(memScope).rawValue, hint.value)
    }
}

fun gtk_window_get_type_hint(window: CValuesRef<GtkWindow>?): GdkWindowTypeHint {
    memScoped {
        return GdkWindowTypeHint.byValue(kniBridge3398(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_skip_taskbar_hint(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3399(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_skip_taskbar_hint(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3400(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_skip_pager_hint(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3401(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_skip_pager_hint(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3402(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_urgency_hint(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3403(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_urgency_hint(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3404(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_accept_focus(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3405(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_accept_focus(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3406(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_focus_on_map(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3407(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_focus_on_map(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3408(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_destroy_with_parent(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3409(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_destroy_with_parent(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3410(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_hide_titlebar_when_maximized(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3411(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_hide_titlebar_when_maximized(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3412(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_mnemonics_visible(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3413(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_mnemonics_visible(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3414(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_focus_visible(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3415(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_focus_visible(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3416(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_resizable(window: CValuesRef<GtkWindow>?, resizable: gboolean): Unit {
    memScoped {
        return kniBridge3417(window?.getPointer(memScope).rawValue, resizable)
    }
}

fun gtk_window_get_resizable(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3418(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_gravity(window: CValuesRef<GtkWindow>?, gravity: GdkGravity): Unit {
    memScoped {
        return kniBridge3419(window?.getPointer(memScope).rawValue, gravity)
    }
}

fun gtk_window_get_gravity(window: CValuesRef<GtkWindow>?): GdkGravity {
    memScoped {
        return kniBridge3420(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_geometry_hints(window: CValuesRef<GtkWindow>?, geometry_widget: CValuesRef<GtkWidget>?, geometry: CValuesRef<GdkGeometry>?, geom_mask: GdkWindowHints): Unit {
    memScoped {
        return kniBridge3421(window?.getPointer(memScope).rawValue, geometry_widget?.getPointer(memScope).rawValue, geometry?.getPointer(memScope).rawValue, geom_mask)
    }
}

fun gtk_window_set_screen(window: CValuesRef<GtkWindow>?, screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge3422(window?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_screen(window: CValuesRef<GtkWindow>?): CPointer<GdkScreen>? {
    memScoped {
        return interpretCPointer<GdkScreen>(kniBridge3423(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_is_active(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3424(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_has_toplevel_focus(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3425(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_decorated(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3426(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_decorated(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3427(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_deletable(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3428(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_get_deletable(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3429(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_icon_list(window: CValuesRef<GtkWindow>?, list: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge3430(window?.getPointer(memScope).rawValue, list?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_icon_list(window: CValuesRef<GtkWindow>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3431(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_icon(window: CValuesRef<GtkWindow>?, icon: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge3432(window?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_icon_name(window: CValuesRef<GtkWindow>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3433(window?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_icon_from_file(window: CValuesRef<GtkWindow>?, @CCall.CString filename: String?, err: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3434(window?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, err?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_icon(window: CValuesRef<GtkWindow>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge3435(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_get_icon_name(window: CValuesRef<GtkWindow>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3436(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_default_icon_list(list: CValuesRef<GList>?): Unit {
    memScoped {
        return kniBridge3437(list?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_default_icon_list(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge3438())
}

fun gtk_window_set_default_icon(icon: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge3439(icon?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_default_icon_name(@CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3440(name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_default_icon_name(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge3441())
}

fun gtk_window_set_default_icon_from_file(@CCall.CString filename: String?, err: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge3442(filename?.cstr?.getPointer(memScope).rawValue, err?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_auto_startup_notification(setting: gboolean): Unit {
    return kniBridge3443(setting)
}

fun gtk_window_set_modal(window: CValuesRef<GtkWindow>?, modal: gboolean): Unit {
    memScoped {
        return kniBridge3444(window?.getPointer(memScope).rawValue, modal)
    }
}

fun gtk_window_get_modal(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3445(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_list_toplevels(): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge3446())
}

fun gtk_window_set_has_user_ref_count(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3447(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_add_mnemonic(window: CValuesRef<GtkWindow>?, keyval: guint, target: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3448(window?.getPointer(memScope).rawValue, keyval, target?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_remove_mnemonic(window: CValuesRef<GtkWindow>?, keyval: guint, target: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3449(window?.getPointer(memScope).rawValue, keyval, target?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_mnemonic_activate(window: CValuesRef<GtkWindow>?, keyval: guint, modifier: GdkModifierType): gboolean {
    memScoped {
        return kniBridge3450(window?.getPointer(memScope).rawValue, keyval, modifier)
    }
}

fun gtk_window_set_mnemonic_modifier(window: CValuesRef<GtkWindow>?, modifier: GdkModifierType): Unit {
    memScoped {
        return kniBridge3451(window?.getPointer(memScope).rawValue, modifier)
    }
}

fun gtk_window_get_mnemonic_modifier(window: CValuesRef<GtkWindow>?): GdkModifierType {
    memScoped {
        return kniBridge3452(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_activate_key(window: CValuesRef<GtkWindow>?, event: CValuesRef<GdkEventKey>?): gboolean {
    memScoped {
        return kniBridge3453(window?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_propagate_key_event(window: CValuesRef<GtkWindow>?, event: CValuesRef<GdkEventKey>?): gboolean {
    memScoped {
        return kniBridge3454(window?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_present(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3455(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_present_with_time(window: CValuesRef<GtkWindow>?, timestamp: guint32): Unit {
    memScoped {
        return kniBridge3456(window?.getPointer(memScope).rawValue, timestamp)
    }
}

fun gtk_window_iconify(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3457(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_deiconify(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3458(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_stick(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3459(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_unstick(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3460(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_maximize(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3461(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_unmaximize(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3462(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_fullscreen(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3463(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_unfullscreen(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3464(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_fullscreen_on_monitor(window: CValuesRef<GtkWindow>?, screen: CValuesRef<GdkScreen>?, monitor: gint): Unit {
    memScoped {
        return kniBridge3465(window?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue, monitor)
    }
}

fun gtk_window_close(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3466(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_keep_above(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3467(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_set_keep_below(window: CValuesRef<GtkWindow>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3468(window?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_window_begin_resize_drag(window: CValuesRef<GtkWindow>?, edge: GdkWindowEdge, button: gint, root_x: gint, root_y: gint, timestamp: guint32): Unit {
    memScoped {
        return kniBridge3469(window?.getPointer(memScope).rawValue, edge.value, button, root_x, root_y, timestamp)
    }
}

fun gtk_window_begin_move_drag(window: CValuesRef<GtkWindow>?, button: gint, root_x: gint, root_y: gint, timestamp: guint32): Unit {
    memScoped {
        return kniBridge3470(window?.getPointer(memScope).rawValue, button, root_x, root_y, timestamp)
    }
}

fun gtk_window_set_default_size(window: CValuesRef<GtkWindow>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3471(window?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_window_get_default_size(window: CValuesRef<GtkWindow>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3472(window?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_resize(window: CValuesRef<GtkWindow>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3473(window?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_window_get_size(window: CValuesRef<GtkWindow>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3474(window?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_move(window: CValuesRef<GtkWindow>?, x: gint, y: gint): Unit {
    memScoped {
        return kniBridge3475(window?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_window_get_position(window: CValuesRef<GtkWindow>?, root_x: CValuesRef<gintVar>?, root_y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3476(window?.getPointer(memScope).rawValue, root_x?.getPointer(memScope).rawValue, root_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_parse_geometry(window: CValuesRef<GtkWindow>?, @CCall.CString geometry: String?): gboolean {
    memScoped {
        return kniBridge3477(window?.getPointer(memScope).rawValue, geometry?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_default_geometry(window: CValuesRef<GtkWindow>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3478(window?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_window_resize_to_geometry(window: CValuesRef<GtkWindow>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3479(window?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_window_get_group(window: CValuesRef<GtkWindow>?): CPointer<GtkWindowGroup>? {
    memScoped {
        return interpretCPointer<GtkWindowGroup>(kniBridge3480(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_has_group(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3481(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_reshow_with_initial_size(window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3482(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_window_type(window: CValuesRef<GtkWindow>?): GtkWindowType {
    memScoped {
        return GtkWindowType.byValue(kniBridge3483(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_get_application(window: CValuesRef<GtkWindow>?): CPointer<GtkApplication>? {
    memScoped {
        return interpretCPointer<GtkApplication>(kniBridge3484(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_set_application(window: CValuesRef<GtkWindow>?, application: CValuesRef<GtkApplication>?): Unit {
    memScoped {
        return kniBridge3485(window?.getPointer(memScope).rawValue, application?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_has_resize_grip(window: CValuesRef<GtkWindow>?, value: gboolean): Unit {
    memScoped {
        return kniBridge3486(window?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_window_get_has_resize_grip(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3487(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_resize_grip_is_visible(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3488(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_resize_grip_area(window: CValuesRef<GtkWindow>?, rect: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge3489(window?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_titlebar(window: CValuesRef<GtkWindow>?, titlebar: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3490(window?.getPointer(memScope).rawValue, titlebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_get_titlebar(window: CValuesRef<GtkWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3491(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_is_maximized(window: CValuesRef<GtkWindow>?): gboolean {
    memScoped {
        return kniBridge3492(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_set_interactive_debugging(enable: gboolean): Unit {
    return kniBridge3493(enable)
}

fun glib_autoptr_clear_GtkWindow(_ptr: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge3494(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkWindow(_ptr: CValuesRef<CPointerVar<GtkWindow>>?): Unit {
    memScoped {
        return kniBridge3495(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkWindow(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3496(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkWindow(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3497(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkWindow(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3498(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkWindowGroup(_ptr: CValuesRef<GtkWindowGroup>?): Unit {
    memScoped {
        return kniBridge3499(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkWindowGroup(_ptr: CValuesRef<CPointerVar<GtkWindowGroup>>?): Unit {
    memScoped {
        return kniBridge3500(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkWindowGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3501(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkWindowGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3502(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkWindowGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3503(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_dialog_get_type(): GType {
    return kniBridge3504()
}

fun gtk_dialog_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge3505())
}

@CCall("knifunptr_libgtk339")
external fun gtk_dialog_new_with_buttons(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?, flags: GtkDialogFlags, @CCall.CString first_button_text: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_dialog_add_action_widget(dialog: CValuesRef<GtkDialog>?, child: CValuesRef<GtkWidget>?, response_id: gint): Unit {
    memScoped {
        return kniBridge3506(dialog?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, response_id)
    }
}

fun gtk_dialog_add_button(dialog: CValuesRef<GtkDialog>?, @CCall.CString button_text: String?, response_id: gint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3507(dialog?.getPointer(memScope).rawValue, button_text?.cstr?.getPointer(memScope).rawValue, response_id))
    }
}

@CCall("knifunptr_libgtk340")
external fun gtk_dialog_add_buttons(dialog: CValuesRef<GtkDialog>?, @CCall.CString first_button_text: String?, vararg variadicArguments: Any?): Unit

fun gtk_dialog_set_response_sensitive(dialog: CValuesRef<GtkDialog>?, response_id: gint, setting: gboolean): Unit {
    memScoped {
        return kniBridge3508(dialog?.getPointer(memScope).rawValue, response_id, setting)
    }
}

fun gtk_dialog_set_default_response(dialog: CValuesRef<GtkDialog>?, response_id: gint): Unit {
    memScoped {
        return kniBridge3509(dialog?.getPointer(memScope).rawValue, response_id)
    }
}

fun gtk_dialog_get_widget_for_response(dialog: CValuesRef<GtkDialog>?, response_id: gint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3510(dialog?.getPointer(memScope).rawValue, response_id))
    }
}

fun gtk_dialog_get_response_for_widget(dialog: CValuesRef<GtkDialog>?, widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge3511(dialog?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_alternative_dialog_button_order(screen: CValuesRef<GdkScreen>?): gboolean {
    memScoped {
        return kniBridge3512(screen?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk341")
external fun gtk_dialog_set_alternative_button_order(dialog: CValuesRef<GtkDialog>?, first_response_id: gint, vararg variadicArguments: Any?): Unit

fun gtk_dialog_set_alternative_button_order_from_array(dialog: CValuesRef<GtkDialog>?, n_params: gint, new_order: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3513(dialog?.getPointer(memScope).rawValue, n_params, new_order?.getPointer(memScope).rawValue)
    }
}

fun gtk_dialog_response(dialog: CValuesRef<GtkDialog>?, response_id: gint): Unit {
    memScoped {
        return kniBridge3514(dialog?.getPointer(memScope).rawValue, response_id)
    }
}

fun gtk_dialog_run(dialog: CValuesRef<GtkDialog>?): gint {
    memScoped {
        return kniBridge3515(dialog?.getPointer(memScope).rawValue)
    }
}

fun gtk_dialog_get_action_area(dialog: CValuesRef<GtkDialog>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3516(dialog?.getPointer(memScope).rawValue))
    }
}

fun gtk_dialog_get_content_area(dialog: CValuesRef<GtkDialog>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3517(dialog?.getPointer(memScope).rawValue))
    }
}

fun gtk_dialog_get_header_bar(dialog: CValuesRef<GtkDialog>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3518(dialog?.getPointer(memScope).rawValue))
    }
}

fun glib_autoptr_clear_GtkDialog(_ptr: CValuesRef<GtkDialog>?): Unit {
    memScoped {
        return kniBridge3519(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkDialog(_ptr: CValuesRef<CPointerVar<GtkDialog>>?): Unit {
    memScoped {
        return kniBridge3520(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3521(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3522(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3523(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_type(): GType {
    return kniBridge3524()
}

fun gtk_about_dialog_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge3525())
}

@CCall("knifunptr_libgtk342")
external fun gtk_show_about_dialog(parent: CValuesRef<GtkWindow>?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): Unit

fun gtk_about_dialog_get_program_name(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3526(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_program_name(about: CValuesRef<GtkAboutDialog>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge3527(about?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_version(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3528(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_version(about: CValuesRef<GtkAboutDialog>?, @CCall.CString version: String?): Unit {
    memScoped {
        return kniBridge3529(about?.getPointer(memScope).rawValue, version?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_copyright(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3530(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_copyright(about: CValuesRef<GtkAboutDialog>?, @CCall.CString copyright: String?): Unit {
    memScoped {
        return kniBridge3531(about?.getPointer(memScope).rawValue, copyright?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_comments(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3532(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_comments(about: CValuesRef<GtkAboutDialog>?, @CCall.CString comments: String?): Unit {
    memScoped {
        return kniBridge3533(about?.getPointer(memScope).rawValue, comments?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_license(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3534(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_license(about: CValuesRef<GtkAboutDialog>?, @CCall.CString license: String?): Unit {
    memScoped {
        return kniBridge3535(about?.getPointer(memScope).rawValue, license?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_set_license_type(about: CValuesRef<GtkAboutDialog>?, license_type: GtkLicense): Unit {
    memScoped {
        return kniBridge3536(about?.getPointer(memScope).rawValue, license_type.value)
    }
}

fun gtk_about_dialog_get_license_type(about: CValuesRef<GtkAboutDialog>?): GtkLicense {
    memScoped {
        return GtkLicense.byValue(kniBridge3537(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_get_wrap_license(about: CValuesRef<GtkAboutDialog>?): gboolean {
    memScoped {
        return kniBridge3538(about?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_set_wrap_license(about: CValuesRef<GtkAboutDialog>?, wrap_license: gboolean): Unit {
    memScoped {
        return kniBridge3539(about?.getPointer(memScope).rawValue, wrap_license)
    }
}

fun gtk_about_dialog_get_website(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3540(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_website(about: CValuesRef<GtkAboutDialog>?, @CCall.CString website: String?): Unit {
    memScoped {
        return kniBridge3541(about?.getPointer(memScope).rawValue, website?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_website_label(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3542(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_website_label(about: CValuesRef<GtkAboutDialog>?, @CCall.CString website_label: String?): Unit {
    memScoped {
        return kniBridge3543(about?.getPointer(memScope).rawValue, website_label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_authors(about: CValuesRef<GtkAboutDialog>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3544(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_authors(about: CValuesRef<GtkAboutDialog>?, authors: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3545(about?.getPointer(memScope).rawValue, authors?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_documenters(about: CValuesRef<GtkAboutDialog>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3546(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_documenters(about: CValuesRef<GtkAboutDialog>?, documenters: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3547(about?.getPointer(memScope).rawValue, documenters?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_artists(about: CValuesRef<GtkAboutDialog>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge3548(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_artists(about: CValuesRef<GtkAboutDialog>?, artists: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3549(about?.getPointer(memScope).rawValue, artists?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_translator_credits(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3550(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_translator_credits(about: CValuesRef<GtkAboutDialog>?, @CCall.CString translator_credits: String?): Unit {
    memScoped {
        return kniBridge3551(about?.getPointer(memScope).rawValue, translator_credits?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_logo(about: CValuesRef<GtkAboutDialog>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge3552(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_logo(about: CValuesRef<GtkAboutDialog>?, logo: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge3553(about?.getPointer(memScope).rawValue, logo?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_get_logo_icon_name(about: CValuesRef<GtkAboutDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3554(about?.getPointer(memScope).rawValue))
    }
}

fun gtk_about_dialog_set_logo_icon_name(about: CValuesRef<GtkAboutDialog>?, @CCall.CString icon_name: String?): Unit {
    memScoped {
        return kniBridge3555(about?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_about_dialog_add_credit_section(about: CValuesRef<GtkAboutDialog>?, @CCall.CString section_name: String?, people: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge3556(about?.getPointer(memScope).rawValue, section_name?.cstr?.getPointer(memScope).rawValue, people?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAboutDialog(_ptr: CValuesRef<GtkAboutDialog>?): Unit {
    memScoped {
        return kniBridge3557(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAboutDialog(_ptr: CValuesRef<CPointerVar<GtkAboutDialog>>?): Unit {
    memScoped {
        return kniBridge3558(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAboutDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3559(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAboutDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3560(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAboutDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3561(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_get_type(): GType {
    return kniBridge3562()
}

fun gtk_menu_shell_append(menu_shell: CValuesRef<GtkMenuShell>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3563(menu_shell?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_prepend(menu_shell: CValuesRef<GtkMenuShell>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3564(menu_shell?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_insert(menu_shell: CValuesRef<GtkMenuShell>?, child: CValuesRef<GtkWidget>?, position: gint): Unit {
    memScoped {
        return kniBridge3565(menu_shell?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_menu_shell_deactivate(menu_shell: CValuesRef<GtkMenuShell>?): Unit {
    memScoped {
        return kniBridge3566(menu_shell?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_select_item(menu_shell: CValuesRef<GtkMenuShell>?, menu_item: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3567(menu_shell?.getPointer(memScope).rawValue, menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_deselect(menu_shell: CValuesRef<GtkMenuShell>?): Unit {
    memScoped {
        return kniBridge3568(menu_shell?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_activate_item(menu_shell: CValuesRef<GtkMenuShell>?, menu_item: CValuesRef<GtkWidget>?, force_deactivate: gboolean): Unit {
    memScoped {
        return kniBridge3569(menu_shell?.getPointer(memScope).rawValue, menu_item?.getPointer(memScope).rawValue, force_deactivate)
    }
}

fun gtk_menu_shell_select_first(menu_shell: CValuesRef<GtkMenuShell>?, search_sensitive: gboolean): Unit {
    memScoped {
        return kniBridge3570(menu_shell?.getPointer(memScope).rawValue, search_sensitive)
    }
}

fun gtk_menu_shell_cancel(menu_shell: CValuesRef<GtkMenuShell>?): Unit {
    memScoped {
        return kniBridge3571(menu_shell?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_get_take_focus(menu_shell: CValuesRef<GtkMenuShell>?): gboolean {
    memScoped {
        return kniBridge3572(menu_shell?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_shell_set_take_focus(menu_shell: CValuesRef<GtkMenuShell>?, take_focus: gboolean): Unit {
    memScoped {
        return kniBridge3573(menu_shell?.getPointer(memScope).rawValue, take_focus)
    }
}

fun gtk_menu_shell_get_selected_item(menu_shell: CValuesRef<GtkMenuShell>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3574(menu_shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_shell_get_parent_shell(menu_shell: CValuesRef<GtkMenuShell>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3575(menu_shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_shell_bind_model(menu_shell: CValuesRef<GtkMenuShell>?, model: CValuesRef<GMenuModel>?, @CCall.CString action_namespace: String?, with_separators: gboolean): Unit {
    memScoped {
        return kniBridge3576(menu_shell?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue, action_namespace?.cstr?.getPointer(memScope).rawValue, with_separators)
    }
}

fun glib_autoptr_clear_GtkMenuShell(_ptr: CValuesRef<GtkMenuShell>?): Unit {
    memScoped {
        return kniBridge3577(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMenuShell(_ptr: CValuesRef<CPointerVar<GtkMenuShell>>?): Unit {
    memScoped {
        return kniBridge3578(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMenuShell(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3579(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMenuShell(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3580(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMenuShell(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3581(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_type(): GType {
    return kniBridge3582()
}

fun gtk_menu_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge3583())
}

fun gtk_menu_new_from_model(model: CValuesRef<GMenuModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3584(model?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_popup(menu: CValuesRef<GtkMenu>?, parent_menu_shell: CValuesRef<GtkWidget>?, parent_menu_item: CValuesRef<GtkWidget>?, func: GtkMenuPositionFunc?, data: gpointer?, button: guint, activate_time: guint32): Unit {
    memScoped {
        return kniBridge3585(menu?.getPointer(memScope).rawValue, parent_menu_shell?.getPointer(memScope).rawValue, parent_menu_item?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, button, activate_time)
    }
}

fun gtk_menu_popup_for_device(menu: CValuesRef<GtkMenu>?, device: CValuesRef<GdkDevice>?, parent_menu_shell: CValuesRef<GtkWidget>?, parent_menu_item: CValuesRef<GtkWidget>?, func: GtkMenuPositionFunc?, data: gpointer?, destroy: GDestroyNotify?, button: guint, activate_time: guint32): Unit {
    memScoped {
        return kniBridge3586(menu?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue, parent_menu_shell?.getPointer(memScope).rawValue, parent_menu_item?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue, button, activate_time)
    }
}

fun gtk_menu_popup_at_rect(menu: CValuesRef<GtkMenu>?, rect_window: CValuesRef<GdkWindow>?, rect: CValuesRef<GdkRectangle>?, rect_anchor: GdkGravity, menu_anchor: GdkGravity, trigger_event: CValuesRef<GdkEvent>?): Unit {
    memScoped {
        return kniBridge3587(menu?.getPointer(memScope).rawValue, rect_window?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue, rect_anchor, menu_anchor, trigger_event?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_popup_at_widget(menu: CValuesRef<GtkMenu>?, widget: CValuesRef<GtkWidget>?, widget_anchor: GdkGravity, menu_anchor: GdkGravity, trigger_event: CValuesRef<GdkEvent>?): Unit {
    memScoped {
        return kniBridge3588(menu?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, widget_anchor, menu_anchor, trigger_event?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_popup_at_pointer(menu: CValuesRef<GtkMenu>?, trigger_event: CValuesRef<GdkEvent>?): Unit {
    memScoped {
        return kniBridge3589(menu?.getPointer(memScope).rawValue, trigger_event?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_reposition(menu: CValuesRef<GtkMenu>?): Unit {
    memScoped {
        return kniBridge3590(menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_popdown(menu: CValuesRef<GtkMenu>?): Unit {
    memScoped {
        return kniBridge3591(menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_active(menu: CValuesRef<GtkMenu>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3592(menu?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_set_active(menu: CValuesRef<GtkMenu>?, index: guint): Unit {
    memScoped {
        return kniBridge3593(menu?.getPointer(memScope).rawValue, index)
    }
}

fun gtk_menu_set_accel_group(menu: CValuesRef<GtkMenu>?, accel_group: CValuesRef<GtkAccelGroup>?): Unit {
    memScoped {
        return kniBridge3594(menu?.getPointer(memScope).rawValue, accel_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_accel_group(menu: CValuesRef<GtkMenu>?): CPointer<GtkAccelGroup>? {
    memScoped {
        return interpretCPointer<GtkAccelGroup>(kniBridge3595(menu?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_set_accel_path(menu: CValuesRef<GtkMenu>?, @CCall.CString accel_path: String?): Unit {
    memScoped {
        return kniBridge3596(menu?.getPointer(memScope).rawValue, accel_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_accel_path(menu: CValuesRef<GtkMenu>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3597(menu?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_attach_to_widget(menu: CValuesRef<GtkMenu>?, attach_widget: CValuesRef<GtkWidget>?, detacher: GtkMenuDetachFunc?): Unit {
    memScoped {
        return kniBridge3598(menu?.getPointer(memScope).rawValue, attach_widget?.getPointer(memScope).rawValue, detacher.rawValue)
    }
}

fun gtk_menu_detach(menu: CValuesRef<GtkMenu>?): Unit {
    memScoped {
        return kniBridge3599(menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_attach_widget(menu: CValuesRef<GtkMenu>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3600(menu?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_set_tearoff_state(menu: CValuesRef<GtkMenu>?, torn_off: gboolean): Unit {
    memScoped {
        return kniBridge3601(menu?.getPointer(memScope).rawValue, torn_off)
    }
}

fun gtk_menu_get_tearoff_state(menu: CValuesRef<GtkMenu>?): gboolean {
    memScoped {
        return kniBridge3602(menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_set_title(menu: CValuesRef<GtkMenu>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge3603(menu?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_title(menu: CValuesRef<GtkMenu>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3604(menu?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_reorder_child(menu: CValuesRef<GtkMenu>?, child: CValuesRef<GtkWidget>?, position: gint): Unit {
    memScoped {
        return kniBridge3605(menu?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_menu_set_screen(menu: CValuesRef<GtkMenu>?, screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge3606(menu?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_attach(menu: CValuesRef<GtkMenu>?, child: CValuesRef<GtkWidget>?, left_attach: guint, right_attach: guint, top_attach: guint, bottom_attach: guint): Unit {
    memScoped {
        return kniBridge3607(menu?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, left_attach, right_attach, top_attach, bottom_attach)
    }
}

fun gtk_menu_set_monitor(menu: CValuesRef<GtkMenu>?, monitor_num: gint): Unit {
    memScoped {
        return kniBridge3608(menu?.getPointer(memScope).rawValue, monitor_num)
    }
}

fun gtk_menu_get_monitor(menu: CValuesRef<GtkMenu>?): gint {
    memScoped {
        return kniBridge3609(menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_place_on_monitor(menu: CValuesRef<GtkMenu>?, monitor: CValuesRef<GdkMonitor>?): Unit {
    memScoped {
        return kniBridge3610(menu?.getPointer(memScope).rawValue, monitor?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_get_for_attach_widget(widget: CValuesRef<GtkWidget>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3611(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_set_reserve_toggle_size(menu: CValuesRef<GtkMenu>?, reserve_toggle_size: gboolean): Unit {
    memScoped {
        return kniBridge3612(menu?.getPointer(memScope).rawValue, reserve_toggle_size)
    }
}

fun gtk_menu_get_reserve_toggle_size(menu: CValuesRef<GtkMenu>?): gboolean {
    memScoped {
        return kniBridge3613(menu?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMenu(_ptr: CValuesRef<GtkMenu>?): Unit {
    memScoped {
        return kniBridge3614(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMenu(_ptr: CValuesRef<CPointerVar<GtkMenu>>?): Unit {
    memScoped {
        return kniBridge3615(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMenu(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3616(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMenu(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3617(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMenu(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3618(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_type(): GType {
    return kniBridge3619()
}

fun gtk_label_new(@CCall.CString str: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3620(str?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_new_with_mnemonic(@CCall.CString str: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3621(str?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_text(label: CValuesRef<GtkLabel>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge3622(label?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_text(label: CValuesRef<GtkLabel>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3623(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_attributes(label: CValuesRef<GtkLabel>?, attrs: CValuesRef<PangoAttrList>?): Unit {
    memScoped {
        return kniBridge3624(label?.getPointer(memScope).rawValue, attrs?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_attributes(label: CValuesRef<GtkLabel>?): CPointer<PangoAttrList>? {
    memScoped {
        return interpretCPointer<PangoAttrList>(kniBridge3625(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_label(label: CValuesRef<GtkLabel>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge3626(label?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_label(label: CValuesRef<GtkLabel>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3627(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_markup(label: CValuesRef<GtkLabel>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge3628(label?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_use_markup(label: CValuesRef<GtkLabel>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3629(label?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_label_get_use_markup(label: CValuesRef<GtkLabel>?): gboolean {
    memScoped {
        return kniBridge3630(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_use_underline(label: CValuesRef<GtkLabel>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3631(label?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_label_get_use_underline(label: CValuesRef<GtkLabel>?): gboolean {
    memScoped {
        return kniBridge3632(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_markup_with_mnemonic(label: CValuesRef<GtkLabel>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge3633(label?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_mnemonic_keyval(label: CValuesRef<GtkLabel>?): guint {
    memScoped {
        return kniBridge3634(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_mnemonic_widget(label: CValuesRef<GtkLabel>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3635(label?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_mnemonic_widget(label: CValuesRef<GtkLabel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3636(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_text_with_mnemonic(label: CValuesRef<GtkLabel>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge3637(label?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_justify(label: CValuesRef<GtkLabel>?, jtype: GtkJustification): Unit {
    memScoped {
        return kniBridge3638(label?.getPointer(memScope).rawValue, jtype.value)
    }
}

fun gtk_label_get_justify(label: CValuesRef<GtkLabel>?): GtkJustification {
    memScoped {
        return GtkJustification.byValue(kniBridge3639(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_ellipsize(label: CValuesRef<GtkLabel>?, mode: PangoEllipsizeMode): Unit {
    memScoped {
        return kniBridge3640(label?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_label_get_ellipsize(label: CValuesRef<GtkLabel>?): PangoEllipsizeMode {
    memScoped {
        return PangoEllipsizeMode.byValue(kniBridge3641(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_width_chars(label: CValuesRef<GtkLabel>?, n_chars: gint): Unit {
    memScoped {
        return kniBridge3642(label?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_label_get_width_chars(label: CValuesRef<GtkLabel>?): gint {
    memScoped {
        return kniBridge3643(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_max_width_chars(label: CValuesRef<GtkLabel>?, n_chars: gint): Unit {
    memScoped {
        return kniBridge3644(label?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_label_get_max_width_chars(label: CValuesRef<GtkLabel>?): gint {
    memScoped {
        return kniBridge3645(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_lines(label: CValuesRef<GtkLabel>?, lines: gint): Unit {
    memScoped {
        return kniBridge3646(label?.getPointer(memScope).rawValue, lines)
    }
}

fun gtk_label_get_lines(label: CValuesRef<GtkLabel>?): gint {
    memScoped {
        return kniBridge3647(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_pattern(label: CValuesRef<GtkLabel>?, @CCall.CString pattern: String?): Unit {
    memScoped {
        return kniBridge3648(label?.getPointer(memScope).rawValue, pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_line_wrap(label: CValuesRef<GtkLabel>?, wrap: gboolean): Unit {
    memScoped {
        return kniBridge3649(label?.getPointer(memScope).rawValue, wrap)
    }
}

fun gtk_label_get_line_wrap(label: CValuesRef<GtkLabel>?): gboolean {
    memScoped {
        return kniBridge3650(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_line_wrap_mode(label: CValuesRef<GtkLabel>?, wrap_mode: PangoWrapMode): Unit {
    memScoped {
        return kniBridge3651(label?.getPointer(memScope).rawValue, wrap_mode.value)
    }
}

fun gtk_label_get_line_wrap_mode(label: CValuesRef<GtkLabel>?): PangoWrapMode {
    memScoped {
        return PangoWrapMode.byValue(kniBridge3652(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_selectable(label: CValuesRef<GtkLabel>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3653(label?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_label_get_selectable(label: CValuesRef<GtkLabel>?): gboolean {
    memScoped {
        return kniBridge3654(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_angle(label: CValuesRef<GtkLabel>?, angle: gdouble): Unit {
    memScoped {
        return kniBridge3655(label?.getPointer(memScope).rawValue, angle)
    }
}

fun gtk_label_get_angle(label: CValuesRef<GtkLabel>?): gdouble {
    memScoped {
        return kniBridge3656(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_select_region(label: CValuesRef<GtkLabel>?, start_offset: gint, end_offset: gint): Unit {
    memScoped {
        return kniBridge3657(label?.getPointer(memScope).rawValue, start_offset, end_offset)
    }
}

fun gtk_label_get_selection_bounds(label: CValuesRef<GtkLabel>?, start: CValuesRef<gintVar>?, end: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge3658(label?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_layout(label: CValuesRef<GtkLabel>?): CPointer<PangoLayout>? {
    memScoped {
        return interpretCPointer<PangoLayout>(kniBridge3659(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_get_layout_offsets(label: CValuesRef<GtkLabel>?, x: CValuesRef<gintVar>?, y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3660(label?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_single_line_mode(label: CValuesRef<GtkLabel>?, single_line_mode: gboolean): Unit {
    memScoped {
        return kniBridge3661(label?.getPointer(memScope).rawValue, single_line_mode)
    }
}

fun gtk_label_get_single_line_mode(label: CValuesRef<GtkLabel>?): gboolean {
    memScoped {
        return kniBridge3662(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_get_current_uri(label: CValuesRef<GtkLabel>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3663(label?.getPointer(memScope).rawValue))
    }
}

fun gtk_label_set_track_visited_links(label: CValuesRef<GtkLabel>?, track_links: gboolean): Unit {
    memScoped {
        return kniBridge3664(label?.getPointer(memScope).rawValue, track_links)
    }
}

fun gtk_label_get_track_visited_links(label: CValuesRef<GtkLabel>?): gboolean {
    memScoped {
        return kniBridge3665(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_xalign(label: CValuesRef<GtkLabel>?, xalign: gfloat): Unit {
    memScoped {
        return kniBridge3666(label?.getPointer(memScope).rawValue, xalign)
    }
}

fun gtk_label_get_xalign(label: CValuesRef<GtkLabel>?): gfloat {
    memScoped {
        return kniBridge3667(label?.getPointer(memScope).rawValue)
    }
}

fun gtk_label_set_yalign(label: CValuesRef<GtkLabel>?, yalign: gfloat): Unit {
    memScoped {
        return kniBridge3668(label?.getPointer(memScope).rawValue, yalign)
    }
}

fun gtk_label_get_yalign(label: CValuesRef<GtkLabel>?): gfloat {
    memScoped {
        return kniBridge3669(label?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkLabel(_ptr: CValuesRef<GtkLabel>?): Unit {
    memScoped {
        return kniBridge3670(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkLabel(_ptr: CValuesRef<CPointerVar<GtkLabel>>?): Unit {
    memScoped {
        return kniBridge3671(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkLabel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3672(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkLabel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3673(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkLabel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3674(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_label_get_type(): GType {
    return kniBridge3675()
}

fun gtk_accel_label_new(@CCall.CString string: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3676(string?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_accel_label_get_accel_widget(accel_label: CValuesRef<GtkAccelLabel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3677(accel_label?.getPointer(memScope).rawValue))
    }
}

fun gtk_accel_label_get_accel_width(accel_label: CValuesRef<GtkAccelLabel>?): guint {
    memScoped {
        return kniBridge3678(accel_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_label_set_accel_widget(accel_label: CValuesRef<GtkAccelLabel>?, accel_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3679(accel_label?.getPointer(memScope).rawValue, accel_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_label_set_accel_closure(accel_label: CValuesRef<GtkAccelLabel>?, accel_closure: CValuesRef<GClosure>?): Unit {
    memScoped {
        return kniBridge3680(accel_label?.getPointer(memScope).rawValue, accel_closure?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_label_refetch(accel_label: CValuesRef<GtkAccelLabel>?): gboolean {
    memScoped {
        return kniBridge3681(accel_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_label_set_accel(accel_label: CValuesRef<GtkAccelLabel>?, accelerator_key: guint, accelerator_mods: GdkModifierType): Unit {
    memScoped {
        return kniBridge3682(accel_label?.getPointer(memScope).rawValue, accelerator_key, accelerator_mods)
    }
}

fun gtk_accel_label_get_accel(accel_label: CValuesRef<GtkAccelLabel>?, accelerator_key: CValuesRef<guintVar>?, accelerator_mods: CValuesRef<GdkModifierTypeVar>?): Unit {
    memScoped {
        return kniBridge3683(accel_label?.getPointer(memScope).rawValue, accelerator_key?.getPointer(memScope).rawValue, accelerator_mods?.getPointer(memScope).rawValue)
    }
}

fun _gtk_accel_label_class_get_accelerator_label(klass: CValuesRef<GtkAccelLabelClass>?, accelerator_key: guint, accelerator_mods: GdkModifierType): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3684(klass?.getPointer(memScope).rawValue, accelerator_key, accelerator_mods))
    }
}

fun glib_autoptr_clear_GtkAccelLabel(_ptr: CValuesRef<GtkAccelLabel>?): Unit {
    memScoped {
        return kniBridge3685(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAccelLabel(_ptr: CValuesRef<CPointerVar<GtkAccelLabel>>?): Unit {
    memScoped {
        return kniBridge3686(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAccelLabel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3687(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAccelLabel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3688(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAccelLabel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3689(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_add_entry(@CCall.CString accel_path: String?, accel_key: guint, accel_mods: GdkModifierType): Unit {
    memScoped {
        return kniBridge3690(accel_path?.cstr?.getPointer(memScope).rawValue, accel_key, accel_mods)
    }
}

fun gtk_accel_map_lookup_entry(@CCall.CString accel_path: String?, key: CValuesRef<GtkAccelKey>?): gboolean {
    memScoped {
        return kniBridge3691(accel_path?.cstr?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_change_entry(@CCall.CString accel_path: String?, accel_key: guint, accel_mods: GdkModifierType, replace: gboolean): gboolean {
    memScoped {
        return kniBridge3692(accel_path?.cstr?.getPointer(memScope).rawValue, accel_key, accel_mods, replace)
    }
}

fun gtk_accel_map_load(@CCall.CString file_name: String?): Unit {
    memScoped {
        return kniBridge3693(file_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_save(@CCall.CString file_name: String?): Unit {
    memScoped {
        return kniBridge3694(file_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_foreach(data: gpointer?, foreach_func: GtkAccelMapForeach?): Unit {
    return kniBridge3695(data.rawValue, foreach_func.rawValue)
}

fun gtk_accel_map_load_fd(fd: gint): Unit {
    return kniBridge3696(fd)
}

fun gtk_accel_map_load_scanner(scanner: CValuesRef<GScanner>?): Unit {
    memScoped {
        return kniBridge3697(scanner?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_save_fd(fd: gint): Unit {
    return kniBridge3698(fd)
}

fun gtk_accel_map_lock_path(@CCall.CString accel_path: String?): Unit {
    memScoped {
        return kniBridge3699(accel_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_unlock_path(@CCall.CString accel_path: String?): Unit {
    memScoped {
        return kniBridge3700(accel_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_add_filter(@CCall.CString filter_pattern: String?): Unit {
    memScoped {
        return kniBridge3701(filter_pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_accel_map_foreach_unfiltered(data: gpointer?, foreach_func: GtkAccelMapForeach?): Unit {
    return kniBridge3702(data.rawValue, foreach_func.rawValue)
}

fun gtk_accel_map_get_type(): GType {
    return kniBridge3703()
}

fun gtk_accel_map_get(): CPointer<GtkAccelMap>? {
    return interpretCPointer<GtkAccelMap>(kniBridge3704())
}

fun glib_autoptr_clear_GtkAccelMap(_ptr: CValuesRef<GtkAccelMap>?): Unit {
    memScoped {
        return kniBridge3705(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAccelMap(_ptr: CValuesRef<CPointerVar<GtkAccelMap>>?): Unit {
    memScoped {
        return kniBridge3706(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAccelMap(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge3707(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAccelMap(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge3708(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAccelMap(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge3709(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_accessible_get_type(): GType {
    return kniBridge3710()
}

fun gtk_accessible_set_widget(accessible: CValuesRef<GtkAccessible>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3711(accessible?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_accessible_get_widget(accessible: CValuesRef<GtkAccessible>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3712(accessible?.getPointer(memScope).rawValue))
    }
}

fun gtk_accessible_connect_widget_destroyed(accessible: CValuesRef<GtkAccessible>?): Unit {
    memScoped {
        return kniBridge3713(accessible?.getPointer(memScope).rawValue)
    }
}

fun gtk_actionable_get_type(): GType {
    return kniBridge3714()
}

fun gtk_actionable_get_action_name(actionable: CValuesRef<GtkActionable>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3715(actionable?.getPointer(memScope).rawValue))
    }
}

fun gtk_actionable_set_action_name(actionable: CValuesRef<GtkActionable>?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge3716(actionable?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_actionable_get_action_target_value(actionable: CValuesRef<GtkActionable>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge3717(actionable?.getPointer(memScope).rawValue))
    }
}

fun gtk_actionable_set_action_target_value(actionable: CValuesRef<GtkActionable>?, target_value: CValuesRef<GVariant>?): Unit {
    memScoped {
        return kniBridge3718(actionable?.getPointer(memScope).rawValue, target_value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk343")
external fun gtk_actionable_set_action_target(actionable: CValuesRef<GtkActionable>?, @CCall.CString format_string: String?, vararg variadicArguments: Any?): Unit

fun gtk_actionable_set_detailed_action_name(actionable: CValuesRef<GtkActionable>?, @CCall.CString detailed_action_name: String?): Unit {
    memScoped {
        return kniBridge3719(actionable?.getPointer(memScope).rawValue, detailed_action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_action_bar_get_type(): GType {
    return kniBridge3720()
}

fun gtk_action_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge3721())
}

fun gtk_action_bar_get_center_widget(action_bar: CValuesRef<GtkActionBar>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3722(action_bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_action_bar_set_center_widget(action_bar: CValuesRef<GtkActionBar>?, center_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3723(action_bar?.getPointer(memScope).rawValue, center_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_action_bar_pack_start(action_bar: CValuesRef<GtkActionBar>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3724(action_bar?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_action_bar_pack_end(action_bar: CValuesRef<GtkActionBar>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3725(action_bar?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_get_type(): GType {
    return kniBridge3726()
}

fun gtk_adjustment_new(value: gdouble, lower: gdouble, upper: gdouble, step_increment: gdouble, page_increment: gdouble, page_size: gdouble): CPointer<GtkAdjustment>? {
    return interpretCPointer<GtkAdjustment>(kniBridge3727(value, lower, upper, step_increment, page_increment, page_size))
}

fun gtk_adjustment_changed(adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge3728(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_value_changed(adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge3729(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_clamp_page(adjustment: CValuesRef<GtkAdjustment>?, lower: gdouble, upper: gdouble): Unit {
    memScoped {
        return kniBridge3730(adjustment?.getPointer(memScope).rawValue, lower, upper)
    }
}

fun gtk_adjustment_get_value(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3731(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_set_value(adjustment: CValuesRef<GtkAdjustment>?, value: gdouble): Unit {
    memScoped {
        return kniBridge3732(adjustment?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_adjustment_get_lower(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3733(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_set_lower(adjustment: CValuesRef<GtkAdjustment>?, lower: gdouble): Unit {
    memScoped {
        return kniBridge3734(adjustment?.getPointer(memScope).rawValue, lower)
    }
}

fun gtk_adjustment_get_upper(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3735(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_set_upper(adjustment: CValuesRef<GtkAdjustment>?, upper: gdouble): Unit {
    memScoped {
        return kniBridge3736(adjustment?.getPointer(memScope).rawValue, upper)
    }
}

fun gtk_adjustment_get_step_increment(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3737(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_set_step_increment(adjustment: CValuesRef<GtkAdjustment>?, step_increment: gdouble): Unit {
    memScoped {
        return kniBridge3738(adjustment?.getPointer(memScope).rawValue, step_increment)
    }
}

fun gtk_adjustment_get_page_increment(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3739(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_set_page_increment(adjustment: CValuesRef<GtkAdjustment>?, page_increment: gdouble): Unit {
    memScoped {
        return kniBridge3740(adjustment?.getPointer(memScope).rawValue, page_increment)
    }
}

fun gtk_adjustment_get_page_size(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3741(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_adjustment_set_page_size(adjustment: CValuesRef<GtkAdjustment>?, page_size: gdouble): Unit {
    memScoped {
        return kniBridge3742(adjustment?.getPointer(memScope).rawValue, page_size)
    }
}

fun gtk_adjustment_configure(adjustment: CValuesRef<GtkAdjustment>?, value: gdouble, lower: gdouble, upper: gdouble, step_increment: gdouble, page_increment: gdouble, page_size: gdouble): Unit {
    memScoped {
        return kniBridge3743(adjustment?.getPointer(memScope).rawValue, value, lower, upper, step_increment, page_increment, page_size)
    }
}

fun gtk_adjustment_get_minimum_increment(adjustment: CValuesRef<GtkAdjustment>?): gdouble {
    memScoped {
        return kniBridge3744(adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_get_type(): GType {
    return kniBridge3745()
}

fun gtk_app_chooser_get_app_info(self: CValuesRef<GtkAppChooser>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge3746(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_get_content_type(self: CValuesRef<GtkAppChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3747(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_refresh(self: CValuesRef<GtkAppChooser>?): Unit {
    memScoped {
        return kniBridge3748(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_dialog_get_type(): GType {
    return kniBridge3749()
}

fun gtk_app_chooser_dialog_new(parent: CValuesRef<GtkWindow>?, flags: GtkDialogFlags, file: CValuesRef<GFile>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3750(parent?.getPointer(memScope).rawValue, flags, file?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_dialog_new_for_content_type(parent: CValuesRef<GtkWindow>?, flags: GtkDialogFlags, @CCall.CString content_type: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3751(parent?.getPointer(memScope).rawValue, flags, content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_dialog_get_widget(self: CValuesRef<GtkAppChooserDialog>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3752(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_dialog_set_heading(self: CValuesRef<GtkAppChooserDialog>?, @CCall.CString heading: String?): Unit {
    memScoped {
        return kniBridge3753(self?.getPointer(memScope).rawValue, heading?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_dialog_get_heading(self: CValuesRef<GtkAppChooserDialog>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3754(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_box_get_type(): GType {
    return kniBridge3755()
}

fun gtk_box_new(orientation: GtkOrientation, spacing: gint): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge3756(orientation.value, spacing))
}

fun gtk_box_pack_start(box: CValuesRef<GtkBox>?, child: CValuesRef<GtkWidget>?, expand: gboolean, fill: gboolean, padding: guint): Unit {
    memScoped {
        return kniBridge3757(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, expand, fill, padding)
    }
}

fun gtk_box_pack_end(box: CValuesRef<GtkBox>?, child: CValuesRef<GtkWidget>?, expand: gboolean, fill: gboolean, padding: guint): Unit {
    memScoped {
        return kniBridge3758(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, expand, fill, padding)
    }
}

fun gtk_box_set_homogeneous(box: CValuesRef<GtkBox>?, homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge3759(box?.getPointer(memScope).rawValue, homogeneous)
    }
}

fun gtk_box_get_homogeneous(box: CValuesRef<GtkBox>?): gboolean {
    memScoped {
        return kniBridge3760(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_box_set_spacing(box: CValuesRef<GtkBox>?, spacing: gint): Unit {
    memScoped {
        return kniBridge3761(box?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_box_get_spacing(box: CValuesRef<GtkBox>?): gint {
    memScoped {
        return kniBridge3762(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_box_set_baseline_position(box: CValuesRef<GtkBox>?, position: GtkBaselinePosition): Unit {
    memScoped {
        return kniBridge3763(box?.getPointer(memScope).rawValue, position.value)
    }
}

fun gtk_box_get_baseline_position(box: CValuesRef<GtkBox>?): GtkBaselinePosition {
    memScoped {
        return GtkBaselinePosition.byValue(kniBridge3764(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_box_reorder_child(box: CValuesRef<GtkBox>?, child: CValuesRef<GtkWidget>?, position: gint): Unit {
    memScoped {
        return kniBridge3765(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_box_query_child_packing(box: CValuesRef<GtkBox>?, child: CValuesRef<GtkWidget>?, expand: CValuesRef<gbooleanVar>?, fill: CValuesRef<gbooleanVar>?, padding: CValuesRef<guintVar>?, pack_type: CValuesRef<GtkPackType.Var>?): Unit {
    memScoped {
        return kniBridge3766(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, expand?.getPointer(memScope).rawValue, fill?.getPointer(memScope).rawValue, padding?.getPointer(memScope).rawValue, pack_type?.getPointer(memScope).rawValue)
    }
}

fun gtk_box_set_child_packing(box: CValuesRef<GtkBox>?, child: CValuesRef<GtkWidget>?, expand: gboolean, fill: gboolean, padding: guint, pack_type: GtkPackType): Unit {
    memScoped {
        return kniBridge3767(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, expand, fill, padding, pack_type.value)
    }
}

fun gtk_box_set_center_widget(box: CValuesRef<GtkBox>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3768(box?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_box_get_center_widget(box: CValuesRef<GtkBox>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3769(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_widget_get_type(): GType {
    return kniBridge3770()
}

fun gtk_app_chooser_widget_new(@CCall.CString content_type: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3771(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_widget_set_show_default(self: CValuesRef<GtkAppChooserWidget>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3772(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_widget_get_show_default(self: CValuesRef<GtkAppChooserWidget>?): gboolean {
    memScoped {
        return kniBridge3773(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_widget_set_show_recommended(self: CValuesRef<GtkAppChooserWidget>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3774(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_widget_get_show_recommended(self: CValuesRef<GtkAppChooserWidget>?): gboolean {
    memScoped {
        return kniBridge3775(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_widget_set_show_fallback(self: CValuesRef<GtkAppChooserWidget>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3776(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_widget_get_show_fallback(self: CValuesRef<GtkAppChooserWidget>?): gboolean {
    memScoped {
        return kniBridge3777(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_widget_set_show_other(self: CValuesRef<GtkAppChooserWidget>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3778(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_widget_get_show_other(self: CValuesRef<GtkAppChooserWidget>?): gboolean {
    memScoped {
        return kniBridge3779(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_widget_set_show_all(self: CValuesRef<GtkAppChooserWidget>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3780(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_widget_get_show_all(self: CValuesRef<GtkAppChooserWidget>?): gboolean {
    memScoped {
        return kniBridge3781(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_widget_set_default_text(self: CValuesRef<GtkAppChooserWidget>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge3782(self?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_widget_get_default_text(self: CValuesRef<GtkAppChooserWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3783(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_path_new(): CPointer<GtkTreePath>? {
    return interpretCPointer<GtkTreePath>(kniBridge3784())
}

fun gtk_tree_path_new_from_string(@CCall.CString path: String?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge3785(path?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk344")
external fun gtk_tree_path_new_from_indices(first_index: gint, vararg variadicArguments: Any?): CPointer<GtkTreePath>?

fun gtk_tree_path_new_from_indicesv(indices: CValuesRef<gintVar>?, length: gsize): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge3786(indices?.getPointer(memScope).rawValue, length))
    }
}

fun gtk_tree_path_to_string(path: CValuesRef<GtkTreePath>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3787(path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_path_new_first(): CPointer<GtkTreePath>? {
    return interpretCPointer<GtkTreePath>(kniBridge3788())
}

fun gtk_tree_path_append_index(path: CValuesRef<GtkTreePath>?, index_: gint): Unit {
    memScoped {
        return kniBridge3789(path?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_tree_path_prepend_index(path: CValuesRef<GtkTreePath>?, index_: gint): Unit {
    memScoped {
        return kniBridge3790(path?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_tree_path_get_depth(path: CValuesRef<GtkTreePath>?): gint {
    memScoped {
        return kniBridge3791(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_get_indices(path: CValuesRef<GtkTreePath>?): CPointer<gintVar>? {
    memScoped {
        return interpretCPointer<gintVar>(kniBridge3792(path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_path_get_indices_with_depth(path: CValuesRef<GtkTreePath>?, depth: CValuesRef<gintVar>?): CPointer<gintVar>? {
    memScoped {
        return interpretCPointer<gintVar>(kniBridge3793(path?.getPointer(memScope).rawValue, depth?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_path_free(path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge3794(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_copy(path: CValuesRef<GtkTreePath>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge3795(path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_path_get_type(): GType {
    return kniBridge3796()
}

fun gtk_tree_path_compare(a: CValuesRef<GtkTreePath>?, b: CValuesRef<GtkTreePath>?): gint {
    memScoped {
        return kniBridge3797(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_next(path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge3798(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_prev(path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge3799(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_up(path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge3800(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_down(path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge3801(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_is_ancestor(path: CValuesRef<GtkTreePath>?, descendant: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge3802(path?.getPointer(memScope).rawValue, descendant?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_path_is_descendant(path: CValuesRef<GtkTreePath>?, ancestor: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge3803(path?.getPointer(memScope).rawValue, ancestor?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_row_reference_get_type(): GType {
    return kniBridge3804()
}

fun gtk_tree_row_reference_new(model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?): CPointer<GtkTreeRowReference>? {
    memScoped {
        return interpretCPointer<GtkTreeRowReference>(kniBridge3805(model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_row_reference_new_proxy(proxy: CValuesRef<GObject>?, model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?): CPointer<GtkTreeRowReference>? {
    memScoped {
        return interpretCPointer<GtkTreeRowReference>(kniBridge3806(proxy?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_row_reference_get_path(reference: CValuesRef<GtkTreeRowReference>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge3807(reference?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_row_reference_get_model(reference: CValuesRef<GtkTreeRowReference>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge3808(reference?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_row_reference_valid(reference: CValuesRef<GtkTreeRowReference>?): gboolean {
    memScoped {
        return kniBridge3809(reference?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_row_reference_copy(reference: CValuesRef<GtkTreeRowReference>?): CPointer<GtkTreeRowReference>? {
    memScoped {
        return interpretCPointer<GtkTreeRowReference>(kniBridge3810(reference?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_row_reference_free(reference: CValuesRef<GtkTreeRowReference>?): Unit {
    memScoped {
        return kniBridge3811(reference?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_row_reference_inserted(proxy: CValuesRef<GObject>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge3812(proxy?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_row_reference_deleted(proxy: CValuesRef<GObject>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge3813(proxy?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_row_reference_reordered(proxy: CValuesRef<GObject>?, path: CValuesRef<GtkTreePath>?, iter: CValuesRef<GtkTreeIter>?, new_order: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3814(proxy?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, new_order?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_iter_copy(iter: CValuesRef<GtkTreeIter>?): CPointer<GtkTreeIter>? {
    memScoped {
        return interpretCPointer<GtkTreeIter>(kniBridge3815(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_iter_free(iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge3816(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_iter_get_type(): GType {
    return kniBridge3817()
}

fun gtk_tree_model_get_type(): GType {
    return kniBridge3818()
}

fun gtk_tree_model_get_flags(tree_model: CValuesRef<GtkTreeModel>?): GtkTreeModelFlags {
    memScoped {
        return kniBridge3819(tree_model?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_get_n_columns(tree_model: CValuesRef<GtkTreeModel>?): gint {
    memScoped {
        return kniBridge3820(tree_model?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_get_column_type(tree_model: CValuesRef<GtkTreeModel>?, index_: gint): GType {
    memScoped {
        return kniBridge3821(tree_model?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_tree_model_get_iter(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge3822(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_get_iter_from_string(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, @CCall.CString path_string: String?): gboolean {
    memScoped {
        return kniBridge3823(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, path_string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_get_string_from_iter(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3824(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_get_iter_first(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge3825(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_get_path(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge3826(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_get_value(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, column: gint, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge3827(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, column, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_iter_previous(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge3828(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_iter_next(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge3829(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_iter_children(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge3830(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_iter_has_child(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge3831(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_iter_n_children(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): gint {
    memScoped {
        return kniBridge3832(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_iter_nth_child(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?, n: gint): gboolean {
    memScoped {
        return kniBridge3833(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, n)
    }
}

fun gtk_tree_model_iter_parent(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, child: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge3834(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_ref_node(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge3835(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_unref_node(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge3836(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk345")
external fun gtk_tree_model_get(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, vararg variadicArguments: Any?): Unit

fun gtk_tree_model_get_valist(tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge3837(tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_tree_model_foreach(model: CValuesRef<GtkTreeModel>?, func: GtkTreeModelForeachFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge3838(model?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun gtk_tree_model_row_changed(tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge3839(tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_row_inserted(tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge3840(tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_row_has_child_toggled(tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge3841(tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_row_deleted(tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge3842(tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_rows_reordered(tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?, iter: CValuesRef<GtkTreeIter>?, new_order: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3843(tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, new_order?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_rows_reordered_with_length(tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?, iter: CValuesRef<GtkTreeIter>?, new_order: CValuesRef<gintVar>?, length: gint): Unit {
    memScoped {
        return kniBridge3844(tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, new_order?.getPointer(memScope).rawValue, length)
    }
}

fun gtk_cell_editable_get_type(): GType {
    return kniBridge3845()
}

fun gtk_cell_editable_start_editing(cell_editable: CValuesRef<GtkCellEditable>?, event: CValuesRef<GdkEvent>?): Unit {
    memScoped {
        return kniBridge3846(cell_editable?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_editable_editing_done(cell_editable: CValuesRef<GtkCellEditable>?): Unit {
    memScoped {
        return kniBridge3847(cell_editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_editable_remove_widget(cell_editable: CValuesRef<GtkCellEditable>?): Unit {
    memScoped {
        return kniBridge3848(cell_editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_type(): GType {
    return kniBridge3849()
}

fun gtk_cell_renderer_get_request_mode(cell: CValuesRef<GtkCellRenderer>?): GtkSizeRequestMode {
    memScoped {
        return kniBridge3850(cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_preferred_width(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, minimum_size: CValuesRef<gintVar>?, natural_size: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3851(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, minimum_size?.getPointer(memScope).rawValue, natural_size?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_preferred_height_for_width(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, width: gint, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3852(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, width, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_preferred_height(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, minimum_size: CValuesRef<gintVar>?, natural_size: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3853(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, minimum_size?.getPointer(memScope).rawValue, natural_size?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_preferred_width_for_height(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, height: gint, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3854(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, height, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_preferred_size(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, minimum_size: CValuesRef<GtkRequisition>?, natural_size: CValuesRef<GtkRequisition>?): Unit {
    memScoped {
        return kniBridge3855(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, minimum_size?.getPointer(memScope).rawValue, natural_size?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_aligned_area(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, flags: GtkCellRendererState, cell_area: CValuesRef<GdkRectangle>?, aligned_area: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge3856(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, flags, cell_area?.getPointer(memScope).rawValue, aligned_area?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_size(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, cell_area: CValuesRef<GdkRectangle>?, x_offset: CValuesRef<gintVar>?, y_offset: CValuesRef<gintVar>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3857(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, x_offset?.getPointer(memScope).rawValue, y_offset?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_render(cell: CValuesRef<GtkCellRenderer>?, cr: CValuesRef<cairo_t>?, widget: CValuesRef<GtkWidget>?, background_area: CValuesRef<GdkRectangle>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState): Unit {
    memScoped {
        return kniBridge3858(cell?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, background_area?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_cell_renderer_activate(cell: CValuesRef<GtkCellRenderer>?, event: CValuesRef<GdkEvent>?, widget: CValuesRef<GtkWidget>?, @CCall.CString path: String?, background_area: CValuesRef<GdkRectangle>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState): gboolean {
    memScoped {
        return kniBridge3859(cell?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, background_area?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_cell_renderer_start_editing(cell: CValuesRef<GtkCellRenderer>?, event: CValuesRef<GdkEvent>?, widget: CValuesRef<GtkWidget>?, @CCall.CString path: String?, background_area: CValuesRef<GdkRectangle>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState): CPointer<GtkCellEditable>? {
    memScoped {
        return interpretCPointer<GtkCellEditable>(kniBridge3860(cell?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, background_area?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags))
    }
}

fun gtk_cell_renderer_set_fixed_size(cell: CValuesRef<GtkCellRenderer>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge3861(cell?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_cell_renderer_get_fixed_size(cell: CValuesRef<GtkCellRenderer>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3862(cell?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_set_alignment(cell: CValuesRef<GtkCellRenderer>?, xalign: gfloat, yalign: gfloat): Unit {
    memScoped {
        return kniBridge3863(cell?.getPointer(memScope).rawValue, xalign, yalign)
    }
}

fun gtk_cell_renderer_get_alignment(cell: CValuesRef<GtkCellRenderer>?, xalign: CValuesRef<gfloatVar>?, yalign: CValuesRef<gfloatVar>?): Unit {
    memScoped {
        return kniBridge3864(cell?.getPointer(memScope).rawValue, xalign?.getPointer(memScope).rawValue, yalign?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_set_padding(cell: CValuesRef<GtkCellRenderer>?, xpad: gint, ypad: gint): Unit {
    memScoped {
        return kniBridge3865(cell?.getPointer(memScope).rawValue, xpad, ypad)
    }
}

fun gtk_cell_renderer_get_padding(cell: CValuesRef<GtkCellRenderer>?, xpad: CValuesRef<gintVar>?, ypad: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3866(cell?.getPointer(memScope).rawValue, xpad?.getPointer(memScope).rawValue, ypad?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_set_visible(cell: CValuesRef<GtkCellRenderer>?, visible: gboolean): Unit {
    memScoped {
        return kniBridge3867(cell?.getPointer(memScope).rawValue, visible)
    }
}

fun gtk_cell_renderer_get_visible(cell: CValuesRef<GtkCellRenderer>?): gboolean {
    memScoped {
        return kniBridge3868(cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_set_sensitive(cell: CValuesRef<GtkCellRenderer>?, sensitive: gboolean): Unit {
    memScoped {
        return kniBridge3869(cell?.getPointer(memScope).rawValue, sensitive)
    }
}

fun gtk_cell_renderer_get_sensitive(cell: CValuesRef<GtkCellRenderer>?): gboolean {
    memScoped {
        return kniBridge3870(cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_is_activatable(cell: CValuesRef<GtkCellRenderer>?): gboolean {
    memScoped {
        return kniBridge3871(cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_stop_editing(cell: CValuesRef<GtkCellRenderer>?, canceled: gboolean): Unit {
    memScoped {
        return kniBridge3872(cell?.getPointer(memScope).rawValue, canceled)
    }
}

fun _gtk_cell_renderer_calc_offset(cell: CValuesRef<GtkCellRenderer>?, cell_area: CValuesRef<GdkRectangle>?, direction: GtkTextDirection, width: gint, height: gint, x_offset: CValuesRef<gintVar>?, y_offset: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3873(cell?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, direction.value, width, height, x_offset?.getPointer(memScope).rawValue, y_offset?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_get_state(cell: CValuesRef<GtkCellRenderer>?, widget: CValuesRef<GtkWidget>?, cell_state: GtkCellRendererState): GtkStateFlags {
    memScoped {
        return kniBridge3874(cell?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cell_state)
    }
}

fun gtk_cell_renderer_class_set_accessible_type(renderer_class: CValuesRef<GtkCellRendererClass>?, type: GType): Unit {
    memScoped {
        return kniBridge3875(renderer_class?.getPointer(memScope).rawValue, type)
    }
}

fun _gtk_cell_renderer_get_accessible_type(renderer: CValuesRef<GtkCellRenderer>?): GType {
    memScoped {
        return kniBridge3876(renderer?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_sortable_get_type(): GType {
    return kniBridge3877()
}

fun gtk_tree_sortable_sort_column_changed(sortable: CValuesRef<GtkTreeSortable>?): Unit {
    memScoped {
        return kniBridge3878(sortable?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_sortable_get_sort_column_id(sortable: CValuesRef<GtkTreeSortable>?, sort_column_id: CValuesRef<gintVar>?, order: CValuesRef<GtkSortType.Var>?): gboolean {
    memScoped {
        return kniBridge3879(sortable?.getPointer(memScope).rawValue, sort_column_id?.getPointer(memScope).rawValue, order?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_sortable_set_sort_column_id(sortable: CValuesRef<GtkTreeSortable>?, sort_column_id: gint, order: GtkSortType): Unit {
    memScoped {
        return kniBridge3880(sortable?.getPointer(memScope).rawValue, sort_column_id, order.value)
    }
}

fun gtk_tree_sortable_set_sort_func(sortable: CValuesRef<GtkTreeSortable>?, sort_column_id: gint, sort_func: GtkTreeIterCompareFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3881(sortable?.getPointer(memScope).rawValue, sort_column_id, sort_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_sortable_set_default_sort_func(sortable: CValuesRef<GtkTreeSortable>?, sort_func: GtkTreeIterCompareFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3882(sortable?.getPointer(memScope).rawValue, sort_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_sortable_has_default_sort_func(sortable: CValuesRef<GtkTreeSortable>?): gboolean {
    memScoped {
        return kniBridge3883(sortable?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_type(): GType {
    return kniBridge3884()
}

fun gtk_cell_area_add(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3885(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_remove(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3886(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_has_renderer(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?): gboolean {
    memScoped {
        return kniBridge3887(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_foreach(area: CValuesRef<GtkCellArea>?, callback: GtkCellCallback?, callback_data: gpointer?): Unit {
    memScoped {
        return kniBridge3888(area?.getPointer(memScope).rawValue, callback.rawValue, callback_data.rawValue)
    }
}

fun gtk_cell_area_foreach_alloc(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, cell_area: CValuesRef<GdkRectangle>?, background_area: CValuesRef<GdkRectangle>?, callback: GtkCellAllocCallback?, callback_data: gpointer?): Unit {
    memScoped {
        return kniBridge3889(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, background_area?.getPointer(memScope).rawValue, callback.rawValue, callback_data.rawValue)
    }
}

fun gtk_cell_area_event(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, event: CValuesRef<GdkEvent>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState): gint {
    memScoped {
        return kniBridge3890(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_cell_area_render(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, cr: CValuesRef<cairo_t>?, background_area: CValuesRef<GdkRectangle>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState, paint_focus: gboolean): Unit {
    memScoped {
        return kniBridge3891(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, background_area?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags, paint_focus)
    }
}

fun gtk_cell_area_get_cell_allocation(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, renderer: CValuesRef<GtkCellRenderer>?, cell_area: CValuesRef<GdkRectangle>?, allocation: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge3892(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, allocation?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_cell_at_position(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, cell_area: CValuesRef<GdkRectangle>?, x: gint, y: gint, alloc_area: CValuesRef<GdkRectangle>?): CPointer<GtkCellRenderer>? {
    memScoped {
        return interpretCPointer<GtkCellRenderer>(kniBridge3893(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, x, y, alloc_area?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_create_context(area: CValuesRef<GtkCellArea>?): CPointer<GtkCellAreaContext>? {
    memScoped {
        return interpretCPointer<GtkCellAreaContext>(kniBridge3894(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_copy_context(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?): CPointer<GtkCellAreaContext>? {
    memScoped {
        return interpretCPointer<GtkCellAreaContext>(kniBridge3895(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_get_request_mode(area: CValuesRef<GtkCellArea>?): GtkSizeRequestMode {
    memScoped {
        return kniBridge3896(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_preferred_width(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3897(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_preferred_height_for_width(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, width: gint, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3898(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, width, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_preferred_height(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3899(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_preferred_width_for_height(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, height: gint, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3900(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, height, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_current_path_string(area: CValuesRef<GtkCellArea>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3901(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_apply_attributes(area: CValuesRef<GtkCellArea>?, tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, is_expander: gboolean, is_expanded: gboolean): Unit {
    memScoped {
        return kniBridge3902(area?.getPointer(memScope).rawValue, tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, is_expander, is_expanded)
    }
}

fun gtk_cell_area_attribute_connect(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString attribute: String?, column: gint): Unit {
    memScoped {
        return kniBridge3903(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_cell_area_attribute_disconnect(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString attribute: String?): Unit {
    memScoped {
        return kniBridge3904(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_attribute_get_column(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString attribute: String?): gint {
    memScoped {
        return kniBridge3905(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_class_install_cell_property(aclass: CValuesRef<GtkCellAreaClass>?, property_id: guint, pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge3906(aclass?.getPointer(memScope).rawValue, property_id, pspec?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_class_find_cell_property(aclass: CValuesRef<GtkCellAreaClass>?, @CCall.CString property_name: String?): CPointer<GParamSpec>? {
    memScoped {
        return interpretCPointer<GParamSpec>(kniBridge3907(aclass?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_class_list_cell_properties(aclass: CValuesRef<GtkCellAreaClass>?, n_properties: CValuesRef<guintVar>?): CPointer<CPointerVar<GParamSpec>>? {
    memScoped {
        return interpretCPointer<CPointerVar<GParamSpec>>(kniBridge3908(aclass?.getPointer(memScope).rawValue, n_properties?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk346")
external fun gtk_cell_area_add_with_properties(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString first_prop_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk347")
external fun gtk_cell_area_cell_set(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString first_prop_name: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk348")
external fun gtk_cell_area_cell_get(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString first_prop_name: String?, vararg variadicArguments: Any?): Unit

fun gtk_cell_area_cell_set_valist(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge3909(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_cell_area_cell_get_valist(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString first_property_name: String?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge3910(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, first_property_name?.cstr?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_cell_area_cell_set_property(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge3911(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_cell_get_property(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge3912(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_is_activatable(area: CValuesRef<GtkCellArea>?): gboolean {
    memScoped {
        return kniBridge3913(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_activate(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?, widget: CValuesRef<GtkWidget>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState, edit_only: gboolean): gboolean {
    memScoped {
        return kniBridge3914(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags, edit_only)
    }
}

fun gtk_cell_area_focus(area: CValuesRef<GtkCellArea>?, direction: GtkDirectionType): gboolean {
    memScoped {
        return kniBridge3915(area?.getPointer(memScope).rawValue, direction.value)
    }
}

fun gtk_cell_area_set_focus_cell(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3916(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_focus_cell(area: CValuesRef<GtkCellArea>?): CPointer<GtkCellRenderer>? {
    memScoped {
        return interpretCPointer<GtkCellRenderer>(kniBridge3917(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_add_focus_sibling(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, sibling: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3918(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_remove_focus_sibling(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, sibling: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3919(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_is_focus_sibling(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, sibling: CValuesRef<GtkCellRenderer>?): gboolean {
    memScoped {
        return kniBridge3920(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_get_focus_siblings(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3921(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_get_focus_from_sibling(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?): CPointer<GtkCellRenderer>? {
    memScoped {
        return interpretCPointer<GtkCellRenderer>(kniBridge3922(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_get_edited_cell(area: CValuesRef<GtkCellArea>?): CPointer<GtkCellRenderer>? {
    memScoped {
        return interpretCPointer<GtkCellRenderer>(kniBridge3923(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_get_edit_widget(area: CValuesRef<GtkCellArea>?): CPointer<GtkCellEditable>? {
    memScoped {
        return interpretCPointer<GtkCellEditable>(kniBridge3924(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_activate_cell(area: CValuesRef<GtkCellArea>?, widget: CValuesRef<GtkWidget>?, renderer: CValuesRef<GtkCellRenderer>?, event: CValuesRef<GdkEvent>?, cell_area: CValuesRef<GdkRectangle>?, flags: GtkCellRendererState): gboolean {
    memScoped {
        return kniBridge3925(area?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_cell_area_stop_editing(area: CValuesRef<GtkCellArea>?, canceled: gboolean): Unit {
    memScoped {
        return kniBridge3926(area?.getPointer(memScope).rawValue, canceled)
    }
}

fun gtk_cell_area_inner_cell_area(area: CValuesRef<GtkCellArea>?, widget: CValuesRef<GtkWidget>?, cell_area: CValuesRef<GdkRectangle>?, inner_area: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge3927(area?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, inner_area?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_request_renderer(area: CValuesRef<GtkCellArea>?, renderer: CValuesRef<GtkCellRenderer>?, orientation: GtkOrientation, widget: CValuesRef<GtkWidget>?, for_size: gint, minimum_size: CValuesRef<gintVar>?, natural_size: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3928(area?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, orientation.value, widget?.getPointer(memScope).rawValue, for_size, minimum_size?.getPointer(memScope).rawValue, natural_size?.getPointer(memScope).rawValue)
    }
}

fun _gtk_cell_area_set_cell_data_func_with_proxy(area: CValuesRef<GtkCellArea>?, cell: CValuesRef<GtkCellRenderer>?, func: GFunc?, func_data: gpointer?, destroy: GDestroyNotify?, proxy: gpointer?): Unit {
    memScoped {
        return kniBridge3929(area?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, func.rawValue, func_data.rawValue, destroy.rawValue, proxy.rawValue)
    }
}

fun gtk_tree_view_column_get_type(): GType {
    return kniBridge3930()
}

fun gtk_tree_view_column_new(): CPointer<GtkTreeViewColumn>? {
    return interpretCPointer<GtkTreeViewColumn>(kniBridge3931())
}

fun gtk_tree_view_column_new_with_area(area: CValuesRef<GtkCellArea>?): CPointer<GtkTreeViewColumn>? {
    memScoped {
        return interpretCPointer<GtkTreeViewColumn>(kniBridge3932(area?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk349")
external fun gtk_tree_view_column_new_with_attributes(@CCall.CString title: String?, cell: CValuesRef<GtkCellRenderer>?, vararg variadicArguments: Any?): CPointer<GtkTreeViewColumn>?

fun gtk_tree_view_column_pack_start(tree_column: CValuesRef<GtkTreeViewColumn>?, cell: CValuesRef<GtkCellRenderer>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge3933(tree_column?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_tree_view_column_pack_end(tree_column: CValuesRef<GtkTreeViewColumn>?, cell: CValuesRef<GtkCellRenderer>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge3934(tree_column?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_tree_view_column_clear(tree_column: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge3935(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_add_attribute(tree_column: CValuesRef<GtkTreeViewColumn>?, cell_renderer: CValuesRef<GtkCellRenderer>?, @CCall.CString attribute: String?, column: gint): Unit {
    memScoped {
        return kniBridge3936(tree_column?.getPointer(memScope).rawValue, cell_renderer?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, column)
    }
}

@CCall("knifunptr_libgtk350")
external fun gtk_tree_view_column_set_attributes(tree_column: CValuesRef<GtkTreeViewColumn>?, cell_renderer: CValuesRef<GtkCellRenderer>?, vararg variadicArguments: Any?): Unit

fun gtk_tree_view_column_set_cell_data_func(tree_column: CValuesRef<GtkTreeViewColumn>?, cell_renderer: CValuesRef<GtkCellRenderer>?, func: GtkTreeCellDataFunc?, func_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge3937(tree_column?.getPointer(memScope).rawValue, cell_renderer?.getPointer(memScope).rawValue, func.rawValue, func_data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_view_column_clear_attributes(tree_column: CValuesRef<GtkTreeViewColumn>?, cell_renderer: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3938(tree_column?.getPointer(memScope).rawValue, cell_renderer?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_spacing(tree_column: CValuesRef<GtkTreeViewColumn>?, spacing: gint): Unit {
    memScoped {
        return kniBridge3939(tree_column?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_tree_view_column_get_spacing(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3940(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_visible(tree_column: CValuesRef<GtkTreeViewColumn>?, visible: gboolean): Unit {
    memScoped {
        return kniBridge3941(tree_column?.getPointer(memScope).rawValue, visible)
    }
}

fun gtk_tree_view_column_get_visible(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3942(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_resizable(tree_column: CValuesRef<GtkTreeViewColumn>?, resizable: gboolean): Unit {
    memScoped {
        return kniBridge3943(tree_column?.getPointer(memScope).rawValue, resizable)
    }
}

fun gtk_tree_view_column_get_resizable(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3944(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_sizing(tree_column: CValuesRef<GtkTreeViewColumn>?, type: GtkTreeViewColumnSizing): Unit {
    memScoped {
        return kniBridge3945(tree_column?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_tree_view_column_get_sizing(tree_column: CValuesRef<GtkTreeViewColumn>?): GtkTreeViewColumnSizing {
    memScoped {
        return GtkTreeViewColumnSizing.byValue(kniBridge3946(tree_column?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_column_get_x_offset(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3947(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_get_width(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3948(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_get_fixed_width(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3949(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_fixed_width(tree_column: CValuesRef<GtkTreeViewColumn>?, fixed_width: gint): Unit {
    memScoped {
        return kniBridge3950(tree_column?.getPointer(memScope).rawValue, fixed_width)
    }
}

fun gtk_tree_view_column_set_min_width(tree_column: CValuesRef<GtkTreeViewColumn>?, min_width: gint): Unit {
    memScoped {
        return kniBridge3951(tree_column?.getPointer(memScope).rawValue, min_width)
    }
}

fun gtk_tree_view_column_get_min_width(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3952(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_max_width(tree_column: CValuesRef<GtkTreeViewColumn>?, max_width: gint): Unit {
    memScoped {
        return kniBridge3953(tree_column?.getPointer(memScope).rawValue, max_width)
    }
}

fun gtk_tree_view_column_get_max_width(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3954(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_clicked(tree_column: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge3955(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_title(tree_column: CValuesRef<GtkTreeViewColumn>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge3956(tree_column?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_get_title(tree_column: CValuesRef<GtkTreeViewColumn>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge3957(tree_column?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_column_set_expand(tree_column: CValuesRef<GtkTreeViewColumn>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge3958(tree_column?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_tree_view_column_get_expand(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3959(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_clickable(tree_column: CValuesRef<GtkTreeViewColumn>?, clickable: gboolean): Unit {
    memScoped {
        return kniBridge3960(tree_column?.getPointer(memScope).rawValue, clickable)
    }
}

fun gtk_tree_view_column_get_clickable(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3961(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_widget(tree_column: CValuesRef<GtkTreeViewColumn>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge3962(tree_column?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_get_widget(tree_column: CValuesRef<GtkTreeViewColumn>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3963(tree_column?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_column_set_alignment(tree_column: CValuesRef<GtkTreeViewColumn>?, xalign: gfloat): Unit {
    memScoped {
        return kniBridge3964(tree_column?.getPointer(memScope).rawValue, xalign)
    }
}

fun gtk_tree_view_column_get_alignment(tree_column: CValuesRef<GtkTreeViewColumn>?): gfloat {
    memScoped {
        return kniBridge3965(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_reorderable(tree_column: CValuesRef<GtkTreeViewColumn>?, reorderable: gboolean): Unit {
    memScoped {
        return kniBridge3966(tree_column?.getPointer(memScope).rawValue, reorderable)
    }
}

fun gtk_tree_view_column_get_reorderable(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3967(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_sort_column_id(tree_column: CValuesRef<GtkTreeViewColumn>?, sort_column_id: gint): Unit {
    memScoped {
        return kniBridge3968(tree_column?.getPointer(memScope).rawValue, sort_column_id)
    }
}

fun gtk_tree_view_column_get_sort_column_id(tree_column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge3969(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_sort_indicator(tree_column: CValuesRef<GtkTreeViewColumn>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge3970(tree_column?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_tree_view_column_get_sort_indicator(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3971(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_set_sort_order(tree_column: CValuesRef<GtkTreeViewColumn>?, order: GtkSortType): Unit {
    memScoped {
        return kniBridge3972(tree_column?.getPointer(memScope).rawValue, order.value)
    }
}

fun gtk_tree_view_column_get_sort_order(tree_column: CValuesRef<GtkTreeViewColumn>?): GtkSortType {
    memScoped {
        return GtkSortType.byValue(kniBridge3973(tree_column?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_column_cell_set_cell_data(tree_column: CValuesRef<GtkTreeViewColumn>?, tree_model: CValuesRef<GtkTreeModel>?, iter: CValuesRef<GtkTreeIter>?, is_expander: gboolean, is_expanded: gboolean): Unit {
    memScoped {
        return kniBridge3974(tree_column?.getPointer(memScope).rawValue, tree_model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, is_expander, is_expanded)
    }
}

fun gtk_tree_view_column_cell_get_size(tree_column: CValuesRef<GtkTreeViewColumn>?, cell_area: CValuesRef<GdkRectangle>?, x_offset: CValuesRef<gintVar>?, y_offset: CValuesRef<gintVar>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge3975(tree_column?.getPointer(memScope).rawValue, cell_area?.getPointer(memScope).rawValue, x_offset?.getPointer(memScope).rawValue, y_offset?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_cell_is_visible(tree_column: CValuesRef<GtkTreeViewColumn>?): gboolean {
    memScoped {
        return kniBridge3976(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_focus_cell(tree_column: CValuesRef<GtkTreeViewColumn>?, cell: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge3977(tree_column?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_cell_get_position(tree_column: CValuesRef<GtkTreeViewColumn>?, cell_renderer: CValuesRef<GtkCellRenderer>?, x_offset: CValuesRef<gintVar>?, width: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge3978(tree_column?.getPointer(memScope).rawValue, cell_renderer?.getPointer(memScope).rawValue, x_offset?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_queue_resize(tree_column: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge3979(tree_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_column_get_tree_view(tree_column: CValuesRef<GtkTreeViewColumn>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3980(tree_column?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_column_get_button(tree_column: CValuesRef<GtkTreeViewColumn>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge3981(tree_column?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_attributes_new(): CPointer<GtkTextAttributes>? {
    return interpretCPointer<GtkTextAttributes>(kniBridge3982())
}

fun gtk_text_attributes_copy(src: CValuesRef<GtkTextAttributes>?): CPointer<GtkTextAttributes>? {
    memScoped {
        return interpretCPointer<GtkTextAttributes>(kniBridge3983(src?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_attributes_copy_values(src: CValuesRef<GtkTextAttributes>?, dest: CValuesRef<GtkTextAttributes>?): Unit {
    memScoped {
        return kniBridge3984(src?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_attributes_unref(values: CValuesRef<GtkTextAttributes>?): Unit {
    memScoped {
        return kniBridge3985(values?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_attributes_ref(values: CValuesRef<GtkTextAttributes>?): CPointer<GtkTextAttributes>? {
    memScoped {
        return interpretCPointer<GtkTextAttributes>(kniBridge3986(values?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_attributes_get_type(): GType {
    return kniBridge3987()
}

fun gtk_text_child_anchor_get_type(): GType {
    return kniBridge3988()
}

fun gtk_text_child_anchor_new(): CPointer<GtkTextChildAnchor>? {
    return interpretCPointer<GtkTextChildAnchor>(kniBridge3989())
}

fun gtk_text_child_anchor_get_widgets(anchor: CValuesRef<GtkTextChildAnchor>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge3990(anchor?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_child_anchor_get_deleted(anchor: CValuesRef<GtkTextChildAnchor>?): gboolean {
    memScoped {
        return kniBridge3991(anchor?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_tag_get_type(): GType {
    return kniBridge3992()
}

fun gtk_text_tag_new(@CCall.CString name: String?): CPointer<GtkTextTag>? {
    memScoped {
        return interpretCPointer<GtkTextTag>(kniBridge3993(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_tag_get_priority(tag: CValuesRef<GtkTextTag>?): gint {
    memScoped {
        return kniBridge3994(tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_tag_set_priority(tag: CValuesRef<GtkTextTag>?, priority: gint): Unit {
    memScoped {
        return kniBridge3995(tag?.getPointer(memScope).rawValue, priority)
    }
}

fun gtk_text_tag_event(tag: CValuesRef<GtkTextTag>?, event_object: CValuesRef<GObject>?, event: CValuesRef<GdkEvent>?, iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge3996(tag?.getPointer(memScope).rawValue, event_object?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_tag_changed(tag: CValuesRef<GtkTextTag>?, size_changed: gboolean): Unit {
    memScoped {
        return kniBridge3997(tag?.getPointer(memScope).rawValue, size_changed)
    }
}

fun gtk_text_iter_get_buffer(iter: CValuesRef<GtkTextIter>?): CPointer<GtkTextBuffer>? {
    memScoped {
        return interpretCPointer<GtkTextBuffer>(kniBridge3998(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_copy(iter: CValuesRef<GtkTextIter>?): CPointer<GtkTextIter>? {
    memScoped {
        return interpretCPointer<GtkTextIter>(kniBridge3999(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_free(iter: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge4000(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_assign(iter: CValuesRef<GtkTextIter>?, other: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge4001(iter?.getPointer(memScope).rawValue, other?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_type(): GType {
    return kniBridge4002()
}

fun gtk_text_iter_get_offset(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4003(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_line(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4004(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_line_offset(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4005(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_line_index(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4006(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_visible_line_offset(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4007(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_visible_line_index(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4008(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_char(iter: CValuesRef<GtkTextIter>?): gunichar {
    memScoped {
        return kniBridge4009(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_slice(start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4010(start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_text(start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4011(start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_visible_slice(start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4012(start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_visible_text(start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4013(start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_pixbuf(iter: CValuesRef<GtkTextIter>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4014(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_marks(iter: CValuesRef<GtkTextIter>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge4015(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_child_anchor(iter: CValuesRef<GtkTextIter>?): CPointer<GtkTextChildAnchor>? {
    memScoped {
        return interpretCPointer<GtkTextChildAnchor>(kniBridge4016(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_get_toggled_tags(iter: CValuesRef<GtkTextIter>?, toggled_on: gboolean): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge4017(iter?.getPointer(memScope).rawValue, toggled_on))
    }
}

fun gtk_text_iter_starts_tag(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4018(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_begins_tag(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4019(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_ends_tag(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4020(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_toggles_tag(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4021(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_has_tag(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4022(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_tags(iter: CValuesRef<GtkTextIter>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge4023(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_editable(iter: CValuesRef<GtkTextIter>?, default_setting: gboolean): gboolean {
    memScoped {
        return kniBridge4024(iter?.getPointer(memScope).rawValue, default_setting)
    }
}

fun gtk_text_iter_can_insert(iter: CValuesRef<GtkTextIter>?, default_editability: gboolean): gboolean {
    memScoped {
        return kniBridge4025(iter?.getPointer(memScope).rawValue, default_editability)
    }
}

fun gtk_text_iter_starts_word(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4026(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_ends_word(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4027(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_inside_word(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4028(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_starts_sentence(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4029(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_ends_sentence(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4030(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_inside_sentence(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4031(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_starts_line(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4032(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_ends_line(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4033(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_is_cursor_position(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4034(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_chars_in_line(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4035(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_bytes_in_line(iter: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4036(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_attributes(iter: CValuesRef<GtkTextIter>?, values: CValuesRef<GtkTextAttributes>?): gboolean {
    memScoped {
        return kniBridge4037(iter?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_get_language(iter: CValuesRef<GtkTextIter>?): CPointer<PangoLanguage>? {
    memScoped {
        return interpretCPointer<PangoLanguage>(kniBridge4038(iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_iter_is_end(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4039(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_is_start(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4040(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_char(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4041(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_char(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4042(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_chars(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4043(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_chars(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4044(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_line(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4045(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_line(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4046(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_lines(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4047(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_lines(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4048(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_word_end(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4049(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_word_start(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4050(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_word_ends(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4051(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_word_starts(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4052(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_visible_line(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4053(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_visible_line(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4054(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_visible_lines(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4055(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_visible_lines(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4056(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_visible_word_end(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4057(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_visible_word_start(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4058(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_visible_word_ends(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4059(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_visible_word_starts(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4060(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_sentence_end(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4061(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_sentence_start(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4062(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_sentence_ends(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4063(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_sentence_starts(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4064(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_cursor_position(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4065(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_cursor_position(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4066(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_cursor_positions(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4067(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_cursor_positions(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4068(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_forward_visible_cursor_position(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4069(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_visible_cursor_position(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4070(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_visible_cursor_positions(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4071(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_backward_visible_cursor_positions(iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge4072(iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_iter_set_offset(iter: CValuesRef<GtkTextIter>?, char_offset: gint): Unit {
    memScoped {
        return kniBridge4073(iter?.getPointer(memScope).rawValue, char_offset)
    }
}

fun gtk_text_iter_set_line(iter: CValuesRef<GtkTextIter>?, line_number: gint): Unit {
    memScoped {
        return kniBridge4074(iter?.getPointer(memScope).rawValue, line_number)
    }
}

fun gtk_text_iter_set_line_offset(iter: CValuesRef<GtkTextIter>?, char_on_line: gint): Unit {
    memScoped {
        return kniBridge4075(iter?.getPointer(memScope).rawValue, char_on_line)
    }
}

fun gtk_text_iter_set_line_index(iter: CValuesRef<GtkTextIter>?, byte_on_line: gint): Unit {
    memScoped {
        return kniBridge4076(iter?.getPointer(memScope).rawValue, byte_on_line)
    }
}

fun gtk_text_iter_forward_to_end(iter: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge4077(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_to_line_end(iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4078(iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_set_visible_line_offset(iter: CValuesRef<GtkTextIter>?, char_on_line: gint): Unit {
    memScoped {
        return kniBridge4079(iter?.getPointer(memScope).rawValue, char_on_line)
    }
}

fun gtk_text_iter_set_visible_line_index(iter: CValuesRef<GtkTextIter>?, byte_on_line: gint): Unit {
    memScoped {
        return kniBridge4080(iter?.getPointer(memScope).rawValue, byte_on_line)
    }
}

fun gtk_text_iter_forward_to_tag_toggle(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4081(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_to_tag_toggle(iter: CValuesRef<GtkTextIter>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge4082(iter?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_find_char(iter: CValuesRef<GtkTextIter>?, pred: GtkTextCharPredicate?, user_data: gpointer?, limit: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4083(iter?.getPointer(memScope).rawValue, pred.rawValue, user_data.rawValue, limit?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_find_char(iter: CValuesRef<GtkTextIter>?, pred: GtkTextCharPredicate?, user_data: gpointer?, limit: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4084(iter?.getPointer(memScope).rawValue, pred.rawValue, user_data.rawValue, limit?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_forward_search(iter: CValuesRef<GtkTextIter>?, @CCall.CString str: String?, flags: GtkTextSearchFlags, match_start: CValuesRef<GtkTextIter>?, match_end: CValuesRef<GtkTextIter>?, limit: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4085(iter?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, flags, match_start?.getPointer(memScope).rawValue, match_end?.getPointer(memScope).rawValue, limit?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_backward_search(iter: CValuesRef<GtkTextIter>?, @CCall.CString str: String?, flags: GtkTextSearchFlags, match_start: CValuesRef<GtkTextIter>?, match_end: CValuesRef<GtkTextIter>?, limit: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4086(iter?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, flags, match_start?.getPointer(memScope).rawValue, match_end?.getPointer(memScope).rawValue, limit?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_equal(lhs: CValuesRef<GtkTextIter>?, rhs: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4087(lhs?.getPointer(memScope).rawValue, rhs?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_compare(lhs: CValuesRef<GtkTextIter>?, rhs: CValuesRef<GtkTextIter>?): gint {
    memScoped {
        return kniBridge4088(lhs?.getPointer(memScope).rawValue, rhs?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_in_range(iter: CValuesRef<GtkTextIter>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge4089(iter?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_iter_order(first: CValuesRef<GtkTextIter>?, second: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge4090(first?.getPointer(memScope).rawValue, second?.getPointer(memScope).rawValue)
    }
}

fun gtk_target_list_get_type(): GType {
    return kniBridge4091()
}

fun gtk_target_list_new(targets: CValuesRef<GtkTargetEntry>?, ntargets: guint): CPointer<GtkTargetList>? {
    memScoped {
        return interpretCPointer<GtkTargetList>(kniBridge4092(targets?.getPointer(memScope).rawValue, ntargets))
    }
}

fun gtk_target_list_ref(list: CValuesRef<GtkTargetList>?): CPointer<GtkTargetList>? {
    memScoped {
        return interpretCPointer<GtkTargetList>(kniBridge4093(list?.getPointer(memScope).rawValue))
    }
}

fun gtk_target_list_unref(list: CValuesRef<GtkTargetList>?): Unit {
    memScoped {
        return kniBridge4094(list?.getPointer(memScope).rawValue)
    }
}

fun gtk_target_list_add(list: CValuesRef<GtkTargetList>?, target: GdkAtom?, flags: guint, info: guint): Unit {
    memScoped {
        return kniBridge4095(list?.getPointer(memScope).rawValue, target.rawValue, flags, info)
    }
}

fun gtk_target_list_add_text_targets(list: CValuesRef<GtkTargetList>?, info: guint): Unit {
    memScoped {
        return kniBridge4096(list?.getPointer(memScope).rawValue, info)
    }
}

fun gtk_target_list_add_rich_text_targets(list: CValuesRef<GtkTargetList>?, info: guint, deserializable: gboolean, buffer: CValuesRef<GtkTextBuffer>?): Unit {
    memScoped {
        return kniBridge4097(list?.getPointer(memScope).rawValue, info, deserializable, buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_target_list_add_image_targets(list: CValuesRef<GtkTargetList>?, info: guint, writable: gboolean): Unit {
    memScoped {
        return kniBridge4098(list?.getPointer(memScope).rawValue, info, writable)
    }
}

fun gtk_target_list_add_uri_targets(list: CValuesRef<GtkTargetList>?, info: guint): Unit {
    memScoped {
        return kniBridge4099(list?.getPointer(memScope).rawValue, info)
    }
}

fun gtk_target_list_add_table(list: CValuesRef<GtkTargetList>?, targets: CValuesRef<GtkTargetEntry>?, ntargets: guint): Unit {
    memScoped {
        return kniBridge4100(list?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, ntargets)
    }
}

fun gtk_target_list_remove(list: CValuesRef<GtkTargetList>?, target: GdkAtom?): Unit {
    memScoped {
        return kniBridge4101(list?.getPointer(memScope).rawValue, target.rawValue)
    }
}

fun gtk_target_list_find(list: CValuesRef<GtkTargetList>?, target: GdkAtom?, info: CValuesRef<guintVar>?): gboolean {
    memScoped {
        return kniBridge4102(list?.getPointer(memScope).rawValue, target.rawValue, info?.getPointer(memScope).rawValue)
    }
}

fun gtk_target_table_new_from_list(list: CValuesRef<GtkTargetList>?, n_targets: CValuesRef<gintVar>?): CPointer<GtkTargetEntry>? {
    memScoped {
        return interpretCPointer<GtkTargetEntry>(kniBridge4103(list?.getPointer(memScope).rawValue, n_targets?.getPointer(memScope).rawValue))
    }
}

fun gtk_target_table_free(targets: CValuesRef<GtkTargetEntry>?, n_targets: gint): Unit {
    memScoped {
        return kniBridge4104(targets?.getPointer(memScope).rawValue, n_targets)
    }
}

fun gtk_selection_owner_set(widget: CValuesRef<GtkWidget>?, selection: GdkAtom?, time_: guint32): gboolean {
    memScoped {
        return kniBridge4105(widget?.getPointer(memScope).rawValue, selection.rawValue, time_)
    }
}

fun gtk_selection_owner_set_for_display(display: CValuesRef<GdkDisplay>?, widget: CValuesRef<GtkWidget>?, selection: GdkAtom?, time_: guint32): gboolean {
    memScoped {
        return kniBridge4106(display?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, selection.rawValue, time_)
    }
}

fun gtk_selection_add_target(widget: CValuesRef<GtkWidget>?, selection: GdkAtom?, target: GdkAtom?, info: guint): Unit {
    memScoped {
        return kniBridge4107(widget?.getPointer(memScope).rawValue, selection.rawValue, target.rawValue, info)
    }
}

fun gtk_selection_add_targets(widget: CValuesRef<GtkWidget>?, selection: GdkAtom?, targets: CValuesRef<GtkTargetEntry>?, ntargets: guint): Unit {
    memScoped {
        return kniBridge4108(widget?.getPointer(memScope).rawValue, selection.rawValue, targets?.getPointer(memScope).rawValue, ntargets)
    }
}

fun gtk_selection_clear_targets(widget: CValuesRef<GtkWidget>?, selection: GdkAtom?): Unit {
    memScoped {
        return kniBridge4109(widget?.getPointer(memScope).rawValue, selection.rawValue)
    }
}

fun gtk_selection_convert(widget: CValuesRef<GtkWidget>?, selection: GdkAtom?, target: GdkAtom?, time_: guint32): gboolean {
    memScoped {
        return kniBridge4110(widget?.getPointer(memScope).rawValue, selection.rawValue, target.rawValue, time_)
    }
}

fun gtk_selection_remove_all(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4111(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_get_selection(selection_data: CValuesRef<GtkSelectionData>?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge4112(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_get_target(selection_data: CValuesRef<GtkSelectionData>?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge4113(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_get_data_type(selection_data: CValuesRef<GtkSelectionData>?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge4114(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_get_format(selection_data: CValuesRef<GtkSelectionData>?): gint {
    memScoped {
        return kniBridge4115(selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_get_data(selection_data: CValuesRef<GtkSelectionData>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge4116(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_get_length(selection_data: CValuesRef<GtkSelectionData>?): gint {
    memScoped {
        return kniBridge4117(selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_get_data_with_length(selection_data: CValuesRef<GtkSelectionData>?, length: CValuesRef<gintVar>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge4118(selection_data?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_get_display(selection_data: CValuesRef<GtkSelectionData>?): CPointer<GdkDisplay>? {
    memScoped {
        return interpretCPointer<GdkDisplay>(kniBridge4119(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_set(selection_data: CValuesRef<GtkSelectionData>?, type: GdkAtom?, format: gint, data: CValuesRef<gucharVar>?, length: gint): Unit {
    memScoped {
        return kniBridge4120(selection_data?.getPointer(memScope).rawValue, type.rawValue, format, data?.getPointer(memScope).rawValue, length)
    }
}

fun gtk_selection_data_set_text(selection_data: CValuesRef<GtkSelectionData>?, @CCall.CString str: String?, len: gint): gboolean {
    memScoped {
        return kniBridge4121(selection_data?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun gtk_selection_data_get_text(selection_data: CValuesRef<GtkSelectionData>?): CPointer<gucharVar>? {
    memScoped {
        return interpretCPointer<gucharVar>(kniBridge4122(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_set_pixbuf(selection_data: CValuesRef<GtkSelectionData>?, pixbuf: CValuesRef<GdkPixbuf>?): gboolean {
    memScoped {
        return kniBridge4123(selection_data?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_get_pixbuf(selection_data: CValuesRef<GtkSelectionData>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4124(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_set_uris(selection_data: CValuesRef<GtkSelectionData>?, uris: CValuesRef<CPointerVar<gcharVar>>?): gboolean {
    memScoped {
        return kniBridge4125(selection_data?.getPointer(memScope).rawValue, uris?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_get_uris(selection_data: CValuesRef<GtkSelectionData>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge4126(selection_data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_get_targets(selection_data: CValuesRef<GtkSelectionData>?, targets: CValuesRef<CPointerVar<GdkAtomVar>>?, n_atoms: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge4127(selection_data?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_atoms?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_targets_include_text(selection_data: CValuesRef<GtkSelectionData>?): gboolean {
    memScoped {
        return kniBridge4128(selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_targets_include_rich_text(selection_data: CValuesRef<GtkSelectionData>?, buffer: CValuesRef<GtkTextBuffer>?): gboolean {
    memScoped {
        return kniBridge4129(selection_data?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_selection_data_targets_include_image(selection_data: CValuesRef<GtkSelectionData>?, writable: gboolean): gboolean {
    memScoped {
        return kniBridge4130(selection_data?.getPointer(memScope).rawValue, writable)
    }
}

fun gtk_selection_data_targets_include_uri(selection_data: CValuesRef<GtkSelectionData>?): gboolean {
    memScoped {
        return kniBridge4131(selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_targets_include_text(targets: CValuesRef<GdkAtomVar>?, n_targets: gint): gboolean {
    memScoped {
        return kniBridge4132(targets?.getPointer(memScope).rawValue, n_targets)
    }
}

fun gtk_targets_include_rich_text(targets: CValuesRef<GdkAtomVar>?, n_targets: gint, buffer: CValuesRef<GtkTextBuffer>?): gboolean {
    memScoped {
        return kniBridge4133(targets?.getPointer(memScope).rawValue, n_targets, buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_targets_include_image(targets: CValuesRef<GdkAtomVar>?, n_targets: gint, writable: gboolean): gboolean {
    memScoped {
        return kniBridge4134(targets?.getPointer(memScope).rawValue, n_targets, writable)
    }
}

fun gtk_targets_include_uri(targets: CValuesRef<GdkAtomVar>?, n_targets: gint): gboolean {
    memScoped {
        return kniBridge4135(targets?.getPointer(memScope).rawValue, n_targets)
    }
}

fun gtk_selection_data_get_type(): GType {
    return kniBridge4136()
}

fun gtk_selection_data_copy(data: CValuesRef<GtkSelectionData>?): CPointer<GtkSelectionData>? {
    memScoped {
        return interpretCPointer<GtkSelectionData>(kniBridge4137(data?.getPointer(memScope).rawValue))
    }
}

fun gtk_selection_data_free(data: CValuesRef<GtkSelectionData>?): Unit {
    memScoped {
        return kniBridge4138(data?.getPointer(memScope).rawValue)
    }
}

fun gtk_target_entry_get_type(): GType {
    return kniBridge4139()
}

fun gtk_target_entry_new(@CCall.CString target: String?, flags: guint, info: guint): CPointer<GtkTargetEntry>? {
    memScoped {
        return interpretCPointer<GtkTargetEntry>(kniBridge4140(target?.cstr?.getPointer(memScope).rawValue, flags, info))
    }
}

fun gtk_target_entry_copy(data: CValuesRef<GtkTargetEntry>?): CPointer<GtkTargetEntry>? {
    memScoped {
        return interpretCPointer<GtkTargetEntry>(kniBridge4141(data?.getPointer(memScope).rawValue))
    }
}

fun gtk_target_entry_free(data: CValuesRef<GtkTargetEntry>?): Unit {
    memScoped {
        return kniBridge4142(data?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_get_data(widget: CValuesRef<GtkWidget>?, context: CValuesRef<GdkDragContext>?, target: GdkAtom?, time_: guint32): Unit {
    memScoped {
        return kniBridge4143(widget?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, target.rawValue, time_)
    }
}

fun gtk_drag_finish(context: CValuesRef<GdkDragContext>?, success: gboolean, del: gboolean, time_: guint32): Unit {
    memScoped {
        return kniBridge4144(context?.getPointer(memScope).rawValue, success, del, time_)
    }
}

fun gtk_drag_get_source_widget(context: CValuesRef<GdkDragContext>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4145(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_drag_highlight(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4146(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_unhighlight(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4147(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_begin_with_coordinates(widget: CValuesRef<GtkWidget>?, targets: CValuesRef<GtkTargetList>?, actions: GdkDragAction, button: gint, event: CValuesRef<GdkEvent>?, x: gint, y: gint): CPointer<GdkDragContext>? {
    memScoped {
        return interpretCPointer<GdkDragContext>(kniBridge4148(widget?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, actions, button, event?.getPointer(memScope).rawValue, x, y))
    }
}

fun gtk_drag_begin(widget: CValuesRef<GtkWidget>?, targets: CValuesRef<GtkTargetList>?, actions: GdkDragAction, button: gint, event: CValuesRef<GdkEvent>?): CPointer<GdkDragContext>? {
    memScoped {
        return interpretCPointer<GdkDragContext>(kniBridge4149(widget?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, actions, button, event?.getPointer(memScope).rawValue))
    }
}

fun gtk_drag_cancel(context: CValuesRef<GdkDragContext>?): Unit {
    memScoped {
        return kniBridge4150(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_set_icon_widget(context: CValuesRef<GdkDragContext>?, widget: CValuesRef<GtkWidget>?, hot_x: gint, hot_y: gint): Unit {
    memScoped {
        return kniBridge4151(context?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, hot_x, hot_y)
    }
}

fun gtk_drag_set_icon_pixbuf(context: CValuesRef<GdkDragContext>?, pixbuf: CValuesRef<GdkPixbuf>?, hot_x: gint, hot_y: gint): Unit {
    memScoped {
        return kniBridge4152(context?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue, hot_x, hot_y)
    }
}

fun gtk_drag_set_icon_stock(context: CValuesRef<GdkDragContext>?, @CCall.CString stock_id: String?, hot_x: gint, hot_y: gint): Unit {
    memScoped {
        return kniBridge4153(context?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue, hot_x, hot_y)
    }
}

fun gtk_drag_set_icon_surface(context: CValuesRef<GdkDragContext>?, surface: CValuesRef<cairo_surface_t>?): Unit {
    memScoped {
        return kniBridge4154(context?.getPointer(memScope).rawValue, surface?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_set_icon_name(context: CValuesRef<GdkDragContext>?, @CCall.CString icon_name: String?, hot_x: gint, hot_y: gint): Unit {
    memScoped {
        return kniBridge4155(context?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, hot_x, hot_y)
    }
}

fun gtk_drag_set_icon_gicon(context: CValuesRef<GdkDragContext>?, icon: CValuesRef<GIcon>?, hot_x: gint, hot_y: gint): Unit {
    memScoped {
        return kniBridge4156(context?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue, hot_x, hot_y)
    }
}

fun gtk_drag_set_icon_default(context: CValuesRef<GdkDragContext>?): Unit {
    memScoped {
        return kniBridge4157(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_check_threshold(widget: CValuesRef<GtkWidget>?, start_x: gint, start_y: gint, current_x: gint, current_y: gint): gboolean {
    memScoped {
        return kniBridge4158(widget?.getPointer(memScope).rawValue, start_x, start_y, current_x, current_y)
    }
}

fun gtk_editable_get_type(): GType {
    return kniBridge4159()
}

fun gtk_editable_select_region(editable: CValuesRef<GtkEditable>?, start_pos: gint, end_pos: gint): Unit {
    memScoped {
        return kniBridge4160(editable?.getPointer(memScope).rawValue, start_pos, end_pos)
    }
}

fun gtk_editable_get_selection_bounds(editable: CValuesRef<GtkEditable>?, start_pos: CValuesRef<gintVar>?, end_pos: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge4161(editable?.getPointer(memScope).rawValue, start_pos?.getPointer(memScope).rawValue, end_pos?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_insert_text(editable: CValuesRef<GtkEditable>?, @CCall.CString new_text: String?, new_text_length: gint, position: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4162(editable?.getPointer(memScope).rawValue, new_text?.cstr?.getPointer(memScope).rawValue, new_text_length, position?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_delete_text(editable: CValuesRef<GtkEditable>?, start_pos: gint, end_pos: gint): Unit {
    memScoped {
        return kniBridge4163(editable?.getPointer(memScope).rawValue, start_pos, end_pos)
    }
}

fun gtk_editable_get_chars(editable: CValuesRef<GtkEditable>?, start_pos: gint, end_pos: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4164(editable?.getPointer(memScope).rawValue, start_pos, end_pos))
    }
}

fun gtk_editable_cut_clipboard(editable: CValuesRef<GtkEditable>?): Unit {
    memScoped {
        return kniBridge4165(editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_copy_clipboard(editable: CValuesRef<GtkEditable>?): Unit {
    memScoped {
        return kniBridge4166(editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_paste_clipboard(editable: CValuesRef<GtkEditable>?): Unit {
    memScoped {
        return kniBridge4167(editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_delete_selection(editable: CValuesRef<GtkEditable>?): Unit {
    memScoped {
        return kniBridge4168(editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_set_position(editable: CValuesRef<GtkEditable>?, position: gint): Unit {
    memScoped {
        return kniBridge4169(editable?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_editable_get_position(editable: CValuesRef<GtkEditable>?): gint {
    memScoped {
        return kniBridge4170(editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_editable_set_editable(editable: CValuesRef<GtkEditable>?, is_editable: gboolean): Unit {
    memScoped {
        return kniBridge4171(editable?.getPointer(memScope).rawValue, is_editable)
    }
}

fun gtk_editable_get_editable(editable: CValuesRef<GtkEditable>?): gboolean {
    memScoped {
        return kniBridge4172(editable?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_get_type(): GType {
    return kniBridge4173()
}

fun gtk_im_context_set_client_window(context: CValuesRef<GtkIMContext>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge4174(context?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_get_preedit_string(context: CValuesRef<GtkIMContext>?, str: CValuesRef<CPointerVar<gcharVar>>?, attrs: CValuesRef<CPointerVar<PangoAttrList>>?, cursor_pos: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4175(context?.getPointer(memScope).rawValue, str?.getPointer(memScope).rawValue, attrs?.getPointer(memScope).rawValue, cursor_pos?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_filter_keypress(context: CValuesRef<GtkIMContext>?, event: CValuesRef<GdkEventKey>?): gboolean {
    memScoped {
        return kniBridge4176(context?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_focus_in(context: CValuesRef<GtkIMContext>?): Unit {
    memScoped {
        return kniBridge4177(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_focus_out(context: CValuesRef<GtkIMContext>?): Unit {
    memScoped {
        return kniBridge4178(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_reset(context: CValuesRef<GtkIMContext>?): Unit {
    memScoped {
        return kniBridge4179(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_set_cursor_location(context: CValuesRef<GtkIMContext>?, area: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge4180(context?.getPointer(memScope).rawValue, area?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_set_use_preedit(context: CValuesRef<GtkIMContext>?, use_preedit: gboolean): Unit {
    memScoped {
        return kniBridge4181(context?.getPointer(memScope).rawValue, use_preedit)
    }
}

fun gtk_im_context_set_surrounding(context: CValuesRef<GtkIMContext>?, @CCall.CString text: String?, len: gint, cursor_index: gint): Unit {
    memScoped {
        return kniBridge4182(context?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len, cursor_index)
    }
}

fun gtk_im_context_get_surrounding(context: CValuesRef<GtkIMContext>?, text: CValuesRef<CPointerVar<gcharVar>>?, cursor_index: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge4183(context?.getPointer(memScope).rawValue, text?.getPointer(memScope).rawValue, cursor_index?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_delete_surrounding(context: CValuesRef<GtkIMContext>?, offset: gint, n_chars: gint): gboolean {
    memScoped {
        return kniBridge4184(context?.getPointer(memScope).rawValue, offset, n_chars)
    }
}

fun gtk_entry_buffer_get_type(): GType {
    return kniBridge4185()
}

fun gtk_entry_buffer_new(@CCall.CString initial_chars: String?, n_initial_chars: gint): CPointer<GtkEntryBuffer>? {
    memScoped {
        return interpretCPointer<GtkEntryBuffer>(kniBridge4186(initial_chars?.cstr?.getPointer(memScope).rawValue, n_initial_chars))
    }
}

fun gtk_entry_buffer_get_bytes(buffer: CValuesRef<GtkEntryBuffer>?): gsize {
    memScoped {
        return kniBridge4187(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_buffer_get_length(buffer: CValuesRef<GtkEntryBuffer>?): guint {
    memScoped {
        return kniBridge4188(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_buffer_get_text(buffer: CValuesRef<GtkEntryBuffer>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4189(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_buffer_set_text(buffer: CValuesRef<GtkEntryBuffer>?, @CCall.CString chars: String?, n_chars: gint): Unit {
    memScoped {
        return kniBridge4190(buffer?.getPointer(memScope).rawValue, chars?.cstr?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_entry_buffer_set_max_length(buffer: CValuesRef<GtkEntryBuffer>?, max_length: gint): Unit {
    memScoped {
        return kniBridge4191(buffer?.getPointer(memScope).rawValue, max_length)
    }
}

fun gtk_entry_buffer_get_max_length(buffer: CValuesRef<GtkEntryBuffer>?): gint {
    memScoped {
        return kniBridge4192(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_buffer_insert_text(buffer: CValuesRef<GtkEntryBuffer>?, position: guint, @CCall.CString chars: String?, n_chars: gint): guint {
    memScoped {
        return kniBridge4193(buffer?.getPointer(memScope).rawValue, position, chars?.cstr?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_entry_buffer_delete_text(buffer: CValuesRef<GtkEntryBuffer>?, position: guint, n_chars: gint): guint {
    memScoped {
        return kniBridge4194(buffer?.getPointer(memScope).rawValue, position, n_chars)
    }
}

fun gtk_entry_buffer_emit_inserted_text(buffer: CValuesRef<GtkEntryBuffer>?, position: guint, @CCall.CString chars: String?, n_chars: guint): Unit {
    memScoped {
        return kniBridge4195(buffer?.getPointer(memScope).rawValue, position, chars?.cstr?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_entry_buffer_emit_deleted_text(buffer: CValuesRef<GtkEntryBuffer>?, position: guint, n_chars: guint): Unit {
    memScoped {
        return kniBridge4196(buffer?.getPointer(memScope).rawValue, position, n_chars)
    }
}

fun gtk_list_store_get_type(): GType {
    return kniBridge4197()
}

@CCall("knifunptr_libgtk351")
external fun gtk_list_store_new(n_columns: gint, vararg variadicArguments: Any?): CPointer<GtkListStore>?

fun gtk_list_store_newv(n_columns: gint, types: CValuesRef<GTypeVar>?): CPointer<GtkListStore>? {
    memScoped {
        return interpretCPointer<GtkListStore>(kniBridge4198(n_columns, types?.getPointer(memScope).rawValue))
    }
}

fun gtk_list_store_set_column_types(list_store: CValuesRef<GtkListStore>?, n_columns: gint, types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge4199(list_store?.getPointer(memScope).rawValue, n_columns, types?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_set_value(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, column: gint, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge4200(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, column, value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk352")
external fun gtk_list_store_set(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, vararg variadicArguments: Any?): Unit

fun gtk_list_store_set_valuesv(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, columns: CValuesRef<gintVar>?, values: CValuesRef<GValue>?, n_values: gint): Unit {
    memScoped {
        return kniBridge4201(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, columns?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue, n_values)
    }
}

fun gtk_list_store_set_valist(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge4202(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_list_store_remove(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge4203(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_insert(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, position: gint): Unit {
    memScoped {
        return kniBridge4204(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_list_store_insert_before(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, sibling: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4205(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_insert_after(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, sibling: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4206(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk353")
external fun gtk_list_store_insert_with_values(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, position: gint, vararg variadicArguments: Any?): Unit

fun gtk_list_store_insert_with_valuesv(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, position: gint, columns: CValuesRef<gintVar>?, values: CValuesRef<GValue>?, n_values: gint): Unit {
    memScoped {
        return kniBridge4207(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, position, columns?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue, n_values)
    }
}

fun gtk_list_store_prepend(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4208(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_append(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4209(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_clear(list_store: CValuesRef<GtkListStore>?): Unit {
    memScoped {
        return kniBridge4210(list_store?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_iter_is_valid(list_store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge4211(list_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_reorder(store: CValuesRef<GtkListStore>?, new_order: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4212(store?.getPointer(memScope).rawValue, new_order?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_swap(store: CValuesRef<GtkListStore>?, a: CValuesRef<GtkTreeIter>?, b: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4213(store?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_move_after(store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, position: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4214(store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, position?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_store_move_before(store: CValuesRef<GtkListStore>?, iter: CValuesRef<GtkTreeIter>?, position: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4215(store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, position?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_filter_get_type(): GType {
    return kniBridge4216()
}

fun gtk_tree_model_filter_new(child_model: CValuesRef<GtkTreeModel>?, root: CValuesRef<GtkTreePath>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge4217(child_model?.getPointer(memScope).rawValue, root?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_filter_set_visible_func(filter: CValuesRef<GtkTreeModelFilter>?, func: GtkTreeModelFilterVisibleFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4218(filter?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_model_filter_set_modify_func(filter: CValuesRef<GtkTreeModelFilter>?, n_columns: gint, types: CValuesRef<GTypeVar>?, func: GtkTreeModelFilterModifyFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4219(filter?.getPointer(memScope).rawValue, n_columns, types?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_model_filter_set_visible_column(filter: CValuesRef<GtkTreeModelFilter>?, column: gint): Unit {
    memScoped {
        return kniBridge4220(filter?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_tree_model_filter_get_model(filter: CValuesRef<GtkTreeModelFilter>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge4221(filter?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_filter_convert_child_iter_to_iter(filter: CValuesRef<GtkTreeModelFilter>?, filter_iter: CValuesRef<GtkTreeIter>?, child_iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge4222(filter?.getPointer(memScope).rawValue, filter_iter?.getPointer(memScope).rawValue, child_iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_filter_convert_iter_to_child_iter(filter: CValuesRef<GtkTreeModelFilter>?, child_iter: CValuesRef<GtkTreeIter>?, filter_iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4223(filter?.getPointer(memScope).rawValue, child_iter?.getPointer(memScope).rawValue, filter_iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_filter_convert_child_path_to_path(filter: CValuesRef<GtkTreeModelFilter>?, child_path: CValuesRef<GtkTreePath>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge4224(filter?.getPointer(memScope).rawValue, child_path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_filter_convert_path_to_child_path(filter: CValuesRef<GtkTreeModelFilter>?, filter_path: CValuesRef<GtkTreePath>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge4225(filter?.getPointer(memScope).rawValue, filter_path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_filter_refilter(filter: CValuesRef<GtkTreeModelFilter>?): Unit {
    memScoped {
        return kniBridge4226(filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_filter_clear_cache(filter: CValuesRef<GtkTreeModelFilter>?): Unit {
    memScoped {
        return kniBridge4227(filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_get_type(): GType {
    return kniBridge4228()
}

fun gtk_entry_completion_new(): CPointer<GtkEntryCompletion>? {
    return interpretCPointer<GtkEntryCompletion>(kniBridge4229())
}

fun gtk_entry_completion_new_with_area(area: CValuesRef<GtkCellArea>?): CPointer<GtkEntryCompletion>? {
    memScoped {
        return interpretCPointer<GtkEntryCompletion>(kniBridge4230(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_completion_get_entry(completion: CValuesRef<GtkEntryCompletion>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4231(completion?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_completion_set_model(completion: CValuesRef<GtkEntryCompletion>?, model: CValuesRef<GtkTreeModel>?): Unit {
    memScoped {
        return kniBridge4232(completion?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_get_model(completion: CValuesRef<GtkEntryCompletion>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge4233(completion?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_completion_set_match_func(completion: CValuesRef<GtkEntryCompletion>?, func: GtkEntryCompletionMatchFunc?, func_data: gpointer?, func_notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4234(completion?.getPointer(memScope).rawValue, func.rawValue, func_data.rawValue, func_notify.rawValue)
    }
}

fun gtk_entry_completion_set_minimum_key_length(completion: CValuesRef<GtkEntryCompletion>?, length: gint): Unit {
    memScoped {
        return kniBridge4235(completion?.getPointer(memScope).rawValue, length)
    }
}

fun gtk_entry_completion_get_minimum_key_length(completion: CValuesRef<GtkEntryCompletion>?): gint {
    memScoped {
        return kniBridge4236(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_compute_prefix(completion: CValuesRef<GtkEntryCompletion>?, @CCall.CString key: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4237(completion?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_completion_complete(completion: CValuesRef<GtkEntryCompletion>?): Unit {
    memScoped {
        return kniBridge4238(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_insert_prefix(completion: CValuesRef<GtkEntryCompletion>?): Unit {
    memScoped {
        return kniBridge4239(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_insert_action_text(completion: CValuesRef<GtkEntryCompletion>?, index_: gint, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4240(completion?.getPointer(memScope).rawValue, index_, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_insert_action_markup(completion: CValuesRef<GtkEntryCompletion>?, index_: gint, @CCall.CString markup: String?): Unit {
    memScoped {
        return kniBridge4241(completion?.getPointer(memScope).rawValue, index_, markup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_delete_action(completion: CValuesRef<GtkEntryCompletion>?, index_: gint): Unit {
    memScoped {
        return kniBridge4242(completion?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_entry_completion_set_inline_completion(completion: CValuesRef<GtkEntryCompletion>?, inline_completion: gboolean): Unit {
    memScoped {
        return kniBridge4243(completion?.getPointer(memScope).rawValue, inline_completion)
    }
}

fun gtk_entry_completion_get_inline_completion(completion: CValuesRef<GtkEntryCompletion>?): gboolean {
    memScoped {
        return kniBridge4244(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_set_inline_selection(completion: CValuesRef<GtkEntryCompletion>?, inline_selection: gboolean): Unit {
    memScoped {
        return kniBridge4245(completion?.getPointer(memScope).rawValue, inline_selection)
    }
}

fun gtk_entry_completion_get_inline_selection(completion: CValuesRef<GtkEntryCompletion>?): gboolean {
    memScoped {
        return kniBridge4246(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_set_popup_completion(completion: CValuesRef<GtkEntryCompletion>?, popup_completion: gboolean): Unit {
    memScoped {
        return kniBridge4247(completion?.getPointer(memScope).rawValue, popup_completion)
    }
}

fun gtk_entry_completion_get_popup_completion(completion: CValuesRef<GtkEntryCompletion>?): gboolean {
    memScoped {
        return kniBridge4248(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_set_popup_set_width(completion: CValuesRef<GtkEntryCompletion>?, popup_set_width: gboolean): Unit {
    memScoped {
        return kniBridge4249(completion?.getPointer(memScope).rawValue, popup_set_width)
    }
}

fun gtk_entry_completion_get_popup_set_width(completion: CValuesRef<GtkEntryCompletion>?): gboolean {
    memScoped {
        return kniBridge4250(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_set_popup_single_match(completion: CValuesRef<GtkEntryCompletion>?, popup_single_match: gboolean): Unit {
    memScoped {
        return kniBridge4251(completion?.getPointer(memScope).rawValue, popup_single_match)
    }
}

fun gtk_entry_completion_get_popup_single_match(completion: CValuesRef<GtkEntryCompletion>?): gboolean {
    memScoped {
        return kniBridge4252(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_completion_get_completion_prefix(completion: CValuesRef<GtkEntryCompletion>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4253(completion?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_completion_set_text_column(completion: CValuesRef<GtkEntryCompletion>?, column: gint): Unit {
    memScoped {
        return kniBridge4254(completion?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_entry_completion_get_text_column(completion: CValuesRef<GtkEntryCompletion>?): gint {
    memScoped {
        return kniBridge4255(completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_get_type(): GType {
    return kniBridge4256()
}

fun gtk_image_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4257())
}

fun gtk_image_new_from_file(@CCall.CString filename: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4258(filename?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_new_from_resource(@CCall.CString resource_path: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4259(resource_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_new_from_pixbuf(pixbuf: CValuesRef<GdkPixbuf>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4260(pixbuf?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_new_from_stock(@CCall.CString stock_id: String?, size: GtkIconSize): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4261(stock_id?.cstr?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_image_new_from_icon_set(icon_set: CValuesRef<GtkIconSet>?, size: GtkIconSize): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4262(icon_set?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_image_new_from_animation(animation: CValuesRef<GdkPixbufAnimation>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4263(animation?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_new_from_icon_name(@CCall.CString icon_name: String?, size: GtkIconSize): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4264(icon_name?.cstr?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_image_new_from_gicon(icon: CValuesRef<GIcon>?, size: GtkIconSize): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4265(icon?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_image_new_from_surface(surface: CValuesRef<cairo_surface_t>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4266(surface?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_clear(image: CValuesRef<GtkImage>?): Unit {
    memScoped {
        return kniBridge4267(image?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_set_from_file(image: CValuesRef<GtkImage>?, @CCall.CString filename: String?): Unit {
    memScoped {
        return kniBridge4268(image?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_set_from_resource(image: CValuesRef<GtkImage>?, @CCall.CString resource_path: String?): Unit {
    memScoped {
        return kniBridge4269(image?.getPointer(memScope).rawValue, resource_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_set_from_pixbuf(image: CValuesRef<GtkImage>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge4270(image?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_set_from_stock(image: CValuesRef<GtkImage>?, @CCall.CString stock_id: String?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge4271(image?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_image_set_from_icon_set(image: CValuesRef<GtkImage>?, icon_set: CValuesRef<GtkIconSet>?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge4272(image?.getPointer(memScope).rawValue, icon_set?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_image_set_from_animation(image: CValuesRef<GtkImage>?, animation: CValuesRef<GdkPixbufAnimation>?): Unit {
    memScoped {
        return kniBridge4273(image?.getPointer(memScope).rawValue, animation?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_set_from_icon_name(image: CValuesRef<GtkImage>?, @CCall.CString icon_name: String?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge4274(image?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_image_set_from_gicon(image: CValuesRef<GtkImage>?, icon: CValuesRef<GIcon>?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge4275(image?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_image_set_from_surface(image: CValuesRef<GtkImage>?, surface: CValuesRef<cairo_surface_t>?): Unit {
    memScoped {
        return kniBridge4276(image?.getPointer(memScope).rawValue, surface?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_set_pixel_size(image: CValuesRef<GtkImage>?, pixel_size: gint): Unit {
    memScoped {
        return kniBridge4277(image?.getPointer(memScope).rawValue, pixel_size)
    }
}

fun gtk_image_get_storage_type(image: CValuesRef<GtkImage>?): GtkImageType {
    memScoped {
        return GtkImageType.byValue(kniBridge4278(image?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_get_pixbuf(image: CValuesRef<GtkImage>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4279(image?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_get_stock(image: CValuesRef<GtkImage>?, stock_id: CValuesRef<CPointerVar<gcharVar>>?, size: CValuesRef<GtkIconSize.Var>?): Unit {
    memScoped {
        return kniBridge4280(image?.getPointer(memScope).rawValue, stock_id?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_get_icon_set(image: CValuesRef<GtkImage>?, icon_set: CValuesRef<CPointerVar<GtkIconSet>>?, size: CValuesRef<GtkIconSize.Var>?): Unit {
    memScoped {
        return kniBridge4281(image?.getPointer(memScope).rawValue, icon_set?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_get_animation(image: CValuesRef<GtkImage>?): CPointer<GdkPixbufAnimation>? {
    memScoped {
        return interpretCPointer<GdkPixbufAnimation>(kniBridge4282(image?.getPointer(memScope).rawValue))
    }
}

fun gtk_image_get_icon_name(image: CValuesRef<GtkImage>?, icon_name: CValuesRef<CPointerVar<gcharVar>>?, size: CValuesRef<GtkIconSize.Var>?): Unit {
    memScoped {
        return kniBridge4283(image?.getPointer(memScope).rawValue, icon_name?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_get_gicon(image: CValuesRef<GtkImage>?, gicon: CValuesRef<CPointerVar<GIcon>>?, size: CValuesRef<GtkIconSize.Var>?): Unit {
    memScoped {
        return kniBridge4284(image?.getPointer(memScope).rawValue, gicon?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue)
    }
}

fun gtk_image_get_pixel_size(image: CValuesRef<GtkImage>?): gint {
    memScoped {
        return kniBridge4285(image?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_type(): GType {
    return kniBridge4286()
}

fun gtk_entry_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4287())
}

fun gtk_entry_new_with_buffer(buffer: CValuesRef<GtkEntryBuffer>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4288(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_get_buffer(entry: CValuesRef<GtkEntry>?): CPointer<GtkEntryBuffer>? {
    memScoped {
        return interpretCPointer<GtkEntryBuffer>(kniBridge4289(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_set_buffer(entry: CValuesRef<GtkEntry>?, buffer: CValuesRef<GtkEntryBuffer>?): Unit {
    memScoped {
        return kniBridge4290(entry?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_text_area(entry: CValuesRef<GtkEntry>?, text_area: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge4291(entry?.getPointer(memScope).rawValue, text_area?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_visibility(entry: CValuesRef<GtkEntry>?, visible: gboolean): Unit {
    memScoped {
        return kniBridge4292(entry?.getPointer(memScope).rawValue, visible)
    }
}

fun gtk_entry_get_visibility(entry: CValuesRef<GtkEntry>?): gboolean {
    memScoped {
        return kniBridge4293(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_invisible_char(entry: CValuesRef<GtkEntry>?, ch: gunichar): Unit {
    memScoped {
        return kniBridge4294(entry?.getPointer(memScope).rawValue, ch)
    }
}

fun gtk_entry_get_invisible_char(entry: CValuesRef<GtkEntry>?): gunichar {
    memScoped {
        return kniBridge4295(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_unset_invisible_char(entry: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge4296(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_has_frame(entry: CValuesRef<GtkEntry>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4297(entry?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_entry_get_has_frame(entry: CValuesRef<GtkEntry>?): gboolean {
    memScoped {
        return kniBridge4298(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_inner_border(entry: CValuesRef<GtkEntry>?, border: CValuesRef<GtkBorder>?): Unit {
    memScoped {
        return kniBridge4299(entry?.getPointer(memScope).rawValue, border?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_inner_border(entry: CValuesRef<GtkEntry>?): CPointer<GtkBorder>? {
    memScoped {
        return interpretCPointer<GtkBorder>(kniBridge4300(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_set_overwrite_mode(entry: CValuesRef<GtkEntry>?, overwrite: gboolean): Unit {
    memScoped {
        return kniBridge4301(entry?.getPointer(memScope).rawValue, overwrite)
    }
}

fun gtk_entry_get_overwrite_mode(entry: CValuesRef<GtkEntry>?): gboolean {
    memScoped {
        return kniBridge4302(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_max_length(entry: CValuesRef<GtkEntry>?, max: gint): Unit {
    memScoped {
        return kniBridge4303(entry?.getPointer(memScope).rawValue, max)
    }
}

fun gtk_entry_get_max_length(entry: CValuesRef<GtkEntry>?): gint {
    memScoped {
        return kniBridge4304(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_text_length(entry: CValuesRef<GtkEntry>?): guint16 {
    memScoped {
        return kniBridge4305(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_activates_default(entry: CValuesRef<GtkEntry>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4306(entry?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_entry_get_activates_default(entry: CValuesRef<GtkEntry>?): gboolean {
    memScoped {
        return kniBridge4307(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_width_chars(entry: CValuesRef<GtkEntry>?, n_chars: gint): Unit {
    memScoped {
        return kniBridge4308(entry?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_entry_get_width_chars(entry: CValuesRef<GtkEntry>?): gint {
    memScoped {
        return kniBridge4309(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_max_width_chars(entry: CValuesRef<GtkEntry>?, n_chars: gint): Unit {
    memScoped {
        return kniBridge4310(entry?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_entry_get_max_width_chars(entry: CValuesRef<GtkEntry>?): gint {
    memScoped {
        return kniBridge4311(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_text(entry: CValuesRef<GtkEntry>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4312(entry?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_text(entry: CValuesRef<GtkEntry>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4313(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_get_layout(entry: CValuesRef<GtkEntry>?): CPointer<PangoLayout>? {
    memScoped {
        return interpretCPointer<PangoLayout>(kniBridge4314(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_get_layout_offsets(entry: CValuesRef<GtkEntry>?, x: CValuesRef<gintVar>?, y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4315(entry?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_alignment(entry: CValuesRef<GtkEntry>?, xalign: gfloat): Unit {
    memScoped {
        return kniBridge4316(entry?.getPointer(memScope).rawValue, xalign)
    }
}

fun gtk_entry_get_alignment(entry: CValuesRef<GtkEntry>?): gfloat {
    memScoped {
        return kniBridge4317(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_completion(entry: CValuesRef<GtkEntry>?, completion: CValuesRef<GtkEntryCompletion>?): Unit {
    memScoped {
        return kniBridge4318(entry?.getPointer(memScope).rawValue, completion?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_completion(entry: CValuesRef<GtkEntry>?): CPointer<GtkEntryCompletion>? {
    memScoped {
        return interpretCPointer<GtkEntryCompletion>(kniBridge4319(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_layout_index_to_text_index(entry: CValuesRef<GtkEntry>?, layout_index: gint): gint {
    memScoped {
        return kniBridge4320(entry?.getPointer(memScope).rawValue, layout_index)
    }
}

fun gtk_entry_text_index_to_layout_index(entry: CValuesRef<GtkEntry>?, text_index: gint): gint {
    memScoped {
        return kniBridge4321(entry?.getPointer(memScope).rawValue, text_index)
    }
}

fun gtk_entry_set_cursor_hadjustment(entry: CValuesRef<GtkEntry>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge4322(entry?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_cursor_hadjustment(entry: CValuesRef<GtkEntry>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge4323(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_set_progress_fraction(entry: CValuesRef<GtkEntry>?, fraction: gdouble): Unit {
    memScoped {
        return kniBridge4324(entry?.getPointer(memScope).rawValue, fraction)
    }
}

fun gtk_entry_get_progress_fraction(entry: CValuesRef<GtkEntry>?): gdouble {
    memScoped {
        return kniBridge4325(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_progress_pulse_step(entry: CValuesRef<GtkEntry>?, fraction: gdouble): Unit {
    memScoped {
        return kniBridge4326(entry?.getPointer(memScope).rawValue, fraction)
    }
}

fun gtk_entry_get_progress_pulse_step(entry: CValuesRef<GtkEntry>?): gdouble {
    memScoped {
        return kniBridge4327(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_progress_pulse(entry: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge4328(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_placeholder_text(entry: CValuesRef<GtkEntry>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4329(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_set_placeholder_text(entry: CValuesRef<GtkEntry>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4330(entry?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_icon_from_pixbuf(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge4331(entry?.getPointer(memScope).rawValue, icon_pos.value, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_icon_from_stock(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, @CCall.CString stock_id: String?): Unit {
    memScoped {
        return kniBridge4332(entry?.getPointer(memScope).rawValue, icon_pos.value, stock_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_icon_from_icon_name(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, @CCall.CString icon_name: String?): Unit {
    memScoped {
        return kniBridge4333(entry?.getPointer(memScope).rawValue, icon_pos.value, icon_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_icon_from_gicon(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge4334(entry?.getPointer(memScope).rawValue, icon_pos.value, icon?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_icon_storage_type(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): GtkImageType {
    memScoped {
        return GtkImageType.byValue(kniBridge4335(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_get_icon_pixbuf(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4336(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_get_icon_stock(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4337(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_get_icon_name(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4338(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_get_icon_gicon(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge4339(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_set_icon_activatable(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, activatable: gboolean): Unit {
    memScoped {
        return kniBridge4340(entry?.getPointer(memScope).rawValue, icon_pos.value, activatable)
    }
}

fun gtk_entry_get_icon_activatable(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): gboolean {
    memScoped {
        return kniBridge4341(entry?.getPointer(memScope).rawValue, icon_pos.value)
    }
}

fun gtk_entry_set_icon_sensitive(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, sensitive: gboolean): Unit {
    memScoped {
        return kniBridge4342(entry?.getPointer(memScope).rawValue, icon_pos.value, sensitive)
    }
}

fun gtk_entry_get_icon_sensitive(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): gboolean {
    memScoped {
        return kniBridge4343(entry?.getPointer(memScope).rawValue, icon_pos.value)
    }
}

fun gtk_entry_get_icon_at_pos(entry: CValuesRef<GtkEntry>?, x: gint, y: gint): gint {
    memScoped {
        return kniBridge4344(entry?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_entry_set_icon_tooltip_text(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, @CCall.CString tooltip: String?): Unit {
    memScoped {
        return kniBridge4345(entry?.getPointer(memScope).rawValue, icon_pos.value, tooltip?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_icon_tooltip_text(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4346(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_set_icon_tooltip_markup(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, @CCall.CString tooltip: String?): Unit {
    memScoped {
        return kniBridge4347(entry?.getPointer(memScope).rawValue, icon_pos.value, tooltip?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_icon_tooltip_markup(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4348(entry?.getPointer(memScope).rawValue, icon_pos.value))
    }
}

fun gtk_entry_set_icon_drag_source(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, target_list: CValuesRef<GtkTargetList>?, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge4349(entry?.getPointer(memScope).rawValue, icon_pos.value, target_list?.getPointer(memScope).rawValue, actions)
    }
}

fun gtk_entry_get_current_icon_drag_source(entry: CValuesRef<GtkEntry>?): gint {
    memScoped {
        return kniBridge4350(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_icon_area(entry: CValuesRef<GtkEntry>?, icon_pos: GtkEntryIconPosition, icon_area: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge4351(entry?.getPointer(memScope).rawValue, icon_pos.value, icon_area?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_im_context_filter_keypress(entry: CValuesRef<GtkEntry>?, event: CValuesRef<GdkEventKey>?): gboolean {
    memScoped {
        return kniBridge4352(entry?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_reset_im_context(entry: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge4353(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_input_purpose(entry: CValuesRef<GtkEntry>?, purpose: GtkInputPurpose): Unit {
    memScoped {
        return kniBridge4354(entry?.getPointer(memScope).rawValue, purpose.value)
    }
}

fun gtk_entry_get_input_purpose(entry: CValuesRef<GtkEntry>?): GtkInputPurpose {
    memScoped {
        return GtkInputPurpose.byValue(kniBridge4355(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_set_input_hints(entry: CValuesRef<GtkEntry>?, hints: GtkInputHints): Unit {
    memScoped {
        return kniBridge4356(entry?.getPointer(memScope).rawValue, hints)
    }
}

fun gtk_entry_get_input_hints(entry: CValuesRef<GtkEntry>?): GtkInputHints {
    memScoped {
        return kniBridge4357(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_set_attributes(entry: CValuesRef<GtkEntry>?, attrs: CValuesRef<PangoAttrList>?): Unit {
    memScoped {
        return kniBridge4358(entry?.getPointer(memScope).rawValue, attrs?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_attributes(entry: CValuesRef<GtkEntry>?): CPointer<PangoAttrList>? {
    memScoped {
        return interpretCPointer<PangoAttrList>(kniBridge4359(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_set_tabs(entry: CValuesRef<GtkEntry>?, tabs: CValuesRef<PangoTabArray>?): Unit {
    memScoped {
        return kniBridge4360(entry?.getPointer(memScope).rawValue, tabs?.getPointer(memScope).rawValue)
    }
}

fun gtk_entry_get_tabs(entry: CValuesRef<GtkEntry>?): CPointer<PangoTabArray>? {
    memScoped {
        return interpretCPointer<PangoTabArray>(kniBridge4361(entry?.getPointer(memScope).rawValue))
    }
}

fun gtk_entry_grab_focus_without_selecting(entry: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge4362(entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_type(): GType {
    return kniBridge4363()
}

fun gtk_tree_view_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4364())
}

fun gtk_tree_view_new_with_model(model: CValuesRef<GtkTreeModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4365(model?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_get_model(tree_view: CValuesRef<GtkTreeView>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge4366(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_model(tree_view: CValuesRef<GtkTreeView>?, model: CValuesRef<GtkTreeModel>?): Unit {
    memScoped {
        return kniBridge4367(tree_view?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_selection(tree_view: CValuesRef<GtkTreeView>?): CPointer<GtkTreeSelection>? {
    memScoped {
        return interpretCPointer<GtkTreeSelection>(kniBridge4368(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_get_hadjustment(tree_view: CValuesRef<GtkTreeView>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge4369(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_hadjustment(tree_view: CValuesRef<GtkTreeView>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge4370(tree_view?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_vadjustment(tree_view: CValuesRef<GtkTreeView>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge4371(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_vadjustment(tree_view: CValuesRef<GtkTreeView>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge4372(tree_view?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_headers_visible(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4373(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_headers_visible(tree_view: CValuesRef<GtkTreeView>?, headers_visible: gboolean): Unit {
    memScoped {
        return kniBridge4374(tree_view?.getPointer(memScope).rawValue, headers_visible)
    }
}

fun gtk_tree_view_columns_autosize(tree_view: CValuesRef<GtkTreeView>?): Unit {
    memScoped {
        return kniBridge4375(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_headers_clickable(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4376(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_headers_clickable(tree_view: CValuesRef<GtkTreeView>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4377(tree_view?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_tree_view_set_rules_hint(tree_view: CValuesRef<GtkTreeView>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4378(tree_view?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_tree_view_get_rules_hint(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4379(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_activate_on_single_click(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4380(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_activate_on_single_click(tree_view: CValuesRef<GtkTreeView>?, single: gboolean): Unit {
    memScoped {
        return kniBridge4381(tree_view?.getPointer(memScope).rawValue, single)
    }
}

fun gtk_tree_view_append_column(tree_view: CValuesRef<GtkTreeView>?, column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge4382(tree_view?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_remove_column(tree_view: CValuesRef<GtkTreeView>?, column: CValuesRef<GtkTreeViewColumn>?): gint {
    memScoped {
        return kniBridge4383(tree_view?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_insert_column(tree_view: CValuesRef<GtkTreeView>?, column: CValuesRef<GtkTreeViewColumn>?, position: gint): gint {
    memScoped {
        return kniBridge4384(tree_view?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, position)
    }
}

@CCall("knifunptr_libgtk354")
external fun gtk_tree_view_insert_column_with_attributes(tree_view: CValuesRef<GtkTreeView>?, position: gint, @CCall.CString title: String?, cell: CValuesRef<GtkCellRenderer>?, vararg variadicArguments: Any?): gint

fun gtk_tree_view_insert_column_with_data_func(tree_view: CValuesRef<GtkTreeView>?, position: gint, @CCall.CString title: String?, cell: CValuesRef<GtkCellRenderer>?, func: GtkTreeCellDataFunc?, data: gpointer?, dnotify: GDestroyNotify?): gint {
    memScoped {
        return kniBridge4385(tree_view?.getPointer(memScope).rawValue, position, title?.cstr?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, dnotify.rawValue)
    }
}

fun gtk_tree_view_get_n_columns(tree_view: CValuesRef<GtkTreeView>?): guint {
    memScoped {
        return kniBridge4386(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_column(tree_view: CValuesRef<GtkTreeView>?, n: gint): CPointer<GtkTreeViewColumn>? {
    memScoped {
        return interpretCPointer<GtkTreeViewColumn>(kniBridge4387(tree_view?.getPointer(memScope).rawValue, n))
    }
}

fun gtk_tree_view_get_columns(tree_view: CValuesRef<GtkTreeView>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge4388(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_move_column_after(tree_view: CValuesRef<GtkTreeView>?, column: CValuesRef<GtkTreeViewColumn>?, base_column: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge4389(tree_view?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, base_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_expander_column(tree_view: CValuesRef<GtkTreeView>?, column: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge4390(tree_view?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_expander_column(tree_view: CValuesRef<GtkTreeView>?): CPointer<GtkTreeViewColumn>? {
    memScoped {
        return interpretCPointer<GtkTreeViewColumn>(kniBridge4391(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_column_drag_function(tree_view: CValuesRef<GtkTreeView>?, func: GtkTreeViewColumnDropFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4392(tree_view?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_view_scroll_to_point(tree_view: CValuesRef<GtkTreeView>?, tree_x: gint, tree_y: gint): Unit {
    memScoped {
        return kniBridge4393(tree_view?.getPointer(memScope).rawValue, tree_x, tree_y)
    }
}

fun gtk_tree_view_scroll_to_cell(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, column: CValuesRef<GtkTreeViewColumn>?, use_align: gboolean, row_align: gfloat, col_align: gfloat): Unit {
    memScoped {
        return kniBridge4394(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, use_align, row_align, col_align)
    }
}

fun gtk_tree_view_row_activated(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, column: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge4395(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_expand_all(tree_view: CValuesRef<GtkTreeView>?): Unit {
    memScoped {
        return kniBridge4396(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_collapse_all(tree_view: CValuesRef<GtkTreeView>?): Unit {
    memScoped {
        return kniBridge4397(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_expand_to_path(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge4398(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_expand_row(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, open_all: gboolean): gboolean {
    memScoped {
        return kniBridge4399(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, open_all)
    }
}

fun gtk_tree_view_collapse_row(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge4400(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_map_expanded_rows(tree_view: CValuesRef<GtkTreeView>?, func: GtkTreeViewMappingFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge4401(tree_view?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun gtk_tree_view_row_expanded(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge4402(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_reorderable(tree_view: CValuesRef<GtkTreeView>?, reorderable: gboolean): Unit {
    memScoped {
        return kniBridge4403(tree_view?.getPointer(memScope).rawValue, reorderable)
    }
}

fun gtk_tree_view_get_reorderable(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4404(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_cursor(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, focus_column: CValuesRef<GtkTreeViewColumn>?, start_editing: gboolean): Unit {
    memScoped {
        return kniBridge4405(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, focus_column?.getPointer(memScope).rawValue, start_editing)
    }
}

fun gtk_tree_view_set_cursor_on_cell(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, focus_column: CValuesRef<GtkTreeViewColumn>?, focus_cell: CValuesRef<GtkCellRenderer>?, start_editing: gboolean): Unit {
    memScoped {
        return kniBridge4406(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, focus_column?.getPointer(memScope).rawValue, focus_cell?.getPointer(memScope).rawValue, start_editing)
    }
}

fun gtk_tree_view_get_cursor(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<CPointerVar<GtkTreePath>>?, focus_column: CValuesRef<CPointerVar<GtkTreeViewColumn>>?): Unit {
    memScoped {
        return kniBridge4407(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, focus_column?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_bin_window(tree_view: CValuesRef<GtkTreeView>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge4408(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_get_path_at_pos(tree_view: CValuesRef<GtkTreeView>?, x: gint, y: gint, path: CValuesRef<CPointerVar<GtkTreePath>>?, column: CValuesRef<CPointerVar<GtkTreeViewColumn>>?, cell_x: CValuesRef<gintVar>?, cell_y: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge4409(tree_view?.getPointer(memScope).rawValue, x, y, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, cell_x?.getPointer(memScope).rawValue, cell_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_cell_area(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, column: CValuesRef<GtkTreeViewColumn>?, rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge4410(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_background_area(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, column: CValuesRef<GtkTreeViewColumn>?, rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge4411(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_visible_rect(tree_view: CValuesRef<GtkTreeView>?, visible_rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge4412(tree_view?.getPointer(memScope).rawValue, visible_rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_visible_range(tree_view: CValuesRef<GtkTreeView>?, start_path: CValuesRef<CPointerVar<GtkTreePath>>?, end_path: CValuesRef<CPointerVar<GtkTreePath>>?): gboolean {
    memScoped {
        return kniBridge4413(tree_view?.getPointer(memScope).rawValue, start_path?.getPointer(memScope).rawValue, end_path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_is_blank_at_pos(tree_view: CValuesRef<GtkTreeView>?, x: gint, y: gint, path: CValuesRef<CPointerVar<GtkTreePath>>?, column: CValuesRef<CPointerVar<GtkTreeViewColumn>>?, cell_x: CValuesRef<gintVar>?, cell_y: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge4414(tree_view?.getPointer(memScope).rawValue, x, y, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, cell_x?.getPointer(memScope).rawValue, cell_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_enable_model_drag_source(tree_view: CValuesRef<GtkTreeView>?, start_button_mask: GdkModifierType, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge4415(tree_view?.getPointer(memScope).rawValue, start_button_mask, targets?.getPointer(memScope).rawValue, n_targets, actions)
    }
}

fun gtk_tree_view_enable_model_drag_dest(tree_view: CValuesRef<GtkTreeView>?, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge4416(tree_view?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_targets, actions)
    }
}

fun gtk_tree_view_unset_rows_drag_source(tree_view: CValuesRef<GtkTreeView>?): Unit {
    memScoped {
        return kniBridge4417(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_unset_rows_drag_dest(tree_view: CValuesRef<GtkTreeView>?): Unit {
    memScoped {
        return kniBridge4418(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_drag_dest_row(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?, pos: GtkTreeViewDropPosition): Unit {
    memScoped {
        return kniBridge4419(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, pos.value)
    }
}

fun gtk_tree_view_get_drag_dest_row(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<CPointerVar<GtkTreePath>>?, pos: CValuesRef<GtkTreeViewDropPosition.Var>?): Unit {
    memScoped {
        return kniBridge4420(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, pos?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_dest_row_at_pos(tree_view: CValuesRef<GtkTreeView>?, drag_x: gint, drag_y: gint, path: CValuesRef<CPointerVar<GtkTreePath>>?, pos: CValuesRef<GtkTreeViewDropPosition.Var>?): gboolean {
    memScoped {
        return kniBridge4421(tree_view?.getPointer(memScope).rawValue, drag_x, drag_y, path?.getPointer(memScope).rawValue, pos?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_create_row_drag_icon(tree_view: CValuesRef<GtkTreeView>?, path: CValuesRef<GtkTreePath>?): CPointer<cairo_surface_t>? {
    memScoped {
        return interpretCPointer<cairo_surface_t>(kniBridge4422(tree_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_enable_search(tree_view: CValuesRef<GtkTreeView>?, enable_search: gboolean): Unit {
    memScoped {
        return kniBridge4423(tree_view?.getPointer(memScope).rawValue, enable_search)
    }
}

fun gtk_tree_view_get_enable_search(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4424(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_search_column(tree_view: CValuesRef<GtkTreeView>?): gint {
    memScoped {
        return kniBridge4425(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_search_column(tree_view: CValuesRef<GtkTreeView>?, column: gint): Unit {
    memScoped {
        return kniBridge4426(tree_view?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_tree_view_get_search_equal_func(tree_view: CValuesRef<GtkTreeView>?): GtkTreeViewSearchEqualFunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<GtkTreeModel>?, gint, CPointer<gcharVar>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>(kniBridge4427(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_search_equal_func(tree_view: CValuesRef<GtkTreeView>?, search_equal_func: GtkTreeViewSearchEqualFunc?, search_user_data: gpointer?, search_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4428(tree_view?.getPointer(memScope).rawValue, search_equal_func.rawValue, search_user_data.rawValue, search_destroy.rawValue)
    }
}

fun gtk_tree_view_get_search_entry(tree_view: CValuesRef<GtkTreeView>?): CPointer<GtkEntry>? {
    memScoped {
        return interpretCPointer<GtkEntry>(kniBridge4429(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_search_entry(tree_view: CValuesRef<GtkTreeView>?, entry: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge4430(tree_view?.getPointer(memScope).rawValue, entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_search_position_func(tree_view: CValuesRef<GtkTreeView>?): GtkTreeViewSearchPositionFunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkWidget>?, gpointer?) -> Unit>>(kniBridge4431(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_search_position_func(tree_view: CValuesRef<GtkTreeView>?, func: GtkTreeViewSearchPositionFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4432(tree_view?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_view_convert_widget_to_tree_coords(tree_view: CValuesRef<GtkTreeView>?, wx: gint, wy: gint, tx: CValuesRef<gintVar>?, ty: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4433(tree_view?.getPointer(memScope).rawValue, wx, wy, tx?.getPointer(memScope).rawValue, ty?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_convert_tree_to_widget_coords(tree_view: CValuesRef<GtkTreeView>?, tx: gint, ty: gint, wx: CValuesRef<gintVar>?, wy: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4434(tree_view?.getPointer(memScope).rawValue, tx, ty, wx?.getPointer(memScope).rawValue, wy?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_convert_widget_to_bin_window_coords(tree_view: CValuesRef<GtkTreeView>?, wx: gint, wy: gint, bx: CValuesRef<gintVar>?, by: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4435(tree_view?.getPointer(memScope).rawValue, wx, wy, bx?.getPointer(memScope).rawValue, by?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_convert_bin_window_to_widget_coords(tree_view: CValuesRef<GtkTreeView>?, bx: gint, by: gint, wx: CValuesRef<gintVar>?, wy: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4436(tree_view?.getPointer(memScope).rawValue, bx, by, wx?.getPointer(memScope).rawValue, wy?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_convert_tree_to_bin_window_coords(tree_view: CValuesRef<GtkTreeView>?, tx: gint, ty: gint, bx: CValuesRef<gintVar>?, by: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4437(tree_view?.getPointer(memScope).rawValue, tx, ty, bx?.getPointer(memScope).rawValue, by?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_convert_bin_window_to_tree_coords(tree_view: CValuesRef<GtkTreeView>?, bx: gint, by: gint, tx: CValuesRef<gintVar>?, ty: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4438(tree_view?.getPointer(memScope).rawValue, bx, by, tx?.getPointer(memScope).rawValue, ty?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_destroy_count_func(tree_view: CValuesRef<GtkTreeView>?, func: GtkTreeDestroyCountFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4439(tree_view?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_view_set_fixed_height_mode(tree_view: CValuesRef<GtkTreeView>?, enable: gboolean): Unit {
    memScoped {
        return kniBridge4440(tree_view?.getPointer(memScope).rawValue, enable)
    }
}

fun gtk_tree_view_get_fixed_height_mode(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4441(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_hover_selection(tree_view: CValuesRef<GtkTreeView>?, hover: gboolean): Unit {
    memScoped {
        return kniBridge4442(tree_view?.getPointer(memScope).rawValue, hover)
    }
}

fun gtk_tree_view_get_hover_selection(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4443(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_hover_expand(tree_view: CValuesRef<GtkTreeView>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge4444(tree_view?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_tree_view_get_hover_expand(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4445(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_rubber_banding(tree_view: CValuesRef<GtkTreeView>?, enable: gboolean): Unit {
    memScoped {
        return kniBridge4446(tree_view?.getPointer(memScope).rawValue, enable)
    }
}

fun gtk_tree_view_get_rubber_banding(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4447(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_is_rubber_banding_active(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4448(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_row_separator_func(tree_view: CValuesRef<GtkTreeView>?): GtkTreeViewRowSeparatorFunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>(kniBridge4449(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_row_separator_func(tree_view: CValuesRef<GtkTreeView>?, func: GtkTreeViewRowSeparatorFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4450(tree_view?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_view_get_grid_lines(tree_view: CValuesRef<GtkTreeView>?): GtkTreeViewGridLines {
    memScoped {
        return GtkTreeViewGridLines.byValue(kniBridge4451(tree_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_view_set_grid_lines(tree_view: CValuesRef<GtkTreeView>?, grid_lines: GtkTreeViewGridLines): Unit {
    memScoped {
        return kniBridge4452(tree_view?.getPointer(memScope).rawValue, grid_lines.value)
    }
}

fun gtk_tree_view_get_enable_tree_lines(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4453(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_enable_tree_lines(tree_view: CValuesRef<GtkTreeView>?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge4454(tree_view?.getPointer(memScope).rawValue, enabled)
    }
}

fun gtk_tree_view_set_show_expanders(tree_view: CValuesRef<GtkTreeView>?, enabled: gboolean): Unit {
    memScoped {
        return kniBridge4455(tree_view?.getPointer(memScope).rawValue, enabled)
    }
}

fun gtk_tree_view_get_show_expanders(tree_view: CValuesRef<GtkTreeView>?): gboolean {
    memScoped {
        return kniBridge4456(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_level_indentation(tree_view: CValuesRef<GtkTreeView>?, indentation: gint): Unit {
    memScoped {
        return kniBridge4457(tree_view?.getPointer(memScope).rawValue, indentation)
    }
}

fun gtk_tree_view_get_level_indentation(tree_view: CValuesRef<GtkTreeView>?): gint {
    memScoped {
        return kniBridge4458(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_tooltip_row(tree_view: CValuesRef<GtkTreeView>?, tooltip: CValuesRef<GtkTooltip>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge4459(tree_view?.getPointer(memScope).rawValue, tooltip?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_tooltip_cell(tree_view: CValuesRef<GtkTreeView>?, tooltip: CValuesRef<GtkTooltip>?, path: CValuesRef<GtkTreePath>?, column: CValuesRef<GtkTreeViewColumn>?, cell: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge4460(tree_view?.getPointer(memScope).rawValue, tooltip?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, column?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_get_tooltip_context(tree_view: CValuesRef<GtkTreeView>?, x: CValuesRef<gintVar>?, y: CValuesRef<gintVar>?, keyboard_tip: gboolean, model: CValuesRef<CPointerVar<GtkTreeModel>>?, path: CValuesRef<CPointerVar<GtkTreePath>>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge4461(tree_view?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, keyboard_tip, model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_view_set_tooltip_column(tree_view: CValuesRef<GtkTreeView>?, column: gint): Unit {
    memScoped {
        return kniBridge4462(tree_view?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_tree_view_get_tooltip_column(tree_view: CValuesRef<GtkTreeView>?): gint {
    memScoped {
        return kniBridge4463(tree_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_get_type(): GType {
    return kniBridge4464()
}

fun gtk_combo_box_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4465())
}

fun gtk_combo_box_new_with_area(area: CValuesRef<GtkCellArea>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4466(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_new_with_area_and_entry(area: CValuesRef<GtkCellArea>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4467(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_new_with_entry(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4468())
}

fun gtk_combo_box_new_with_model(model: CValuesRef<GtkTreeModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4469(model?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_new_with_model_and_entry(model: CValuesRef<GtkTreeModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4470(model?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_get_wrap_width(combo_box: CValuesRef<GtkComboBox>?): gint {
    memScoped {
        return kniBridge4471(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_wrap_width(combo_box: CValuesRef<GtkComboBox>?, width: gint): Unit {
    memScoped {
        return kniBridge4472(combo_box?.getPointer(memScope).rawValue, width)
    }
}

fun gtk_combo_box_get_row_span_column(combo_box: CValuesRef<GtkComboBox>?): gint {
    memScoped {
        return kniBridge4473(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_row_span_column(combo_box: CValuesRef<GtkComboBox>?, row_span: gint): Unit {
    memScoped {
        return kniBridge4474(combo_box?.getPointer(memScope).rawValue, row_span)
    }
}

fun gtk_combo_box_get_column_span_column(combo_box: CValuesRef<GtkComboBox>?): gint {
    memScoped {
        return kniBridge4475(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_column_span_column(combo_box: CValuesRef<GtkComboBox>?, column_span: gint): Unit {
    memScoped {
        return kniBridge4476(combo_box?.getPointer(memScope).rawValue, column_span)
    }
}

fun gtk_combo_box_get_add_tearoffs(combo_box: CValuesRef<GtkComboBox>?): gboolean {
    memScoped {
        return kniBridge4477(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_add_tearoffs(combo_box: CValuesRef<GtkComboBox>?, add_tearoffs: gboolean): Unit {
    memScoped {
        return kniBridge4478(combo_box?.getPointer(memScope).rawValue, add_tearoffs)
    }
}

fun gtk_combo_box_get_title(combo_box: CValuesRef<GtkComboBox>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4479(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_set_title(combo_box: CValuesRef<GtkComboBox>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge4480(combo_box?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_get_focus_on_click(combo: CValuesRef<GtkComboBox>?): gboolean {
    memScoped {
        return kniBridge4481(combo?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_focus_on_click(combo: CValuesRef<GtkComboBox>?, focus_on_click: gboolean): Unit {
    memScoped {
        return kniBridge4482(combo?.getPointer(memScope).rawValue, focus_on_click)
    }
}

fun gtk_combo_box_get_active(combo_box: CValuesRef<GtkComboBox>?): gint {
    memScoped {
        return kniBridge4483(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_active(combo_box: CValuesRef<GtkComboBox>?, index_: gint): Unit {
    memScoped {
        return kniBridge4484(combo_box?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_combo_box_get_active_iter(combo_box: CValuesRef<GtkComboBox>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge4485(combo_box?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_active_iter(combo_box: CValuesRef<GtkComboBox>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge4486(combo_box?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_model(combo_box: CValuesRef<GtkComboBox>?, model: CValuesRef<GtkTreeModel>?): Unit {
    memScoped {
        return kniBridge4487(combo_box?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_get_model(combo_box: CValuesRef<GtkComboBox>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge4488(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_get_row_separator_func(combo_box: CValuesRef<GtkComboBox>?): GtkTreeViewRowSeparatorFunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>(kniBridge4489(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_set_row_separator_func(combo_box: CValuesRef<GtkComboBox>?, func: GtkTreeViewRowSeparatorFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4490(combo_box?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_combo_box_set_button_sensitivity(combo_box: CValuesRef<GtkComboBox>?, sensitivity: GtkSensitivityType): Unit {
    memScoped {
        return kniBridge4491(combo_box?.getPointer(memScope).rawValue, sensitivity.value)
    }
}

fun gtk_combo_box_get_button_sensitivity(combo_box: CValuesRef<GtkComboBox>?): GtkSensitivityType {
    memScoped {
        return GtkSensitivityType.byValue(kniBridge4492(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_get_has_entry(combo_box: CValuesRef<GtkComboBox>?): gboolean {
    memScoped {
        return kniBridge4493(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_entry_text_column(combo_box: CValuesRef<GtkComboBox>?, text_column: gint): Unit {
    memScoped {
        return kniBridge4494(combo_box?.getPointer(memScope).rawValue, text_column)
    }
}

fun gtk_combo_box_get_entry_text_column(combo_box: CValuesRef<GtkComboBox>?): gint {
    memScoped {
        return kniBridge4495(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_popup_fixed_width(combo_box: CValuesRef<GtkComboBox>?, fixed: gboolean): Unit {
    memScoped {
        return kniBridge4496(combo_box?.getPointer(memScope).rawValue, fixed)
    }
}

fun gtk_combo_box_get_popup_fixed_width(combo_box: CValuesRef<GtkComboBox>?): gboolean {
    memScoped {
        return kniBridge4497(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_popup(combo_box: CValuesRef<GtkComboBox>?): Unit {
    memScoped {
        return kniBridge4498(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_popup_for_device(combo_box: CValuesRef<GtkComboBox>?, device: CValuesRef<GdkDevice>?): Unit {
    memScoped {
        return kniBridge4499(combo_box?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_popdown(combo_box: CValuesRef<GtkComboBox>?): Unit {
    memScoped {
        return kniBridge4500(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_get_popup_accessible(combo_box: CValuesRef<GtkComboBox>?): CPointer<AtkObject>? {
    memScoped {
        return interpretCPointer<AtkObject>(kniBridge4501(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_get_id_column(combo_box: CValuesRef<GtkComboBox>?): gint {
    memScoped {
        return kniBridge4502(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_set_id_column(combo_box: CValuesRef<GtkComboBox>?, id_column: gint): Unit {
    memScoped {
        return kniBridge4503(combo_box?.getPointer(memScope).rawValue, id_column)
    }
}

fun gtk_combo_box_get_active_id(combo_box: CValuesRef<GtkComboBox>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4504(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_set_active_id(combo_box: CValuesRef<GtkComboBox>?, @CCall.CString active_id: String?): gboolean {
    memScoped {
        return kniBridge4505(combo_box?.getPointer(memScope).rawValue, active_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_button_get_type(): GType {
    return kniBridge4506()
}

fun gtk_app_chooser_button_new(@CCall.CString content_type: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4507(content_type?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_button_append_separator(self: CValuesRef<GtkAppChooserButton>?): Unit {
    memScoped {
        return kniBridge4508(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_button_append_custom_item(self: CValuesRef<GtkAppChooserButton>?, @CCall.CString name: String?, @CCall.CString label: String?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge4509(self?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_button_set_active_custom_item(self: CValuesRef<GtkAppChooserButton>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge4510(self?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_button_set_show_dialog_item(self: CValuesRef<GtkAppChooserButton>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4511(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_button_get_show_dialog_item(self: CValuesRef<GtkAppChooserButton>?): gboolean {
    memScoped {
        return kniBridge4512(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_button_set_heading(self: CValuesRef<GtkAppChooserButton>?, @CCall.CString heading: String?): Unit {
    memScoped {
        return kniBridge4513(self?.getPointer(memScope).rawValue, heading?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_app_chooser_button_get_heading(self: CValuesRef<GtkAppChooserButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4514(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_app_chooser_button_set_show_default_item(self: CValuesRef<GtkAppChooserButton>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4515(self?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_app_chooser_button_get_show_default_item(self: CValuesRef<GtkAppChooserButton>?): gboolean {
    memScoped {
        return kniBridge4516(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_shortcuts_window_get_type(): GType {
    return kniBridge4517()
}

fun glib_autoptr_clear_GtkShortcutsWindow(_ptr: CValuesRef<GtkShortcutsWindow>?): Unit {
    memScoped {
        return kniBridge4518(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkShortcutsWindow(_ptr: CValuesRef<CPointerVar<GtkShortcutsWindow>>?): Unit {
    memScoped {
        return kniBridge4519(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkShortcutsWindow(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge4520(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkShortcutsWindow(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge4521(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkShortcutsWindow(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge4522(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_window_get_type(): GType {
    return kniBridge4523()
}

fun gtk_application_window_new(application: CValuesRef<GtkApplication>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4524(application?.getPointer(memScope).rawValue))
    }
}

fun gtk_application_window_set_show_menubar(window: CValuesRef<GtkApplicationWindow>?, show_menubar: gboolean): Unit {
    memScoped {
        return kniBridge4525(window?.getPointer(memScope).rawValue, show_menubar)
    }
}

fun gtk_application_window_get_show_menubar(window: CValuesRef<GtkApplicationWindow>?): gboolean {
    memScoped {
        return kniBridge4526(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_window_get_id(window: CValuesRef<GtkApplicationWindow>?): guint {
    memScoped {
        return kniBridge4527(window?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_window_set_help_overlay(window: CValuesRef<GtkApplicationWindow>?, help_overlay: CValuesRef<GtkShortcutsWindow>?): Unit {
    memScoped {
        return kniBridge4528(window?.getPointer(memScope).rawValue, help_overlay?.getPointer(memScope).rawValue)
    }
}

fun gtk_application_window_get_help_overlay(window: CValuesRef<GtkApplicationWindow>?): CPointer<GtkShortcutsWindow>? {
    memScoped {
        return interpretCPointer<GtkShortcutsWindow>(kniBridge4529(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_frame_get_type(): GType {
    return kniBridge4530()
}

fun gtk_frame_new(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4531(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_frame_set_label(frame: CValuesRef<GtkFrame>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge4532(frame?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_frame_get_label(frame: CValuesRef<GtkFrame>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4533(frame?.getPointer(memScope).rawValue))
    }
}

fun gtk_frame_set_label_widget(frame: CValuesRef<GtkFrame>?, label_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4534(frame?.getPointer(memScope).rawValue, label_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_frame_get_label_widget(frame: CValuesRef<GtkFrame>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4535(frame?.getPointer(memScope).rawValue))
    }
}

fun gtk_frame_set_label_align(frame: CValuesRef<GtkFrame>?, xalign: gfloat, yalign: gfloat): Unit {
    memScoped {
        return kniBridge4536(frame?.getPointer(memScope).rawValue, xalign, yalign)
    }
}

fun gtk_frame_get_label_align(frame: CValuesRef<GtkFrame>?, xalign: CValuesRef<gfloatVar>?, yalign: CValuesRef<gfloatVar>?): Unit {
    memScoped {
        return kniBridge4537(frame?.getPointer(memScope).rawValue, xalign?.getPointer(memScope).rawValue, yalign?.getPointer(memScope).rawValue)
    }
}

fun gtk_frame_set_shadow_type(frame: CValuesRef<GtkFrame>?, type: GtkShadowType): Unit {
    memScoped {
        return kniBridge4538(frame?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_frame_get_shadow_type(frame: CValuesRef<GtkFrame>?): GtkShadowType {
    memScoped {
        return GtkShadowType.byValue(kniBridge4539(frame?.getPointer(memScope).rawValue))
    }
}

fun gtk_aspect_frame_get_type(): GType {
    return kniBridge4540()
}

fun gtk_aspect_frame_new(@CCall.CString label: String?, xalign: gfloat, yalign: gfloat, ratio: gfloat, obey_child: gboolean): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4541(label?.cstr?.getPointer(memScope).rawValue, xalign, yalign, ratio, obey_child))
    }
}

fun gtk_aspect_frame_set(aspect_frame: CValuesRef<GtkAspectFrame>?, xalign: gfloat, yalign: gfloat, ratio: gfloat, obey_child: gboolean): Unit {
    memScoped {
        return kniBridge4542(aspect_frame?.getPointer(memScope).rawValue, xalign, yalign, ratio, obey_child)
    }
}

fun gtk_assistant_get_type(): GType {
    return kniBridge4543()
}

fun gtk_assistant_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4544())
}

fun gtk_assistant_next_page(assistant: CValuesRef<GtkAssistant>?): Unit {
    memScoped {
        return kniBridge4545(assistant?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_previous_page(assistant: CValuesRef<GtkAssistant>?): Unit {
    memScoped {
        return kniBridge4546(assistant?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_get_current_page(assistant: CValuesRef<GtkAssistant>?): gint {
    memScoped {
        return kniBridge4547(assistant?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_set_current_page(assistant: CValuesRef<GtkAssistant>?, page_num: gint): Unit {
    memScoped {
        return kniBridge4548(assistant?.getPointer(memScope).rawValue, page_num)
    }
}

fun gtk_assistant_get_n_pages(assistant: CValuesRef<GtkAssistant>?): gint {
    memScoped {
        return kniBridge4549(assistant?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_get_nth_page(assistant: CValuesRef<GtkAssistant>?, page_num: gint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4550(assistant?.getPointer(memScope).rawValue, page_num))
    }
}

fun gtk_assistant_prepend_page(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge4551(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_append_page(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge4552(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_insert_page(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, position: gint): gint {
    memScoped {
        return kniBridge4553(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_assistant_remove_page(assistant: CValuesRef<GtkAssistant>?, page_num: gint): Unit {
    memScoped {
        return kniBridge4554(assistant?.getPointer(memScope).rawValue, page_num)
    }
}

fun gtk_assistant_set_forward_page_func(assistant: CValuesRef<GtkAssistant>?, page_func: GtkAssistantPageFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4555(assistant?.getPointer(memScope).rawValue, page_func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_assistant_set_page_type(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, type: GtkAssistantPageType): Unit {
    memScoped {
        return kniBridge4556(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_assistant_get_page_type(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): GtkAssistantPageType {
    memScoped {
        return GtkAssistantPageType.byValue(kniBridge4557(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue))
    }
}

fun gtk_assistant_set_page_title(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge4558(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_get_page_title(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4559(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue))
    }
}

fun gtk_assistant_set_page_header_image(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge4560(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_get_page_header_image(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4561(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue))
    }
}

fun gtk_assistant_set_page_side_image(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge4562(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_get_page_side_image(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4563(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue))
    }
}

fun gtk_assistant_set_page_complete(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, complete: gboolean): Unit {
    memScoped {
        return kniBridge4564(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, complete)
    }
}

fun gtk_assistant_get_page_complete(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge4565(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_add_action_widget(assistant: CValuesRef<GtkAssistant>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4566(assistant?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_remove_action_widget(assistant: CValuesRef<GtkAssistant>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4567(assistant?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_update_buttons_state(assistant: CValuesRef<GtkAssistant>?): Unit {
    memScoped {
        return kniBridge4568(assistant?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_commit(assistant: CValuesRef<GtkAssistant>?): Unit {
    memScoped {
        return kniBridge4569(assistant?.getPointer(memScope).rawValue)
    }
}

fun gtk_assistant_set_page_has_padding(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?, has_padding: gboolean): Unit {
    memScoped {
        return kniBridge4570(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue, has_padding)
    }
}

fun gtk_assistant_get_page_has_padding(assistant: CValuesRef<GtkAssistant>?, page: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge4571(assistant?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_box_get_type(): GType {
    return kniBridge4572()
}

fun gtk_button_box_new(orientation: GtkOrientation): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4573(orientation.value))
}

fun gtk_button_box_get_layout(widget: CValuesRef<GtkButtonBox>?): GtkButtonBoxStyle {
    memScoped {
        return kniBridge4574(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_box_set_layout(widget: CValuesRef<GtkButtonBox>?, layout_style: GtkButtonBoxStyle): Unit {
    memScoped {
        return kniBridge4575(widget?.getPointer(memScope).rawValue, layout_style)
    }
}

fun gtk_button_box_get_child_secondary(widget: CValuesRef<GtkButtonBox>?, child: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge4576(widget?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_box_set_child_secondary(widget: CValuesRef<GtkButtonBox>?, child: CValuesRef<GtkWidget>?, is_secondary: gboolean): Unit {
    memScoped {
        return kniBridge4577(widget?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, is_secondary)
    }
}

fun gtk_button_box_get_child_non_homogeneous(widget: CValuesRef<GtkButtonBox>?, child: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge4578(widget?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_box_set_child_non_homogeneous(widget: CValuesRef<GtkButtonBox>?, child: CValuesRef<GtkWidget>?, non_homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge4579(widget?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, non_homogeneous)
    }
}

fun gtk_binding_set_new(@CCall.CString set_name: String?): CPointer<GtkBindingSet>? {
    memScoped {
        return interpretCPointer<GtkBindingSet>(kniBridge4580(set_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_binding_set_by_class(object_class: gpointer?): CPointer<GtkBindingSet>? {
    return interpretCPointer<GtkBindingSet>(kniBridge4581(object_class.rawValue))
}

fun gtk_binding_set_find(@CCall.CString set_name: String?): CPointer<GtkBindingSet>? {
    memScoped {
        return interpretCPointer<GtkBindingSet>(kniBridge4582(set_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_bindings_activate(`object`: CValuesRef<GObject>?, keyval: guint, modifiers: GdkModifierType): gboolean {
    memScoped {
        return kniBridge4583(`object`?.getPointer(memScope).rawValue, keyval, modifiers)
    }
}

fun gtk_bindings_activate_event(`object`: CValuesRef<GObject>?, event: CValuesRef<GdkEventKey>?): gboolean {
    memScoped {
        return kniBridge4584(`object`?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_binding_set_activate(binding_set: CValuesRef<GtkBindingSet>?, keyval: guint, modifiers: GdkModifierType, `object`: CValuesRef<GObject>?): gboolean {
    memScoped {
        return kniBridge4585(binding_set?.getPointer(memScope).rawValue, keyval, modifiers, `object`?.getPointer(memScope).rawValue)
    }
}

fun gtk_binding_entry_skip(binding_set: CValuesRef<GtkBindingSet>?, keyval: guint, modifiers: GdkModifierType): Unit {
    memScoped {
        return kniBridge4586(binding_set?.getPointer(memScope).rawValue, keyval, modifiers)
    }
}

@CCall("knifunptr_libgtk355")
external fun gtk_binding_entry_add_signal(binding_set: CValuesRef<GtkBindingSet>?, keyval: guint, modifiers: GdkModifierType, @CCall.CString signal_name: String?, n_args: guint, vararg variadicArguments: Any?): Unit

fun gtk_binding_entry_add_signall(binding_set: CValuesRef<GtkBindingSet>?, keyval: guint, modifiers: GdkModifierType, @CCall.CString signal_name: String?, binding_args: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge4587(binding_set?.getPointer(memScope).rawValue, keyval, modifiers, signal_name?.cstr?.getPointer(memScope).rawValue, binding_args?.getPointer(memScope).rawValue)
    }
}

fun gtk_binding_entry_add_signal_from_string(binding_set: CValuesRef<GtkBindingSet>?, @CCall.CString signal_desc: String?): GTokenType {
    memScoped {
        return kniBridge4588(binding_set?.getPointer(memScope).rawValue, signal_desc?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_binding_entry_remove(binding_set: CValuesRef<GtkBindingSet>?, keyval: guint, modifiers: GdkModifierType): Unit {
    memScoped {
        return kniBridge4589(binding_set?.getPointer(memScope).rawValue, keyval, modifiers)
    }
}

fun gtk_builder_error_quark(): GQuark {
    return kniBridge4590()
}

fun gtk_builder_get_type(): GType {
    return kniBridge4591()
}

fun gtk_builder_new(): CPointer<GtkBuilder>? {
    return interpretCPointer<GtkBuilder>(kniBridge4592())
}

fun gtk_builder_add_from_file(builder: CValuesRef<GtkBuilder>?, @CCall.CString filename: String?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4593(builder?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_add_from_resource(builder: CValuesRef<GtkBuilder>?, @CCall.CString resource_path: String?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4594(builder?.getPointer(memScope).rawValue, resource_path?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_add_from_string(builder: CValuesRef<GtkBuilder>?, @CCall.CString buffer: String?, length: gsize, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4595(builder?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_add_objects_from_file(builder: CValuesRef<GtkBuilder>?, @CCall.CString filename: String?, object_ids: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4596(builder?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, object_ids?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_add_objects_from_resource(builder: CValuesRef<GtkBuilder>?, @CCall.CString resource_path: String?, object_ids: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4597(builder?.getPointer(memScope).rawValue, resource_path?.cstr?.getPointer(memScope).rawValue, object_ids?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_add_objects_from_string(builder: CValuesRef<GtkBuilder>?, @CCall.CString buffer: String?, length: gsize, object_ids: CValuesRef<CPointerVar<gcharVar>>?, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4598(builder?.getPointer(memScope).rawValue, buffer?.cstr?.getPointer(memScope).rawValue, length, object_ids?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_get_object(builder: CValuesRef<GtkBuilder>?, @CCall.CString name: String?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge4599(builder?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_get_objects(builder: CValuesRef<GtkBuilder>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge4600(builder?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_expose_object(builder: CValuesRef<GtkBuilder>?, @CCall.CString name: String?, `object`: CValuesRef<GObject>?): Unit {
    memScoped {
        return kniBridge4601(builder?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, `object`?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_connect_signals(builder: CValuesRef<GtkBuilder>?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4602(builder?.getPointer(memScope).rawValue, user_data.rawValue)
    }
}

fun gtk_builder_connect_signals_full(builder: CValuesRef<GtkBuilder>?, func: GtkBuilderConnectFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4603(builder?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun gtk_builder_set_translation_domain(builder: CValuesRef<GtkBuilder>?, @CCall.CString domain: String?): Unit {
    memScoped {
        return kniBridge4604(builder?.getPointer(memScope).rawValue, domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_get_translation_domain(builder: CValuesRef<GtkBuilder>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4605(builder?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_get_type_from_name(builder: CValuesRef<GtkBuilder>?, @CCall.CString type_name: String?): GType {
    memScoped {
        return kniBridge4606(builder?.getPointer(memScope).rawValue, type_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_value_from_string(builder: CValuesRef<GtkBuilder>?, pspec: CValuesRef<GParamSpec>?, @CCall.CString string: String?, value: CValuesRef<GValue>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4607(builder?.getPointer(memScope).rawValue, pspec?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_value_from_string_type(builder: CValuesRef<GtkBuilder>?, type: GType, @CCall.CString string: String?, value: CValuesRef<GValue>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4608(builder?.getPointer(memScope).rawValue, type, string?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_new_from_file(@CCall.CString filename: String?): CPointer<GtkBuilder>? {
    memScoped {
        return interpretCPointer<GtkBuilder>(kniBridge4609(filename?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_new_from_resource(@CCall.CString resource_path: String?): CPointer<GtkBuilder>? {
    memScoped {
        return interpretCPointer<GtkBuilder>(kniBridge4610(resource_path?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_new_from_string(@CCall.CString string: String?, length: gssize): CPointer<GtkBuilder>? {
    memScoped {
        return interpretCPointer<GtkBuilder>(kniBridge4611(string?.cstr?.getPointer(memScope).rawValue, length))
    }
}

fun gtk_builder_add_callback_symbol(builder: CValuesRef<GtkBuilder>?, @CCall.CString callback_name: String?, callback_symbol: GCallback?): Unit {
    memScoped {
        return kniBridge4612(builder?.getPointer(memScope).rawValue, callback_name?.cstr?.getPointer(memScope).rawValue, callback_symbol.rawValue)
    }
}

@CCall("knifunptr_libgtk356")
external fun gtk_builder_add_callback_symbols(builder: CValuesRef<GtkBuilder>?, @CCall.CString first_callback_name: String?, first_callback_symbol: GCallback?, vararg variadicArguments: Any?): Unit

fun gtk_builder_lookup_callback_symbol(builder: CValuesRef<GtkBuilder>?, @CCall.CString callback_name: String?): GCallback? {
    memScoped {
        return interpretCPointer<CFunction<() -> Unit>>(kniBridge4613(builder?.getPointer(memScope).rawValue, callback_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_set_application(builder: CValuesRef<GtkBuilder>?, application: CValuesRef<GtkApplication>?): Unit {
    memScoped {
        return kniBridge4614(builder?.getPointer(memScope).rawValue, application?.getPointer(memScope).rawValue)
    }
}

fun gtk_builder_get_application(builder: CValuesRef<GtkBuilder>?): CPointer<GtkApplication>? {
    memScoped {
        return interpretCPointer<GtkApplication>(kniBridge4615(builder?.getPointer(memScope).rawValue))
    }
}

fun gtk_builder_extend_with_template(builder: CValuesRef<GtkBuilder>?, widget: CValuesRef<GtkWidget>?, template_type: GType, @CCall.CString buffer: String?, length: gsize, error: CValuesRef<CPointerVar<GError>>?): guint {
    memScoped {
        return kniBridge4616(builder?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, template_type, buffer?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_get_type(): GType {
    return kniBridge4617()
}

fun gtk_buildable_set_name(buildable: CValuesRef<GtkBuildable>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge4618(buildable?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_get_name(buildable: CValuesRef<GtkBuildable>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4619(buildable?.getPointer(memScope).rawValue))
    }
}

fun gtk_buildable_add_child(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString type: String?): Unit {
    memScoped {
        return kniBridge4620(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_set_buildable_property(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, @CCall.CString name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge4621(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_construct_child(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, @CCall.CString name: String?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge4622(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_buildable_custom_tag_start(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString tagname: String?, parser: CValuesRef<GMarkupParser>?, data: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge4623(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tagname?.cstr?.getPointer(memScope).rawValue, parser?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_custom_tag_end(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString tagname: String?, data: CValuesRef<gpointerVar>?): Unit {
    memScoped {
        return kniBridge4624(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tagname?.cstr?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_custom_finished(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString tagname: String?, data: gpointer?): Unit {
    memScoped {
        return kniBridge4625(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tagname?.cstr?.getPointer(memScope).rawValue, data.rawValue)
    }
}

fun gtk_buildable_parser_finished(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?): Unit {
    memScoped {
        return kniBridge4626(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue)
    }
}

fun gtk_buildable_get_internal_child(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, @CCall.CString childname: String?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge4627(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, childname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_get_type(): GType {
    return kniBridge4628()
}

fun gtk_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4629())
}

fun gtk_button_new_with_label(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4630(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_new_from_icon_name(@CCall.CString icon_name: String?, size: GtkIconSize): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4631(icon_name?.cstr?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_button_new_from_stock(@CCall.CString stock_id: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4632(stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_new_with_mnemonic(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4633(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_clicked(button: CValuesRef<GtkButton>?): Unit {
    memScoped {
        return kniBridge4634(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_pressed(button: CValuesRef<GtkButton>?): Unit {
    memScoped {
        return kniBridge4635(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_released(button: CValuesRef<GtkButton>?): Unit {
    memScoped {
        return kniBridge4636(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_enter(button: CValuesRef<GtkButton>?): Unit {
    memScoped {
        return kniBridge4637(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_leave(button: CValuesRef<GtkButton>?): Unit {
    memScoped {
        return kniBridge4638(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_set_relief(button: CValuesRef<GtkButton>?, relief: GtkReliefStyle): Unit {
    memScoped {
        return kniBridge4639(button?.getPointer(memScope).rawValue, relief.value)
    }
}

fun gtk_button_get_relief(button: CValuesRef<GtkButton>?): GtkReliefStyle {
    memScoped {
        return GtkReliefStyle.byValue(kniBridge4640(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_set_label(button: CValuesRef<GtkButton>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge4641(button?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_get_label(button: CValuesRef<GtkButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4642(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_set_use_underline(button: CValuesRef<GtkButton>?, use_underline: gboolean): Unit {
    memScoped {
        return kniBridge4643(button?.getPointer(memScope).rawValue, use_underline)
    }
}

fun gtk_button_get_use_underline(button: CValuesRef<GtkButton>?): gboolean {
    memScoped {
        return kniBridge4644(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_set_use_stock(button: CValuesRef<GtkButton>?, use_stock: gboolean): Unit {
    memScoped {
        return kniBridge4645(button?.getPointer(memScope).rawValue, use_stock)
    }
}

fun gtk_button_get_use_stock(button: CValuesRef<GtkButton>?): gboolean {
    memScoped {
        return kniBridge4646(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_set_focus_on_click(button: CValuesRef<GtkButton>?, focus_on_click: gboolean): Unit {
    memScoped {
        return kniBridge4647(button?.getPointer(memScope).rawValue, focus_on_click)
    }
}

fun gtk_button_get_focus_on_click(button: CValuesRef<GtkButton>?): gboolean {
    memScoped {
        return kniBridge4648(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_set_alignment(button: CValuesRef<GtkButton>?, xalign: gfloat, yalign: gfloat): Unit {
    memScoped {
        return kniBridge4649(button?.getPointer(memScope).rawValue, xalign, yalign)
    }
}

fun gtk_button_get_alignment(button: CValuesRef<GtkButton>?, xalign: CValuesRef<gfloatVar>?, yalign: CValuesRef<gfloatVar>?): Unit {
    memScoped {
        return kniBridge4650(button?.getPointer(memScope).rawValue, xalign?.getPointer(memScope).rawValue, yalign?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_set_image(button: CValuesRef<GtkButton>?, image: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4651(button?.getPointer(memScope).rawValue, image?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_get_image(button: CValuesRef<GtkButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4652(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_set_image_position(button: CValuesRef<GtkButton>?, position: GtkPositionType): Unit {
    memScoped {
        return kniBridge4653(button?.getPointer(memScope).rawValue, position.value)
    }
}

fun gtk_button_get_image_position(button: CValuesRef<GtkButton>?): GtkPositionType {
    memScoped {
        return GtkPositionType.byValue(kniBridge4654(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_button_set_always_show_image(button: CValuesRef<GtkButton>?, always_show: gboolean): Unit {
    memScoped {
        return kniBridge4655(button?.getPointer(memScope).rawValue, always_show)
    }
}

fun gtk_button_get_always_show_image(button: CValuesRef<GtkButton>?): gboolean {
    memScoped {
        return kniBridge4656(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_button_get_event_window(button: CValuesRef<GtkButton>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge4657(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_calendar_get_type(): GType {
    return kniBridge4658()
}

fun gtk_calendar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4659())
}

fun gtk_calendar_select_month(calendar: CValuesRef<GtkCalendar>?, month: guint, year: guint): Unit {
    memScoped {
        return kniBridge4660(calendar?.getPointer(memScope).rawValue, month, year)
    }
}

fun gtk_calendar_select_day(calendar: CValuesRef<GtkCalendar>?, day: guint): Unit {
    memScoped {
        return kniBridge4661(calendar?.getPointer(memScope).rawValue, day)
    }
}

fun gtk_calendar_mark_day(calendar: CValuesRef<GtkCalendar>?, day: guint): Unit {
    memScoped {
        return kniBridge4662(calendar?.getPointer(memScope).rawValue, day)
    }
}

fun gtk_calendar_unmark_day(calendar: CValuesRef<GtkCalendar>?, day: guint): Unit {
    memScoped {
        return kniBridge4663(calendar?.getPointer(memScope).rawValue, day)
    }
}

fun gtk_calendar_clear_marks(calendar: CValuesRef<GtkCalendar>?): Unit {
    memScoped {
        return kniBridge4664(calendar?.getPointer(memScope).rawValue)
    }
}

fun gtk_calendar_set_display_options(calendar: CValuesRef<GtkCalendar>?, flags: GtkCalendarDisplayOptions): Unit {
    memScoped {
        return kniBridge4665(calendar?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_calendar_get_display_options(calendar: CValuesRef<GtkCalendar>?): GtkCalendarDisplayOptions {
    memScoped {
        return kniBridge4666(calendar?.getPointer(memScope).rawValue)
    }
}

fun gtk_calendar_get_date(calendar: CValuesRef<GtkCalendar>?, year: CValuesRef<guintVar>?, month: CValuesRef<guintVar>?, day: CValuesRef<guintVar>?): Unit {
    memScoped {
        return kniBridge4667(calendar?.getPointer(memScope).rawValue, year?.getPointer(memScope).rawValue, month?.getPointer(memScope).rawValue, day?.getPointer(memScope).rawValue)
    }
}

fun gtk_calendar_set_detail_func(calendar: CValuesRef<GtkCalendar>?, func: GtkCalendarDetailFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4668(calendar?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_calendar_set_detail_width_chars(calendar: CValuesRef<GtkCalendar>?, chars: gint): Unit {
    memScoped {
        return kniBridge4669(calendar?.getPointer(memScope).rawValue, chars)
    }
}

fun gtk_calendar_set_detail_height_rows(calendar: CValuesRef<GtkCalendar>?, rows: gint): Unit {
    memScoped {
        return kniBridge4670(calendar?.getPointer(memScope).rawValue, rows)
    }
}

fun gtk_calendar_get_detail_width_chars(calendar: CValuesRef<GtkCalendar>?): gint {
    memScoped {
        return kniBridge4671(calendar?.getPointer(memScope).rawValue)
    }
}

fun gtk_calendar_get_detail_height_rows(calendar: CValuesRef<GtkCalendar>?): gint {
    memScoped {
        return kniBridge4672(calendar?.getPointer(memScope).rawValue)
    }
}

fun gtk_calendar_get_day_is_marked(calendar: CValuesRef<GtkCalendar>?, day: guint): gboolean {
    memScoped {
        return kniBridge4673(calendar?.getPointer(memScope).rawValue, day)
    }
}

fun gtk_cell_area_box_get_type(): GType {
    return kniBridge4674()
}

fun gtk_cell_area_box_new(): CPointer<GtkCellArea>? {
    return interpretCPointer<GtkCellArea>(kniBridge4675())
}

fun gtk_cell_area_box_pack_start(box: CValuesRef<GtkCellAreaBox>?, renderer: CValuesRef<GtkCellRenderer>?, expand: gboolean, align: gboolean, fixed: gboolean): Unit {
    memScoped {
        return kniBridge4676(box?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, expand, align, fixed)
    }
}

fun gtk_cell_area_box_pack_end(box: CValuesRef<GtkCellAreaBox>?, renderer: CValuesRef<GtkCellRenderer>?, expand: gboolean, align: gboolean, fixed: gboolean): Unit {
    memScoped {
        return kniBridge4677(box?.getPointer(memScope).rawValue, renderer?.getPointer(memScope).rawValue, expand, align, fixed)
    }
}

fun gtk_cell_area_box_get_spacing(box: CValuesRef<GtkCellAreaBox>?): gint {
    memScoped {
        return kniBridge4678(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_box_set_spacing(box: CValuesRef<GtkCellAreaBox>?, spacing: gint): Unit {
    memScoped {
        return kniBridge4679(box?.getPointer(memScope).rawValue, spacing)
    }
}

fun _gtk_cell_area_box_group_visible(box: CValuesRef<GtkCellAreaBox>?, group_idx: gint): gboolean {
    memScoped {
        return kniBridge4680(box?.getPointer(memScope).rawValue, group_idx)
    }
}

fun gtk_cell_area_context_get_type(): GType {
    return kniBridge4681()
}

fun gtk_cell_area_context_get_area(context: CValuesRef<GtkCellAreaContext>?): CPointer<GtkCellArea>? {
    memScoped {
        return interpretCPointer<GtkCellArea>(kniBridge4682(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_area_context_allocate(context: CValuesRef<GtkCellAreaContext>?, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge4683(context?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_cell_area_context_reset(context: CValuesRef<GtkCellAreaContext>?): Unit {
    memScoped {
        return kniBridge4684(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_context_get_preferred_width(context: CValuesRef<GtkCellAreaContext>?, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4685(context?.getPointer(memScope).rawValue, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_context_get_preferred_height(context: CValuesRef<GtkCellAreaContext>?, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4686(context?.getPointer(memScope).rawValue, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_context_get_preferred_height_for_width(context: CValuesRef<GtkCellAreaContext>?, width: gint, minimum_height: CValuesRef<gintVar>?, natural_height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4687(context?.getPointer(memScope).rawValue, width, minimum_height?.getPointer(memScope).rawValue, natural_height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_context_get_preferred_width_for_height(context: CValuesRef<GtkCellAreaContext>?, height: gint, minimum_width: CValuesRef<gintVar>?, natural_width: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4688(context?.getPointer(memScope).rawValue, height, minimum_width?.getPointer(memScope).rawValue, natural_width?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_context_get_allocation(context: CValuesRef<GtkCellAreaContext>?, width: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4689(context?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_area_context_push_preferred_width(context: CValuesRef<GtkCellAreaContext>?, minimum_width: gint, natural_width: gint): Unit {
    memScoped {
        return kniBridge4690(context?.getPointer(memScope).rawValue, minimum_width, natural_width)
    }
}

fun gtk_cell_area_context_push_preferred_height(context: CValuesRef<GtkCellAreaContext>?, minimum_height: gint, natural_height: gint): Unit {
    memScoped {
        return kniBridge4691(context?.getPointer(memScope).rawValue, minimum_height, natural_height)
    }
}

fun gtk_cell_layout_get_type(): GType {
    return kniBridge4692()
}

fun gtk_cell_layout_pack_start(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge4693(cell_layout?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_cell_layout_pack_end(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge4694(cell_layout?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_cell_layout_get_cells(cell_layout: CValuesRef<GtkCellLayout>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge4695(cell_layout?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_layout_clear(cell_layout: CValuesRef<GtkCellLayout>?): Unit {
    memScoped {
        return kniBridge4696(cell_layout?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk357")
external fun gtk_cell_layout_set_attributes(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?, vararg variadicArguments: Any?): Unit

fun gtk_cell_layout_add_attribute(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?, @CCall.CString attribute: String?, column: gint): Unit {
    memScoped {
        return kniBridge4697(cell_layout?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, attribute?.cstr?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_cell_layout_set_cell_data_func(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?, func: GtkCellLayoutDataFunc?, func_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4698(cell_layout?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, func.rawValue, func_data.rawValue, destroy.rawValue)
    }
}

fun gtk_cell_layout_clear_attributes(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge4699(cell_layout?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_layout_reorder(cell_layout: CValuesRef<GtkCellLayout>?, cell: CValuesRef<GtkCellRenderer>?, position: gint): Unit {
    memScoped {
        return kniBridge4700(cell_layout?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_cell_layout_get_area(cell_layout: CValuesRef<GtkCellLayout>?): CPointer<GtkCellArea>? {
    memScoped {
        return interpretCPointer<GtkCellArea>(kniBridge4701(cell_layout?.getPointer(memScope).rawValue))
    }
}

fun _gtk_cell_layout_buildable_custom_tag_start(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString tagname: String?, parser: CValuesRef<GMarkupParser>?, data: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge4702(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tagname?.cstr?.getPointer(memScope).rawValue, parser?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun _gtk_cell_layout_buildable_custom_tag_end(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString tagname: String?, data: CValuesRef<gpointerVar>?): gboolean {
    memScoped {
        return kniBridge4703(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tagname?.cstr?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun _gtk_cell_layout_buildable_add_child(buildable: CValuesRef<GtkBuildable>?, builder: CValuesRef<GtkBuilder>?, child: CValuesRef<GObject>?, @CCall.CString type: String?): Unit {
    memScoped {
        return kniBridge4704(buildable?.getPointer(memScope).rawValue, builder?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_text_get_type(): GType {
    return kniBridge4705()
}

fun gtk_cell_renderer_text_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4706())
}

fun gtk_cell_renderer_text_set_fixed_height_from_font(renderer: CValuesRef<GtkCellRendererText>?, number_of_rows: gint): Unit {
    memScoped {
        return kniBridge4707(renderer?.getPointer(memScope).rawValue, number_of_rows)
    }
}

fun gtk_cell_renderer_accel_get_type(): GType {
    return kniBridge4708()
}

fun gtk_cell_renderer_accel_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4709())
}

fun gtk_cell_renderer_combo_get_type(): GType {
    return kniBridge4710()
}

fun gtk_cell_renderer_combo_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4711())
}

fun gtk_cell_renderer_pixbuf_get_type(): GType {
    return kniBridge4712()
}

fun gtk_cell_renderer_pixbuf_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4713())
}

fun gtk_cell_renderer_progress_get_type(): GType {
    return kniBridge4714()
}

fun gtk_cell_renderer_progress_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4715())
}

fun gtk_cell_renderer_spin_get_type(): GType {
    return kniBridge4716()
}

fun gtk_cell_renderer_spin_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4717())
}

fun gtk_cell_renderer_spinner_get_type(): GType {
    return kniBridge4718()
}

fun gtk_cell_renderer_spinner_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4719())
}

fun gtk_cell_renderer_toggle_get_type(): GType {
    return kniBridge4720()
}

fun gtk_cell_renderer_toggle_new(): CPointer<GtkCellRenderer>? {
    return interpretCPointer<GtkCellRenderer>(kniBridge4721())
}

fun gtk_cell_renderer_toggle_get_radio(toggle: CValuesRef<GtkCellRendererToggle>?): gboolean {
    memScoped {
        return kniBridge4722(toggle?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_toggle_set_radio(toggle: CValuesRef<GtkCellRendererToggle>?, radio: gboolean): Unit {
    memScoped {
        return kniBridge4723(toggle?.getPointer(memScope).rawValue, radio)
    }
}

fun gtk_cell_renderer_toggle_get_active(toggle: CValuesRef<GtkCellRendererToggle>?): gboolean {
    memScoped {
        return kniBridge4724(toggle?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_toggle_set_active(toggle: CValuesRef<GtkCellRendererToggle>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4725(toggle?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_cell_renderer_toggle_get_activatable(toggle: CValuesRef<GtkCellRendererToggle>?): gboolean {
    memScoped {
        return kniBridge4726(toggle?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_renderer_toggle_set_activatable(toggle: CValuesRef<GtkCellRendererToggle>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4727(toggle?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_cell_view_get_type(): GType {
    return kniBridge4728()
}

fun gtk_cell_view_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4729())
}

fun gtk_cell_view_new_with_context(area: CValuesRef<GtkCellArea>?, context: CValuesRef<GtkCellAreaContext>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4730(area?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_view_new_with_text(@CCall.CString text: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4731(text?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_view_new_with_markup(@CCall.CString markup: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4732(markup?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_view_new_with_pixbuf(pixbuf: CValuesRef<GdkPixbuf>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4733(pixbuf?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_view_set_model(cell_view: CValuesRef<GtkCellView>?, model: CValuesRef<GtkTreeModel>?): Unit {
    memScoped {
        return kniBridge4734(cell_view?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_view_get_model(cell_view: CValuesRef<GtkCellView>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge4735(cell_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_view_set_displayed_row(cell_view: CValuesRef<GtkCellView>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge4736(cell_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_view_get_displayed_row(cell_view: CValuesRef<GtkCellView>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge4737(cell_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_cell_view_set_background_rgba(cell_view: CValuesRef<GtkCellView>?, rgba: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge4738(cell_view?.getPointer(memScope).rawValue, rgba?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_view_get_draw_sensitive(cell_view: CValuesRef<GtkCellView>?): gboolean {
    memScoped {
        return kniBridge4739(cell_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_view_set_draw_sensitive(cell_view: CValuesRef<GtkCellView>?, draw_sensitive: gboolean): Unit {
    memScoped {
        return kniBridge4740(cell_view?.getPointer(memScope).rawValue, draw_sensitive)
    }
}

fun gtk_cell_view_get_fit_model(cell_view: CValuesRef<GtkCellView>?): gboolean {
    memScoped {
        return kniBridge4741(cell_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_view_set_fit_model(cell_view: CValuesRef<GtkCellView>?, fit_model: gboolean): Unit {
    memScoped {
        return kniBridge4742(cell_view?.getPointer(memScope).rawValue, fit_model)
    }
}

fun gtk_cell_view_get_size_of_row(cell_view: CValuesRef<GtkCellView>?, path: CValuesRef<GtkTreePath>?, requisition: CValuesRef<GtkRequisition>?): gboolean {
    memScoped {
        return kniBridge4743(cell_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, requisition?.getPointer(memScope).rawValue)
    }
}

fun gtk_cell_view_set_background_color(cell_view: CValuesRef<GtkCellView>?, color: CValuesRef<GdkColor>?): Unit {
    memScoped {
        return kniBridge4744(cell_view?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_toggle_button_get_type(): GType {
    return kniBridge4745()
}

fun gtk_toggle_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4746())
}

fun gtk_toggle_button_new_with_label(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4747(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_toggle_button_new_with_mnemonic(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4748(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_toggle_button_set_mode(toggle_button: CValuesRef<GtkToggleButton>?, draw_indicator: gboolean): Unit {
    memScoped {
        return kniBridge4749(toggle_button?.getPointer(memScope).rawValue, draw_indicator)
    }
}

fun gtk_toggle_button_get_mode(toggle_button: CValuesRef<GtkToggleButton>?): gboolean {
    memScoped {
        return kniBridge4750(toggle_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_toggle_button_set_active(toggle_button: CValuesRef<GtkToggleButton>?, is_active: gboolean): Unit {
    memScoped {
        return kniBridge4751(toggle_button?.getPointer(memScope).rawValue, is_active)
    }
}

fun gtk_toggle_button_get_active(toggle_button: CValuesRef<GtkToggleButton>?): gboolean {
    memScoped {
        return kniBridge4752(toggle_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_toggle_button_toggled(toggle_button: CValuesRef<GtkToggleButton>?): Unit {
    memScoped {
        return kniBridge4753(toggle_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_toggle_button_set_inconsistent(toggle_button: CValuesRef<GtkToggleButton>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4754(toggle_button?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_toggle_button_get_inconsistent(toggle_button: CValuesRef<GtkToggleButton>?): gboolean {
    memScoped {
        return kniBridge4755(toggle_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_check_button_get_type(): GType {
    return kniBridge4756()
}

fun gtk_check_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4757())
}

fun gtk_check_button_new_with_label(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4758(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_check_button_new_with_mnemonic(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4759(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun _gtk_check_button_get_props(check_button: CValuesRef<GtkCheckButton>?, indicator_size: CValuesRef<gintVar>?, indicator_spacing: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4760(check_button?.getPointer(memScope).rawValue, indicator_size?.getPointer(memScope).rawValue, indicator_spacing?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_get_type(): GType {
    return kniBridge4761()
}

fun gtk_menu_item_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4762())
}

fun gtk_menu_item_new_with_label(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4763(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_item_new_with_mnemonic(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4764(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_item_set_submenu(menu_item: CValuesRef<GtkMenuItem>?, submenu: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4765(menu_item?.getPointer(memScope).rawValue, submenu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_get_submenu(menu_item: CValuesRef<GtkMenuItem>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4766(menu_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_item_select(menu_item: CValuesRef<GtkMenuItem>?): Unit {
    memScoped {
        return kniBridge4767(menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_deselect(menu_item: CValuesRef<GtkMenuItem>?): Unit {
    memScoped {
        return kniBridge4768(menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_activate(menu_item: CValuesRef<GtkMenuItem>?): Unit {
    memScoped {
        return kniBridge4769(menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_toggle_size_request(menu_item: CValuesRef<GtkMenuItem>?, requisition: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge4770(menu_item?.getPointer(memScope).rawValue, requisition?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_toggle_size_allocate(menu_item: CValuesRef<GtkMenuItem>?, allocation: gint): Unit {
    memScoped {
        return kniBridge4771(menu_item?.getPointer(memScope).rawValue, allocation)
    }
}

fun gtk_menu_item_set_right_justified(menu_item: CValuesRef<GtkMenuItem>?, right_justified: gboolean): Unit {
    memScoped {
        return kniBridge4772(menu_item?.getPointer(memScope).rawValue, right_justified)
    }
}

fun gtk_menu_item_get_right_justified(menu_item: CValuesRef<GtkMenuItem>?): gboolean {
    memScoped {
        return kniBridge4773(menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_set_accel_path(menu_item: CValuesRef<GtkMenuItem>?, @CCall.CString accel_path: String?): Unit {
    memScoped {
        return kniBridge4774(menu_item?.getPointer(memScope).rawValue, accel_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_get_accel_path(menu_item: CValuesRef<GtkMenuItem>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4775(menu_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_item_set_label(menu_item: CValuesRef<GtkMenuItem>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge4776(menu_item?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_get_label(menu_item: CValuesRef<GtkMenuItem>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4777(menu_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_item_set_use_underline(menu_item: CValuesRef<GtkMenuItem>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4778(menu_item?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_menu_item_get_use_underline(menu_item: CValuesRef<GtkMenuItem>?): gboolean {
    memScoped {
        return kniBridge4779(menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_item_set_reserve_indicator(menu_item: CValuesRef<GtkMenuItem>?, reserve: gboolean): Unit {
    memScoped {
        return kniBridge4780(menu_item?.getPointer(memScope).rawValue, reserve)
    }
}

fun gtk_menu_item_get_reserve_indicator(menu_item: CValuesRef<GtkMenuItem>?): gboolean {
    memScoped {
        return kniBridge4781(menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_check_menu_item_get_type(): GType {
    return kniBridge4782()
}

fun gtk_check_menu_item_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4783())
}

fun gtk_check_menu_item_new_with_label(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4784(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_check_menu_item_new_with_mnemonic(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4785(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_check_menu_item_set_active(check_menu_item: CValuesRef<GtkCheckMenuItem>?, is_active: gboolean): Unit {
    memScoped {
        return kniBridge4786(check_menu_item?.getPointer(memScope).rawValue, is_active)
    }
}

fun gtk_check_menu_item_get_active(check_menu_item: CValuesRef<GtkCheckMenuItem>?): gboolean {
    memScoped {
        return kniBridge4787(check_menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_check_menu_item_toggled(check_menu_item: CValuesRef<GtkCheckMenuItem>?): Unit {
    memScoped {
        return kniBridge4788(check_menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_check_menu_item_set_inconsistent(check_menu_item: CValuesRef<GtkCheckMenuItem>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge4789(check_menu_item?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_check_menu_item_get_inconsistent(check_menu_item: CValuesRef<GtkCheckMenuItem>?): gboolean {
    memScoped {
        return kniBridge4790(check_menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_check_menu_item_set_draw_as_radio(check_menu_item: CValuesRef<GtkCheckMenuItem>?, draw_as_radio: gboolean): Unit {
    memScoped {
        return kniBridge4791(check_menu_item?.getPointer(memScope).rawValue, draw_as_radio)
    }
}

fun gtk_check_menu_item_get_draw_as_radio(check_menu_item: CValuesRef<GtkCheckMenuItem>?): gboolean {
    memScoped {
        return kniBridge4792(check_menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_get_type(): GType {
    return kniBridge4793()
}

fun gtk_clipboard_get_for_display(display: CValuesRef<GdkDisplay>?, selection: GdkAtom?): CPointer<GtkClipboard>? {
    memScoped {
        return interpretCPointer<GtkClipboard>(kniBridge4794(display?.getPointer(memScope).rawValue, selection.rawValue))
    }
}

fun gtk_clipboard_get(selection: GdkAtom?): CPointer<GtkClipboard>? {
    return interpretCPointer<GtkClipboard>(kniBridge4795(selection.rawValue))
}

fun gtk_clipboard_get_default(display: CValuesRef<GdkDisplay>?): CPointer<GtkClipboard>? {
    memScoped {
        return interpretCPointer<GtkClipboard>(kniBridge4796(display?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_get_display(clipboard: CValuesRef<GtkClipboard>?): CPointer<GdkDisplay>? {
    memScoped {
        return interpretCPointer<GdkDisplay>(kniBridge4797(clipboard?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_set_with_data(clipboard: CValuesRef<GtkClipboard>?, targets: CValuesRef<GtkTargetEntry>?, n_targets: guint, get_func: GtkClipboardGetFunc?, clear_func: GtkClipboardClearFunc?, user_data: gpointer?): gboolean {
    memScoped {
        return kniBridge4798(clipboard?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_targets, get_func.rawValue, clear_func.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_set_with_owner(clipboard: CValuesRef<GtkClipboard>?, targets: CValuesRef<GtkTargetEntry>?, n_targets: guint, get_func: GtkClipboardGetFunc?, clear_func: GtkClipboardClearFunc?, owner: CValuesRef<GObject>?): gboolean {
    memScoped {
        return kniBridge4799(clipboard?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_targets, get_func.rawValue, clear_func.rawValue, owner?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_get_owner(clipboard: CValuesRef<GtkClipboard>?): CPointer<GObject>? {
    memScoped {
        return interpretCPointer<GObject>(kniBridge4800(clipboard?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_clear(clipboard: CValuesRef<GtkClipboard>?): Unit {
    memScoped {
        return kniBridge4801(clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_set_text(clipboard: CValuesRef<GtkClipboard>?, @CCall.CString text: String?, len: gint): Unit {
    memScoped {
        return kniBridge4802(clipboard?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun gtk_clipboard_set_image(clipboard: CValuesRef<GtkClipboard>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge4803(clipboard?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_request_contents(clipboard: CValuesRef<GtkClipboard>?, target: GdkAtom?, callback: GtkClipboardReceivedFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4804(clipboard?.getPointer(memScope).rawValue, target.rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_request_text(clipboard: CValuesRef<GtkClipboard>?, callback: GtkClipboardTextReceivedFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4805(clipboard?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_request_rich_text(clipboard: CValuesRef<GtkClipboard>?, buffer: CValuesRef<GtkTextBuffer>?, callback: GtkClipboardRichTextReceivedFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4806(clipboard?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_request_image(clipboard: CValuesRef<GtkClipboard>?, callback: GtkClipboardImageReceivedFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4807(clipboard?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_request_uris(clipboard: CValuesRef<GtkClipboard>?, callback: GtkClipboardURIReceivedFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4808(clipboard?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_request_targets(clipboard: CValuesRef<GtkClipboard>?, callback: GtkClipboardTargetsReceivedFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge4809(clipboard?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_clipboard_wait_for_contents(clipboard: CValuesRef<GtkClipboard>?, target: GdkAtom?): CPointer<GtkSelectionData>? {
    memScoped {
        return interpretCPointer<GtkSelectionData>(kniBridge4810(clipboard?.getPointer(memScope).rawValue, target.rawValue))
    }
}

fun gtk_clipboard_wait_for_text(clipboard: CValuesRef<GtkClipboard>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4811(clipboard?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_wait_for_rich_text(clipboard: CValuesRef<GtkClipboard>?, buffer: CValuesRef<GtkTextBuffer>?, format: CValuesRef<GdkAtomVar>?, length: CValuesRef<gsizeVar>?): CPointer<guint8Var>? {
    memScoped {
        return interpretCPointer<guint8Var>(kniBridge4812(clipboard?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue, format?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_wait_for_image(clipboard: CValuesRef<GtkClipboard>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge4813(clipboard?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_wait_for_uris(clipboard: CValuesRef<GtkClipboard>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge4814(clipboard?.getPointer(memScope).rawValue))
    }
}

fun gtk_clipboard_wait_for_targets(clipboard: CValuesRef<GtkClipboard>?, targets: CValuesRef<CPointerVar<GdkAtomVar>>?, n_targets: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge4815(clipboard?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_targets?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_wait_is_text_available(clipboard: CValuesRef<GtkClipboard>?): gboolean {
    memScoped {
        return kniBridge4816(clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_wait_is_rich_text_available(clipboard: CValuesRef<GtkClipboard>?, buffer: CValuesRef<GtkTextBuffer>?): gboolean {
    memScoped {
        return kniBridge4817(clipboard?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_wait_is_image_available(clipboard: CValuesRef<GtkClipboard>?): gboolean {
    memScoped {
        return kniBridge4818(clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_wait_is_uris_available(clipboard: CValuesRef<GtkClipboard>?): gboolean {
    memScoped {
        return kniBridge4819(clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_wait_is_target_available(clipboard: CValuesRef<GtkClipboard>?, target: GdkAtom?): gboolean {
    memScoped {
        return kniBridge4820(clipboard?.getPointer(memScope).rawValue, target.rawValue)
    }
}

fun gtk_clipboard_set_can_store(clipboard: CValuesRef<GtkClipboard>?, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint): Unit {
    memScoped {
        return kniBridge4821(clipboard?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_targets)
    }
}

fun gtk_clipboard_store(clipboard: CValuesRef<GtkClipboard>?): Unit {
    memScoped {
        return kniBridge4822(clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_clipboard_get_selection(clipboard: CValuesRef<GtkClipboard>?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge4823(clipboard?.getPointer(memScope).rawValue))
    }
}

fun gtk_color_button_get_type(): GType {
    return kniBridge4824()
}

fun gtk_color_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4825())
}

fun gtk_color_button_new_with_rgba(rgba: CValuesRef<GdkRGBA>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4826(rgba?.getPointer(memScope).rawValue))
    }
}

fun gtk_color_button_set_title(button: CValuesRef<GtkColorButton>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge4827(button?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_button_get_title(button: CValuesRef<GtkColorButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4828(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_color_button_new_with_color(color: CValuesRef<GdkColor>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4829(color?.getPointer(memScope).rawValue))
    }
}

fun gtk_color_button_set_color(button: CValuesRef<GtkColorButton>?, color: CValuesRef<GdkColor>?): Unit {
    memScoped {
        return kniBridge4830(button?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_button_get_color(button: CValuesRef<GtkColorButton>?, color: CValuesRef<GdkColor>?): Unit {
    memScoped {
        return kniBridge4831(button?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_button_set_alpha(button: CValuesRef<GtkColorButton>?, alpha: guint16): Unit {
    memScoped {
        return kniBridge4832(button?.getPointer(memScope).rawValue, alpha)
    }
}

fun gtk_color_button_get_alpha(button: CValuesRef<GtkColorButton>?): guint16 {
    memScoped {
        return kniBridge4833(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_button_set_use_alpha(button: CValuesRef<GtkColorButton>?, use_alpha: gboolean): Unit {
    memScoped {
        return kniBridge4834(button?.getPointer(memScope).rawValue, use_alpha)
    }
}

fun gtk_color_button_get_use_alpha(button: CValuesRef<GtkColorButton>?): gboolean {
    memScoped {
        return kniBridge4835(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_button_set_rgba(button: CValuesRef<GtkColorButton>?, rgba: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge4836(button?.getPointer(memScope).rawValue, rgba?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_button_get_rgba(button: CValuesRef<GtkColorButton>?, rgba: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge4837(button?.getPointer(memScope).rawValue, rgba?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_chooser_get_type(): GType {
    return kniBridge4838()
}

fun gtk_color_chooser_get_rgba(chooser: CValuesRef<GtkColorChooser>?, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge4839(chooser?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_chooser_set_rgba(chooser: CValuesRef<GtkColorChooser>?, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge4840(chooser?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_chooser_get_use_alpha(chooser: CValuesRef<GtkColorChooser>?): gboolean {
    memScoped {
        return kniBridge4841(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_chooser_set_use_alpha(chooser: CValuesRef<GtkColorChooser>?, use_alpha: gboolean): Unit {
    memScoped {
        return kniBridge4842(chooser?.getPointer(memScope).rawValue, use_alpha)
    }
}

fun gtk_color_chooser_add_palette(chooser: CValuesRef<GtkColorChooser>?, orientation: GtkOrientation, colors_per_line: gint, n_colors: gint, colors: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge4843(chooser?.getPointer(memScope).rawValue, orientation.value, colors_per_line, n_colors, colors?.getPointer(memScope).rawValue)
    }
}

fun gtk_color_chooser_dialog_get_type(): GType {
    return kniBridge4844()
}

fun gtk_color_chooser_dialog_new(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4845(title?.cstr?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue))
    }
}

fun gtk_color_chooser_widget_get_type(): GType {
    return kniBridge4846()
}

fun gtk_color_chooser_widget_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4847())
}

fun gtk_hsv_to_rgb(h: gdouble, s: gdouble, v: gdouble, r: CValuesRef<gdoubleVar>?, g: CValuesRef<gdoubleVar>?, b: CValuesRef<gdoubleVar>?): Unit {
    memScoped {
        return kniBridge4848(h, s, v, r?.getPointer(memScope).rawValue, g?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun gtk_rgb_to_hsv(r: gdouble, g: gdouble, b: gdouble, h: CValuesRef<gdoubleVar>?, s: CValuesRef<gdoubleVar>?, v: CValuesRef<gdoubleVar>?): Unit {
    memScoped {
        return kniBridge4849(r, g, b, h?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue, v?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_get_type(): GType {
    return kniBridge4850()
}

fun gtk_combo_box_text_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4851())
}

fun gtk_combo_box_text_new_with_entry(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4852())
}

fun gtk_combo_box_text_append_text(combo_box: CValuesRef<GtkComboBoxText>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4853(combo_box?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_insert_text(combo_box: CValuesRef<GtkComboBoxText>?, position: gint, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4854(combo_box?.getPointer(memScope).rawValue, position, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_prepend_text(combo_box: CValuesRef<GtkComboBoxText>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4855(combo_box?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_remove(combo_box: CValuesRef<GtkComboBoxText>?, position: gint): Unit {
    memScoped {
        return kniBridge4856(combo_box?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_combo_box_text_remove_all(combo_box: CValuesRef<GtkComboBoxText>?): Unit {
    memScoped {
        return kniBridge4857(combo_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_get_active_text(combo_box: CValuesRef<GtkComboBoxText>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4858(combo_box?.getPointer(memScope).rawValue))
    }
}

fun gtk_combo_box_text_insert(combo_box: CValuesRef<GtkComboBoxText>?, position: gint, @CCall.CString id: String?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4859(combo_box?.getPointer(memScope).rawValue, position, id?.cstr?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_append(combo_box: CValuesRef<GtkComboBoxText>?, @CCall.CString id: String?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4860(combo_box?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_combo_box_text_prepend(combo_box: CValuesRef<GtkComboBoxText>?, @CCall.CString id: String?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge4861(combo_box?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_section_get_type(): GType {
    return kniBridge4862()
}

fun gtk_css_section_ref(section: CValuesRef<GtkCssSection>?): CPointer<GtkCssSection>? {
    memScoped {
        return interpretCPointer<GtkCssSection>(kniBridge4863(section?.getPointer(memScope).rawValue))
    }
}

fun gtk_css_section_unref(section: CValuesRef<GtkCssSection>?): Unit {
    memScoped {
        return kniBridge4864(section?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_section_get_section_type(section: CValuesRef<GtkCssSection>?): GtkCssSectionType {
    memScoped {
        return GtkCssSectionType.byValue(kniBridge4865(section?.getPointer(memScope).rawValue))
    }
}

fun gtk_css_section_get_parent(section: CValuesRef<GtkCssSection>?): CPointer<GtkCssSection>? {
    memScoped {
        return interpretCPointer<GtkCssSection>(kniBridge4866(section?.getPointer(memScope).rawValue))
    }
}

fun gtk_css_section_get_file(section: CValuesRef<GtkCssSection>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge4867(section?.getPointer(memScope).rawValue))
    }
}

fun gtk_css_section_get_start_line(section: CValuesRef<GtkCssSection>?): guint {
    memScoped {
        return kniBridge4868(section?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_section_get_start_position(section: CValuesRef<GtkCssSection>?): guint {
    memScoped {
        return kniBridge4869(section?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_section_get_end_line(section: CValuesRef<GtkCssSection>?): guint {
    memScoped {
        return kniBridge4870(section?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_section_get_end_position(section: CValuesRef<GtkCssSection>?): guint {
    memScoped {
        return kniBridge4871(section?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_provider_error_quark(): GQuark {
    return kniBridge4872()
}

fun gtk_css_provider_get_type(): GType {
    return kniBridge4873()
}

fun gtk_css_provider_new(): CPointer<GtkCssProvider>? {
    return interpretCPointer<GtkCssProvider>(kniBridge4874())
}

fun gtk_css_provider_to_string(provider: CValuesRef<GtkCssProvider>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4875(provider?.getPointer(memScope).rawValue))
    }
}

fun gtk_css_provider_load_from_data(css_provider: CValuesRef<GtkCssProvider>?, @CCall.CString data: String?, length: gssize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4876(css_provider?.getPointer(memScope).rawValue, data?.cstr?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_provider_load_from_file(css_provider: CValuesRef<GtkCssProvider>?, file: CValuesRef<GFile>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4877(css_provider?.getPointer(memScope).rawValue, file?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_provider_load_from_path(css_provider: CValuesRef<GtkCssProvider>?, @CCall.CString path: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge4878(css_provider?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_provider_load_from_resource(css_provider: CValuesRef<GtkCssProvider>?, @CCall.CString resource_path: String?): Unit {
    memScoped {
        return kniBridge4879(css_provider?.getPointer(memScope).rawValue, resource_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_css_provider_get_default(): CPointer<GtkCssProvider>? {
    return interpretCPointer<GtkCssProvider>(kniBridge4880())
}

fun gtk_css_provider_get_named(@CCall.CString name: String?, @CCall.CString variant: String?): CPointer<GtkCssProvider>? {
    memScoped {
        return interpretCPointer<GtkCssProvider>(kniBridge4881(name?.cstr?.getPointer(memScope).rawValue, variant?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_get_debug_flags(): guint {
    return kniBridge4882()
}

fun gtk_set_debug_flags(flags: guint): Unit {
    return kniBridge4883(flags)
}

fun gtk_drag_dest_set(widget: CValuesRef<GtkWidget>?, flags: GtkDestDefaults, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge4884(widget?.getPointer(memScope).rawValue, flags, targets?.getPointer(memScope).rawValue, n_targets, actions)
    }
}

fun gtk_drag_dest_set_proxy(widget: CValuesRef<GtkWidget>?, proxy_window: CValuesRef<GdkWindow>?, protocol: GdkDragProtocol, use_coordinates: gboolean): Unit {
    memScoped {
        return kniBridge4885(widget?.getPointer(memScope).rawValue, proxy_window?.getPointer(memScope).rawValue, protocol, use_coordinates)
    }
}

fun gtk_drag_dest_unset(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4886(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_dest_find_target(widget: CValuesRef<GtkWidget>?, context: CValuesRef<GdkDragContext>?, target_list: CValuesRef<GtkTargetList>?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge4887(widget?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, target_list?.getPointer(memScope).rawValue))
    }
}

fun gtk_drag_dest_get_target_list(widget: CValuesRef<GtkWidget>?): CPointer<GtkTargetList>? {
    memScoped {
        return interpretCPointer<GtkTargetList>(kniBridge4888(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_drag_dest_set_target_list(widget: CValuesRef<GtkWidget>?, target_list: CValuesRef<GtkTargetList>?): Unit {
    memScoped {
        return kniBridge4889(widget?.getPointer(memScope).rawValue, target_list?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_dest_add_text_targets(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4890(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_dest_add_image_targets(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4891(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_dest_add_uri_targets(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4892(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_dest_set_track_motion(widget: CValuesRef<GtkWidget>?, track_motion: gboolean): Unit {
    memScoped {
        return kniBridge4893(widget?.getPointer(memScope).rawValue, track_motion)
    }
}

fun gtk_drag_dest_get_track_motion(widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge4894(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_set(widget: CValuesRef<GtkWidget>?, start_button_mask: GdkModifierType, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge4895(widget?.getPointer(memScope).rawValue, start_button_mask, targets?.getPointer(memScope).rawValue, n_targets, actions)
    }
}

fun gtk_drag_source_unset(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4896(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_get_target_list(widget: CValuesRef<GtkWidget>?): CPointer<GtkTargetList>? {
    memScoped {
        return interpretCPointer<GtkTargetList>(kniBridge4897(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_drag_source_set_target_list(widget: CValuesRef<GtkWidget>?, target_list: CValuesRef<GtkTargetList>?): Unit {
    memScoped {
        return kniBridge4898(widget?.getPointer(memScope).rawValue, target_list?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_add_text_targets(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4899(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_add_image_targets(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4900(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_add_uri_targets(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4901(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_set_icon_pixbuf(widget: CValuesRef<GtkWidget>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge4902(widget?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_set_icon_stock(widget: CValuesRef<GtkWidget>?, @CCall.CString stock_id: String?): Unit {
    memScoped {
        return kniBridge4903(widget?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_set_icon_name(widget: CValuesRef<GtkWidget>?, @CCall.CString icon_name: String?): Unit {
    memScoped {
        return kniBridge4904(widget?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_drag_source_set_icon_gicon(widget: CValuesRef<GtkWidget>?, icon: CValuesRef<GIcon>?): Unit {
    memScoped {
        return kniBridge4905(widget?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue)
    }
}

fun gtk_drawing_area_get_type(): GType {
    return kniBridge4906()
}

fun gtk_drawing_area_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4907())
}

fun gtk_event_box_get_type(): GType {
    return kniBridge4908()
}

fun gtk_event_box_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4909())
}

fun gtk_event_box_get_visible_window(event_box: CValuesRef<GtkEventBox>?): gboolean {
    memScoped {
        return kniBridge4910(event_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_box_set_visible_window(event_box: CValuesRef<GtkEventBox>?, visible_window: gboolean): Unit {
    memScoped {
        return kniBridge4911(event_box?.getPointer(memScope).rawValue, visible_window)
    }
}

fun gtk_event_box_get_above_child(event_box: CValuesRef<GtkEventBox>?): gboolean {
    memScoped {
        return kniBridge4912(event_box?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_box_set_above_child(event_box: CValuesRef<GtkEventBox>?, above_child: gboolean): Unit {
    memScoped {
        return kniBridge4913(event_box?.getPointer(memScope).rawValue, above_child)
    }
}

fun gtk_event_controller_get_type(): GType {
    return kniBridge4914()
}

fun gtk_event_controller_get_widget(controller: CValuesRef<GtkEventController>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4915(controller?.getPointer(memScope).rawValue))
    }
}

fun gtk_event_controller_handle_event(controller: CValuesRef<GtkEventController>?, event: CValuesRef<GdkEvent>?): gboolean {
    memScoped {
        return kniBridge4916(controller?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_controller_reset(controller: CValuesRef<GtkEventController>?): Unit {
    memScoped {
        return kniBridge4917(controller?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_controller_get_propagation_phase(controller: CValuesRef<GtkEventController>?): GtkPropagationPhase {
    memScoped {
        return GtkPropagationPhase.byValue(kniBridge4918(controller?.getPointer(memScope).rawValue))
    }
}

fun gtk_event_controller_set_propagation_phase(controller: CValuesRef<GtkEventController>?, phase: GtkPropagationPhase): Unit {
    memScoped {
        return kniBridge4919(controller?.getPointer(memScope).rawValue, phase.value)
    }
}

fun gtk_event_controller_key_get_type(): GType {
    return kniBridge4920()
}

fun gtk_event_controller_key_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkEventController>? {
    memScoped {
        return interpretCPointer<GtkEventController>(kniBridge4921(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_event_controller_key_set_im_context(controller: CValuesRef<GtkEventControllerKey>?, im_context: CValuesRef<GtkIMContext>?): Unit {
    memScoped {
        return kniBridge4922(controller?.getPointer(memScope).rawValue, im_context?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_controller_key_get_im_context(controller: CValuesRef<GtkEventControllerKey>?): CPointer<GtkIMContext>? {
    memScoped {
        return interpretCPointer<GtkIMContext>(kniBridge4923(controller?.getPointer(memScope).rawValue))
    }
}

fun gtk_event_controller_key_forward(controller: CValuesRef<GtkEventControllerKey>?, widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge4924(controller?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_controller_key_get_group(controller: CValuesRef<GtkEventControllerKey>?): guint {
    memScoped {
        return kniBridge4925(controller?.getPointer(memScope).rawValue)
    }
}

fun gtk_event_controller_motion_get_type(): GType {
    return kniBridge4926()
}

fun gtk_event_controller_motion_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkEventController>? {
    memScoped {
        return interpretCPointer<GtkEventController>(kniBridge4927(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_event_controller_scroll_get_type(): GType {
    return kniBridge4928()
}

fun gtk_event_controller_scroll_new(widget: CValuesRef<GtkWidget>?, flags: GtkEventControllerScrollFlags): CPointer<GtkEventController>? {
    memScoped {
        return interpretCPointer<GtkEventController>(kniBridge4929(widget?.getPointer(memScope).rawValue, flags))
    }
}

fun gtk_event_controller_scroll_set_flags(controller: CValuesRef<GtkEventControllerScroll>?, flags: GtkEventControllerScrollFlags): Unit {
    memScoped {
        return kniBridge4930(controller?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_event_controller_scroll_get_flags(controller: CValuesRef<GtkEventControllerScroll>?): GtkEventControllerScrollFlags {
    memScoped {
        return kniBridge4931(controller?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_get_type(): GType {
    return kniBridge4932()
}

fun gtk_expander_new(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4933(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_expander_new_with_mnemonic(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4934(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_expander_set_expanded(expander: CValuesRef<GtkExpander>?, expanded: gboolean): Unit {
    memScoped {
        return kniBridge4935(expander?.getPointer(memScope).rawValue, expanded)
    }
}

fun gtk_expander_get_expanded(expander: CValuesRef<GtkExpander>?): gboolean {
    memScoped {
        return kniBridge4936(expander?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_set_spacing(expander: CValuesRef<GtkExpander>?, spacing: gint): Unit {
    memScoped {
        return kniBridge4937(expander?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_expander_get_spacing(expander: CValuesRef<GtkExpander>?): gint {
    memScoped {
        return kniBridge4938(expander?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_set_label(expander: CValuesRef<GtkExpander>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge4939(expander?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_get_label(expander: CValuesRef<GtkExpander>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4940(expander?.getPointer(memScope).rawValue))
    }
}

fun gtk_expander_set_use_underline(expander: CValuesRef<GtkExpander>?, use_underline: gboolean): Unit {
    memScoped {
        return kniBridge4941(expander?.getPointer(memScope).rawValue, use_underline)
    }
}

fun gtk_expander_get_use_underline(expander: CValuesRef<GtkExpander>?): gboolean {
    memScoped {
        return kniBridge4942(expander?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_set_use_markup(expander: CValuesRef<GtkExpander>?, use_markup: gboolean): Unit {
    memScoped {
        return kniBridge4943(expander?.getPointer(memScope).rawValue, use_markup)
    }
}

fun gtk_expander_get_use_markup(expander: CValuesRef<GtkExpander>?): gboolean {
    memScoped {
        return kniBridge4944(expander?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_set_label_widget(expander: CValuesRef<GtkExpander>?, label_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge4945(expander?.getPointer(memScope).rawValue, label_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_get_label_widget(expander: CValuesRef<GtkExpander>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge4946(expander?.getPointer(memScope).rawValue))
    }
}

fun gtk_expander_set_label_fill(expander: CValuesRef<GtkExpander>?, label_fill: gboolean): Unit {
    memScoped {
        return kniBridge4947(expander?.getPointer(memScope).rawValue, label_fill)
    }
}

fun gtk_expander_get_label_fill(expander: CValuesRef<GtkExpander>?): gboolean {
    memScoped {
        return kniBridge4948(expander?.getPointer(memScope).rawValue)
    }
}

fun gtk_expander_set_resize_toplevel(expander: CValuesRef<GtkExpander>?, resize_toplevel: gboolean): Unit {
    memScoped {
        return kniBridge4949(expander?.getPointer(memScope).rawValue, resize_toplevel)
    }
}

fun gtk_expander_get_resize_toplevel(expander: CValuesRef<GtkExpander>?): gboolean {
    memScoped {
        return kniBridge4950(expander?.getPointer(memScope).rawValue)
    }
}

fun gtk_fixed_get_type(): GType {
    return kniBridge4951()
}

fun gtk_fixed_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge4952())
}

fun gtk_fixed_put(fixed: CValuesRef<GtkFixed>?, widget: CValuesRef<GtkWidget>?, x: gint, y: gint): Unit {
    memScoped {
        return kniBridge4953(fixed?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_fixed_move(fixed: CValuesRef<GtkFixed>?, widget: CValuesRef<GtkWidget>?, x: gint, y: gint): Unit {
    memScoped {
        return kniBridge4954(fixed?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_file_filter_get_type(): GType {
    return kniBridge4955()
}

fun gtk_file_filter_new(): CPointer<GtkFileFilter>? {
    return interpretCPointer<GtkFileFilter>(kniBridge4956())
}

fun gtk_file_filter_set_name(filter: CValuesRef<GtkFileFilter>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge4957(filter?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_filter_get_name(filter: CValuesRef<GtkFileFilter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4958(filter?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_filter_add_mime_type(filter: CValuesRef<GtkFileFilter>?, @CCall.CString mime_type: String?): Unit {
    memScoped {
        return kniBridge4959(filter?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_filter_add_pattern(filter: CValuesRef<GtkFileFilter>?, @CCall.CString pattern: String?): Unit {
    memScoped {
        return kniBridge4960(filter?.getPointer(memScope).rawValue, pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_filter_add_pixbuf_formats(filter: CValuesRef<GtkFileFilter>?): Unit {
    memScoped {
        return kniBridge4961(filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_filter_add_custom(filter: CValuesRef<GtkFileFilter>?, needed: GtkFileFilterFlags, func: GtkFileFilterFunc?, data: gpointer?, notify: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge4962(filter?.getPointer(memScope).rawValue, needed, func.rawValue, data.rawValue, notify.rawValue)
    }
}

fun gtk_file_filter_get_needed(filter: CValuesRef<GtkFileFilter>?): GtkFileFilterFlags {
    memScoped {
        return kniBridge4963(filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_filter_filter(filter: CValuesRef<GtkFileFilter>?, filter_info: CValuesRef<GtkFileFilterInfo>?): gboolean {
    memScoped {
        return kniBridge4964(filter?.getPointer(memScope).rawValue, filter_info?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_filter_to_gvariant(filter: CValuesRef<GtkFileFilter>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge4965(filter?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_filter_new_from_gvariant(variant: CValuesRef<GVariant>?): CPointer<GtkFileFilter>? {
    memScoped {
        return interpretCPointer<GtkFileFilter>(kniBridge4966(variant?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_get_type(): GType {
    return kniBridge4967()
}

fun gtk_file_chooser_error_quark(): GQuark {
    return kniBridge4968()
}

fun gtk_file_chooser_set_action(chooser: CValuesRef<GtkFileChooser>?, action: GtkFileChooserAction): Unit {
    memScoped {
        return kniBridge4969(chooser?.getPointer(memScope).rawValue, action.value)
    }
}

fun gtk_file_chooser_get_action(chooser: CValuesRef<GtkFileChooser>?): GtkFileChooserAction {
    memScoped {
        return GtkFileChooserAction.byValue(kniBridge4970(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_local_only(chooser: CValuesRef<GtkFileChooser>?, local_only: gboolean): Unit {
    memScoped {
        return kniBridge4971(chooser?.getPointer(memScope).rawValue, local_only)
    }
}

fun gtk_file_chooser_get_local_only(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge4972(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_select_multiple(chooser: CValuesRef<GtkFileChooser>?, select_multiple: gboolean): Unit {
    memScoped {
        return kniBridge4973(chooser?.getPointer(memScope).rawValue, select_multiple)
    }
}

fun gtk_file_chooser_get_select_multiple(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge4974(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_show_hidden(chooser: CValuesRef<GtkFileChooser>?, show_hidden: gboolean): Unit {
    memScoped {
        return kniBridge4975(chooser?.getPointer(memScope).rawValue, show_hidden)
    }
}

fun gtk_file_chooser_get_show_hidden(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge4976(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_do_overwrite_confirmation(chooser: CValuesRef<GtkFileChooser>?, do_overwrite_confirmation: gboolean): Unit {
    memScoped {
        return kniBridge4977(chooser?.getPointer(memScope).rawValue, do_overwrite_confirmation)
    }
}

fun gtk_file_chooser_get_do_overwrite_confirmation(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge4978(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_create_folders(chooser: CValuesRef<GtkFileChooser>?, create_folders: gboolean): Unit {
    memScoped {
        return kniBridge4979(chooser?.getPointer(memScope).rawValue, create_folders)
    }
}

fun gtk_file_chooser_get_create_folders(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge4980(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_current_name(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge4981(chooser?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_current_name(chooser: CValuesRef<GtkFileChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4982(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_get_filename(chooser: CValuesRef<GtkFileChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4983(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_filename(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString filename: String?): gboolean {
    memScoped {
        return kniBridge4984(chooser?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_select_filename(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString filename: String?): gboolean {
    memScoped {
        return kniBridge4985(chooser?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_unselect_filename(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString filename: String?): Unit {
    memScoped {
        return kniBridge4986(chooser?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_select_all(chooser: CValuesRef<GtkFileChooser>?): Unit {
    memScoped {
        return kniBridge4987(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_unselect_all(chooser: CValuesRef<GtkFileChooser>?): Unit {
    memScoped {
        return kniBridge4988(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_filenames(chooser: CValuesRef<GtkFileChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge4989(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_current_folder(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString filename: String?): gboolean {
    memScoped {
        return kniBridge4990(chooser?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_current_folder(chooser: CValuesRef<GtkFileChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4991(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_get_uri(chooser: CValuesRef<GtkFileChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4992(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_uri(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString uri: String?): gboolean {
    memScoped {
        return kniBridge4993(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_select_uri(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString uri: String?): gboolean {
    memScoped {
        return kniBridge4994(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_unselect_uri(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString uri: String?): Unit {
    memScoped {
        return kniBridge4995(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_uris(chooser: CValuesRef<GtkFileChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge4996(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_current_folder_uri(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString uri: String?): gboolean {
    memScoped {
        return kniBridge4997(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_current_folder_uri(chooser: CValuesRef<GtkFileChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge4998(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_get_file(chooser: CValuesRef<GtkFileChooser>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge4999(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_file(chooser: CValuesRef<GtkFileChooser>?, file: CValuesRef<GFile>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5000(chooser?.getPointer(memScope).rawValue, file?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_select_file(chooser: CValuesRef<GtkFileChooser>?, file: CValuesRef<GFile>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5001(chooser?.getPointer(memScope).rawValue, file?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_unselect_file(chooser: CValuesRef<GtkFileChooser>?, file: CValuesRef<GFile>?): Unit {
    memScoped {
        return kniBridge5002(chooser?.getPointer(memScope).rawValue, file?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_files(chooser: CValuesRef<GtkFileChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge5003(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_current_folder_file(chooser: CValuesRef<GtkFileChooser>?, file: CValuesRef<GFile>?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5004(chooser?.getPointer(memScope).rawValue, file?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_current_folder_file(chooser: CValuesRef<GtkFileChooser>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge5005(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_preview_widget(chooser: CValuesRef<GtkFileChooser>?, preview_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5006(chooser?.getPointer(memScope).rawValue, preview_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_preview_widget(chooser: CValuesRef<GtkFileChooser>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5007(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_preview_widget_active(chooser: CValuesRef<GtkFileChooser>?, active: gboolean): Unit {
    memScoped {
        return kniBridge5008(chooser?.getPointer(memScope).rawValue, active)
    }
}

fun gtk_file_chooser_get_preview_widget_active(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge5009(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_use_preview_label(chooser: CValuesRef<GtkFileChooser>?, use_label: gboolean): Unit {
    memScoped {
        return kniBridge5010(chooser?.getPointer(memScope).rawValue, use_label)
    }
}

fun gtk_file_chooser_get_use_preview_label(chooser: CValuesRef<GtkFileChooser>?): gboolean {
    memScoped {
        return kniBridge5011(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_preview_filename(chooser: CValuesRef<GtkFileChooser>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5012(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_get_preview_uri(chooser: CValuesRef<GtkFileChooser>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5013(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_get_preview_file(chooser: CValuesRef<GtkFileChooser>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge5014(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_extra_widget(chooser: CValuesRef<GtkFileChooser>?, extra_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5015(chooser?.getPointer(memScope).rawValue, extra_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_extra_widget(chooser: CValuesRef<GtkFileChooser>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5016(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_add_filter(chooser: CValuesRef<GtkFileChooser>?, filter: CValuesRef<GtkFileFilter>?): Unit {
    memScoped {
        return kniBridge5017(chooser?.getPointer(memScope).rawValue, filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_remove_filter(chooser: CValuesRef<GtkFileChooser>?, filter: CValuesRef<GtkFileFilter>?): Unit {
    memScoped {
        return kniBridge5018(chooser?.getPointer(memScope).rawValue, filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_list_filters(chooser: CValuesRef<GtkFileChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge5019(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_set_filter(chooser: CValuesRef<GtkFileChooser>?, filter: CValuesRef<GtkFileFilter>?): Unit {
    memScoped {
        return kniBridge5020(chooser?.getPointer(memScope).rawValue, filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_filter(chooser: CValuesRef<GtkFileChooser>?): CPointer<GtkFileFilter>? {
    memScoped {
        return interpretCPointer<GtkFileFilter>(kniBridge5021(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_add_shortcut_folder(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString folder: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5022(chooser?.getPointer(memScope).rawValue, folder?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_remove_shortcut_folder(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString folder: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5023(chooser?.getPointer(memScope).rawValue, folder?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_list_shortcut_folders(chooser: CValuesRef<GtkFileChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge5024(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_add_shortcut_folder_uri(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5025(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_remove_shortcut_folder_uri(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5026(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_list_shortcut_folder_uris(chooser: CValuesRef<GtkFileChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge5027(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_add_choice(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString id: String?, @CCall.CString label: String?, options: CValuesRef<CPointerVar<ByteVar>>?, option_labels: CValuesRef<CPointerVar<ByteVar>>?): Unit {
    memScoped {
        return kniBridge5028(chooser?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue, options?.getPointer(memScope).rawValue, option_labels?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_remove_choice(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString id: String?): Unit {
    memScoped {
        return kniBridge5029(chooser?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_set_choice(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString id: String?, @CCall.CString option: String?): Unit {
    memScoped {
        return kniBridge5030(chooser?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue, option?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_get_choice(chooser: CValuesRef<GtkFileChooser>?, @CCall.CString id: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5031(chooser?.getPointer(memScope).rawValue, id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_button_get_type(): GType {
    return kniBridge5032()
}

fun gtk_file_chooser_button_new(@CCall.CString title: String?, action: GtkFileChooserAction): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5033(title?.cstr?.getPointer(memScope).rawValue, action.value))
    }
}

fun gtk_file_chooser_button_new_with_dialog(dialog: CValuesRef<GtkWidget>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5034(dialog?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_button_get_title(button: CValuesRef<GtkFileChooserButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5035(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_button_set_title(button: CValuesRef<GtkFileChooserButton>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge5036(button?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_button_get_width_chars(button: CValuesRef<GtkFileChooserButton>?): gint {
    memScoped {
        return kniBridge5037(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_button_set_width_chars(button: CValuesRef<GtkFileChooserButton>?, n_chars: gint): Unit {
    memScoped {
        return kniBridge5038(button?.getPointer(memScope).rawValue, n_chars)
    }
}

fun gtk_file_chooser_button_get_focus_on_click(button: CValuesRef<GtkFileChooserButton>?): gboolean {
    memScoped {
        return kniBridge5039(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_button_set_focus_on_click(button: CValuesRef<GtkFileChooserButton>?, focus_on_click: gboolean): Unit {
    memScoped {
        return kniBridge5040(button?.getPointer(memScope).rawValue, focus_on_click)
    }
}

fun gtk_file_chooser_dialog_get_type(): GType {
    return kniBridge5041()
}

@CCall("knifunptr_libgtk358")
external fun gtk_file_chooser_dialog_new(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?, action: GtkFileChooserAction, @CCall.CString first_button_text: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_native_dialog_get_type(): GType {
    return kniBridge5042()
}

fun glib_autoptr_clear_GtkNativeDialog(_ptr: CValuesRef<GtkNativeDialog>?): Unit {
    memScoped {
        return kniBridge5043(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkNativeDialog(_ptr: CValuesRef<CPointerVar<GtkNativeDialog>>?): Unit {
    memScoped {
        return kniBridge5044(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkNativeDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge5045(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkNativeDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge5046(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkNativeDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge5047(_q?.getPointer(memScope).rawValue)
    }
}

fun GTK_NATIVE_DIALOG(ptr: gpointer?): CPointer<GtkNativeDialog>? {
    return interpretCPointer<GtkNativeDialog>(kniBridge5048(ptr.rawValue))
}

fun GTK_NATIVE_DIALOG_CLASS(ptr: gpointer?): CPointer<GtkNativeDialogClass>? {
    return interpretCPointer<GtkNativeDialogClass>(kniBridge5049(ptr.rawValue))
}

fun GTK_IS_NATIVE_DIALOG(ptr: gpointer?): gboolean {
    return kniBridge5050(ptr.rawValue)
}

fun GTK_IS_NATIVE_DIALOG_CLASS(ptr: gpointer?): gboolean {
    return kniBridge5051(ptr.rawValue)
}

fun GTK_NATIVE_DIALOG_GET_CLASS(ptr: gpointer?): CPointer<GtkNativeDialogClass>? {
    return interpretCPointer<GtkNativeDialogClass>(kniBridge5052(ptr.rawValue))
}

fun gtk_native_dialog_show(self: CValuesRef<GtkNativeDialog>?): Unit {
    memScoped {
        return kniBridge5053(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_hide(self: CValuesRef<GtkNativeDialog>?): Unit {
    memScoped {
        return kniBridge5054(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_destroy(self: CValuesRef<GtkNativeDialog>?): Unit {
    memScoped {
        return kniBridge5055(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_get_visible(self: CValuesRef<GtkNativeDialog>?): gboolean {
    memScoped {
        return kniBridge5056(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_set_modal(self: CValuesRef<GtkNativeDialog>?, modal: gboolean): Unit {
    memScoped {
        return kniBridge5057(self?.getPointer(memScope).rawValue, modal)
    }
}

fun gtk_native_dialog_get_modal(self: CValuesRef<GtkNativeDialog>?): gboolean {
    memScoped {
        return kniBridge5058(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_set_title(self: CValuesRef<GtkNativeDialog>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge5059(self?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_get_title(self: CValuesRef<GtkNativeDialog>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5060(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_native_dialog_set_transient_for(self: CValuesRef<GtkNativeDialog>?, parent: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge5061(self?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_native_dialog_get_transient_for(self: CValuesRef<GtkNativeDialog>?): CPointer<GtkWindow>? {
    memScoped {
        return interpretCPointer<GtkWindow>(kniBridge5062(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_native_dialog_run(self: CValuesRef<GtkNativeDialog>?): gint {
    memScoped {
        return kniBridge5063(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_native_get_type(): GType {
    return kniBridge5064()
}

fun glib_autoptr_clear_GtkFileChooserNative(_ptr: CValuesRef<GtkFileChooserNative>?): Unit {
    memScoped {
        return kniBridge5065(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFileChooserNative(_ptr: CValuesRef<CPointerVar<GtkFileChooserNative>>?): Unit {
    memScoped {
        return kniBridge5066(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFileChooserNative(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge5067(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFileChooserNative(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge5068(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFileChooserNative(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge5069(_q?.getPointer(memScope).rawValue)
    }
}

fun GTK_FILE_CHOOSER_NATIVE(ptr: gpointer?): CPointer<GtkFileChooserNative>? {
    return interpretCPointer<GtkFileChooserNative>(kniBridge5070(ptr.rawValue))
}

fun GTK_IS_FILE_CHOOSER_NATIVE(ptr: gpointer?): gboolean {
    return kniBridge5071(ptr.rawValue)
}

fun gtk_file_chooser_native_new(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?, action: GtkFileChooserAction, @CCall.CString accept_label: String?, @CCall.CString cancel_label: String?): CPointer<GtkFileChooserNative>? {
    memScoped {
        return interpretCPointer<GtkFileChooserNative>(kniBridge5072(title?.cstr?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, action.value, accept_label?.cstr?.getPointer(memScope).rawValue, cancel_label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_native_get_accept_label(self: CValuesRef<GtkFileChooserNative>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5073(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_native_set_accept_label(self: CValuesRef<GtkFileChooserNative>?, @CCall.CString accept_label: String?): Unit {
    memScoped {
        return kniBridge5074(self?.getPointer(memScope).rawValue, accept_label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_native_get_cancel_label(self: CValuesRef<GtkFileChooserNative>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5075(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_file_chooser_native_set_cancel_label(self: CValuesRef<GtkFileChooserNative>?, @CCall.CString cancel_label: String?): Unit {
    memScoped {
        return kniBridge5076(self?.getPointer(memScope).rawValue, cancel_label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_file_chooser_widget_get_type(): GType {
    return kniBridge5077()
}

fun gtk_file_chooser_widget_new(action: GtkFileChooserAction): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5078(action.value))
}

fun gtk_flow_box_child_get_type(): GType {
    return kniBridge5079()
}

fun gtk_flow_box_child_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5080())
}

fun gtk_flow_box_child_get_index(child: CValuesRef<GtkFlowBoxChild>?): gint {
    memScoped {
        return kniBridge5081(child?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_child_is_selected(child: CValuesRef<GtkFlowBoxChild>?): gboolean {
    memScoped {
        return kniBridge5082(child?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_child_changed(child: CValuesRef<GtkFlowBoxChild>?): Unit {
    memScoped {
        return kniBridge5083(child?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_get_type(): GType {
    return kniBridge5084()
}

fun gtk_flow_box_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5085())
}

fun gtk_flow_box_bind_model(box: CValuesRef<GtkFlowBox>?, model: CValuesRef<GListModel>?, create_widget_func: GtkFlowBoxCreateWidgetFunc?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5086(box?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue, create_widget_func.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun gtk_flow_box_set_homogeneous(box: CValuesRef<GtkFlowBox>?, homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge5087(box?.getPointer(memScope).rawValue, homogeneous)
    }
}

fun gtk_flow_box_get_homogeneous(box: CValuesRef<GtkFlowBox>?): gboolean {
    memScoped {
        return kniBridge5088(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_row_spacing(box: CValuesRef<GtkFlowBox>?, spacing: guint): Unit {
    memScoped {
        return kniBridge5089(box?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_flow_box_get_row_spacing(box: CValuesRef<GtkFlowBox>?): guint {
    memScoped {
        return kniBridge5090(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_column_spacing(box: CValuesRef<GtkFlowBox>?, spacing: guint): Unit {
    memScoped {
        return kniBridge5091(box?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_flow_box_get_column_spacing(box: CValuesRef<GtkFlowBox>?): guint {
    memScoped {
        return kniBridge5092(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_min_children_per_line(box: CValuesRef<GtkFlowBox>?, n_children: guint): Unit {
    memScoped {
        return kniBridge5093(box?.getPointer(memScope).rawValue, n_children)
    }
}

fun gtk_flow_box_get_min_children_per_line(box: CValuesRef<GtkFlowBox>?): guint {
    memScoped {
        return kniBridge5094(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_max_children_per_line(box: CValuesRef<GtkFlowBox>?, n_children: guint): Unit {
    memScoped {
        return kniBridge5095(box?.getPointer(memScope).rawValue, n_children)
    }
}

fun gtk_flow_box_get_max_children_per_line(box: CValuesRef<GtkFlowBox>?): guint {
    memScoped {
        return kniBridge5096(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_activate_on_single_click(box: CValuesRef<GtkFlowBox>?, single: gboolean): Unit {
    memScoped {
        return kniBridge5097(box?.getPointer(memScope).rawValue, single)
    }
}

fun gtk_flow_box_get_activate_on_single_click(box: CValuesRef<GtkFlowBox>?): gboolean {
    memScoped {
        return kniBridge5098(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_insert(box: CValuesRef<GtkFlowBox>?, widget: CValuesRef<GtkWidget>?, position: gint): Unit {
    memScoped {
        return kniBridge5099(box?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_flow_box_get_child_at_index(box: CValuesRef<GtkFlowBox>?, idx: gint): CPointer<GtkFlowBoxChild>? {
    memScoped {
        return interpretCPointer<GtkFlowBoxChild>(kniBridge5100(box?.getPointer(memScope).rawValue, idx))
    }
}

fun gtk_flow_box_get_child_at_pos(box: CValuesRef<GtkFlowBox>?, x: gint, y: gint): CPointer<GtkFlowBoxChild>? {
    memScoped {
        return interpretCPointer<GtkFlowBoxChild>(kniBridge5101(box?.getPointer(memScope).rawValue, x, y))
    }
}

fun gtk_flow_box_selected_foreach(box: CValuesRef<GtkFlowBox>?, func: GtkFlowBoxForeachFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge5102(box?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun gtk_flow_box_get_selected_children(box: CValuesRef<GtkFlowBox>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5103(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_flow_box_select_child(box: CValuesRef<GtkFlowBox>?, child: CValuesRef<GtkFlowBoxChild>?): Unit {
    memScoped {
        return kniBridge5104(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_unselect_child(box: CValuesRef<GtkFlowBox>?, child: CValuesRef<GtkFlowBoxChild>?): Unit {
    memScoped {
        return kniBridge5105(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_select_all(box: CValuesRef<GtkFlowBox>?): Unit {
    memScoped {
        return kniBridge5106(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_unselect_all(box: CValuesRef<GtkFlowBox>?): Unit {
    memScoped {
        return kniBridge5107(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_selection_mode(box: CValuesRef<GtkFlowBox>?, mode: GtkSelectionMode): Unit {
    memScoped {
        return kniBridge5108(box?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_flow_box_get_selection_mode(box: CValuesRef<GtkFlowBox>?): GtkSelectionMode {
    memScoped {
        return GtkSelectionMode.byValue(kniBridge5109(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_flow_box_set_hadjustment(box: CValuesRef<GtkFlowBox>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge5110(box?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_vadjustment(box: CValuesRef<GtkFlowBox>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge5111(box?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_filter_func(box: CValuesRef<GtkFlowBox>?, filter_func: GtkFlowBoxFilterFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5112(box?.getPointer(memScope).rawValue, filter_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_flow_box_invalidate_filter(box: CValuesRef<GtkFlowBox>?): Unit {
    memScoped {
        return kniBridge5113(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_flow_box_set_sort_func(box: CValuesRef<GtkFlowBox>?, sort_func: GtkFlowBoxSortFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5114(box?.getPointer(memScope).rawValue, sort_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_flow_box_invalidate_sort(box: CValuesRef<GtkFlowBox>?): Unit {
    memScoped {
        return kniBridge5115(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_get_type(): GType {
    return kniBridge5116()
}

fun gtk_font_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5117())
}

fun gtk_font_button_new_with_font(@CCall.CString fontname: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5118(fontname?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_button_get_title(font_button: CValuesRef<GtkFontButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5119(font_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_button_set_title(font_button: CValuesRef<GtkFontButton>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge5120(font_button?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_get_use_font(font_button: CValuesRef<GtkFontButton>?): gboolean {
    memScoped {
        return kniBridge5121(font_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_set_use_font(font_button: CValuesRef<GtkFontButton>?, use_font: gboolean): Unit {
    memScoped {
        return kniBridge5122(font_button?.getPointer(memScope).rawValue, use_font)
    }
}

fun gtk_font_button_get_use_size(font_button: CValuesRef<GtkFontButton>?): gboolean {
    memScoped {
        return kniBridge5123(font_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_set_use_size(font_button: CValuesRef<GtkFontButton>?, use_size: gboolean): Unit {
    memScoped {
        return kniBridge5124(font_button?.getPointer(memScope).rawValue, use_size)
    }
}

fun gtk_font_button_get_font_name(font_button: CValuesRef<GtkFontButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5125(font_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_button_set_font_name(font_button: CValuesRef<GtkFontButton>?, @CCall.CString fontname: String?): gboolean {
    memScoped {
        return kniBridge5126(font_button?.getPointer(memScope).rawValue, fontname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_get_show_style(font_button: CValuesRef<GtkFontButton>?): gboolean {
    memScoped {
        return kniBridge5127(font_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_set_show_style(font_button: CValuesRef<GtkFontButton>?, show_style: gboolean): Unit {
    memScoped {
        return kniBridge5128(font_button?.getPointer(memScope).rawValue, show_style)
    }
}

fun gtk_font_button_get_show_size(font_button: CValuesRef<GtkFontButton>?): gboolean {
    memScoped {
        return kniBridge5129(font_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_button_set_show_size(font_button: CValuesRef<GtkFontButton>?, show_size: gboolean): Unit {
    memScoped {
        return kniBridge5130(font_button?.getPointer(memScope).rawValue, show_size)
    }
}

fun gtk_font_chooser_get_type(): GType {
    return kniBridge5131()
}

fun gtk_font_chooser_get_font_family(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<PangoFontFamily>? {
    memScoped {
        return interpretCPointer<PangoFontFamily>(kniBridge5132(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_get_font_face(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<PangoFontFace>? {
    memScoped {
        return interpretCPointer<PangoFontFace>(kniBridge5133(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_get_font_size(fontchooser: CValuesRef<GtkFontChooser>?): gint {
    memScoped {
        return kniBridge5134(fontchooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_get_font_desc(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<PangoFontDescription>? {
    memScoped {
        return interpretCPointer<PangoFontDescription>(kniBridge5135(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_set_font_desc(fontchooser: CValuesRef<GtkFontChooser>?, font_desc: CValuesRef<PangoFontDescription>?): Unit {
    memScoped {
        return kniBridge5136(fontchooser?.getPointer(memScope).rawValue, font_desc?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_get_font(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5137(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_set_font(fontchooser: CValuesRef<GtkFontChooser>?, @CCall.CString fontname: String?): Unit {
    memScoped {
        return kniBridge5138(fontchooser?.getPointer(memScope).rawValue, fontname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_get_preview_text(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5139(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_set_preview_text(fontchooser: CValuesRef<GtkFontChooser>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge5140(fontchooser?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_get_show_preview_entry(fontchooser: CValuesRef<GtkFontChooser>?): gboolean {
    memScoped {
        return kniBridge5141(fontchooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_set_show_preview_entry(fontchooser: CValuesRef<GtkFontChooser>?, show_preview_entry: gboolean): Unit {
    memScoped {
        return kniBridge5142(fontchooser?.getPointer(memScope).rawValue, show_preview_entry)
    }
}

fun gtk_font_chooser_set_filter_func(fontchooser: CValuesRef<GtkFontChooser>?, filter: GtkFontFilterFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5143(fontchooser?.getPointer(memScope).rawValue, filter.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_font_chooser_set_font_map(fontchooser: CValuesRef<GtkFontChooser>?, fontmap: CValuesRef<PangoFontMap>?): Unit {
    memScoped {
        return kniBridge5144(fontchooser?.getPointer(memScope).rawValue, fontmap?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_get_font_map(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<PangoFontMap>? {
    memScoped {
        return interpretCPointer<PangoFontMap>(kniBridge5145(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_set_level(fontchooser: CValuesRef<GtkFontChooser>?, level: GtkFontChooserLevel): Unit {
    memScoped {
        return kniBridge5146(fontchooser?.getPointer(memScope).rawValue, level)
    }
}

fun gtk_font_chooser_get_level(fontchooser: CValuesRef<GtkFontChooser>?): GtkFontChooserLevel {
    memScoped {
        return kniBridge5147(fontchooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_get_font_features(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5148(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_get_language(fontchooser: CValuesRef<GtkFontChooser>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5149(fontchooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_set_language(fontchooser: CValuesRef<GtkFontChooser>?, @CCall.CString language: String?): Unit {
    memScoped {
        return kniBridge5150(fontchooser?.getPointer(memScope).rawValue, language?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_font_chooser_dialog_get_type(): GType {
    return kniBridge5151()
}

fun gtk_font_chooser_dialog_new(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5152(title?.cstr?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue))
    }
}

fun gtk_font_chooser_widget_get_type(): GType {
    return kniBridge5153()
}

fun gtk_font_chooser_widget_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5154())
}

fun gtk_gesture_get_type(): GType {
    return kniBridge5155()
}

fun gtk_gesture_get_device(gesture: CValuesRef<GtkGesture>?): CPointer<GdkDevice>? {
    memScoped {
        return interpretCPointer<GdkDevice>(kniBridge5156(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_set_state(gesture: CValuesRef<GtkGesture>?, state: GtkEventSequenceState): gboolean {
    memScoped {
        return kniBridge5157(gesture?.getPointer(memScope).rawValue, state.value)
    }
}

fun gtk_gesture_get_sequence_state(gesture: CValuesRef<GtkGesture>?, sequence: CValuesRef<GdkEventSequence>?): GtkEventSequenceState {
    memScoped {
        return GtkEventSequenceState.byValue(kniBridge5158(gesture?.getPointer(memScope).rawValue, sequence?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_set_sequence_state(gesture: CValuesRef<GtkGesture>?, sequence: CValuesRef<GdkEventSequence>?, state: GtkEventSequenceState): gboolean {
    memScoped {
        return kniBridge5159(gesture?.getPointer(memScope).rawValue, sequence?.getPointer(memScope).rawValue, state.value)
    }
}

fun gtk_gesture_get_sequences(gesture: CValuesRef<GtkGesture>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5160(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_get_last_updated_sequence(gesture: CValuesRef<GtkGesture>?): CPointer<GdkEventSequence>? {
    memScoped {
        return interpretCPointer<GdkEventSequence>(kniBridge5161(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_handles_sequence(gesture: CValuesRef<GtkGesture>?, sequence: CValuesRef<GdkEventSequence>?): gboolean {
    memScoped {
        return kniBridge5162(gesture?.getPointer(memScope).rawValue, sequence?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_get_last_event(gesture: CValuesRef<GtkGesture>?, sequence: CValuesRef<GdkEventSequence>?): CPointer<GdkEvent>? {
    memScoped {
        return interpretCPointer<GdkEvent>(kniBridge5163(gesture?.getPointer(memScope).rawValue, sequence?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_get_point(gesture: CValuesRef<GtkGesture>?, sequence: CValuesRef<GdkEventSequence>?, x: CValuesRef<gdoubleVar>?, y: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5164(gesture?.getPointer(memScope).rawValue, sequence?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_get_bounding_box(gesture: CValuesRef<GtkGesture>?, rect: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge5165(gesture?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_get_bounding_box_center(gesture: CValuesRef<GtkGesture>?, x: CValuesRef<gdoubleVar>?, y: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5166(gesture?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_is_active(gesture: CValuesRef<GtkGesture>?): gboolean {
    memScoped {
        return kniBridge5167(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_is_recognized(gesture: CValuesRef<GtkGesture>?): gboolean {
    memScoped {
        return kniBridge5168(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_get_window(gesture: CValuesRef<GtkGesture>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge5169(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_set_window(gesture: CValuesRef<GtkGesture>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge5170(gesture?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_group(group_gesture: CValuesRef<GtkGesture>?, gesture: CValuesRef<GtkGesture>?): Unit {
    memScoped {
        return kniBridge5171(group_gesture?.getPointer(memScope).rawValue, gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_ungroup(gesture: CValuesRef<GtkGesture>?): Unit {
    memScoped {
        return kniBridge5172(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_get_group(gesture: CValuesRef<GtkGesture>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5173(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_is_grouped_with(gesture: CValuesRef<GtkGesture>?, other: CValuesRef<GtkGesture>?): gboolean {
    memScoped {
        return kniBridge5174(gesture?.getPointer(memScope).rawValue, other?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_single_get_type(): GType {
    return kniBridge5175()
}

fun gtk_gesture_single_get_touch_only(gesture: CValuesRef<GtkGestureSingle>?): gboolean {
    memScoped {
        return kniBridge5176(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_single_set_touch_only(gesture: CValuesRef<GtkGestureSingle>?, touch_only: gboolean): Unit {
    memScoped {
        return kniBridge5177(gesture?.getPointer(memScope).rawValue, touch_only)
    }
}

fun gtk_gesture_single_get_exclusive(gesture: CValuesRef<GtkGestureSingle>?): gboolean {
    memScoped {
        return kniBridge5178(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_single_set_exclusive(gesture: CValuesRef<GtkGestureSingle>?, exclusive: gboolean): Unit {
    memScoped {
        return kniBridge5179(gesture?.getPointer(memScope).rawValue, exclusive)
    }
}

fun gtk_gesture_single_get_button(gesture: CValuesRef<GtkGestureSingle>?): guint {
    memScoped {
        return kniBridge5180(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_single_set_button(gesture: CValuesRef<GtkGestureSingle>?, button: guint): Unit {
    memScoped {
        return kniBridge5181(gesture?.getPointer(memScope).rawValue, button)
    }
}

fun gtk_gesture_single_get_current_button(gesture: CValuesRef<GtkGestureSingle>?): guint {
    memScoped {
        return kniBridge5182(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_single_get_current_sequence(gesture: CValuesRef<GtkGestureSingle>?): CPointer<GdkEventSequence>? {
    memScoped {
        return interpretCPointer<GdkEventSequence>(kniBridge5183(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_drag_get_type(): GType {
    return kniBridge5184()
}

fun gtk_gesture_drag_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5185(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_drag_get_start_point(gesture: CValuesRef<GtkGestureDrag>?, x: CValuesRef<gdoubleVar>?, y: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5186(gesture?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_drag_get_offset(gesture: CValuesRef<GtkGestureDrag>?, x: CValuesRef<gdoubleVar>?, y: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5187(gesture?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_long_press_get_type(): GType {
    return kniBridge5188()
}

fun gtk_gesture_long_press_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5189(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_multi_press_get_type(): GType {
    return kniBridge5190()
}

fun gtk_gesture_multi_press_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5191(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_multi_press_set_area(gesture: CValuesRef<GtkGestureMultiPress>?, rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge5192(gesture?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_multi_press_get_area(gesture: CValuesRef<GtkGestureMultiPress>?, rect: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge5193(gesture?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_pan_get_type(): GType {
    return kniBridge5194()
}

fun gtk_gesture_pan_new(widget: CValuesRef<GtkWidget>?, orientation: GtkOrientation): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5195(widget?.getPointer(memScope).rawValue, orientation.value))
    }
}

fun gtk_gesture_pan_get_orientation(gesture: CValuesRef<GtkGesturePan>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge5196(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_pan_set_orientation(gesture: CValuesRef<GtkGesturePan>?, orientation: GtkOrientation): Unit {
    memScoped {
        return kniBridge5197(gesture?.getPointer(memScope).rawValue, orientation.value)
    }
}

fun gtk_gesture_rotate_get_type(): GType {
    return kniBridge5198()
}

fun gtk_gesture_rotate_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5199(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_rotate_get_angle_delta(gesture: CValuesRef<GtkGestureRotate>?): gdouble {
    memScoped {
        return kniBridge5200(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_stylus_get_type(): GType {
    return kniBridge5201()
}

fun gtk_gesture_stylus_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5202(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_stylus_get_axis(gesture: CValuesRef<GtkGestureStylus>?, axis: GdkAxisUse, value: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5203(gesture?.getPointer(memScope).rawValue, axis.value, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_stylus_get_axes(gesture: CValuesRef<GtkGestureStylus>?, axes: CValuesRef<GdkAxisUse.Var>?, values: CValuesRef<CPointerVar<gdoubleVar>>?): gboolean {
    memScoped {
        return kniBridge5204(gesture?.getPointer(memScope).rawValue, axes?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_stylus_get_device_tool(gesture: CValuesRef<GtkGestureStylus>?): CPointer<GdkDeviceTool>? {
    memScoped {
        return interpretCPointer<GdkDeviceTool>(kniBridge5205(gesture?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_swipe_get_type(): GType {
    return kniBridge5206()
}

fun gtk_gesture_swipe_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5207(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_swipe_get_velocity(gesture: CValuesRef<GtkGestureSwipe>?, velocity_x: CValuesRef<gdoubleVar>?, velocity_y: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5208(gesture?.getPointer(memScope).rawValue, velocity_x?.getPointer(memScope).rawValue, velocity_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_gesture_zoom_get_type(): GType {
    return kniBridge5209()
}

fun gtk_gesture_zoom_new(widget: CValuesRef<GtkWidget>?): CPointer<GtkGesture>? {
    memScoped {
        return interpretCPointer<GtkGesture>(kniBridge5210(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_gesture_zoom_get_scale_delta(gesture: CValuesRef<GtkGestureZoom>?): gdouble {
    memScoped {
        return kniBridge5211(gesture?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_get_type(): GType {
    return kniBridge5212()
}

fun gtk_gl_area_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5213())
}

fun gtk_gl_area_set_use_es(area: CValuesRef<GtkGLArea>?, use_es: gboolean): Unit {
    memScoped {
        return kniBridge5214(area?.getPointer(memScope).rawValue, use_es)
    }
}

fun gtk_gl_area_get_use_es(area: CValuesRef<GtkGLArea>?): gboolean {
    memScoped {
        return kniBridge5215(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_set_required_version(area: CValuesRef<GtkGLArea>?, major: gint, minor: gint): Unit {
    memScoped {
        return kniBridge5216(area?.getPointer(memScope).rawValue, major, minor)
    }
}

fun gtk_gl_area_get_required_version(area: CValuesRef<GtkGLArea>?, major: CValuesRef<gintVar>?, minor: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge5217(area?.getPointer(memScope).rawValue, major?.getPointer(memScope).rawValue, minor?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_get_has_alpha(area: CValuesRef<GtkGLArea>?): gboolean {
    memScoped {
        return kniBridge5218(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_set_has_alpha(area: CValuesRef<GtkGLArea>?, has_alpha: gboolean): Unit {
    memScoped {
        return kniBridge5219(area?.getPointer(memScope).rawValue, has_alpha)
    }
}

fun gtk_gl_area_get_has_depth_buffer(area: CValuesRef<GtkGLArea>?): gboolean {
    memScoped {
        return kniBridge5220(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_set_has_depth_buffer(area: CValuesRef<GtkGLArea>?, has_depth_buffer: gboolean): Unit {
    memScoped {
        return kniBridge5221(area?.getPointer(memScope).rawValue, has_depth_buffer)
    }
}

fun gtk_gl_area_get_has_stencil_buffer(area: CValuesRef<GtkGLArea>?): gboolean {
    memScoped {
        return kniBridge5222(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_set_has_stencil_buffer(area: CValuesRef<GtkGLArea>?, has_stencil_buffer: gboolean): Unit {
    memScoped {
        return kniBridge5223(area?.getPointer(memScope).rawValue, has_stencil_buffer)
    }
}

fun gtk_gl_area_get_auto_render(area: CValuesRef<GtkGLArea>?): gboolean {
    memScoped {
        return kniBridge5224(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_set_auto_render(area: CValuesRef<GtkGLArea>?, auto_render: gboolean): Unit {
    memScoped {
        return kniBridge5225(area?.getPointer(memScope).rawValue, auto_render)
    }
}

fun gtk_gl_area_queue_render(area: CValuesRef<GtkGLArea>?): Unit {
    memScoped {
        return kniBridge5226(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_get_context(area: CValuesRef<GtkGLArea>?): CPointer<GdkGLContext>? {
    memScoped {
        return interpretCPointer<GdkGLContext>(kniBridge5227(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_gl_area_make_current(area: CValuesRef<GtkGLArea>?): Unit {
    memScoped {
        return kniBridge5228(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_attach_buffers(area: CValuesRef<GtkGLArea>?): Unit {
    memScoped {
        return kniBridge5229(area?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_set_error(area: CValuesRef<GtkGLArea>?, error: CValuesRef<GError>?): Unit {
    memScoped {
        return kniBridge5230(area?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_gl_area_get_error(area: CValuesRef<GtkGLArea>?): CPointer<GError>? {
    memScoped {
        return interpretCPointer<GError>(kniBridge5231(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_grid_get_type(): GType {
    return kniBridge5232()
}

fun gtk_grid_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5233())
}

fun gtk_grid_attach(grid: CValuesRef<GtkGrid>?, child: CValuesRef<GtkWidget>?, left: gint, top: gint, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge5234(grid?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, left, top, width, height)
    }
}

fun gtk_grid_attach_next_to(grid: CValuesRef<GtkGrid>?, child: CValuesRef<GtkWidget>?, sibling: CValuesRef<GtkWidget>?, side: GtkPositionType, width: gint, height: gint): Unit {
    memScoped {
        return kniBridge5235(grid?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, side.value, width, height)
    }
}

fun gtk_grid_get_child_at(grid: CValuesRef<GtkGrid>?, left: gint, top: gint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5236(grid?.getPointer(memScope).rawValue, left, top))
    }
}

fun gtk_grid_insert_row(grid: CValuesRef<GtkGrid>?, position: gint): Unit {
    memScoped {
        return kniBridge5237(grid?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_grid_insert_column(grid: CValuesRef<GtkGrid>?, position: gint): Unit {
    memScoped {
        return kniBridge5238(grid?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_grid_remove_row(grid: CValuesRef<GtkGrid>?, position: gint): Unit {
    memScoped {
        return kniBridge5239(grid?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_grid_remove_column(grid: CValuesRef<GtkGrid>?, position: gint): Unit {
    memScoped {
        return kniBridge5240(grid?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_grid_insert_next_to(grid: CValuesRef<GtkGrid>?, sibling: CValuesRef<GtkWidget>?, side: GtkPositionType): Unit {
    memScoped {
        return kniBridge5241(grid?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue, side.value)
    }
}

fun gtk_grid_set_row_homogeneous(grid: CValuesRef<GtkGrid>?, homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge5242(grid?.getPointer(memScope).rawValue, homogeneous)
    }
}

fun gtk_grid_get_row_homogeneous(grid: CValuesRef<GtkGrid>?): gboolean {
    memScoped {
        return kniBridge5243(grid?.getPointer(memScope).rawValue)
    }
}

fun gtk_grid_set_row_spacing(grid: CValuesRef<GtkGrid>?, spacing: guint): Unit {
    memScoped {
        return kniBridge5244(grid?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_grid_get_row_spacing(grid: CValuesRef<GtkGrid>?): guint {
    memScoped {
        return kniBridge5245(grid?.getPointer(memScope).rawValue)
    }
}

fun gtk_grid_set_column_homogeneous(grid: CValuesRef<GtkGrid>?, homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge5246(grid?.getPointer(memScope).rawValue, homogeneous)
    }
}

fun gtk_grid_get_column_homogeneous(grid: CValuesRef<GtkGrid>?): gboolean {
    memScoped {
        return kniBridge5247(grid?.getPointer(memScope).rawValue)
    }
}

fun gtk_grid_set_column_spacing(grid: CValuesRef<GtkGrid>?, spacing: guint): Unit {
    memScoped {
        return kniBridge5248(grid?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_grid_get_column_spacing(grid: CValuesRef<GtkGrid>?): guint {
    memScoped {
        return kniBridge5249(grid?.getPointer(memScope).rawValue)
    }
}

fun gtk_grid_set_row_baseline_position(grid: CValuesRef<GtkGrid>?, row: gint, pos: GtkBaselinePosition): Unit {
    memScoped {
        return kniBridge5250(grid?.getPointer(memScope).rawValue, row, pos.value)
    }
}

fun gtk_grid_get_row_baseline_position(grid: CValuesRef<GtkGrid>?, row: gint): GtkBaselinePosition {
    memScoped {
        return GtkBaselinePosition.byValue(kniBridge5251(grid?.getPointer(memScope).rawValue, row))
    }
}

fun gtk_grid_set_baseline_row(grid: CValuesRef<GtkGrid>?, row: gint): Unit {
    memScoped {
        return kniBridge5252(grid?.getPointer(memScope).rawValue, row)
    }
}

fun gtk_grid_get_baseline_row(grid: CValuesRef<GtkGrid>?): gint {
    memScoped {
        return kniBridge5253(grid?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_get_type(): GType {
    return kniBridge5254()
}

fun gtk_header_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5255())
}

fun gtk_header_bar_set_title(bar: CValuesRef<GtkHeaderBar>?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge5256(bar?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_get_title(bar: CValuesRef<GtkHeaderBar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5257(bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_header_bar_set_subtitle(bar: CValuesRef<GtkHeaderBar>?, @CCall.CString subtitle: String?): Unit {
    memScoped {
        return kniBridge5258(bar?.getPointer(memScope).rawValue, subtitle?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_get_subtitle(bar: CValuesRef<GtkHeaderBar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5259(bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_header_bar_set_custom_title(bar: CValuesRef<GtkHeaderBar>?, title_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5260(bar?.getPointer(memScope).rawValue, title_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_get_custom_title(bar: CValuesRef<GtkHeaderBar>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5261(bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_header_bar_pack_start(bar: CValuesRef<GtkHeaderBar>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5262(bar?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_pack_end(bar: CValuesRef<GtkHeaderBar>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5263(bar?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_get_show_close_button(bar: CValuesRef<GtkHeaderBar>?): gboolean {
    memScoped {
        return kniBridge5264(bar?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_set_show_close_button(bar: CValuesRef<GtkHeaderBar>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge5265(bar?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_header_bar_set_has_subtitle(bar: CValuesRef<GtkHeaderBar>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge5266(bar?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_header_bar_get_has_subtitle(bar: CValuesRef<GtkHeaderBar>?): gboolean {
    memScoped {
        return kniBridge5267(bar?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_set_decoration_layout(bar: CValuesRef<GtkHeaderBar>?, @CCall.CString layout: String?): Unit {
    memScoped {
        return kniBridge5268(bar?.getPointer(memScope).rawValue, layout?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_header_bar_get_decoration_layout(bar: CValuesRef<GtkHeaderBar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5269(bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_provider_get_type(): GType {
    return kniBridge5270()
}

fun gtk_style_provider_get_style(provider: CValuesRef<GtkStyleProvider>?, path: CValuesRef<GtkWidgetPath>?): CPointer<GtkStyleProperties>? {
    memScoped {
        return interpretCPointer<GtkStyleProperties>(kniBridge5271(provider?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_provider_get_style_property(provider: CValuesRef<GtkStyleProvider>?, path: CValuesRef<GtkWidgetPath>?, state: GtkStateFlags, pspec: CValuesRef<GParamSpec>?, value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge5272(provider?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, state, pspec?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_provider_get_icon_factory(provider: CValuesRef<GtkStyleProvider>?, path: CValuesRef<GtkWidgetPath>?): CPointer<GtkIconFactory>? {
    memScoped {
        return interpretCPointer<GtkIconFactory>(kniBridge5273(provider?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_get_type(): GType {
    return kniBridge5274()
}

fun gtk_style_context_new(): CPointer<GtkStyleContext>? {
    return interpretCPointer<GtkStyleContext>(kniBridge5275())
}

fun gtk_style_context_add_provider_for_screen(screen: CValuesRef<GdkScreen>?, provider: CValuesRef<GtkStyleProvider>?, priority: guint): Unit {
    memScoped {
        return kniBridge5276(screen?.getPointer(memScope).rawValue, provider?.getPointer(memScope).rawValue, priority)
    }
}

fun gtk_style_context_remove_provider_for_screen(screen: CValuesRef<GdkScreen>?, provider: CValuesRef<GtkStyleProvider>?): Unit {
    memScoped {
        return kniBridge5277(screen?.getPointer(memScope).rawValue, provider?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_add_provider(context: CValuesRef<GtkStyleContext>?, provider: CValuesRef<GtkStyleProvider>?, priority: guint): Unit {
    memScoped {
        return kniBridge5278(context?.getPointer(memScope).rawValue, provider?.getPointer(memScope).rawValue, priority)
    }
}

fun gtk_style_context_remove_provider(context: CValuesRef<GtkStyleContext>?, provider: CValuesRef<GtkStyleProvider>?): Unit {
    memScoped {
        return kniBridge5279(context?.getPointer(memScope).rawValue, provider?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_save(context: CValuesRef<GtkStyleContext>?): Unit {
    memScoped {
        return kniBridge5280(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_restore(context: CValuesRef<GtkStyleContext>?): Unit {
    memScoped {
        return kniBridge5281(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_section(context: CValuesRef<GtkStyleContext>?, @CCall.CString property: String?): CPointer<GtkCssSection>? {
    memScoped {
        return interpretCPointer<GtkCssSection>(kniBridge5282(context?.getPointer(memScope).rawValue, property?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_get_property(context: CValuesRef<GtkStyleContext>?, @CCall.CString property: String?, state: GtkStateFlags, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge5283(context?.getPointer(memScope).rawValue, property?.cstr?.getPointer(memScope).rawValue, state, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_valist(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, args: va_list?): Unit {
    memScoped {
        return kniBridge5284(context?.getPointer(memScope).rawValue, state, args.rawValue)
    }
}

@CCall("knifunptr_libgtk359")
external fun gtk_style_context_get(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, vararg variadicArguments: Any?): Unit

fun gtk_style_context_set_state(context: CValuesRef<GtkStyleContext>?, flags: GtkStateFlags): Unit {
    memScoped {
        return kniBridge5285(context?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_style_context_get_state(context: CValuesRef<GtkStyleContext>?): GtkStateFlags {
    memScoped {
        return kniBridge5286(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_set_scale(context: CValuesRef<GtkStyleContext>?, scale: gint): Unit {
    memScoped {
        return kniBridge5287(context?.getPointer(memScope).rawValue, scale)
    }
}

fun gtk_style_context_get_scale(context: CValuesRef<GtkStyleContext>?): gint {
    memScoped {
        return kniBridge5288(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_state_is_running(context: CValuesRef<GtkStyleContext>?, state: GtkStateType, progress: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5289(context?.getPointer(memScope).rawValue, state.value, progress?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_set_path(context: CValuesRef<GtkStyleContext>?, path: CValuesRef<GtkWidgetPath>?): Unit {
    memScoped {
        return kniBridge5290(context?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_path(context: CValuesRef<GtkStyleContext>?): CPointer<GtkWidgetPath>? {
    memScoped {
        return interpretCPointer<GtkWidgetPath>(kniBridge5291(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_set_parent(context: CValuesRef<GtkStyleContext>?, parent: CValuesRef<GtkStyleContext>?): Unit {
    memScoped {
        return kniBridge5292(context?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_parent(context: CValuesRef<GtkStyleContext>?): CPointer<GtkStyleContext>? {
    memScoped {
        return interpretCPointer<GtkStyleContext>(kniBridge5293(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_list_classes(context: CValuesRef<GtkStyleContext>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5294(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_add_class(context: CValuesRef<GtkStyleContext>?, @CCall.CString class_name: String?): Unit {
    memScoped {
        return kniBridge5295(context?.getPointer(memScope).rawValue, class_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_remove_class(context: CValuesRef<GtkStyleContext>?, @CCall.CString class_name: String?): Unit {
    memScoped {
        return kniBridge5296(context?.getPointer(memScope).rawValue, class_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_has_class(context: CValuesRef<GtkStyleContext>?, @CCall.CString class_name: String?): gboolean {
    memScoped {
        return kniBridge5297(context?.getPointer(memScope).rawValue, class_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_list_regions(context: CValuesRef<GtkStyleContext>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5298(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_add_region(context: CValuesRef<GtkStyleContext>?, @CCall.CString region_name: String?, flags: GtkRegionFlags): Unit {
    memScoped {
        return kniBridge5299(context?.getPointer(memScope).rawValue, region_name?.cstr?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_style_context_remove_region(context: CValuesRef<GtkStyleContext>?, @CCall.CString region_name: String?): Unit {
    memScoped {
        return kniBridge5300(context?.getPointer(memScope).rawValue, region_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_has_region(context: CValuesRef<GtkStyleContext>?, @CCall.CString region_name: String?, flags_return: CValuesRef<GtkRegionFlagsVar>?): gboolean {
    memScoped {
        return kniBridge5301(context?.getPointer(memScope).rawValue, region_name?.cstr?.getPointer(memScope).rawValue, flags_return?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_style_property(context: CValuesRef<GtkStyleContext>?, @CCall.CString property_name: String?, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge5302(context?.getPointer(memScope).rawValue, property_name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_style_valist(context: CValuesRef<GtkStyleContext>?, args: va_list?): Unit {
    memScoped {
        return kniBridge5303(context?.getPointer(memScope).rawValue, args.rawValue)
    }
}

@CCall("knifunptr_libgtk360")
external fun gtk_style_context_get_style(context: CValuesRef<GtkStyleContext>?, vararg variadicArguments: Any?): Unit

fun gtk_style_context_lookup_icon_set(context: CValuesRef<GtkStyleContext>?, @CCall.CString stock_id: String?): CPointer<GtkIconSet>? {
    memScoped {
        return interpretCPointer<GtkIconSet>(kniBridge5304(context?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_set_render_icon_pixbuf(icon_set: CValuesRef<GtkIconSet>?, context: CValuesRef<GtkStyleContext>?, size: GtkIconSize): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5305(icon_set?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_icon_set_render_icon_surface(icon_set: CValuesRef<GtkIconSet>?, context: CValuesRef<GtkStyleContext>?, size: GtkIconSize, scale: Int, for_window: CValuesRef<GdkWindow>?): CPointer<cairo_surface_t>? {
    memScoped {
        return interpretCPointer<cairo_surface_t>(kniBridge5306(icon_set?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, size.value, scale, for_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_set_screen(context: CValuesRef<GtkStyleContext>?, screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge5307(context?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_screen(context: CValuesRef<GtkStyleContext>?): CPointer<GdkScreen>? {
    memScoped {
        return interpretCPointer<GdkScreen>(kniBridge5308(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_set_frame_clock(context: CValuesRef<GtkStyleContext>?, frame_clock: CValuesRef<GdkFrameClock>?): Unit {
    memScoped {
        return kniBridge5309(context?.getPointer(memScope).rawValue, frame_clock?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_frame_clock(context: CValuesRef<GtkStyleContext>?): CPointer<GdkFrameClock>? {
    memScoped {
        return interpretCPointer<GdkFrameClock>(kniBridge5310(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_set_direction(context: CValuesRef<GtkStyleContext>?, direction: GtkTextDirection): Unit {
    memScoped {
        return kniBridge5311(context?.getPointer(memScope).rawValue, direction.value)
    }
}

fun gtk_style_context_get_direction(context: CValuesRef<GtkStyleContext>?): GtkTextDirection {
    memScoped {
        return GtkTextDirection.byValue(kniBridge5312(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_style_context_set_junction_sides(context: CValuesRef<GtkStyleContext>?, sides: GtkJunctionSides): Unit {
    memScoped {
        return kniBridge5313(context?.getPointer(memScope).rawValue, sides)
    }
}

fun gtk_style_context_get_junction_sides(context: CValuesRef<GtkStyleContext>?): GtkJunctionSides {
    memScoped {
        return kniBridge5314(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_lookup_color(context: CValuesRef<GtkStyleContext>?, @CCall.CString color_name: String?, color: CValuesRef<GdkRGBA>?): gboolean {
    memScoped {
        return kniBridge5315(context?.getPointer(memScope).rawValue, color_name?.cstr?.getPointer(memScope).rawValue, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_notify_state_change(context: CValuesRef<GtkStyleContext>?, window: CValuesRef<GdkWindow>?, region_id: gpointer?, state: GtkStateType, state_value: gboolean): Unit {
    memScoped {
        return kniBridge5316(context?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue, region_id.rawValue, state.value, state_value)
    }
}

fun gtk_style_context_cancel_animations(context: CValuesRef<GtkStyleContext>?, region_id: gpointer?): Unit {
    memScoped {
        return kniBridge5317(context?.getPointer(memScope).rawValue, region_id.rawValue)
    }
}

fun gtk_style_context_scroll_animations(context: CValuesRef<GtkStyleContext>?, window: CValuesRef<GdkWindow>?, dx: gint, dy: gint): Unit {
    memScoped {
        return kniBridge5318(context?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue, dx, dy)
    }
}

fun gtk_style_context_push_animatable_region(context: CValuesRef<GtkStyleContext>?, region_id: gpointer?): Unit {
    memScoped {
        return kniBridge5319(context?.getPointer(memScope).rawValue, region_id.rawValue)
    }
}

fun gtk_style_context_pop_animatable_region(context: CValuesRef<GtkStyleContext>?): Unit {
    memScoped {
        return kniBridge5320(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_color(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge5321(context?.getPointer(memScope).rawValue, state, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_background_color(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge5322(context?.getPointer(memScope).rawValue, state, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_border_color(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, color: CValuesRef<GdkRGBA>?): Unit {
    memScoped {
        return kniBridge5323(context?.getPointer(memScope).rawValue, state, color?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_font(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags): CPointer<PangoFontDescription>? {
    memScoped {
        return interpretCPointer<PangoFontDescription>(kniBridge5324(context?.getPointer(memScope).rawValue, state))
    }
}

fun gtk_style_context_get_border(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, border: CValuesRef<GtkBorder>?): Unit {
    memScoped {
        return kniBridge5325(context?.getPointer(memScope).rawValue, state, border?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_padding(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, padding: CValuesRef<GtkBorder>?): Unit {
    memScoped {
        return kniBridge5326(context?.getPointer(memScope).rawValue, state, padding?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_get_margin(context: CValuesRef<GtkStyleContext>?, state: GtkStateFlags, margin: CValuesRef<GtkBorder>?): Unit {
    memScoped {
        return kniBridge5327(context?.getPointer(memScope).rawValue, state, margin?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_invalidate(context: CValuesRef<GtkStyleContext>?): Unit {
    memScoped {
        return kniBridge5328(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_reset_widgets(screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge5329(screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_style_context_set_background(context: CValuesRef<GtkStyleContext>?, window: CValuesRef<GdkWindow>?): Unit {
    memScoped {
        return kniBridge5330(context?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_render_insertion_cursor(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, layout: CValuesRef<PangoLayout>?, index: Int, direction: PangoDirection): Unit {
    memScoped {
        return kniBridge5331(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, layout?.getPointer(memScope).rawValue, index, direction.value)
    }
}

fun gtk_draw_insertion_cursor(widget: CValuesRef<GtkWidget>?, cr: CValuesRef<cairo_t>?, location: CValuesRef<GdkRectangle>?, is_primary: gboolean, direction: GtkTextDirection, draw_arrow: gboolean): Unit {
    memScoped {
        return kniBridge5332(widget?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, location?.getPointer(memScope).rawValue, is_primary, direction.value, draw_arrow)
    }
}

fun gtk_style_context_to_string(context: CValuesRef<GtkStyleContext>?, flags: GtkStyleContextPrintFlags): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5333(context?.getPointer(memScope).rawValue, flags))
    }
}

fun gtk_icon_theme_error_quark(): GQuark {
    return kniBridge5334()
}

fun gtk_icon_theme_get_type(): GType {
    return kniBridge5335()
}

fun gtk_icon_theme_new(): CPointer<GtkIconTheme>? {
    return interpretCPointer<GtkIconTheme>(kniBridge5336())
}

fun gtk_icon_theme_get_default(): CPointer<GtkIconTheme>? {
    return interpretCPointer<GtkIconTheme>(kniBridge5337())
}

fun gtk_icon_theme_get_for_screen(screen: CValuesRef<GdkScreen>?): CPointer<GtkIconTheme>? {
    memScoped {
        return interpretCPointer<GtkIconTheme>(kniBridge5338(screen?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_set_screen(icon_theme: CValuesRef<GtkIconTheme>?, screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge5339(icon_theme?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_set_search_path(icon_theme: CValuesRef<GtkIconTheme>?, path: CValuesRef<CPointerVar<gcharVar>>?, n_elements: gint): Unit {
    memScoped {
        return kniBridge5340(icon_theme?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, n_elements)
    }
}

fun gtk_icon_theme_get_search_path(icon_theme: CValuesRef<GtkIconTheme>?, path: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, n_elements: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge5341(icon_theme?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, n_elements?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_append_search_path(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge5342(icon_theme?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_prepend_search_path(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge5343(icon_theme?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_add_resource_path(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString path: String?): Unit {
    memScoped {
        return kniBridge5344(icon_theme?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_set_custom_theme(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString theme_name: String?): Unit {
    memScoped {
        return kniBridge5345(icon_theme?.getPointer(memScope).rawValue, theme_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_has_icon(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?): gboolean {
    memScoped {
        return kniBridge5346(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_get_icon_sizes(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?): CPointer<gintVar>? {
    memScoped {
        return interpretCPointer<gintVar>(kniBridge5347(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_lookup_icon(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?, size: gint, flags: GtkIconLookupFlags): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5348(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size, flags))
    }
}

fun gtk_icon_theme_lookup_icon_for_scale(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?, size: gint, scale: gint, flags: GtkIconLookupFlags): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5349(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size, scale, flags))
    }
}

fun gtk_icon_theme_choose_icon(icon_theme: CValuesRef<GtkIconTheme>?, icon_names: CValuesRef<CPointerVar<gcharVar>>?, size: gint, flags: GtkIconLookupFlags): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5350(icon_theme?.getPointer(memScope).rawValue, icon_names?.getPointer(memScope).rawValue, size, flags))
    }
}

fun gtk_icon_theme_choose_icon_for_scale(icon_theme: CValuesRef<GtkIconTheme>?, icon_names: CValuesRef<CPointerVar<gcharVar>>?, size: gint, scale: gint, flags: GtkIconLookupFlags): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5351(icon_theme?.getPointer(memScope).rawValue, icon_names?.getPointer(memScope).rawValue, size, scale, flags))
    }
}

fun gtk_icon_theme_load_icon(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?, size: gint, flags: GtkIconLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5352(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size, flags, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_load_icon_for_scale(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?, size: gint, scale: gint, flags: GtkIconLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5353(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size, scale, flags, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_load_surface(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString icon_name: String?, size: gint, scale: gint, for_window: CValuesRef<GdkWindow>?, flags: GtkIconLookupFlags, error: CValuesRef<CPointerVar<GError>>?): CPointer<cairo_surface_t>? {
    memScoped {
        return interpretCPointer<cairo_surface_t>(kniBridge5354(icon_theme?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size, scale, for_window?.getPointer(memScope).rawValue, flags, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_lookup_by_gicon(icon_theme: CValuesRef<GtkIconTheme>?, icon: CValuesRef<GIcon>?, size: gint, flags: GtkIconLookupFlags): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5355(icon_theme?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue, size, flags))
    }
}

fun gtk_icon_theme_lookup_by_gicon_for_scale(icon_theme: CValuesRef<GtkIconTheme>?, icon: CValuesRef<GIcon>?, size: gint, scale: gint, flags: GtkIconLookupFlags): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5356(icon_theme?.getPointer(memScope).rawValue, icon?.getPointer(memScope).rawValue, size, scale, flags))
    }
}

fun gtk_icon_theme_list_icons(icon_theme: CValuesRef<GtkIconTheme>?, @CCall.CString context: String?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5357(icon_theme?.getPointer(memScope).rawValue, context?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_list_contexts(icon_theme: CValuesRef<GtkIconTheme>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5358(icon_theme?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_get_example_icon_name(icon_theme: CValuesRef<GtkIconTheme>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5359(icon_theme?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_theme_rescan_if_needed(icon_theme: CValuesRef<GtkIconTheme>?): gboolean {
    memScoped {
        return kniBridge5360(icon_theme?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_theme_add_builtin_icon(@CCall.CString icon_name: String?, size: gint, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge5361(icon_name?.cstr?.getPointer(memScope).rawValue, size, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_get_type(): GType {
    return kniBridge5362()
}

fun gtk_icon_info_copy(icon_info: CValuesRef<GtkIconInfo>?): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5363(icon_info?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_free(icon_info: CValuesRef<GtkIconInfo>?): Unit {
    memScoped {
        return kniBridge5364(icon_info?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_new_for_pixbuf(icon_theme: CValuesRef<GtkIconTheme>?, pixbuf: CValuesRef<GdkPixbuf>?): CPointer<GtkIconInfo>? {
    memScoped {
        return interpretCPointer<GtkIconInfo>(kniBridge5365(icon_theme?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_get_base_size(icon_info: CValuesRef<GtkIconInfo>?): gint {
    memScoped {
        return kniBridge5366(icon_info?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_get_base_scale(icon_info: CValuesRef<GtkIconInfo>?): gint {
    memScoped {
        return kniBridge5367(icon_info?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_get_filename(icon_info: CValuesRef<GtkIconInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5368(icon_info?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_get_builtin_pixbuf(icon_info: CValuesRef<GtkIconInfo>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5369(icon_info?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_is_symbolic(icon_info: CValuesRef<GtkIconInfo>?): gboolean {
    memScoped {
        return kniBridge5370(icon_info?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_load_icon(icon_info: CValuesRef<GtkIconInfo>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5371(icon_info?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_surface(icon_info: CValuesRef<GtkIconInfo>?, for_window: CValuesRef<GdkWindow>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<cairo_surface_t>? {
    memScoped {
        return interpretCPointer<cairo_surface_t>(kniBridge5372(icon_info?.getPointer(memScope).rawValue, for_window?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_icon_async(icon_info: CValuesRef<GtkIconInfo>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge5373(icon_info?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_icon_info_load_icon_finish(icon_info: CValuesRef<GtkIconInfo>?, res: CValuesRef<GAsyncResult>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5374(icon_info?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_symbolic(icon_info: CValuesRef<GtkIconInfo>?, fg: CValuesRef<GdkRGBA>?, success_color: CValuesRef<GdkRGBA>?, warning_color: CValuesRef<GdkRGBA>?, error_color: CValuesRef<GdkRGBA>?, was_symbolic: CValuesRef<gbooleanVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5375(icon_info?.getPointer(memScope).rawValue, fg?.getPointer(memScope).rawValue, success_color?.getPointer(memScope).rawValue, warning_color?.getPointer(memScope).rawValue, error_color?.getPointer(memScope).rawValue, was_symbolic?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_symbolic_async(icon_info: CValuesRef<GtkIconInfo>?, fg: CValuesRef<GdkRGBA>?, success_color: CValuesRef<GdkRGBA>?, warning_color: CValuesRef<GdkRGBA>?, error_color: CValuesRef<GdkRGBA>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge5376(icon_info?.getPointer(memScope).rawValue, fg?.getPointer(memScope).rawValue, success_color?.getPointer(memScope).rawValue, warning_color?.getPointer(memScope).rawValue, error_color?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_icon_info_load_symbolic_finish(icon_info: CValuesRef<GtkIconInfo>?, res: CValuesRef<GAsyncResult>?, was_symbolic: CValuesRef<gbooleanVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5377(icon_info?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, was_symbolic?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_symbolic_for_context(icon_info: CValuesRef<GtkIconInfo>?, context: CValuesRef<GtkStyleContext>?, was_symbolic: CValuesRef<gbooleanVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5378(icon_info?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, was_symbolic?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_symbolic_for_context_async(icon_info: CValuesRef<GtkIconInfo>?, context: CValuesRef<GtkStyleContext>?, cancellable: CValuesRef<GCancellable>?, callback: GAsyncReadyCallback?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge5379(icon_info?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, cancellable?.getPointer(memScope).rawValue, callback.rawValue, user_data.rawValue)
    }
}

fun gtk_icon_info_load_symbolic_for_context_finish(icon_info: CValuesRef<GtkIconInfo>?, res: CValuesRef<GAsyncResult>?, was_symbolic: CValuesRef<gbooleanVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5380(icon_info?.getPointer(memScope).rawValue, res?.getPointer(memScope).rawValue, was_symbolic?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_load_symbolic_for_style(icon_info: CValuesRef<GtkIconInfo>?, style: CValuesRef<GtkStyle>?, state: GtkStateType, was_symbolic: CValuesRef<gbooleanVar>?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5381(icon_info?.getPointer(memScope).rawValue, style?.getPointer(memScope).rawValue, state.value, was_symbolic?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_info_set_raw_coordinates(icon_info: CValuesRef<GtkIconInfo>?, raw_coordinates: gboolean): Unit {
    memScoped {
        return kniBridge5382(icon_info?.getPointer(memScope).rawValue, raw_coordinates)
    }
}

fun gtk_icon_info_get_embedded_rect(icon_info: CValuesRef<GtkIconInfo>?, rectangle: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge5383(icon_info?.getPointer(memScope).rawValue, rectangle?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_get_attach_points(icon_info: CValuesRef<GtkIconInfo>?, points: CValuesRef<CPointerVar<GdkPoint>>?, n_points: CValuesRef<gintVar>?): gboolean {
    memScoped {
        return kniBridge5384(icon_info?.getPointer(memScope).rawValue, points?.getPointer(memScope).rawValue, n_points?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_info_get_display_name(icon_info: CValuesRef<GtkIconInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5385(icon_info?.getPointer(memScope).rawValue))
    }
}

fun gtk_tooltip_get_type(): GType {
    return kniBridge5386()
}

fun gtk_tooltip_set_markup(tooltip: CValuesRef<GtkTooltip>?, @CCall.CString markup: String?): Unit {
    memScoped {
        return kniBridge5387(tooltip?.getPointer(memScope).rawValue, markup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tooltip_set_text(tooltip: CValuesRef<GtkTooltip>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge5388(tooltip?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tooltip_set_icon(tooltip: CValuesRef<GtkTooltip>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge5389(tooltip?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_tooltip_set_icon_from_stock(tooltip: CValuesRef<GtkTooltip>?, @CCall.CString stock_id: String?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge5390(tooltip?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_tooltip_set_icon_from_icon_name(tooltip: CValuesRef<GtkTooltip>?, @CCall.CString icon_name: String?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge5391(tooltip?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_tooltip_set_icon_from_gicon(tooltip: CValuesRef<GtkTooltip>?, gicon: CValuesRef<GIcon>?, size: GtkIconSize): Unit {
    memScoped {
        return kniBridge5392(tooltip?.getPointer(memScope).rawValue, gicon?.getPointer(memScope).rawValue, size.value)
    }
}

fun gtk_tooltip_set_custom(tooltip: CValuesRef<GtkTooltip>?, custom_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5393(tooltip?.getPointer(memScope).rawValue, custom_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_tooltip_set_tip_area(tooltip: CValuesRef<GtkTooltip>?, rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge5394(tooltip?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_tooltip_trigger_tooltip_query(display: CValuesRef<GdkDisplay>?): Unit {
    memScoped {
        return kniBridge5395(display?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_type(): GType {
    return kniBridge5396()
}

fun gtk_icon_view_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5397())
}

fun gtk_icon_view_new_with_area(area: CValuesRef<GtkCellArea>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5398(area?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_new_with_model(model: CValuesRef<GtkTreeModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5399(model?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_set_model(icon_view: CValuesRef<GtkIconView>?, model: CValuesRef<GtkTreeModel>?): Unit {
    memScoped {
        return kniBridge5400(icon_view?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_model(icon_view: CValuesRef<GtkIconView>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge5401(icon_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_set_text_column(icon_view: CValuesRef<GtkIconView>?, column: gint): Unit {
    memScoped {
        return kniBridge5402(icon_view?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_icon_view_get_text_column(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5403(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_markup_column(icon_view: CValuesRef<GtkIconView>?, column: gint): Unit {
    memScoped {
        return kniBridge5404(icon_view?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_icon_view_get_markup_column(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5405(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_pixbuf_column(icon_view: CValuesRef<GtkIconView>?, column: gint): Unit {
    memScoped {
        return kniBridge5406(icon_view?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_icon_view_get_pixbuf_column(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5407(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_item_orientation(icon_view: CValuesRef<GtkIconView>?, orientation: GtkOrientation): Unit {
    memScoped {
        return kniBridge5408(icon_view?.getPointer(memScope).rawValue, orientation.value)
    }
}

fun gtk_icon_view_get_item_orientation(icon_view: CValuesRef<GtkIconView>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge5409(icon_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_set_columns(icon_view: CValuesRef<GtkIconView>?, columns: gint): Unit {
    memScoped {
        return kniBridge5410(icon_view?.getPointer(memScope).rawValue, columns)
    }
}

fun gtk_icon_view_get_columns(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5411(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_item_width(icon_view: CValuesRef<GtkIconView>?, item_width: gint): Unit {
    memScoped {
        return kniBridge5412(icon_view?.getPointer(memScope).rawValue, item_width)
    }
}

fun gtk_icon_view_get_item_width(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5413(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_spacing(icon_view: CValuesRef<GtkIconView>?, spacing: gint): Unit {
    memScoped {
        return kniBridge5414(icon_view?.getPointer(memScope).rawValue, spacing)
    }
}

fun gtk_icon_view_get_spacing(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5415(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_row_spacing(icon_view: CValuesRef<GtkIconView>?, row_spacing: gint): Unit {
    memScoped {
        return kniBridge5416(icon_view?.getPointer(memScope).rawValue, row_spacing)
    }
}

fun gtk_icon_view_get_row_spacing(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5417(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_column_spacing(icon_view: CValuesRef<GtkIconView>?, column_spacing: gint): Unit {
    memScoped {
        return kniBridge5418(icon_view?.getPointer(memScope).rawValue, column_spacing)
    }
}

fun gtk_icon_view_get_column_spacing(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5419(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_margin(icon_view: CValuesRef<GtkIconView>?, margin: gint): Unit {
    memScoped {
        return kniBridge5420(icon_view?.getPointer(memScope).rawValue, margin)
    }
}

fun gtk_icon_view_get_margin(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5421(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_item_padding(icon_view: CValuesRef<GtkIconView>?, item_padding: gint): Unit {
    memScoped {
        return kniBridge5422(icon_view?.getPointer(memScope).rawValue, item_padding)
    }
}

fun gtk_icon_view_get_item_padding(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5423(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_path_at_pos(icon_view: CValuesRef<GtkIconView>?, x: gint, y: gint): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge5424(icon_view?.getPointer(memScope).rawValue, x, y))
    }
}

fun gtk_icon_view_get_item_at_pos(icon_view: CValuesRef<GtkIconView>?, x: gint, y: gint, path: CValuesRef<CPointerVar<GtkTreePath>>?, cell: CValuesRef<CPointerVar<GtkCellRenderer>>?): gboolean {
    memScoped {
        return kniBridge5425(icon_view?.getPointer(memScope).rawValue, x, y, path?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_visible_range(icon_view: CValuesRef<GtkIconView>?, start_path: CValuesRef<CPointerVar<GtkTreePath>>?, end_path: CValuesRef<CPointerVar<GtkTreePath>>?): gboolean {
    memScoped {
        return kniBridge5426(icon_view?.getPointer(memScope).rawValue, start_path?.getPointer(memScope).rawValue, end_path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_activate_on_single_click(icon_view: CValuesRef<GtkIconView>?, single: gboolean): Unit {
    memScoped {
        return kniBridge5427(icon_view?.getPointer(memScope).rawValue, single)
    }
}

fun gtk_icon_view_get_activate_on_single_click(icon_view: CValuesRef<GtkIconView>?): gboolean {
    memScoped {
        return kniBridge5428(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_selected_foreach(icon_view: CValuesRef<GtkIconView>?, func: GtkIconViewForeachFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge5429(icon_view?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun gtk_icon_view_set_selection_mode(icon_view: CValuesRef<GtkIconView>?, mode: GtkSelectionMode): Unit {
    memScoped {
        return kniBridge5430(icon_view?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_icon_view_get_selection_mode(icon_view: CValuesRef<GtkIconView>?): GtkSelectionMode {
    memScoped {
        return GtkSelectionMode.byValue(kniBridge5431(icon_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_select_path(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge5432(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_unselect_path(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge5433(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_path_is_selected(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge5434(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_item_row(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): gint {
    memScoped {
        return kniBridge5435(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_item_column(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): gint {
    memScoped {
        return kniBridge5436(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_selected_items(icon_view: CValuesRef<GtkIconView>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5437(icon_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_select_all(icon_view: CValuesRef<GtkIconView>?): Unit {
    memScoped {
        return kniBridge5438(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_unselect_all(icon_view: CValuesRef<GtkIconView>?): Unit {
    memScoped {
        return kniBridge5439(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_item_activated(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge5440(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_cursor(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?, cell: CValuesRef<GtkCellRenderer>?, start_editing: gboolean): Unit {
    memScoped {
        return kniBridge5441(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, start_editing)
    }
}

fun gtk_icon_view_get_cursor(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<CPointerVar<GtkTreePath>>?, cell: CValuesRef<CPointerVar<GtkCellRenderer>>?): gboolean {
    memScoped {
        return kniBridge5442(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_scroll_to_path(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?, use_align: gboolean, row_align: gfloat, col_align: gfloat): Unit {
    memScoped {
        return kniBridge5443(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, use_align, row_align, col_align)
    }
}

fun gtk_icon_view_enable_model_drag_source(icon_view: CValuesRef<GtkIconView>?, start_button_mask: GdkModifierType, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge5444(icon_view?.getPointer(memScope).rawValue, start_button_mask, targets?.getPointer(memScope).rawValue, n_targets, actions)
    }
}

fun gtk_icon_view_enable_model_drag_dest(icon_view: CValuesRef<GtkIconView>?, targets: CValuesRef<GtkTargetEntry>?, n_targets: gint, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge5445(icon_view?.getPointer(memScope).rawValue, targets?.getPointer(memScope).rawValue, n_targets, actions)
    }
}

fun gtk_icon_view_unset_model_drag_source(icon_view: CValuesRef<GtkIconView>?): Unit {
    memScoped {
        return kniBridge5446(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_unset_model_drag_dest(icon_view: CValuesRef<GtkIconView>?): Unit {
    memScoped {
        return kniBridge5447(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_reorderable(icon_view: CValuesRef<GtkIconView>?, reorderable: gboolean): Unit {
    memScoped {
        return kniBridge5448(icon_view?.getPointer(memScope).rawValue, reorderable)
    }
}

fun gtk_icon_view_get_reorderable(icon_view: CValuesRef<GtkIconView>?): gboolean {
    memScoped {
        return kniBridge5449(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_drag_dest_item(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?, pos: GtkIconViewDropPosition): Unit {
    memScoped {
        return kniBridge5450(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, pos.value)
    }
}

fun gtk_icon_view_get_drag_dest_item(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<CPointerVar<GtkTreePath>>?, pos: CValuesRef<GtkIconViewDropPosition.Var>?): Unit {
    memScoped {
        return kniBridge5451(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, pos?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_dest_item_at_pos(icon_view: CValuesRef<GtkIconView>?, drag_x: gint, drag_y: gint, path: CValuesRef<CPointerVar<GtkTreePath>>?, pos: CValuesRef<GtkIconViewDropPosition.Var>?): gboolean {
    memScoped {
        return kniBridge5452(icon_view?.getPointer(memScope).rawValue, drag_x, drag_y, path?.getPointer(memScope).rawValue, pos?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_create_drag_icon(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?): CPointer<cairo_surface_t>? {
    memScoped {
        return interpretCPointer<cairo_surface_t>(kniBridge5453(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue))
    }
}

fun gtk_icon_view_convert_widget_to_bin_window_coords(icon_view: CValuesRef<GtkIconView>?, wx: gint, wy: gint, bx: CValuesRef<gintVar>?, by: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge5454(icon_view?.getPointer(memScope).rawValue, wx, wy, bx?.getPointer(memScope).rawValue, by?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_cell_rect(icon_view: CValuesRef<GtkIconView>?, path: CValuesRef<GtkTreePath>?, cell: CValuesRef<GtkCellRenderer>?, rect: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge5455(icon_view?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_tooltip_item(icon_view: CValuesRef<GtkIconView>?, tooltip: CValuesRef<GtkTooltip>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge5456(icon_view?.getPointer(memScope).rawValue, tooltip?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_tooltip_cell(icon_view: CValuesRef<GtkIconView>?, tooltip: CValuesRef<GtkTooltip>?, path: CValuesRef<GtkTreePath>?, cell: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge5457(icon_view?.getPointer(memScope).rawValue, tooltip?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, cell?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_get_tooltip_context(icon_view: CValuesRef<GtkIconView>?, x: CValuesRef<gintVar>?, y: CValuesRef<gintVar>?, keyboard_tip: gboolean, model: CValuesRef<CPointerVar<GtkTreeModel>>?, path: CValuesRef<CPointerVar<GtkTreePath>>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge5458(icon_view?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, keyboard_tip, model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_icon_view_set_tooltip_column(icon_view: CValuesRef<GtkIconView>?, column: gint): Unit {
    memScoped {
        return kniBridge5459(icon_view?.getPointer(memScope).rawValue, column)
    }
}

fun gtk_icon_view_get_tooltip_column(icon_view: CValuesRef<GtkIconView>?): gint {
    memScoped {
        return kniBridge5460(icon_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_context_simple_get_type(): GType {
    return kniBridge5461()
}

fun gtk_im_context_simple_new(): CPointer<GtkIMContext>? {
    return interpretCPointer<GtkIMContext>(kniBridge5462())
}

fun gtk_im_context_simple_add_table(context_simple: CValuesRef<GtkIMContextSimple>?, data: CValuesRef<guint16Var>?, max_seq_len: gint, n_seqs: gint): Unit {
    memScoped {
        return kniBridge5463(context_simple?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, max_seq_len, n_seqs)
    }
}

fun gtk_im_context_simple_add_compose_file(context_simple: CValuesRef<GtkIMContextSimple>?, @CCall.CString compose_file: String?): Unit {
    memScoped {
        return kniBridge5464(context_simple?.getPointer(memScope).rawValue, compose_file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_multicontext_get_type(): GType {
    return kniBridge5465()
}

fun gtk_im_multicontext_new(): CPointer<GtkIMContext>? {
    return interpretCPointer<GtkIMContext>(kniBridge5466())
}

fun gtk_im_multicontext_append_menuitems(context: CValuesRef<GtkIMMulticontext>?, menushell: CValuesRef<GtkMenuShell>?): Unit {
    memScoped {
        return kniBridge5467(context?.getPointer(memScope).rawValue, menushell?.getPointer(memScope).rawValue)
    }
}

fun gtk_im_multicontext_get_context_id(context: CValuesRef<GtkIMMulticontext>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge5468(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_im_multicontext_set_context_id(context: CValuesRef<GtkIMMulticontext>?, @CCall.CString context_id: String?): Unit {
    memScoped {
        return kniBridge5469(context?.getPointer(memScope).rawValue, context_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_info_bar_get_type(): GType {
    return kniBridge5470()
}

fun gtk_info_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5471())
}

@CCall("knifunptr_libgtk361")
external fun gtk_info_bar_new_with_buttons(@CCall.CString first_button_text: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_info_bar_get_action_area(info_bar: CValuesRef<GtkInfoBar>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5472(info_bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_info_bar_get_content_area(info_bar: CValuesRef<GtkInfoBar>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5473(info_bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_info_bar_add_action_widget(info_bar: CValuesRef<GtkInfoBar>?, child: CValuesRef<GtkWidget>?, response_id: gint): Unit {
    memScoped {
        return kniBridge5474(info_bar?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, response_id)
    }
}

fun gtk_info_bar_add_button(info_bar: CValuesRef<GtkInfoBar>?, @CCall.CString button_text: String?, response_id: gint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5475(info_bar?.getPointer(memScope).rawValue, button_text?.cstr?.getPointer(memScope).rawValue, response_id))
    }
}

@CCall("knifunptr_libgtk362")
external fun gtk_info_bar_add_buttons(info_bar: CValuesRef<GtkInfoBar>?, @CCall.CString first_button_text: String?, vararg variadicArguments: Any?): Unit

fun gtk_info_bar_set_response_sensitive(info_bar: CValuesRef<GtkInfoBar>?, response_id: gint, setting: gboolean): Unit {
    memScoped {
        return kniBridge5476(info_bar?.getPointer(memScope).rawValue, response_id, setting)
    }
}

fun gtk_info_bar_set_default_response(info_bar: CValuesRef<GtkInfoBar>?, response_id: gint): Unit {
    memScoped {
        return kniBridge5477(info_bar?.getPointer(memScope).rawValue, response_id)
    }
}

fun gtk_info_bar_response(info_bar: CValuesRef<GtkInfoBar>?, response_id: gint): Unit {
    memScoped {
        return kniBridge5478(info_bar?.getPointer(memScope).rawValue, response_id)
    }
}

fun gtk_info_bar_set_message_type(info_bar: CValuesRef<GtkInfoBar>?, message_type: GtkMessageType): Unit {
    memScoped {
        return kniBridge5479(info_bar?.getPointer(memScope).rawValue, message_type.value)
    }
}

fun gtk_info_bar_get_message_type(info_bar: CValuesRef<GtkInfoBar>?): GtkMessageType {
    memScoped {
        return GtkMessageType.byValue(kniBridge5480(info_bar?.getPointer(memScope).rawValue))
    }
}

fun gtk_info_bar_set_show_close_button(info_bar: CValuesRef<GtkInfoBar>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge5481(info_bar?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_info_bar_get_show_close_button(info_bar: CValuesRef<GtkInfoBar>?): gboolean {
    memScoped {
        return kniBridge5482(info_bar?.getPointer(memScope).rawValue)
    }
}

fun gtk_info_bar_set_revealed(info_bar: CValuesRef<GtkInfoBar>?, revealed: gboolean): Unit {
    memScoped {
        return kniBridge5483(info_bar?.getPointer(memScope).rawValue, revealed)
    }
}

fun gtk_info_bar_get_revealed(info_bar: CValuesRef<GtkInfoBar>?): gboolean {
    memScoped {
        return kniBridge5484(info_bar?.getPointer(memScope).rawValue)
    }
}

fun gtk_invisible_get_type(): GType {
    return kniBridge5485()
}

fun gtk_invisible_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5486())
}

fun gtk_invisible_new_for_screen(screen: CValuesRef<GdkScreen>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5487(screen?.getPointer(memScope).rawValue))
    }
}

fun gtk_invisible_set_screen(invisible: CValuesRef<GtkInvisible>?, screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge5488(invisible?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_invisible_get_screen(invisible: CValuesRef<GtkInvisible>?): CPointer<GdkScreen>? {
    memScoped {
        return interpretCPointer<GdkScreen>(kniBridge5489(invisible?.getPointer(memScope).rawValue))
    }
}

fun gtk_layout_get_type(): GType {
    return kniBridge5490()
}

fun gtk_layout_new(hadjustment: CValuesRef<GtkAdjustment>?, vadjustment: CValuesRef<GtkAdjustment>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5491(hadjustment?.getPointer(memScope).rawValue, vadjustment?.getPointer(memScope).rawValue))
    }
}

fun gtk_layout_get_bin_window(layout: CValuesRef<GtkLayout>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge5492(layout?.getPointer(memScope).rawValue))
    }
}

fun gtk_layout_put(layout: CValuesRef<GtkLayout>?, child_widget: CValuesRef<GtkWidget>?, x: gint, y: gint): Unit {
    memScoped {
        return kniBridge5493(layout?.getPointer(memScope).rawValue, child_widget?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_layout_move(layout: CValuesRef<GtkLayout>?, child_widget: CValuesRef<GtkWidget>?, x: gint, y: gint): Unit {
    memScoped {
        return kniBridge5494(layout?.getPointer(memScope).rawValue, child_widget?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_layout_set_size(layout: CValuesRef<GtkLayout>?, width: guint, height: guint): Unit {
    memScoped {
        return kniBridge5495(layout?.getPointer(memScope).rawValue, width, height)
    }
}

fun gtk_layout_get_size(layout: CValuesRef<GtkLayout>?, width: CValuesRef<guintVar>?, height: CValuesRef<guintVar>?): Unit {
    memScoped {
        return kniBridge5496(layout?.getPointer(memScope).rawValue, width?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_layout_get_hadjustment(layout: CValuesRef<GtkLayout>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge5497(layout?.getPointer(memScope).rawValue))
    }
}

fun gtk_layout_get_vadjustment(layout: CValuesRef<GtkLayout>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge5498(layout?.getPointer(memScope).rawValue))
    }
}

fun gtk_layout_set_hadjustment(layout: CValuesRef<GtkLayout>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge5499(layout?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_layout_set_vadjustment(layout: CValuesRef<GtkLayout>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge5500(layout?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_level_bar_get_type(): GType {
    return kniBridge5501()
}

fun gtk_level_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5502())
}

fun gtk_level_bar_new_for_interval(min_value: gdouble, max_value: gdouble): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5503(min_value, max_value))
}

fun gtk_level_bar_set_mode(self: CValuesRef<GtkLevelBar>?, mode: GtkLevelBarMode): Unit {
    memScoped {
        return kniBridge5504(self?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_level_bar_get_mode(self: CValuesRef<GtkLevelBar>?): GtkLevelBarMode {
    memScoped {
        return GtkLevelBarMode.byValue(kniBridge5505(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_level_bar_set_value(self: CValuesRef<GtkLevelBar>?, value: gdouble): Unit {
    memScoped {
        return kniBridge5506(self?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_level_bar_get_value(self: CValuesRef<GtkLevelBar>?): gdouble {
    memScoped {
        return kniBridge5507(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_level_bar_set_min_value(self: CValuesRef<GtkLevelBar>?, value: gdouble): Unit {
    memScoped {
        return kniBridge5508(self?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_level_bar_get_min_value(self: CValuesRef<GtkLevelBar>?): gdouble {
    memScoped {
        return kniBridge5509(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_level_bar_set_max_value(self: CValuesRef<GtkLevelBar>?, value: gdouble): Unit {
    memScoped {
        return kniBridge5510(self?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_level_bar_get_max_value(self: CValuesRef<GtkLevelBar>?): gdouble {
    memScoped {
        return kniBridge5511(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_level_bar_set_inverted(self: CValuesRef<GtkLevelBar>?, inverted: gboolean): Unit {
    memScoped {
        return kniBridge5512(self?.getPointer(memScope).rawValue, inverted)
    }
}

fun gtk_level_bar_get_inverted(self: CValuesRef<GtkLevelBar>?): gboolean {
    memScoped {
        return kniBridge5513(self?.getPointer(memScope).rawValue)
    }
}

fun gtk_level_bar_add_offset_value(self: CValuesRef<GtkLevelBar>?, @CCall.CString name: String?, value: gdouble): Unit {
    memScoped {
        return kniBridge5514(self?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_level_bar_remove_offset_value(self: CValuesRef<GtkLevelBar>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge5515(self?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_level_bar_get_offset_value(self: CValuesRef<GtkLevelBar>?, @CCall.CString name: String?, value: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5516(self?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue)
    }
}

fun gtk_link_button_get_type(): GType {
    return kniBridge5517()
}

fun gtk_link_button_new(@CCall.CString uri: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5518(uri?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_link_button_new_with_label(@CCall.CString uri: String?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5519(uri?.cstr?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_link_button_get_uri(link_button: CValuesRef<GtkLinkButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5520(link_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_link_button_set_uri(link_button: CValuesRef<GtkLinkButton>?, @CCall.CString uri: String?): Unit {
    memScoped {
        return kniBridge5521(link_button?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_link_button_get_visited(link_button: CValuesRef<GtkLinkButton>?): gboolean {
    memScoped {
        return kniBridge5522(link_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_link_button_set_visited(link_button: CValuesRef<GtkLinkButton>?, visited: gboolean): Unit {
    memScoped {
        return kniBridge5523(link_button?.getPointer(memScope).rawValue, visited)
    }
}

fun gtk_list_box_row_get_type(): GType {
    return kniBridge5524()
}

fun gtk_list_box_row_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5525())
}

fun gtk_list_box_row_get_header(row: CValuesRef<GtkListBoxRow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5526(row?.getPointer(memScope).rawValue))
    }
}

fun gtk_list_box_row_set_header(row: CValuesRef<GtkListBoxRow>?, header: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5527(row?.getPointer(memScope).rawValue, header?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_row_get_index(row: CValuesRef<GtkListBoxRow>?): gint {
    memScoped {
        return kniBridge5528(row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_row_changed(row: CValuesRef<GtkListBoxRow>?): Unit {
    memScoped {
        return kniBridge5529(row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_row_is_selected(row: CValuesRef<GtkListBoxRow>?): gboolean {
    memScoped {
        return kniBridge5530(row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_row_set_selectable(row: CValuesRef<GtkListBoxRow>?, selectable: gboolean): Unit {
    memScoped {
        return kniBridge5531(row?.getPointer(memScope).rawValue, selectable)
    }
}

fun gtk_list_box_row_get_selectable(row: CValuesRef<GtkListBoxRow>?): gboolean {
    memScoped {
        return kniBridge5532(row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_row_set_activatable(row: CValuesRef<GtkListBoxRow>?, activatable: gboolean): Unit {
    memScoped {
        return kniBridge5533(row?.getPointer(memScope).rawValue, activatable)
    }
}

fun gtk_list_box_row_get_activatable(row: CValuesRef<GtkListBoxRow>?): gboolean {
    memScoped {
        return kniBridge5534(row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_get_type(): GType {
    return kniBridge5535()
}

fun gtk_list_box_prepend(box: CValuesRef<GtkListBox>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5536(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_insert(box: CValuesRef<GtkListBox>?, child: CValuesRef<GtkWidget>?, position: gint): Unit {
    memScoped {
        return kniBridge5537(box?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_list_box_get_selected_row(box: CValuesRef<GtkListBox>?): CPointer<GtkListBoxRow>? {
    memScoped {
        return interpretCPointer<GtkListBoxRow>(kniBridge5538(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_list_box_get_row_at_index(box: CValuesRef<GtkListBox>?, index_: gint): CPointer<GtkListBoxRow>? {
    memScoped {
        return interpretCPointer<GtkListBoxRow>(kniBridge5539(box?.getPointer(memScope).rawValue, index_))
    }
}

fun gtk_list_box_get_row_at_y(box: CValuesRef<GtkListBox>?, y: gint): CPointer<GtkListBoxRow>? {
    memScoped {
        return interpretCPointer<GtkListBoxRow>(kniBridge5540(box?.getPointer(memScope).rawValue, y))
    }
}

fun gtk_list_box_select_row(box: CValuesRef<GtkListBox>?, row: CValuesRef<GtkListBoxRow>?): Unit {
    memScoped {
        return kniBridge5541(box?.getPointer(memScope).rawValue, row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_set_placeholder(box: CValuesRef<GtkListBox>?, placeholder: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5542(box?.getPointer(memScope).rawValue, placeholder?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_set_adjustment(box: CValuesRef<GtkListBox>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge5543(box?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_get_adjustment(box: CValuesRef<GtkListBox>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge5544(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_list_box_selected_foreach(box: CValuesRef<GtkListBox>?, func: GtkListBoxForeachFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge5545(box?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun gtk_list_box_get_selected_rows(box: CValuesRef<GtkListBox>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5546(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_list_box_unselect_row(box: CValuesRef<GtkListBox>?, row: CValuesRef<GtkListBoxRow>?): Unit {
    memScoped {
        return kniBridge5547(box?.getPointer(memScope).rawValue, row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_select_all(box: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5548(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_unselect_all(box: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5549(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_set_selection_mode(box: CValuesRef<GtkListBox>?, mode: GtkSelectionMode): Unit {
    memScoped {
        return kniBridge5550(box?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_list_box_get_selection_mode(box: CValuesRef<GtkListBox>?): GtkSelectionMode {
    memScoped {
        return GtkSelectionMode.byValue(kniBridge5551(box?.getPointer(memScope).rawValue))
    }
}

fun gtk_list_box_set_filter_func(box: CValuesRef<GtkListBox>?, filter_func: GtkListBoxFilterFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5552(box?.getPointer(memScope).rawValue, filter_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_list_box_set_header_func(box: CValuesRef<GtkListBox>?, update_header: GtkListBoxUpdateHeaderFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5553(box?.getPointer(memScope).rawValue, update_header.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_list_box_invalidate_filter(box: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5554(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_invalidate_sort(box: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5555(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_invalidate_headers(box: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5556(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_set_sort_func(box: CValuesRef<GtkListBox>?, sort_func: GtkListBoxSortFunc?, user_data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5557(box?.getPointer(memScope).rawValue, sort_func.rawValue, user_data.rawValue, destroy.rawValue)
    }
}

fun gtk_list_box_set_activate_on_single_click(box: CValuesRef<GtkListBox>?, single: gboolean): Unit {
    memScoped {
        return kniBridge5558(box?.getPointer(memScope).rawValue, single)
    }
}

fun gtk_list_box_get_activate_on_single_click(box: CValuesRef<GtkListBox>?): gboolean {
    memScoped {
        return kniBridge5559(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_drag_unhighlight_row(box: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5560(box?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_drag_highlight_row(box: CValuesRef<GtkListBox>?, row: CValuesRef<GtkListBoxRow>?): Unit {
    memScoped {
        return kniBridge5561(box?.getPointer(memScope).rawValue, row?.getPointer(memScope).rawValue)
    }
}

fun gtk_list_box_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5562())
}

fun gtk_list_box_bind_model(box: CValuesRef<GtkListBox>?, model: CValuesRef<GListModel>?, create_widget_func: GtkListBoxCreateWidgetFunc?, user_data: gpointer?, user_data_free_func: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge5563(box?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue, create_widget_func.rawValue, user_data.rawValue, user_data_free_func.rawValue)
    }
}

fun glib_autoptr_clear_GtkListBox(_ptr: CValuesRef<GtkListBox>?): Unit {
    memScoped {
        return kniBridge5564(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkListBox(_ptr: CValuesRef<CPointerVar<GtkListBox>>?): Unit {
    memScoped {
        return kniBridge5565(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkListBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge5566(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkListBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge5567(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkListBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge5568(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkListBoxRow(_ptr: CValuesRef<GtkListBoxRow>?): Unit {
    memScoped {
        return kniBridge5569(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkListBoxRow(_ptr: CValuesRef<CPointerVar<GtkListBoxRow>>?): Unit {
    memScoped {
        return kniBridge5570(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkListBoxRow(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge5571(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkListBoxRow(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge5572(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkListBoxRow(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge5573(_q?.getPointer(memScope).rawValue)
    }
}

fun gtk_lock_button_get_type(): GType {
    return kniBridge5574()
}

fun gtk_lock_button_new(permission: CValuesRef<GPermission>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5575(permission?.getPointer(memScope).rawValue))
    }
}

fun gtk_lock_button_get_permission(button: CValuesRef<GtkLockButton>?): CPointer<GPermission>? {
    memScoped {
        return interpretCPointer<GPermission>(kniBridge5576(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_lock_button_set_permission(button: CValuesRef<GtkLockButton>?, permission: CValuesRef<GPermission>?): Unit {
    memScoped {
        return kniBridge5577(button?.getPointer(memScope).rawValue, permission?.getPointer(memScope).rawValue)
    }
}

fun gtk_get_major_version(): guint {
    return kniBridge5578()
}

fun gtk_get_minor_version(): guint {
    return kniBridge5579()
}

fun gtk_get_micro_version(): guint {
    return kniBridge5580()
}

fun gtk_get_binary_age(): guint {
    return kniBridge5581()
}

fun gtk_get_interface_age(): guint {
    return kniBridge5582()
}

fun gtk_check_version(required_major: guint, required_minor: guint, required_micro: guint): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge5583(required_major, required_minor, required_micro))
}

fun gtk_parse_args(argc: CValuesRef<IntVar>?, argv: CValuesRef<CPointerVar<CPointerVar<ByteVar>>>?): gboolean {
    memScoped {
        return kniBridge5584(argc?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue)
    }
}

fun gtk_init(argc: CValuesRef<IntVar>?, argv: CValuesRef<CPointerVar<CPointerVar<ByteVar>>>?): Unit {
    memScoped {
        return kniBridge5585(argc?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue)
    }
}

fun gtk_init_check(argc: CValuesRef<IntVar>?, argv: CValuesRef<CPointerVar<CPointerVar<ByteVar>>>?): gboolean {
    memScoped {
        return kniBridge5586(argc?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue)
    }
}

fun gtk_init_with_args(argc: CValuesRef<gintVar>?, argv: CValuesRef<CPointerVar<CPointerVar<gcharVar>>>?, @CCall.CString parameter_string: String?, entries: CValuesRef<GOptionEntry>?, @CCall.CString translation_domain: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5587(argc?.getPointer(memScope).rawValue, argv?.getPointer(memScope).rawValue, parameter_string?.cstr?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, translation_domain?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_get_option_group(open_default_display: gboolean): CPointer<GOptionGroup>? {
    return interpretCPointer<GOptionGroup>(kniBridge5588(open_default_display))
}

fun gtk_disable_setlocale(): Unit {
    return kniBridge5589()
}

fun gtk_get_default_language(): CPointer<PangoLanguage>? {
    return interpretCPointer<PangoLanguage>(kniBridge5590())
}

fun gtk_get_locale_direction(): GtkTextDirection {
    return GtkTextDirection.byValue(kniBridge5591())
}

fun gtk_events_pending(): gboolean {
    return kniBridge5592()
}

fun gtk_main_do_event(event: CValuesRef<GdkEvent>?): Unit {
    memScoped {
        return kniBridge5593(event?.getPointer(memScope).rawValue)
    }
}

fun gtk_main(): Unit {
    return kniBridge5594()
}

fun gtk_main_level(): guint {
    return kniBridge5595()
}

fun gtk_main_quit(): Unit {
    return kniBridge5596()
}

fun gtk_main_iteration(): gboolean {
    return kniBridge5597()
}

fun gtk_main_iteration_do(blocking: gboolean): gboolean {
    return kniBridge5598(blocking)
}

fun gtk_true(): gboolean {
    return kniBridge5599()
}

fun gtk_false(): gboolean {
    return kniBridge5600()
}

fun gtk_grab_add(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5601(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_grab_get_current(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5602())
}

fun gtk_grab_remove(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5603(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_device_grab_add(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?, block_others: gboolean): Unit {
    memScoped {
        return kniBridge5604(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue, block_others)
    }
}

fun gtk_device_grab_remove(widget: CValuesRef<GtkWidget>?, device: CValuesRef<GdkDevice>?): Unit {
    memScoped {
        return kniBridge5605(widget?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue)
    }
}

fun gtk_key_snooper_install(snooper: GtkKeySnoopFunc?, func_data: gpointer?): guint {
    return kniBridge5606(snooper.rawValue, func_data.rawValue)
}

fun gtk_key_snooper_remove(snooper_handler_id: guint): Unit {
    return kniBridge5607(snooper_handler_id)
}

fun gtk_get_current_event(): CPointer<GdkEvent>? {
    return interpretCPointer<GdkEvent>(kniBridge5608())
}

fun gtk_get_current_event_time(): guint32 {
    return kniBridge5609()
}

fun gtk_get_current_event_state(state: CValuesRef<GdkModifierTypeVar>?): gboolean {
    memScoped {
        return kniBridge5610(state?.getPointer(memScope).rawValue)
    }
}

fun gtk_get_current_event_device(): CPointer<GdkDevice>? {
    return interpretCPointer<GdkDevice>(kniBridge5611())
}

fun gtk_get_event_widget(event: CValuesRef<GdkEvent>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5612(event?.getPointer(memScope).rawValue))
    }
}

fun gtk_propagate_event(widget: CValuesRef<GtkWidget>?, event: CValuesRef<GdkEvent>?): Unit {
    memScoped {
        return kniBridge5613(widget?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_bar_get_type(): GType {
    return kniBridge5614()
}

fun gtk_menu_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5615())
}

fun gtk_menu_bar_new_from_model(model: CValuesRef<GMenuModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5616(model?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_bar_get_pack_direction(menubar: CValuesRef<GtkMenuBar>?): GtkPackDirection {
    memScoped {
        return GtkPackDirection.byValue(kniBridge5617(menubar?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_bar_set_pack_direction(menubar: CValuesRef<GtkMenuBar>?, pack_dir: GtkPackDirection): Unit {
    memScoped {
        return kniBridge5618(menubar?.getPointer(memScope).rawValue, pack_dir.value)
    }
}

fun gtk_menu_bar_get_child_pack_direction(menubar: CValuesRef<GtkMenuBar>?): GtkPackDirection {
    memScoped {
        return GtkPackDirection.byValue(kniBridge5619(menubar?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_bar_set_child_pack_direction(menubar: CValuesRef<GtkMenuBar>?, child_pack_dir: GtkPackDirection): Unit {
    memScoped {
        return kniBridge5620(menubar?.getPointer(memScope).rawValue, child_pack_dir.value)
    }
}

fun _gtk_menu_bar_cycle_focus(menubar: CValuesRef<GtkMenuBar>?, dir: GtkDirectionType): Unit {
    memScoped {
        return kniBridge5621(menubar?.getPointer(memScope).rawValue, dir.value)
    }
}

fun _gtk_menu_bar_get_viewable_menu_bars(window: CValuesRef<GtkWindow>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge5622(window?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_get_type(): GType {
    return kniBridge5623()
}

fun gtk_popover_new(relative_to: CValuesRef<GtkWidget>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5624(relative_to?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_new_from_model(relative_to: CValuesRef<GtkWidget>?, model: CValuesRef<GMenuModel>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5625(relative_to?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_set_relative_to(popover: CValuesRef<GtkPopover>?, relative_to: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5626(popover?.getPointer(memScope).rawValue, relative_to?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_get_relative_to(popover: CValuesRef<GtkPopover>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5627(popover?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_set_pointing_to(popover: CValuesRef<GtkPopover>?, rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge5628(popover?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_get_pointing_to(popover: CValuesRef<GtkPopover>?, rect: CValuesRef<GdkRectangle>?): gboolean {
    memScoped {
        return kniBridge5629(popover?.getPointer(memScope).rawValue, rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_set_position(popover: CValuesRef<GtkPopover>?, position: GtkPositionType): Unit {
    memScoped {
        return kniBridge5630(popover?.getPointer(memScope).rawValue, position.value)
    }
}

fun gtk_popover_get_position(popover: CValuesRef<GtkPopover>?): GtkPositionType {
    memScoped {
        return GtkPositionType.byValue(kniBridge5631(popover?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_set_modal(popover: CValuesRef<GtkPopover>?, modal: gboolean): Unit {
    memScoped {
        return kniBridge5632(popover?.getPointer(memScope).rawValue, modal)
    }
}

fun gtk_popover_get_modal(popover: CValuesRef<GtkPopover>?): gboolean {
    memScoped {
        return kniBridge5633(popover?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_bind_model(popover: CValuesRef<GtkPopover>?, model: CValuesRef<GMenuModel>?, @CCall.CString action_namespace: String?): Unit {
    memScoped {
        return kniBridge5634(popover?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue, action_namespace?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_set_transitions_enabled(popover: CValuesRef<GtkPopover>?, transitions_enabled: gboolean): Unit {
    memScoped {
        return kniBridge5635(popover?.getPointer(memScope).rawValue, transitions_enabled)
    }
}

fun gtk_popover_get_transitions_enabled(popover: CValuesRef<GtkPopover>?): gboolean {
    memScoped {
        return kniBridge5636(popover?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_set_default_widget(popover: CValuesRef<GtkPopover>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5637(popover?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_get_default_widget(popover: CValuesRef<GtkPopover>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5638(popover?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_set_constrain_to(popover: CValuesRef<GtkPopover>?, constraint: GtkPopoverConstraint): Unit {
    memScoped {
        return kniBridge5639(popover?.getPointer(memScope).rawValue, constraint.value)
    }
}

fun gtk_popover_get_constrain_to(popover: CValuesRef<GtkPopover>?): GtkPopoverConstraint {
    memScoped {
        return GtkPopoverConstraint.byValue(kniBridge5640(popover?.getPointer(memScope).rawValue))
    }
}

fun gtk_popover_popup(popover: CValuesRef<GtkPopover>?): Unit {
    memScoped {
        return kniBridge5641(popover?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_popdown(popover: CValuesRef<GtkPopover>?): Unit {
    memScoped {
        return kniBridge5642(popover?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_button_get_type(): GType {
    return kniBridge5643()
}

fun gtk_menu_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5644())
}

fun gtk_menu_button_set_popup(menu_button: CValuesRef<GtkMenuButton>?, menu: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5645(menu_button?.getPointer(memScope).rawValue, menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_button_get_popup(menu_button: CValuesRef<GtkMenuButton>?): CPointer<GtkMenu>? {
    memScoped {
        return interpretCPointer<GtkMenu>(kniBridge5646(menu_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_button_set_popover(menu_button: CValuesRef<GtkMenuButton>?, popover: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5647(menu_button?.getPointer(memScope).rawValue, popover?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_button_get_popover(menu_button: CValuesRef<GtkMenuButton>?): CPointer<GtkPopover>? {
    memScoped {
        return interpretCPointer<GtkPopover>(kniBridge5648(menu_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_button_set_direction(menu_button: CValuesRef<GtkMenuButton>?, direction: GtkArrowType): Unit {
    memScoped {
        return kniBridge5649(menu_button?.getPointer(memScope).rawValue, direction.value)
    }
}

fun gtk_menu_button_get_direction(menu_button: CValuesRef<GtkMenuButton>?): GtkArrowType {
    memScoped {
        return GtkArrowType.byValue(kniBridge5650(menu_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_button_set_menu_model(menu_button: CValuesRef<GtkMenuButton>?, menu_model: CValuesRef<GMenuModel>?): Unit {
    memScoped {
        return kniBridge5651(menu_button?.getPointer(memScope).rawValue, menu_model?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_button_get_menu_model(menu_button: CValuesRef<GtkMenuButton>?): CPointer<GMenuModel>? {
    memScoped {
        return interpretCPointer<GMenuModel>(kniBridge5652(menu_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_button_set_align_widget(menu_button: CValuesRef<GtkMenuButton>?, align_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5653(menu_button?.getPointer(memScope).rawValue, align_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_button_get_align_widget(menu_button: CValuesRef<GtkMenuButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5654(menu_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_button_set_use_popover(menu_button: CValuesRef<GtkMenuButton>?, use_popover: gboolean): Unit {
    memScoped {
        return kniBridge5655(menu_button?.getPointer(memScope).rawValue, use_popover)
    }
}

fun gtk_menu_button_get_use_popover(menu_button: CValuesRef<GtkMenuButton>?): gboolean {
    memScoped {
        return kniBridge5656(menu_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_size_group_get_type(): GType {
    return kniBridge5657()
}

fun gtk_size_group_new(mode: GtkSizeGroupMode): CPointer<GtkSizeGroup>? {
    return interpretCPointer<GtkSizeGroup>(kniBridge5658(mode.value))
}

fun gtk_size_group_set_mode(size_group: CValuesRef<GtkSizeGroup>?, mode: GtkSizeGroupMode): Unit {
    memScoped {
        return kniBridge5659(size_group?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_size_group_get_mode(size_group: CValuesRef<GtkSizeGroup>?): GtkSizeGroupMode {
    memScoped {
        return GtkSizeGroupMode.byValue(kniBridge5660(size_group?.getPointer(memScope).rawValue))
    }
}

fun gtk_size_group_set_ignore_hidden(size_group: CValuesRef<GtkSizeGroup>?, ignore_hidden: gboolean): Unit {
    memScoped {
        return kniBridge5661(size_group?.getPointer(memScope).rawValue, ignore_hidden)
    }
}

fun gtk_size_group_get_ignore_hidden(size_group: CValuesRef<GtkSizeGroup>?): gboolean {
    memScoped {
        return kniBridge5662(size_group?.getPointer(memScope).rawValue)
    }
}

fun gtk_size_group_add_widget(size_group: CValuesRef<GtkSizeGroup>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5663(size_group?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_size_group_remove_widget(size_group: CValuesRef<GtkSizeGroup>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5664(size_group?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_size_group_get_widgets(size_group: CValuesRef<GtkSizeGroup>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge5665(size_group?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_type(): GType {
    return kniBridge5666()
}

fun gtk_tool_item_new(): CPointer<GtkToolItem>? {
    return interpretCPointer<GtkToolItem>(kniBridge5667())
}

fun gtk_tool_item_set_homogeneous(tool_item: CValuesRef<GtkToolItem>?, homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge5668(tool_item?.getPointer(memScope).rawValue, homogeneous)
    }
}

fun gtk_tool_item_get_homogeneous(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5669(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_expand(tool_item: CValuesRef<GtkToolItem>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge5670(tool_item?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_tool_item_get_expand(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5671(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_tooltip_text(tool_item: CValuesRef<GtkToolItem>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge5672(tool_item?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_tooltip_markup(tool_item: CValuesRef<GtkToolItem>?, @CCall.CString markup: String?): Unit {
    memScoped {
        return kniBridge5673(tool_item?.getPointer(memScope).rawValue, markup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_use_drag_window(tool_item: CValuesRef<GtkToolItem>?, use_drag_window: gboolean): Unit {
    memScoped {
        return kniBridge5674(tool_item?.getPointer(memScope).rawValue, use_drag_window)
    }
}

fun gtk_tool_item_get_use_drag_window(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5675(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_visible_horizontal(tool_item: CValuesRef<GtkToolItem>?, visible_horizontal: gboolean): Unit {
    memScoped {
        return kniBridge5676(tool_item?.getPointer(memScope).rawValue, visible_horizontal)
    }
}

fun gtk_tool_item_get_visible_horizontal(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5677(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_visible_vertical(tool_item: CValuesRef<GtkToolItem>?, visible_vertical: gboolean): Unit {
    memScoped {
        return kniBridge5678(tool_item?.getPointer(memScope).rawValue, visible_vertical)
    }
}

fun gtk_tool_item_get_visible_vertical(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5679(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_get_is_important(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5680(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_set_is_important(tool_item: CValuesRef<GtkToolItem>?, is_important: gboolean): Unit {
    memScoped {
        return kniBridge5681(tool_item?.getPointer(memScope).rawValue, is_important)
    }
}

fun gtk_tool_item_get_ellipsize_mode(tool_item: CValuesRef<GtkToolItem>?): PangoEllipsizeMode {
    memScoped {
        return PangoEllipsizeMode.byValue(kniBridge5682(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_icon_size(tool_item: CValuesRef<GtkToolItem>?): GtkIconSize {
    memScoped {
        return GtkIconSize.byValue(kniBridge5683(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_orientation(tool_item: CValuesRef<GtkToolItem>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge5684(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_toolbar_style(tool_item: CValuesRef<GtkToolItem>?): GtkToolbarStyle {
    memScoped {
        return GtkToolbarStyle.byValue(kniBridge5685(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_relief_style(tool_item: CValuesRef<GtkToolItem>?): GtkReliefStyle {
    memScoped {
        return GtkReliefStyle.byValue(kniBridge5686(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_text_alignment(tool_item: CValuesRef<GtkToolItem>?): gfloat {
    memScoped {
        return kniBridge5687(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_get_text_orientation(tool_item: CValuesRef<GtkToolItem>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge5688(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_text_size_group(tool_item: CValuesRef<GtkToolItem>?): CPointer<GtkSizeGroup>? {
    memScoped {
        return interpretCPointer<GtkSizeGroup>(kniBridge5689(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_retrieve_proxy_menu_item(tool_item: CValuesRef<GtkToolItem>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5690(tool_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_get_proxy_menu_item(tool_item: CValuesRef<GtkToolItem>?, @CCall.CString menu_item_id: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5691(tool_item?.getPointer(memScope).rawValue, menu_item_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_set_proxy_menu_item(tool_item: CValuesRef<GtkToolItem>?, @CCall.CString menu_item_id: String?, menu_item: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5692(tool_item?.getPointer(memScope).rawValue, menu_item_id?.cstr?.getPointer(memScope).rawValue, menu_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_rebuild_menu(tool_item: CValuesRef<GtkToolItem>?): Unit {
    memScoped {
        return kniBridge5693(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_toolbar_reconfigured(tool_item: CValuesRef<GtkToolItem>?): Unit {
    memScoped {
        return kniBridge5694(tool_item?.getPointer(memScope).rawValue)
    }
}

fun _gtk_tool_item_create_menu_proxy(tool_item: CValuesRef<GtkToolItem>?): gboolean {
    memScoped {
        return kniBridge5695(tool_item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_get_type(): GType {
    return kniBridge5696()
}

fun gtk_tool_button_new(icon_widget: CValuesRef<GtkWidget>?, @CCall.CString label: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge5697(icon_widget?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_button_new_from_stock(@CCall.CString stock_id: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge5698(stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_button_set_label(button: CValuesRef<GtkToolButton>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge5699(button?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_get_label(button: CValuesRef<GtkToolButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5700(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_button_set_use_underline(button: CValuesRef<GtkToolButton>?, use_underline: gboolean): Unit {
    memScoped {
        return kniBridge5701(button?.getPointer(memScope).rawValue, use_underline)
    }
}

fun gtk_tool_button_get_use_underline(button: CValuesRef<GtkToolButton>?): gboolean {
    memScoped {
        return kniBridge5702(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_set_stock_id(button: CValuesRef<GtkToolButton>?, @CCall.CString stock_id: String?): Unit {
    memScoped {
        return kniBridge5703(button?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_get_stock_id(button: CValuesRef<GtkToolButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5704(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_button_set_icon_name(button: CValuesRef<GtkToolButton>?, @CCall.CString icon_name: String?): Unit {
    memScoped {
        return kniBridge5705(button?.getPointer(memScope).rawValue, icon_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_get_icon_name(button: CValuesRef<GtkToolButton>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5706(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_button_set_icon_widget(button: CValuesRef<GtkToolButton>?, icon_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5707(button?.getPointer(memScope).rawValue, icon_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_get_icon_widget(button: CValuesRef<GtkToolButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5708(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_button_set_label_widget(button: CValuesRef<GtkToolButton>?, label_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5709(button?.getPointer(memScope).rawValue, label_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_button_get_label_widget(button: CValuesRef<GtkToolButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5710(button?.getPointer(memScope).rawValue))
    }
}

fun _gtk_tool_button_get_button(button: CValuesRef<GtkToolButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5711(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_tool_button_get_type(): GType {
    return kniBridge5712()
}

fun gtk_menu_tool_button_new(icon_widget: CValuesRef<GtkWidget>?, @CCall.CString label: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge5713(icon_widget?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_tool_button_new_from_stock(@CCall.CString stock_id: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge5714(stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_tool_button_set_menu(button: CValuesRef<GtkMenuToolButton>?, menu: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5715(button?.getPointer(memScope).rawValue, menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_tool_button_get_menu(button: CValuesRef<GtkMenuToolButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5716(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_menu_tool_button_set_arrow_tooltip_text(button: CValuesRef<GtkMenuToolButton>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge5717(button?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_menu_tool_button_set_arrow_tooltip_markup(button: CValuesRef<GtkMenuToolButton>?, @CCall.CString markup: String?): Unit {
    memScoped {
        return kniBridge5718(button?.getPointer(memScope).rawValue, markup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_message_dialog_get_type(): GType {
    return kniBridge5719()
}

@CCall("knifunptr_libgtk363")
external fun gtk_message_dialog_new(parent: CValuesRef<GtkWindow>?, flags: GtkDialogFlags, type: GtkMessageType, buttons: GtkButtonsType, @CCall.CString message_format: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

@CCall("knifunptr_libgtk364")
external fun gtk_message_dialog_new_with_markup(parent: CValuesRef<GtkWindow>?, flags: GtkDialogFlags, type: GtkMessageType, buttons: GtkButtonsType, @CCall.CString message_format: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_message_dialog_set_image(dialog: CValuesRef<GtkMessageDialog>?, image: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5720(dialog?.getPointer(memScope).rawValue, image?.getPointer(memScope).rawValue)
    }
}

fun gtk_message_dialog_get_image(dialog: CValuesRef<GtkMessageDialog>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5721(dialog?.getPointer(memScope).rawValue))
    }
}

fun gtk_message_dialog_set_markup(message_dialog: CValuesRef<GtkMessageDialog>?, @CCall.CString str: String?): Unit {
    memScoped {
        return kniBridge5722(message_dialog?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk365")
external fun gtk_message_dialog_format_secondary_text(message_dialog: CValuesRef<GtkMessageDialog>?, @CCall.CString message_format: String?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk366")
external fun gtk_message_dialog_format_secondary_markup(message_dialog: CValuesRef<GtkMessageDialog>?, @CCall.CString message_format: String?, vararg variadicArguments: Any?): Unit

fun gtk_message_dialog_get_message_area(message_dialog: CValuesRef<GtkMessageDialog>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5723(message_dialog?.getPointer(memScope).rawValue))
    }
}

fun gtk_model_button_get_type(): GType {
    return kniBridge5724()
}

fun gtk_model_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5725())
}

fun gtk_mount_operation_get_type(): GType {
    return kniBridge5726()
}

fun gtk_mount_operation_new(parent: CValuesRef<GtkWindow>?): CPointer<GMountOperation>? {
    memScoped {
        return interpretCPointer<GMountOperation>(kniBridge5727(parent?.getPointer(memScope).rawValue))
    }
}

fun gtk_mount_operation_is_showing(op: CValuesRef<GtkMountOperation>?): gboolean {
    memScoped {
        return kniBridge5728(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_mount_operation_set_parent(op: CValuesRef<GtkMountOperation>?, parent: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge5729(op?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_mount_operation_get_parent(op: CValuesRef<GtkMountOperation>?): CPointer<GtkWindow>? {
    memScoped {
        return interpretCPointer<GtkWindow>(kniBridge5730(op?.getPointer(memScope).rawValue))
    }
}

fun gtk_mount_operation_set_screen(op: CValuesRef<GtkMountOperation>?, screen: CValuesRef<GdkScreen>?): Unit {
    memScoped {
        return kniBridge5731(op?.getPointer(memScope).rawValue, screen?.getPointer(memScope).rawValue)
    }
}

fun gtk_mount_operation_get_screen(op: CValuesRef<GtkMountOperation>?): CPointer<GdkScreen>? {
    memScoped {
        return interpretCPointer<GdkScreen>(kniBridge5732(op?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_get_type(): GType {
    return kniBridge5733()
}

fun gtk_notebook_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5734())
}

fun gtk_notebook_append_page(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge5735(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_append_page_menu(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?, menu_label: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge5736(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue, menu_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_prepend_page(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge5737(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_prepend_page_menu(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?, menu_label: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge5738(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue, menu_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_insert_page(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?, position: gint): gint {
    memScoped {
        return kniBridge5739(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_notebook_insert_page_menu(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?, menu_label: CValuesRef<GtkWidget>?, position: gint): gint {
    memScoped {
        return kniBridge5740(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue, menu_label?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_notebook_remove_page(notebook: CValuesRef<GtkNotebook>?, page_num: gint): Unit {
    memScoped {
        return kniBridge5741(notebook?.getPointer(memScope).rawValue, page_num)
    }
}

fun gtk_notebook_set_group_name(notebook: CValuesRef<GtkNotebook>?, @CCall.CString group_name: String?): Unit {
    memScoped {
        return kniBridge5742(notebook?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_group_name(notebook: CValuesRef<GtkNotebook>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5743(notebook?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_get_current_page(notebook: CValuesRef<GtkNotebook>?): gint {
    memScoped {
        return kniBridge5744(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_nth_page(notebook: CValuesRef<GtkNotebook>?, page_num: gint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5745(notebook?.getPointer(memScope).rawValue, page_num))
    }
}

fun gtk_notebook_get_n_pages(notebook: CValuesRef<GtkNotebook>?): gint {
    memScoped {
        return kniBridge5746(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_page_num(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge5747(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_current_page(notebook: CValuesRef<GtkNotebook>?, page_num: gint): Unit {
    memScoped {
        return kniBridge5748(notebook?.getPointer(memScope).rawValue, page_num)
    }
}

fun gtk_notebook_next_page(notebook: CValuesRef<GtkNotebook>?): Unit {
    memScoped {
        return kniBridge5749(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_prev_page(notebook: CValuesRef<GtkNotebook>?): Unit {
    memScoped {
        return kniBridge5750(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_show_border(notebook: CValuesRef<GtkNotebook>?, show_border: gboolean): Unit {
    memScoped {
        return kniBridge5751(notebook?.getPointer(memScope).rawValue, show_border)
    }
}

fun gtk_notebook_get_show_border(notebook: CValuesRef<GtkNotebook>?): gboolean {
    memScoped {
        return kniBridge5752(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_show_tabs(notebook: CValuesRef<GtkNotebook>?, show_tabs: gboolean): Unit {
    memScoped {
        return kniBridge5753(notebook?.getPointer(memScope).rawValue, show_tabs)
    }
}

fun gtk_notebook_get_show_tabs(notebook: CValuesRef<GtkNotebook>?): gboolean {
    memScoped {
        return kniBridge5754(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_tab_pos(notebook: CValuesRef<GtkNotebook>?, pos: GtkPositionType): Unit {
    memScoped {
        return kniBridge5755(notebook?.getPointer(memScope).rawValue, pos.value)
    }
}

fun gtk_notebook_get_tab_pos(notebook: CValuesRef<GtkNotebook>?): GtkPositionType {
    memScoped {
        return GtkPositionType.byValue(kniBridge5756(notebook?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_set_scrollable(notebook: CValuesRef<GtkNotebook>?, scrollable: gboolean): Unit {
    memScoped {
        return kniBridge5757(notebook?.getPointer(memScope).rawValue, scrollable)
    }
}

fun gtk_notebook_get_scrollable(notebook: CValuesRef<GtkNotebook>?): gboolean {
    memScoped {
        return kniBridge5758(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_tab_hborder(notebook: CValuesRef<GtkNotebook>?): guint16 {
    memScoped {
        return kniBridge5759(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_tab_vborder(notebook: CValuesRef<GtkNotebook>?): guint16 {
    memScoped {
        return kniBridge5760(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_popup_enable(notebook: CValuesRef<GtkNotebook>?): Unit {
    memScoped {
        return kniBridge5761(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_popup_disable(notebook: CValuesRef<GtkNotebook>?): Unit {
    memScoped {
        return kniBridge5762(notebook?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_tab_label(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5763(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_set_tab_label(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, tab_label: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5764(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_tab_label_text(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, @CCall.CString tab_text: String?): Unit {
    memScoped {
        return kniBridge5765(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, tab_text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_tab_label_text(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5766(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_get_menu_label(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5767(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_set_menu_label(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, menu_label: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5768(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, menu_label?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_menu_label_text(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, @CCall.CString menu_text: String?): Unit {
    memScoped {
        return kniBridge5769(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, menu_text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_menu_label_text(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5770(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue))
    }
}

fun gtk_notebook_reorder_child(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, position: gint): Unit {
    memScoped {
        return kniBridge5771(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_notebook_get_tab_reorderable(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge5772(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_tab_reorderable(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, reorderable: gboolean): Unit {
    memScoped {
        return kniBridge5773(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, reorderable)
    }
}

fun gtk_notebook_get_tab_detachable(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge5774(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_set_tab_detachable(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?, detachable: gboolean): Unit {
    memScoped {
        return kniBridge5775(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, detachable)
    }
}

fun gtk_notebook_detach_tab(notebook: CValuesRef<GtkNotebook>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5776(notebook?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_notebook_get_action_widget(notebook: CValuesRef<GtkNotebook>?, pack_type: GtkPackType): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5777(notebook?.getPointer(memScope).rawValue, pack_type.value))
    }
}

fun gtk_notebook_set_action_widget(notebook: CValuesRef<GtkNotebook>?, widget: CValuesRef<GtkWidget>?, pack_type: GtkPackType): Unit {
    memScoped {
        return kniBridge5778(notebook?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, pack_type.value)
    }
}

fun gtk_offscreen_window_get_type(): GType {
    return kniBridge5779()
}

fun gtk_offscreen_window_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5780())
}

fun gtk_offscreen_window_get_surface(offscreen: CValuesRef<GtkOffscreenWindow>?): CPointer<cairo_surface_t>? {
    memScoped {
        return interpretCPointer<cairo_surface_t>(kniBridge5781(offscreen?.getPointer(memScope).rawValue))
    }
}

fun gtk_offscreen_window_get_pixbuf(offscreen: CValuesRef<GtkOffscreenWindow>?): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge5782(offscreen?.getPointer(memScope).rawValue))
    }
}

fun gtk_orientable_get_type(): GType {
    return kniBridge5783()
}

fun gtk_orientable_set_orientation(orientable: CValuesRef<GtkOrientable>?, orientation: GtkOrientation): Unit {
    memScoped {
        return kniBridge5784(orientable?.getPointer(memScope).rawValue, orientation.value)
    }
}

fun gtk_orientable_get_orientation(orientable: CValuesRef<GtkOrientable>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge5785(orientable?.getPointer(memScope).rawValue))
    }
}

fun gtk_overlay_get_type(): GType {
    return kniBridge5786()
}

fun gtk_overlay_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5787())
}

fun gtk_overlay_add_overlay(overlay: CValuesRef<GtkOverlay>?, widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5788(overlay?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_overlay_reorder_overlay(overlay: CValuesRef<GtkOverlay>?, child: CValuesRef<GtkWidget>?, index_: Int): Unit {
    memScoped {
        return kniBridge5789(overlay?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_overlay_get_overlay_pass_through(overlay: CValuesRef<GtkOverlay>?, widget: CValuesRef<GtkWidget>?): gboolean {
    memScoped {
        return kniBridge5790(overlay?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_overlay_set_overlay_pass_through(overlay: CValuesRef<GtkOverlay>?, widget: CValuesRef<GtkWidget>?, pass_through: gboolean): Unit {
    memScoped {
        return kniBridge5791(overlay?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, pass_through)
    }
}

fun gtk_pad_controller_get_type(): GType {
    return kniBridge5792()
}

fun gtk_pad_controller_new(window: CValuesRef<GtkWindow>?, group: CValuesRef<GActionGroup>?, pad: CValuesRef<GdkDevice>?): CPointer<GtkPadController>? {
    memScoped {
        return interpretCPointer<GtkPadController>(kniBridge5793(window?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, pad?.getPointer(memScope).rawValue))
    }
}

fun gtk_pad_controller_set_action_entries(controller: CValuesRef<GtkPadController>?, entries: CValuesRef<GtkPadActionEntry>?, n_entries: gint): Unit {
    memScoped {
        return kniBridge5794(controller?.getPointer(memScope).rawValue, entries?.getPointer(memScope).rawValue, n_entries)
    }
}

fun gtk_pad_controller_set_action(controller: CValuesRef<GtkPadController>?, type: GtkPadActionType, index: gint, mode: gint, @CCall.CString label: String?, @CCall.CString action_name: String?): Unit {
    memScoped {
        return kniBridge5795(controller?.getPointer(memScope).rawValue, type.value, index, mode, label?.cstr?.getPointer(memScope).rawValue, action_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_paper_size_get_type(): GType {
    return kniBridge5796()
}

fun gtk_paper_size_new(@CCall.CString name: String?): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5797(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_new_from_ppd(@CCall.CString ppd_name: String?, @CCall.CString ppd_display_name: String?, width: gdouble, height: gdouble): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5798(ppd_name?.cstr?.getPointer(memScope).rawValue, ppd_display_name?.cstr?.getPointer(memScope).rawValue, width, height))
    }
}

fun gtk_paper_size_new_from_ipp(@CCall.CString ipp_name: String?, width: gdouble, height: gdouble): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5799(ipp_name?.cstr?.getPointer(memScope).rawValue, width, height))
    }
}

fun gtk_paper_size_new_custom(@CCall.CString name: String?, @CCall.CString display_name: String?, width: gdouble, height: gdouble, unit: GtkUnit): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5800(name?.cstr?.getPointer(memScope).rawValue, display_name?.cstr?.getPointer(memScope).rawValue, width, height, unit.value))
    }
}

fun gtk_paper_size_copy(other: CValuesRef<GtkPaperSize>?): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5801(other?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_free(size: CValuesRef<GtkPaperSize>?): Unit {
    memScoped {
        return kniBridge5802(size?.getPointer(memScope).rawValue)
    }
}

fun gtk_paper_size_is_equal(size1: CValuesRef<GtkPaperSize>?, size2: CValuesRef<GtkPaperSize>?): gboolean {
    memScoped {
        return kniBridge5803(size1?.getPointer(memScope).rawValue, size2?.getPointer(memScope).rawValue)
    }
}

fun gtk_paper_size_get_paper_sizes(include_custom: gboolean): CPointer<GList>? {
    return interpretCPointer<GList>(kniBridge5804(include_custom))
}

fun gtk_paper_size_get_name(size: CValuesRef<GtkPaperSize>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5805(size?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_get_display_name(size: CValuesRef<GtkPaperSize>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5806(size?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_get_ppd_name(size: CValuesRef<GtkPaperSize>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5807(size?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_get_width(size: CValuesRef<GtkPaperSize>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5808(size?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_paper_size_get_height(size: CValuesRef<GtkPaperSize>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5809(size?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_paper_size_is_custom(size: CValuesRef<GtkPaperSize>?): gboolean {
    memScoped {
        return kniBridge5810(size?.getPointer(memScope).rawValue)
    }
}

fun gtk_paper_size_is_ipp(size: CValuesRef<GtkPaperSize>?): gboolean {
    memScoped {
        return kniBridge5811(size?.getPointer(memScope).rawValue)
    }
}

fun gtk_paper_size_set_size(size: CValuesRef<GtkPaperSize>?, width: gdouble, height: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5812(size?.getPointer(memScope).rawValue, width, height, unit.value)
    }
}

fun gtk_paper_size_get_default_top_margin(size: CValuesRef<GtkPaperSize>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5813(size?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_paper_size_get_default_bottom_margin(size: CValuesRef<GtkPaperSize>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5814(size?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_paper_size_get_default_left_margin(size: CValuesRef<GtkPaperSize>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5815(size?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_paper_size_get_default_right_margin(size: CValuesRef<GtkPaperSize>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5816(size?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_paper_size_get_default(): CPointer<gcharVar>? {
    return interpretCPointer<gcharVar>(kniBridge5817())
}

fun gtk_paper_size_new_from_key_file(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5818(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_to_key_file(size: CValuesRef<GtkPaperSize>?, key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?): Unit {
    memScoped {
        return kniBridge5819(size?.getPointer(memScope).rawValue, key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_paper_size_new_from_gvariant(variant: CValuesRef<GVariant>?): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5820(variant?.getPointer(memScope).rawValue))
    }
}

fun gtk_paper_size_to_gvariant(paper_size: CValuesRef<GtkPaperSize>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge5821(paper_size?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_get_type(): GType {
    return kniBridge5822()
}

fun gtk_page_setup_new(): CPointer<GtkPageSetup>? {
    return interpretCPointer<GtkPageSetup>(kniBridge5823())
}

fun gtk_page_setup_copy(other: CValuesRef<GtkPageSetup>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge5824(other?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_get_orientation(setup: CValuesRef<GtkPageSetup>?): GtkPageOrientation {
    memScoped {
        return GtkPageOrientation.byValue(kniBridge5825(setup?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_set_orientation(setup: CValuesRef<GtkPageSetup>?, orientation: GtkPageOrientation): Unit {
    memScoped {
        return kniBridge5826(setup?.getPointer(memScope).rawValue, orientation.value)
    }
}

fun gtk_page_setup_get_paper_size(setup: CValuesRef<GtkPageSetup>?): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5827(setup?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_set_paper_size(setup: CValuesRef<GtkPageSetup>?, size: CValuesRef<GtkPaperSize>?): Unit {
    memScoped {
        return kniBridge5828(setup?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue)
    }
}

fun gtk_page_setup_get_top_margin(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5829(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_set_top_margin(setup: CValuesRef<GtkPageSetup>?, margin: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5830(setup?.getPointer(memScope).rawValue, margin, unit.value)
    }
}

fun gtk_page_setup_get_bottom_margin(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5831(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_set_bottom_margin(setup: CValuesRef<GtkPageSetup>?, margin: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5832(setup?.getPointer(memScope).rawValue, margin, unit.value)
    }
}

fun gtk_page_setup_get_left_margin(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5833(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_set_left_margin(setup: CValuesRef<GtkPageSetup>?, margin: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5834(setup?.getPointer(memScope).rawValue, margin, unit.value)
    }
}

fun gtk_page_setup_get_right_margin(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5835(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_set_right_margin(setup: CValuesRef<GtkPageSetup>?, margin: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5836(setup?.getPointer(memScope).rawValue, margin, unit.value)
    }
}

fun gtk_page_setup_set_paper_size_and_default_margins(setup: CValuesRef<GtkPageSetup>?, size: CValuesRef<GtkPaperSize>?): Unit {
    memScoped {
        return kniBridge5837(setup?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue)
    }
}

fun gtk_page_setup_get_paper_width(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5838(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_get_paper_height(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5839(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_get_page_width(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5840(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_get_page_height(setup: CValuesRef<GtkPageSetup>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5841(setup?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_page_setup_new_from_file(@CCall.CString file_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge5842(file_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_load_file(setup: CValuesRef<GtkPageSetup>?, @CCall.CString file_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5843(setup?.getPointer(memScope).rawValue, file_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_page_setup_to_file(setup: CValuesRef<GtkPageSetup>?, @CCall.CString file_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5844(setup?.getPointer(memScope).rawValue, file_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_page_setup_new_from_key_file(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge5845(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_load_key_file(setup: CValuesRef<GtkPageSetup>?, key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5846(setup?.getPointer(memScope).rawValue, key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_page_setup_to_key_file(setup: CValuesRef<GtkPageSetup>?, key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?): Unit {
    memScoped {
        return kniBridge5847(setup?.getPointer(memScope).rawValue, key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_page_setup_to_gvariant(setup: CValuesRef<GtkPageSetup>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge5848(setup?.getPointer(memScope).rawValue))
    }
}

fun gtk_page_setup_new_from_gvariant(variant: CValuesRef<GVariant>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge5849(variant?.getPointer(memScope).rawValue))
    }
}

fun gtk_paned_get_type(): GType {
    return kniBridge5850()
}

fun gtk_paned_new(orientation: GtkOrientation): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5851(orientation.value))
}

fun gtk_paned_add1(paned: CValuesRef<GtkPaned>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5852(paned?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_paned_add2(paned: CValuesRef<GtkPaned>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge5853(paned?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_paned_pack1(paned: CValuesRef<GtkPaned>?, child: CValuesRef<GtkWidget>?, resize: gboolean, shrink: gboolean): Unit {
    memScoped {
        return kniBridge5854(paned?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, resize, shrink)
    }
}

fun gtk_paned_pack2(paned: CValuesRef<GtkPaned>?, child: CValuesRef<GtkWidget>?, resize: gboolean, shrink: gboolean): Unit {
    memScoped {
        return kniBridge5855(paned?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, resize, shrink)
    }
}

fun gtk_paned_get_position(paned: CValuesRef<GtkPaned>?): gint {
    memScoped {
        return kniBridge5856(paned?.getPointer(memScope).rawValue)
    }
}

fun gtk_paned_set_position(paned: CValuesRef<GtkPaned>?, position: gint): Unit {
    memScoped {
        return kniBridge5857(paned?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_paned_get_child1(paned: CValuesRef<GtkPaned>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5858(paned?.getPointer(memScope).rawValue))
    }
}

fun gtk_paned_get_child2(paned: CValuesRef<GtkPaned>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge5859(paned?.getPointer(memScope).rawValue))
    }
}

fun gtk_paned_get_handle_window(paned: CValuesRef<GtkPaned>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge5860(paned?.getPointer(memScope).rawValue))
    }
}

fun gtk_paned_set_wide_handle(paned: CValuesRef<GtkPaned>?, wide: gboolean): Unit {
    memScoped {
        return kniBridge5861(paned?.getPointer(memScope).rawValue, wide)
    }
}

fun gtk_paned_get_wide_handle(paned: CValuesRef<GtkPaned>?): gboolean {
    memScoped {
        return kniBridge5862(paned?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_get_type(): GType {
    return kniBridge5863()
}

fun gtk_places_sidebar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5864())
}

fun gtk_places_sidebar_get_open_flags(sidebar: CValuesRef<GtkPlacesSidebar>?): GtkPlacesOpenFlags {
    memScoped {
        return kniBridge5865(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_open_flags(sidebar: CValuesRef<GtkPlacesSidebar>?, flags: GtkPlacesOpenFlags): Unit {
    memScoped {
        return kniBridge5866(sidebar?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_places_sidebar_get_location(sidebar: CValuesRef<GtkPlacesSidebar>?): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge5867(sidebar?.getPointer(memScope).rawValue))
    }
}

fun gtk_places_sidebar_set_location(sidebar: CValuesRef<GtkPlacesSidebar>?, location: CValuesRef<GFile>?): Unit {
    memScoped {
        return kniBridge5868(sidebar?.getPointer(memScope).rawValue, location?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_get_show_recent(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5869(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_show_recent(sidebar: CValuesRef<GtkPlacesSidebar>?, show_recent: gboolean): Unit {
    memScoped {
        return kniBridge5870(sidebar?.getPointer(memScope).rawValue, show_recent)
    }
}

fun gtk_places_sidebar_get_show_desktop(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5871(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_show_desktop(sidebar: CValuesRef<GtkPlacesSidebar>?, show_desktop: gboolean): Unit {
    memScoped {
        return kniBridge5872(sidebar?.getPointer(memScope).rawValue, show_desktop)
    }
}

fun gtk_places_sidebar_get_show_connect_to_server(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5873(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_show_connect_to_server(sidebar: CValuesRef<GtkPlacesSidebar>?, show_connect_to_server: gboolean): Unit {
    memScoped {
        return kniBridge5874(sidebar?.getPointer(memScope).rawValue, show_connect_to_server)
    }
}

fun gtk_places_sidebar_get_show_enter_location(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5875(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_show_enter_location(sidebar: CValuesRef<GtkPlacesSidebar>?, show_enter_location: gboolean): Unit {
    memScoped {
        return kniBridge5876(sidebar?.getPointer(memScope).rawValue, show_enter_location)
    }
}

fun gtk_places_sidebar_set_local_only(sidebar: CValuesRef<GtkPlacesSidebar>?, local_only: gboolean): Unit {
    memScoped {
        return kniBridge5877(sidebar?.getPointer(memScope).rawValue, local_only)
    }
}

fun gtk_places_sidebar_get_local_only(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5878(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_add_shortcut(sidebar: CValuesRef<GtkPlacesSidebar>?, location: CValuesRef<GFile>?): Unit {
    memScoped {
        return kniBridge5879(sidebar?.getPointer(memScope).rawValue, location?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_remove_shortcut(sidebar: CValuesRef<GtkPlacesSidebar>?, location: CValuesRef<GFile>?): Unit {
    memScoped {
        return kniBridge5880(sidebar?.getPointer(memScope).rawValue, location?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_list_shortcuts(sidebar: CValuesRef<GtkPlacesSidebar>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge5881(sidebar?.getPointer(memScope).rawValue))
    }
}

fun gtk_places_sidebar_get_nth_bookmark(sidebar: CValuesRef<GtkPlacesSidebar>?, n: gint): CPointer<GFile>? {
    memScoped {
        return interpretCPointer<GFile>(kniBridge5882(sidebar?.getPointer(memScope).rawValue, n))
    }
}

fun gtk_places_sidebar_set_drop_targets_visible(sidebar: CValuesRef<GtkPlacesSidebar>?, visible: gboolean, context: CValuesRef<GdkDragContext>?): Unit {
    memScoped {
        return kniBridge5883(sidebar?.getPointer(memScope).rawValue, visible, context?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_get_show_trash(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5884(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_show_trash(sidebar: CValuesRef<GtkPlacesSidebar>?, show_trash: gboolean): Unit {
    memScoped {
        return kniBridge5885(sidebar?.getPointer(memScope).rawValue, show_trash)
    }
}

fun gtk_places_sidebar_set_show_other_locations(sidebar: CValuesRef<GtkPlacesSidebar>?, show_other_locations: gboolean): Unit {
    memScoped {
        return kniBridge5886(sidebar?.getPointer(memScope).rawValue, show_other_locations)
    }
}

fun gtk_places_sidebar_get_show_other_locations(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5887(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_places_sidebar_set_show_starred_location(sidebar: CValuesRef<GtkPlacesSidebar>?, show_starred_location: gboolean): Unit {
    memScoped {
        return kniBridge5888(sidebar?.getPointer(memScope).rawValue, show_starred_location)
    }
}

fun gtk_places_sidebar_get_show_starred_location(sidebar: CValuesRef<GtkPlacesSidebar>?): gboolean {
    memScoped {
        return kniBridge5889(sidebar?.getPointer(memScope).rawValue)
    }
}

fun gtk_popover_menu_get_type(): GType {
    return kniBridge5890()
}

fun gtk_popover_menu_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge5891())
}

fun gtk_popover_menu_open_submenu(popover: CValuesRef<GtkPopoverMenu>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge5892(popover?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_context_get_type(): GType {
    return kniBridge5893()
}

fun gtk_print_context_get_cairo_context(context: CValuesRef<GtkPrintContext>?): CPointer<cairo_t>? {
    memScoped {
        return interpretCPointer<cairo_t>(kniBridge5894(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_context_get_page_setup(context: CValuesRef<GtkPrintContext>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge5895(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_context_get_width(context: CValuesRef<GtkPrintContext>?): gdouble {
    memScoped {
        return kniBridge5896(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_context_get_height(context: CValuesRef<GtkPrintContext>?): gdouble {
    memScoped {
        return kniBridge5897(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_context_get_dpi_x(context: CValuesRef<GtkPrintContext>?): gdouble {
    memScoped {
        return kniBridge5898(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_context_get_dpi_y(context: CValuesRef<GtkPrintContext>?): gdouble {
    memScoped {
        return kniBridge5899(context?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_context_get_hard_margins(context: CValuesRef<GtkPrintContext>?, top: CValuesRef<gdoubleVar>?, bottom: CValuesRef<gdoubleVar>?, left: CValuesRef<gdoubleVar>?, right: CValuesRef<gdoubleVar>?): gboolean {
    memScoped {
        return kniBridge5900(context?.getPointer(memScope).rawValue, top?.getPointer(memScope).rawValue, bottom?.getPointer(memScope).rawValue, left?.getPointer(memScope).rawValue, right?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_context_get_pango_fontmap(context: CValuesRef<GtkPrintContext>?): CPointer<PangoFontMap>? {
    memScoped {
        return interpretCPointer<PangoFontMap>(kniBridge5901(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_context_create_pango_context(context: CValuesRef<GtkPrintContext>?): CPointer<PangoContext>? {
    memScoped {
        return interpretCPointer<PangoContext>(kniBridge5902(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_context_create_pango_layout(context: CValuesRef<GtkPrintContext>?): CPointer<PangoLayout>? {
    memScoped {
        return interpretCPointer<PangoLayout>(kniBridge5903(context?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_context_set_cairo_context(context: CValuesRef<GtkPrintContext>?, cr: CValuesRef<cairo_t>?, dpi_x: Double, dpi_y: Double): Unit {
    memScoped {
        return kniBridge5904(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, dpi_x, dpi_y)
    }
}

fun gtk_print_settings_get_type(): GType {
    return kniBridge5905()
}

fun gtk_print_settings_new(): CPointer<GtkPrintSettings>? {
    return interpretCPointer<GtkPrintSettings>(kniBridge5906())
}

fun gtk_print_settings_copy(other: CValuesRef<GtkPrintSettings>?): CPointer<GtkPrintSettings>? {
    memScoped {
        return interpretCPointer<GtkPrintSettings>(kniBridge5907(other?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_new_from_file(@CCall.CString file_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GtkPrintSettings>? {
    memScoped {
        return interpretCPointer<GtkPrintSettings>(kniBridge5908(file_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_load_file(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString file_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5909(settings?.getPointer(memScope).rawValue, file_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_to_file(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString file_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5910(settings?.getPointer(memScope).rawValue, file_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_new_from_key_file(key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GtkPrintSettings>? {
    memScoped {
        return interpretCPointer<GtkPrintSettings>(kniBridge5911(key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_load_key_file(settings: CValuesRef<GtkPrintSettings>?, key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge5912(settings?.getPointer(memScope).rawValue, key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_to_key_file(settings: CValuesRef<GtkPrintSettings>?, key_file: CValuesRef<GKeyFile>?, @CCall.CString group_name: String?): Unit {
    memScoped {
        return kniBridge5913(settings?.getPointer(memScope).rawValue, key_file?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_has_key(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?): gboolean {
    memScoped {
        return kniBridge5914(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5915(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, @CCall.CString value: String?): Unit {
    memScoped {
        return kniBridge5916(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_unset(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?): Unit {
    memScoped {
        return kniBridge5917(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_foreach(settings: CValuesRef<GtkPrintSettings>?, func: GtkPrintSettingsFunc?, user_data: gpointer?): Unit {
    memScoped {
        return kniBridge5918(settings?.getPointer(memScope).rawValue, func.rawValue, user_data.rawValue)
    }
}

fun gtk_print_settings_get_bool(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?): gboolean {
    memScoped {
        return kniBridge5919(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_bool(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, value: gboolean): Unit {
    memScoped {
        return kniBridge5920(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_print_settings_get_double(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?): gdouble {
    memScoped {
        return kniBridge5921(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_double_with_default(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, def: gdouble): gdouble {
    memScoped {
        return kniBridge5922(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, def)
    }
}

fun gtk_print_settings_set_double(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, value: gdouble): Unit {
    memScoped {
        return kniBridge5923(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_print_settings_get_length(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5924(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_print_settings_set_length(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, value: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5925(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value, unit.value)
    }
}

fun gtk_print_settings_get_int(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?): gint {
    memScoped {
        return kniBridge5926(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_int_with_default(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, def: gint): gint {
    memScoped {
        return kniBridge5927(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, def)
    }
}

fun gtk_print_settings_set_int(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString key: String?, value: gint): Unit {
    memScoped {
        return kniBridge5928(settings?.getPointer(memScope).rawValue, key?.cstr?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_print_settings_get_printer(settings: CValuesRef<GtkPrintSettings>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5929(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_printer(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString printer: String?): Unit {
    memScoped {
        return kniBridge5930(settings?.getPointer(memScope).rawValue, printer?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_orientation(settings: CValuesRef<GtkPrintSettings>?): GtkPageOrientation {
    memScoped {
        return GtkPageOrientation.byValue(kniBridge5931(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_orientation(settings: CValuesRef<GtkPrintSettings>?, orientation: GtkPageOrientation): Unit {
    memScoped {
        return kniBridge5932(settings?.getPointer(memScope).rawValue, orientation.value)
    }
}

fun gtk_print_settings_get_paper_size(settings: CValuesRef<GtkPrintSettings>?): CPointer<GtkPaperSize>? {
    memScoped {
        return interpretCPointer<GtkPaperSize>(kniBridge5933(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_paper_size(settings: CValuesRef<GtkPrintSettings>?, paper_size: CValuesRef<GtkPaperSize>?): Unit {
    memScoped {
        return kniBridge5934(settings?.getPointer(memScope).rawValue, paper_size?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_paper_width(settings: CValuesRef<GtkPrintSettings>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5935(settings?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_print_settings_set_paper_width(settings: CValuesRef<GtkPrintSettings>?, width: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5936(settings?.getPointer(memScope).rawValue, width, unit.value)
    }
}

fun gtk_print_settings_get_paper_height(settings: CValuesRef<GtkPrintSettings>?, unit: GtkUnit): gdouble {
    memScoped {
        return kniBridge5937(settings?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_print_settings_set_paper_height(settings: CValuesRef<GtkPrintSettings>?, height: gdouble, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5938(settings?.getPointer(memScope).rawValue, height, unit.value)
    }
}

fun gtk_print_settings_get_use_color(settings: CValuesRef<GtkPrintSettings>?): gboolean {
    memScoped {
        return kniBridge5939(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_use_color(settings: CValuesRef<GtkPrintSettings>?, use_color: gboolean): Unit {
    memScoped {
        return kniBridge5940(settings?.getPointer(memScope).rawValue, use_color)
    }
}

fun gtk_print_settings_get_collate(settings: CValuesRef<GtkPrintSettings>?): gboolean {
    memScoped {
        return kniBridge5941(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_collate(settings: CValuesRef<GtkPrintSettings>?, collate: gboolean): Unit {
    memScoped {
        return kniBridge5942(settings?.getPointer(memScope).rawValue, collate)
    }
}

fun gtk_print_settings_get_reverse(settings: CValuesRef<GtkPrintSettings>?): gboolean {
    memScoped {
        return kniBridge5943(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_reverse(settings: CValuesRef<GtkPrintSettings>?, reverse: gboolean): Unit {
    memScoped {
        return kniBridge5944(settings?.getPointer(memScope).rawValue, reverse)
    }
}

fun gtk_print_settings_get_duplex(settings: CValuesRef<GtkPrintSettings>?): GtkPrintDuplex {
    memScoped {
        return GtkPrintDuplex.byValue(kniBridge5945(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_duplex(settings: CValuesRef<GtkPrintSettings>?, duplex: GtkPrintDuplex): Unit {
    memScoped {
        return kniBridge5946(settings?.getPointer(memScope).rawValue, duplex.value)
    }
}

fun gtk_print_settings_get_quality(settings: CValuesRef<GtkPrintSettings>?): GtkPrintQuality {
    memScoped {
        return GtkPrintQuality.byValue(kniBridge5947(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_quality(settings: CValuesRef<GtkPrintSettings>?, quality: GtkPrintQuality): Unit {
    memScoped {
        return kniBridge5948(settings?.getPointer(memScope).rawValue, quality.value)
    }
}

fun gtk_print_settings_get_n_copies(settings: CValuesRef<GtkPrintSettings>?): gint {
    memScoped {
        return kniBridge5949(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_n_copies(settings: CValuesRef<GtkPrintSettings>?, num_copies: gint): Unit {
    memScoped {
        return kniBridge5950(settings?.getPointer(memScope).rawValue, num_copies)
    }
}

fun gtk_print_settings_get_number_up(settings: CValuesRef<GtkPrintSettings>?): gint {
    memScoped {
        return kniBridge5951(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_number_up(settings: CValuesRef<GtkPrintSettings>?, number_up: gint): Unit {
    memScoped {
        return kniBridge5952(settings?.getPointer(memScope).rawValue, number_up)
    }
}

fun gtk_print_settings_get_number_up_layout(settings: CValuesRef<GtkPrintSettings>?): GtkNumberUpLayout {
    memScoped {
        return GtkNumberUpLayout.byValue(kniBridge5953(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_number_up_layout(settings: CValuesRef<GtkPrintSettings>?, number_up_layout: GtkNumberUpLayout): Unit {
    memScoped {
        return kniBridge5954(settings?.getPointer(memScope).rawValue, number_up_layout.value)
    }
}

fun gtk_print_settings_get_resolution(settings: CValuesRef<GtkPrintSettings>?): gint {
    memScoped {
        return kniBridge5955(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_resolution(settings: CValuesRef<GtkPrintSettings>?, resolution: gint): Unit {
    memScoped {
        return kniBridge5956(settings?.getPointer(memScope).rawValue, resolution)
    }
}

fun gtk_print_settings_get_resolution_x(settings: CValuesRef<GtkPrintSettings>?): gint {
    memScoped {
        return kniBridge5957(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_resolution_y(settings: CValuesRef<GtkPrintSettings>?): gint {
    memScoped {
        return kniBridge5958(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_resolution_xy(settings: CValuesRef<GtkPrintSettings>?, resolution_x: gint, resolution_y: gint): Unit {
    memScoped {
        return kniBridge5959(settings?.getPointer(memScope).rawValue, resolution_x, resolution_y)
    }
}

fun gtk_print_settings_get_printer_lpi(settings: CValuesRef<GtkPrintSettings>?): gdouble {
    memScoped {
        return kniBridge5960(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_printer_lpi(settings: CValuesRef<GtkPrintSettings>?, lpi: gdouble): Unit {
    memScoped {
        return kniBridge5961(settings?.getPointer(memScope).rawValue, lpi)
    }
}

fun gtk_print_settings_get_scale(settings: CValuesRef<GtkPrintSettings>?): gdouble {
    memScoped {
        return kniBridge5962(settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_set_scale(settings: CValuesRef<GtkPrintSettings>?, scale: gdouble): Unit {
    memScoped {
        return kniBridge5963(settings?.getPointer(memScope).rawValue, scale)
    }
}

fun gtk_print_settings_get_print_pages(settings: CValuesRef<GtkPrintSettings>?): GtkPrintPages {
    memScoped {
        return GtkPrintPages.byValue(kniBridge5964(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_print_pages(settings: CValuesRef<GtkPrintSettings>?, pages: GtkPrintPages): Unit {
    memScoped {
        return kniBridge5965(settings?.getPointer(memScope).rawValue, pages.value)
    }
}

fun gtk_print_settings_get_page_ranges(settings: CValuesRef<GtkPrintSettings>?, num_ranges: CValuesRef<gintVar>?): CPointer<GtkPageRange>? {
    memScoped {
        return interpretCPointer<GtkPageRange>(kniBridge5966(settings?.getPointer(memScope).rawValue, num_ranges?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_page_ranges(settings: CValuesRef<GtkPrintSettings>?, page_ranges: CValuesRef<GtkPageRange>?, num_ranges: gint): Unit {
    memScoped {
        return kniBridge5967(settings?.getPointer(memScope).rawValue, page_ranges?.getPointer(memScope).rawValue, num_ranges)
    }
}

fun gtk_print_settings_get_page_set(settings: CValuesRef<GtkPrintSettings>?): GtkPageSet {
    memScoped {
        return GtkPageSet.byValue(kniBridge5968(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_page_set(settings: CValuesRef<GtkPrintSettings>?, page_set: GtkPageSet): Unit {
    memScoped {
        return kniBridge5969(settings?.getPointer(memScope).rawValue, page_set.value)
    }
}

fun gtk_print_settings_get_default_source(settings: CValuesRef<GtkPrintSettings>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5970(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_default_source(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString default_source: String?): Unit {
    memScoped {
        return kniBridge5971(settings?.getPointer(memScope).rawValue, default_source?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_media_type(settings: CValuesRef<GtkPrintSettings>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5972(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_media_type(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString media_type: String?): Unit {
    memScoped {
        return kniBridge5973(settings?.getPointer(memScope).rawValue, media_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_dither(settings: CValuesRef<GtkPrintSettings>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5974(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_dither(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString dither: String?): Unit {
    memScoped {
        return kniBridge5975(settings?.getPointer(memScope).rawValue, dither?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_finishings(settings: CValuesRef<GtkPrintSettings>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5976(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_finishings(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString finishings: String?): Unit {
    memScoped {
        return kniBridge5977(settings?.getPointer(memScope).rawValue, finishings?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_get_output_bin(settings: CValuesRef<GtkPrintSettings>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge5978(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_set_output_bin(settings: CValuesRef<GtkPrintSettings>?, @CCall.CString output_bin: String?): Unit {
    memScoped {
        return kniBridge5979(settings?.getPointer(memScope).rawValue, output_bin?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_settings_to_gvariant(settings: CValuesRef<GtkPrintSettings>?): CPointer<GVariant>? {
    memScoped {
        return interpretCPointer<GVariant>(kniBridge5980(settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_settings_new_from_gvariant(variant: CValuesRef<GVariant>?): CPointer<GtkPrintSettings>? {
    memScoped {
        return interpretCPointer<GtkPrintSettings>(kniBridge5981(variant?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_operation_preview_get_type(): GType {
    return kniBridge5982()
}

fun gtk_print_operation_preview_render_page(preview: CValuesRef<GtkPrintOperationPreview>?, page_nr: gint): Unit {
    memScoped {
        return kniBridge5983(preview?.getPointer(memScope).rawValue, page_nr)
    }
}

fun gtk_print_operation_preview_end_preview(preview: CValuesRef<GtkPrintOperationPreview>?): Unit {
    memScoped {
        return kniBridge5984(preview?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_preview_is_selected(preview: CValuesRef<GtkPrintOperationPreview>?, page_nr: gint): gboolean {
    memScoped {
        return kniBridge5985(preview?.getPointer(memScope).rawValue, page_nr)
    }
}

fun gtk_print_error_quark(): GQuark {
    return kniBridge5986()
}

fun gtk_print_operation_get_type(): GType {
    return kniBridge5987()
}

fun gtk_print_operation_new(): CPointer<GtkPrintOperation>? {
    return interpretCPointer<GtkPrintOperation>(kniBridge5988())
}

fun gtk_print_operation_set_default_page_setup(op: CValuesRef<GtkPrintOperation>?, default_page_setup: CValuesRef<GtkPageSetup>?): Unit {
    memScoped {
        return kniBridge5989(op?.getPointer(memScope).rawValue, default_page_setup?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_get_default_page_setup(op: CValuesRef<GtkPrintOperation>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge5990(op?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_operation_set_print_settings(op: CValuesRef<GtkPrintOperation>?, print_settings: CValuesRef<GtkPrintSettings>?): Unit {
    memScoped {
        return kniBridge5991(op?.getPointer(memScope).rawValue, print_settings?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_get_print_settings(op: CValuesRef<GtkPrintOperation>?): CPointer<GtkPrintSettings>? {
    memScoped {
        return interpretCPointer<GtkPrintSettings>(kniBridge5992(op?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_operation_set_job_name(op: CValuesRef<GtkPrintOperation>?, @CCall.CString job_name: String?): Unit {
    memScoped {
        return kniBridge5993(op?.getPointer(memScope).rawValue, job_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_set_n_pages(op: CValuesRef<GtkPrintOperation>?, n_pages: gint): Unit {
    memScoped {
        return kniBridge5994(op?.getPointer(memScope).rawValue, n_pages)
    }
}

fun gtk_print_operation_set_current_page(op: CValuesRef<GtkPrintOperation>?, current_page: gint): Unit {
    memScoped {
        return kniBridge5995(op?.getPointer(memScope).rawValue, current_page)
    }
}

fun gtk_print_operation_set_use_full_page(op: CValuesRef<GtkPrintOperation>?, full_page: gboolean): Unit {
    memScoped {
        return kniBridge5996(op?.getPointer(memScope).rawValue, full_page)
    }
}

fun gtk_print_operation_set_unit(op: CValuesRef<GtkPrintOperation>?, unit: GtkUnit): Unit {
    memScoped {
        return kniBridge5997(op?.getPointer(memScope).rawValue, unit.value)
    }
}

fun gtk_print_operation_set_export_filename(op: CValuesRef<GtkPrintOperation>?, @CCall.CString filename: String?): Unit {
    memScoped {
        return kniBridge5998(op?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_set_track_print_status(op: CValuesRef<GtkPrintOperation>?, track_status: gboolean): Unit {
    memScoped {
        return kniBridge5999(op?.getPointer(memScope).rawValue, track_status)
    }
}

fun gtk_print_operation_set_show_progress(op: CValuesRef<GtkPrintOperation>?, show_progress: gboolean): Unit {
    memScoped {
        return kniBridge6000(op?.getPointer(memScope).rawValue, show_progress)
    }
}

fun gtk_print_operation_set_allow_async(op: CValuesRef<GtkPrintOperation>?, allow_async: gboolean): Unit {
    memScoped {
        return kniBridge6001(op?.getPointer(memScope).rawValue, allow_async)
    }
}

fun gtk_print_operation_set_custom_tab_label(op: CValuesRef<GtkPrintOperation>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge6002(op?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_run(op: CValuesRef<GtkPrintOperation>?, action: GtkPrintOperationAction, parent: CValuesRef<GtkWindow>?, error: CValuesRef<CPointerVar<GError>>?): GtkPrintOperationResult {
    memScoped {
        return GtkPrintOperationResult.byValue(kniBridge6003(op?.getPointer(memScope).rawValue, action.value, parent?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_operation_get_error(op: CValuesRef<GtkPrintOperation>?, error: CValuesRef<CPointerVar<GError>>?): Unit {
    memScoped {
        return kniBridge6004(op?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_get_status(op: CValuesRef<GtkPrintOperation>?): GtkPrintStatus {
    memScoped {
        return GtkPrintStatus.byValue(kniBridge6005(op?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_operation_get_status_string(op: CValuesRef<GtkPrintOperation>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6006(op?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_operation_is_finished(op: CValuesRef<GtkPrintOperation>?): gboolean {
    memScoped {
        return kniBridge6007(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_cancel(op: CValuesRef<GtkPrintOperation>?): Unit {
    memScoped {
        return kniBridge6008(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_draw_page_finish(op: CValuesRef<GtkPrintOperation>?): Unit {
    memScoped {
        return kniBridge6009(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_set_defer_drawing(op: CValuesRef<GtkPrintOperation>?): Unit {
    memScoped {
        return kniBridge6010(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_set_support_selection(op: CValuesRef<GtkPrintOperation>?, support_selection: gboolean): Unit {
    memScoped {
        return kniBridge6011(op?.getPointer(memScope).rawValue, support_selection)
    }
}

fun gtk_print_operation_get_support_selection(op: CValuesRef<GtkPrintOperation>?): gboolean {
    memScoped {
        return kniBridge6012(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_set_has_selection(op: CValuesRef<GtkPrintOperation>?, has_selection: gboolean): Unit {
    memScoped {
        return kniBridge6013(op?.getPointer(memScope).rawValue, has_selection)
    }
}

fun gtk_print_operation_get_has_selection(op: CValuesRef<GtkPrintOperation>?): gboolean {
    memScoped {
        return kniBridge6014(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_set_embed_page_setup(op: CValuesRef<GtkPrintOperation>?, embed: gboolean): Unit {
    memScoped {
        return kniBridge6015(op?.getPointer(memScope).rawValue, embed)
    }
}

fun gtk_print_operation_get_embed_page_setup(op: CValuesRef<GtkPrintOperation>?): gboolean {
    memScoped {
        return kniBridge6016(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_operation_get_n_pages_to_print(op: CValuesRef<GtkPrintOperation>?): gint {
    memScoped {
        return kniBridge6017(op?.getPointer(memScope).rawValue)
    }
}

fun gtk_print_run_page_setup_dialog(parent: CValuesRef<GtkWindow>?, page_setup: CValuesRef<GtkPageSetup>?, settings: CValuesRef<GtkPrintSettings>?): CPointer<GtkPageSetup>? {
    memScoped {
        return interpretCPointer<GtkPageSetup>(kniBridge6018(parent?.getPointer(memScope).rawValue, page_setup?.getPointer(memScope).rawValue, settings?.getPointer(memScope).rawValue))
    }
}

fun gtk_print_run_page_setup_dialog_async(parent: CValuesRef<GtkWindow>?, page_setup: CValuesRef<GtkPageSetup>?, settings: CValuesRef<GtkPrintSettings>?, done_cb: GtkPageSetupDoneFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge6019(parent?.getPointer(memScope).rawValue, page_setup?.getPointer(memScope).rawValue, settings?.getPointer(memScope).rawValue, done_cb.rawValue, data.rawValue)
    }
}

fun gtk_progress_bar_get_type(): GType {
    return kniBridge6020()
}

fun gtk_progress_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6021())
}

fun gtk_progress_bar_pulse(pbar: CValuesRef<GtkProgressBar>?): Unit {
    memScoped {
        return kniBridge6022(pbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_progress_bar_set_text(pbar: CValuesRef<GtkProgressBar>?, @CCall.CString text: String?): Unit {
    memScoped {
        return kniBridge6023(pbar?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_progress_bar_set_fraction(pbar: CValuesRef<GtkProgressBar>?, fraction: gdouble): Unit {
    memScoped {
        return kniBridge6024(pbar?.getPointer(memScope).rawValue, fraction)
    }
}

fun gtk_progress_bar_set_pulse_step(pbar: CValuesRef<GtkProgressBar>?, fraction: gdouble): Unit {
    memScoped {
        return kniBridge6025(pbar?.getPointer(memScope).rawValue, fraction)
    }
}

fun gtk_progress_bar_set_inverted(pbar: CValuesRef<GtkProgressBar>?, inverted: gboolean): Unit {
    memScoped {
        return kniBridge6026(pbar?.getPointer(memScope).rawValue, inverted)
    }
}

fun gtk_progress_bar_get_text(pbar: CValuesRef<GtkProgressBar>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6027(pbar?.getPointer(memScope).rawValue))
    }
}

fun gtk_progress_bar_get_fraction(pbar: CValuesRef<GtkProgressBar>?): gdouble {
    memScoped {
        return kniBridge6028(pbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_progress_bar_get_pulse_step(pbar: CValuesRef<GtkProgressBar>?): gdouble {
    memScoped {
        return kniBridge6029(pbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_progress_bar_get_inverted(pbar: CValuesRef<GtkProgressBar>?): gboolean {
    memScoped {
        return kniBridge6030(pbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_progress_bar_set_ellipsize(pbar: CValuesRef<GtkProgressBar>?, mode: PangoEllipsizeMode): Unit {
    memScoped {
        return kniBridge6031(pbar?.getPointer(memScope).rawValue, mode.value)
    }
}

fun gtk_progress_bar_get_ellipsize(pbar: CValuesRef<GtkProgressBar>?): PangoEllipsizeMode {
    memScoped {
        return PangoEllipsizeMode.byValue(kniBridge6032(pbar?.getPointer(memScope).rawValue))
    }
}

fun gtk_progress_bar_set_show_text(pbar: CValuesRef<GtkProgressBar>?, show_text: gboolean): Unit {
    memScoped {
        return kniBridge6033(pbar?.getPointer(memScope).rawValue, show_text)
    }
}

fun gtk_progress_bar_get_show_text(pbar: CValuesRef<GtkProgressBar>?): gboolean {
    memScoped {
        return kniBridge6034(pbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_radio_button_get_type(): GType {
    return kniBridge6035()
}

fun gtk_radio_button_new(group: CValuesRef<GSList>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6036(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_new_from_widget(radio_group_member: CValuesRef<GtkRadioButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6037(radio_group_member?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_new_with_label(group: CValuesRef<GSList>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6038(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_new_with_label_from_widget(radio_group_member: CValuesRef<GtkRadioButton>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6039(radio_group_member?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_new_with_mnemonic(group: CValuesRef<GSList>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6040(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member: CValuesRef<GtkRadioButton>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6041(radio_group_member?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_get_group(radio_button: CValuesRef<GtkRadioButton>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge6042(radio_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_button_set_group(radio_button: CValuesRef<GtkRadioButton>?, group: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge6043(radio_button?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_radio_button_join_group(radio_button: CValuesRef<GtkRadioButton>?, group_source: CValuesRef<GtkRadioButton>?): Unit {
    memScoped {
        return kniBridge6044(radio_button?.getPointer(memScope).rawValue, group_source?.getPointer(memScope).rawValue)
    }
}

fun gtk_radio_menu_item_get_type(): GType {
    return kniBridge6045()
}

fun gtk_radio_menu_item_new(group: CValuesRef<GSList>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6046(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_new_with_label(group: CValuesRef<GSList>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6047(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_new_with_mnemonic(group: CValuesRef<GSList>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6048(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_new_from_widget(group: CValuesRef<GtkRadioMenuItem>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6049(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_new_with_mnemonic_from_widget(group: CValuesRef<GtkRadioMenuItem>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6050(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_new_with_label_from_widget(group: CValuesRef<GtkRadioMenuItem>?, @CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6051(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_get_group(radio_menu_item: CValuesRef<GtkRadioMenuItem>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge6052(radio_menu_item?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_menu_item_set_group(radio_menu_item: CValuesRef<GtkRadioMenuItem>?, group: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge6053(radio_menu_item?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_radio_menu_item_join_group(radio_menu_item: CValuesRef<GtkRadioMenuItem>?, group_source: CValuesRef<GtkRadioMenuItem>?): Unit {
    memScoped {
        return kniBridge6054(radio_menu_item?.getPointer(memScope).rawValue, group_source?.getPointer(memScope).rawValue)
    }
}

fun gtk_toggle_tool_button_get_type(): GType {
    return kniBridge6055()
}

fun gtk_toggle_tool_button_new(): CPointer<GtkToolItem>? {
    return interpretCPointer<GtkToolItem>(kniBridge6056())
}

fun gtk_toggle_tool_button_new_from_stock(@CCall.CString stock_id: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6057(stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_toggle_tool_button_set_active(button: CValuesRef<GtkToggleToolButton>?, is_active: gboolean): Unit {
    memScoped {
        return kniBridge6058(button?.getPointer(memScope).rawValue, is_active)
    }
}

fun gtk_toggle_tool_button_get_active(button: CValuesRef<GtkToggleToolButton>?): gboolean {
    memScoped {
        return kniBridge6059(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_radio_tool_button_get_type(): GType {
    return kniBridge6060()
}

fun gtk_radio_tool_button_new(group: CValuesRef<GSList>?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6061(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_tool_button_new_from_stock(group: CValuesRef<GSList>?, @CCall.CString stock_id: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6062(group?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_tool_button_new_from_widget(group: CValuesRef<GtkRadioToolButton>?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6063(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_tool_button_new_with_stock_from_widget(group: CValuesRef<GtkRadioToolButton>?, @CCall.CString stock_id: String?): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6064(group?.getPointer(memScope).rawValue, stock_id?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_tool_button_get_group(button: CValuesRef<GtkRadioToolButton>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge6065(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_radio_tool_button_set_group(button: CValuesRef<GtkRadioToolButton>?, group: CValuesRef<GSList>?): Unit {
    memScoped {
        return kniBridge6066(button?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_get_type(): GType {
    return kniBridge6067()
}

fun gtk_range_set_adjustment(range: CValuesRef<GtkRange>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6068(range?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_get_adjustment(range: CValuesRef<GtkRange>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6069(range?.getPointer(memScope).rawValue))
    }
}

fun gtk_range_set_inverted(range: CValuesRef<GtkRange>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge6070(range?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_range_get_inverted(range: CValuesRef<GtkRange>?): gboolean {
    memScoped {
        return kniBridge6071(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_flippable(range: CValuesRef<GtkRange>?, flippable: gboolean): Unit {
    memScoped {
        return kniBridge6072(range?.getPointer(memScope).rawValue, flippable)
    }
}

fun gtk_range_get_flippable(range: CValuesRef<GtkRange>?): gboolean {
    memScoped {
        return kniBridge6073(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_slider_size_fixed(range: CValuesRef<GtkRange>?, size_fixed: gboolean): Unit {
    memScoped {
        return kniBridge6074(range?.getPointer(memScope).rawValue, size_fixed)
    }
}

fun gtk_range_get_slider_size_fixed(range: CValuesRef<GtkRange>?): gboolean {
    memScoped {
        return kniBridge6075(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_min_slider_size(range: CValuesRef<GtkRange>?, min_size: gint): Unit {
    memScoped {
        return kniBridge6076(range?.getPointer(memScope).rawValue, min_size)
    }
}

fun gtk_range_get_min_slider_size(range: CValuesRef<GtkRange>?): gint {
    memScoped {
        return kniBridge6077(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_get_range_rect(range: CValuesRef<GtkRange>?, range_rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge6078(range?.getPointer(memScope).rawValue, range_rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_get_slider_range(range: CValuesRef<GtkRange>?, slider_start: CValuesRef<gintVar>?, slider_end: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6079(range?.getPointer(memScope).rawValue, slider_start?.getPointer(memScope).rawValue, slider_end?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_lower_stepper_sensitivity(range: CValuesRef<GtkRange>?, sensitivity: GtkSensitivityType): Unit {
    memScoped {
        return kniBridge6080(range?.getPointer(memScope).rawValue, sensitivity.value)
    }
}

fun gtk_range_get_lower_stepper_sensitivity(range: CValuesRef<GtkRange>?): GtkSensitivityType {
    memScoped {
        return GtkSensitivityType.byValue(kniBridge6081(range?.getPointer(memScope).rawValue))
    }
}

fun gtk_range_set_upper_stepper_sensitivity(range: CValuesRef<GtkRange>?, sensitivity: GtkSensitivityType): Unit {
    memScoped {
        return kniBridge6082(range?.getPointer(memScope).rawValue, sensitivity.value)
    }
}

fun gtk_range_get_upper_stepper_sensitivity(range: CValuesRef<GtkRange>?): GtkSensitivityType {
    memScoped {
        return GtkSensitivityType.byValue(kniBridge6083(range?.getPointer(memScope).rawValue))
    }
}

fun gtk_range_set_increments(range: CValuesRef<GtkRange>?, step: gdouble, page: gdouble): Unit {
    memScoped {
        return kniBridge6084(range?.getPointer(memScope).rawValue, step, page)
    }
}

fun gtk_range_set_range(range: CValuesRef<GtkRange>?, min: gdouble, max: gdouble): Unit {
    memScoped {
        return kniBridge6085(range?.getPointer(memScope).rawValue, min, max)
    }
}

fun gtk_range_set_value(range: CValuesRef<GtkRange>?, value: gdouble): Unit {
    memScoped {
        return kniBridge6086(range?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_range_get_value(range: CValuesRef<GtkRange>?): gdouble {
    memScoped {
        return kniBridge6087(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_show_fill_level(range: CValuesRef<GtkRange>?, show_fill_level: gboolean): Unit {
    memScoped {
        return kniBridge6088(range?.getPointer(memScope).rawValue, show_fill_level)
    }
}

fun gtk_range_get_show_fill_level(range: CValuesRef<GtkRange>?): gboolean {
    memScoped {
        return kniBridge6089(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_restrict_to_fill_level(range: CValuesRef<GtkRange>?, restrict_to_fill_level: gboolean): Unit {
    memScoped {
        return kniBridge6090(range?.getPointer(memScope).rawValue, restrict_to_fill_level)
    }
}

fun gtk_range_get_restrict_to_fill_level(range: CValuesRef<GtkRange>?): gboolean {
    memScoped {
        return kniBridge6091(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_fill_level(range: CValuesRef<GtkRange>?, fill_level: gdouble): Unit {
    memScoped {
        return kniBridge6092(range?.getPointer(memScope).rawValue, fill_level)
    }
}

fun gtk_range_get_fill_level(range: CValuesRef<GtkRange>?): gdouble {
    memScoped {
        return kniBridge6093(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_range_set_round_digits(range: CValuesRef<GtkRange>?, round_digits: gint): Unit {
    memScoped {
        return kniBridge6094(range?.getPointer(memScope).rawValue, round_digits)
    }
}

fun gtk_range_get_round_digits(range: CValuesRef<GtkRange>?): gint {
    memScoped {
        return kniBridge6095(range?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_manager_error_quark(): GQuark {
    return kniBridge6096()
}

fun gtk_recent_manager_get_type(): GType {
    return kniBridge6097()
}

fun gtk_recent_manager_new(): CPointer<GtkRecentManager>? {
    return interpretCPointer<GtkRecentManager>(kniBridge6098())
}

fun gtk_recent_manager_get_default(): CPointer<GtkRecentManager>? {
    return interpretCPointer<GtkRecentManager>(kniBridge6099())
}

fun gtk_recent_manager_add_item(manager: CValuesRef<GtkRecentManager>?, @CCall.CString uri: String?): gboolean {
    memScoped {
        return kniBridge6100(manager?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_manager_add_full(manager: CValuesRef<GtkRecentManager>?, @CCall.CString uri: String?, recent_data: CValuesRef<GtkRecentData>?): gboolean {
    memScoped {
        return kniBridge6101(manager?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, recent_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_manager_remove_item(manager: CValuesRef<GtkRecentManager>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6102(manager?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_manager_lookup_item(manager: CValuesRef<GtkRecentManager>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GtkRecentInfo>? {
    memScoped {
        return interpretCPointer<GtkRecentInfo>(kniBridge6103(manager?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_manager_has_item(manager: CValuesRef<GtkRecentManager>?, @CCall.CString uri: String?): gboolean {
    memScoped {
        return kniBridge6104(manager?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_manager_move_item(manager: CValuesRef<GtkRecentManager>?, @CCall.CString uri: String?, @CCall.CString new_uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6105(manager?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, new_uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_manager_get_items(manager: CValuesRef<GtkRecentManager>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge6106(manager?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_manager_purge_items(manager: CValuesRef<GtkRecentManager>?, error: CValuesRef<CPointerVar<GError>>?): gint {
    memScoped {
        return kniBridge6107(manager?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_type(): GType {
    return kniBridge6108()
}

fun gtk_recent_info_ref(info: CValuesRef<GtkRecentInfo>?): CPointer<GtkRecentInfo>? {
    memScoped {
        return interpretCPointer<GtkRecentInfo>(kniBridge6109(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_unref(info: CValuesRef<GtkRecentInfo>?): Unit {
    memScoped {
        return kniBridge6110(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_uri(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6111(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_display_name(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6112(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_description(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6113(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_mime_type(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6114(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_added(info: CValuesRef<GtkRecentInfo>?): time_t {
    memScoped {
        return kniBridge6115(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_modified(info: CValuesRef<GtkRecentInfo>?): time_t {
    memScoped {
        return kniBridge6116(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_visited(info: CValuesRef<GtkRecentInfo>?): time_t {
    memScoped {
        return kniBridge6117(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_private_hint(info: CValuesRef<GtkRecentInfo>?): gboolean {
    memScoped {
        return kniBridge6118(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_application_info(info: CValuesRef<GtkRecentInfo>?, @CCall.CString app_name: String?, app_exec: CValuesRef<CPointerVar<gcharVar>>?, count: CValuesRef<guintVar>?, time_: CValuesRef<time_tVar>?): gboolean {
    memScoped {
        return kniBridge6119(info?.getPointer(memScope).rawValue, app_name?.cstr?.getPointer(memScope).rawValue, app_exec?.getPointer(memScope).rawValue, count?.getPointer(memScope).rawValue, time_?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_create_app_info(info: CValuesRef<GtkRecentInfo>?, @CCall.CString app_name: String?, error: CValuesRef<CPointerVar<GError>>?): CPointer<GAppInfo>? {
    memScoped {
        return interpretCPointer<GAppInfo>(kniBridge6120(info?.getPointer(memScope).rawValue, app_name?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_applications(info: CValuesRef<GtkRecentInfo>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge6121(info?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_last_application(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6122(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_has_application(info: CValuesRef<GtkRecentInfo>?, @CCall.CString app_name: String?): gboolean {
    memScoped {
        return kniBridge6123(info?.getPointer(memScope).rawValue, app_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_groups(info: CValuesRef<GtkRecentInfo>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge6124(info?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_has_group(info: CValuesRef<GtkRecentInfo>?, @CCall.CString group_name: String?): gboolean {
    memScoped {
        return kniBridge6125(info?.getPointer(memScope).rawValue, group_name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_get_icon(info: CValuesRef<GtkRecentInfo>?, size: gint): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge6126(info?.getPointer(memScope).rawValue, size))
    }
}

fun gtk_recent_info_get_gicon(info: CValuesRef<GtkRecentInfo>?): CPointer<GIcon>? {
    memScoped {
        return interpretCPointer<GIcon>(kniBridge6127(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_short_name(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6128(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_uri_display(info: CValuesRef<GtkRecentInfo>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6129(info?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_info_get_age(info: CValuesRef<GtkRecentInfo>?): gint {
    memScoped {
        return kniBridge6130(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_is_local(info: CValuesRef<GtkRecentInfo>?): gboolean {
    memScoped {
        return kniBridge6131(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_exists(info: CValuesRef<GtkRecentInfo>?): gboolean {
    memScoped {
        return kniBridge6132(info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_info_match(info_a: CValuesRef<GtkRecentInfo>?, info_b: CValuesRef<GtkRecentInfo>?): gboolean {
    memScoped {
        return kniBridge6133(info_a?.getPointer(memScope).rawValue, info_b?.getPointer(memScope).rawValue)
    }
}

fun _gtk_recent_manager_sync(): Unit {
    return kniBridge6134()
}

fun gtk_recent_filter_get_type(): GType {
    return kniBridge6135()
}

fun gtk_recent_filter_new(): CPointer<GtkRecentFilter>? {
    return interpretCPointer<GtkRecentFilter>(kniBridge6136())
}

fun gtk_recent_filter_set_name(filter: CValuesRef<GtkRecentFilter>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6137(filter?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_get_name(filter: CValuesRef<GtkRecentFilter>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6138(filter?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_filter_add_mime_type(filter: CValuesRef<GtkRecentFilter>?, @CCall.CString mime_type: String?): Unit {
    memScoped {
        return kniBridge6139(filter?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_add_pattern(filter: CValuesRef<GtkRecentFilter>?, @CCall.CString pattern: String?): Unit {
    memScoped {
        return kniBridge6140(filter?.getPointer(memScope).rawValue, pattern?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_add_pixbuf_formats(filter: CValuesRef<GtkRecentFilter>?): Unit {
    memScoped {
        return kniBridge6141(filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_add_application(filter: CValuesRef<GtkRecentFilter>?, @CCall.CString application: String?): Unit {
    memScoped {
        return kniBridge6142(filter?.getPointer(memScope).rawValue, application?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_add_group(filter: CValuesRef<GtkRecentFilter>?, @CCall.CString group: String?): Unit {
    memScoped {
        return kniBridge6143(filter?.getPointer(memScope).rawValue, group?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_add_age(filter: CValuesRef<GtkRecentFilter>?, days: gint): Unit {
    memScoped {
        return kniBridge6144(filter?.getPointer(memScope).rawValue, days)
    }
}

fun gtk_recent_filter_add_custom(filter: CValuesRef<GtkRecentFilter>?, needed: GtkRecentFilterFlags, func: GtkRecentFilterFunc?, data: gpointer?, data_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge6145(filter?.getPointer(memScope).rawValue, needed, func.rawValue, data.rawValue, data_destroy.rawValue)
    }
}

fun gtk_recent_filter_get_needed(filter: CValuesRef<GtkRecentFilter>?): GtkRecentFilterFlags {
    memScoped {
        return kniBridge6146(filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_filter_filter(filter: CValuesRef<GtkRecentFilter>?, filter_info: CValuesRef<GtkRecentFilterInfo>?): gboolean {
    memScoped {
        return kniBridge6147(filter?.getPointer(memScope).rawValue, filter_info?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_error_quark(): GQuark {
    return kniBridge6148()
}

fun gtk_recent_chooser_get_type(): GType {
    return kniBridge6149()
}

fun gtk_recent_chooser_set_show_private(chooser: CValuesRef<GtkRecentChooser>?, show_private: gboolean): Unit {
    memScoped {
        return kniBridge6150(chooser?.getPointer(memScope).rawValue, show_private)
    }
}

fun gtk_recent_chooser_get_show_private(chooser: CValuesRef<GtkRecentChooser>?): gboolean {
    memScoped {
        return kniBridge6151(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_show_not_found(chooser: CValuesRef<GtkRecentChooser>?, show_not_found: gboolean): Unit {
    memScoped {
        return kniBridge6152(chooser?.getPointer(memScope).rawValue, show_not_found)
    }
}

fun gtk_recent_chooser_get_show_not_found(chooser: CValuesRef<GtkRecentChooser>?): gboolean {
    memScoped {
        return kniBridge6153(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_select_multiple(chooser: CValuesRef<GtkRecentChooser>?, select_multiple: gboolean): Unit {
    memScoped {
        return kniBridge6154(chooser?.getPointer(memScope).rawValue, select_multiple)
    }
}

fun gtk_recent_chooser_get_select_multiple(chooser: CValuesRef<GtkRecentChooser>?): gboolean {
    memScoped {
        return kniBridge6155(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_limit(chooser: CValuesRef<GtkRecentChooser>?, limit: gint): Unit {
    memScoped {
        return kniBridge6156(chooser?.getPointer(memScope).rawValue, limit)
    }
}

fun gtk_recent_chooser_get_limit(chooser: CValuesRef<GtkRecentChooser>?): gint {
    memScoped {
        return kniBridge6157(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_local_only(chooser: CValuesRef<GtkRecentChooser>?, local_only: gboolean): Unit {
    memScoped {
        return kniBridge6158(chooser?.getPointer(memScope).rawValue, local_only)
    }
}

fun gtk_recent_chooser_get_local_only(chooser: CValuesRef<GtkRecentChooser>?): gboolean {
    memScoped {
        return kniBridge6159(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_show_tips(chooser: CValuesRef<GtkRecentChooser>?, show_tips: gboolean): Unit {
    memScoped {
        return kniBridge6160(chooser?.getPointer(memScope).rawValue, show_tips)
    }
}

fun gtk_recent_chooser_get_show_tips(chooser: CValuesRef<GtkRecentChooser>?): gboolean {
    memScoped {
        return kniBridge6161(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_show_icons(chooser: CValuesRef<GtkRecentChooser>?, show_icons: gboolean): Unit {
    memScoped {
        return kniBridge6162(chooser?.getPointer(memScope).rawValue, show_icons)
    }
}

fun gtk_recent_chooser_get_show_icons(chooser: CValuesRef<GtkRecentChooser>?): gboolean {
    memScoped {
        return kniBridge6163(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_sort_type(chooser: CValuesRef<GtkRecentChooser>?, sort_type: GtkRecentSortType): Unit {
    memScoped {
        return kniBridge6164(chooser?.getPointer(memScope).rawValue, sort_type)
    }
}

fun gtk_recent_chooser_get_sort_type(chooser: CValuesRef<GtkRecentChooser>?): GtkRecentSortType {
    memScoped {
        return kniBridge6165(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_set_sort_func(chooser: CValuesRef<GtkRecentChooser>?, sort_func: GtkRecentSortFunc?, sort_data: gpointer?, data_destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge6166(chooser?.getPointer(memScope).rawValue, sort_func.rawValue, sort_data.rawValue, data_destroy.rawValue)
    }
}

fun gtk_recent_chooser_set_current_uri(chooser: CValuesRef<GtkRecentChooser>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6167(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_get_current_uri(chooser: CValuesRef<GtkRecentChooser>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6168(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_get_current_item(chooser: CValuesRef<GtkRecentChooser>?): CPointer<GtkRecentInfo>? {
    memScoped {
        return interpretCPointer<GtkRecentInfo>(kniBridge6169(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_select_uri(chooser: CValuesRef<GtkRecentChooser>?, @CCall.CString uri: String?, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6170(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_unselect_uri(chooser: CValuesRef<GtkRecentChooser>?, @CCall.CString uri: String?): Unit {
    memScoped {
        return kniBridge6171(chooser?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_select_all(chooser: CValuesRef<GtkRecentChooser>?): Unit {
    memScoped {
        return kniBridge6172(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_unselect_all(chooser: CValuesRef<GtkRecentChooser>?): Unit {
    memScoped {
        return kniBridge6173(chooser?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_get_items(chooser: CValuesRef<GtkRecentChooser>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge6174(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_get_uris(chooser: CValuesRef<GtkRecentChooser>?, length: CValuesRef<gsizeVar>?): CPointer<CPointerVar<gcharVar>>? {
    memScoped {
        return interpretCPointer<CPointerVar<gcharVar>>(kniBridge6175(chooser?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_add_filter(chooser: CValuesRef<GtkRecentChooser>?, filter: CValuesRef<GtkRecentFilter>?): Unit {
    memScoped {
        return kniBridge6176(chooser?.getPointer(memScope).rawValue, filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_remove_filter(chooser: CValuesRef<GtkRecentChooser>?, filter: CValuesRef<GtkRecentFilter>?): Unit {
    memScoped {
        return kniBridge6177(chooser?.getPointer(memScope).rawValue, filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_list_filters(chooser: CValuesRef<GtkRecentChooser>?): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge6178(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_set_filter(chooser: CValuesRef<GtkRecentChooser>?, filter: CValuesRef<GtkRecentFilter>?): Unit {
    memScoped {
        return kniBridge6179(chooser?.getPointer(memScope).rawValue, filter?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_get_filter(chooser: CValuesRef<GtkRecentChooser>?): CPointer<GtkRecentFilter>? {
    memScoped {
        return interpretCPointer<GtkRecentFilter>(kniBridge6180(chooser?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_dialog_get_type(): GType {
    return kniBridge6181()
}

@CCall("knifunptr_libgtk367")
external fun gtk_recent_chooser_dialog_new(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?, @CCall.CString first_button_text: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

@CCall("knifunptr_libgtk368")
external fun gtk_recent_chooser_dialog_new_for_manager(@CCall.CString title: String?, parent: CValuesRef<GtkWindow>?, manager: CValuesRef<GtkRecentManager>?, @CCall.CString first_button_text: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_recent_chooser_menu_get_type(): GType {
    return kniBridge6182()
}

fun gtk_recent_chooser_menu_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6183())
}

fun gtk_recent_chooser_menu_new_for_manager(manager: CValuesRef<GtkRecentManager>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6184(manager?.getPointer(memScope).rawValue))
    }
}

fun gtk_recent_chooser_menu_get_show_numbers(menu: CValuesRef<GtkRecentChooserMenu>?): gboolean {
    memScoped {
        return kniBridge6185(menu?.getPointer(memScope).rawValue)
    }
}

fun gtk_recent_chooser_menu_set_show_numbers(menu: CValuesRef<GtkRecentChooserMenu>?, show_numbers: gboolean): Unit {
    memScoped {
        return kniBridge6186(menu?.getPointer(memScope).rawValue, show_numbers)
    }
}

fun gtk_recent_chooser_widget_get_type(): GType {
    return kniBridge6187()
}

fun gtk_recent_chooser_widget_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6188())
}

fun gtk_recent_chooser_widget_new_for_manager(manager: CValuesRef<GtkRecentManager>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6189(manager?.getPointer(memScope).rawValue))
    }
}

fun gtk_render_check(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6190(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_option(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6191(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_arrow(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, angle: gdouble, x: gdouble, y: gdouble, size: gdouble): Unit {
    memScoped {
        return kniBridge6192(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, angle, x, y, size)
    }
}

fun gtk_render_background(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6193(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_background_get_clip(context: CValuesRef<GtkStyleContext>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble, out_clip: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge6194(context?.getPointer(memScope).rawValue, x, y, width, height, out_clip?.getPointer(memScope).rawValue)
    }
}

fun gtk_render_frame(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6195(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_expander(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6196(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_focus(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6197(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_layout(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, layout: CValuesRef<PangoLayout>?): Unit {
    memScoped {
        return kniBridge6198(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, layout?.getPointer(memScope).rawValue)
    }
}

fun gtk_render_line(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x0: gdouble, y0: gdouble, x1: gdouble, y1: gdouble): Unit {
    memScoped {
        return kniBridge6199(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x0, y0, x1, y1)
    }
}

fun gtk_render_slider(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble, orientation: GtkOrientation): Unit {
    memScoped {
        return kniBridge6200(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height, orientation.value)
    }
}

fun gtk_render_frame_gap(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble, gap_side: GtkPositionType, xy0_gap: gdouble, xy1_gap: gdouble): Unit {
    memScoped {
        return kniBridge6201(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height, gap_side.value, xy0_gap, xy1_gap)
    }
}

fun gtk_render_extension(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble, gap_side: GtkPositionType): Unit {
    memScoped {
        return kniBridge6202(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height, gap_side.value)
    }
}

fun gtk_render_handle(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6203(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_activity(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, x: gdouble, y: gdouble, width: gdouble, height: gdouble): Unit {
    memScoped {
        return kniBridge6204(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, x, y, width, height)
    }
}

fun gtk_render_icon_pixbuf(context: CValuesRef<GtkStyleContext>?, source: CValuesRef<GtkIconSource>?, size: GtkIconSize): CPointer<GdkPixbuf>? {
    memScoped {
        return interpretCPointer<GdkPixbuf>(kniBridge6205(context?.getPointer(memScope).rawValue, source?.getPointer(memScope).rawValue, size.value))
    }
}

fun gtk_render_icon(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, pixbuf: CValuesRef<GdkPixbuf>?, x: gdouble, y: gdouble): Unit {
    memScoped {
        return kniBridge6206(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_render_icon_surface(context: CValuesRef<GtkStyleContext>?, cr: CValuesRef<cairo_t>?, surface: CValuesRef<cairo_surface_t>?, x: gdouble, y: gdouble): Unit {
    memScoped {
        return kniBridge6207(context?.getPointer(memScope).rawValue, cr?.getPointer(memScope).rawValue, surface?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_revealer_get_type(): GType {
    return kniBridge6208()
}

fun gtk_revealer_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6209())
}

fun gtk_revealer_get_reveal_child(revealer: CValuesRef<GtkRevealer>?): gboolean {
    memScoped {
        return kniBridge6210(revealer?.getPointer(memScope).rawValue)
    }
}

fun gtk_revealer_set_reveal_child(revealer: CValuesRef<GtkRevealer>?, reveal_child: gboolean): Unit {
    memScoped {
        return kniBridge6211(revealer?.getPointer(memScope).rawValue, reveal_child)
    }
}

fun gtk_revealer_get_child_revealed(revealer: CValuesRef<GtkRevealer>?): gboolean {
    memScoped {
        return kniBridge6212(revealer?.getPointer(memScope).rawValue)
    }
}

fun gtk_revealer_get_transition_duration(revealer: CValuesRef<GtkRevealer>?): guint {
    memScoped {
        return kniBridge6213(revealer?.getPointer(memScope).rawValue)
    }
}

fun gtk_revealer_set_transition_duration(revealer: CValuesRef<GtkRevealer>?, duration: guint): Unit {
    memScoped {
        return kniBridge6214(revealer?.getPointer(memScope).rawValue, duration)
    }
}

fun gtk_revealer_set_transition_type(revealer: CValuesRef<GtkRevealer>?, transition: GtkRevealerTransitionType): Unit {
    memScoped {
        return kniBridge6215(revealer?.getPointer(memScope).rawValue, transition.value)
    }
}

fun gtk_revealer_get_transition_type(revealer: CValuesRef<GtkRevealer>?): GtkRevealerTransitionType {
    memScoped {
        return GtkRevealerTransitionType.byValue(kniBridge6216(revealer?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_get_type(): GType {
    return kniBridge6217()
}

fun gtk_scale_new(orientation: GtkOrientation, adjustment: CValuesRef<GtkAdjustment>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6218(orientation.value, adjustment?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_new_with_range(orientation: GtkOrientation, min: gdouble, max: gdouble, step: gdouble): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6219(orientation.value, min, max, step))
}

fun gtk_scale_set_digits(scale: CValuesRef<GtkScale>?, digits: gint): Unit {
    memScoped {
        return kniBridge6220(scale?.getPointer(memScope).rawValue, digits)
    }
}

fun gtk_scale_get_digits(scale: CValuesRef<GtkScale>?): gint {
    memScoped {
        return kniBridge6221(scale?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_set_draw_value(scale: CValuesRef<GtkScale>?, draw_value: gboolean): Unit {
    memScoped {
        return kniBridge6222(scale?.getPointer(memScope).rawValue, draw_value)
    }
}

fun gtk_scale_get_draw_value(scale: CValuesRef<GtkScale>?): gboolean {
    memScoped {
        return kniBridge6223(scale?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_set_has_origin(scale: CValuesRef<GtkScale>?, has_origin: gboolean): Unit {
    memScoped {
        return kniBridge6224(scale?.getPointer(memScope).rawValue, has_origin)
    }
}

fun gtk_scale_get_has_origin(scale: CValuesRef<GtkScale>?): gboolean {
    memScoped {
        return kniBridge6225(scale?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_set_value_pos(scale: CValuesRef<GtkScale>?, pos: GtkPositionType): Unit {
    memScoped {
        return kniBridge6226(scale?.getPointer(memScope).rawValue, pos.value)
    }
}

fun gtk_scale_get_value_pos(scale: CValuesRef<GtkScale>?): GtkPositionType {
    memScoped {
        return GtkPositionType.byValue(kniBridge6227(scale?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_get_layout(scale: CValuesRef<GtkScale>?): CPointer<PangoLayout>? {
    memScoped {
        return interpretCPointer<PangoLayout>(kniBridge6228(scale?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_get_layout_offsets(scale: CValuesRef<GtkScale>?, x: CValuesRef<gintVar>?, y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6229(scale?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_add_mark(scale: CValuesRef<GtkScale>?, value: gdouble, position: GtkPositionType, @CCall.CString markup: String?): Unit {
    memScoped {
        return kniBridge6230(scale?.getPointer(memScope).rawValue, value, position.value, markup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_clear_marks(scale: CValuesRef<GtkScale>?): Unit {
    memScoped {
        return kniBridge6231(scale?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_button_get_type(): GType {
    return kniBridge6232()
}

fun gtk_scale_button_new(size: GtkIconSize, min: gdouble, max: gdouble, step: gdouble, icons: CValuesRef<CPointerVar<gcharVar>>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6233(size.value, min, max, step, icons?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_button_set_icons(button: CValuesRef<GtkScaleButton>?, icons: CValuesRef<CPointerVar<gcharVar>>?): Unit {
    memScoped {
        return kniBridge6234(button?.getPointer(memScope).rawValue, icons?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_button_get_value(button: CValuesRef<GtkScaleButton>?): gdouble {
    memScoped {
        return kniBridge6235(button?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_button_set_value(button: CValuesRef<GtkScaleButton>?, value: gdouble): Unit {
    memScoped {
        return kniBridge6236(button?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_scale_button_get_adjustment(button: CValuesRef<GtkScaleButton>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6237(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_button_set_adjustment(button: CValuesRef<GtkScaleButton>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6238(button?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_scale_button_get_plus_button(button: CValuesRef<GtkScaleButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6239(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_button_get_minus_button(button: CValuesRef<GtkScaleButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6240(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_scale_button_get_popup(button: CValuesRef<GtkScaleButton>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6241(button?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrollable_get_type(): GType {
    return kniBridge6242()
}

fun gtk_scrollable_get_hadjustment(scrollable: CValuesRef<GtkScrollable>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6243(scrollable?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrollable_set_hadjustment(scrollable: CValuesRef<GtkScrollable>?, hadjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6244(scrollable?.getPointer(memScope).rawValue, hadjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrollable_get_vadjustment(scrollable: CValuesRef<GtkScrollable>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6245(scrollable?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrollable_set_vadjustment(scrollable: CValuesRef<GtkScrollable>?, vadjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6246(scrollable?.getPointer(memScope).rawValue, vadjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrollable_get_hscroll_policy(scrollable: CValuesRef<GtkScrollable>?): GtkScrollablePolicy {
    memScoped {
        return kniBridge6247(scrollable?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrollable_set_hscroll_policy(scrollable: CValuesRef<GtkScrollable>?, policy: GtkScrollablePolicy): Unit {
    memScoped {
        return kniBridge6248(scrollable?.getPointer(memScope).rawValue, policy)
    }
}

fun gtk_scrollable_get_vscroll_policy(scrollable: CValuesRef<GtkScrollable>?): GtkScrollablePolicy {
    memScoped {
        return kniBridge6249(scrollable?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrollable_set_vscroll_policy(scrollable: CValuesRef<GtkScrollable>?, policy: GtkScrollablePolicy): Unit {
    memScoped {
        return kniBridge6250(scrollable?.getPointer(memScope).rawValue, policy)
    }
}

fun gtk_scrollable_get_border(scrollable: CValuesRef<GtkScrollable>?, border: CValuesRef<GtkBorder>?): gboolean {
    memScoped {
        return kniBridge6251(scrollable?.getPointer(memScope).rawValue, border?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrollbar_get_type(): GType {
    return kniBridge6252()
}

fun gtk_scrollbar_new(orientation: GtkOrientation, adjustment: CValuesRef<GtkAdjustment>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6253(orientation.value, adjustment?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_get_type(): GType {
    return kniBridge6254()
}

fun gtk_scrolled_window_new(hadjustment: CValuesRef<GtkAdjustment>?, vadjustment: CValuesRef<GtkAdjustment>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6255(hadjustment?.getPointer(memScope).rawValue, vadjustment?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_set_hadjustment(scrolled_window: CValuesRef<GtkScrolledWindow>?, hadjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6256(scrolled_window?.getPointer(memScope).rawValue, hadjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_vadjustment(scrolled_window: CValuesRef<GtkScrolledWindow>?, vadjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6257(scrolled_window?.getPointer(memScope).rawValue, vadjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_get_hadjustment(scrolled_window: CValuesRef<GtkScrolledWindow>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6258(scrolled_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_get_vadjustment(scrolled_window: CValuesRef<GtkScrolledWindow>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6259(scrolled_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_get_hscrollbar(scrolled_window: CValuesRef<GtkScrolledWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6260(scrolled_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_get_vscrollbar(scrolled_window: CValuesRef<GtkScrolledWindow>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6261(scrolled_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_set_policy(scrolled_window: CValuesRef<GtkScrolledWindow>?, hscrollbar_policy: GtkPolicyType, vscrollbar_policy: GtkPolicyType): Unit {
    memScoped {
        return kniBridge6262(scrolled_window?.getPointer(memScope).rawValue, hscrollbar_policy.value, vscrollbar_policy.value)
    }
}

fun gtk_scrolled_window_get_policy(scrolled_window: CValuesRef<GtkScrolledWindow>?, hscrollbar_policy: CValuesRef<GtkPolicyType.Var>?, vscrollbar_policy: CValuesRef<GtkPolicyType.Var>?): Unit {
    memScoped {
        return kniBridge6263(scrolled_window?.getPointer(memScope).rawValue, hscrollbar_policy?.getPointer(memScope).rawValue, vscrollbar_policy?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_placement(scrolled_window: CValuesRef<GtkScrolledWindow>?, window_placement: GtkCornerType): Unit {
    memScoped {
        return kniBridge6264(scrolled_window?.getPointer(memScope).rawValue, window_placement.value)
    }
}

fun gtk_scrolled_window_unset_placement(scrolled_window: CValuesRef<GtkScrolledWindow>?): Unit {
    memScoped {
        return kniBridge6265(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_get_placement(scrolled_window: CValuesRef<GtkScrolledWindow>?): GtkCornerType {
    memScoped {
        return GtkCornerType.byValue(kniBridge6266(scrolled_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_set_shadow_type(scrolled_window: CValuesRef<GtkScrolledWindow>?, type: GtkShadowType): Unit {
    memScoped {
        return kniBridge6267(scrolled_window?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_scrolled_window_get_shadow_type(scrolled_window: CValuesRef<GtkScrolledWindow>?): GtkShadowType {
    memScoped {
        return GtkShadowType.byValue(kniBridge6268(scrolled_window?.getPointer(memScope).rawValue))
    }
}

fun gtk_scrolled_window_add_with_viewport(scrolled_window: CValuesRef<GtkScrolledWindow>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge6269(scrolled_window?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_get_min_content_width(scrolled_window: CValuesRef<GtkScrolledWindow>?): gint {
    memScoped {
        return kniBridge6270(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_min_content_width(scrolled_window: CValuesRef<GtkScrolledWindow>?, width: gint): Unit {
    memScoped {
        return kniBridge6271(scrolled_window?.getPointer(memScope).rawValue, width)
    }
}

fun gtk_scrolled_window_get_min_content_height(scrolled_window: CValuesRef<GtkScrolledWindow>?): gint {
    memScoped {
        return kniBridge6272(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_min_content_height(scrolled_window: CValuesRef<GtkScrolledWindow>?, height: gint): Unit {
    memScoped {
        return kniBridge6273(scrolled_window?.getPointer(memScope).rawValue, height)
    }
}

fun gtk_scrolled_window_set_kinetic_scrolling(scrolled_window: CValuesRef<GtkScrolledWindow>?, kinetic_scrolling: gboolean): Unit {
    memScoped {
        return kniBridge6274(scrolled_window?.getPointer(memScope).rawValue, kinetic_scrolling)
    }
}

fun gtk_scrolled_window_get_kinetic_scrolling(scrolled_window: CValuesRef<GtkScrolledWindow>?): gboolean {
    memScoped {
        return kniBridge6275(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_capture_button_press(scrolled_window: CValuesRef<GtkScrolledWindow>?, capture_button_press: gboolean): Unit {
    memScoped {
        return kniBridge6276(scrolled_window?.getPointer(memScope).rawValue, capture_button_press)
    }
}

fun gtk_scrolled_window_get_capture_button_press(scrolled_window: CValuesRef<GtkScrolledWindow>?): gboolean {
    memScoped {
        return kniBridge6277(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_overlay_scrolling(scrolled_window: CValuesRef<GtkScrolledWindow>?, overlay_scrolling: gboolean): Unit {
    memScoped {
        return kniBridge6278(scrolled_window?.getPointer(memScope).rawValue, overlay_scrolling)
    }
}

fun gtk_scrolled_window_get_overlay_scrolling(scrolled_window: CValuesRef<GtkScrolledWindow>?): gboolean {
    memScoped {
        return kniBridge6279(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_max_content_width(scrolled_window: CValuesRef<GtkScrolledWindow>?, width: gint): Unit {
    memScoped {
        return kniBridge6280(scrolled_window?.getPointer(memScope).rawValue, width)
    }
}

fun gtk_scrolled_window_get_max_content_width(scrolled_window: CValuesRef<GtkScrolledWindow>?): gint {
    memScoped {
        return kniBridge6281(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_max_content_height(scrolled_window: CValuesRef<GtkScrolledWindow>?, height: gint): Unit {
    memScoped {
        return kniBridge6282(scrolled_window?.getPointer(memScope).rawValue, height)
    }
}

fun gtk_scrolled_window_get_max_content_height(scrolled_window: CValuesRef<GtkScrolledWindow>?): gint {
    memScoped {
        return kniBridge6283(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_propagate_natural_width(scrolled_window: CValuesRef<GtkScrolledWindow>?, propagate: gboolean): Unit {
    memScoped {
        return kniBridge6284(scrolled_window?.getPointer(memScope).rawValue, propagate)
    }
}

fun gtk_scrolled_window_get_propagate_natural_width(scrolled_window: CValuesRef<GtkScrolledWindow>?): gboolean {
    memScoped {
        return kniBridge6285(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_scrolled_window_set_propagate_natural_height(scrolled_window: CValuesRef<GtkScrolledWindow>?, propagate: gboolean): Unit {
    memScoped {
        return kniBridge6286(scrolled_window?.getPointer(memScope).rawValue, propagate)
    }
}

fun gtk_scrolled_window_get_propagate_natural_height(scrolled_window: CValuesRef<GtkScrolledWindow>?): gboolean {
    memScoped {
        return kniBridge6287(scrolled_window?.getPointer(memScope).rawValue)
    }
}

fun gtk_search_bar_get_type(): GType {
    return kniBridge6288()
}

fun gtk_search_bar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6289())
}

fun gtk_search_bar_connect_entry(bar: CValuesRef<GtkSearchBar>?, entry: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge6290(bar?.getPointer(memScope).rawValue, entry?.getPointer(memScope).rawValue)
    }
}

fun gtk_search_bar_get_search_mode(bar: CValuesRef<GtkSearchBar>?): gboolean {
    memScoped {
        return kniBridge6291(bar?.getPointer(memScope).rawValue)
    }
}

fun gtk_search_bar_set_search_mode(bar: CValuesRef<GtkSearchBar>?, search_mode: gboolean): Unit {
    memScoped {
        return kniBridge6292(bar?.getPointer(memScope).rawValue, search_mode)
    }
}

fun gtk_search_bar_get_show_close_button(bar: CValuesRef<GtkSearchBar>?): gboolean {
    memScoped {
        return kniBridge6293(bar?.getPointer(memScope).rawValue)
    }
}

fun gtk_search_bar_set_show_close_button(bar: CValuesRef<GtkSearchBar>?, visible: gboolean): Unit {
    memScoped {
        return kniBridge6294(bar?.getPointer(memScope).rawValue, visible)
    }
}

fun gtk_search_bar_handle_event(bar: CValuesRef<GtkSearchBar>?, event: CValuesRef<GdkEvent>?): gboolean {
    memScoped {
        return kniBridge6295(bar?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_search_entry_get_type(): GType {
    return kniBridge6296()
}

fun gtk_search_entry_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6297())
}

fun gtk_search_entry_handle_event(entry: CValuesRef<GtkSearchEntry>?, event: CValuesRef<GdkEvent>?): gboolean {
    memScoped {
        return kniBridge6298(entry?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_separator_get_type(): GType {
    return kniBridge6299()
}

fun gtk_separator_new(orientation: GtkOrientation): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6300(orientation.value))
}

fun gtk_separator_menu_item_get_type(): GType {
    return kniBridge6301()
}

fun gtk_separator_menu_item_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6302())
}

fun gtk_separator_tool_item_get_type(): GType {
    return kniBridge6303()
}

fun gtk_separator_tool_item_new(): CPointer<GtkToolItem>? {
    return interpretCPointer<GtkToolItem>(kniBridge6304())
}

fun gtk_separator_tool_item_get_draw(item: CValuesRef<GtkSeparatorToolItem>?): gboolean {
    memScoped {
        return kniBridge6305(item?.getPointer(memScope).rawValue)
    }
}

fun gtk_separator_tool_item_set_draw(item: CValuesRef<GtkSeparatorToolItem>?, draw: gboolean): Unit {
    memScoped {
        return kniBridge6306(item?.getPointer(memScope).rawValue, draw)
    }
}

fun gtk_settings_get_type(): GType {
    return kniBridge6307()
}

fun gtk_settings_get_default(): CPointer<GtkSettings>? {
    return interpretCPointer<GtkSettings>(kniBridge6308())
}

fun gtk_settings_get_for_screen(screen: CValuesRef<GdkScreen>?): CPointer<GtkSettings>? {
    memScoped {
        return interpretCPointer<GtkSettings>(kniBridge6309(screen?.getPointer(memScope).rawValue))
    }
}

fun gtk_settings_install_property(pspec: CValuesRef<GParamSpec>?): Unit {
    memScoped {
        return kniBridge6310(pspec?.getPointer(memScope).rawValue)
    }
}

fun gtk_settings_install_property_parser(pspec: CValuesRef<GParamSpec>?, parser: GtkRcPropertyParser?): Unit {
    memScoped {
        return kniBridge6311(pspec?.getPointer(memScope).rawValue, parser.rawValue)
    }
}

fun gtk_rc_property_parse_color(pspec: CValuesRef<GParamSpec>?, gstring: CValuesRef<GString>?, property_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge6312(pspec?.getPointer(memScope).rawValue, gstring?.getPointer(memScope).rawValue, property_value?.getPointer(memScope).rawValue)
    }
}

fun gtk_rc_property_parse_enum(pspec: CValuesRef<GParamSpec>?, gstring: CValuesRef<GString>?, property_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge6313(pspec?.getPointer(memScope).rawValue, gstring?.getPointer(memScope).rawValue, property_value?.getPointer(memScope).rawValue)
    }
}

fun gtk_rc_property_parse_flags(pspec: CValuesRef<GParamSpec>?, gstring: CValuesRef<GString>?, property_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge6314(pspec?.getPointer(memScope).rawValue, gstring?.getPointer(memScope).rawValue, property_value?.getPointer(memScope).rawValue)
    }
}

fun gtk_rc_property_parse_requisition(pspec: CValuesRef<GParamSpec>?, gstring: CValuesRef<GString>?, property_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge6315(pspec?.getPointer(memScope).rawValue, gstring?.getPointer(memScope).rawValue, property_value?.getPointer(memScope).rawValue)
    }
}

fun gtk_rc_property_parse_border(pspec: CValuesRef<GParamSpec>?, gstring: CValuesRef<GString>?, property_value: CValuesRef<GValue>?): gboolean {
    memScoped {
        return kniBridge6316(pspec?.getPointer(memScope).rawValue, gstring?.getPointer(memScope).rawValue, property_value?.getPointer(memScope).rawValue)
    }
}

fun gtk_settings_set_property_value(settings: CValuesRef<GtkSettings>?, @CCall.CString name: String?, svalue: CValuesRef<GtkSettingsValue>?): Unit {
    memScoped {
        return kniBridge6317(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, svalue?.getPointer(memScope).rawValue)
    }
}

fun gtk_settings_set_string_property(settings: CValuesRef<GtkSettings>?, @CCall.CString name: String?, @CCall.CString v_string: String?, @CCall.CString origin: String?): Unit {
    memScoped {
        return kniBridge6318(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, v_string?.cstr?.getPointer(memScope).rawValue, origin?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_settings_set_long_property(settings: CValuesRef<GtkSettings>?, @CCall.CString name: String?, v_long: glong, @CCall.CString origin: String?): Unit {
    memScoped {
        return kniBridge6319(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, v_long, origin?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_settings_set_double_property(settings: CValuesRef<GtkSettings>?, @CCall.CString name: String?, v_double: gdouble, @CCall.CString origin: String?): Unit {
    memScoped {
        return kniBridge6320(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, v_double, origin?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_settings_reset_property(settings: CValuesRef<GtkSettings>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6321(settings?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_shortcut_label_get_type(): GType {
    return kniBridge6322()
}

fun gtk_shortcut_label_new(@CCall.CString accelerator: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6323(accelerator?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_shortcut_label_get_accelerator(self: CValuesRef<GtkShortcutLabel>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6324(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_shortcut_label_set_accelerator(self: CValuesRef<GtkShortcutLabel>?, @CCall.CString accelerator: String?): Unit {
    memScoped {
        return kniBridge6325(self?.getPointer(memScope).rawValue, accelerator?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_shortcut_label_get_disabled_text(self: CValuesRef<GtkShortcutLabel>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6326(self?.getPointer(memScope).rawValue))
    }
}

fun gtk_shortcut_label_set_disabled_text(self: CValuesRef<GtkShortcutLabel>?, @CCall.CString disabled_text: String?): Unit {
    memScoped {
        return kniBridge6327(self?.getPointer(memScope).rawValue, disabled_text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_shortcuts_group_get_type(): GType {
    return kniBridge6328()
}

fun gtk_shortcuts_section_get_type(): GType {
    return kniBridge6329()
}

fun gtk_shortcuts_shortcut_get_type(): GType {
    return kniBridge6330()
}

fun gtk_show_uri(screen: CValuesRef<GdkScreen>?, @CCall.CString uri: String?, timestamp: guint32, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6331(screen?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, timestamp, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_show_uri_on_window(parent: CValuesRef<GtkWindow>?, @CCall.CString uri: String?, timestamp: guint32, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6332(parent?.getPointer(memScope).rawValue, uri?.cstr?.getPointer(memScope).rawValue, timestamp, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_get_type(): GType {
    return kniBridge6333()
}

fun gtk_stack_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6334())
}

fun gtk_stack_add_named(stack: CValuesRef<GtkStack>?, child: CValuesRef<GtkWidget>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6335(stack?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_add_titled(stack: CValuesRef<GtkStack>?, child: CValuesRef<GtkWidget>?, @CCall.CString name: String?, @CCall.CString title: String?): Unit {
    memScoped {
        return kniBridge6336(stack?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, title?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_get_child_by_name(stack: CValuesRef<GtkStack>?, @CCall.CString name: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6337(stack?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_stack_set_visible_child(stack: CValuesRef<GtkStack>?, child: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge6338(stack?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_get_visible_child(stack: CValuesRef<GtkStack>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6339(stack?.getPointer(memScope).rawValue))
    }
}

fun gtk_stack_set_visible_child_name(stack: CValuesRef<GtkStack>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6340(stack?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_get_visible_child_name(stack: CValuesRef<GtkStack>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6341(stack?.getPointer(memScope).rawValue))
    }
}

fun gtk_stack_set_visible_child_full(stack: CValuesRef<GtkStack>?, @CCall.CString name: String?, transition: GtkStackTransitionType): Unit {
    memScoped {
        return kniBridge6342(stack?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, transition.value)
    }
}

fun gtk_stack_set_homogeneous(stack: CValuesRef<GtkStack>?, homogeneous: gboolean): Unit {
    memScoped {
        return kniBridge6343(stack?.getPointer(memScope).rawValue, homogeneous)
    }
}

fun gtk_stack_get_homogeneous(stack: CValuesRef<GtkStack>?): gboolean {
    memScoped {
        return kniBridge6344(stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_set_hhomogeneous(stack: CValuesRef<GtkStack>?, hhomogeneous: gboolean): Unit {
    memScoped {
        return kniBridge6345(stack?.getPointer(memScope).rawValue, hhomogeneous)
    }
}

fun gtk_stack_get_hhomogeneous(stack: CValuesRef<GtkStack>?): gboolean {
    memScoped {
        return kniBridge6346(stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_set_vhomogeneous(stack: CValuesRef<GtkStack>?, vhomogeneous: gboolean): Unit {
    memScoped {
        return kniBridge6347(stack?.getPointer(memScope).rawValue, vhomogeneous)
    }
}

fun gtk_stack_get_vhomogeneous(stack: CValuesRef<GtkStack>?): gboolean {
    memScoped {
        return kniBridge6348(stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_set_transition_duration(stack: CValuesRef<GtkStack>?, duration: guint): Unit {
    memScoped {
        return kniBridge6349(stack?.getPointer(memScope).rawValue, duration)
    }
}

fun gtk_stack_get_transition_duration(stack: CValuesRef<GtkStack>?): guint {
    memScoped {
        return kniBridge6350(stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_set_transition_type(stack: CValuesRef<GtkStack>?, transition: GtkStackTransitionType): Unit {
    memScoped {
        return kniBridge6351(stack?.getPointer(memScope).rawValue, transition.value)
    }
}

fun gtk_stack_get_transition_type(stack: CValuesRef<GtkStack>?): GtkStackTransitionType {
    memScoped {
        return GtkStackTransitionType.byValue(kniBridge6352(stack?.getPointer(memScope).rawValue))
    }
}

fun gtk_stack_get_transition_running(stack: CValuesRef<GtkStack>?): gboolean {
    memScoped {
        return kniBridge6353(stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_set_interpolate_size(stack: CValuesRef<GtkStack>?, interpolate_size: gboolean): Unit {
    memScoped {
        return kniBridge6354(stack?.getPointer(memScope).rawValue, interpolate_size)
    }
}

fun gtk_stack_get_interpolate_size(stack: CValuesRef<GtkStack>?): gboolean {
    memScoped {
        return kniBridge6355(stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_sidebar_get_type(): GType {
    return kniBridge6356()
}

fun gtk_stack_sidebar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6357())
}

fun gtk_stack_sidebar_set_stack(sidebar: CValuesRef<GtkStackSidebar>?, stack: CValuesRef<GtkStack>?): Unit {
    memScoped {
        return kniBridge6358(sidebar?.getPointer(memScope).rawValue, stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_sidebar_get_stack(sidebar: CValuesRef<GtkStackSidebar>?): CPointer<GtkStack>? {
    memScoped {
        return interpretCPointer<GtkStack>(kniBridge6359(sidebar?.getPointer(memScope).rawValue))
    }
}

fun gtk_distribute_natural_allocation(extra_space: gint, n_requested_sizes: guint, sizes: CValuesRef<GtkRequestedSize>?): gint {
    memScoped {
        return kniBridge6360(extra_space, n_requested_sizes, sizes?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_get_type(): GType {
    return kniBridge6361()
}

fun gtk_spin_button_configure(spin_button: CValuesRef<GtkSpinButton>?, adjustment: CValuesRef<GtkAdjustment>?, climb_rate: gdouble, digits: guint): Unit {
    memScoped {
        return kniBridge6362(spin_button?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue, climb_rate, digits)
    }
}

fun gtk_spin_button_new(adjustment: CValuesRef<GtkAdjustment>?, climb_rate: gdouble, digits: guint): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6363(adjustment?.getPointer(memScope).rawValue, climb_rate, digits))
    }
}

fun gtk_spin_button_new_with_range(min: gdouble, max: gdouble, step: gdouble): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6364(min, max, step))
}

fun gtk_spin_button_set_adjustment(spin_button: CValuesRef<GtkSpinButton>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6365(spin_button?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_get_adjustment(spin_button: CValuesRef<GtkSpinButton>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6366(spin_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_spin_button_set_digits(spin_button: CValuesRef<GtkSpinButton>?, digits: guint): Unit {
    memScoped {
        return kniBridge6367(spin_button?.getPointer(memScope).rawValue, digits)
    }
}

fun gtk_spin_button_get_digits(spin_button: CValuesRef<GtkSpinButton>?): guint {
    memScoped {
        return kniBridge6368(spin_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_set_increments(spin_button: CValuesRef<GtkSpinButton>?, step: gdouble, page: gdouble): Unit {
    memScoped {
        return kniBridge6369(spin_button?.getPointer(memScope).rawValue, step, page)
    }
}

fun gtk_spin_button_get_increments(spin_button: CValuesRef<GtkSpinButton>?, step: CValuesRef<gdoubleVar>?, page: CValuesRef<gdoubleVar>?): Unit {
    memScoped {
        return kniBridge6370(spin_button?.getPointer(memScope).rawValue, step?.getPointer(memScope).rawValue, page?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_set_range(spin_button: CValuesRef<GtkSpinButton>?, min: gdouble, max: gdouble): Unit {
    memScoped {
        return kniBridge6371(spin_button?.getPointer(memScope).rawValue, min, max)
    }
}

fun gtk_spin_button_get_range(spin_button: CValuesRef<GtkSpinButton>?, min: CValuesRef<gdoubleVar>?, max: CValuesRef<gdoubleVar>?): Unit {
    memScoped {
        return kniBridge6372(spin_button?.getPointer(memScope).rawValue, min?.getPointer(memScope).rawValue, max?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_get_value(spin_button: CValuesRef<GtkSpinButton>?): gdouble {
    memScoped {
        return kniBridge6373(spin_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_get_value_as_int(spin_button: CValuesRef<GtkSpinButton>?): gint {
    memScoped {
        return kniBridge6374(spin_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_set_value(spin_button: CValuesRef<GtkSpinButton>?, value: gdouble): Unit {
    memScoped {
        return kniBridge6375(spin_button?.getPointer(memScope).rawValue, value)
    }
}

fun gtk_spin_button_set_update_policy(spin_button: CValuesRef<GtkSpinButton>?, policy: GtkSpinButtonUpdatePolicy): Unit {
    memScoped {
        return kniBridge6376(spin_button?.getPointer(memScope).rawValue, policy.value)
    }
}

fun gtk_spin_button_get_update_policy(spin_button: CValuesRef<GtkSpinButton>?): GtkSpinButtonUpdatePolicy {
    memScoped {
        return GtkSpinButtonUpdatePolicy.byValue(kniBridge6377(spin_button?.getPointer(memScope).rawValue))
    }
}

fun gtk_spin_button_set_numeric(spin_button: CValuesRef<GtkSpinButton>?, numeric: gboolean): Unit {
    memScoped {
        return kniBridge6378(spin_button?.getPointer(memScope).rawValue, numeric)
    }
}

fun gtk_spin_button_get_numeric(spin_button: CValuesRef<GtkSpinButton>?): gboolean {
    memScoped {
        return kniBridge6379(spin_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_spin(spin_button: CValuesRef<GtkSpinButton>?, direction: GtkSpinType, increment: gdouble): Unit {
    memScoped {
        return kniBridge6380(spin_button?.getPointer(memScope).rawValue, direction.value, increment)
    }
}

fun gtk_spin_button_set_wrap(spin_button: CValuesRef<GtkSpinButton>?, wrap: gboolean): Unit {
    memScoped {
        return kniBridge6381(spin_button?.getPointer(memScope).rawValue, wrap)
    }
}

fun gtk_spin_button_get_wrap(spin_button: CValuesRef<GtkSpinButton>?): gboolean {
    memScoped {
        return kniBridge6382(spin_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_set_snap_to_ticks(spin_button: CValuesRef<GtkSpinButton>?, snap_to_ticks: gboolean): Unit {
    memScoped {
        return kniBridge6383(spin_button?.getPointer(memScope).rawValue, snap_to_ticks)
    }
}

fun gtk_spin_button_get_snap_to_ticks(spin_button: CValuesRef<GtkSpinButton>?): gboolean {
    memScoped {
        return kniBridge6384(spin_button?.getPointer(memScope).rawValue)
    }
}

fun gtk_spin_button_update(spin_button: CValuesRef<GtkSpinButton>?): Unit {
    memScoped {
        return kniBridge6385(spin_button?.getPointer(memScope).rawValue)
    }
}

fun _gtk_spin_button_get_panels(spin_button: CValuesRef<GtkSpinButton>?, down_panel: CValuesRef<CPointerVar<GdkWindow>>?, up_panel: CValuesRef<CPointerVar<GdkWindow>>?): Unit {
    memScoped {
        return kniBridge6386(spin_button?.getPointer(memScope).rawValue, down_panel?.getPointer(memScope).rawValue, up_panel?.getPointer(memScope).rawValue)
    }
}

fun gtk_spinner_get_type(): GType {
    return kniBridge6387()
}

fun gtk_spinner_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6388())
}

fun gtk_spinner_start(spinner: CValuesRef<GtkSpinner>?): Unit {
    memScoped {
        return kniBridge6389(spinner?.getPointer(memScope).rawValue)
    }
}

fun gtk_spinner_stop(spinner: CValuesRef<GtkSpinner>?): Unit {
    memScoped {
        return kniBridge6390(spinner?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_switcher_get_type(): GType {
    return kniBridge6391()
}

fun gtk_stack_switcher_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6392())
}

fun gtk_stack_switcher_set_stack(switcher: CValuesRef<GtkStackSwitcher>?, stack: CValuesRef<GtkStack>?): Unit {
    memScoped {
        return kniBridge6393(switcher?.getPointer(memScope).rawValue, stack?.getPointer(memScope).rawValue)
    }
}

fun gtk_stack_switcher_get_stack(switcher: CValuesRef<GtkStackSwitcher>?): CPointer<GtkStack>? {
    memScoped {
        return interpretCPointer<GtkStack>(kniBridge6394(switcher?.getPointer(memScope).rawValue))
    }
}

fun gtk_statusbar_get_type(): GType {
    return kniBridge6395()
}

fun gtk_statusbar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6396())
}

fun gtk_statusbar_get_context_id(statusbar: CValuesRef<GtkStatusbar>?, @CCall.CString context_description: String?): guint {
    memScoped {
        return kniBridge6397(statusbar?.getPointer(memScope).rawValue, context_description?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_statusbar_push(statusbar: CValuesRef<GtkStatusbar>?, context_id: guint, @CCall.CString text: String?): guint {
    memScoped {
        return kniBridge6398(statusbar?.getPointer(memScope).rawValue, context_id, text?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_statusbar_pop(statusbar: CValuesRef<GtkStatusbar>?, context_id: guint): Unit {
    memScoped {
        return kniBridge6399(statusbar?.getPointer(memScope).rawValue, context_id)
    }
}

fun gtk_statusbar_remove(statusbar: CValuesRef<GtkStatusbar>?, context_id: guint, message_id: guint): Unit {
    memScoped {
        return kniBridge6400(statusbar?.getPointer(memScope).rawValue, context_id, message_id)
    }
}

fun gtk_statusbar_remove_all(statusbar: CValuesRef<GtkStatusbar>?, context_id: guint): Unit {
    memScoped {
        return kniBridge6401(statusbar?.getPointer(memScope).rawValue, context_id)
    }
}

fun gtk_statusbar_get_message_area(statusbar: CValuesRef<GtkStatusbar>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6402(statusbar?.getPointer(memScope).rawValue))
    }
}

fun gtk_switch_get_type(): GType {
    return kniBridge6403()
}

fun gtk_switch_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6404())
}

fun gtk_switch_set_active(sw: CValuesRef<GtkSwitch>?, is_active: gboolean): Unit {
    memScoped {
        return kniBridge6405(sw?.getPointer(memScope).rawValue, is_active)
    }
}

fun gtk_switch_get_active(sw: CValuesRef<GtkSwitch>?): gboolean {
    memScoped {
        return kniBridge6406(sw?.getPointer(memScope).rawValue)
    }
}

fun gtk_switch_set_state(sw: CValuesRef<GtkSwitch>?, state: gboolean): Unit {
    memScoped {
        return kniBridge6407(sw?.getPointer(memScope).rawValue, state)
    }
}

fun gtk_switch_get_state(sw: CValuesRef<GtkSwitch>?): gboolean {
    memScoped {
        return kniBridge6408(sw?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_tag_table_get_type(): GType {
    return kniBridge6409()
}

fun gtk_text_tag_table_new(): CPointer<GtkTextTagTable>? {
    return interpretCPointer<GtkTextTagTable>(kniBridge6410())
}

fun gtk_text_tag_table_add(table: CValuesRef<GtkTextTagTable>?, tag: CValuesRef<GtkTextTag>?): gboolean {
    memScoped {
        return kniBridge6411(table?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_tag_table_remove(table: CValuesRef<GtkTextTagTable>?, tag: CValuesRef<GtkTextTag>?): Unit {
    memScoped {
        return kniBridge6412(table?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_tag_table_lookup(table: CValuesRef<GtkTextTagTable>?, @CCall.CString name: String?): CPointer<GtkTextTag>? {
    memScoped {
        return interpretCPointer<GtkTextTag>(kniBridge6413(table?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_tag_table_foreach(table: CValuesRef<GtkTextTagTable>?, func: GtkTextTagTableForeach?, data: gpointer?): Unit {
    memScoped {
        return kniBridge6414(table?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun gtk_text_tag_table_get_size(table: CValuesRef<GtkTextTagTable>?): gint {
    memScoped {
        return kniBridge6415(table?.getPointer(memScope).rawValue)
    }
}

fun _gtk_text_tag_table_add_buffer(table: CValuesRef<GtkTextTagTable>?, buffer: gpointer?): Unit {
    memScoped {
        return kniBridge6416(table?.getPointer(memScope).rawValue, buffer.rawValue)
    }
}

fun _gtk_text_tag_table_remove_buffer(table: CValuesRef<GtkTextTagTable>?, buffer: gpointer?): Unit {
    memScoped {
        return kniBridge6417(table?.getPointer(memScope).rawValue, buffer.rawValue)
    }
}

fun gtk_text_mark_get_type(): GType {
    return kniBridge6418()
}

fun gtk_text_mark_new(@CCall.CString name: String?, left_gravity: gboolean): CPointer<GtkTextMark>? {
    memScoped {
        return interpretCPointer<GtkTextMark>(kniBridge6419(name?.cstr?.getPointer(memScope).rawValue, left_gravity))
    }
}

fun gtk_text_mark_set_visible(mark: CValuesRef<GtkTextMark>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge6420(mark?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_text_mark_get_visible(mark: CValuesRef<GtkTextMark>?): gboolean {
    memScoped {
        return kniBridge6421(mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_mark_get_name(mark: CValuesRef<GtkTextMark>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6422(mark?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_mark_get_deleted(mark: CValuesRef<GtkTextMark>?): gboolean {
    memScoped {
        return kniBridge6423(mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_mark_get_buffer(mark: CValuesRef<GtkTextMark>?): CPointer<GtkTextBuffer>? {
    memScoped {
        return interpretCPointer<GtkTextBuffer>(kniBridge6424(mark?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_mark_get_left_gravity(mark: CValuesRef<GtkTextMark>?): gboolean {
    memScoped {
        return kniBridge6425(mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_type(): GType {
    return kniBridge6426()
}

fun gtk_text_buffer_new(table: CValuesRef<GtkTextTagTable>?): CPointer<GtkTextBuffer>? {
    memScoped {
        return interpretCPointer<GtkTextBuffer>(kniBridge6427(table?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_get_line_count(buffer: CValuesRef<GtkTextBuffer>?): gint {
    memScoped {
        return kniBridge6428(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_char_count(buffer: CValuesRef<GtkTextBuffer>?): gint {
    memScoped {
        return kniBridge6429(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_tag_table(buffer: CValuesRef<GtkTextBuffer>?): CPointer<GtkTextTagTable>? {
    memScoped {
        return interpretCPointer<GtkTextTagTable>(kniBridge6430(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_set_text(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString text: String?, len: gint): Unit {
    memScoped {
        return kniBridge6431(buffer?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun gtk_text_buffer_insert(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, @CCall.CString text: String?, len: gint): Unit {
    memScoped {
        return kniBridge6432(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun gtk_text_buffer_insert_at_cursor(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString text: String?, len: gint): Unit {
    memScoped {
        return kniBridge6433(buffer?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun gtk_text_buffer_insert_interactive(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, @CCall.CString text: String?, len: gint, default_editable: gboolean): gboolean {
    memScoped {
        return kniBridge6434(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len, default_editable)
    }
}

fun gtk_text_buffer_insert_interactive_at_cursor(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString text: String?, len: gint, default_editable: gboolean): gboolean {
    memScoped {
        return kniBridge6435(buffer?.getPointer(memScope).rawValue, text?.cstr?.getPointer(memScope).rawValue, len, default_editable)
    }
}

fun gtk_text_buffer_insert_range(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6436(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_insert_range_interactive(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?, default_editable: gboolean): gboolean {
    memScoped {
        return kniBridge6437(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue, default_editable)
    }
}

@CCall("knifunptr_libgtk369")
external fun gtk_text_buffer_insert_with_tags(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, @CCall.CString text: String?, len: gint, first_tag: CValuesRef<GtkTextTag>?, vararg variadicArguments: Any?): Unit

@CCall("knifunptr_libgtk370")
external fun gtk_text_buffer_insert_with_tags_by_name(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, @CCall.CString text: String?, len: gint, @CCall.CString first_tag_name: String?, vararg variadicArguments: Any?): Unit

fun gtk_text_buffer_insert_markup(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, @CCall.CString markup: String?, len: gint): Unit {
    memScoped {
        return kniBridge6438(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, markup?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun gtk_text_buffer_delete(buffer: CValuesRef<GtkTextBuffer>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6439(buffer?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_delete_interactive(buffer: CValuesRef<GtkTextBuffer>?, start_iter: CValuesRef<GtkTextIter>?, end_iter: CValuesRef<GtkTextIter>?, default_editable: gboolean): gboolean {
    memScoped {
        return kniBridge6440(buffer?.getPointer(memScope).rawValue, start_iter?.getPointer(memScope).rawValue, end_iter?.getPointer(memScope).rawValue, default_editable)
    }
}

fun gtk_text_buffer_backspace(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, interactive: gboolean, default_editable: gboolean): gboolean {
    memScoped {
        return kniBridge6441(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, interactive, default_editable)
    }
}

fun gtk_text_buffer_get_text(buffer: CValuesRef<GtkTextBuffer>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?, include_hidden_chars: gboolean): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6442(buffer?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue, include_hidden_chars))
    }
}

fun gtk_text_buffer_get_slice(buffer: CValuesRef<GtkTextBuffer>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?, include_hidden_chars: gboolean): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6443(buffer?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue, include_hidden_chars))
    }
}

fun gtk_text_buffer_insert_pixbuf(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, pixbuf: CValuesRef<GdkPixbuf>?): Unit {
    memScoped {
        return kniBridge6444(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, pixbuf?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_insert_child_anchor(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, anchor: CValuesRef<GtkTextChildAnchor>?): Unit {
    memScoped {
        return kniBridge6445(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, anchor?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_create_child_anchor(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?): CPointer<GtkTextChildAnchor>? {
    memScoped {
        return interpretCPointer<GtkTextChildAnchor>(kniBridge6446(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_add_mark(buffer: CValuesRef<GtkTextBuffer>?, mark: CValuesRef<GtkTextMark>?, where: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6447(buffer?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue, where?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_create_mark(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString mark_name: String?, where: CValuesRef<GtkTextIter>?, left_gravity: gboolean): CPointer<GtkTextMark>? {
    memScoped {
        return interpretCPointer<GtkTextMark>(kniBridge6448(buffer?.getPointer(memScope).rawValue, mark_name?.cstr?.getPointer(memScope).rawValue, where?.getPointer(memScope).rawValue, left_gravity))
    }
}

fun gtk_text_buffer_move_mark(buffer: CValuesRef<GtkTextBuffer>?, mark: CValuesRef<GtkTextMark>?, where: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6449(buffer?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue, where?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_delete_mark(buffer: CValuesRef<GtkTextBuffer>?, mark: CValuesRef<GtkTextMark>?): Unit {
    memScoped {
        return kniBridge6450(buffer?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_mark(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString name: String?): CPointer<GtkTextMark>? {
    memScoped {
        return interpretCPointer<GtkTextMark>(kniBridge6451(buffer?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_move_mark_by_name(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString name: String?, where: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6452(buffer?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, where?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_delete_mark_by_name(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6453(buffer?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_insert(buffer: CValuesRef<GtkTextBuffer>?): CPointer<GtkTextMark>? {
    memScoped {
        return interpretCPointer<GtkTextMark>(kniBridge6454(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_get_selection_bound(buffer: CValuesRef<GtkTextBuffer>?): CPointer<GtkTextMark>? {
    memScoped {
        return interpretCPointer<GtkTextMark>(kniBridge6455(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_place_cursor(buffer: CValuesRef<GtkTextBuffer>?, where: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6456(buffer?.getPointer(memScope).rawValue, where?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_select_range(buffer: CValuesRef<GtkTextBuffer>?, ins: CValuesRef<GtkTextIter>?, bound: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6457(buffer?.getPointer(memScope).rawValue, ins?.getPointer(memScope).rawValue, bound?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_apply_tag(buffer: CValuesRef<GtkTextBuffer>?, tag: CValuesRef<GtkTextTag>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6458(buffer?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_remove_tag(buffer: CValuesRef<GtkTextBuffer>?, tag: CValuesRef<GtkTextTag>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6459(buffer?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_apply_tag_by_name(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString name: String?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6460(buffer?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_remove_tag_by_name(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString name: String?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6461(buffer?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_remove_all_tags(buffer: CValuesRef<GtkTextBuffer>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6462(buffer?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk371")
external fun gtk_text_buffer_create_tag(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString tag_name: String?, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): CPointer<GtkTextTag>?

fun gtk_text_buffer_get_iter_at_line_offset(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, line_number: gint, char_offset: gint): Unit {
    memScoped {
        return kniBridge6463(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, line_number, char_offset)
    }
}

fun gtk_text_buffer_get_iter_at_line_index(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, line_number: gint, byte_index: gint): Unit {
    memScoped {
        return kniBridge6464(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, line_number, byte_index)
    }
}

fun gtk_text_buffer_get_iter_at_offset(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, char_offset: gint): Unit {
    memScoped {
        return kniBridge6465(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, char_offset)
    }
}

fun gtk_text_buffer_get_iter_at_line(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, line_number: gint): Unit {
    memScoped {
        return kniBridge6466(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, line_number)
    }
}

fun gtk_text_buffer_get_start_iter(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6467(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_end_iter(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6468(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_bounds(buffer: CValuesRef<GtkTextBuffer>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge6469(buffer?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_iter_at_mark(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, mark: CValuesRef<GtkTextMark>?): Unit {
    memScoped {
        return kniBridge6470(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_iter_at_child_anchor(buffer: CValuesRef<GtkTextBuffer>?, iter: CValuesRef<GtkTextIter>?, anchor: CValuesRef<GtkTextChildAnchor>?): Unit {
    memScoped {
        return kniBridge6471(buffer?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, anchor?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_modified(buffer: CValuesRef<GtkTextBuffer>?): gboolean {
    memScoped {
        return kniBridge6472(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_set_modified(buffer: CValuesRef<GtkTextBuffer>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge6473(buffer?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_text_buffer_get_has_selection(buffer: CValuesRef<GtkTextBuffer>?): gboolean {
    memScoped {
        return kniBridge6474(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_add_selection_clipboard(buffer: CValuesRef<GtkTextBuffer>?, clipboard: CValuesRef<GtkClipboard>?): Unit {
    memScoped {
        return kniBridge6475(buffer?.getPointer(memScope).rawValue, clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_remove_selection_clipboard(buffer: CValuesRef<GtkTextBuffer>?, clipboard: CValuesRef<GtkClipboard>?): Unit {
    memScoped {
        return kniBridge6476(buffer?.getPointer(memScope).rawValue, clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_cut_clipboard(buffer: CValuesRef<GtkTextBuffer>?, clipboard: CValuesRef<GtkClipboard>?, default_editable: gboolean): Unit {
    memScoped {
        return kniBridge6477(buffer?.getPointer(memScope).rawValue, clipboard?.getPointer(memScope).rawValue, default_editable)
    }
}

fun gtk_text_buffer_copy_clipboard(buffer: CValuesRef<GtkTextBuffer>?, clipboard: CValuesRef<GtkClipboard>?): Unit {
    memScoped {
        return kniBridge6478(buffer?.getPointer(memScope).rawValue, clipboard?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_paste_clipboard(buffer: CValuesRef<GtkTextBuffer>?, clipboard: CValuesRef<GtkClipboard>?, override_location: CValuesRef<GtkTextIter>?, default_editable: gboolean): Unit {
    memScoped {
        return kniBridge6479(buffer?.getPointer(memScope).rawValue, clipboard?.getPointer(memScope).rawValue, override_location?.getPointer(memScope).rawValue, default_editable)
    }
}

fun gtk_text_buffer_get_selection_bounds(buffer: CValuesRef<GtkTextBuffer>?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge6480(buffer?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_delete_selection(buffer: CValuesRef<GtkTextBuffer>?, interactive: gboolean, default_editable: gboolean): gboolean {
    memScoped {
        return kniBridge6481(buffer?.getPointer(memScope).rawValue, interactive, default_editable)
    }
}

fun gtk_text_buffer_begin_user_action(buffer: CValuesRef<GtkTextBuffer>?): Unit {
    memScoped {
        return kniBridge6482(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_end_user_action(buffer: CValuesRef<GtkTextBuffer>?): Unit {
    memScoped {
        return kniBridge6483(buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_buffer_get_copy_target_list(buffer: CValuesRef<GtkTextBuffer>?): CPointer<GtkTargetList>? {
    memScoped {
        return interpretCPointer<GtkTargetList>(kniBridge6484(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_get_paste_target_list(buffer: CValuesRef<GtkTextBuffer>?): CPointer<GtkTargetList>? {
    memScoped {
        return interpretCPointer<GtkTargetList>(kniBridge6485(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_register_serialize_format(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString mime_type: String?, function: GtkTextBufferSerializeFunc?, user_data: gpointer?, user_data_destroy: GDestroyNotify?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge6486(buffer?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue, function.rawValue, user_data.rawValue, user_data_destroy.rawValue))
    }
}

fun gtk_text_buffer_register_serialize_tagset(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString tagset_name: String?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge6487(buffer?.getPointer(memScope).rawValue, tagset_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_register_deserialize_format(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString mime_type: String?, function: GtkTextBufferDeserializeFunc?, user_data: gpointer?, user_data_destroy: GDestroyNotify?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge6488(buffer?.getPointer(memScope).rawValue, mime_type?.cstr?.getPointer(memScope).rawValue, function.rawValue, user_data.rawValue, user_data_destroy.rawValue))
    }
}

fun gtk_text_buffer_register_deserialize_tagset(buffer: CValuesRef<GtkTextBuffer>?, @CCall.CString tagset_name: String?): GdkAtom? {
    memScoped {
        return interpretCPointer<_GdkAtom>(kniBridge6489(buffer?.getPointer(memScope).rawValue, tagset_name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_unregister_serialize_format(buffer: CValuesRef<GtkTextBuffer>?, format: GdkAtom?): Unit {
    memScoped {
        return kniBridge6490(buffer?.getPointer(memScope).rawValue, format.rawValue)
    }
}

fun gtk_text_buffer_unregister_deserialize_format(buffer: CValuesRef<GtkTextBuffer>?, format: GdkAtom?): Unit {
    memScoped {
        return kniBridge6491(buffer?.getPointer(memScope).rawValue, format.rawValue)
    }
}

fun gtk_text_buffer_deserialize_set_can_create_tags(buffer: CValuesRef<GtkTextBuffer>?, format: GdkAtom?, can_create_tags: gboolean): Unit {
    memScoped {
        return kniBridge6492(buffer?.getPointer(memScope).rawValue, format.rawValue, can_create_tags)
    }
}

fun gtk_text_buffer_deserialize_get_can_create_tags(buffer: CValuesRef<GtkTextBuffer>?, format: GdkAtom?): gboolean {
    memScoped {
        return kniBridge6493(buffer?.getPointer(memScope).rawValue, format.rawValue)
    }
}

fun gtk_text_buffer_get_serialize_formats(buffer: CValuesRef<GtkTextBuffer>?, n_formats: CValuesRef<gintVar>?): CPointer<GdkAtomVar>? {
    memScoped {
        return interpretCPointer<GdkAtomVar>(kniBridge6494(buffer?.getPointer(memScope).rawValue, n_formats?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_get_deserialize_formats(buffer: CValuesRef<GtkTextBuffer>?, n_formats: CValuesRef<gintVar>?): CPointer<GdkAtomVar>? {
    memScoped {
        return interpretCPointer<GdkAtomVar>(kniBridge6495(buffer?.getPointer(memScope).rawValue, n_formats?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_serialize(register_buffer: CValuesRef<GtkTextBuffer>?, content_buffer: CValuesRef<GtkTextBuffer>?, format: GdkAtom?, start: CValuesRef<GtkTextIter>?, end: CValuesRef<GtkTextIter>?, length: CValuesRef<gsizeVar>?): CPointer<guint8Var>? {
    memScoped {
        return interpretCPointer<guint8Var>(kniBridge6496(register_buffer?.getPointer(memScope).rawValue, content_buffer?.getPointer(memScope).rawValue, format.rawValue, start?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue, length?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_buffer_deserialize(register_buffer: CValuesRef<GtkTextBuffer>?, content_buffer: CValuesRef<GtkTextBuffer>?, format: GdkAtom?, iter: CValuesRef<GtkTextIter>?, data: CValuesRef<guint8Var>?, length: gsize, error: CValuesRef<CPointerVar<GError>>?): gboolean {
    memScoped {
        return kniBridge6497(register_buffer?.getPointer(memScope).rawValue, content_buffer?.getPointer(memScope).rawValue, format.rawValue, iter?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, length, error?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_type(): GType {
    return kniBridge6498()
}

fun gtk_text_view_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6499())
}

fun gtk_text_view_new_with_buffer(buffer: CValuesRef<GtkTextBuffer>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6500(buffer?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_set_buffer(text_view: CValuesRef<GtkTextView>?, buffer: CValuesRef<GtkTextBuffer>?): Unit {
    memScoped {
        return kniBridge6501(text_view?.getPointer(memScope).rawValue, buffer?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_buffer(text_view: CValuesRef<GtkTextView>?): CPointer<GtkTextBuffer>? {
    memScoped {
        return interpretCPointer<GtkTextBuffer>(kniBridge6502(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_scroll_to_iter(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, within_margin: gdouble, use_align: gboolean, xalign: gdouble, yalign: gdouble): gboolean {
    memScoped {
        return kniBridge6503(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, within_margin, use_align, xalign, yalign)
    }
}

fun gtk_text_view_scroll_to_mark(text_view: CValuesRef<GtkTextView>?, mark: CValuesRef<GtkTextMark>?, within_margin: gdouble, use_align: gboolean, xalign: gdouble, yalign: gdouble): Unit {
    memScoped {
        return kniBridge6504(text_view?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue, within_margin, use_align, xalign, yalign)
    }
}

fun gtk_text_view_scroll_mark_onscreen(text_view: CValuesRef<GtkTextView>?, mark: CValuesRef<GtkTextMark>?): Unit {
    memScoped {
        return kniBridge6505(text_view?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_move_mark_onscreen(text_view: CValuesRef<GtkTextView>?, mark: CValuesRef<GtkTextMark>?): gboolean {
    memScoped {
        return kniBridge6506(text_view?.getPointer(memScope).rawValue, mark?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_place_cursor_onscreen(text_view: CValuesRef<GtkTextView>?): gboolean {
    memScoped {
        return kniBridge6507(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_visible_rect(text_view: CValuesRef<GtkTextView>?, visible_rect: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge6508(text_view?.getPointer(memScope).rawValue, visible_rect?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_cursor_visible(text_view: CValuesRef<GtkTextView>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge6509(text_view?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_text_view_get_cursor_visible(text_view: CValuesRef<GtkTextView>?): gboolean {
    memScoped {
        return kniBridge6510(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_reset_cursor_blink(text_view: CValuesRef<GtkTextView>?): Unit {
    memScoped {
        return kniBridge6511(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_cursor_locations(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, strong: CValuesRef<GdkRectangle>?, weak: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge6512(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, strong?.getPointer(memScope).rawValue, weak?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_iter_location(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, location: CValuesRef<GdkRectangle>?): Unit {
    memScoped {
        return kniBridge6513(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, location?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_iter_at_location(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, x: gint, y: gint): gboolean {
    memScoped {
        return kniBridge6514(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_text_view_get_iter_at_position(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, trailing: CValuesRef<gintVar>?, x: gint, y: gint): gboolean {
    memScoped {
        return kniBridge6515(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, trailing?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_text_view_get_line_yrange(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, y: CValuesRef<gintVar>?, height: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6516(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, height?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_line_at_y(text_view: CValuesRef<GtkTextView>?, target_iter: CValuesRef<GtkTextIter>?, y: gint, line_top: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6517(text_view?.getPointer(memScope).rawValue, target_iter?.getPointer(memScope).rawValue, y, line_top?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_buffer_to_window_coords(text_view: CValuesRef<GtkTextView>?, win: GtkTextWindowType, buffer_x: gint, buffer_y: gint, window_x: CValuesRef<gintVar>?, window_y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6518(text_view?.getPointer(memScope).rawValue, win.value, buffer_x, buffer_y, window_x?.getPointer(memScope).rawValue, window_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_window_to_buffer_coords(text_view: CValuesRef<GtkTextView>?, win: GtkTextWindowType, window_x: gint, window_y: gint, buffer_x: CValuesRef<gintVar>?, buffer_y: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6519(text_view?.getPointer(memScope).rawValue, win.value, window_x, window_y, buffer_x?.getPointer(memScope).rawValue, buffer_y?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_hadjustment(text_view: CValuesRef<GtkTextView>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6520(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_get_vadjustment(text_view: CValuesRef<GtkTextView>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6521(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_get_window(text_view: CValuesRef<GtkTextView>?, win: GtkTextWindowType): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge6522(text_view?.getPointer(memScope).rawValue, win.value))
    }
}

fun gtk_text_view_get_window_type(text_view: CValuesRef<GtkTextView>?, window: CValuesRef<GdkWindow>?): GtkTextWindowType {
    memScoped {
        return GtkTextWindowType.byValue(kniBridge6523(text_view?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_set_border_window_size(text_view: CValuesRef<GtkTextView>?, type: GtkTextWindowType, size: gint): Unit {
    memScoped {
        return kniBridge6524(text_view?.getPointer(memScope).rawValue, type.value, size)
    }
}

fun gtk_text_view_get_border_window_size(text_view: CValuesRef<GtkTextView>?, type: GtkTextWindowType): gint {
    memScoped {
        return kniBridge6525(text_view?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_text_view_forward_display_line(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge6526(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_backward_display_line(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge6527(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_forward_display_line_end(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge6528(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_backward_display_line_start(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge6529(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_starts_display_line(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?): gboolean {
    memScoped {
        return kniBridge6530(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_move_visually(text_view: CValuesRef<GtkTextView>?, iter: CValuesRef<GtkTextIter>?, count: gint): gboolean {
    memScoped {
        return kniBridge6531(text_view?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, count)
    }
}

fun gtk_text_view_im_context_filter_keypress(text_view: CValuesRef<GtkTextView>?, event: CValuesRef<GdkEventKey>?): gboolean {
    memScoped {
        return kniBridge6532(text_view?.getPointer(memScope).rawValue, event?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_reset_im_context(text_view: CValuesRef<GtkTextView>?): Unit {
    memScoped {
        return kniBridge6533(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_add_child_at_anchor(text_view: CValuesRef<GtkTextView>?, child: CValuesRef<GtkWidget>?, anchor: CValuesRef<GtkTextChildAnchor>?): Unit {
    memScoped {
        return kniBridge6534(text_view?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, anchor?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_add_child_in_window(text_view: CValuesRef<GtkTextView>?, child: CValuesRef<GtkWidget>?, which_window: GtkTextWindowType, xpos: gint, ypos: gint): Unit {
    memScoped {
        return kniBridge6535(text_view?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, which_window.value, xpos, ypos)
    }
}

fun gtk_text_view_move_child(text_view: CValuesRef<GtkTextView>?, child: CValuesRef<GtkWidget>?, xpos: gint, ypos: gint): Unit {
    memScoped {
        return kniBridge6536(text_view?.getPointer(memScope).rawValue, child?.getPointer(memScope).rawValue, xpos, ypos)
    }
}

fun gtk_text_view_set_wrap_mode(text_view: CValuesRef<GtkTextView>?, wrap_mode: GtkWrapMode): Unit {
    memScoped {
        return kniBridge6537(text_view?.getPointer(memScope).rawValue, wrap_mode.value)
    }
}

fun gtk_text_view_get_wrap_mode(text_view: CValuesRef<GtkTextView>?): GtkWrapMode {
    memScoped {
        return GtkWrapMode.byValue(kniBridge6538(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_set_editable(text_view: CValuesRef<GtkTextView>?, setting: gboolean): Unit {
    memScoped {
        return kniBridge6539(text_view?.getPointer(memScope).rawValue, setting)
    }
}

fun gtk_text_view_get_editable(text_view: CValuesRef<GtkTextView>?): gboolean {
    memScoped {
        return kniBridge6540(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_overwrite(text_view: CValuesRef<GtkTextView>?, overwrite: gboolean): Unit {
    memScoped {
        return kniBridge6541(text_view?.getPointer(memScope).rawValue, overwrite)
    }
}

fun gtk_text_view_get_overwrite(text_view: CValuesRef<GtkTextView>?): gboolean {
    memScoped {
        return kniBridge6542(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_accepts_tab(text_view: CValuesRef<GtkTextView>?, accepts_tab: gboolean): Unit {
    memScoped {
        return kniBridge6543(text_view?.getPointer(memScope).rawValue, accepts_tab)
    }
}

fun gtk_text_view_get_accepts_tab(text_view: CValuesRef<GtkTextView>?): gboolean {
    memScoped {
        return kniBridge6544(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_pixels_above_lines(text_view: CValuesRef<GtkTextView>?, pixels_above_lines: gint): Unit {
    memScoped {
        return kniBridge6545(text_view?.getPointer(memScope).rawValue, pixels_above_lines)
    }
}

fun gtk_text_view_get_pixels_above_lines(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6546(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_pixels_below_lines(text_view: CValuesRef<GtkTextView>?, pixels_below_lines: gint): Unit {
    memScoped {
        return kniBridge6547(text_view?.getPointer(memScope).rawValue, pixels_below_lines)
    }
}

fun gtk_text_view_get_pixels_below_lines(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6548(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_pixels_inside_wrap(text_view: CValuesRef<GtkTextView>?, pixels_inside_wrap: gint): Unit {
    memScoped {
        return kniBridge6549(text_view?.getPointer(memScope).rawValue, pixels_inside_wrap)
    }
}

fun gtk_text_view_get_pixels_inside_wrap(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6550(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_justification(text_view: CValuesRef<GtkTextView>?, justification: GtkJustification): Unit {
    memScoped {
        return kniBridge6551(text_view?.getPointer(memScope).rawValue, justification.value)
    }
}

fun gtk_text_view_get_justification(text_view: CValuesRef<GtkTextView>?): GtkJustification {
    memScoped {
        return GtkJustification.byValue(kniBridge6552(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_set_left_margin(text_view: CValuesRef<GtkTextView>?, left_margin: gint): Unit {
    memScoped {
        return kniBridge6553(text_view?.getPointer(memScope).rawValue, left_margin)
    }
}

fun gtk_text_view_get_left_margin(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6554(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_right_margin(text_view: CValuesRef<GtkTextView>?, right_margin: gint): Unit {
    memScoped {
        return kniBridge6555(text_view?.getPointer(memScope).rawValue, right_margin)
    }
}

fun gtk_text_view_get_right_margin(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6556(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_top_margin(text_view: CValuesRef<GtkTextView>?, top_margin: gint): Unit {
    memScoped {
        return kniBridge6557(text_view?.getPointer(memScope).rawValue, top_margin)
    }
}

fun gtk_text_view_get_top_margin(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6558(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_bottom_margin(text_view: CValuesRef<GtkTextView>?, bottom_margin: gint): Unit {
    memScoped {
        return kniBridge6559(text_view?.getPointer(memScope).rawValue, bottom_margin)
    }
}

fun gtk_text_view_get_bottom_margin(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6560(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_indent(text_view: CValuesRef<GtkTextView>?, indent: gint): Unit {
    memScoped {
        return kniBridge6561(text_view?.getPointer(memScope).rawValue, indent)
    }
}

fun gtk_text_view_get_indent(text_view: CValuesRef<GtkTextView>?): gint {
    memScoped {
        return kniBridge6562(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_tabs(text_view: CValuesRef<GtkTextView>?, tabs: CValuesRef<PangoTabArray>?): Unit {
    memScoped {
        return kniBridge6563(text_view?.getPointer(memScope).rawValue, tabs?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_get_tabs(text_view: CValuesRef<GtkTextView>?): CPointer<PangoTabArray>? {
    memScoped {
        return interpretCPointer<PangoTabArray>(kniBridge6564(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_get_default_attributes(text_view: CValuesRef<GtkTextView>?): CPointer<GtkTextAttributes>? {
    memScoped {
        return interpretCPointer<GtkTextAttributes>(kniBridge6565(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_set_input_purpose(text_view: CValuesRef<GtkTextView>?, purpose: GtkInputPurpose): Unit {
    memScoped {
        return kniBridge6566(text_view?.getPointer(memScope).rawValue, purpose.value)
    }
}

fun gtk_text_view_get_input_purpose(text_view: CValuesRef<GtkTextView>?): GtkInputPurpose {
    memScoped {
        return GtkInputPurpose.byValue(kniBridge6567(text_view?.getPointer(memScope).rawValue))
    }
}

fun gtk_text_view_set_input_hints(text_view: CValuesRef<GtkTextView>?, hints: GtkInputHints): Unit {
    memScoped {
        return kniBridge6568(text_view?.getPointer(memScope).rawValue, hints)
    }
}

fun gtk_text_view_get_input_hints(text_view: CValuesRef<GtkTextView>?): GtkInputHints {
    memScoped {
        return kniBridge6569(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_text_view_set_monospace(text_view: CValuesRef<GtkTextView>?, monospace: gboolean): Unit {
    memScoped {
        return kniBridge6570(text_view?.getPointer(memScope).rawValue, monospace)
    }
}

fun gtk_text_view_get_monospace(text_view: CValuesRef<GtkTextView>?): gboolean {
    memScoped {
        return kniBridge6571(text_view?.getPointer(memScope).rawValue)
    }
}

fun gtk_toolbar_get_type(): GType {
    return kniBridge6572()
}

fun gtk_toolbar_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6573())
}

fun gtk_toolbar_insert(toolbar: CValuesRef<GtkToolbar>?, item: CValuesRef<GtkToolItem>?, pos: gint): Unit {
    memScoped {
        return kniBridge6574(toolbar?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue, pos)
    }
}

fun gtk_toolbar_get_item_index(toolbar: CValuesRef<GtkToolbar>?, item: CValuesRef<GtkToolItem>?): gint {
    memScoped {
        return kniBridge6575(toolbar?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue)
    }
}

fun gtk_toolbar_get_n_items(toolbar: CValuesRef<GtkToolbar>?): gint {
    memScoped {
        return kniBridge6576(toolbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_toolbar_get_nth_item(toolbar: CValuesRef<GtkToolbar>?, n: gint): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6577(toolbar?.getPointer(memScope).rawValue, n))
    }
}

fun gtk_toolbar_get_show_arrow(toolbar: CValuesRef<GtkToolbar>?): gboolean {
    memScoped {
        return kniBridge6578(toolbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_toolbar_set_show_arrow(toolbar: CValuesRef<GtkToolbar>?, show_arrow: gboolean): Unit {
    memScoped {
        return kniBridge6579(toolbar?.getPointer(memScope).rawValue, show_arrow)
    }
}

fun gtk_toolbar_get_style(toolbar: CValuesRef<GtkToolbar>?): GtkToolbarStyle {
    memScoped {
        return GtkToolbarStyle.byValue(kniBridge6580(toolbar?.getPointer(memScope).rawValue))
    }
}

fun gtk_toolbar_set_style(toolbar: CValuesRef<GtkToolbar>?, style: GtkToolbarStyle): Unit {
    memScoped {
        return kniBridge6581(toolbar?.getPointer(memScope).rawValue, style.value)
    }
}

fun gtk_toolbar_unset_style(toolbar: CValuesRef<GtkToolbar>?): Unit {
    memScoped {
        return kniBridge6582(toolbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_toolbar_get_icon_size(toolbar: CValuesRef<GtkToolbar>?): GtkIconSize {
    memScoped {
        return GtkIconSize.byValue(kniBridge6583(toolbar?.getPointer(memScope).rawValue))
    }
}

fun gtk_toolbar_set_icon_size(toolbar: CValuesRef<GtkToolbar>?, icon_size: GtkIconSize): Unit {
    memScoped {
        return kniBridge6584(toolbar?.getPointer(memScope).rawValue, icon_size.value)
    }
}

fun gtk_toolbar_unset_icon_size(toolbar: CValuesRef<GtkToolbar>?): Unit {
    memScoped {
        return kniBridge6585(toolbar?.getPointer(memScope).rawValue)
    }
}

fun gtk_toolbar_get_relief_style(toolbar: CValuesRef<GtkToolbar>?): GtkReliefStyle {
    memScoped {
        return GtkReliefStyle.byValue(kniBridge6586(toolbar?.getPointer(memScope).rawValue))
    }
}

fun gtk_toolbar_get_drop_index(toolbar: CValuesRef<GtkToolbar>?, x: gint, y: gint): gint {
    memScoped {
        return kniBridge6587(toolbar?.getPointer(memScope).rawValue, x, y)
    }
}

fun gtk_toolbar_set_drop_highlight_item(toolbar: CValuesRef<GtkToolbar>?, tool_item: CValuesRef<GtkToolItem>?, index_: gint): Unit {
    memScoped {
        return kniBridge6588(toolbar?.getPointer(memScope).rawValue, tool_item?.getPointer(memScope).rawValue, index_)
    }
}

fun gtk_tool_item_group_get_type(): GType {
    return kniBridge6589()
}

fun gtk_tool_item_group_new(@CCall.CString label: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6590(label?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_group_set_label(group: CValuesRef<GtkToolItemGroup>?, @CCall.CString label: String?): Unit {
    memScoped {
        return kniBridge6591(group?.getPointer(memScope).rawValue, label?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_group_set_label_widget(group: CValuesRef<GtkToolItemGroup>?, label_widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge6592(group?.getPointer(memScope).rawValue, label_widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_group_set_collapsed(group: CValuesRef<GtkToolItemGroup>?, collapsed: gboolean): Unit {
    memScoped {
        return kniBridge6593(group?.getPointer(memScope).rawValue, collapsed)
    }
}

fun gtk_tool_item_group_set_ellipsize(group: CValuesRef<GtkToolItemGroup>?, ellipsize: PangoEllipsizeMode): Unit {
    memScoped {
        return kniBridge6594(group?.getPointer(memScope).rawValue, ellipsize.value)
    }
}

fun gtk_tool_item_group_set_header_relief(group: CValuesRef<GtkToolItemGroup>?, style: GtkReliefStyle): Unit {
    memScoped {
        return kniBridge6595(group?.getPointer(memScope).rawValue, style.value)
    }
}

fun gtk_tool_item_group_get_label(group: CValuesRef<GtkToolItemGroup>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6596(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_group_get_label_widget(group: CValuesRef<GtkToolItemGroup>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6597(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_group_get_collapsed(group: CValuesRef<GtkToolItemGroup>?): gboolean {
    memScoped {
        return kniBridge6598(group?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_group_get_ellipsize(group: CValuesRef<GtkToolItemGroup>?): PangoEllipsizeMode {
    memScoped {
        return PangoEllipsizeMode.byValue(kniBridge6599(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_group_get_header_relief(group: CValuesRef<GtkToolItemGroup>?): GtkReliefStyle {
    memScoped {
        return GtkReliefStyle.byValue(kniBridge6600(group?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_item_group_insert(group: CValuesRef<GtkToolItemGroup>?, item: CValuesRef<GtkToolItem>?, position: gint): Unit {
    memScoped {
        return kniBridge6601(group?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_tool_item_group_set_item_position(group: CValuesRef<GtkToolItemGroup>?, item: CValuesRef<GtkToolItem>?, position: gint): Unit {
    memScoped {
        return kniBridge6602(group?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_tool_item_group_get_item_position(group: CValuesRef<GtkToolItemGroup>?, item: CValuesRef<GtkToolItem>?): gint {
    memScoped {
        return kniBridge6603(group?.getPointer(memScope).rawValue, item?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_group_get_n_items(group: CValuesRef<GtkToolItemGroup>?): guint {
    memScoped {
        return kniBridge6604(group?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_item_group_get_nth_item(group: CValuesRef<GtkToolItemGroup>?, index: guint): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6605(group?.getPointer(memScope).rawValue, index))
    }
}

fun gtk_tool_item_group_get_drop_item(group: CValuesRef<GtkToolItemGroup>?, x: gint, y: gint): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6606(group?.getPointer(memScope).rawValue, x, y))
    }
}

fun gtk_tool_palette_get_type(): GType {
    return kniBridge6607()
}

fun gtk_tool_palette_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6608())
}

fun gtk_tool_palette_set_group_position(palette: CValuesRef<GtkToolPalette>?, group: CValuesRef<GtkToolItemGroup>?, position: gint): Unit {
    memScoped {
        return kniBridge6609(palette?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_tool_palette_set_exclusive(palette: CValuesRef<GtkToolPalette>?, group: CValuesRef<GtkToolItemGroup>?, exclusive: gboolean): Unit {
    memScoped {
        return kniBridge6610(palette?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, exclusive)
    }
}

fun gtk_tool_palette_set_expand(palette: CValuesRef<GtkToolPalette>?, group: CValuesRef<GtkToolItemGroup>?, expand: gboolean): Unit {
    memScoped {
        return kniBridge6611(palette?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue, expand)
    }
}

fun gtk_tool_palette_get_group_position(palette: CValuesRef<GtkToolPalette>?, group: CValuesRef<GtkToolItemGroup>?): gint {
    memScoped {
        return kniBridge6612(palette?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_palette_get_exclusive(palette: CValuesRef<GtkToolPalette>?, group: CValuesRef<GtkToolItemGroup>?): gboolean {
    memScoped {
        return kniBridge6613(palette?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_palette_get_expand(palette: CValuesRef<GtkToolPalette>?, group: CValuesRef<GtkToolItemGroup>?): gboolean {
    memScoped {
        return kniBridge6614(palette?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_palette_set_icon_size(palette: CValuesRef<GtkToolPalette>?, icon_size: GtkIconSize): Unit {
    memScoped {
        return kniBridge6615(palette?.getPointer(memScope).rawValue, icon_size.value)
    }
}

fun gtk_tool_palette_unset_icon_size(palette: CValuesRef<GtkToolPalette>?): Unit {
    memScoped {
        return kniBridge6616(palette?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_palette_set_style(palette: CValuesRef<GtkToolPalette>?, style: GtkToolbarStyle): Unit {
    memScoped {
        return kniBridge6617(palette?.getPointer(memScope).rawValue, style.value)
    }
}

fun gtk_tool_palette_unset_style(palette: CValuesRef<GtkToolPalette>?): Unit {
    memScoped {
        return kniBridge6618(palette?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_palette_get_icon_size(palette: CValuesRef<GtkToolPalette>?): GtkIconSize {
    memScoped {
        return GtkIconSize.byValue(kniBridge6619(palette?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_palette_get_style(palette: CValuesRef<GtkToolPalette>?): GtkToolbarStyle {
    memScoped {
        return GtkToolbarStyle.byValue(kniBridge6620(palette?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_palette_get_drop_item(palette: CValuesRef<GtkToolPalette>?, x: gint, y: gint): CPointer<GtkToolItem>? {
    memScoped {
        return interpretCPointer<GtkToolItem>(kniBridge6621(palette?.getPointer(memScope).rawValue, x, y))
    }
}

fun gtk_tool_palette_get_drop_group(palette: CValuesRef<GtkToolPalette>?, x: gint, y: gint): CPointer<GtkToolItemGroup>? {
    memScoped {
        return interpretCPointer<GtkToolItemGroup>(kniBridge6622(palette?.getPointer(memScope).rawValue, x, y))
    }
}

fun gtk_tool_palette_get_drag_item(palette: CValuesRef<GtkToolPalette>?, selection: CValuesRef<GtkSelectionData>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6623(palette?.getPointer(memScope).rawValue, selection?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_palette_set_drag_source(palette: CValuesRef<GtkToolPalette>?, targets: GtkToolPaletteDragTargets): Unit {
    memScoped {
        return kniBridge6624(palette?.getPointer(memScope).rawValue, targets)
    }
}

fun gtk_tool_palette_add_drag_dest(palette: CValuesRef<GtkToolPalette>?, widget: CValuesRef<GtkWidget>?, flags: GtkDestDefaults, targets: GtkToolPaletteDragTargets, actions: GdkDragAction): Unit {
    memScoped {
        return kniBridge6625(palette?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue, flags, targets, actions)
    }
}

fun gtk_tool_palette_get_hadjustment(palette: CValuesRef<GtkToolPalette>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6626(palette?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_palette_get_vadjustment(palette: CValuesRef<GtkToolPalette>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6627(palette?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_palette_get_drag_target_item(): CPointer<GtkTargetEntry>? {
    return interpretCPointer<GtkTargetEntry>(kniBridge6628())
}

fun gtk_tool_palette_get_drag_target_group(): CPointer<GtkTargetEntry>? {
    return interpretCPointer<GtkTargetEntry>(kniBridge6629())
}

fun gtk_tool_shell_get_type(): GType {
    return kniBridge6630()
}

fun gtk_tool_shell_get_icon_size(shell: CValuesRef<GtkToolShell>?): GtkIconSize {
    memScoped {
        return GtkIconSize.byValue(kniBridge6631(shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_shell_get_orientation(shell: CValuesRef<GtkToolShell>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge6632(shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_shell_get_style(shell: CValuesRef<GtkToolShell>?): GtkToolbarStyle {
    memScoped {
        return GtkToolbarStyle.byValue(kniBridge6633(shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_shell_get_relief_style(shell: CValuesRef<GtkToolShell>?): GtkReliefStyle {
    memScoped {
        return GtkReliefStyle.byValue(kniBridge6634(shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_shell_rebuild_menu(shell: CValuesRef<GtkToolShell>?): Unit {
    memScoped {
        return kniBridge6635(shell?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_shell_get_text_orientation(shell: CValuesRef<GtkToolShell>?): GtkOrientation {
    memScoped {
        return GtkOrientation.byValue(kniBridge6636(shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_shell_get_text_alignment(shell: CValuesRef<GtkToolShell>?): gfloat {
    memScoped {
        return kniBridge6637(shell?.getPointer(memScope).rawValue)
    }
}

fun gtk_tool_shell_get_ellipsize_mode(shell: CValuesRef<GtkToolShell>?): PangoEllipsizeMode {
    memScoped {
        return PangoEllipsizeMode.byValue(kniBridge6638(shell?.getPointer(memScope).rawValue))
    }
}

fun gtk_tool_shell_get_text_size_group(shell: CValuesRef<GtkToolShell>?): CPointer<GtkSizeGroup>? {
    memScoped {
        return interpretCPointer<GtkSizeGroup>(kniBridge6639(shell?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk372")
external fun gtk_test_init(argcp: CValuesRef<IntVar>?, argvp: CValuesRef<CPointerVar<CPointerVar<ByteVar>>>?, vararg variadicArguments: Any?): Unit

fun gtk_test_register_all_types(): Unit {
    return kniBridge6640()
}

fun gtk_test_list_all_types(n_types: CValuesRef<guintVar>?): CPointer<GTypeVar>? {
    memScoped {
        return interpretCPointer<GTypeVar>(kniBridge6641(n_types?.getPointer(memScope).rawValue))
    }
}

fun gtk_test_find_widget(widget: CValuesRef<GtkWidget>?, @CCall.CString label_pattern: String?, widget_type: GType): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6642(widget?.getPointer(memScope).rawValue, label_pattern?.cstr?.getPointer(memScope).rawValue, widget_type))
    }
}

@CCall("knifunptr_libgtk373")
external fun gtk_test_create_widget(widget_type: GType, @CCall.CString first_property_name: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_test_create_simple_window(@CCall.CString window_title: String?, @CCall.CString dialog_text: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6643(window_title?.cstr?.getPointer(memScope).rawValue, dialog_text?.cstr?.getPointer(memScope).rawValue))
    }
}

@CCall("knifunptr_libgtk374")
external fun gtk_test_display_button_window(@CCall.CString window_title: String?, @CCall.CString dialog_text: String?, vararg variadicArguments: Any?): CPointer<GtkWidget>?

fun gtk_test_slider_set_perc(widget: CValuesRef<GtkWidget>?, percentage: Double): Unit {
    memScoped {
        return kniBridge6644(widget?.getPointer(memScope).rawValue, percentage)
    }
}

fun gtk_test_slider_get_value(widget: CValuesRef<GtkWidget>?): Double {
    memScoped {
        return kniBridge6645(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_test_spin_button_click(spinner: CValuesRef<GtkSpinButton>?, button: guint, upwards: gboolean): gboolean {
    memScoped {
        return kniBridge6646(spinner?.getPointer(memScope).rawValue, button, upwards)
    }
}

fun gtk_test_widget_wait_for_draw(widget: CValuesRef<GtkWidget>?): Unit {
    memScoped {
        return kniBridge6647(widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_test_widget_click(widget: CValuesRef<GtkWidget>?, button: guint, modifiers: GdkModifierType): gboolean {
    memScoped {
        return kniBridge6648(widget?.getPointer(memScope).rawValue, button, modifiers)
    }
}

fun gtk_test_widget_send_key(widget: CValuesRef<GtkWidget>?, keyval: guint, modifiers: GdkModifierType): gboolean {
    memScoped {
        return kniBridge6649(widget?.getPointer(memScope).rawValue, keyval, modifiers)
    }
}

fun gtk_test_text_set(widget: CValuesRef<GtkWidget>?, @CCall.CString string: String?): Unit {
    memScoped {
        return kniBridge6650(widget?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_test_text_get(widget: CValuesRef<GtkWidget>?): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6651(widget?.getPointer(memScope).rawValue))
    }
}

fun gtk_test_find_sibling(base_widget: CValuesRef<GtkWidget>?, widget_type: GType): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6652(base_widget?.getPointer(memScope).rawValue, widget_type))
    }
}

fun gtk_test_find_label(widget: CValuesRef<GtkWidget>?, @CCall.CString label_pattern: String?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6653(widget?.getPointer(memScope).rawValue, label_pattern?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_drag_source_get_type(): GType {
    return kniBridge6654()
}

fun gtk_tree_drag_source_row_draggable(drag_source: CValuesRef<GtkTreeDragSource>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge6655(drag_source?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_drag_source_drag_data_delete(drag_source: CValuesRef<GtkTreeDragSource>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge6656(drag_source?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_drag_source_drag_data_get(drag_source: CValuesRef<GtkTreeDragSource>?, path: CValuesRef<GtkTreePath>?, selection_data: CValuesRef<GtkSelectionData>?): gboolean {
    memScoped {
        return kniBridge6657(drag_source?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue, selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_drag_dest_get_type(): GType {
    return kniBridge6658()
}

fun gtk_tree_drag_dest_drag_data_received(drag_dest: CValuesRef<GtkTreeDragDest>?, dest: CValuesRef<GtkTreePath>?, selection_data: CValuesRef<GtkSelectionData>?): gboolean {
    memScoped {
        return kniBridge6659(drag_dest?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue, selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_drag_dest_row_drop_possible(drag_dest: CValuesRef<GtkTreeDragDest>?, dest_path: CValuesRef<GtkTreePath>?, selection_data: CValuesRef<GtkSelectionData>?): gboolean {
    memScoped {
        return kniBridge6660(drag_dest?.getPointer(memScope).rawValue, dest_path?.getPointer(memScope).rawValue, selection_data?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_set_row_drag_data(selection_data: CValuesRef<GtkSelectionData>?, tree_model: CValuesRef<GtkTreeModel>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge6661(selection_data?.getPointer(memScope).rawValue, tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_get_row_drag_data(selection_data: CValuesRef<GtkSelectionData>?, tree_model: CValuesRef<CPointerVar<GtkTreeModel>>?, path: CValuesRef<CPointerVar<GtkTreePath>>?): gboolean {
    memScoped {
        return kniBridge6662(selection_data?.getPointer(memScope).rawValue, tree_model?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_sort_get_type(): GType {
    return kniBridge6663()
}

fun gtk_tree_model_sort_new_with_model(child_model: CValuesRef<GtkTreeModel>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge6664(child_model?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_sort_get_model(tree_model: CValuesRef<GtkTreeModelSort>?): CPointer<GtkTreeModel>? {
    memScoped {
        return interpretCPointer<GtkTreeModel>(kniBridge6665(tree_model?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort: CValuesRef<GtkTreeModelSort>?, child_path: CValuesRef<GtkTreePath>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge6666(tree_model_sort?.getPointer(memScope).rawValue, child_path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort: CValuesRef<GtkTreeModelSort>?, sort_iter: CValuesRef<GtkTreeIter>?, child_iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6667(tree_model_sort?.getPointer(memScope).rawValue, sort_iter?.getPointer(memScope).rawValue, child_iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort: CValuesRef<GtkTreeModelSort>?, sorted_path: CValuesRef<GtkTreePath>?): CPointer<GtkTreePath>? {
    memScoped {
        return interpretCPointer<GtkTreePath>(kniBridge6668(tree_model_sort?.getPointer(memScope).rawValue, sorted_path?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort: CValuesRef<GtkTreeModelSort>?, child_iter: CValuesRef<GtkTreeIter>?, sorted_iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6669(tree_model_sort?.getPointer(memScope).rawValue, child_iter?.getPointer(memScope).rawValue, sorted_iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_sort_reset_default_sort_func(tree_model_sort: CValuesRef<GtkTreeModelSort>?): Unit {
    memScoped {
        return kniBridge6670(tree_model_sort?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_sort_clear_cache(tree_model_sort: CValuesRef<GtkTreeModelSort>?): Unit {
    memScoped {
        return kniBridge6671(tree_model_sort?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_model_sort_iter_is_valid(tree_model_sort: CValuesRef<GtkTreeModelSort>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6672(tree_model_sort?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_get_type(): GType {
    return kniBridge6673()
}

fun gtk_tree_selection_set_mode(selection: CValuesRef<GtkTreeSelection>?, type: GtkSelectionMode): Unit {
    memScoped {
        return kniBridge6674(selection?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_tree_selection_get_mode(selection: CValuesRef<GtkTreeSelection>?): GtkSelectionMode {
    memScoped {
        return GtkSelectionMode.byValue(kniBridge6675(selection?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_selection_set_select_function(selection: CValuesRef<GtkTreeSelection>?, func: GtkTreeSelectionFunc?, data: gpointer?, destroy: GDestroyNotify?): Unit {
    memScoped {
        return kniBridge6676(selection?.getPointer(memScope).rawValue, func.rawValue, data.rawValue, destroy.rawValue)
    }
}

fun gtk_tree_selection_get_user_data(selection: CValuesRef<GtkTreeSelection>?): gpointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge6677(selection?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_selection_get_tree_view(selection: CValuesRef<GtkTreeSelection>?): CPointer<GtkTreeView>? {
    memScoped {
        return interpretCPointer<GtkTreeView>(kniBridge6678(selection?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_selection_get_select_function(selection: CValuesRef<GtkTreeSelection>?): GtkTreeSelectionFunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<GtkTreeSelection>?, CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, gboolean, gpointer?) -> gboolean>>(kniBridge6679(selection?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_selection_get_selected(selection: CValuesRef<GtkTreeSelection>?, model: CValuesRef<CPointerVar<GtkTreeModel>>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6680(selection?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_get_selected_rows(selection: CValuesRef<GtkTreeSelection>?, model: CValuesRef<CPointerVar<GtkTreeModel>>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge6681(selection?.getPointer(memScope).rawValue, model?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_selection_count_selected_rows(selection: CValuesRef<GtkTreeSelection>?): gint {
    memScoped {
        return kniBridge6682(selection?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_selected_foreach(selection: CValuesRef<GtkTreeSelection>?, func: GtkTreeSelectionForeachFunc?, data: gpointer?): Unit {
    memScoped {
        return kniBridge6683(selection?.getPointer(memScope).rawValue, func.rawValue, data.rawValue)
    }
}

fun gtk_tree_selection_select_path(selection: CValuesRef<GtkTreeSelection>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge6684(selection?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_unselect_path(selection: CValuesRef<GtkTreeSelection>?, path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge6685(selection?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_select_iter(selection: CValuesRef<GtkTreeSelection>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6686(selection?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_unselect_iter(selection: CValuesRef<GtkTreeSelection>?, iter: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6687(selection?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_path_is_selected(selection: CValuesRef<GtkTreeSelection>?, path: CValuesRef<GtkTreePath>?): gboolean {
    memScoped {
        return kniBridge6688(selection?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_iter_is_selected(selection: CValuesRef<GtkTreeSelection>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6689(selection?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_select_all(selection: CValuesRef<GtkTreeSelection>?): Unit {
    memScoped {
        return kniBridge6690(selection?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_unselect_all(selection: CValuesRef<GtkTreeSelection>?): Unit {
    memScoped {
        return kniBridge6691(selection?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_select_range(selection: CValuesRef<GtkTreeSelection>?, start_path: CValuesRef<GtkTreePath>?, end_path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge6692(selection?.getPointer(memScope).rawValue, start_path?.getPointer(memScope).rawValue, end_path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_selection_unselect_range(selection: CValuesRef<GtkTreeSelection>?, start_path: CValuesRef<GtkTreePath>?, end_path: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge6693(selection?.getPointer(memScope).rawValue, start_path?.getPointer(memScope).rawValue, end_path?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_get_type(): GType {
    return kniBridge6694()
}

@CCall("knifunptr_libgtk375")
external fun gtk_tree_store_new(n_columns: gint, vararg variadicArguments: Any?): CPointer<GtkTreeStore>?

fun gtk_tree_store_newv(n_columns: gint, types: CValuesRef<GTypeVar>?): CPointer<GtkTreeStore>? {
    memScoped {
        return interpretCPointer<GtkTreeStore>(kniBridge6695(n_columns, types?.getPointer(memScope).rawValue))
    }
}

fun gtk_tree_store_set_column_types(tree_store: CValuesRef<GtkTreeStore>?, n_columns: gint, types: CValuesRef<GTypeVar>?): Unit {
    memScoped {
        return kniBridge6696(tree_store?.getPointer(memScope).rawValue, n_columns, types?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_set_value(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, column: gint, value: CValuesRef<GValue>?): Unit {
    memScoped {
        return kniBridge6697(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, column, value?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk376")
external fun gtk_tree_store_set(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, vararg variadicArguments: Any?): Unit

fun gtk_tree_store_set_valuesv(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, columns: CValuesRef<gintVar>?, values: CValuesRef<GValue>?, n_values: gint): Unit {
    memScoped {
        return kniBridge6698(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, columns?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue, n_values)
    }
}

fun gtk_tree_store_set_valist(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, var_args: va_list?): Unit {
    memScoped {
        return kniBridge6699(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, var_args.rawValue)
    }
}

fun gtk_tree_store_remove(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6700(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_insert(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?, position: gint): Unit {
    memScoped {
        return kniBridge6701(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, position)
    }
}

fun gtk_tree_store_insert_before(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?, sibling: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6702(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_insert_after(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?, sibling: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6703(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, sibling?.getPointer(memScope).rawValue)
    }
}

@CCall("knifunptr_libgtk377")
external fun gtk_tree_store_insert_with_values(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?, position: gint, vararg variadicArguments: Any?): Unit

fun gtk_tree_store_insert_with_valuesv(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?, position: gint, columns: CValuesRef<gintVar>?, values: CValuesRef<GValue>?, n_values: gint): Unit {
    memScoped {
        return kniBridge6704(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, position, columns?.getPointer(memScope).rawValue, values?.getPointer(memScope).rawValue, n_values)
    }
}

fun gtk_tree_store_prepend(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6705(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_append(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, parent: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6706(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_is_ancestor(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, descendant: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6707(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, descendant?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_iter_depth(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?): gint {
    memScoped {
        return kniBridge6708(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_clear(tree_store: CValuesRef<GtkTreeStore>?): Unit {
    memScoped {
        return kniBridge6709(tree_store?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_iter_is_valid(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?): gboolean {
    memScoped {
        return kniBridge6710(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_reorder(tree_store: CValuesRef<GtkTreeStore>?, parent: CValuesRef<GtkTreeIter>?, new_order: CValuesRef<gintVar>?): Unit {
    memScoped {
        return kniBridge6711(tree_store?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue, new_order?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_swap(tree_store: CValuesRef<GtkTreeStore>?, a: CValuesRef<GtkTreeIter>?, b: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6712(tree_store?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_move_before(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, position: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6713(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, position?.getPointer(memScope).rawValue)
    }
}

fun gtk_tree_store_move_after(tree_store: CValuesRef<GtkTreeStore>?, iter: CValuesRef<GtkTreeIter>?, position: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge6714(tree_store?.getPointer(memScope).rawValue, iter?.getPointer(memScope).rawValue, position?.getPointer(memScope).rawValue)
    }
}

fun gtk_rc_flags_get_type(): GType {
    return kniBridge6715()
}

fun gtk_rc_token_type_get_type(): GType {
    return kniBridge6716()
}

fun gtk_path_priority_type_get_type(): GType {
    return kniBridge6717()
}

fun gtk_path_type_get_type(): GType {
    return kniBridge6718()
}

fun gtk_expander_style_get_type(): GType {
    return kniBridge6719()
}

fun gtk_attach_options_get_type(): GType {
    return kniBridge6720()
}

fun gtk_ui_manager_item_type_get_type(): GType {
    return kniBridge6721()
}

fun gtk_license_get_type(): GType {
    return kniBridge6722()
}

fun gtk_accel_flags_get_type(): GType {
    return kniBridge6723()
}

fun gtk_application_inhibit_flags_get_type(): GType {
    return kniBridge6724()
}

fun gtk_assistant_page_type_get_type(): GType {
    return kniBridge6725()
}

fun gtk_button_box_style_get_type(): GType {
    return kniBridge6726()
}

fun gtk_builder_error_get_type(): GType {
    return kniBridge6727()
}

fun gtk_calendar_display_options_get_type(): GType {
    return kniBridge6728()
}

fun gtk_cell_renderer_state_get_type(): GType {
    return kniBridge6729()
}

fun gtk_cell_renderer_mode_get_type(): GType {
    return kniBridge6730()
}

fun gtk_cell_renderer_accel_mode_get_type(): GType {
    return kniBridge6731()
}

fun gtk_resize_mode_get_type(): GType {
    return kniBridge6732()
}

fun gtk_css_provider_error_get_type(): GType {
    return kniBridge6733()
}

fun gtk_css_section_type_get_type(): GType {
    return kniBridge6734()
}

fun gtk_debug_flag_get_type(): GType {
    return kniBridge6735()
}

fun gtk_dialog_flags_get_type(): GType {
    return kniBridge6736()
}

fun gtk_response_type_get_type(): GType {
    return kniBridge6737()
}

fun gtk_dest_defaults_get_type(): GType {
    return kniBridge6738()
}

fun gtk_entry_icon_position_get_type(): GType {
    return kniBridge6739()
}

fun gtk_align_get_type(): GType {
    return kniBridge6740()
}

fun gtk_arrow_type_get_type(): GType {
    return kniBridge6741()
}

fun gtk_baseline_position_get_type(): GType {
    return kniBridge6742()
}

fun gtk_delete_type_get_type(): GType {
    return kniBridge6743()
}

fun gtk_direction_type_get_type(): GType {
    return kniBridge6744()
}

fun gtk_icon_size_get_type(): GType {
    return kniBridge6745()
}

fun gtk_sensitivity_type_get_type(): GType {
    return kniBridge6746()
}

fun gtk_text_direction_get_type(): GType {
    return kniBridge6747()
}

fun gtk_justification_get_type(): GType {
    return kniBridge6748()
}

fun gtk_menu_direction_type_get_type(): GType {
    return kniBridge6749()
}

fun gtk_message_type_get_type(): GType {
    return kniBridge6750()
}

fun gtk_movement_step_get_type(): GType {
    return kniBridge6751()
}

fun gtk_scroll_step_get_type(): GType {
    return kniBridge6752()
}

fun gtk_orientation_get_type(): GType {
    return kniBridge6753()
}

fun gtk_pack_type_get_type(): GType {
    return kniBridge6754()
}

fun gtk_position_type_get_type(): GType {
    return kniBridge6755()
}

fun gtk_relief_style_get_type(): GType {
    return kniBridge6756()
}

fun gtk_scroll_type_get_type(): GType {
    return kniBridge6757()
}

fun gtk_selection_mode_get_type(): GType {
    return kniBridge6758()
}

fun gtk_shadow_type_get_type(): GType {
    return kniBridge6759()
}

fun gtk_state_type_get_type(): GType {
    return kniBridge6760()
}

fun gtk_toolbar_style_get_type(): GType {
    return kniBridge6761()
}

fun gtk_wrap_mode_get_type(): GType {
    return kniBridge6762()
}

fun gtk_sort_type_get_type(): GType {
    return kniBridge6763()
}

fun gtk_im_preedit_style_get_type(): GType {
    return kniBridge6764()
}

fun gtk_im_status_style_get_type(): GType {
    return kniBridge6765()
}

fun gtk_pack_direction_get_type(): GType {
    return kniBridge6766()
}

fun gtk_print_pages_get_type(): GType {
    return kniBridge6767()
}

fun gtk_page_set_get_type(): GType {
    return kniBridge6768()
}

fun gtk_number_up_layout_get_type(): GType {
    return kniBridge6769()
}

fun gtk_page_orientation_get_type(): GType {
    return kniBridge6770()
}

fun gtk_print_quality_get_type(): GType {
    return kniBridge6771()
}

fun gtk_print_duplex_get_type(): GType {
    return kniBridge6772()
}

fun gtk_unit_get_type(): GType {
    return kniBridge6773()
}

fun gtk_tree_view_grid_lines_get_type(): GType {
    return kniBridge6774()
}

fun gtk_drag_result_get_type(): GType {
    return kniBridge6775()
}

fun gtk_size_group_mode_get_type(): GType {
    return kniBridge6776()
}

fun gtk_size_request_mode_get_type(): GType {
    return kniBridge6777()
}

fun gtk_scrollable_policy_get_type(): GType {
    return kniBridge6778()
}

fun gtk_state_flags_get_type(): GType {
    return kniBridge6779()
}

fun gtk_region_flags_get_type(): GType {
    return kniBridge6780()
}

fun gtk_junction_sides_get_type(): GType {
    return kniBridge6781()
}

fun gtk_border_style_get_type(): GType {
    return kniBridge6782()
}

fun gtk_level_bar_mode_get_type(): GType {
    return kniBridge6783()
}

fun gtk_input_purpose_get_type(): GType {
    return kniBridge6784()
}

fun gtk_input_hints_get_type(): GType {
    return kniBridge6785()
}

fun gtk_propagation_phase_get_type(): GType {
    return kniBridge6786()
}

fun gtk_event_sequence_state_get_type(): GType {
    return kniBridge6787()
}

fun gtk_pan_direction_get_type(): GType {
    return kniBridge6788()
}

fun gtk_popover_constraint_get_type(): GType {
    return kniBridge6789()
}

fun gtk_event_controller_scroll_flags_get_type(): GType {
    return kniBridge6790()
}

fun gtk_file_chooser_action_get_type(): GType {
    return kniBridge6791()
}

fun gtk_file_chooser_confirmation_get_type(): GType {
    return kniBridge6792()
}

fun gtk_file_chooser_error_get_type(): GType {
    return kniBridge6793()
}

fun gtk_file_filter_flags_get_type(): GType {
    return kniBridge6794()
}

fun gtk_font_chooser_level_get_type(): GType {
    return kniBridge6795()
}

fun gtk_icon_lookup_flags_get_type(): GType {
    return kniBridge6796()
}

fun gtk_icon_theme_error_get_type(): GType {
    return kniBridge6797()
}

fun gtk_icon_view_drop_position_get_type(): GType {
    return kniBridge6798()
}

fun gtk_image_type_get_type(): GType {
    return kniBridge6799()
}

fun gtk_arrow_placement_get_type(): GType {
    return kniBridge6800()
}

fun gtk_buttons_type_get_type(): GType {
    return kniBridge6801()
}

fun gtk_button_role_get_type(): GType {
    return kniBridge6802()
}

fun gtk_notebook_tab_get_type(): GType {
    return kniBridge6803()
}

fun gtk_pad_action_type_get_type(): GType {
    return kniBridge6804()
}

fun gtk_places_open_flags_get_type(): GType {
    return kniBridge6805()
}

fun gtk_print_status_get_type(): GType {
    return kniBridge6806()
}

fun gtk_print_operation_result_get_type(): GType {
    return kniBridge6807()
}

fun gtk_print_operation_action_get_type(): GType {
    return kniBridge6808()
}

fun gtk_print_error_get_type(): GType {
    return kniBridge6809()
}

fun gtk_recent_sort_type_get_type(): GType {
    return kniBridge6810()
}

fun gtk_recent_chooser_error_get_type(): GType {
    return kniBridge6811()
}

fun gtk_recent_filter_flags_get_type(): GType {
    return kniBridge6812()
}

fun gtk_recent_manager_error_get_type(): GType {
    return kniBridge6813()
}

fun gtk_revealer_transition_type_get_type(): GType {
    return kniBridge6814()
}

fun gtk_corner_type_get_type(): GType {
    return kniBridge6815()
}

fun gtk_policy_type_get_type(): GType {
    return kniBridge6816()
}

fun gtk_target_flags_get_type(): GType {
    return kniBridge6817()
}

fun gtk_shortcut_type_get_type(): GType {
    return kniBridge6818()
}

fun gtk_spin_button_update_policy_get_type(): GType {
    return kniBridge6819()
}

fun gtk_spin_type_get_type(): GType {
    return kniBridge6820()
}

fun gtk_stack_transition_type_get_type(): GType {
    return kniBridge6821()
}

fun gtk_style_context_print_flags_get_type(): GType {
    return kniBridge6822()
}

fun gtk_text_buffer_target_info_get_type(): GType {
    return kniBridge6823()
}

fun gtk_text_search_flags_get_type(): GType {
    return kniBridge6824()
}

fun gtk_text_window_type_get_type(): GType {
    return kniBridge6825()
}

fun gtk_text_view_layer_get_type(): GType {
    return kniBridge6826()
}

fun gtk_text_extend_selection_get_type(): GType {
    return kniBridge6827()
}

fun gtk_toolbar_space_style_get_type(): GType {
    return kniBridge6828()
}

fun gtk_tool_palette_drag_targets_get_type(): GType {
    return kniBridge6829()
}

fun gtk_tree_model_flags_get_type(): GType {
    return kniBridge6830()
}

fun gtk_tree_view_drop_position_get_type(): GType {
    return kniBridge6831()
}

fun gtk_tree_view_column_sizing_get_type(): GType {
    return kniBridge6832()
}

fun gtk_widget_help_type_get_type(): GType {
    return kniBridge6833()
}

fun gtk_window_type_get_type(): GType {
    return kniBridge6834()
}

fun gtk_window_position_get_type(): GType {
    return kniBridge6835()
}

fun gtk_viewport_get_type(): GType {
    return kniBridge6836()
}

fun gtk_viewport_new(hadjustment: CValuesRef<GtkAdjustment>?, vadjustment: CValuesRef<GtkAdjustment>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6837(hadjustment?.getPointer(memScope).rawValue, vadjustment?.getPointer(memScope).rawValue))
    }
}

fun gtk_viewport_get_hadjustment(viewport: CValuesRef<GtkViewport>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6838(viewport?.getPointer(memScope).rawValue))
    }
}

fun gtk_viewport_get_vadjustment(viewport: CValuesRef<GtkViewport>?): CPointer<GtkAdjustment>? {
    memScoped {
        return interpretCPointer<GtkAdjustment>(kniBridge6839(viewport?.getPointer(memScope).rawValue))
    }
}

fun gtk_viewport_set_hadjustment(viewport: CValuesRef<GtkViewport>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6840(viewport?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_viewport_set_vadjustment(viewport: CValuesRef<GtkViewport>?, adjustment: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6841(viewport?.getPointer(memScope).rawValue, adjustment?.getPointer(memScope).rawValue)
    }
}

fun gtk_viewport_set_shadow_type(viewport: CValuesRef<GtkViewport>?, type: GtkShadowType): Unit {
    memScoped {
        return kniBridge6842(viewport?.getPointer(memScope).rawValue, type.value)
    }
}

fun gtk_viewport_get_shadow_type(viewport: CValuesRef<GtkViewport>?): GtkShadowType {
    memScoped {
        return GtkShadowType.byValue(kniBridge6843(viewport?.getPointer(memScope).rawValue))
    }
}

fun gtk_viewport_get_bin_window(viewport: CValuesRef<GtkViewport>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge6844(viewport?.getPointer(memScope).rawValue))
    }
}

fun gtk_viewport_get_view_window(viewport: CValuesRef<GtkViewport>?): CPointer<GdkWindow>? {
    memScoped {
        return interpretCPointer<GdkWindow>(kniBridge6845(viewport?.getPointer(memScope).rawValue))
    }
}

fun gtk_volume_button_get_type(): GType {
    return kniBridge6846()
}

fun gtk_volume_button_new(): CPointer<GtkWidget>? {
    return interpretCPointer<GtkWidget>(kniBridge6847())
}

fun gtk_widget_path_get_type(): GType {
    return kniBridge6848()
}

fun gtk_widget_path_new(): CPointer<GtkWidgetPath>? {
    return interpretCPointer<GtkWidgetPath>(kniBridge6849())
}

fun gtk_widget_path_copy(path: CValuesRef<GtkWidgetPath>?): CPointer<GtkWidgetPath>? {
    memScoped {
        return interpretCPointer<GtkWidgetPath>(kniBridge6850(path?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_path_ref(path: CValuesRef<GtkWidgetPath>?): CPointer<GtkWidgetPath>? {
    memScoped {
        return interpretCPointer<GtkWidgetPath>(kniBridge6851(path?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_path_unref(path: CValuesRef<GtkWidgetPath>?): Unit {
    memScoped {
        return kniBridge6852(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_free(path: CValuesRef<GtkWidgetPath>?): Unit {
    memScoped {
        return kniBridge6853(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_to_string(path: CValuesRef<GtkWidgetPath>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge6854(path?.getPointer(memScope).rawValue))
    }
}

fun gtk_widget_path_length(path: CValuesRef<GtkWidgetPath>?): gint {
    memScoped {
        return kniBridge6855(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_append_type(path: CValuesRef<GtkWidgetPath>?, type: GType): gint {
    memScoped {
        return kniBridge6856(path?.getPointer(memScope).rawValue, type)
    }
}

fun gtk_widget_path_prepend_type(path: CValuesRef<GtkWidgetPath>?, type: GType): Unit {
    memScoped {
        return kniBridge6857(path?.getPointer(memScope).rawValue, type)
    }
}

fun gtk_widget_path_append_with_siblings(path: CValuesRef<GtkWidgetPath>?, siblings: CValuesRef<GtkWidgetPath>?, sibling_index: guint): gint {
    memScoped {
        return kniBridge6858(path?.getPointer(memScope).rawValue, siblings?.getPointer(memScope).rawValue, sibling_index)
    }
}

fun gtk_widget_path_append_for_widget(path: CValuesRef<GtkWidgetPath>?, widget: CValuesRef<GtkWidget>?): gint {
    memScoped {
        return kniBridge6859(path?.getPointer(memScope).rawValue, widget?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_get_object_type(path: CValuesRef<GtkWidgetPath>?, pos: gint): GType {
    memScoped {
        return kniBridge6860(path?.getPointer(memScope).rawValue, pos)
    }
}

fun gtk_widget_path_iter_set_object_type(path: CValuesRef<GtkWidgetPath>?, pos: gint, type: GType): Unit {
    memScoped {
        return kniBridge6861(path?.getPointer(memScope).rawValue, pos, type)
    }
}

fun gtk_widget_path_iter_get_object_name(path: CValuesRef<GtkWidgetPath>?, pos: gint): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge6862(path?.getPointer(memScope).rawValue, pos))
    }
}

fun gtk_widget_path_iter_set_object_name(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6863(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_get_siblings(path: CValuesRef<GtkWidgetPath>?, pos: gint): CPointer<GtkWidgetPath>? {
    memScoped {
        return interpretCPointer<GtkWidgetPath>(kniBridge6864(path?.getPointer(memScope).rawValue, pos))
    }
}

fun gtk_widget_path_iter_get_sibling_index(path: CValuesRef<GtkWidgetPath>?, pos: gint): guint {
    memScoped {
        return kniBridge6865(path?.getPointer(memScope).rawValue, pos)
    }
}

fun gtk_widget_path_iter_get_name(path: CValuesRef<GtkWidgetPath>?, pos: gint): CPointer<gcharVar>? {
    memScoped {
        return interpretCPointer<gcharVar>(kniBridge6866(path?.getPointer(memScope).rawValue, pos))
    }
}

fun gtk_widget_path_iter_set_name(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6867(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_has_name(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): gboolean {
    memScoped {
        return kniBridge6868(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_has_qname(path: CValuesRef<GtkWidgetPath>?, pos: gint, qname: GQuark): gboolean {
    memScoped {
        return kniBridge6869(path?.getPointer(memScope).rawValue, pos, qname)
    }
}

fun gtk_widget_path_iter_get_state(path: CValuesRef<GtkWidgetPath>?, pos: gint): GtkStateFlags {
    memScoped {
        return kniBridge6870(path?.getPointer(memScope).rawValue, pos)
    }
}

fun gtk_widget_path_iter_set_state(path: CValuesRef<GtkWidgetPath>?, pos: gint, state: GtkStateFlags): Unit {
    memScoped {
        return kniBridge6871(path?.getPointer(memScope).rawValue, pos, state)
    }
}

fun gtk_widget_path_iter_add_class(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6872(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_remove_class(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6873(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_clear_classes(path: CValuesRef<GtkWidgetPath>?, pos: gint): Unit {
    memScoped {
        return kniBridge6874(path?.getPointer(memScope).rawValue, pos)
    }
}

fun gtk_widget_path_iter_list_classes(path: CValuesRef<GtkWidgetPath>?, pos: gint): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge6875(path?.getPointer(memScope).rawValue, pos))
    }
}

fun gtk_widget_path_iter_has_class(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): gboolean {
    memScoped {
        return kniBridge6876(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_has_qclass(path: CValuesRef<GtkWidgetPath>?, pos: gint, qname: GQuark): gboolean {
    memScoped {
        return kniBridge6877(path?.getPointer(memScope).rawValue, pos, qname)
    }
}

fun gtk_widget_path_iter_add_region(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?, flags: GtkRegionFlags): Unit {
    memScoped {
        return kniBridge6878(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue, flags)
    }
}

fun gtk_widget_path_iter_remove_region(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?): Unit {
    memScoped {
        return kniBridge6879(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_clear_regions(path: CValuesRef<GtkWidgetPath>?, pos: gint): Unit {
    memScoped {
        return kniBridge6880(path?.getPointer(memScope).rawValue, pos)
    }
}

fun gtk_widget_path_iter_list_regions(path: CValuesRef<GtkWidgetPath>?, pos: gint): CPointer<GSList>? {
    memScoped {
        return interpretCPointer<GSList>(kniBridge6881(path?.getPointer(memScope).rawValue, pos))
    }
}

fun gtk_widget_path_iter_has_region(path: CValuesRef<GtkWidgetPath>?, pos: gint, @CCall.CString name: String?, flags: CValuesRef<GtkRegionFlagsVar>?): gboolean {
    memScoped {
        return kniBridge6882(path?.getPointer(memScope).rawValue, pos, name?.cstr?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_iter_has_qregion(path: CValuesRef<GtkWidgetPath>?, pos: gint, qname: GQuark, flags: CValuesRef<GtkRegionFlagsVar>?): gboolean {
    memScoped {
        return kniBridge6883(path?.getPointer(memScope).rawValue, pos, qname, flags?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_get_object_type(path: CValuesRef<GtkWidgetPath>?): GType {
    memScoped {
        return kniBridge6884(path?.getPointer(memScope).rawValue)
    }
}

fun gtk_widget_path_is_type(path: CValuesRef<GtkWidgetPath>?, type: GType): gboolean {
    memScoped {
        return kniBridge6885(path?.getPointer(memScope).rawValue, type)
    }
}

fun gtk_widget_path_has_parent(path: CValuesRef<GtkWidgetPath>?, type: GType): gboolean {
    memScoped {
        return kniBridge6886(path?.getPointer(memScope).rawValue, type)
    }
}

fun gtk_window_group_get_type(): GType {
    return kniBridge6887()
}

fun gtk_window_group_new(): CPointer<GtkWindowGroup>? {
    return interpretCPointer<GtkWindowGroup>(kniBridge6888())
}

fun gtk_window_group_add_window(window_group: CValuesRef<GtkWindowGroup>?, window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge6889(window_group?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_group_remove_window(window_group: CValuesRef<GtkWindowGroup>?, window: CValuesRef<GtkWindow>?): Unit {
    memScoped {
        return kniBridge6890(window_group?.getPointer(memScope).rawValue, window?.getPointer(memScope).rawValue)
    }
}

fun gtk_window_group_list_windows(window_group: CValuesRef<GtkWindowGroup>?): CPointer<GList>? {
    memScoped {
        return interpretCPointer<GList>(kniBridge6891(window_group?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_group_get_current_grab(window_group: CValuesRef<GtkWindowGroup>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6892(window_group?.getPointer(memScope).rawValue))
    }
}

fun gtk_window_group_get_current_device_grab(window_group: CValuesRef<GtkWindowGroup>?, device: CValuesRef<GdkDevice>?): CPointer<GtkWidget>? {
    memScoped {
        return interpretCPointer<GtkWidget>(kniBridge6893(window_group?.getPointer(memScope).rawValue, device?.getPointer(memScope).rawValue))
    }
}

fun glib_autoptr_clear_GtkAccessible(_ptr: CValuesRef<GtkAccessible>?): Unit {
    memScoped {
        return kniBridge6894(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAccessible(_ptr: CValuesRef<CPointerVar<GtkAccessible>>?): Unit {
    memScoped {
        return kniBridge6895(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAccessible(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6896(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAccessible(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6897(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAccessible(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6898(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkActionBar(_ptr: CValuesRef<GtkActionBar>?): Unit {
    memScoped {
        return kniBridge6899(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkActionBar(_ptr: CValuesRef<CPointerVar<GtkActionBar>>?): Unit {
    memScoped {
        return kniBridge6900(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkActionBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6901(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkActionBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6902(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkActionBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6903(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkActionable(_ptr: CValuesRef<GtkActionable>?): Unit {
    memScoped {
        return kniBridge6904(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkActionable(_ptr: CValuesRef<CPointerVar<GtkActionable>>?): Unit {
    memScoped {
        return kniBridge6905(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkActionable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6906(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkActionable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6907(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkActionable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6908(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAdjustment(_ptr: CValuesRef<GtkAdjustment>?): Unit {
    memScoped {
        return kniBridge6909(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAdjustment(_ptr: CValuesRef<CPointerVar<GtkAdjustment>>?): Unit {
    memScoped {
        return kniBridge6910(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAdjustment(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6911(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAdjustment(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6912(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAdjustment(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6913(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAppChooser(_ptr: CValuesRef<GtkAppChooser>?): Unit {
    memScoped {
        return kniBridge6914(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAppChooser(_ptr: CValuesRef<CPointerVar<GtkAppChooser>>?): Unit {
    memScoped {
        return kniBridge6915(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAppChooser(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6916(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAppChooser(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6917(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAppChooser(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6918(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAppChooserButton(_ptr: CValuesRef<GtkAppChooserButton>?): Unit {
    memScoped {
        return kniBridge6919(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAppChooserButton(_ptr: CValuesRef<CPointerVar<GtkAppChooserButton>>?): Unit {
    memScoped {
        return kniBridge6920(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAppChooserButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6921(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAppChooserButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6922(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAppChooserButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6923(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAppChooserDialog(_ptr: CValuesRef<GtkAppChooserDialog>?): Unit {
    memScoped {
        return kniBridge6924(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAppChooserDialog(_ptr: CValuesRef<CPointerVar<GtkAppChooserDialog>>?): Unit {
    memScoped {
        return kniBridge6925(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAppChooserDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6926(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAppChooserDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6927(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAppChooserDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6928(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAppChooserWidget(_ptr: CValuesRef<GtkAppChooserWidget>?): Unit {
    memScoped {
        return kniBridge6929(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAppChooserWidget(_ptr: CValuesRef<CPointerVar<GtkAppChooserWidget>>?): Unit {
    memScoped {
        return kniBridge6930(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAppChooserWidget(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6931(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAppChooserWidget(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6932(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAppChooserWidget(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6933(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkApplicationWindow(_ptr: CValuesRef<GtkApplicationWindow>?): Unit {
    memScoped {
        return kniBridge6934(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkApplicationWindow(_ptr: CValuesRef<CPointerVar<GtkApplicationWindow>>?): Unit {
    memScoped {
        return kniBridge6935(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkApplicationWindow(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6936(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkApplicationWindow(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6937(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkApplicationWindow(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6938(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAspectFrame(_ptr: CValuesRef<GtkAspectFrame>?): Unit {
    memScoped {
        return kniBridge6939(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAspectFrame(_ptr: CValuesRef<CPointerVar<GtkAspectFrame>>?): Unit {
    memScoped {
        return kniBridge6940(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAspectFrame(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6941(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAspectFrame(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6942(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAspectFrame(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6943(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkAssistant(_ptr: CValuesRef<GtkAssistant>?): Unit {
    memScoped {
        return kniBridge6944(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkAssistant(_ptr: CValuesRef<CPointerVar<GtkAssistant>>?): Unit {
    memScoped {
        return kniBridge6945(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkAssistant(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6946(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkAssistant(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6947(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkAssistant(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6948(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkBox(_ptr: CValuesRef<GtkBox>?): Unit {
    memScoped {
        return kniBridge6949(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkBox(_ptr: CValuesRef<CPointerVar<GtkBox>>?): Unit {
    memScoped {
        return kniBridge6950(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6951(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6952(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6953(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkBuildable(_ptr: CValuesRef<GtkBuildable>?): Unit {
    memScoped {
        return kniBridge6954(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkBuildable(_ptr: CValuesRef<CPointerVar<GtkBuildable>>?): Unit {
    memScoped {
        return kniBridge6955(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkBuildable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6956(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkBuildable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6957(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkBuildable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6958(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkBuilder(_ptr: CValuesRef<GtkBuilder>?): Unit {
    memScoped {
        return kniBridge6959(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkBuilder(_ptr: CValuesRef<CPointerVar<GtkBuilder>>?): Unit {
    memScoped {
        return kniBridge6960(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkBuilder(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6961(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkBuilder(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6962(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkBuilder(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6963(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkButton(_ptr: CValuesRef<GtkButton>?): Unit {
    memScoped {
        return kniBridge6964(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkButton(_ptr: CValuesRef<CPointerVar<GtkButton>>?): Unit {
    memScoped {
        return kniBridge6965(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6966(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6967(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6968(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkButtonBox(_ptr: CValuesRef<GtkButtonBox>?): Unit {
    memScoped {
        return kniBridge6969(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkButtonBox(_ptr: CValuesRef<CPointerVar<GtkButtonBox>>?): Unit {
    memScoped {
        return kniBridge6970(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkButtonBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6971(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkButtonBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6972(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkButtonBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6973(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCalendar(_ptr: CValuesRef<GtkCalendar>?): Unit {
    memScoped {
        return kniBridge6974(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCalendar(_ptr: CValuesRef<CPointerVar<GtkCalendar>>?): Unit {
    memScoped {
        return kniBridge6975(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCalendar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6976(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCalendar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6977(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCalendar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6978(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellArea(_ptr: CValuesRef<GtkCellArea>?): Unit {
    memScoped {
        return kniBridge6979(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellArea(_ptr: CValuesRef<CPointerVar<GtkCellArea>>?): Unit {
    memScoped {
        return kniBridge6980(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellArea(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6981(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellArea(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6982(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellArea(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6983(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellAreaBox(_ptr: CValuesRef<GtkCellAreaBox>?): Unit {
    memScoped {
        return kniBridge6984(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellAreaBox(_ptr: CValuesRef<CPointerVar<GtkCellAreaBox>>?): Unit {
    memScoped {
        return kniBridge6985(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellAreaBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6986(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellAreaBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6987(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellAreaBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6988(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellAreaContext(_ptr: CValuesRef<GtkCellAreaContext>?): Unit {
    memScoped {
        return kniBridge6989(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellAreaContext(_ptr: CValuesRef<CPointerVar<GtkCellAreaContext>>?): Unit {
    memScoped {
        return kniBridge6990(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellAreaContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6991(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellAreaContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6992(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellAreaContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6993(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellEditable(_ptr: CValuesRef<GtkCellEditable>?): Unit {
    memScoped {
        return kniBridge6994(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellEditable(_ptr: CValuesRef<CPointerVar<GtkCellEditable>>?): Unit {
    memScoped {
        return kniBridge6995(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellEditable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge6996(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellEditable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge6997(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellEditable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge6998(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellLayout(_ptr: CValuesRef<GtkCellLayout>?): Unit {
    memScoped {
        return kniBridge6999(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellLayout(_ptr: CValuesRef<CPointerVar<GtkCellLayout>>?): Unit {
    memScoped {
        return kniBridge7000(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellLayout(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7001(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellLayout(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7002(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellLayout(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7003(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRenderer(_ptr: CValuesRef<GtkCellRenderer>?): Unit {
    memScoped {
        return kniBridge7004(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRenderer(_ptr: CValuesRef<CPointerVar<GtkCellRenderer>>?): Unit {
    memScoped {
        return kniBridge7005(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRenderer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7006(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRenderer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7007(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRenderer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7008(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererAccel(_ptr: CValuesRef<GtkCellRendererAccel>?): Unit {
    memScoped {
        return kniBridge7009(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererAccel(_ptr: CValuesRef<CPointerVar<GtkCellRendererAccel>>?): Unit {
    memScoped {
        return kniBridge7010(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererAccel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7011(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererAccel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7012(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererAccel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7013(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererCombo(_ptr: CValuesRef<GtkCellRendererCombo>?): Unit {
    memScoped {
        return kniBridge7014(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererCombo(_ptr: CValuesRef<CPointerVar<GtkCellRendererCombo>>?): Unit {
    memScoped {
        return kniBridge7015(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererCombo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7016(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererCombo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7017(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererCombo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7018(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererPixbuf(_ptr: CValuesRef<GtkCellRendererPixbuf>?): Unit {
    memScoped {
        return kniBridge7019(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererPixbuf(_ptr: CValuesRef<CPointerVar<GtkCellRendererPixbuf>>?): Unit {
    memScoped {
        return kniBridge7020(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererPixbuf(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7021(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererPixbuf(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7022(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererPixbuf(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7023(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererProgress(_ptr: CValuesRef<GtkCellRendererProgress>?): Unit {
    memScoped {
        return kniBridge7024(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererProgress(_ptr: CValuesRef<CPointerVar<GtkCellRendererProgress>>?): Unit {
    memScoped {
        return kniBridge7025(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererProgress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7026(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererProgress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7027(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererProgress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7028(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererSpin(_ptr: CValuesRef<GtkCellRendererSpin>?): Unit {
    memScoped {
        return kniBridge7029(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererSpin(_ptr: CValuesRef<CPointerVar<GtkCellRendererSpin>>?): Unit {
    memScoped {
        return kniBridge7030(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererSpin(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7031(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererSpin(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7032(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererSpin(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7033(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererSpinner(_ptr: CValuesRef<GtkCellRendererSpinner>?): Unit {
    memScoped {
        return kniBridge7034(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererSpinner(_ptr: CValuesRef<CPointerVar<GtkCellRendererSpinner>>?): Unit {
    memScoped {
        return kniBridge7035(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererSpinner(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7036(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererSpinner(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7037(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererSpinner(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7038(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererText(_ptr: CValuesRef<GtkCellRendererText>?): Unit {
    memScoped {
        return kniBridge7039(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererText(_ptr: CValuesRef<CPointerVar<GtkCellRendererText>>?): Unit {
    memScoped {
        return kniBridge7040(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererText(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7041(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererText(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7042(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererText(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7043(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellRendererToggle(_ptr: CValuesRef<GtkCellRendererToggle>?): Unit {
    memScoped {
        return kniBridge7044(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellRendererToggle(_ptr: CValuesRef<CPointerVar<GtkCellRendererToggle>>?): Unit {
    memScoped {
        return kniBridge7045(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellRendererToggle(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7046(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellRendererToggle(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7047(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellRendererToggle(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7048(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCellView(_ptr: CValuesRef<GtkCellView>?): Unit {
    memScoped {
        return kniBridge7049(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCellView(_ptr: CValuesRef<CPointerVar<GtkCellView>>?): Unit {
    memScoped {
        return kniBridge7050(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCellView(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7051(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCellView(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7052(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCellView(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7053(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCheckButton(_ptr: CValuesRef<GtkCheckButton>?): Unit {
    memScoped {
        return kniBridge7054(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCheckButton(_ptr: CValuesRef<CPointerVar<GtkCheckButton>>?): Unit {
    memScoped {
        return kniBridge7055(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCheckButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7056(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCheckButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7057(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCheckButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7058(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCheckMenuItem(_ptr: CValuesRef<GtkCheckMenuItem>?): Unit {
    memScoped {
        return kniBridge7059(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCheckMenuItem(_ptr: CValuesRef<CPointerVar<GtkCheckMenuItem>>?): Unit {
    memScoped {
        return kniBridge7060(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCheckMenuItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7061(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCheckMenuItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7062(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCheckMenuItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7063(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkClipboard(_ptr: CValuesRef<GtkClipboard>?): Unit {
    memScoped {
        return kniBridge7064(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkClipboard(_ptr: CValuesRef<CPointerVar<GtkClipboard>>?): Unit {
    memScoped {
        return kniBridge7065(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkClipboard(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7066(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkClipboard(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7067(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkClipboard(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7068(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkColorButton(_ptr: CValuesRef<GtkColorButton>?): Unit {
    memScoped {
        return kniBridge7069(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkColorButton(_ptr: CValuesRef<CPointerVar<GtkColorButton>>?): Unit {
    memScoped {
        return kniBridge7070(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkColorButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7071(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkColorButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7072(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkColorButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7073(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkColorChooser(_ptr: CValuesRef<GtkColorChooser>?): Unit {
    memScoped {
        return kniBridge7074(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkColorChooser(_ptr: CValuesRef<CPointerVar<GtkColorChooser>>?): Unit {
    memScoped {
        return kniBridge7075(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkColorChooser(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7076(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkColorChooser(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7077(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkColorChooser(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7078(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkColorChooserDialog(_ptr: CValuesRef<GtkColorChooserDialog>?): Unit {
    memScoped {
        return kniBridge7079(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkColorChooserDialog(_ptr: CValuesRef<CPointerVar<GtkColorChooserDialog>>?): Unit {
    memScoped {
        return kniBridge7080(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkColorChooserDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7081(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkColorChooserDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7082(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkColorChooserDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7083(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkColorChooserWidget(_ptr: CValuesRef<GtkColorChooserWidget>?): Unit {
    memScoped {
        return kniBridge7084(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkColorChooserWidget(_ptr: CValuesRef<CPointerVar<GtkColorChooserWidget>>?): Unit {
    memScoped {
        return kniBridge7085(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkColorChooserWidget(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7086(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkColorChooserWidget(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7087(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkColorChooserWidget(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7088(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkComboBox(_ptr: CValuesRef<GtkComboBox>?): Unit {
    memScoped {
        return kniBridge7089(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkComboBox(_ptr: CValuesRef<CPointerVar<GtkComboBox>>?): Unit {
    memScoped {
        return kniBridge7090(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkComboBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7091(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkComboBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7092(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkComboBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7093(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkComboBoxText(_ptr: CValuesRef<GtkComboBoxText>?): Unit {
    memScoped {
        return kniBridge7094(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkComboBoxText(_ptr: CValuesRef<CPointerVar<GtkComboBoxText>>?): Unit {
    memScoped {
        return kniBridge7095(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkComboBoxText(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7096(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkComboBoxText(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7097(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkComboBoxText(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7098(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkCssProvider(_ptr: CValuesRef<GtkCssProvider>?): Unit {
    memScoped {
        return kniBridge7099(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkCssProvider(_ptr: CValuesRef<CPointerVar<GtkCssProvider>>?): Unit {
    memScoped {
        return kniBridge7100(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkCssProvider(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7101(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkCssProvider(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7102(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkCssProvider(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7103(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkDrawingArea(_ptr: CValuesRef<GtkDrawingArea>?): Unit {
    memScoped {
        return kniBridge7104(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkDrawingArea(_ptr: CValuesRef<CPointerVar<GtkDrawingArea>>?): Unit {
    memScoped {
        return kniBridge7105(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkDrawingArea(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7106(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkDrawingArea(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7107(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkDrawingArea(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7108(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkEditable(_ptr: CValuesRef<GtkEditable>?): Unit {
    memScoped {
        return kniBridge7109(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkEditable(_ptr: CValuesRef<CPointerVar<GtkEditable>>?): Unit {
    memScoped {
        return kniBridge7110(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkEditable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7111(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkEditable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7112(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkEditable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7113(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkEntry(_ptr: CValuesRef<GtkEntry>?): Unit {
    memScoped {
        return kniBridge7114(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkEntry(_ptr: CValuesRef<CPointerVar<GtkEntry>>?): Unit {
    memScoped {
        return kniBridge7115(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkEntry(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7116(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkEntry(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7117(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkEntry(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7118(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkEntryBuffer(_ptr: CValuesRef<GtkEntryBuffer>?): Unit {
    memScoped {
        return kniBridge7119(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkEntryBuffer(_ptr: CValuesRef<CPointerVar<GtkEntryBuffer>>?): Unit {
    memScoped {
        return kniBridge7120(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkEntryBuffer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7121(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkEntryBuffer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7122(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkEntryBuffer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7123(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkEntryCompletion(_ptr: CValuesRef<GtkEntryCompletion>?): Unit {
    memScoped {
        return kniBridge7124(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkEntryCompletion(_ptr: CValuesRef<CPointerVar<GtkEntryCompletion>>?): Unit {
    memScoped {
        return kniBridge7125(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkEntryCompletion(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7126(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkEntryCompletion(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7127(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkEntryCompletion(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7128(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkEventBox(_ptr: CValuesRef<GtkEventBox>?): Unit {
    memScoped {
        return kniBridge7129(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkEventBox(_ptr: CValuesRef<CPointerVar<GtkEventBox>>?): Unit {
    memScoped {
        return kniBridge7130(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkEventBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7131(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkEventBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7132(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkEventBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7133(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkEventController(_ptr: CValuesRef<GtkEventController>?): Unit {
    memScoped {
        return kniBridge7134(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkEventController(_ptr: CValuesRef<CPointerVar<GtkEventController>>?): Unit {
    memScoped {
        return kniBridge7135(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkEventController(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7136(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkEventController(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7137(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkEventController(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7138(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkExpander(_ptr: CValuesRef<GtkExpander>?): Unit {
    memScoped {
        return kniBridge7139(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkExpander(_ptr: CValuesRef<CPointerVar<GtkExpander>>?): Unit {
    memScoped {
        return kniBridge7140(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkExpander(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7141(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkExpander(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7142(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkExpander(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7143(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFileChooserButton(_ptr: CValuesRef<GtkFileChooserButton>?): Unit {
    memScoped {
        return kniBridge7144(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFileChooserButton(_ptr: CValuesRef<CPointerVar<GtkFileChooserButton>>?): Unit {
    memScoped {
        return kniBridge7145(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFileChooserButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7146(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFileChooserButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7147(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFileChooserButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7148(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFileChooserDialog(_ptr: CValuesRef<GtkFileChooserDialog>?): Unit {
    memScoped {
        return kniBridge7149(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFileChooserDialog(_ptr: CValuesRef<CPointerVar<GtkFileChooserDialog>>?): Unit {
    memScoped {
        return kniBridge7150(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFileChooserDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7151(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFileChooserDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7152(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFileChooserDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7153(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFileChooserWidget(_ptr: CValuesRef<GtkFileChooserWidget>?): Unit {
    memScoped {
        return kniBridge7154(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFileChooserWidget(_ptr: CValuesRef<CPointerVar<GtkFileChooserWidget>>?): Unit {
    memScoped {
        return kniBridge7155(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFileChooserWidget(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7156(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFileChooserWidget(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7157(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFileChooserWidget(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7158(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFileFilter(_ptr: CValuesRef<GtkFileFilter>?): Unit {
    memScoped {
        return kniBridge7159(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFileFilter(_ptr: CValuesRef<CPointerVar<GtkFileFilter>>?): Unit {
    memScoped {
        return kniBridge7160(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFileFilter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7161(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFileFilter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7162(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFileFilter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7163(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFixed(_ptr: CValuesRef<GtkFixed>?): Unit {
    memScoped {
        return kniBridge7164(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFixed(_ptr: CValuesRef<CPointerVar<GtkFixed>>?): Unit {
    memScoped {
        return kniBridge7165(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFixed(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7166(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFixed(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7167(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFixed(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7168(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFlowBox(_ptr: CValuesRef<GtkFlowBox>?): Unit {
    memScoped {
        return kniBridge7169(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFlowBox(_ptr: CValuesRef<CPointerVar<GtkFlowBox>>?): Unit {
    memScoped {
        return kniBridge7170(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFlowBox(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7171(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFlowBox(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7172(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFlowBox(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7173(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFlowBoxChild(_ptr: CValuesRef<GtkFlowBoxChild>?): Unit {
    memScoped {
        return kniBridge7174(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFlowBoxChild(_ptr: CValuesRef<CPointerVar<GtkFlowBoxChild>>?): Unit {
    memScoped {
        return kniBridge7175(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFlowBoxChild(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7176(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFlowBoxChild(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7177(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFlowBoxChild(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7178(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFontButton(_ptr: CValuesRef<GtkFontButton>?): Unit {
    memScoped {
        return kniBridge7179(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFontButton(_ptr: CValuesRef<CPointerVar<GtkFontButton>>?): Unit {
    memScoped {
        return kniBridge7180(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFontButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7181(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFontButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7182(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFontButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7183(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFontChooser(_ptr: CValuesRef<GtkFontChooser>?): Unit {
    memScoped {
        return kniBridge7184(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFontChooser(_ptr: CValuesRef<CPointerVar<GtkFontChooser>>?): Unit {
    memScoped {
        return kniBridge7185(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFontChooser(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7186(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFontChooser(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7187(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFontChooser(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7188(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFontChooserDialog(_ptr: CValuesRef<GtkFontChooserDialog>?): Unit {
    memScoped {
        return kniBridge7189(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFontChooserDialog(_ptr: CValuesRef<CPointerVar<GtkFontChooserDialog>>?): Unit {
    memScoped {
        return kniBridge7190(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFontChooserDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7191(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFontChooserDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7192(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFontChooserDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7193(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFontChooserWidget(_ptr: CValuesRef<GtkFontChooserWidget>?): Unit {
    memScoped {
        return kniBridge7194(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFontChooserWidget(_ptr: CValuesRef<CPointerVar<GtkFontChooserWidget>>?): Unit {
    memScoped {
        return kniBridge7195(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFontChooserWidget(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7196(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFontChooserWidget(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7197(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFontChooserWidget(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7198(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkFrame(_ptr: CValuesRef<GtkFrame>?): Unit {
    memScoped {
        return kniBridge7199(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkFrame(_ptr: CValuesRef<CPointerVar<GtkFrame>>?): Unit {
    memScoped {
        return kniBridge7200(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkFrame(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7201(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkFrame(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7202(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkFrame(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7203(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGLArea(_ptr: CValuesRef<GtkGLArea>?): Unit {
    memScoped {
        return kniBridge7204(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGLArea(_ptr: CValuesRef<CPointerVar<GtkGLArea>>?): Unit {
    memScoped {
        return kniBridge7205(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGLArea(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7206(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGLArea(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7207(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGLArea(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7208(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGesture(_ptr: CValuesRef<GtkGesture>?): Unit {
    memScoped {
        return kniBridge7209(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGesture(_ptr: CValuesRef<CPointerVar<GtkGesture>>?): Unit {
    memScoped {
        return kniBridge7210(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGesture(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7211(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGesture(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7212(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGesture(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7213(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureDrag(_ptr: CValuesRef<GtkGestureDrag>?): Unit {
    memScoped {
        return kniBridge7214(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureDrag(_ptr: CValuesRef<CPointerVar<GtkGestureDrag>>?): Unit {
    memScoped {
        return kniBridge7215(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureDrag(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7216(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureDrag(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7217(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureDrag(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7218(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureLongPress(_ptr: CValuesRef<GtkGestureLongPress>?): Unit {
    memScoped {
        return kniBridge7219(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureLongPress(_ptr: CValuesRef<CPointerVar<GtkGestureLongPress>>?): Unit {
    memScoped {
        return kniBridge7220(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureLongPress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7221(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureLongPress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7222(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureLongPress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7223(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureMultiPress(_ptr: CValuesRef<GtkGestureMultiPress>?): Unit {
    memScoped {
        return kniBridge7224(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureMultiPress(_ptr: CValuesRef<CPointerVar<GtkGestureMultiPress>>?): Unit {
    memScoped {
        return kniBridge7225(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureMultiPress(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7226(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureMultiPress(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7227(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureMultiPress(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7228(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGesturePan(_ptr: CValuesRef<GtkGesturePan>?): Unit {
    memScoped {
        return kniBridge7229(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGesturePan(_ptr: CValuesRef<CPointerVar<GtkGesturePan>>?): Unit {
    memScoped {
        return kniBridge7230(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGesturePan(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7231(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGesturePan(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7232(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGesturePan(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7233(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureRotate(_ptr: CValuesRef<GtkGestureRotate>?): Unit {
    memScoped {
        return kniBridge7234(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureRotate(_ptr: CValuesRef<CPointerVar<GtkGestureRotate>>?): Unit {
    memScoped {
        return kniBridge7235(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureRotate(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7236(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureRotate(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7237(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureRotate(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7238(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureSingle(_ptr: CValuesRef<GtkGestureSingle>?): Unit {
    memScoped {
        return kniBridge7239(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureSingle(_ptr: CValuesRef<CPointerVar<GtkGestureSingle>>?): Unit {
    memScoped {
        return kniBridge7240(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureSingle(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7241(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureSingle(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7242(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureSingle(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7243(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureSwipe(_ptr: CValuesRef<GtkGestureSwipe>?): Unit {
    memScoped {
        return kniBridge7244(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureSwipe(_ptr: CValuesRef<CPointerVar<GtkGestureSwipe>>?): Unit {
    memScoped {
        return kniBridge7245(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureSwipe(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7246(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureSwipe(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7247(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureSwipe(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7248(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGestureZoom(_ptr: CValuesRef<GtkGestureZoom>?): Unit {
    memScoped {
        return kniBridge7249(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGestureZoom(_ptr: CValuesRef<CPointerVar<GtkGestureZoom>>?): Unit {
    memScoped {
        return kniBridge7250(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGestureZoom(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7251(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGestureZoom(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7252(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGestureZoom(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7253(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkGrid(_ptr: CValuesRef<GtkGrid>?): Unit {
    memScoped {
        return kniBridge7254(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkGrid(_ptr: CValuesRef<CPointerVar<GtkGrid>>?): Unit {
    memScoped {
        return kniBridge7255(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkGrid(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7256(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkGrid(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7257(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkGrid(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7258(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkHeaderBar(_ptr: CValuesRef<GtkHeaderBar>?): Unit {
    memScoped {
        return kniBridge7259(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkHeaderBar(_ptr: CValuesRef<CPointerVar<GtkHeaderBar>>?): Unit {
    memScoped {
        return kniBridge7260(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkHeaderBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7261(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkHeaderBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7262(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkHeaderBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7263(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkIMContext(_ptr: CValuesRef<GtkIMContext>?): Unit {
    memScoped {
        return kniBridge7264(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkIMContext(_ptr: CValuesRef<CPointerVar<GtkIMContext>>?): Unit {
    memScoped {
        return kniBridge7265(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkIMContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7266(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkIMContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7267(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkIMContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7268(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkIMContextSimple(_ptr: CValuesRef<GtkIMContextSimple>?): Unit {
    memScoped {
        return kniBridge7269(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkIMContextSimple(_ptr: CValuesRef<CPointerVar<GtkIMContextSimple>>?): Unit {
    memScoped {
        return kniBridge7270(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkIMContextSimple(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7271(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkIMContextSimple(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7272(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkIMContextSimple(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7273(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkIMMulticontext(_ptr: CValuesRef<GtkIMMulticontext>?): Unit {
    memScoped {
        return kniBridge7274(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkIMMulticontext(_ptr: CValuesRef<CPointerVar<GtkIMMulticontext>>?): Unit {
    memScoped {
        return kniBridge7275(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkIMMulticontext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7276(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkIMMulticontext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7277(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkIMMulticontext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7278(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkIconInfo(_ptr: CValuesRef<GtkIconInfo>?): Unit {
    memScoped {
        return kniBridge7279(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkIconInfo(_ptr: CValuesRef<CPointerVar<GtkIconInfo>>?): Unit {
    memScoped {
        return kniBridge7280(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkIconInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7281(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkIconInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7282(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkIconInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7283(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkIconTheme(_ptr: CValuesRef<GtkIconTheme>?): Unit {
    memScoped {
        return kniBridge7284(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkIconTheme(_ptr: CValuesRef<CPointerVar<GtkIconTheme>>?): Unit {
    memScoped {
        return kniBridge7285(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkIconTheme(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7286(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkIconTheme(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7287(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkIconTheme(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7288(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkIconView(_ptr: CValuesRef<GtkIconView>?): Unit {
    memScoped {
        return kniBridge7289(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkIconView(_ptr: CValuesRef<CPointerVar<GtkIconView>>?): Unit {
    memScoped {
        return kniBridge7290(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkIconView(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7291(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkIconView(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7292(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkIconView(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7293(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkImage(_ptr: CValuesRef<GtkImage>?): Unit {
    memScoped {
        return kniBridge7294(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkImage(_ptr: CValuesRef<CPointerVar<GtkImage>>?): Unit {
    memScoped {
        return kniBridge7295(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkImage(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7296(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkImage(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7297(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkImage(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7298(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkInfoBar(_ptr: CValuesRef<GtkInfoBar>?): Unit {
    memScoped {
        return kniBridge7299(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkInfoBar(_ptr: CValuesRef<CPointerVar<GtkInfoBar>>?): Unit {
    memScoped {
        return kniBridge7300(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkInfoBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7301(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkInfoBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7302(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkInfoBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7303(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkInvisible(_ptr: CValuesRef<GtkInvisible>?): Unit {
    memScoped {
        return kniBridge7304(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkInvisible(_ptr: CValuesRef<CPointerVar<GtkInvisible>>?): Unit {
    memScoped {
        return kniBridge7305(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkInvisible(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7306(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkInvisible(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7307(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkInvisible(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7308(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkLayout(_ptr: CValuesRef<GtkLayout>?): Unit {
    memScoped {
        return kniBridge7309(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkLayout(_ptr: CValuesRef<CPointerVar<GtkLayout>>?): Unit {
    memScoped {
        return kniBridge7310(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkLayout(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7311(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkLayout(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7312(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkLayout(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7313(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkLevelBar(_ptr: CValuesRef<GtkLevelBar>?): Unit {
    memScoped {
        return kniBridge7314(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkLevelBar(_ptr: CValuesRef<CPointerVar<GtkLevelBar>>?): Unit {
    memScoped {
        return kniBridge7315(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkLevelBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7316(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkLevelBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7317(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkLevelBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7318(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkLinkButton(_ptr: CValuesRef<GtkLinkButton>?): Unit {
    memScoped {
        return kniBridge7319(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkLinkButton(_ptr: CValuesRef<CPointerVar<GtkLinkButton>>?): Unit {
    memScoped {
        return kniBridge7320(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkLinkButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7321(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkLinkButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7322(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkLinkButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7323(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkListStore(_ptr: CValuesRef<GtkListStore>?): Unit {
    memScoped {
        return kniBridge7324(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkListStore(_ptr: CValuesRef<CPointerVar<GtkListStore>>?): Unit {
    memScoped {
        return kniBridge7325(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkListStore(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7326(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkListStore(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7327(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkListStore(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7328(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkLockButton(_ptr: CValuesRef<GtkLockButton>?): Unit {
    memScoped {
        return kniBridge7329(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkLockButton(_ptr: CValuesRef<CPointerVar<GtkLockButton>>?): Unit {
    memScoped {
        return kniBridge7330(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkLockButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7331(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkLockButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7332(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkLockButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7333(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMenuBar(_ptr: CValuesRef<GtkMenuBar>?): Unit {
    memScoped {
        return kniBridge7334(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMenuBar(_ptr: CValuesRef<CPointerVar<GtkMenuBar>>?): Unit {
    memScoped {
        return kniBridge7335(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMenuBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7336(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMenuBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7337(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMenuBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7338(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMenuButton(_ptr: CValuesRef<GtkMenuButton>?): Unit {
    memScoped {
        return kniBridge7339(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMenuButton(_ptr: CValuesRef<CPointerVar<GtkMenuButton>>?): Unit {
    memScoped {
        return kniBridge7340(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMenuButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7341(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMenuButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7342(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMenuButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7343(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMenuItem(_ptr: CValuesRef<GtkMenuItem>?): Unit {
    memScoped {
        return kniBridge7344(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMenuItem(_ptr: CValuesRef<CPointerVar<GtkMenuItem>>?): Unit {
    memScoped {
        return kniBridge7345(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMenuItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7346(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMenuItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7347(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMenuItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7348(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMenuToolButton(_ptr: CValuesRef<GtkMenuToolButton>?): Unit {
    memScoped {
        return kniBridge7349(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMenuToolButton(_ptr: CValuesRef<CPointerVar<GtkMenuToolButton>>?): Unit {
    memScoped {
        return kniBridge7350(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMenuToolButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7351(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMenuToolButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7352(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMenuToolButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7353(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMessageDialog(_ptr: CValuesRef<GtkMessageDialog>?): Unit {
    memScoped {
        return kniBridge7354(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMessageDialog(_ptr: CValuesRef<CPointerVar<GtkMessageDialog>>?): Unit {
    memScoped {
        return kniBridge7355(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMessageDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7356(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMessageDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7357(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMessageDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7358(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkMountOperation(_ptr: CValuesRef<GtkMountOperation>?): Unit {
    memScoped {
        return kniBridge7359(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkMountOperation(_ptr: CValuesRef<CPointerVar<GtkMountOperation>>?): Unit {
    memScoped {
        return kniBridge7360(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkMountOperation(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7361(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkMountOperation(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7362(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkMountOperation(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7363(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkNotebook(_ptr: CValuesRef<GtkNotebook>?): Unit {
    memScoped {
        return kniBridge7364(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkNotebook(_ptr: CValuesRef<CPointerVar<GtkNotebook>>?): Unit {
    memScoped {
        return kniBridge7365(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkNotebook(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7366(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkNotebook(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7367(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkNotebook(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7368(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkOffscreenWindow(_ptr: CValuesRef<GtkOffscreenWindow>?): Unit {
    memScoped {
        return kniBridge7369(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkOffscreenWindow(_ptr: CValuesRef<CPointerVar<GtkOffscreenWindow>>?): Unit {
    memScoped {
        return kniBridge7370(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkOffscreenWindow(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7371(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkOffscreenWindow(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7372(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkOffscreenWindow(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7373(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkOrientable(_ptr: CValuesRef<GtkOrientable>?): Unit {
    memScoped {
        return kniBridge7374(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkOrientable(_ptr: CValuesRef<CPointerVar<GtkOrientable>>?): Unit {
    memScoped {
        return kniBridge7375(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkOrientable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7376(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkOrientable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7377(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkOrientable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7378(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkOverlay(_ptr: CValuesRef<GtkOverlay>?): Unit {
    memScoped {
        return kniBridge7379(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkOverlay(_ptr: CValuesRef<CPointerVar<GtkOverlay>>?): Unit {
    memScoped {
        return kniBridge7380(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkOverlay(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7381(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkOverlay(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7382(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkOverlay(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7383(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPageSetup(_ptr: CValuesRef<GtkPageSetup>?): Unit {
    memScoped {
        return kniBridge7384(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPageSetup(_ptr: CValuesRef<CPointerVar<GtkPageSetup>>?): Unit {
    memScoped {
        return kniBridge7385(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPageSetup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7386(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPageSetup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7387(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPageSetup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7388(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPaned(_ptr: CValuesRef<GtkPaned>?): Unit {
    memScoped {
        return kniBridge7389(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPaned(_ptr: CValuesRef<CPointerVar<GtkPaned>>?): Unit {
    memScoped {
        return kniBridge7390(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPaned(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7391(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPaned(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7392(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPaned(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7393(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPlacesSidebar(_ptr: CValuesRef<GtkPlacesSidebar>?): Unit {
    memScoped {
        return kniBridge7394(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPlacesSidebar(_ptr: CValuesRef<CPointerVar<GtkPlacesSidebar>>?): Unit {
    memScoped {
        return kniBridge7395(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPlacesSidebar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7396(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPlacesSidebar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7397(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPlacesSidebar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7398(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPopover(_ptr: CValuesRef<GtkPopover>?): Unit {
    memScoped {
        return kniBridge7399(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPopover(_ptr: CValuesRef<CPointerVar<GtkPopover>>?): Unit {
    memScoped {
        return kniBridge7400(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPopover(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7401(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPopover(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7402(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPopover(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7403(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPopoverMenu(_ptr: CValuesRef<GtkPopoverMenu>?): Unit {
    memScoped {
        return kniBridge7404(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPopoverMenu(_ptr: CValuesRef<CPointerVar<GtkPopoverMenu>>?): Unit {
    memScoped {
        return kniBridge7405(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPopoverMenu(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7406(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPopoverMenu(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7407(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPopoverMenu(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7408(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPrintContext(_ptr: CValuesRef<GtkPrintContext>?): Unit {
    memScoped {
        return kniBridge7409(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPrintContext(_ptr: CValuesRef<CPointerVar<GtkPrintContext>>?): Unit {
    memScoped {
        return kniBridge7410(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPrintContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7411(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPrintContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7412(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPrintContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7413(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPrintOperation(_ptr: CValuesRef<GtkPrintOperation>?): Unit {
    memScoped {
        return kniBridge7414(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPrintOperation(_ptr: CValuesRef<CPointerVar<GtkPrintOperation>>?): Unit {
    memScoped {
        return kniBridge7415(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPrintOperation(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7416(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPrintOperation(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7417(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPrintOperation(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7418(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPrintOperationPreview(_ptr: CValuesRef<GtkPrintOperationPreview>?): Unit {
    memScoped {
        return kniBridge7419(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPrintOperationPreview(_ptr: CValuesRef<CPointerVar<GtkPrintOperationPreview>>?): Unit {
    memScoped {
        return kniBridge7420(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPrintOperationPreview(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7421(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPrintOperationPreview(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7422(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPrintOperationPreview(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7423(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPrintSettings(_ptr: CValuesRef<GtkPrintSettings>?): Unit {
    memScoped {
        return kniBridge7424(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPrintSettings(_ptr: CValuesRef<CPointerVar<GtkPrintSettings>>?): Unit {
    memScoped {
        return kniBridge7425(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPrintSettings(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7426(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPrintSettings(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7427(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPrintSettings(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7428(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkProgressBar(_ptr: CValuesRef<GtkProgressBar>?): Unit {
    memScoped {
        return kniBridge7429(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkProgressBar(_ptr: CValuesRef<CPointerVar<GtkProgressBar>>?): Unit {
    memScoped {
        return kniBridge7430(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkProgressBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7431(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkProgressBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7432(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkProgressBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7433(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRadioButton(_ptr: CValuesRef<GtkRadioButton>?): Unit {
    memScoped {
        return kniBridge7434(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRadioButton(_ptr: CValuesRef<CPointerVar<GtkRadioButton>>?): Unit {
    memScoped {
        return kniBridge7435(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRadioButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7436(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRadioButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7437(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRadioButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7438(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRadioMenuItem(_ptr: CValuesRef<GtkRadioMenuItem>?): Unit {
    memScoped {
        return kniBridge7439(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRadioMenuItem(_ptr: CValuesRef<CPointerVar<GtkRadioMenuItem>>?): Unit {
    memScoped {
        return kniBridge7440(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRadioMenuItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7441(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRadioMenuItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7442(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRadioMenuItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7443(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRadioToolButton(_ptr: CValuesRef<GtkRadioToolButton>?): Unit {
    memScoped {
        return kniBridge7444(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRadioToolButton(_ptr: CValuesRef<CPointerVar<GtkRadioToolButton>>?): Unit {
    memScoped {
        return kniBridge7445(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRadioToolButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7446(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRadioToolButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7447(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRadioToolButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7448(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRange(_ptr: CValuesRef<GtkRange>?): Unit {
    memScoped {
        return kniBridge7449(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRange(_ptr: CValuesRef<CPointerVar<GtkRange>>?): Unit {
    memScoped {
        return kniBridge7450(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRange(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7451(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRange(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7452(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRange(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7453(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRcStyle(_ptr: CValuesRef<GtkRcStyle>?): Unit {
    memScoped {
        return kniBridge7454(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRcStyle(_ptr: CValuesRef<CPointerVar<GtkRcStyle>>?): Unit {
    memScoped {
        return kniBridge7455(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRcStyle(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7456(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRcStyle(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7457(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRcStyle(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7458(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentChooser(_ptr: CValuesRef<GtkRecentChooser>?): Unit {
    memScoped {
        return kniBridge7459(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentChooser(_ptr: CValuesRef<CPointerVar<GtkRecentChooser>>?): Unit {
    memScoped {
        return kniBridge7460(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentChooser(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7461(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentChooser(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7462(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentChooser(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7463(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentChooserDialog(_ptr: CValuesRef<GtkRecentChooserDialog>?): Unit {
    memScoped {
        return kniBridge7464(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentChooserDialog(_ptr: CValuesRef<CPointerVar<GtkRecentChooserDialog>>?): Unit {
    memScoped {
        return kniBridge7465(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentChooserDialog(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7466(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentChooserDialog(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7467(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentChooserDialog(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7468(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentChooserMenu(_ptr: CValuesRef<GtkRecentChooserMenu>?): Unit {
    memScoped {
        return kniBridge7469(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentChooserMenu(_ptr: CValuesRef<CPointerVar<GtkRecentChooserMenu>>?): Unit {
    memScoped {
        return kniBridge7470(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentChooserMenu(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7471(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentChooserMenu(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7472(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentChooserMenu(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7473(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentChooserWidget(_ptr: CValuesRef<GtkRecentChooserWidget>?): Unit {
    memScoped {
        return kniBridge7474(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentChooserWidget(_ptr: CValuesRef<CPointerVar<GtkRecentChooserWidget>>?): Unit {
    memScoped {
        return kniBridge7475(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentChooserWidget(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7476(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentChooserWidget(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7477(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentChooserWidget(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7478(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentFilter(_ptr: CValuesRef<GtkRecentFilter>?): Unit {
    memScoped {
        return kniBridge7479(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentFilter(_ptr: CValuesRef<CPointerVar<GtkRecentFilter>>?): Unit {
    memScoped {
        return kniBridge7480(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentFilter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7481(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentFilter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7482(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentFilter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7483(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentManager(_ptr: CValuesRef<GtkRecentManager>?): Unit {
    memScoped {
        return kniBridge7484(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentManager(_ptr: CValuesRef<CPointerVar<GtkRecentManager>>?): Unit {
    memScoped {
        return kniBridge7485(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentManager(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7486(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentManager(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7487(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentManager(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7488(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRevealer(_ptr: CValuesRef<GtkRevealer>?): Unit {
    memScoped {
        return kniBridge7489(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRevealer(_ptr: CValuesRef<CPointerVar<GtkRevealer>>?): Unit {
    memScoped {
        return kniBridge7490(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRevealer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7491(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRevealer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7492(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRevealer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7493(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkScale(_ptr: CValuesRef<GtkScale>?): Unit {
    memScoped {
        return kniBridge7494(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkScale(_ptr: CValuesRef<CPointerVar<GtkScale>>?): Unit {
    memScoped {
        return kniBridge7495(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkScale(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7496(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkScale(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7497(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkScale(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7498(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkScaleButton(_ptr: CValuesRef<GtkScaleButton>?): Unit {
    memScoped {
        return kniBridge7499(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkScaleButton(_ptr: CValuesRef<CPointerVar<GtkScaleButton>>?): Unit {
    memScoped {
        return kniBridge7500(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkScaleButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7501(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkScaleButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7502(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkScaleButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7503(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkScrollable(_ptr: CValuesRef<GtkScrollable>?): Unit {
    memScoped {
        return kniBridge7504(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkScrollable(_ptr: CValuesRef<CPointerVar<GtkScrollable>>?): Unit {
    memScoped {
        return kniBridge7505(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkScrollable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7506(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkScrollable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7507(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkScrollable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7508(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkScrollbar(_ptr: CValuesRef<GtkScrollbar>?): Unit {
    memScoped {
        return kniBridge7509(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkScrollbar(_ptr: CValuesRef<CPointerVar<GtkScrollbar>>?): Unit {
    memScoped {
        return kniBridge7510(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkScrollbar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7511(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkScrollbar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7512(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkScrollbar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7513(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkScrolledWindow(_ptr: CValuesRef<GtkScrolledWindow>?): Unit {
    memScoped {
        return kniBridge7514(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkScrolledWindow(_ptr: CValuesRef<CPointerVar<GtkScrolledWindow>>?): Unit {
    memScoped {
        return kniBridge7515(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkScrolledWindow(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7516(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkScrolledWindow(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7517(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkScrolledWindow(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7518(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSearchBar(_ptr: CValuesRef<GtkSearchBar>?): Unit {
    memScoped {
        return kniBridge7519(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSearchBar(_ptr: CValuesRef<CPointerVar<GtkSearchBar>>?): Unit {
    memScoped {
        return kniBridge7520(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSearchBar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7521(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSearchBar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7522(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSearchBar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7523(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSearchEntry(_ptr: CValuesRef<GtkSearchEntry>?): Unit {
    memScoped {
        return kniBridge7524(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSearchEntry(_ptr: CValuesRef<CPointerVar<GtkSearchEntry>>?): Unit {
    memScoped {
        return kniBridge7525(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSearchEntry(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7526(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSearchEntry(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7527(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSearchEntry(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7528(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSeparator(_ptr: CValuesRef<GtkSeparator>?): Unit {
    memScoped {
        return kniBridge7529(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSeparator(_ptr: CValuesRef<CPointerVar<GtkSeparator>>?): Unit {
    memScoped {
        return kniBridge7530(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSeparator(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7531(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSeparator(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7532(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSeparator(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7533(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSeparatorMenuItem(_ptr: CValuesRef<GtkSeparatorMenuItem>?): Unit {
    memScoped {
        return kniBridge7534(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSeparatorMenuItem(_ptr: CValuesRef<CPointerVar<GtkSeparatorMenuItem>>?): Unit {
    memScoped {
        return kniBridge7535(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSeparatorMenuItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7536(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSeparatorMenuItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7537(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSeparatorMenuItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7538(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSeparatorToolItem(_ptr: CValuesRef<GtkSeparatorToolItem>?): Unit {
    memScoped {
        return kniBridge7539(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSeparatorToolItem(_ptr: CValuesRef<CPointerVar<GtkSeparatorToolItem>>?): Unit {
    memScoped {
        return kniBridge7540(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSeparatorToolItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7541(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSeparatorToolItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7542(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSeparatorToolItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7543(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSettings(_ptr: CValuesRef<GtkSettings>?): Unit {
    memScoped {
        return kniBridge7544(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSettings(_ptr: CValuesRef<CPointerVar<GtkSettings>>?): Unit {
    memScoped {
        return kniBridge7545(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSettings(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7546(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSettings(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7547(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSettings(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7548(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStackSidebar(_ptr: CValuesRef<GtkStackSidebar>?): Unit {
    memScoped {
        return kniBridge7549(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStackSidebar(_ptr: CValuesRef<CPointerVar<GtkStackSidebar>>?): Unit {
    memScoped {
        return kniBridge7550(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStackSidebar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7551(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStackSidebar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7552(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStackSidebar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7553(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSizeGroup(_ptr: CValuesRef<GtkSizeGroup>?): Unit {
    memScoped {
        return kniBridge7554(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSizeGroup(_ptr: CValuesRef<CPointerVar<GtkSizeGroup>>?): Unit {
    memScoped {
        return kniBridge7555(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSizeGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7556(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSizeGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7557(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSizeGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7558(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSpinButton(_ptr: CValuesRef<GtkSpinButton>?): Unit {
    memScoped {
        return kniBridge7559(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSpinButton(_ptr: CValuesRef<CPointerVar<GtkSpinButton>>?): Unit {
    memScoped {
        return kniBridge7560(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSpinButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7561(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSpinButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7562(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSpinButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7563(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSpinner(_ptr: CValuesRef<GtkSpinner>?): Unit {
    memScoped {
        return kniBridge7564(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSpinner(_ptr: CValuesRef<CPointerVar<GtkSpinner>>?): Unit {
    memScoped {
        return kniBridge7565(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSpinner(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7566(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSpinner(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7567(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSpinner(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7568(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStack(_ptr: CValuesRef<GtkStack>?): Unit {
    memScoped {
        return kniBridge7569(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStack(_ptr: CValuesRef<CPointerVar<GtkStack>>?): Unit {
    memScoped {
        return kniBridge7570(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStack(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7571(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStack(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7572(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStack(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7573(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStackSwitcher(_ptr: CValuesRef<GtkStackSwitcher>?): Unit {
    memScoped {
        return kniBridge7574(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStackSwitcher(_ptr: CValuesRef<CPointerVar<GtkStackSwitcher>>?): Unit {
    memScoped {
        return kniBridge7575(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStackSwitcher(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7576(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStackSwitcher(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7577(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStackSwitcher(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7578(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStatusbar(_ptr: CValuesRef<GtkStatusbar>?): Unit {
    memScoped {
        return kniBridge7579(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStatusbar(_ptr: CValuesRef<CPointerVar<GtkStatusbar>>?): Unit {
    memScoped {
        return kniBridge7580(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStatusbar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7581(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStatusbar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7582(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStatusbar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7583(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStyle(_ptr: CValuesRef<GtkStyle>?): Unit {
    memScoped {
        return kniBridge7584(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStyle(_ptr: CValuesRef<CPointerVar<GtkStyle>>?): Unit {
    memScoped {
        return kniBridge7585(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStyle(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7586(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStyle(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7587(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStyle(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7588(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStyleContext(_ptr: CValuesRef<GtkStyleContext>?): Unit {
    memScoped {
        return kniBridge7589(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStyleContext(_ptr: CValuesRef<CPointerVar<GtkStyleContext>>?): Unit {
    memScoped {
        return kniBridge7590(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStyleContext(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7591(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStyleContext(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7592(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStyleContext(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7593(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStyleProperties(_ptr: CValuesRef<GtkStyleProperties>?): Unit {
    memScoped {
        return kniBridge7594(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStyleProperties(_ptr: CValuesRef<CPointerVar<GtkStyleProperties>>?): Unit {
    memScoped {
        return kniBridge7595(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStyleProperties(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7596(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStyleProperties(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7597(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStyleProperties(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7598(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkStyleProvider(_ptr: CValuesRef<GtkStyleProvider>?): Unit {
    memScoped {
        return kniBridge7599(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkStyleProvider(_ptr: CValuesRef<CPointerVar<GtkStyleProvider>>?): Unit {
    memScoped {
        return kniBridge7600(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkStyleProvider(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7601(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkStyleProvider(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7602(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkStyleProvider(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7603(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSwitch(_ptr: CValuesRef<GtkSwitch>?): Unit {
    memScoped {
        return kniBridge7604(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSwitch(_ptr: CValuesRef<CPointerVar<GtkSwitch>>?): Unit {
    memScoped {
        return kniBridge7605(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSwitch(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7606(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSwitch(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7607(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSwitch(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7608(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextBuffer(_ptr: CValuesRef<GtkTextBuffer>?): Unit {
    memScoped {
        return kniBridge7609(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextBuffer(_ptr: CValuesRef<CPointerVar<GtkTextBuffer>>?): Unit {
    memScoped {
        return kniBridge7610(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextBuffer(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7611(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextBuffer(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7612(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextBuffer(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7613(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextChildAnchor(_ptr: CValuesRef<GtkTextChildAnchor>?): Unit {
    memScoped {
        return kniBridge7614(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextChildAnchor(_ptr: CValuesRef<CPointerVar<GtkTextChildAnchor>>?): Unit {
    memScoped {
        return kniBridge7615(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextChildAnchor(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7616(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextChildAnchor(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7617(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextChildAnchor(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7618(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextMark(_ptr: CValuesRef<GtkTextMark>?): Unit {
    memScoped {
        return kniBridge7619(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextMark(_ptr: CValuesRef<CPointerVar<GtkTextMark>>?): Unit {
    memScoped {
        return kniBridge7620(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextMark(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7621(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextMark(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7622(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextMark(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7623(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextTag(_ptr: CValuesRef<GtkTextTag>?): Unit {
    memScoped {
        return kniBridge7624(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextTag(_ptr: CValuesRef<CPointerVar<GtkTextTag>>?): Unit {
    memScoped {
        return kniBridge7625(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextTag(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7626(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextTag(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7627(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextTag(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7628(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextTagTable(_ptr: CValuesRef<GtkTextTagTable>?): Unit {
    memScoped {
        return kniBridge7629(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextTagTable(_ptr: CValuesRef<CPointerVar<GtkTextTagTable>>?): Unit {
    memScoped {
        return kniBridge7630(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextTagTable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7631(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextTagTable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7632(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextTagTable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7633(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextView(_ptr: CValuesRef<GtkTextView>?): Unit {
    memScoped {
        return kniBridge7634(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextView(_ptr: CValuesRef<CPointerVar<GtkTextView>>?): Unit {
    memScoped {
        return kniBridge7635(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextView(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7636(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextView(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7637(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextView(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7638(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToggleButton(_ptr: CValuesRef<GtkToggleButton>?): Unit {
    memScoped {
        return kniBridge7639(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToggleButton(_ptr: CValuesRef<CPointerVar<GtkToggleButton>>?): Unit {
    memScoped {
        return kniBridge7640(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToggleButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7641(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToggleButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7642(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToggleButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7643(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToggleToolButton(_ptr: CValuesRef<GtkToggleToolButton>?): Unit {
    memScoped {
        return kniBridge7644(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToggleToolButton(_ptr: CValuesRef<CPointerVar<GtkToggleToolButton>>?): Unit {
    memScoped {
        return kniBridge7645(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToggleToolButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7646(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToggleToolButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7647(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToggleToolButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7648(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToolButton(_ptr: CValuesRef<GtkToolButton>?): Unit {
    memScoped {
        return kniBridge7649(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToolButton(_ptr: CValuesRef<CPointerVar<GtkToolButton>>?): Unit {
    memScoped {
        return kniBridge7650(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToolButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7651(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToolButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7652(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToolButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7653(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToolItem(_ptr: CValuesRef<GtkToolItem>?): Unit {
    memScoped {
        return kniBridge7654(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToolItem(_ptr: CValuesRef<CPointerVar<GtkToolItem>>?): Unit {
    memScoped {
        return kniBridge7655(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToolItem(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7656(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToolItem(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7657(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToolItem(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7658(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToolItemGroup(_ptr: CValuesRef<GtkToolItemGroup>?): Unit {
    memScoped {
        return kniBridge7659(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToolItemGroup(_ptr: CValuesRef<CPointerVar<GtkToolItemGroup>>?): Unit {
    memScoped {
        return kniBridge7660(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToolItemGroup(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7661(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToolItemGroup(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7662(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToolItemGroup(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7663(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToolPalette(_ptr: CValuesRef<GtkToolPalette>?): Unit {
    memScoped {
        return kniBridge7664(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToolPalette(_ptr: CValuesRef<CPointerVar<GtkToolPalette>>?): Unit {
    memScoped {
        return kniBridge7665(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToolPalette(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7666(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToolPalette(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7667(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToolPalette(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7668(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToolShell(_ptr: CValuesRef<GtkToolShell>?): Unit {
    memScoped {
        return kniBridge7669(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToolShell(_ptr: CValuesRef<CPointerVar<GtkToolShell>>?): Unit {
    memScoped {
        return kniBridge7670(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToolShell(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7671(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToolShell(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7672(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToolShell(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7673(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkToolbar(_ptr: CValuesRef<GtkToolbar>?): Unit {
    memScoped {
        return kniBridge7674(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkToolbar(_ptr: CValuesRef<CPointerVar<GtkToolbar>>?): Unit {
    memScoped {
        return kniBridge7675(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkToolbar(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7676(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkToolbar(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7677(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkToolbar(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7678(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTooltip(_ptr: CValuesRef<GtkTooltip>?): Unit {
    memScoped {
        return kniBridge7679(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTooltip(_ptr: CValuesRef<CPointerVar<GtkTooltip>>?): Unit {
    memScoped {
        return kniBridge7680(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTooltip(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7681(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTooltip(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7682(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTooltip(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7683(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeDragDest(_ptr: CValuesRef<GtkTreeDragDest>?): Unit {
    memScoped {
        return kniBridge7684(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeDragDest(_ptr: CValuesRef<CPointerVar<GtkTreeDragDest>>?): Unit {
    memScoped {
        return kniBridge7685(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeDragDest(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7686(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeDragDest(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7687(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeDragDest(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7688(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeDragSource(_ptr: CValuesRef<GtkTreeDragSource>?): Unit {
    memScoped {
        return kniBridge7689(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeDragSource(_ptr: CValuesRef<CPointerVar<GtkTreeDragSource>>?): Unit {
    memScoped {
        return kniBridge7690(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeDragSource(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7691(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeDragSource(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7692(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeDragSource(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7693(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeModel(_ptr: CValuesRef<GtkTreeModel>?): Unit {
    memScoped {
        return kniBridge7694(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeModel(_ptr: CValuesRef<CPointerVar<GtkTreeModel>>?): Unit {
    memScoped {
        return kniBridge7695(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeModel(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7696(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeModel(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7697(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeModel(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7698(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeModelFilter(_ptr: CValuesRef<GtkTreeModelFilter>?): Unit {
    memScoped {
        return kniBridge7699(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeModelFilter(_ptr: CValuesRef<CPointerVar<GtkTreeModelFilter>>?): Unit {
    memScoped {
        return kniBridge7700(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeModelFilter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7701(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeModelFilter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7702(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeModelFilter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7703(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeModelSort(_ptr: CValuesRef<GtkTreeModelSort>?): Unit {
    memScoped {
        return kniBridge7704(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeModelSort(_ptr: CValuesRef<CPointerVar<GtkTreeModelSort>>?): Unit {
    memScoped {
        return kniBridge7705(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeModelSort(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7706(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeModelSort(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7707(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeModelSort(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7708(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeSelection(_ptr: CValuesRef<GtkTreeSelection>?): Unit {
    memScoped {
        return kniBridge7709(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeSelection(_ptr: CValuesRef<CPointerVar<GtkTreeSelection>>?): Unit {
    memScoped {
        return kniBridge7710(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeSelection(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7711(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeSelection(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7712(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeSelection(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7713(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeSortable(_ptr: CValuesRef<GtkTreeSortable>?): Unit {
    memScoped {
        return kniBridge7714(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeSortable(_ptr: CValuesRef<CPointerVar<GtkTreeSortable>>?): Unit {
    memScoped {
        return kniBridge7715(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeSortable(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7716(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeSortable(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7717(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeSortable(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7718(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeStore(_ptr: CValuesRef<GtkTreeStore>?): Unit {
    memScoped {
        return kniBridge7719(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeStore(_ptr: CValuesRef<CPointerVar<GtkTreeStore>>?): Unit {
    memScoped {
        return kniBridge7720(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeStore(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7721(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeStore(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7722(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeStore(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7723(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeView(_ptr: CValuesRef<GtkTreeView>?): Unit {
    memScoped {
        return kniBridge7724(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeView(_ptr: CValuesRef<CPointerVar<GtkTreeView>>?): Unit {
    memScoped {
        return kniBridge7725(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeView(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7726(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeView(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7727(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeView(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7728(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeViewColumn(_ptr: CValuesRef<GtkTreeViewColumn>?): Unit {
    memScoped {
        return kniBridge7729(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeViewColumn(_ptr: CValuesRef<CPointerVar<GtkTreeViewColumn>>?): Unit {
    memScoped {
        return kniBridge7730(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeViewColumn(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7731(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeViewColumn(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7732(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeViewColumn(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7733(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkViewport(_ptr: CValuesRef<GtkViewport>?): Unit {
    memScoped {
        return kniBridge7734(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkViewport(_ptr: CValuesRef<CPointerVar<GtkViewport>>?): Unit {
    memScoped {
        return kniBridge7735(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkViewport(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7736(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkViewport(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7737(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkViewport(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7738(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkVolumeButton(_ptr: CValuesRef<GtkVolumeButton>?): Unit {
    memScoped {
        return kniBridge7739(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkVolumeButton(_ptr: CValuesRef<CPointerVar<GtkVolumeButton>>?): Unit {
    memScoped {
        return kniBridge7740(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkVolumeButton(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7741(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkVolumeButton(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7742(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkVolumeButton(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7743(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkPaperSize(_ptr: CValuesRef<GtkPaperSize>?): Unit {
    memScoped {
        return kniBridge7744(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkPaperSize(_ptr: CValuesRef<CPointerVar<GtkPaperSize>>?): Unit {
    memScoped {
        return kniBridge7745(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkPaperSize(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7746(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkPaperSize(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7747(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkPaperSize(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7748(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkRecentInfo(_ptr: CValuesRef<GtkRecentInfo>?): Unit {
    memScoped {
        return kniBridge7749(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkRecentInfo(_ptr: CValuesRef<CPointerVar<GtkRecentInfo>>?): Unit {
    memScoped {
        return kniBridge7750(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkRecentInfo(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7751(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkRecentInfo(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7752(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkRecentInfo(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7753(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkSelectionData(_ptr: CValuesRef<GtkSelectionData>?): Unit {
    memScoped {
        return kniBridge7754(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkSelectionData(_ptr: CValuesRef<CPointerVar<GtkSelectionData>>?): Unit {
    memScoped {
        return kniBridge7755(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkSelectionData(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7756(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkSelectionData(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7757(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkSelectionData(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7758(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTargetList(_ptr: CValuesRef<GtkTargetList>?): Unit {
    memScoped {
        return kniBridge7759(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTargetList(_ptr: CValuesRef<CPointerVar<GtkTargetList>>?): Unit {
    memScoped {
        return kniBridge7760(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTargetList(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7761(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTargetList(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7762(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTargetList(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7763(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextAttributes(_ptr: CValuesRef<GtkTextAttributes>?): Unit {
    memScoped {
        return kniBridge7764(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextAttributes(_ptr: CValuesRef<CPointerVar<GtkTextAttributes>>?): Unit {
    memScoped {
        return kniBridge7765(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextAttributes(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7766(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextAttributes(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7767(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextAttributes(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7768(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTextIter(_ptr: CValuesRef<GtkTextIter>?): Unit {
    memScoped {
        return kniBridge7769(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTextIter(_ptr: CValuesRef<CPointerVar<GtkTextIter>>?): Unit {
    memScoped {
        return kniBridge7770(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTextIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7771(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTextIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7772(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTextIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7773(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeIter(_ptr: CValuesRef<GtkTreeIter>?): Unit {
    memScoped {
        return kniBridge7774(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeIter(_ptr: CValuesRef<CPointerVar<GtkTreeIter>>?): Unit {
    memScoped {
        return kniBridge7775(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeIter(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7776(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeIter(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7777(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeIter(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7778(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreePath(_ptr: CValuesRef<GtkTreePath>?): Unit {
    memScoped {
        return kniBridge7779(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreePath(_ptr: CValuesRef<CPointerVar<GtkTreePath>>?): Unit {
    memScoped {
        return kniBridge7780(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreePath(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7781(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreePath(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7782(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreePath(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7783(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkTreeRowReference(_ptr: CValuesRef<GtkTreeRowReference>?): Unit {
    memScoped {
        return kniBridge7784(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkTreeRowReference(_ptr: CValuesRef<CPointerVar<GtkTreeRowReference>>?): Unit {
    memScoped {
        return kniBridge7785(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkTreeRowReference(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7786(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkTreeRowReference(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7787(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkTreeRowReference(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7788(_q?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_clear_GtkWidgetPath(_ptr: CValuesRef<GtkWidgetPath>?): Unit {
    memScoped {
        return kniBridge7789(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_autoptr_cleanup_GtkWidgetPath(_ptr: CValuesRef<CPointerVar<GtkWidgetPath>>?): Unit {
    memScoped {
        return kniBridge7790(_ptr?.getPointer(memScope).rawValue)
    }
}

fun glib_listautoptr_cleanup_GtkWidgetPath(_l: CValuesRef<CPointerVar<GList>>?): Unit {
    memScoped {
        return kniBridge7791(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_slistautoptr_cleanup_GtkWidgetPath(_l: CValuesRef<CPointerVar<GSList>>?): Unit {
    memScoped {
        return kniBridge7792(_l?.getPointer(memScope).rawValue)
    }
}

fun glib_queueautoptr_cleanup_GtkWidgetPath(_q: CValuesRef<CPointerVar<GQueue>>?): Unit {
    memScoped {
        return kniBridge7793(_q?.getPointer(memScope).rawValue)
    }
}

fun functionFromCInterop(): Unit {
    return kniBridge7794()
}

var g_param_spec_types: CPointer<GTypeVar>?
    get() = interpretCPointer<GTypeVar>(kniBridge7795())
    set(value) { kniBridge7796(value.rawValue) }

const val G_TYPE_FUNDAMENTAL_MAX: Int = 1020

const val G_TYPE_INVALID: GType = 0u

const val G_TYPE_NONE: GType = 4u

const val G_TYPE_INTERFACE: GType = 8u

const val G_TYPE_CHAR: GType = 12u

const val G_TYPE_UCHAR: GType = 16u

const val G_TYPE_BOOLEAN: GType = 20u

const val G_TYPE_INT: GType = 24u

const val G_TYPE_UINT: GType = 28u

const val G_TYPE_LONG: GType = 32u

const val G_TYPE_ULONG: GType = 36u

const val G_TYPE_INT64: GType = 40u

const val G_TYPE_UINT64: GType = 44u

const val G_TYPE_ENUM: GType = 48u

const val G_TYPE_FLAGS: GType = 52u

const val G_TYPE_FLOAT: GType = 56u

const val G_TYPE_DOUBLE: GType = 60u

const val G_TYPE_STRING: GType = 64u

const val G_TYPE_POINTER: GType = 68u

const val G_TYPE_BOXED: GType = 72u

const val G_TYPE_PARAM: GType = 76u

const val G_TYPE_OBJECT: GType = 80u

const val G_TYPE_VARIANT: GType = 84u

const val G_TYPE_FUNDAMENTAL_SHIFT: Int = 2

const val G_TYPE_RESERVED_GLIB_FIRST: Int = 22

const val G_TYPE_RESERVED_GLIB_LAST: Int = 31

const val G_TYPE_RESERVED_BSE_FIRST: Int = 32

const val G_TYPE_RESERVED_BSE_LAST: Int = 48

const val G_TYPE_RESERVED_USER_FIRST: Int = 49

const val G_TYPE_FLAG_RESERVED_ID_BIT: GType = 1u

const val G_VALUE_NOCOPY_CONTENTS: Int = 134217728

const val G_PARAM_STATIC_STRINGS: Int = 224

const val G_PARAM_MASK: Int = 255

const val G_PARAM_USER_SHIFT: Int = 8

const val G_SIGNAL_FLAGS_MASK: Int = 511

const val G_SIGNAL_MATCH_MASK: Int = 63

const val G_SIGNAL_TYPE_STATIC_SCOPE: GType = 1u

val G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE: String get() = "unix\u002Ddevice"

val G_FILE_ATTRIBUTE_STANDARD_TYPE: String get() = "standard::type"

val G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN: String get() = "standard::is\u002Dhidden"

val G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP: String get() = "standard::is\u002Dbackup"

val G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK: String get() = "standard::is\u002Dsymlink"

val G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL: String get() = "standard::is\u002Dvirtual"

val G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE: String get() = "standard::is\u002Dvolatile"

val G_FILE_ATTRIBUTE_STANDARD_NAME: String get() = "standard::name"

val G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME: String get() = "standard::display\u002Dname"

val G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME: String get() = "standard::edit\u002Dname"

val G_FILE_ATTRIBUTE_STANDARD_COPY_NAME: String get() = "standard::copy\u002Dname"

val G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION: String get() = "standard::description"

val G_FILE_ATTRIBUTE_STANDARD_ICON: String get() = "standard::icon"

val G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON: String get() = "standard::symbolic\u002Dicon"

val G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE: String get() = "standard::content\u002Dtype"

val G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE: String get() = "standard::fast\u002Dcontent\u002Dtype"

val G_FILE_ATTRIBUTE_STANDARD_SIZE: String get() = "standard::size"

val G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE: String get() = "standard::allocated\u002Dsize"

val G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET: String get() = "standard::symlink\u002Dtarget"

val G_FILE_ATTRIBUTE_STANDARD_TARGET_URI: String get() = "standard::target\u002Duri"

val G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER: String get() = "standard::sort\u002Dorder"

val G_FILE_ATTRIBUTE_ETAG_VALUE: String get() = "etag::value"

val G_FILE_ATTRIBUTE_ID_FILE: String get() = "id::file"

val G_FILE_ATTRIBUTE_ID_FILESYSTEM: String get() = "id::filesystem"

val G_FILE_ATTRIBUTE_ACCESS_CAN_READ: String get() = "access::can\u002Dread"

val G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE: String get() = "access::can\u002Dwrite"

val G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE: String get() = "access::can\u002Dexecute"

val G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE: String get() = "access::can\u002Ddelete"

val G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH: String get() = "access::can\u002Dtrash"

val G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME: String get() = "access::can\u002Drename"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT: String get() = "mountable::can\u002Dmount"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT: String get() = "mountable::can\u002Dunmount"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT: String get() = "mountable::can\u002Deject"

val G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE: String get() = "mountable::unix\u002Ddevice"

val G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE: String get() = "mountable::unix\u002Ddevice\u002Dfile"

val G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI: String get() = "mountable::hal\u002Dudi"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START: String get() = "mountable::can\u002Dstart"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED: String get() = "mountable::can\u002Dstart\u002Ddegraded"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP: String get() = "mountable::can\u002Dstop"

val G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE: String get() = "mountable::start\u002Dstop\u002Dtype"

val G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL: String get() = "mountable::can\u002Dpoll"

val G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC: String get() = "mountable::is\u002Dmedia\u002Dcheck\u002Dautomatic"

val G_FILE_ATTRIBUTE_TIME_MODIFIED: String get() = "time::modified"

val G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC: String get() = "time::modified\u002Dusec"

val G_FILE_ATTRIBUTE_TIME_ACCESS: String get() = "time::access"

val G_FILE_ATTRIBUTE_TIME_ACCESS_USEC: String get() = "time::access\u002Dusec"

val G_FILE_ATTRIBUTE_TIME_CHANGED: String get() = "time::changed"

val G_FILE_ATTRIBUTE_TIME_CHANGED_USEC: String get() = "time::changed\u002Dusec"

val G_FILE_ATTRIBUTE_TIME_CREATED: String get() = "time::created"

val G_FILE_ATTRIBUTE_TIME_CREATED_USEC: String get() = "time::created\u002Dusec"

val G_FILE_ATTRIBUTE_UNIX_DEVICE: String get() = "unix::device"

val G_FILE_ATTRIBUTE_UNIX_INODE: String get() = "unix::inode"

val G_FILE_ATTRIBUTE_UNIX_MODE: String get() = "unix::mode"

val G_FILE_ATTRIBUTE_UNIX_NLINK: String get() = "unix::nlink"

val G_FILE_ATTRIBUTE_UNIX_UID: String get() = "unix::uid"

val G_FILE_ATTRIBUTE_UNIX_GID: String get() = "unix::gid"

val G_FILE_ATTRIBUTE_UNIX_RDEV: String get() = "unix::rdev"

val G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE: String get() = "unix::block\u002Dsize"

val G_FILE_ATTRIBUTE_UNIX_BLOCKS: String get() = "unix::blocks"

val G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT: String get() = "unix::is\u002Dmountpoint"

val G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE: String get() = "dos::is\u002Darchive"

val G_FILE_ATTRIBUTE_DOS_IS_SYSTEM: String get() = "dos::is\u002Dsystem"

val G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT: String get() = "dos::is\u002Dmountpoint"

val G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG: String get() = "dos::reparse\u002Dpoint\u002Dtag"

val G_FILE_ATTRIBUTE_OWNER_USER: String get() = "owner::user"

val G_FILE_ATTRIBUTE_OWNER_USER_REAL: String get() = "owner::user\u002Dreal"

val G_FILE_ATTRIBUTE_OWNER_GROUP: String get() = "owner::group"

val G_FILE_ATTRIBUTE_THUMBNAIL_PATH: String get() = "thumbnail::path"

val G_FILE_ATTRIBUTE_THUMBNAILING_FAILED: String get() = "thumbnail::failed"

val G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID: String get() = "thumbnail::is\u002Dvalid"

val G_FILE_ATTRIBUTE_PREVIEW_ICON: String get() = "preview::icon"

val G_FILE_ATTRIBUTE_FILESYSTEM_SIZE: String get() = "filesystem::size"

val G_FILE_ATTRIBUTE_FILESYSTEM_FREE: String get() = "filesystem::free"

val G_FILE_ATTRIBUTE_FILESYSTEM_USED: String get() = "filesystem::used"

val G_FILE_ATTRIBUTE_FILESYSTEM_TYPE: String get() = "filesystem::type"

val G_FILE_ATTRIBUTE_FILESYSTEM_READONLY: String get() = "filesystem::readonly"

val G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW: String get() = "filesystem::use\u002Dpreview"

val G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE: String get() = "filesystem::remote"

val G_FILE_ATTRIBUTE_GVFS_BACKEND: String get() = "gvfs::backend"

val G_FILE_ATTRIBUTE_SELINUX_CONTEXT: String get() = "selinux::context"

val G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT: String get() = "trash::item\u002Dcount"

val G_FILE_ATTRIBUTE_TRASH_ORIG_PATH: String get() = "trash::orig\u002Dpath"

val G_FILE_ATTRIBUTE_TRASH_DELETION_DATE: String get() = "trash::deletion\u002Ddate"

val G_FILE_ATTRIBUTE_RECENT_MODIFIED: String get() = "recent::modified"

val G_VOLUME_MONITOR_EXTENSION_POINT_NAME: String get() = "gio\u002Dvolume\u002Dmonitor"

val G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME: String get() = "gio\u002Dnative\u002Dvolume\u002Dmonitor"

val G_NETWORK_MONITOR_EXTENSION_POINT_NAME: String get() = "gio\u002Dnetwork\u002Dmonitor"

val G_PROXY_EXTENSION_POINT_NAME: String get() = "gio\u002Dproxy"

val G_PROXY_RESOLVER_EXTENSION_POINT_NAME: String get() = "gio\u002Dproxy\u002Dresolver"

val G_TLS_BACKEND_EXTENSION_POINT_NAME: String get() = "gio\u002Dtls\u002Dbackend"

val G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER: String get() = "1.3.6.1.5.5.7.3.1"

val G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT: String get() = "1.3.6.1.5.5.7.3.2"

val G_VFS_EXTENSION_POINT_NAME: String get() = "gio\u002Dvfs"

val G_VOLUME_IDENTIFIER_KIND_HAL_UDI: String get() = "hal\u002Dudi"

val G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE: String get() = "unix\u002Ddevice"

val G_VOLUME_IDENTIFIER_KIND_LABEL: String get() = "label"

val G_VOLUME_IDENTIFIER_KIND_UUID: String get() = "uuid"

val G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT: String get() = "nfs\u002Dmount"

val G_VOLUME_IDENTIFIER_KIND_CLASS: String get() = "class"

val G_MENU_ATTRIBUTE_ACTION: String get() = "action"

val G_MENU_ATTRIBUTE_ACTION_NAMESPACE: String get() = "action\u002Dnamespace"

val G_MENU_ATTRIBUTE_TARGET: String get() = "target"

val G_MENU_ATTRIBUTE_LABEL: String get() = "label"

val G_MENU_ATTRIBUTE_ICON: String get() = "icon"

val G_MENU_LINK_SUBMENU: String get() = "submenu"

val G_MENU_LINK_SECTION: String get() = "section"

const val GTK_UNIT_PIXEL: Int = 0

const val GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: Int = -1

const val GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: Int = -2

const val GTK_ENTRY_BUFFER_MAX_SIZE: Int = 65535

const val GTK_STYLE_PROVIDER_PRIORITY_FALLBACK: Int = 1

const val GTK_STYLE_PROVIDER_PRIORITY_THEME: Int = 200

const val GTK_STYLE_PROVIDER_PRIORITY_SETTINGS: Int = 400

const val GTK_STYLE_PROVIDER_PRIORITY_APPLICATION: Int = 600

const val GTK_STYLE_PROVIDER_PRIORITY_USER: Int = 800

val GTK_STYLE_PROPERTY_BACKGROUND_COLOR: String get() = "background\u002Dcolor"

val GTK_STYLE_PROPERTY_COLOR: String get() = "color"

val GTK_STYLE_PROPERTY_FONT: String get() = "font"

val GTK_STYLE_PROPERTY_PADDING: String get() = "padding"

val GTK_STYLE_PROPERTY_BORDER_WIDTH: String get() = "border\u002Dwidth"

val GTK_STYLE_PROPERTY_MARGIN: String get() = "margin"

val GTK_STYLE_PROPERTY_BORDER_RADIUS: String get() = "border\u002Dradius"

val GTK_STYLE_PROPERTY_BORDER_STYLE: String get() = "border\u002Dstyle"

val GTK_STYLE_PROPERTY_BORDER_COLOR: String get() = "border\u002Dcolor"

val GTK_STYLE_PROPERTY_BACKGROUND_IMAGE: String get() = "background\u002Dimage"

val GTK_STYLE_CLASS_CELL: String get() = "cell"

val GTK_STYLE_CLASS_DIM_LABEL: String get() = "dim\u002Dlabel"

val GTK_STYLE_CLASS_ENTRY: String get() = "entry"

val GTK_STYLE_CLASS_LABEL: String get() = "label"

val GTK_STYLE_CLASS_COMBOBOX_ENTRY: String get() = "combobox\u002Dentry"

val GTK_STYLE_CLASS_BUTTON: String get() = "button"

val GTK_STYLE_CLASS_LIST: String get() = "list"

val GTK_STYLE_CLASS_LIST_ROW: String get() = "list\u002Drow"

val GTK_STYLE_CLASS_CALENDAR: String get() = "calendar"

val GTK_STYLE_CLASS_SLIDER: String get() = "slider"

val GTK_STYLE_CLASS_BACKGROUND: String get() = "background"

val GTK_STYLE_CLASS_RUBBERBAND: String get() = "rubberband"

val GTK_STYLE_CLASS_CSD: String get() = "csd"

val GTK_STYLE_CLASS_TOOLTIP: String get() = "tooltip"

val GTK_STYLE_CLASS_MENU: String get() = "menu"

val GTK_STYLE_CLASS_CONTEXT_MENU: String get() = "context\u002Dmenu"

val GTK_STYLE_CLASS_TOUCH_SELECTION: String get() = "touch\u002Dselection"

val GTK_STYLE_CLASS_MENUBAR: String get() = "menubar"

val GTK_STYLE_CLASS_MENUITEM: String get() = "menuitem"

val GTK_STYLE_CLASS_TOOLBAR: String get() = "toolbar"

val GTK_STYLE_CLASS_PRIMARY_TOOLBAR: String get() = "primary\u002Dtoolbar"

val GTK_STYLE_CLASS_INLINE_TOOLBAR: String get() = "inline\u002Dtoolbar"

val GTK_STYLE_CLASS_STATUSBAR: String get() = "statusbar"

val GTK_STYLE_CLASS_RADIO: String get() = "radio"

val GTK_STYLE_CLASS_CHECK: String get() = "check"

val GTK_STYLE_CLASS_DEFAULT: String get() = "default"

val GTK_STYLE_CLASS_TROUGH: String get() = "trough"

val GTK_STYLE_CLASS_SCROLLBAR: String get() = "scrollbar"

val GTK_STYLE_CLASS_SCROLLBARS_JUNCTION: String get() = "scrollbars\u002Djunction"

val GTK_STYLE_CLASS_SCALE: String get() = "scale"

val GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE: String get() = "scale\u002Dhas\u002Dmarks\u002Dabove"

val GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW: String get() = "scale\u002Dhas\u002Dmarks\u002Dbelow"

val GTK_STYLE_CLASS_HEADER: String get() = "header"

val GTK_STYLE_CLASS_ACCELERATOR: String get() = "accelerator"

val GTK_STYLE_CLASS_RAISED: String get() = "raised"

val GTK_STYLE_CLASS_LINKED: String get() = "linked"

val GTK_STYLE_CLASS_GRIP: String get() = "grip"

val GTK_STYLE_CLASS_DOCK: String get() = "dock"

val GTK_STYLE_CLASS_PROGRESSBAR: String get() = "progressbar"

val GTK_STYLE_CLASS_SPINNER: String get() = "spinner"

val GTK_STYLE_CLASS_MARK: String get() = "mark"

val GTK_STYLE_CLASS_EXPANDER: String get() = "expander"

val GTK_STYLE_CLASS_SPINBUTTON: String get() = "spinbutton"

val GTK_STYLE_CLASS_NOTEBOOK: String get() = "notebook"

val GTK_STYLE_CLASS_VIEW: String get() = "view"

val GTK_STYLE_CLASS_SIDEBAR: String get() = "sidebar"

val GTK_STYLE_CLASS_IMAGE: String get() = "image"

val GTK_STYLE_CLASS_HIGHLIGHT: String get() = "highlight"

val GTK_STYLE_CLASS_FRAME: String get() = "frame"

val GTK_STYLE_CLASS_DND: String get() = "dnd"

val GTK_STYLE_CLASS_PANE_SEPARATOR: String get() = "pane\u002Dseparator"

val GTK_STYLE_CLASS_SEPARATOR: String get() = "separator"

val GTK_STYLE_CLASS_INFO: String get() = "info"

val GTK_STYLE_CLASS_WARNING: String get() = "warning"

val GTK_STYLE_CLASS_QUESTION: String get() = "question"

val GTK_STYLE_CLASS_ERROR: String get() = "error"

val GTK_STYLE_CLASS_HORIZONTAL: String get() = "horizontal"

val GTK_STYLE_CLASS_VERTICAL: String get() = "vertical"

val GTK_STYLE_CLASS_TOP: String get() = "top"

val GTK_STYLE_CLASS_BOTTOM: String get() = "bottom"

val GTK_STYLE_CLASS_LEFT: String get() = "left"

val GTK_STYLE_CLASS_RIGHT: String get() = "right"

val GTK_STYLE_CLASS_PULSE: String get() = "pulse"

val GTK_STYLE_CLASS_ARROW: String get() = "arrow"

val GTK_STYLE_CLASS_OSD: String get() = "osd"

val GTK_STYLE_CLASS_LEVEL_BAR: String get() = "level\u002Dbar"

val GTK_STYLE_CLASS_CURSOR_HANDLE: String get() = "cursor\u002Dhandle"

val GTK_STYLE_CLASS_INSERTION_CURSOR: String get() = "insertion\u002Dcursor"

val GTK_STYLE_CLASS_TITLEBAR: String get() = "titlebar"

val GTK_STYLE_CLASS_TITLE: String get() = "title"

val GTK_STYLE_CLASS_SUBTITLE: String get() = "subtitle"

val GTK_STYLE_CLASS_NEEDS_ATTENTION: String get() = "needs\u002Dattention"

val GTK_STYLE_CLASS_SUGGESTED_ACTION: String get() = "suggested\u002Daction"

val GTK_STYLE_CLASS_DESTRUCTIVE_ACTION: String get() = "destructive\u002Daction"

val GTK_STYLE_CLASS_POPOVER: String get() = "popover"

val GTK_STYLE_CLASS_POPUP: String get() = "popup"

val GTK_STYLE_CLASS_MESSAGE_DIALOG: String get() = "message\u002Ddialog"

val GTK_STYLE_CLASS_FLAT: String get() = "flat"

val GTK_STYLE_CLASS_READ_ONLY: String get() = "read\u002Donly"

val GTK_STYLE_CLASS_OVERSHOOT: String get() = "overshoot"

val GTK_STYLE_CLASS_UNDERSHOOT: String get() = "undershoot"

val GTK_STYLE_CLASS_PAPER: String get() = "paper"

val GTK_STYLE_CLASS_MONOSPACE: String get() = "monospace"

val GTK_STYLE_CLASS_WIDE: String get() = "wide"

val GTK_STYLE_REGION_ROW: String get() = "row"

val GTK_STYLE_REGION_COLUMN: String get() = "column"

val GTK_STYLE_REGION_COLUMN_HEADER: String get() = "column\u002Dheader"

val GTK_STYLE_REGION_TAB: String get() = "tab"

const val GTK_MAX_COMPOSE_LEN: Int = 7

val GTK_LEVEL_BAR_OFFSET_LOW: String get() = "low"

val GTK_LEVEL_BAR_OFFSET_HIGH: String get() = "high"

val GTK_LEVEL_BAR_OFFSET_FULL: String get() = "full"

const val GTK_PRIORITY_RESIZE: Int = 110

val GTK_PAPER_NAME_A3: String get() = "iso_a3"

val GTK_PAPER_NAME_A4: String get() = "iso_a4"

val GTK_PAPER_NAME_A5: String get() = "iso_a5"

val GTK_PAPER_NAME_B5: String get() = "iso_b5"

val GTK_PAPER_NAME_LETTER: String get() = "na_letter"

val GTK_PAPER_NAME_EXECUTIVE: String get() = "na_executive"

val GTK_PAPER_NAME_LEGAL: String get() = "na_legal"

val GTK_PRINT_SETTINGS_PRINTER: String get() = "printer"

val GTK_PRINT_SETTINGS_ORIENTATION: String get() = "orientation"

val GTK_PRINT_SETTINGS_PAPER_FORMAT: String get() = "paper\u002Dformat"

val GTK_PRINT_SETTINGS_PAPER_WIDTH: String get() = "paper\u002Dwidth"

val GTK_PRINT_SETTINGS_PAPER_HEIGHT: String get() = "paper\u002Dheight"

val GTK_PRINT_SETTINGS_N_COPIES: String get() = "n\u002Dcopies"

val GTK_PRINT_SETTINGS_DEFAULT_SOURCE: String get() = "default\u002Dsource"

val GTK_PRINT_SETTINGS_QUALITY: String get() = "quality"

val GTK_PRINT_SETTINGS_RESOLUTION: String get() = "resolution"

val GTK_PRINT_SETTINGS_USE_COLOR: String get() = "use\u002Dcolor"

val GTK_PRINT_SETTINGS_DUPLEX: String get() = "duplex"

val GTK_PRINT_SETTINGS_COLLATE: String get() = "collate"

val GTK_PRINT_SETTINGS_REVERSE: String get() = "reverse"

val GTK_PRINT_SETTINGS_MEDIA_TYPE: String get() = "media\u002Dtype"

val GTK_PRINT_SETTINGS_DITHER: String get() = "dither"

val GTK_PRINT_SETTINGS_SCALE: String get() = "scale"

val GTK_PRINT_SETTINGS_PRINT_PAGES: String get() = "print\u002Dpages"

val GTK_PRINT_SETTINGS_PAGE_RANGES: String get() = "page\u002Dranges"

val GTK_PRINT_SETTINGS_PAGE_SET: String get() = "page\u002Dset"

val GTK_PRINT_SETTINGS_FINISHINGS: String get() = "finishings"

val GTK_PRINT_SETTINGS_NUMBER_UP: String get() = "number\u002Dup"

val GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT: String get() = "number\u002Dup\u002Dlayout"

val GTK_PRINT_SETTINGS_OUTPUT_BIN: String get() = "output\u002Dbin"

val GTK_PRINT_SETTINGS_RESOLUTION_X: String get() = "resolution\u002Dx"

val GTK_PRINT_SETTINGS_RESOLUTION_Y: String get() = "resolution\u002Dy"

val GTK_PRINT_SETTINGS_PRINTER_LPI: String get() = "printer\u002Dlpi"

val GTK_PRINT_SETTINGS_OUTPUT_DIR: String get() = "output\u002Ddir"

val GTK_PRINT_SETTINGS_OUTPUT_BASENAME: String get() = "output\u002Dbasename"

val GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT: String get() = "output\u002Dfile\u002Dformat"

val GTK_PRINT_SETTINGS_OUTPUT_URI: String get() = "output\u002Duri"

val GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION: String get() = "win32\u002Ddriver\u002Dversion"

val GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA: String get() = "win32\u002Ddriver\u002Dextra"

const val GTK_INPUT_ERROR: Int = -1

const val GTK_TEXT_VIEW_PRIORITY_VALIDATE: Int = 125

const val GTK_MAJOR_VERSION: Int = 3

const val GTK_MINOR_VERSION: Int = 24

const val GTK_MICRO_VERSION: Int = 12

const val GTK_BINARY_AGE: Int = 2412

const val GTK_INTERFACE_AGE: Int = 8

val g_cclosure_marshal_BOOL__FLAGS: CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>(kniBridge7797())

val g_cclosure_marshal_BOOL__BOXED_BOXED: CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>(kniBridge7798())

val G_TYPE_DATE: GType
    get() = kniBridge7799()

val G_TYPE_STRV: GType
    get() = kniBridge7800()

val G_TYPE_GSTRING: GType
    get() = kniBridge7801()

val G_TYPE_HASH_TABLE: GType
    get() = kniBridge7802()

val G_TYPE_REGEX: GType
    get() = kniBridge7803()

val G_TYPE_MATCH_INFO: GType
    get() = kniBridge7804()

val G_TYPE_ARRAY: GType
    get() = kniBridge7805()

val G_TYPE_BYTE_ARRAY: GType
    get() = kniBridge7806()

val G_TYPE_PTR_ARRAY: GType
    get() = kniBridge7807()

val G_TYPE_BYTES: GType
    get() = kniBridge7808()

val G_TYPE_VARIANT_TYPE: GType
    get() = kniBridge7809()

val G_TYPE_ERROR: GType
    get() = kniBridge7810()

val G_TYPE_DATE_TIME: GType
    get() = kniBridge7811()

val G_TYPE_TIME_ZONE: GType
    get() = kniBridge7812()

val G_TYPE_IO_CHANNEL: GType
    get() = kniBridge7813()

val G_TYPE_IO_CONDITION: GType
    get() = kniBridge7814()

val G_TYPE_VARIANT_BUILDER: GType
    get() = kniBridge7815()

val G_TYPE_VARIANT_DICT: GType
    get() = kniBridge7816()

val G_TYPE_MAIN_LOOP: GType
    get() = kniBridge7817()

val G_TYPE_MAIN_CONTEXT: GType
    get() = kniBridge7818()

val G_TYPE_SOURCE: GType
    get() = kniBridge7819()

val G_TYPE_POLLFD: GType
    get() = kniBridge7820()

val G_TYPE_MARKUP_PARSE_CONTEXT: GType
    get() = kniBridge7821()

val G_TYPE_KEY_FILE: GType
    get() = kniBridge7822()

val G_TYPE_MAPPED_FILE: GType
    get() = kniBridge7823()

val G_TYPE_THREAD: GType
    get() = kniBridge7824()

val G_TYPE_CHECKSUM: GType
    get() = kniBridge7825()

val G_TYPE_OPTION_GROUP: GType
    get() = kniBridge7826()

val G_TYPE_CLOSURE: GType
    get() = kniBridge7827()

val G_TYPE_VALUE: GType
    get() = kniBridge7828()

val G_TYPE_INITIALLY_UNOWNED: GType
    get() = kniBridge7829()

val G_TYPE_BINDING_FLAGS: GType
    get() = kniBridge7830()

val G_TYPE_BINDING: GType
    get() = kniBridge7831()

val G_TYPE_PARAM_CHAR: GType
    get() = kniBridge7832()

val G_TYPE_PARAM_UCHAR: GType
    get() = kniBridge7833()

val G_TYPE_PARAM_BOOLEAN: GType
    get() = kniBridge7834()

val G_TYPE_PARAM_INT: GType
    get() = kniBridge7835()

val G_TYPE_PARAM_UINT: GType
    get() = kniBridge7836()

val G_TYPE_PARAM_LONG: GType
    get() = kniBridge7837()

val G_TYPE_PARAM_ULONG: GType
    get() = kniBridge7838()

val G_TYPE_PARAM_INT64: GType
    get() = kniBridge7839()

val G_TYPE_PARAM_UINT64: GType
    get() = kniBridge7840()

val G_TYPE_PARAM_UNICHAR: GType
    get() = kniBridge7841()

val G_TYPE_PARAM_ENUM: GType
    get() = kniBridge7842()

val G_TYPE_PARAM_FLAGS: GType
    get() = kniBridge7843()

val G_TYPE_PARAM_FLOAT: GType
    get() = kniBridge7844()

val G_TYPE_PARAM_DOUBLE: GType
    get() = kniBridge7845()

val G_TYPE_PARAM_STRING: GType
    get() = kniBridge7846()

val G_TYPE_PARAM_PARAM: GType
    get() = kniBridge7847()

val G_TYPE_PARAM_BOXED: GType
    get() = kniBridge7848()

val G_TYPE_PARAM_POINTER: GType
    get() = kniBridge7849()

val G_TYPE_PARAM_VALUE_ARRAY: GType
    get() = kniBridge7850()

val G_TYPE_PARAM_OBJECT: GType
    get() = kniBridge7851()

val G_TYPE_PARAM_OVERRIDE: GType
    get() = kniBridge7852()

val G_TYPE_PARAM_GTYPE: GType
    get() = kniBridge7853()

val G_TYPE_PARAM_VARIANT: GType
    get() = kniBridge7854()

val G_TYPE_TYPE_MODULE: GType
    get() = kniBridge7855()

val G_TYPE_TYPE_PLUGIN: GType
    get() = kniBridge7856()

val G_TYPE_VALUE_ARRAY: GType
    get() = kniBridge7857()

val G_TYPE_GTYPE: GType
    get() = kniBridge7858()

val G_TYPE_UNICODE_TYPE: GType
    get() = kniBridge7859()

val G_TYPE_UNICODE_BREAK_TYPE: GType
    get() = kniBridge7860()

val G_TYPE_UNICODE_SCRIPT: GType
    get() = kniBridge7861()

val G_TYPE_NORMALIZE_MODE: GType
    get() = kniBridge7862()

val G_TYPE_ACTION: GType
    get() = kniBridge7863()

val G_TYPE_ACTION_GROUP: GType
    get() = kniBridge7864()

val G_TYPE_ACTION_MAP: GType
    get() = kniBridge7865()

val G_TYPE_APP_INFO: GType
    get() = kniBridge7866()

val G_TYPE_APP_LAUNCH_CONTEXT: GType
    get() = kniBridge7867()

val G_TYPE_APP_INFO_MONITOR: GType
    get() = kniBridge7868()

val G_TYPE_APPLICATION: GType
    get() = kniBridge7869()

val G_TYPE_APPLICATION_COMMAND_LINE: GType
    get() = kniBridge7870()

val G_TYPE_INITABLE: GType
    get() = kniBridge7871()

val G_TYPE_ASYNC_INITABLE: GType
    get() = kniBridge7872()

val G_TYPE_ASYNC_RESULT: GType
    get() = kniBridge7873()

val G_TYPE_INPUT_STREAM: GType
    get() = kniBridge7874()

val G_TYPE_FILTER_INPUT_STREAM: GType
    get() = kniBridge7875()

val G_TYPE_BUFFERED_INPUT_STREAM: GType
    get() = kniBridge7876()

val G_TYPE_OUTPUT_STREAM: GType
    get() = kniBridge7877()

val G_TYPE_FILTER_OUTPUT_STREAM: GType
    get() = kniBridge7878()

val G_TYPE_BUFFERED_OUTPUT_STREAM: GType
    get() = kniBridge7879()

val G_TYPE_BYTES_ICON: GType
    get() = kniBridge7880()

val G_TYPE_CANCELLABLE: GType
    get() = kniBridge7881()

val G_TYPE_CONVERTER: GType
    get() = kniBridge7882()

val G_TYPE_CHARSET_CONVERTER: GType
    get() = kniBridge7883()

val G_TYPE_CONVERTER_INPUT_STREAM: GType
    get() = kniBridge7884()

val G_TYPE_CONVERTER_OUTPUT_STREAM: GType
    get() = kniBridge7885()

val G_TYPE_CREDENTIALS: GType
    get() = kniBridge7886()

val G_TYPE_DATAGRAM_BASED: GType
    get() = kniBridge7887()

val G_TYPE_DATA_INPUT_STREAM: GType
    get() = kniBridge7888()

val G_TYPE_DATA_OUTPUT_STREAM: GType
    get() = kniBridge7889()

val G_TYPE_DBUS_AUTH_OBSERVER: GType
    get() = kniBridge7890()

val G_TYPE_DBUS_CONNECTION: GType
    get() = kniBridge7891()

val G_DBUS_ERROR: GQuark
    get() = kniBridge7892()

val G_TYPE_DBUS_NODE_INFO: GType
    get() = kniBridge7893()

val G_TYPE_DBUS_INTERFACE_INFO: GType
    get() = kniBridge7894()

val G_TYPE_DBUS_METHOD_INFO: GType
    get() = kniBridge7895()

val G_TYPE_DBUS_SIGNAL_INFO: GType
    get() = kniBridge7896()

val G_TYPE_DBUS_PROPERTY_INFO: GType
    get() = kniBridge7897()

val G_TYPE_DBUS_ARG_INFO: GType
    get() = kniBridge7898()

val G_TYPE_DBUS_ANNOTATION_INFO: GType
    get() = kniBridge7899()

val G_TYPE_DBUS_MESSAGE: GType
    get() = kniBridge7900()

val G_TYPE_DBUS_METHOD_INVOCATION: GType
    get() = kniBridge7901()

val G_TYPE_DBUS_PROXY: GType
    get() = kniBridge7902()

val G_TYPE_DBUS_SERVER: GType
    get() = kniBridge7903()

val G_TYPE_DRIVE: GType
    get() = kniBridge7904()

val G_TYPE_DTLS_CONNECTION: GType
    get() = kniBridge7905()

val G_TYPE_DTLS_CLIENT_CONNECTION: GType
    get() = kniBridge7906()

val G_TYPE_DTLS_SERVER_CONNECTION: GType
    get() = kniBridge7907()

val G_TYPE_ICON: GType
    get() = kniBridge7908()

val G_TYPE_EMBLEM: GType
    get() = kniBridge7909()

val G_TYPE_EMBLEMED_ICON: GType
    get() = kniBridge7910()

val G_TYPE_FILE_ATTRIBUTE_INFO_LIST: GType
    get() = kniBridge7911()

val G_TYPE_FILE_ENUMERATOR: GType
    get() = kniBridge7912()

val G_TYPE_FILE: GType
    get() = kniBridge7913()

val G_TYPE_FILE_ICON: GType
    get() = kniBridge7914()

val G_TYPE_FILE_INFO: GType
    get() = kniBridge7915()

val G_TYPE_FILE_ATTRIBUTE_MATCHER: GType
    get() = kniBridge7916()

val G_TYPE_FILE_INPUT_STREAM: GType
    get() = kniBridge7917()

val G_IO_ERROR: GQuark
    get() = kniBridge7918()

val G_TYPE_IO_STREAM: GType
    get() = kniBridge7919()

val G_TYPE_FILE_IO_STREAM: GType
    get() = kniBridge7920()

val G_TYPE_FILE_MONITOR: GType
    get() = kniBridge7921()

val G_TYPE_FILENAME_COMPLETER: GType
    get() = kniBridge7922()

val G_TYPE_FILE_OUTPUT_STREAM: GType
    get() = kniBridge7923()

val G_TYPE_INET_ADDRESS: GType
    get() = kniBridge7924()

val G_TYPE_INET_ADDRESS_MASK: GType
    get() = kniBridge7925()

val G_TYPE_SOCKET_ADDRESS: GType
    get() = kniBridge7926()

val G_TYPE_INET_SOCKET_ADDRESS: GType
    get() = kniBridge7927()

val G_TYPE_APP_INFO_CREATE_FLAGS: GType
    get() = kniBridge7928()

val G_TYPE_CONVERTER_FLAGS: GType
    get() = kniBridge7929()

val G_TYPE_CONVERTER_RESULT: GType
    get() = kniBridge7930()

val G_TYPE_DATA_STREAM_BYTE_ORDER: GType
    get() = kniBridge7931()

val G_TYPE_DATA_STREAM_NEWLINE_TYPE: GType
    get() = kniBridge7932()

val G_TYPE_FILE_ATTRIBUTE_TYPE: GType
    get() = kniBridge7933()

val G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS: GType
    get() = kniBridge7934()

val G_TYPE_FILE_ATTRIBUTE_STATUS: GType
    get() = kniBridge7935()

val G_TYPE_FILE_QUERY_INFO_FLAGS: GType
    get() = kniBridge7936()

val G_TYPE_FILE_CREATE_FLAGS: GType
    get() = kniBridge7937()

val G_TYPE_FILE_MEASURE_FLAGS: GType
    get() = kniBridge7938()

val G_TYPE_MOUNT_MOUNT_FLAGS: GType
    get() = kniBridge7939()

val G_TYPE_MOUNT_UNMOUNT_FLAGS: GType
    get() = kniBridge7940()

val G_TYPE_DRIVE_START_FLAGS: GType
    get() = kniBridge7941()

val G_TYPE_DRIVE_START_STOP_TYPE: GType
    get() = kniBridge7942()

val G_TYPE_FILE_COPY_FLAGS: GType
    get() = kniBridge7943()

val G_TYPE_FILE_MONITOR_FLAGS: GType
    get() = kniBridge7944()

val G_TYPE_FILE_TYPE: GType
    get() = kniBridge7945()

val G_TYPE_FILESYSTEM_PREVIEW_TYPE: GType
    get() = kniBridge7946()

val G_TYPE_FILE_MONITOR_EVENT: GType
    get() = kniBridge7947()

val G_TYPE_IO_ERROR_ENUM: GType
    get() = kniBridge7948()

val G_TYPE_ASK_PASSWORD_FLAGS: GType
    get() = kniBridge7949()

val G_TYPE_PASSWORD_SAVE: GType
    get() = kniBridge7950()

val G_TYPE_MOUNT_OPERATION_RESULT: GType
    get() = kniBridge7951()

val G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS: GType
    get() = kniBridge7952()

val G_TYPE_IO_STREAM_SPLICE_FLAGS: GType
    get() = kniBridge7953()

val G_TYPE_EMBLEM_ORIGIN: GType
    get() = kniBridge7954()

val G_TYPE_RESOLVER_ERROR: GType
    get() = kniBridge7955()

val G_TYPE_RESOLVER_RECORD_TYPE: GType
    get() = kniBridge7956()

val G_TYPE_RESOURCE_ERROR: GType
    get() = kniBridge7957()

val G_TYPE_RESOURCE_FLAGS: GType
    get() = kniBridge7958()

val G_TYPE_RESOURCE_LOOKUP_FLAGS: GType
    get() = kniBridge7959()

val G_TYPE_SOCKET_FAMILY: GType
    get() = kniBridge7960()

val G_TYPE_SOCKET_TYPE: GType
    get() = kniBridge7961()

val G_TYPE_SOCKET_MSG_FLAGS: GType
    get() = kniBridge7962()

val G_TYPE_SOCKET_PROTOCOL: GType
    get() = kniBridge7963()

val G_TYPE_ZLIB_COMPRESSOR_FORMAT: GType
    get() = kniBridge7964()

val G_TYPE_UNIX_SOCKET_ADDRESS_TYPE: GType
    get() = kniBridge7965()

val G_TYPE_BUS_TYPE: GType
    get() = kniBridge7966()

val G_TYPE_BUS_NAME_OWNER_FLAGS: GType
    get() = kniBridge7967()

val G_TYPE_BUS_NAME_WATCHER_FLAGS: GType
    get() = kniBridge7968()

val G_TYPE_DBUS_PROXY_FLAGS: GType
    get() = kniBridge7969()

val G_TYPE_DBUS_ERROR: GType
    get() = kniBridge7970()

val G_TYPE_DBUS_CONNECTION_FLAGS: GType
    get() = kniBridge7971()

val G_TYPE_DBUS_CAPABILITY_FLAGS: GType
    get() = kniBridge7972()

val G_TYPE_DBUS_CALL_FLAGS: GType
    get() = kniBridge7973()

val G_TYPE_DBUS_MESSAGE_TYPE: GType
    get() = kniBridge7974()

val G_TYPE_DBUS_MESSAGE_FLAGS: GType
    get() = kniBridge7975()

val G_TYPE_DBUS_MESSAGE_HEADER_FIELD: GType
    get() = kniBridge7976()

val G_TYPE_DBUS_PROPERTY_INFO_FLAGS: GType
    get() = kniBridge7977()

val G_TYPE_DBUS_SUBTREE_FLAGS: GType
    get() = kniBridge7978()

val G_TYPE_DBUS_SERVER_FLAGS: GType
    get() = kniBridge7979()

val G_TYPE_DBUS_SIGNAL_FLAGS: GType
    get() = kniBridge7980()

val G_TYPE_DBUS_SEND_MESSAGE_FLAGS: GType
    get() = kniBridge7981()

val G_TYPE_CREDENTIALS_TYPE: GType
    get() = kniBridge7982()

val G_TYPE_DBUS_MESSAGE_BYTE_ORDER: GType
    get() = kniBridge7983()

val G_TYPE_APPLICATION_FLAGS: GType
    get() = kniBridge7984()

val G_TYPE_TLS_ERROR: GType
    get() = kniBridge7985()

val G_TYPE_TLS_CERTIFICATE_FLAGS: GType
    get() = kniBridge7986()

val G_TYPE_TLS_AUTHENTICATION_MODE: GType
    get() = kniBridge7987()

val G_TYPE_TLS_REHANDSHAKE_MODE: GType
    get() = kniBridge7988()

val G_TYPE_TLS_PASSWORD_FLAGS: GType
    get() = kniBridge7989()

val G_TYPE_TLS_INTERACTION_RESULT: GType
    get() = kniBridge7990()

val G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS: GType
    get() = kniBridge7991()

val G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS: GType
    get() = kniBridge7992()

val G_TYPE_TLS_DATABASE_VERIFY_FLAGS: GType
    get() = kniBridge7993()

val G_TYPE_TLS_DATABASE_LOOKUP_FLAGS: GType
    get() = kniBridge7994()

val G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS: GType
    get() = kniBridge7995()

val G_TYPE_IO_MODULE_SCOPE_FLAGS: GType
    get() = kniBridge7996()

val G_TYPE_SOCKET_CLIENT_EVENT: GType
    get() = kniBridge7997()

val G_TYPE_SOCKET_LISTENER_EVENT: GType
    get() = kniBridge7998()

val G_TYPE_TEST_DBUS_FLAGS: GType
    get() = kniBridge7999()

val G_TYPE_SUBPROCESS_FLAGS: GType
    get() = kniBridge8000()

val G_TYPE_NOTIFICATION_PRIORITY: GType
    get() = kniBridge8001()

val G_TYPE_NETWORK_CONNECTIVITY: GType
    get() = kniBridge8002()

val G_TYPE_POLLABLE_RETURN: GType
    get() = kniBridge8003()

val G_TYPE_RESOLVER_NAME_LOOKUP_FLAGS: GType
    get() = kniBridge8004()

val G_TYPE_SETTINGS_BIND_FLAGS: GType
    get() = kniBridge8005()

val G_IO_TYPE_MODULE: GType
    get() = kniBridge8006()

val G_TYPE_LOADABLE_ICON: GType
    get() = kniBridge8007()

val G_TYPE_MEMORY_INPUT_STREAM: GType
    get() = kniBridge8008()

val G_TYPE_MEMORY_OUTPUT_STREAM: GType
    get() = kniBridge8009()

val G_TYPE_MOUNT: GType
    get() = kniBridge8010()

val G_TYPE_MOUNT_OPERATION: GType
    get() = kniBridge8011()

val G_TYPE_NATIVE_SOCKET_ADDRESS: GType
    get() = kniBridge8012()

val G_TYPE_VOLUME_MONITOR: GType
    get() = kniBridge8013()

val G_TYPE_NATIVE_VOLUME_MONITOR: GType
    get() = kniBridge8014()

val G_TYPE_NETWORK_ADDRESS: GType
    get() = kniBridge8015()

val G_TYPE_NETWORK_MONITOR: GType
    get() = kniBridge8016()

val G_TYPE_NETWORK_SERVICE: GType
    get() = kniBridge8017()

val G_TYPE_PERMISSION: GType
    get() = kniBridge8018()

val G_TYPE_POLLABLE_INPUT_STREAM: GType
    get() = kniBridge8019()

val G_TYPE_POLLABLE_OUTPUT_STREAM: GType
    get() = kniBridge8020()

val G_TYPE_PROPERTY_ACTION: GType
    get() = kniBridge8021()

val G_TYPE_PROXY: GType
    get() = kniBridge8022()

val G_TYPE_PROXY_ADDRESS: GType
    get() = kniBridge8023()

val G_TYPE_SOCKET_ADDRESS_ENUMERATOR: GType
    get() = kniBridge8024()

val G_TYPE_PROXY_ADDRESS_ENUMERATOR: GType
    get() = kniBridge8025()

val G_TYPE_PROXY_RESOLVER: GType
    get() = kniBridge8026()

val G_TYPE_RESOLVER: GType
    get() = kniBridge8027()

val G_RESOLVER_ERROR: GQuark
    get() = kniBridge8028()

val G_TYPE_RESOURCE: GType
    get() = kniBridge8029()

val G_RESOURCE_ERROR: GQuark
    get() = kniBridge8030()

val G_TYPE_SEEKABLE: GType
    get() = kniBridge8031()

val G_TYPE_SETTINGS_SCHEMA_SOURCE: GType
    get() = kniBridge8032()

val G_TYPE_SETTINGS_SCHEMA: GType
    get() = kniBridge8033()

val G_TYPE_SETTINGS_SCHEMA_KEY: GType
    get() = kniBridge8034()

val G_TYPE_SETTINGS: GType
    get() = kniBridge8035()

val G_TYPE_SIMPLE_ACTION: GType
    get() = kniBridge8036()

val G_TYPE_SIMPLE_ACTION_GROUP: GType
    get() = kniBridge8037()

val G_TYPE_SIMPLE_ASYNC_RESULT: GType
    get() = kniBridge8038()

val G_TYPE_SIMPLE_IO_STREAM: GType
    get() = kniBridge8039()

val G_TYPE_SIMPLE_PERMISSION: GType
    get() = kniBridge8040()

val G_TYPE_SOCKET_CLIENT: GType
    get() = kniBridge8041()

val G_TYPE_SOCKET_CONNECTABLE: GType
    get() = kniBridge8042()

val G_TYPE_SOCKET: GType
    get() = kniBridge8043()

val G_TYPE_SOCKET_CONNECTION: GType
    get() = kniBridge8044()

val G_TYPE_SOCKET_CONTROL_MESSAGE: GType
    get() = kniBridge8045()

val G_TYPE_SOCKET_LISTENER: GType
    get() = kniBridge8046()

val G_TYPE_SOCKET_SERVICE: GType
    get() = kniBridge8047()

val G_TYPE_SRV_TARGET: GType
    get() = kniBridge8048()

val G_TYPE_SIMPLE_PROXY_RESOLVER: GType
    get() = kniBridge8049()

val G_TYPE_TASK: GType
    get() = kniBridge8050()

val G_TYPE_SUBPROCESS: GType
    get() = kniBridge8051()

val G_TYPE_SUBPROCESS_LAUNCHER: GType
    get() = kniBridge8052()

val G_TYPE_TCP_CONNECTION: GType
    get() = kniBridge8053()

val G_TYPE_TCP_WRAPPER_CONNECTION: GType
    get() = kniBridge8054()

val G_TYPE_TEST_DBUS: GType
    get() = kniBridge8055()

val G_TYPE_THEMED_ICON: GType
    get() = kniBridge8056()

val G_TYPE_THREADED_SOCKET_SERVICE: GType
    get() = kniBridge8057()

val G_TYPE_TLS_BACKEND: GType
    get() = kniBridge8058()

val G_TYPE_TLS_CERTIFICATE: GType
    get() = kniBridge8059()

val G_TYPE_TLS_CONNECTION: GType
    get() = kniBridge8060()

val G_TLS_ERROR: GQuark
    get() = kniBridge8061()

val G_TYPE_TLS_CLIENT_CONNECTION: GType
    get() = kniBridge8062()

val G_TYPE_TLS_DATABASE: GType
    get() = kniBridge8063()

val G_TYPE_TLS_FILE_DATABASE: GType
    get() = kniBridge8064()

val G_TYPE_TLS_INTERACTION: GType
    get() = kniBridge8065()

val G_TYPE_TLS_SERVER_CONNECTION: GType
    get() = kniBridge8066()

val G_TYPE_TLS_PASSWORD: GType
    get() = kniBridge8067()

val G_TYPE_VFS: GType
    get() = kniBridge8068()

val G_TYPE_VOLUME: GType
    get() = kniBridge8069()

val G_TYPE_ZLIB_COMPRESSOR: GType
    get() = kniBridge8070()

val G_TYPE_ZLIB_DECOMPRESSOR: GType
    get() = kniBridge8071()

val G_TYPE_DBUS_INTERFACE: GType
    get() = kniBridge8072()

val G_TYPE_DBUS_INTERFACE_SKELETON: GType
    get() = kniBridge8073()

val G_TYPE_DBUS_OBJECT: GType
    get() = kniBridge8074()

val G_TYPE_DBUS_OBJECT_SKELETON: GType
    get() = kniBridge8075()

val G_TYPE_DBUS_OBJECT_PROXY: GType
    get() = kniBridge8076()

val G_TYPE_DBUS_OBJECT_MANAGER: GType
    get() = kniBridge8077()

val G_TYPE_DBUS_OBJECT_MANAGER_CLIENT: GType
    get() = kniBridge8078()

val G_TYPE_DBUS_OBJECT_MANAGER_SERVER: GType
    get() = kniBridge8079()

val G_TYPE_DBUS_ACTION_GROUP: GType
    get() = kniBridge8080()

val G_TYPE_REMOTE_ACTION_GROUP: GType
    get() = kniBridge8081()

val G_TYPE_MENU_MODEL: GType
    get() = kniBridge8082()

val G_TYPE_MENU_ATTRIBUTE_ITER: GType
    get() = kniBridge8083()

val G_TYPE_MENU_LINK_ITER: GType
    get() = kniBridge8084()

val G_TYPE_MENU: GType
    get() = kniBridge8085()

val G_TYPE_MENU_ITEM: GType
    get() = kniBridge8086()

val G_TYPE_DBUS_MENU_MODEL: GType
    get() = kniBridge8087()

val G_TYPE_NOTIFICATION: GType
    get() = kniBridge8088()

val G_TYPE_LIST_MODEL: GType
    get() = kniBridge8089()

val G_TYPE_LIST_STORE: GType
    get() = kniBridge8090()

val GTK_TYPE_ACCEL_GROUP: GType
    get() = kniBridge8091()

val GTK_TYPE_BORDER: GType
    get() = kniBridge8092()

val GTK_TYPE_WIDGET: GType
    get() = kniBridge8093()

val GTK_TYPE_REQUISITION: GType
    get() = kniBridge8094()

val GTK_TYPE_APPLICATION: GType
    get() = kniBridge8095()

val GTK_TYPE_CONTAINER: GType
    get() = kniBridge8096()

val GTK_TYPE_BIN: GType
    get() = kniBridge8097()

val GTK_TYPE_WINDOW: GType
    get() = kniBridge8098()

val GTK_TYPE_DIALOG: GType
    get() = kniBridge8099()

val GTK_TYPE_ABOUT_DIALOG: GType
    get() = kniBridge8100()

val GTK_TYPE_MENU_SHELL: GType
    get() = kniBridge8101()

val GTK_TYPE_MENU: GType
    get() = kniBridge8102()

val GTK_TYPE_LABEL: GType
    get() = kniBridge8103()

val GTK_TYPE_ACCEL_LABEL: GType
    get() = kniBridge8104()

val GTK_TYPE_ACCEL_MAP: GType
    get() = kniBridge8105()

val GTK_TYPE_ACCESSIBLE: GType
    get() = kniBridge8106()

val GTK_TYPE_ACTIONABLE: GType
    get() = kniBridge8107()

val GTK_TYPE_ACTION_BAR: GType
    get() = kniBridge8108()

val GTK_TYPE_ADJUSTMENT: GType
    get() = kniBridge8109()

val GTK_TYPE_APP_CHOOSER: GType
    get() = kniBridge8110()

val GTK_TYPE_APP_CHOOSER_DIALOG: GType
    get() = kniBridge8111()

val GTK_TYPE_BOX: GType
    get() = kniBridge8112()

val GTK_TYPE_APP_CHOOSER_WIDGET: GType
    get() = kniBridge8113()

val GTK_TYPE_TREE_MODEL: GType
    get() = kniBridge8114()

val GTK_TYPE_TREE_ITER: GType
    get() = kniBridge8115()

val GTK_TYPE_TREE_PATH: GType
    get() = kniBridge8116()

val GTK_TYPE_TREE_ROW_REFERENCE: GType
    get() = kniBridge8117()

val GTK_TYPE_CELL_EDITABLE: GType
    get() = kniBridge8118()

val GTK_TYPE_CELL_RENDERER: GType
    get() = kniBridge8119()

val GTK_TYPE_TREE_SORTABLE: GType
    get() = kniBridge8120()

val GTK_TYPE_CELL_AREA: GType
    get() = kniBridge8121()

val GTK_TYPE_TREE_VIEW_COLUMN: GType
    get() = kniBridge8122()

val GTK_TYPE_TEXT_ATTRIBUTES: GType
    get() = kniBridge8123()

val GTK_TYPE_TEXT_CHILD_ANCHOR: GType
    get() = kniBridge8124()

val GTK_TYPE_TEXT_TAG: GType
    get() = kniBridge8125()

val GTK_TYPE_TEXT_ITER: GType
    get() = kniBridge8126()

val GTK_TYPE_SELECTION_DATA: GType
    get() = kniBridge8127()

val GTK_TYPE_TARGET_LIST: GType
    get() = kniBridge8128()

val GTK_TYPE_EDITABLE: GType
    get() = kniBridge8129()

val GTK_TYPE_IM_CONTEXT: GType
    get() = kniBridge8130()

val GTK_TYPE_ENTRY_BUFFER: GType
    get() = kniBridge8131()

val GTK_TYPE_LIST_STORE: GType
    get() = kniBridge8132()

val GTK_TYPE_TREE_MODEL_FILTER: GType
    get() = kniBridge8133()

val GTK_TYPE_ENTRY_COMPLETION: GType
    get() = kniBridge8134()

val GTK_TYPE_IMAGE: GType
    get() = kniBridge8135()

val GTK_TYPE_ENTRY: GType
    get() = kniBridge8136()

val GTK_TYPE_TREE_VIEW: GType
    get() = kniBridge8137()

val GTK_TYPE_COMBO_BOX: GType
    get() = kniBridge8138()

val GTK_TYPE_APP_CHOOSER_BUTTON: GType
    get() = kniBridge8139()

val GTK_TYPE_SHORTCUTS_WINDOW: GType
    get() = kniBridge8140()

val GTK_TYPE_APPLICATION_WINDOW: GType
    get() = kniBridge8141()

val GTK_TYPE_FRAME: GType
    get() = kniBridge8142()

val GTK_TYPE_ASPECT_FRAME: GType
    get() = kniBridge8143()

val GTK_TYPE_ASSISTANT: GType
    get() = kniBridge8144()

val GTK_TYPE_BUTTON_BOX: GType
    get() = kniBridge8145()

val GTK_TYPE_BUILDER: GType
    get() = kniBridge8146()

val GTK_BUILDER_ERROR: GQuark
    get() = kniBridge8147()

val GTK_TYPE_BUILDABLE: GType
    get() = kniBridge8148()

val GTK_TYPE_BUTTON: GType
    get() = kniBridge8149()

val GTK_TYPE_CALENDAR: GType
    get() = kniBridge8150()

val GTK_TYPE_CELL_AREA_BOX: GType
    get() = kniBridge8151()

val GTK_TYPE_CELL_AREA_CONTEXT: GType
    get() = kniBridge8152()

val GTK_TYPE_CELL_LAYOUT: GType
    get() = kniBridge8153()

val GTK_TYPE_CELL_RENDERER_TEXT: GType
    get() = kniBridge8154()

val GTK_TYPE_CELL_RENDERER_ACCEL: GType
    get() = kniBridge8155()

val GTK_TYPE_CELL_RENDERER_COMBO: GType
    get() = kniBridge8156()

val GTK_TYPE_CELL_RENDERER_PIXBUF: GType
    get() = kniBridge8157()

val GTK_TYPE_CELL_RENDERER_PROGRESS: GType
    get() = kniBridge8158()

val GTK_TYPE_CELL_RENDERER_SPIN: GType
    get() = kniBridge8159()

val GTK_TYPE_CELL_RENDERER_SPINNER: GType
    get() = kniBridge8160()

val GTK_TYPE_CELL_RENDERER_TOGGLE: GType
    get() = kniBridge8161()

val GTK_TYPE_CELL_VIEW: GType
    get() = kniBridge8162()

val GTK_TYPE_TOGGLE_BUTTON: GType
    get() = kniBridge8163()

val GTK_TYPE_CHECK_BUTTON: GType
    get() = kniBridge8164()

val GTK_TYPE_MENU_ITEM: GType
    get() = kniBridge8165()

val GTK_TYPE_CHECK_MENU_ITEM: GType
    get() = kniBridge8166()

val GTK_TYPE_CLIPBOARD: GType
    get() = kniBridge8167()

val GTK_TYPE_COLOR_BUTTON: GType
    get() = kniBridge8168()

val GTK_TYPE_COLOR_CHOOSER: GType
    get() = kniBridge8169()

val GTK_TYPE_COLOR_CHOOSER_DIALOG: GType
    get() = kniBridge8170()

val GTK_TYPE_COLOR_CHOOSER_WIDGET: GType
    get() = kniBridge8171()

val GTK_TYPE_COMBO_BOX_TEXT: GType
    get() = kniBridge8172()

val GTK_TYPE_CSS_SECTION: GType
    get() = kniBridge8173()

val GTK_TYPE_CSS_PROVIDER: GType
    get() = kniBridge8174()

val GTK_CSS_PROVIDER_ERROR: GQuark
    get() = kniBridge8175()

val GTK_TYPE_DRAWING_AREA: GType
    get() = kniBridge8176()

val GTK_TYPE_EVENT_BOX: GType
    get() = kniBridge8177()

val GTK_TYPE_EVENT_CONTROLLER: GType
    get() = kniBridge8178()

val GTK_TYPE_EVENT_CONTROLLER_KEY: GType
    get() = kniBridge8179()

val GTK_TYPE_EVENT_CONTROLLER_MOTION: GType
    get() = kniBridge8180()

val GTK_TYPE_EVENT_CONTROLLER_SCROLL: GType
    get() = kniBridge8181()

val GTK_TYPE_EXPANDER: GType
    get() = kniBridge8182()

val GTK_TYPE_FIXED: GType
    get() = kniBridge8183()

val GTK_TYPE_FILE_FILTER: GType
    get() = kniBridge8184()

val GTK_TYPE_FILE_CHOOSER: GType
    get() = kniBridge8185()

val GTK_FILE_CHOOSER_ERROR: GQuark
    get() = kniBridge8186()

val GTK_TYPE_FILE_CHOOSER_BUTTON: GType
    get() = kniBridge8187()

val GTK_TYPE_FILE_CHOOSER_DIALOG: GType
    get() = kniBridge8188()

val GTK_TYPE_NATIVE_DIALOG: GType
    get() = kniBridge8189()

val GTK_TYPE_FILE_CHOOSER_NATIVE: GType
    get() = kniBridge8190()

val GTK_TYPE_FILE_CHOOSER_WIDGET: GType
    get() = kniBridge8191()

val GTK_TYPE_FLOW_BOX: GType
    get() = kniBridge8192()

val GTK_TYPE_FLOW_BOX_CHILD: GType
    get() = kniBridge8193()

val GTK_TYPE_FONT_BUTTON: GType
    get() = kniBridge8194()

val GTK_TYPE_FONT_CHOOSER: GType
    get() = kniBridge8195()

val GTK_TYPE_FONT_CHOOSER_DIALOG: GType
    get() = kniBridge8196()

val GTK_TYPE_FONT_CHOOSER_WIDGET: GType
    get() = kniBridge8197()

val GTK_TYPE_GESTURE: GType
    get() = kniBridge8198()

val GTK_TYPE_GESTURE_SINGLE: GType
    get() = kniBridge8199()

val GTK_TYPE_GESTURE_DRAG: GType
    get() = kniBridge8200()

val GTK_TYPE_GESTURE_LONG_PRESS: GType
    get() = kniBridge8201()

val GTK_TYPE_GESTURE_MULTI_PRESS: GType
    get() = kniBridge8202()

val GTK_TYPE_GESTURE_PAN: GType
    get() = kniBridge8203()

val GTK_TYPE_GESTURE_ROTATE: GType
    get() = kniBridge8204()

val GTK_TYPE_GESTURE_STYLUS: GType
    get() = kniBridge8205()

val GTK_TYPE_GESTURE_SWIPE: GType
    get() = kniBridge8206()

val GTK_TYPE_GESTURE_ZOOM: GType
    get() = kniBridge8207()

val GTK_TYPE_GL_AREA: GType
    get() = kniBridge8208()

val GTK_TYPE_GRID: GType
    get() = kniBridge8209()

val GTK_TYPE_HEADER_BAR: GType
    get() = kniBridge8210()

val GTK_TYPE_STYLE_PROVIDER: GType
    get() = kniBridge8211()

val GTK_TYPE_STYLE_CONTEXT: GType
    get() = kniBridge8212()

val GTK_TYPE_ICON_INFO: GType
    get() = kniBridge8213()

val GTK_TYPE_ICON_THEME: GType
    get() = kniBridge8214()

val GTK_ICON_THEME_ERROR: GQuark
    get() = kniBridge8215()

val GTK_TYPE_TOOLTIP: GType
    get() = kniBridge8216()

val GTK_TYPE_ICON_VIEW: GType
    get() = kniBridge8217()

val GTK_TYPE_IM_CONTEXT_SIMPLE: GType
    get() = kniBridge8218()

val GTK_TYPE_IM_MULTICONTEXT: GType
    get() = kniBridge8219()

val GTK_TYPE_INFO_BAR: GType
    get() = kniBridge8220()

val GTK_TYPE_INVISIBLE: GType
    get() = kniBridge8221()

val GTK_TYPE_LAYOUT: GType
    get() = kniBridge8222()

val GTK_TYPE_LEVEL_BAR: GType
    get() = kniBridge8223()

val GTK_TYPE_LINK_BUTTON: GType
    get() = kniBridge8224()

val GTK_TYPE_LIST_BOX: GType
    get() = kniBridge8225()

val GTK_TYPE_LIST_BOX_ROW: GType
    get() = kniBridge8226()

val GTK_TYPE_LOCK_BUTTON: GType
    get() = kniBridge8227()

val gtk_major_version: guint
    get() = kniBridge8228()

val gtk_minor_version: guint
    get() = kniBridge8229()

val gtk_micro_version: guint
    get() = kniBridge8230()

val gtk_binary_age: guint
    get() = kniBridge8231()

val gtk_interface_age: guint
    get() = kniBridge8232()

val GTK_TYPE_MENU_BAR: GType
    get() = kniBridge8233()

val GTK_TYPE_POPOVER: GType
    get() = kniBridge8234()

val GTK_TYPE_MENU_BUTTON: GType
    get() = kniBridge8235()

val GTK_TYPE_SIZE_GROUP: GType
    get() = kniBridge8236()

val GTK_TYPE_TOOL_ITEM: GType
    get() = kniBridge8237()

val GTK_TYPE_TOOL_BUTTON: GType
    get() = kniBridge8238()

val GTK_TYPE_MENU_TOOL_BUTTON: GType
    get() = kniBridge8239()

val GTK_TYPE_MESSAGE_DIALOG: GType
    get() = kniBridge8240()

val GTK_TYPE_MODEL_BUTTON: GType
    get() = kniBridge8241()

val GTK_TYPE_MOUNT_OPERATION: GType
    get() = kniBridge8242()

val GTK_TYPE_NOTEBOOK: GType
    get() = kniBridge8243()

val GTK_TYPE_OFFSCREEN_WINDOW: GType
    get() = kniBridge8244()

val GTK_TYPE_ORIENTABLE: GType
    get() = kniBridge8245()

val GTK_TYPE_OVERLAY: GType
    get() = kniBridge8246()

val GTK_TYPE_PAD_CONTROLLER: GType
    get() = kniBridge8247()

val GTK_TYPE_PAPER_SIZE: GType
    get() = kniBridge8248()

val GTK_TYPE_PAGE_SETUP: GType
    get() = kniBridge8249()

val GTK_TYPE_PANED: GType
    get() = kniBridge8250()

val GTK_TYPE_PLACES_SIDEBAR: GType
    get() = kniBridge8251()

val GTK_TYPE_POPOVER_MENU: GType
    get() = kniBridge8252()

val GTK_TYPE_PRINT_CONTEXT: GType
    get() = kniBridge8253()

val GTK_TYPE_PRINT_SETTINGS: GType
    get() = kniBridge8254()

val GTK_TYPE_PRINT_OPERATION_PREVIEW: GType
    get() = kniBridge8255()

val GTK_TYPE_PRINT_OPERATION: GType
    get() = kniBridge8256()

val GTK_PRINT_ERROR: GQuark
    get() = kniBridge8257()

val GTK_TYPE_PROGRESS_BAR: GType
    get() = kniBridge8258()

val GTK_TYPE_RADIO_BUTTON: GType
    get() = kniBridge8259()

val GTK_TYPE_RADIO_MENU_ITEM: GType
    get() = kniBridge8260()

val GTK_TYPE_TOGGLE_TOOL_BUTTON: GType
    get() = kniBridge8261()

val GTK_TYPE_RADIO_TOOL_BUTTON: GType
    get() = kniBridge8262()

val GTK_TYPE_RANGE: GType
    get() = kniBridge8263()

val GTK_TYPE_RECENT_INFO: GType
    get() = kniBridge8264()

val GTK_TYPE_RECENT_MANAGER: GType
    get() = kniBridge8265()

val GTK_RECENT_MANAGER_ERROR: GQuark
    get() = kniBridge8266()

val GTK_TYPE_RECENT_FILTER: GType
    get() = kniBridge8267()

val GTK_TYPE_RECENT_CHOOSER: GType
    get() = kniBridge8268()

val GTK_RECENT_CHOOSER_ERROR: GQuark
    get() = kniBridge8269()

val GTK_TYPE_RECENT_CHOOSER_DIALOG: GType
    get() = kniBridge8270()

val GTK_TYPE_RECENT_CHOOSER_MENU: GType
    get() = kniBridge8271()

val GTK_TYPE_RECENT_CHOOSER_WIDGET: GType
    get() = kniBridge8272()

val GTK_TYPE_REVEALER: GType
    get() = kniBridge8273()

val GTK_TYPE_SCALE: GType
    get() = kniBridge8274()

val GTK_TYPE_SCALE_BUTTON: GType
    get() = kniBridge8275()

val GTK_TYPE_SCROLLABLE: GType
    get() = kniBridge8276()

val GTK_TYPE_SCROLLBAR: GType
    get() = kniBridge8277()

val GTK_TYPE_SCROLLED_WINDOW: GType
    get() = kniBridge8278()

val GTK_TYPE_SEARCH_BAR: GType
    get() = kniBridge8279()

val GTK_TYPE_SEARCH_ENTRY: GType
    get() = kniBridge8280()

val GTK_TYPE_SEPARATOR: GType
    get() = kniBridge8281()

val GTK_TYPE_SEPARATOR_MENU_ITEM: GType
    get() = kniBridge8282()

val GTK_TYPE_SEPARATOR_TOOL_ITEM: GType
    get() = kniBridge8283()

val GTK_TYPE_SETTINGS: GType
    get() = kniBridge8284()

val GTK_TYPE_SHORTCUT_LABEL: GType
    get() = kniBridge8285()

val GTK_TYPE_SHORTCUTS_GROUP: GType
    get() = kniBridge8286()

val GTK_TYPE_SHORTCUTS_SECTION: GType
    get() = kniBridge8287()

val GTK_TYPE_SHORTCUTS_SHORTCUT: GType
    get() = kniBridge8288()

val GTK_TYPE_STACK: GType
    get() = kniBridge8289()

val GTK_TYPE_STACK_SIDEBAR: GType
    get() = kniBridge8290()

val GTK_TYPE_SPIN_BUTTON: GType
    get() = kniBridge8291()

val GTK_TYPE_SPINNER: GType
    get() = kniBridge8292()

val GTK_TYPE_STACK_SWITCHER: GType
    get() = kniBridge8293()

val GTK_TYPE_STATUSBAR: GType
    get() = kniBridge8294()

val GTK_TYPE_SWITCH: GType
    get() = kniBridge8295()

val GTK_TYPE_TEXT_TAG_TABLE: GType
    get() = kniBridge8296()

val GTK_TYPE_TEXT_MARK: GType
    get() = kniBridge8297()

val GTK_TYPE_TEXT_BUFFER: GType
    get() = kniBridge8298()

val GTK_TYPE_TEXT_VIEW: GType
    get() = kniBridge8299()

val GTK_TYPE_TOOLBAR: GType
    get() = kniBridge8300()

val GTK_TYPE_TOOL_ITEM_GROUP: GType
    get() = kniBridge8301()

val GTK_TYPE_TOOL_PALETTE: GType
    get() = kniBridge8302()

val GTK_TYPE_TOOL_SHELL: GType
    get() = kniBridge8303()

val GTK_TYPE_TREE_DRAG_SOURCE: GType
    get() = kniBridge8304()

val GTK_TYPE_TREE_DRAG_DEST: GType
    get() = kniBridge8305()

val GTK_TYPE_TREE_MODEL_SORT: GType
    get() = kniBridge8306()

val GTK_TYPE_TREE_SELECTION: GType
    get() = kniBridge8307()

val GTK_TYPE_TREE_STORE: GType
    get() = kniBridge8308()

val GTK_TYPE_RC_FLAGS: GType
    get() = kniBridge8309()

val GTK_TYPE_RC_TOKEN_TYPE: GType
    get() = kniBridge8310()

val GTK_TYPE_PATH_PRIORITY_TYPE: GType
    get() = kniBridge8311()

val GTK_TYPE_PATH_TYPE: GType
    get() = kniBridge8312()

val GTK_TYPE_EXPANDER_STYLE: GType
    get() = kniBridge8313()

val GTK_TYPE_ATTACH_OPTIONS: GType
    get() = kniBridge8314()

val GTK_TYPE_UI_MANAGER_ITEM_TYPE: GType
    get() = kniBridge8315()

val GTK_TYPE_LICENSE: GType
    get() = kniBridge8316()

val GTK_TYPE_ACCEL_FLAGS: GType
    get() = kniBridge8317()

val GTK_TYPE_APPLICATION_INHIBIT_FLAGS: GType
    get() = kniBridge8318()

val GTK_TYPE_ASSISTANT_PAGE_TYPE: GType
    get() = kniBridge8319()

val GTK_TYPE_BUTTON_BOX_STYLE: GType
    get() = kniBridge8320()

val GTK_TYPE_BUILDER_ERROR: GType
    get() = kniBridge8321()

val GTK_TYPE_CALENDAR_DISPLAY_OPTIONS: GType
    get() = kniBridge8322()

val GTK_TYPE_CELL_RENDERER_STATE: GType
    get() = kniBridge8323()

val GTK_TYPE_CELL_RENDERER_MODE: GType
    get() = kniBridge8324()

val GTK_TYPE_CELL_RENDERER_ACCEL_MODE: GType
    get() = kniBridge8325()

val GTK_TYPE_RESIZE_MODE: GType
    get() = kniBridge8326()

val GTK_TYPE_CSS_PROVIDER_ERROR: GType
    get() = kniBridge8327()

val GTK_TYPE_CSS_SECTION_TYPE: GType
    get() = kniBridge8328()

val GTK_TYPE_DEBUG_FLAG: GType
    get() = kniBridge8329()

val GTK_TYPE_DIALOG_FLAGS: GType
    get() = kniBridge8330()

val GTK_TYPE_RESPONSE_TYPE: GType
    get() = kniBridge8331()

val GTK_TYPE_DEST_DEFAULTS: GType
    get() = kniBridge8332()

val GTK_TYPE_ENTRY_ICON_POSITION: GType
    get() = kniBridge8333()

val GTK_TYPE_ALIGN: GType
    get() = kniBridge8334()

val GTK_TYPE_ARROW_TYPE: GType
    get() = kniBridge8335()

val GTK_TYPE_BASELINE_POSITION: GType
    get() = kniBridge8336()

val GTK_TYPE_DELETE_TYPE: GType
    get() = kniBridge8337()

val GTK_TYPE_DIRECTION_TYPE: GType
    get() = kniBridge8338()

val GTK_TYPE_ICON_SIZE: GType
    get() = kniBridge8339()

val GTK_TYPE_SENSITIVITY_TYPE: GType
    get() = kniBridge8340()

val GTK_TYPE_TEXT_DIRECTION: GType
    get() = kniBridge8341()

val GTK_TYPE_JUSTIFICATION: GType
    get() = kniBridge8342()

val GTK_TYPE_MENU_DIRECTION_TYPE: GType
    get() = kniBridge8343()

val GTK_TYPE_MESSAGE_TYPE: GType
    get() = kniBridge8344()

val GTK_TYPE_MOVEMENT_STEP: GType
    get() = kniBridge8345()

val GTK_TYPE_SCROLL_STEP: GType
    get() = kniBridge8346()

val GTK_TYPE_ORIENTATION: GType
    get() = kniBridge8347()

val GTK_TYPE_PACK_TYPE: GType
    get() = kniBridge8348()

val GTK_TYPE_POSITION_TYPE: GType
    get() = kniBridge8349()

val GTK_TYPE_RELIEF_STYLE: GType
    get() = kniBridge8350()

val GTK_TYPE_SCROLL_TYPE: GType
    get() = kniBridge8351()

val GTK_TYPE_SELECTION_MODE: GType
    get() = kniBridge8352()

val GTK_TYPE_SHADOW_TYPE: GType
    get() = kniBridge8353()

val GTK_TYPE_STATE_TYPE: GType
    get() = kniBridge8354()

val GTK_TYPE_TOOLBAR_STYLE: GType
    get() = kniBridge8355()

val GTK_TYPE_WRAP_MODE: GType
    get() = kniBridge8356()

val GTK_TYPE_SORT_TYPE: GType
    get() = kniBridge8357()

val GTK_TYPE_IM_PREEDIT_STYLE: GType
    get() = kniBridge8358()

val GTK_TYPE_IM_STATUS_STYLE: GType
    get() = kniBridge8359()

val GTK_TYPE_PACK_DIRECTION: GType
    get() = kniBridge8360()

val GTK_TYPE_PRINT_PAGES: GType
    get() = kniBridge8361()

val GTK_TYPE_PAGE_SET: GType
    get() = kniBridge8362()

val GTK_TYPE_NUMBER_UP_LAYOUT: GType
    get() = kniBridge8363()

val GTK_TYPE_PAGE_ORIENTATION: GType
    get() = kniBridge8364()

val GTK_TYPE_PRINT_QUALITY: GType
    get() = kniBridge8365()

val GTK_TYPE_PRINT_DUPLEX: GType
    get() = kniBridge8366()

val GTK_TYPE_UNIT: GType
    get() = kniBridge8367()

val GTK_TYPE_TREE_VIEW_GRID_LINES: GType
    get() = kniBridge8368()

val GTK_TYPE_DRAG_RESULT: GType
    get() = kniBridge8369()

val GTK_TYPE_SIZE_GROUP_MODE: GType
    get() = kniBridge8370()

val GTK_TYPE_SIZE_REQUEST_MODE: GType
    get() = kniBridge8371()

val GTK_TYPE_SCROLLABLE_POLICY: GType
    get() = kniBridge8372()

val GTK_TYPE_STATE_FLAGS: GType
    get() = kniBridge8373()

val GTK_TYPE_REGION_FLAGS: GType
    get() = kniBridge8374()

val GTK_TYPE_JUNCTION_SIDES: GType
    get() = kniBridge8375()

val GTK_TYPE_BORDER_STYLE: GType
    get() = kniBridge8376()

val GTK_TYPE_LEVEL_BAR_MODE: GType
    get() = kniBridge8377()

val GTK_TYPE_INPUT_PURPOSE: GType
    get() = kniBridge8378()

val GTK_TYPE_INPUT_HINTS: GType
    get() = kniBridge8379()

val GTK_TYPE_PROPAGATION_PHASE: GType
    get() = kniBridge8380()

val GTK_TYPE_EVENT_SEQUENCE_STATE: GType
    get() = kniBridge8381()

val GTK_TYPE_PAN_DIRECTION: GType
    get() = kniBridge8382()

val GTK_TYPE_POPOVER_CONSTRAINT: GType
    get() = kniBridge8383()

val GTK_TYPE_EVENT_CONTROLLER_SCROLL_FLAGS: GType
    get() = kniBridge8384()

val GTK_TYPE_FILE_CHOOSER_ACTION: GType
    get() = kniBridge8385()

val GTK_TYPE_FILE_CHOOSER_CONFIRMATION: GType
    get() = kniBridge8386()

val GTK_TYPE_FILE_CHOOSER_ERROR: GType
    get() = kniBridge8387()

val GTK_TYPE_FILE_FILTER_FLAGS: GType
    get() = kniBridge8388()

val GTK_TYPE_FONT_CHOOSER_LEVEL: GType
    get() = kniBridge8389()

val GTK_TYPE_ICON_LOOKUP_FLAGS: GType
    get() = kniBridge8390()

val GTK_TYPE_ICON_THEME_ERROR: GType
    get() = kniBridge8391()

val GTK_TYPE_ICON_VIEW_DROP_POSITION: GType
    get() = kniBridge8392()

val GTK_TYPE_IMAGE_TYPE: GType
    get() = kniBridge8393()

val GTK_TYPE_ARROW_PLACEMENT: GType
    get() = kniBridge8394()

val GTK_TYPE_BUTTONS_TYPE: GType
    get() = kniBridge8395()

val GTK_TYPE_BUTTON_ROLE: GType
    get() = kniBridge8396()

val GTK_TYPE_NOTEBOOK_TAB: GType
    get() = kniBridge8397()

val GTK_TYPE_PAD_ACTION_TYPE: GType
    get() = kniBridge8398()

val GTK_TYPE_PLACES_OPEN_FLAGS: GType
    get() = kniBridge8399()

val GTK_TYPE_PRINT_STATUS: GType
    get() = kniBridge8400()

val GTK_TYPE_PRINT_OPERATION_RESULT: GType
    get() = kniBridge8401()

val GTK_TYPE_PRINT_OPERATION_ACTION: GType
    get() = kniBridge8402()

val GTK_TYPE_PRINT_ERROR: GType
    get() = kniBridge8403()

val GTK_TYPE_RECENT_SORT_TYPE: GType
    get() = kniBridge8404()

val GTK_TYPE_RECENT_CHOOSER_ERROR: GType
    get() = kniBridge8405()

val GTK_TYPE_RECENT_FILTER_FLAGS: GType
    get() = kniBridge8406()

val GTK_TYPE_RECENT_MANAGER_ERROR: GType
    get() = kniBridge8407()

val GTK_TYPE_REVEALER_TRANSITION_TYPE: GType
    get() = kniBridge8408()

val GTK_TYPE_CORNER_TYPE: GType
    get() = kniBridge8409()

val GTK_TYPE_POLICY_TYPE: GType
    get() = kniBridge8410()

val GTK_TYPE_TARGET_FLAGS: GType
    get() = kniBridge8411()

val GTK_TYPE_SHORTCUT_TYPE: GType
    get() = kniBridge8412()

val GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY: GType
    get() = kniBridge8413()

val GTK_TYPE_SPIN_TYPE: GType
    get() = kniBridge8414()

val GTK_TYPE_STACK_TRANSITION_TYPE: GType
    get() = kniBridge8415()

val GTK_TYPE_STYLE_CONTEXT_PRINT_FLAGS: GType
    get() = kniBridge8416()

val GTK_TYPE_TEXT_BUFFER_TARGET_INFO: GType
    get() = kniBridge8417()

val GTK_TYPE_TEXT_SEARCH_FLAGS: GType
    get() = kniBridge8418()

val GTK_TYPE_TEXT_WINDOW_TYPE: GType
    get() = kniBridge8419()

val GTK_TYPE_TEXT_VIEW_LAYER: GType
    get() = kniBridge8420()

val GTK_TYPE_TEXT_EXTEND_SELECTION: GType
    get() = kniBridge8421()

val GTK_TYPE_TOOLBAR_SPACE_STYLE: GType
    get() = kniBridge8422()

val GTK_TYPE_TOOL_PALETTE_DRAG_TARGETS: GType
    get() = kniBridge8423()

val GTK_TYPE_TREE_MODEL_FLAGS: GType
    get() = kniBridge8424()

val GTK_TYPE_TREE_VIEW_DROP_POSITION: GType
    get() = kniBridge8425()

val GTK_TYPE_TREE_VIEW_COLUMN_SIZING: GType
    get() = kniBridge8426()

val GTK_TYPE_WIDGET_HELP_TYPE: GType
    get() = kniBridge8427()

val GTK_TYPE_WINDOW_TYPE: GType
    get() = kniBridge8428()

val GTK_TYPE_WINDOW_POSITION: GType
    get() = kniBridge8429()

val GTK_TYPE_VIEWPORT: GType
    get() = kniBridge8430()

val GTK_TYPE_VOLUME_BUTTON: GType
    get() = kniBridge8431()

val GTK_TYPE_WIDGET_PATH: GType
    get() = kniBridge8432()

val GTK_TYPE_WINDOW_GROUP: GType
    get() = kniBridge8433()

typealias gsizeVar = ULongVarOf<gsize>

typealias gsize = ULong

typealias GTypeVar = ULongVarOf<GType>

typealias GType = gsize

typealias gintVar = IntVarOf<gint>

typealias gint = Int

typealias guintVar = UIntVarOf<guint>

typealias guint = UInt

typealias glongVar = LongVarOf<glong>

typealias glong = Long

typealias gulongVar = ULongVarOf<gulong>

typealias gulong = ULong

typealias gint64Var = LongVarOf<gint64>

typealias gint64 = Long

typealias guint64Var = ULongVarOf<guint64>

typealias guint64 = ULong

typealias gfloatVar = FloatVarOf<gfloat>

typealias gfloat = Float

typealias gdoubleVar = DoubleVarOf<gdouble>

typealias gdouble = Double

typealias gpointerVar = CPointerVarOf<gpointer>

typealias gpointer = COpaquePointer

typealias GValue = _GValue

typealias GTypeCValue = _GTypeCValue

typealias GTypePlugin = _GTypePlugin

typealias GTypeClass = _GTypeClass

typealias GTypeInterface = _GTypeInterface

typealias GTypeInstance = _GTypeInstance

typealias guint16Var = UShortVarOf<guint16>

typealias guint16 = UShort

typealias GBaseInitFuncVar = CPointerVarOf<GBaseInitFunc>

typealias GBaseInitFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GBaseFinalizeFuncVar = CPointerVarOf<GBaseFinalizeFunc>

typealias GBaseFinalizeFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GClassInitFuncVar = CPointerVarOf<GClassInitFunc>

typealias GClassInitFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GClassFinalizeFuncVar = CPointerVarOf<GClassFinalizeFunc>

typealias GClassFinalizeFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias gconstpointerVar = CPointerVarOf<gconstpointer>

typealias gconstpointer = COpaquePointer

typealias GInstanceInitFuncVar = CPointerVarOf<GInstanceInitFunc>

typealias GInstanceInitFunc = CPointer<CFunction<(CPointer<GTypeInstance>?, gpointer?) -> Unit>>

typealias gcharVar = ByteVarOf<gchar>

typealias gchar = Byte

typealias GTypeValueTable = _GTypeValueTable

typealias GTypeInfo = _GTypeInfo

typealias GTypeFundamentalInfo = _GTypeFundamentalInfo

typealias GInterfaceInitFuncVar = CPointerVarOf<GInterfaceInitFunc>

typealias GInterfaceInitFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GInterfaceFinalizeFuncVar = CPointerVarOf<GInterfaceFinalizeFunc>

typealias GInterfaceFinalizeFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GInterfaceInfo = _GInterfaceInfo

typealias GTypeQuery = _GTypeQuery

typealias guint32Var = UIntVarOf<guint32>

typealias guint32 = UInt

typealias GQuarkVar = UIntVarOf<GQuark>

typealias GQuark = guint32

typealias gbooleanVar = IntVarOf<gboolean>

typealias gboolean = gint

typealias GTypeClassCacheFuncVar = CPointerVarOf<GTypeClassCacheFunc>

typealias GTypeClassCacheFunc = CPointer<CFunction<(gpointer?, CPointer<GTypeClass>?) -> gboolean>>

typealias GTypeInterfaceCheckFuncVar = CPointerVarOf<GTypeInterfaceCheckFunc>

typealias GTypeInterfaceCheckFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GValueTransformVar = CPointerVarOf<GValueTransform>

typealias GValueTransform = CPointer<CFunction<(CPointer<GValue>?, CPointer<GValue>?) -> Unit>>

typealias GData = _GData

typealias GParamSpec = _GParamSpec

typealias GParamSpecClass = _GParamSpecClass

typealias GParameter = _GParameter

typealias GParamSpecPool = _GParamSpecPool

typealias GDestroyNotifyVar = CPointerVarOf<GDestroyNotify>

typealias GDestroyNotify = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GParamSpecTypeInfo = _GParamSpecTypeInfo

typealias GList = _GList

typealias GClosure = _GClosure

typealias GClosureNotifyVar = CPointerVarOf<GClosureNotify>

typealias GClosureNotify = CPointer<CFunction<(gpointer?, CPointer<GClosure>?) -> Unit>>

typealias GClosureNotifyData = _GClosureNotifyData

typealias GCallbackVar = CPointerVarOf<GCallback>

typealias GCallback = CPointer<CFunction<() -> Unit>>

typealias GClosureMarshalVar = CPointerVarOf<GClosureMarshal>

typealias GClosureMarshal = CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, guint, CPointer<GValue>?, gpointer?, gpointer?) -> Unit>>

typealias GVaClosureMarshalVar = CPointerVarOf<GVaClosureMarshal>

typealias GVaClosureMarshal = CPointer<CFunction<(CPointer<GClosure>?, CPointer<GValue>?, gpointer?, platform.posix.va_list?, gpointer?, Int, CPointer<GTypeVar>?) -> Unit>>

typealias GCClosure = _GCClosure

typealias GSignalQuery = _GSignalQuery

typealias GSignalInvocationHint = _GSignalInvocationHint

typealias GSignalCMarshallerVar = CPointerVarOf<GSignalCMarshaller>

typealias GSignalCMarshaller = GClosureMarshal

typealias GSignalCVaMarshallerVar = CPointerVarOf<GSignalCVaMarshaller>

typealias GSignalCVaMarshaller = GVaClosureMarshal

typealias GSignalEmissionHookVar = CPointerVarOf<GSignalEmissionHook>

typealias GSignalEmissionHook = CPointer<CFunction<(CPointer<GSignalInvocationHint>?, guint, CPointer<GValue>?, gpointer?) -> gboolean>>

typealias GSignalAccumulatorVar = CPointerVarOf<GSignalAccumulator>

typealias GSignalAccumulator = CPointer<CFunction<(CPointer<GSignalInvocationHint>?, CPointer<GValue>?, CPointer<GValue>?, gpointer?) -> gboolean>>

typealias GBoxedCopyFuncVar = CPointerVarOf<GBoxedCopyFunc>

typealias GBoxedCopyFunc = CPointer<CFunction<(gpointer?) -> gpointer?>>

typealias GBoxedFreeFuncVar = CPointerVarOf<GBoxedFreeFunc>

typealias GBoxedFreeFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GObject = _GObject

typealias GSList = _GSList

typealias GObjectConstructParam = _GObjectConstructParam

typealias GObjectClass = _GObjectClass

typealias GInitiallyUnowned = _GObject

typealias GInitiallyUnownedClass = _GObjectClass

typealias GObjectGetPropertyFuncVar = CPointerVarOf<GObjectGetPropertyFunc>

typealias GObjectGetPropertyFunc = CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>

typealias GObjectSetPropertyFuncVar = CPointerVarOf<GObjectSetPropertyFunc>

typealias GObjectSetPropertyFunc = CPointer<CFunction<(CPointer<GObject>?, guint, CPointer<GValue>?, CPointer<GParamSpec>?) -> Unit>>

typealias GObjectFinalizeFuncVar = CPointerVarOf<GObjectFinalizeFunc>

typealias GObjectFinalizeFunc = CPointer<CFunction<(CPointer<GObject>?) -> Unit>>

typealias GWeakNotifyVar = CPointerVarOf<GWeakNotify>

typealias GWeakNotify = CPointer<CFunction<(gpointer?, CPointer<GObject>?) -> Unit>>

typealias GToggleNotifyVar = CPointerVarOf<GToggleNotify>

typealias GToggleNotify = CPointer<CFunction<(gpointer?, CPointer<GObject>?, gboolean) -> Unit>>

typealias GDuplicateFuncVar = CPointerVarOf<GDuplicateFunc>

typealias GDuplicateFunc = CPointer<CFunction<(gpointer?, gpointer?) -> gpointer?>>

typealias GBinding = _GBinding

typealias GBindingTransformFuncVar = CPointerVarOf<GBindingTransformFunc>

typealias GBindingTransformFunc = CPointer<CFunction<(CPointer<GBinding>?, CPointer<GValue>?, CPointer<GValue>?, gpointer?) -> gboolean>>

typealias GEnumValue = _GEnumValue

typealias GEnumClass = _GEnumClass

typealias GFlagsValue = _GFlagsValue

typealias GFlagsClass = _GFlagsClass

typealias gint8Var = ByteVarOf<gint8>

typealias gint8 = Byte

typealias GParamSpecChar = _GParamSpecChar

typealias guint8Var = UByteVarOf<guint8>

typealias guint8 = UByte

typealias GParamSpecUChar = _GParamSpecUChar

typealias GParamSpecBoolean = _GParamSpecBoolean

typealias GParamSpecInt = _GParamSpecInt

typealias GParamSpecUInt = _GParamSpecUInt

typealias GParamSpecLong = _GParamSpecLong

typealias GParamSpecULong = _GParamSpecULong

typealias GParamSpecInt64 = _GParamSpecInt64

typealias GParamSpecUInt64 = _GParamSpecUInt64

typealias gunicharVar = UIntVarOf<gunichar>

typealias gunichar = guint32

typealias GParamSpecUnichar = _GParamSpecUnichar

typealias GParamSpecEnum = _GParamSpecEnum

typealias GParamSpecFlags = _GParamSpecFlags

typealias GParamSpecFloat = _GParamSpecFloat

typealias GParamSpecDouble = _GParamSpecDouble

typealias GParamSpecString = _GParamSpecString

typealias GParamSpecParam = _GParamSpecParam

typealias GParamSpecBoxed = _GParamSpecBoxed

typealias GParamSpecPointer = _GParamSpecPointer

typealias GParamSpecValueArray = _GParamSpecValueArray

typealias GParamSpecObject = _GParamSpecObject

typealias GParamSpecOverride = _GParamSpecOverride

typealias GParamSpecGType = _GParamSpecGType

typealias GVariantType = _GVariantType

typealias GVariant = _GVariant

typealias GParamSpecVariant = _GParamSpecVariant

typealias GSource = _GSource

typealias GSourceFuncVar = CPointerVarOf<GSourceFunc>

typealias GSourceFunc = CPointer<CFunction<(gpointer?) -> gboolean>>

typealias GSourceCallbackFuncs = _GSourceCallbackFuncs

typealias GSourceDummyMarshalVar = CPointerVarOf<GSourceDummyMarshal>

typealias GSourceDummyMarshal = CPointer<CFunction<() -> Unit>>

typealias GSourceFuncs = _GSourceFuncs

typealias GMainContext = _GMainContext

typealias GSourcePrivate = _GSourcePrivate

typealias GTypeModule = _GTypeModule

typealias GTypeModuleClass = _GTypeModuleClass

typealias GTypeModule_autoptrVar = CPointerVarOf<GTypeModule_autoptr>

typealias GTypeModule_autoptr = CPointer<GTypeModule>

typealias GTypeModule_listautoptrVar = CPointerVarOf<GTypeModule_listautoptr>

typealias GTypeModule_listautoptr = CPointer<GList>

typealias GTypeModule_slistautoptrVar = CPointerVarOf<GTypeModule_slistautoptr>

typealias GTypeModule_slistautoptr = CPointer<GSList>

typealias GQueue = _GQueue

typealias GTypeModule_queueautoptrVar = CPointerVarOf<GTypeModule_queueautoptr>

typealias GTypeModule_queueautoptr = CPointer<GQueue>

typealias GTypePluginUseVar = CPointerVarOf<GTypePluginUse>

typealias GTypePluginUse = CPointer<CFunction<(CPointer<GTypePlugin>?) -> Unit>>

typealias GTypePluginUnuseVar = CPointerVarOf<GTypePluginUnuse>

typealias GTypePluginUnuse = CPointer<CFunction<(CPointer<GTypePlugin>?) -> Unit>>

typealias GTypePluginCompleteTypeInfoVar = CPointerVarOf<GTypePluginCompleteTypeInfo>

typealias GTypePluginCompleteTypeInfo = CPointer<CFunction<(CPointer<GTypePlugin>?, GType, CPointer<GTypeInfo>?, CPointer<GTypeValueTable>?) -> Unit>>

typealias GTypePluginCompleteInterfaceInfoVar = CPointerVarOf<GTypePluginCompleteInterfaceInfo>

typealias GTypePluginCompleteInterfaceInfo = CPointer<CFunction<(CPointer<GTypePlugin>?, GType, GType, CPointer<GInterfaceInfo>?) -> Unit>>

typealias GTypePluginClass = _GTypePluginClass

typealias GValueArray = _GValueArray

typealias GCompareFuncVar = CPointerVarOf<GCompareFunc>

typealias GCompareFunc = CPointer<CFunction<(gconstpointer?, gconstpointer?) -> gint>>

typealias GCompareDataFuncVar = CPointerVarOf<GCompareDataFunc>

typealias GCompareDataFunc = CPointer<CFunction<(gconstpointer?, gconstpointer?, gpointer?) -> gint>>

typealias gucharVar = UByteVarOf<guchar>

typealias guchar = UByte

typealias gchararrayVar = CPointerVarOf<gchararray>

typealias gchararray = CPointer<gcharVar>

typealias GClosure_autoptrVar = CPointerVarOf<GClosure_autoptr>

typealias GClosure_autoptr = CPointer<GClosure>

typealias GClosure_listautoptrVar = CPointerVarOf<GClosure_listautoptr>

typealias GClosure_listautoptr = CPointer<GList>

typealias GClosure_slistautoptrVar = CPointerVarOf<GClosure_slistautoptr>

typealias GClosure_slistautoptr = CPointer<GSList>

typealias GClosure_queueautoptrVar = CPointerVarOf<GClosure_queueautoptr>

typealias GClosure_queueautoptr = CPointer<GQueue>

typealias GEnumClass_autoptrVar = CPointerVarOf<GEnumClass_autoptr>

typealias GEnumClass_autoptr = CPointer<GEnumClass>

typealias GEnumClass_listautoptrVar = CPointerVarOf<GEnumClass_listautoptr>

typealias GEnumClass_listautoptr = CPointer<GList>

typealias GEnumClass_slistautoptrVar = CPointerVarOf<GEnumClass_slistautoptr>

typealias GEnumClass_slistautoptr = CPointer<GSList>

typealias GEnumClass_queueautoptrVar = CPointerVarOf<GEnumClass_queueautoptr>

typealias GEnumClass_queueautoptr = CPointer<GQueue>

typealias GFlagsClass_autoptrVar = CPointerVarOf<GFlagsClass_autoptr>

typealias GFlagsClass_autoptr = CPointer<GFlagsClass>

typealias GFlagsClass_listautoptrVar = CPointerVarOf<GFlagsClass_listautoptr>

typealias GFlagsClass_listautoptr = CPointer<GList>

typealias GFlagsClass_slistautoptrVar = CPointerVarOf<GFlagsClass_slistautoptr>

typealias GFlagsClass_slistautoptr = CPointer<GSList>

typealias GFlagsClass_queueautoptrVar = CPointerVarOf<GFlagsClass_queueautoptr>

typealias GFlagsClass_queueautoptr = CPointer<GQueue>

typealias GObject_autoptrVar = CPointerVarOf<GObject_autoptr>

typealias GObject_autoptr = CPointer<GObject>

typealias GObject_listautoptrVar = CPointerVarOf<GObject_listautoptr>

typealias GObject_listautoptr = CPointer<GList>

typealias GObject_slistautoptrVar = CPointerVarOf<GObject_slistautoptr>

typealias GObject_slistautoptr = CPointer<GSList>

typealias GObject_queueautoptrVar = CPointerVarOf<GObject_queueautoptr>

typealias GObject_queueautoptr = CPointer<GQueue>

typealias GInitiallyUnowned_autoptrVar = CPointerVarOf<GInitiallyUnowned_autoptr>

typealias GInitiallyUnowned_autoptr = CPointer<GInitiallyUnowned>

typealias GInitiallyUnowned_listautoptrVar = CPointerVarOf<GInitiallyUnowned_listautoptr>

typealias GInitiallyUnowned_listautoptr = CPointer<GList>

typealias GInitiallyUnowned_slistautoptrVar = CPointerVarOf<GInitiallyUnowned_slistautoptr>

typealias GInitiallyUnowned_slistautoptr = CPointer<GSList>

typealias GInitiallyUnowned_queueautoptrVar = CPointerVarOf<GInitiallyUnowned_queueautoptr>

typealias GInitiallyUnowned_queueautoptr = CPointer<GQueue>

typealias GParamSpec_autoptrVar = CPointerVarOf<GParamSpec_autoptr>

typealias GParamSpec_autoptr = CPointer<GParamSpec>

typealias GParamSpec_listautoptrVar = CPointerVarOf<GParamSpec_listautoptr>

typealias GParamSpec_listautoptr = CPointer<GList>

typealias GParamSpec_slistautoptrVar = CPointerVarOf<GParamSpec_slistautoptr>

typealias GParamSpec_slistautoptr = CPointer<GSList>

typealias GParamSpec_queueautoptrVar = CPointerVarOf<GParamSpec_queueautoptr>

typealias GParamSpec_queueautoptr = CPointer<GQueue>

typealias GTypeClass_autoptrVar = CPointerVarOf<GTypeClass_autoptr>

typealias GTypeClass_autoptr = CPointer<GTypeClass>

typealias GTypeClass_listautoptrVar = CPointerVarOf<GTypeClass_listautoptr>

typealias GTypeClass_listautoptr = CPointer<GList>

typealias GTypeClass_slistautoptrVar = CPointerVarOf<GTypeClass_slistautoptr>

typealias GTypeClass_slistautoptr = CPointer<GSList>

typealias GTypeClass_queueautoptrVar = CPointerVarOf<GTypeClass_queueautoptr>

typealias GTypeClass_queueautoptr = CPointer<GQueue>

typealias GTlsPasswordFlagsVar = UIntVarOf<GTlsPasswordFlags>

typealias GTlsPasswordFlags = _GTlsPasswordFlags

typealias GAppLaunchContextPrivate = _GAppLaunchContextPrivate

typealias GAppLaunchContext = _GAppLaunchContext

typealias GAppInfo = _GAppInfo

typealias GAsyncResult = _GAsyncResult

typealias GAsyncInitable = _GAsyncInitable

typealias GInputStreamPrivate = _GInputStreamPrivate

typealias GInputStream = _GInputStream

typealias GFilterInputStream = _GFilterInputStream

typealias GBufferedInputStreamPrivate = _GBufferedInputStreamPrivate

typealias GBufferedInputStream = _GBufferedInputStream

typealias GOutputStreamPrivate = _GOutputStreamPrivate

typealias GOutputStream = _GOutputStream

typealias GFilterOutputStream = _GFilterOutputStream

typealias GBufferedOutputStreamPrivate = _GBufferedOutputStreamPrivate

typealias GBufferedOutputStream = _GBufferedOutputStream

typealias GCancellablePrivate = _GCancellablePrivate

typealias GCancellable = _GCancellable

typealias GCharsetConverter = _GCharsetConverter

typealias GConverter = _GConverter

typealias GConverterInputStreamPrivate = _GConverterInputStreamPrivate

typealias GConverterInputStream = _GConverterInputStream

typealias GConverterOutputStreamPrivate = _GConverterOutputStreamPrivate

typealias GConverterOutputStream = _GConverterOutputStream

typealias GDatagramBased = _GDatagramBased

typealias GDataInputStreamPrivate = _GDataInputStreamPrivate

typealias GDataInputStream = _GDataInputStream

typealias GSimplePermission = _GSimplePermission

typealias GZlibCompressor = _GZlibCompressor

typealias GZlibDecompressor = _GZlibDecompressor

typealias GSimpleActionGroupPrivate = _GSimpleActionGroupPrivate

typealias GSimpleActionGroup = _GSimpleActionGroup

typealias GRemoteActionGroup = _GRemoteActionGroup

typealias GDBusActionGroup = _GDBusActionGroup

typealias GActionMap = _GActionMap

typealias GActionGroup = _GActionGroup

typealias GPropertyAction = _GPropertyAction

typealias GSimpleAction = _GSimpleAction

typealias GAction = _GAction

typealias GApplicationPrivate = _GApplicationPrivate

typealias GApplication = _GApplication

typealias GApplicationCommandLinePrivate = _GApplicationCommandLinePrivate

typealias GApplicationCommandLine = _GApplicationCommandLine

typealias GSettingsBackend = _GSettingsBackend

typealias GSettingsPrivate = _GSettingsPrivate

typealias GSettings = _GSettings

typealias GPermissionPrivate = _GPermissionPrivate

typealias GPermission = _GPermission

typealias GMenuModelPrivate = _GMenuModelPrivate

typealias GMenuModel = _GMenuModel

typealias GNotification = _GNotification

typealias GDrive = _GDrive

typealias GFileEnumeratorPrivate = _GFileEnumeratorPrivate

typealias GFileEnumerator = _GFileEnumerator

typealias GFileMonitorPrivate = _GFileMonitorPrivate

typealias GFileMonitor = _GFileMonitor

typealias GFile = _GFile

typealias GFileInfo = _GFileInfo

typealias GFileAttributeMatcher = _GFileAttributeMatcher

typealias GFileAttributeInfo = _GFileAttributeInfo

typealias GFileAttributeInfoList = _GFileAttributeInfoList

typealias GFileDescriptorBased = _GFileDescriptorBased

typealias GFileInputStreamPrivate = _GFileInputStreamPrivate

typealias GFileInputStream = _GFileInputStream

typealias GFileOutputStreamPrivate = _GFileOutputStreamPrivate

typealias GFileOutputStream = _GFileOutputStream

typealias GIOStreamPrivate = _GIOStreamPrivate

typealias GIOStream = _GIOStream

typealias GFileIOStreamPrivate = _GFileIOStreamPrivate

typealias GFileIOStream = _GFileIOStream

typealias GFileIcon = _GFileIcon

typealias GFilenameCompleter = _GFilenameCompleter

typealias GIcon = _GIcon

typealias GInetAddressPrivate = _GInetAddressPrivate

typealias GInetAddress = _GInetAddress

typealias GInetAddressMaskPrivate = _GInetAddressMaskPrivate

typealias GInetAddressMask = _GInetAddressMask

typealias GSocketAddress = _GSocketAddress

typealias GInetSocketAddressPrivate = _GInetSocketAddressPrivate

typealias GInetSocketAddress = _GInetSocketAddress

typealias GNativeSocketAddressPrivate = _GNativeSocketAddressPrivate

typealias GNativeSocketAddress = _GNativeSocketAddress

typealias GInitable = _GInitable

typealias GIOModule = _GIOModule

typealias GIOExtensionPoint = _GIOExtensionPoint

typealias GIOExtension = _GIOExtension

typealias GIOSchedulerJob = _GIOSchedulerJob

typealias GIOStreamAdapter = _GIOStreamAdapter

typealias GLoadableIcon = _GLoadableIcon

typealias GBytesIcon = _GBytesIcon

typealias GMemoryInputStreamPrivate = _GMemoryInputStreamPrivate

typealias GMemoryInputStream = _GMemoryInputStream

typealias GMemoryOutputStreamPrivate = _GMemoryOutputStreamPrivate

typealias GMemoryOutputStream = _GMemoryOutputStream

typealias GMount = _GMount

typealias GMountOperationPrivate = _GMountOperationPrivate

typealias GMountOperation = _GMountOperation

typealias GNetworkAddressPrivate = _GNetworkAddressPrivate

typealias GNetworkAddress = _GNetworkAddress

typealias GNetworkMonitor = _GNetworkMonitor

typealias GNetworkServicePrivate = _GNetworkServicePrivate

typealias GNetworkService = _GNetworkService

typealias GSimpleIOStream = _GSimpleIOStream

typealias GPollableInputStream = _GPollableInputStream

typealias GPollableOutputStream = _GPollableOutputStream

typealias GResolverPrivate = _GResolverPrivate

typealias GResolver = _GResolver

typealias GResource = _GResource

typealias GSeekable = _GSeekable

typealias GSimpleAsyncResult = _GSimpleAsyncResult

typealias GSocketPrivate = _GSocketPrivate

typealias GSocket = _GSocket

typealias GSocketControlMessagePrivate = _GSocketControlMessagePrivate

typealias GSocketControlMessage = _GSocketControlMessage

typealias GSocketClientPrivate = _GSocketClientPrivate

typealias GSocketClient = _GSocketClient

typealias GSocketConnectionPrivate = _GSocketConnectionPrivate

typealias GSocketConnection = _GSocketConnection

typealias GSocketListenerPrivate = _GSocketListenerPrivate

typealias GSocketListener = _GSocketListener

typealias GSocketServicePrivate = _GSocketServicePrivate

typealias GSocketService = _GSocketService

typealias GSocketAddressEnumerator = _GSocketAddressEnumerator

typealias GSocketConnectable = _GSocketConnectable

typealias GSrvTarget = _GSrvTarget

typealias GTask = _GTask

typealias GTcpConnectionPrivate = _GTcpConnectionPrivate

typealias GTcpConnection = _GTcpConnection

typealias GTcpWrapperConnectionPrivate = _GTcpWrapperConnectionPrivate

typealias GTcpWrapperConnection = _GTcpWrapperConnection

typealias GThreadedSocketServicePrivate = _GThreadedSocketServicePrivate

typealias GThreadedSocketService = _GThreadedSocketService

typealias GDtlsConnection = _GDtlsConnection

typealias GDtlsClientConnection = _GDtlsClientConnection

typealias GDtlsServerConnection = _GDtlsServerConnection

typealias GThemedIcon = _GThemedIcon

typealias GTlsCertificatePrivate = _GTlsCertificatePrivate

typealias GTlsCertificate = _GTlsCertificate

typealias GTlsClientConnection = _GTlsClientConnection

typealias GTlsConnectionPrivate = _GTlsConnectionPrivate

typealias GTlsConnection = _GTlsConnection

typealias GTlsDatabasePrivate = _GTlsDatabasePrivate

typealias GTlsDatabase = _GTlsDatabase

typealias GTlsFileDatabase = _GTlsFileDatabase

typealias GTlsInteractionPrivate = _GTlsInteractionPrivate

typealias GTlsInteraction = _GTlsInteraction

typealias GTlsPasswordPrivate = _GTlsPasswordPrivate

typealias GTlsPassword = _GTlsPassword

typealias GTlsServerConnection = _GTlsServerConnection

typealias GVfs = _GVfs

typealias GProxyResolver = _GProxyResolver

typealias GProxy = _GProxy

typealias GProxyAddressPrivate = _GProxyAddressPrivate

typealias GProxyAddress = _GProxyAddress

typealias GProxyAddressEnumeratorPrivate = _GProxyAddressEnumeratorPrivate

typealias GProxyAddressEnumerator = _GProxyAddressEnumerator

typealias GVolume = _GVolume

typealias GVolumeMonitor = _GVolumeMonitor

typealias GAsyncReadyCallbackVar = CPointerVarOf<GAsyncReadyCallback>

typealias GAsyncReadyCallback = CPointer<CFunction<(CPointer<GObject>?, CPointer<GAsyncResult>?, gpointer?) -> Unit>>

typealias goffsetVar = LongVarOf<goffset>

typealias goffset = gint64

typealias GFileProgressCallbackVar = CPointerVarOf<GFileProgressCallback>

typealias GFileProgressCallback = CPointer<CFunction<(goffset, goffset, gpointer?) -> Unit>>

typealias GFileReadMoreCallbackVar = CPointerVarOf<GFileReadMoreCallback>

typealias GFileReadMoreCallback = CPointer<CFunction<(CPointer<ByteVar>?, goffset, gpointer?) -> gboolean>>

typealias GFileMeasureProgressCallbackVar = CPointerVarOf<GFileMeasureProgressCallback>

typealias GFileMeasureProgressCallback = CPointer<CFunction<(gboolean, guint64, guint64, guint64, gpointer?) -> Unit>>

typealias GIOSchedulerJobFuncVar = CPointerVarOf<GIOSchedulerJobFunc>

typealias GIOSchedulerJobFunc = CPointer<CFunction<(CPointer<GIOSchedulerJob>?, CPointer<GCancellable>?, gpointer?) -> gboolean>>

typealias GSimpleAsyncThreadFuncVar = CPointerVarOf<GSimpleAsyncThreadFunc>

typealias GSimpleAsyncThreadFunc = CPointer<CFunction<(CPointer<GSimpleAsyncResult>?, CPointer<GObject>?, CPointer<GCancellable>?) -> Unit>>

typealias GSocketSourceFuncVar = CPointerVarOf<GSocketSourceFunc>

typealias GSocketSourceFunc = CPointer<CFunction<(CPointer<GSocket>?, GIOCondition, gpointer?) -> gboolean>>

typealias GDatagramBasedSourceFuncVar = CPointerVarOf<GDatagramBasedSourceFunc>

typealias GDatagramBasedSourceFunc = CPointer<CFunction<(CPointer<GDatagramBased>?, GIOCondition, gpointer?) -> gboolean>>

typealias GInputVector = _GInputVector

typealias GInputMessage = _GInputMessage

typealias GOutputVector = _GOutputVector

typealias GOutputMessage = _GOutputMessage

typealias GCredentials = _GCredentials

typealias GUnixCredentialsMessage = _GUnixCredentialsMessage

typealias GUnixFDList = _GUnixFDList

typealias GDBusMessage = _GDBusMessage

typealias GDBusConnection = _GDBusConnection

typealias GDBusProxyPrivate = _GDBusProxyPrivate

typealias GDBusProxy = _GDBusProxy

typealias GDBusMethodInvocation = _GDBusMethodInvocation

typealias GDBusServer = _GDBusServer

typealias GDBusAuthObserver = _GDBusAuthObserver

typealias GDBusErrorEntry = _GDBusErrorEntry

typealias GDBusInterfaceMethodCallFuncVar = CPointerVarOf<GDBusInterfaceMethodCallFunc>

typealias GDBusInterfaceMethodCallFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<GDBusMethodInvocation>?, gpointer?) -> Unit>>

typealias GError = _GError

typealias GDBusInterfaceGetPropertyFuncVar = CPointerVarOf<GDBusInterfaceGetPropertyFunc>

typealias GDBusInterfaceGetPropertyFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<CPointerVar<GError>>?, gpointer?) -> CPointer<GVariant>?>>

typealias GDBusInterfaceSetPropertyFuncVar = CPointerVarOf<GDBusInterfaceSetPropertyFunc>

typealias GDBusInterfaceSetPropertyFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?, CPointer<CPointerVar<GError>>?, gpointer?) -> gboolean>>

typealias GDBusInterfaceVTable = _GDBusInterfaceVTable

typealias GDBusSubtreeEnumerateFuncVar = CPointerVarOf<GDBusSubtreeEnumerateFunc>

typealias GDBusSubtreeEnumerateFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> CPointer<CPointerVar<gcharVar>>?>>

typealias GDBusAnnotationInfo = _GDBusAnnotationInfo

typealias GDBusArgInfo = _GDBusArgInfo

typealias GDBusMethodInfo = _GDBusMethodInfo

typealias GDBusSignalInfo = _GDBusSignalInfo

typealias GDBusPropertyInfo = _GDBusPropertyInfo

typealias GDBusInterfaceInfo = _GDBusInterfaceInfo

typealias GDBusSubtreeIntrospectFuncVar = CPointerVarOf<GDBusSubtreeIntrospectFunc>

typealias GDBusSubtreeIntrospectFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> CPointer<CPointerVar<GDBusInterfaceInfo>>?>>

typealias GDBusSubtreeDispatchFuncVar = CPointerVarOf<GDBusSubtreeDispatchFunc>

typealias GDBusSubtreeDispatchFunc = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gpointerVar>?, gpointer?) -> CPointer<GDBusInterfaceVTable>?>>

typealias GDBusSubtreeVTable = _GDBusSubtreeVTable

typealias GDBusNodeInfo = _GDBusNodeInfo

typealias GCancellableSourceFuncVar = CPointerVarOf<GCancellableSourceFunc>

typealias GCancellableSourceFunc = CPointer<CFunction<(CPointer<GCancellable>?, gpointer?) -> gboolean>>

typealias GPollableSourceFuncVar = CPointerVarOf<GPollableSourceFunc>

typealias GPollableSourceFunc = CPointer<CFunction<(CPointer<GObject>?, gpointer?) -> gboolean>>

typealias GDBusInterface = _GDBusInterface

typealias GDBusInterfaceSkeletonPrivate = _GDBusInterfaceSkeletonPrivate

typealias GDBusInterfaceSkeleton = _GDBusInterfaceSkeleton

typealias GDBusObject = _GDBusObject

typealias GDBusObjectSkeletonPrivate = _GDBusObjectSkeletonPrivate

typealias GDBusObjectSkeleton = _GDBusObjectSkeleton

typealias GDBusObjectProxyPrivate = _GDBusObjectProxyPrivate

typealias GDBusObjectProxy = _GDBusObjectProxy

typealias GDBusObjectManager = _GDBusObjectManager

typealias GDBusObjectManagerClientPrivate = _GDBusObjectManagerClientPrivate

typealias GDBusObjectManagerClient = _GDBusObjectManagerClient

typealias GDBusObjectManagerServerPrivate = _GDBusObjectManagerServerPrivate

typealias GDBusObjectManagerServer = _GDBusObjectManagerServer

typealias GDBusProxyTypeFuncVar = CPointerVarOf<GDBusProxyTypeFunc>

typealias GDBusProxyTypeFunc = CPointer<CFunction<(CPointer<GDBusObjectManagerClient>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> GType>>

typealias GTestDBus = _GTestDBus

typealias GSubprocess = _GSubprocess

typealias GSubprocessLauncher = _GSubprocessLauncher

typealias GActionInterface = _GActionInterface

typealias GActionGroupInterface = _GActionGroupInterface

typealias GActionMapInterface = _GActionMapInterface

typealias GActionEntry = _GActionEntry

typealias GAppLaunchContextClass = _GAppLaunchContextClass

typealias GAppInfoIface = _GAppInfoIface

typealias GAppInfoMonitor = _GAppInfoMonitor

typealias GVariantBuilder = _GVariantBuilder

typealias GVariantDict = _GVariantDict

typealias GApplicationClass = _GApplicationClass

typealias GOptionEntry = _GOptionEntry

typealias GOptionGroup = _GOptionGroup

typealias GApplicationCommandLineClass = _GApplicationCommandLineClass

typealias GInitableIface = _GInitableIface

typealias GAsyncInitableIface = _GAsyncInitableIface

typealias GAsyncResultIface = _GAsyncResultIface

typealias gssizeVar = LongVarOf<gssize>

typealias gssize = Long

typealias GInputStreamClass = _GInputStreamClass

typealias GBytes = _GBytes

typealias GFilterInputStreamClass = _GFilterInputStreamClass

typealias GBufferedInputStreamClass = _GBufferedInputStreamClass

typealias GOutputStreamClass = _GOutputStreamClass

typealias GFilterOutputStreamClass = _GFilterOutputStreamClass

typealias GBufferedOutputStreamClass = _GBufferedOutputStreamClass

typealias GCancellableClass = _GCancellableClass

typealias gushortVar = UShortVarOf<gushort>

typealias gushort = UShort

typealias GPollFD = _GPollFD

typealias GConverterIface = _GConverterIface

typealias GCharsetConverterClass = _GCharsetConverterClass

typealias GConverterInputStreamClass = _GConverterInputStreamClass

typealias GConverterOutputStreamClass = _GConverterOutputStreamClass

typealias GCredentialsClass = _GCredentialsClass

typealias __pid_tVar = IntVarOf<__pid_t>

typealias __pid_t = Int

typealias pid_tVar = IntVarOf<pid_t>

typealias pid_t = __pid_t

typealias __uid_tVar = UIntVarOf<__uid_t>

typealias __uid_t = UInt

typealias uid_tVar = UIntVarOf<uid_t>

typealias uid_t = __uid_t

typealias GDatagramBasedInterface = _GDatagramBasedInterface

typealias GDataInputStreamClass = _GDataInputStreamClass

typealias gint16Var = ShortVarOf<gint16>

typealias gint16 = Short

typealias gint32Var = IntVarOf<gint32>

typealias gint32 = Int

typealias GDataOutputStreamPrivate = _GDataOutputStreamPrivate

typealias GDataOutputStream = _GDataOutputStream

typealias GDataOutputStreamClass = _GDataOutputStreamClass

typealias GDBusSignalCallbackVar = CPointerVarOf<GDBusSignalCallback>

typealias GDBusSignalCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GVariant>?, gpointer?) -> Unit>>

typealias GDBusMessageFilterFunctionVar = CPointerVarOf<GDBusMessageFilterFunction>

typealias GDBusMessageFilterFunction = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<GDBusMessage>?, gboolean, gpointer?) -> CPointer<GDBusMessage>?>>

typealias GString = _GString

typealias GBusAcquiredCallbackVar = CPointerVarOf<GBusAcquiredCallback>

typealias GBusAcquiredCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameAcquiredCallbackVar = CPointerVarOf<GBusNameAcquiredCallback>

typealias GBusNameAcquiredCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameLostCallbackVar = CPointerVarOf<GBusNameLostCallback>

typealias GBusNameLostCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameAppearedCallbackVar = CPointerVarOf<GBusNameAppearedCallback>

typealias GBusNameAppearedCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GBusNameVanishedCallbackVar = CPointerVarOf<GBusNameVanishedCallback>

typealias GBusNameVanishedCallback = CPointer<CFunction<(CPointer<GDBusConnection>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GDBusProxyClass = _GDBusProxyClass

typealias GDriveIface = _GDriveIface

typealias GDtlsConnectionInterface = _GDtlsConnectionInterface

typealias GDtlsClientConnectionInterface = _GDtlsClientConnectionInterface

typealias GDtlsServerConnectionInterface = _GDtlsServerConnectionInterface

typealias GPtrArray = _GPtrArray

typealias GIconIface = _GIconIface

typealias GEmblem = _GEmblem

typealias GEmblemClass = _GEmblemClass

typealias GEmblemedIconPrivate = _GEmblemedIconPrivate

typealias GEmblemedIcon = _GEmblemedIcon

typealias GEmblemedIconClass = _GEmblemedIconClass

typealias GFileEnumeratorClass = _GFileEnumeratorClass

typealias GFileIface = _GFileIface

typealias GFileIconClass = _GFileIconClass

typealias GFileInfoClass = _GFileInfoClass

typealias GDateTime = _GDateTime

typealias GTimeVal = _GTimeVal

typealias GFileInputStreamClass = _GFileInputStreamClass

typealias GIOStreamClass = _GIOStreamClass

typealias GFileIOStreamClass = _GFileIOStreamClass

typealias GFileMonitorClass = _GFileMonitorClass

typealias GFilenameCompleterClass = _GFilenameCompleterClass

typealias GFileOutputStreamClass = _GFileOutputStreamClass

typealias GInetAddressClass = _GInetAddressClass

typealias GInetAddressMaskClass = _GInetAddressMaskClass

typealias GSocketAddressClass = _GSocketAddressClass

typealias GInetSocketAddressClass = _GInetSocketAddressClass

typealias GIOModuleScope = _GIOModuleScope

typealias GIOModuleClass = _GIOModuleClass

typealias GLoadableIconIface = _GLoadableIconIface

typealias GMemoryInputStreamClass = _GMemoryInputStreamClass

typealias GMemoryOutputStreamClass = _GMemoryOutputStreamClass

typealias GReallocFuncVar = CPointerVarOf<GReallocFunc>

typealias GReallocFunc = CPointer<CFunction<(gpointer?, gsize) -> gpointer?>>

typealias GMountIface = _GMountIface

typealias GArray = _GArray

typealias GMountOperationClass = _GMountOperationClass

typealias GNativeSocketAddressClass = _GNativeSocketAddressClass

typealias GVolumeMonitorClass = _GVolumeMonitorClass

typealias GNativeVolumeMonitor = _GNativeVolumeMonitor

typealias GNativeVolumeMonitorClass = _GNativeVolumeMonitorClass

typealias GNetworkAddressClass = _GNetworkAddressClass

typealias GNetworkMonitorInterface = _GNetworkMonitorInterface

typealias GNetworkServiceClass = _GNetworkServiceClass

typealias GPermissionClass = _GPermissionClass

typealias GPollableInputStreamInterface = _GPollableInputStreamInterface

typealias GPollableOutputStreamInterface = _GPollableOutputStreamInterface

typealias GProxyInterface = _GProxyInterface

typealias GProxyAddressClass = _GProxyAddressClass

typealias GSocketAddressEnumeratorClass = _GSocketAddressEnumeratorClass

typealias GProxyAddressEnumeratorClass = _GProxyAddressEnumeratorClass

typealias GProxyResolverInterface = _GProxyResolverInterface

typealias GResolverClass = _GResolverClass

typealias GStaticResource = _GStaticResource

typealias GSeekableIface = _GSeekableIface

typealias GSettingsSchemaSource = _GSettingsSchemaSource

typealias GSettingsSchema = _GSettingsSchema

typealias GSettingsSchemaKey = _GSettingsSchemaKey

typealias GSettingsClass = _GSettingsClass

typealias GSettingsBindSetMappingVar = CPointerVarOf<GSettingsBindSetMapping>

typealias GSettingsBindSetMapping = CPointer<CFunction<(CPointer<GValue>?, CPointer<GVariantType>?, gpointer?) -> CPointer<GVariant>?>>

typealias GSettingsBindGetMappingVar = CPointerVarOf<GSettingsBindGetMapping>

typealias GSettingsBindGetMapping = CPointer<CFunction<(CPointer<GValue>?, CPointer<GVariant>?, gpointer?) -> gboolean>>

typealias GSettingsGetMappingVar = CPointerVarOf<GSettingsGetMapping>

typealias GSettingsGetMapping = CPointer<CFunction<(CPointer<GVariant>?, CPointer<gpointerVar>?, gpointer?) -> gboolean>>

typealias GSimpleActionGroupClass = _GSimpleActionGroupClass

typealias GSimpleAsyncResultClass = _GSimpleAsyncResultClass

typealias GSocketClientClass = _GSocketClientClass

typealias GSocketConnectableIface = _GSocketConnectableIface

typealias GSocketClass = _GSocketClass

typealias GSocketConnectionClass = _GSocketConnectionClass

typealias GSocketControlMessageClass = _GSocketControlMessageClass

typealias GSocketListenerClass = _GSocketListenerClass

typealias GSocketServiceClass = _GSocketServiceClass

typealias GSimpleProxyResolverPrivate = _GSimpleProxyResolverPrivate

typealias GSimpleProxyResolver = _GSimpleProxyResolver

typealias GSimpleProxyResolverClass = _GSimpleProxyResolverClass

typealias GTaskClass = _GTaskClass

typealias GTaskThreadFuncVar = CPointerVarOf<GTaskThreadFunc>

typealias GTaskThreadFunc = CPointer<CFunction<(CPointer<GTask>?, gpointer?, gpointer?, CPointer<GCancellable>?) -> Unit>>

typealias GSpawnChildSetupFuncVar = CPointerVarOf<GSpawnChildSetupFunc>

typealias GSpawnChildSetupFunc = CPointer<CFunction<(gpointer?) -> Unit>>

typealias GTcpConnectionClass = _GTcpConnectionClass

typealias GTcpWrapperConnectionClass = _GTcpWrapperConnectionClass

typealias GThemedIconClass = _GThemedIconClass

typealias GThreadedSocketServiceClass = _GThreadedSocketServiceClass

typealias GTlsBackend = _GTlsBackend

typealias GTlsBackendInterface = _GTlsBackendInterface

typealias GTlsCertificateClass = _GTlsCertificateClass

typealias GTlsConnectionClass = _GTlsConnectionClass

typealias GTlsClientConnectionInterface = _GTlsClientConnectionInterface

typealias GByteArray = _GByteArray

typealias GTlsDatabaseClass = _GTlsDatabaseClass

typealias GTlsFileDatabaseInterface = _GTlsFileDatabaseInterface

typealias GTlsInteractionClass = _GTlsInteractionClass

typealias GTlsServerConnectionInterface = _GTlsServerConnectionInterface

typealias GTlsPasswordClass = _GTlsPasswordClass

typealias GVfsFileLookupFuncVar = CPointerVarOf<GVfsFileLookupFunc>

typealias GVfsFileLookupFunc = CPointer<CFunction<(CPointer<GVfs>?, CPointer<ByteVar>?, gpointer?) -> CPointer<GFile>?>>

typealias GVfsClass = _GVfsClass

typealias GVolumeIface = _GVolumeIface

typealias GZlibCompressorClass = _GZlibCompressorClass

typealias GZlibDecompressorClass = _GZlibDecompressorClass

typealias GDBusInterfaceIface = _GDBusInterfaceIface

typealias GDBusInterfaceSkeletonClass = _GDBusInterfaceSkeletonClass

typealias GDBusObjectIface = _GDBusObjectIface

typealias GDBusObjectSkeletonClass = _GDBusObjectSkeletonClass

typealias GDBusObjectProxyClass = _GDBusObjectProxyClass

typealias GDBusObjectManagerIface = _GDBusObjectManagerIface

typealias GDBusObjectManagerClientClass = _GDBusObjectManagerClientClass

typealias GDBusObjectManagerServerClass = _GDBusObjectManagerServerClass

typealias GRemoteActionGroupInterface = _GRemoteActionGroupInterface

typealias GHashTable = _GHashTable

typealias GMenuAttributeIterPrivate = _GMenuAttributeIterPrivate

typealias GMenuAttributeIter = _GMenuAttributeIter

typealias GMenuLinkIterPrivate = _GMenuLinkIterPrivate

typealias GMenuLinkIter = _GMenuLinkIter

typealias GMenuModelClass = _GMenuModelClass

typealias GMenuAttributeIterClass = _GMenuAttributeIterClass

typealias GMenuLinkIterClass = _GMenuLinkIterClass

typealias GMenuItem = _GMenuItem

typealias GMenu = _GMenu

typealias GDBusMenuModel = _GDBusMenuModel

typealias GListModel = _GListModel

typealias GListModelInterface = _GListModelInterface

typealias GListModel_autoptrVar = CPointerVarOf<GListModel_autoptr>

typealias GListModel_autoptr = CPointer<GListModel>

typealias GListModel_listautoptrVar = CPointerVarOf<GListModel_listautoptr>

typealias GListModel_listautoptr = CPointer<GList>

typealias GListModel_slistautoptrVar = CPointerVarOf<GListModel_slistautoptr>

typealias GListModel_slistautoptr = CPointer<GSList>

typealias GListModel_queueautoptrVar = CPointerVarOf<GListModel_queueautoptr>

typealias GListModel_queueautoptr = CPointer<GQueue>

typealias GListStore = _GListStore

typealias GListStore_autoptrVar = CPointerVarOf<GListStore_autoptr>

typealias GListStore_autoptr = CPointer<GListStore>

typealias GListStore_listautoptrVar = CPointerVarOf<GListStore_listautoptr>

typealias GListStore_listautoptr = CPointer<GList>

typealias GListStore_slistautoptrVar = CPointerVarOf<GListStore_slistautoptr>

typealias GListStore_slistautoptr = CPointer<GSList>

typealias GListStore_queueautoptrVar = CPointerVarOf<GListStore_queueautoptr>

typealias GListStore_queueautoptr = CPointer<GQueue>

typealias GAction_autoptrVar = CPointerVarOf<GAction_autoptr>

typealias GAction_autoptr = CPointer<GAction>

typealias GAction_listautoptrVar = CPointerVarOf<GAction_listautoptr>

typealias GAction_listautoptr = CPointer<GList>

typealias GAction_slistautoptrVar = CPointerVarOf<GAction_slistautoptr>

typealias GAction_slistautoptr = CPointer<GSList>

typealias GAction_queueautoptrVar = CPointerVarOf<GAction_queueautoptr>

typealias GAction_queueautoptr = CPointer<GQueue>

typealias GActionMap_autoptrVar = CPointerVarOf<GActionMap_autoptr>

typealias GActionMap_autoptr = CPointer<GActionMap>

typealias GActionMap_listautoptrVar = CPointerVarOf<GActionMap_listautoptr>

typealias GActionMap_listautoptr = CPointer<GList>

typealias GActionMap_slistautoptrVar = CPointerVarOf<GActionMap_slistautoptr>

typealias GActionMap_slistautoptr = CPointer<GSList>

typealias GActionMap_queueautoptrVar = CPointerVarOf<GActionMap_queueautoptr>

typealias GActionMap_queueautoptr = CPointer<GQueue>

typealias GAppInfo_autoptrVar = CPointerVarOf<GAppInfo_autoptr>

typealias GAppInfo_autoptr = CPointer<GAppInfo>

typealias GAppInfo_listautoptrVar = CPointerVarOf<GAppInfo_listautoptr>

typealias GAppInfo_listautoptr = CPointer<GList>

typealias GAppInfo_slistautoptrVar = CPointerVarOf<GAppInfo_slistautoptr>

typealias GAppInfo_slistautoptr = CPointer<GSList>

typealias GAppInfo_queueautoptrVar = CPointerVarOf<GAppInfo_queueautoptr>

typealias GAppInfo_queueautoptr = CPointer<GQueue>

typealias GAppLaunchContext_autoptrVar = CPointerVarOf<GAppLaunchContext_autoptr>

typealias GAppLaunchContext_autoptr = CPointer<GAppLaunchContext>

typealias GAppLaunchContext_listautoptrVar = CPointerVarOf<GAppLaunchContext_listautoptr>

typealias GAppLaunchContext_listautoptr = CPointer<GList>

typealias GAppLaunchContext_slistautoptrVar = CPointerVarOf<GAppLaunchContext_slistautoptr>

typealias GAppLaunchContext_slistautoptr = CPointer<GSList>

typealias GAppLaunchContext_queueautoptrVar = CPointerVarOf<GAppLaunchContext_queueautoptr>

typealias GAppLaunchContext_queueautoptr = CPointer<GQueue>

typealias GAppInfoMonitor_autoptrVar = CPointerVarOf<GAppInfoMonitor_autoptr>

typealias GAppInfoMonitor_autoptr = CPointer<GAppInfoMonitor>

typealias GAppInfoMonitor_listautoptrVar = CPointerVarOf<GAppInfoMonitor_listautoptr>

typealias GAppInfoMonitor_listautoptr = CPointer<GList>

typealias GAppInfoMonitor_slistautoptrVar = CPointerVarOf<GAppInfoMonitor_slistautoptr>

typealias GAppInfoMonitor_slistautoptr = CPointer<GSList>

typealias GAppInfoMonitor_queueautoptrVar = CPointerVarOf<GAppInfoMonitor_queueautoptr>

typealias GAppInfoMonitor_queueautoptr = CPointer<GQueue>

typealias GApplicationCommandLine_autoptrVar = CPointerVarOf<GApplicationCommandLine_autoptr>

typealias GApplicationCommandLine_autoptr = CPointer<GApplicationCommandLine>

typealias GApplicationCommandLine_listautoptrVar = CPointerVarOf<GApplicationCommandLine_listautoptr>

typealias GApplicationCommandLine_listautoptr = CPointer<GList>

typealias GApplicationCommandLine_slistautoptrVar = CPointerVarOf<GApplicationCommandLine_slistautoptr>

typealias GApplicationCommandLine_slistautoptr = CPointer<GSList>

typealias GApplicationCommandLine_queueautoptrVar = CPointerVarOf<GApplicationCommandLine_queueautoptr>

typealias GApplicationCommandLine_queueautoptr = CPointer<GQueue>

typealias GApplication_autoptrVar = CPointerVarOf<GApplication_autoptr>

typealias GApplication_autoptr = CPointer<GApplication>

typealias GApplication_listautoptrVar = CPointerVarOf<GApplication_listautoptr>

typealias GApplication_listautoptr = CPointer<GList>

typealias GApplication_slistautoptrVar = CPointerVarOf<GApplication_slistautoptr>

typealias GApplication_slistautoptr = CPointer<GSList>

typealias GApplication_queueautoptrVar = CPointerVarOf<GApplication_queueautoptr>

typealias GApplication_queueautoptr = CPointer<GQueue>

typealias GAsyncInitable_autoptrVar = CPointerVarOf<GAsyncInitable_autoptr>

typealias GAsyncInitable_autoptr = CPointer<GAsyncInitable>

typealias GAsyncInitable_listautoptrVar = CPointerVarOf<GAsyncInitable_listautoptr>

typealias GAsyncInitable_listautoptr = CPointer<GList>

typealias GAsyncInitable_slistautoptrVar = CPointerVarOf<GAsyncInitable_slistautoptr>

typealias GAsyncInitable_slistautoptr = CPointer<GSList>

typealias GAsyncInitable_queueautoptrVar = CPointerVarOf<GAsyncInitable_queueautoptr>

typealias GAsyncInitable_queueautoptr = CPointer<GQueue>

typealias GAsyncResult_autoptrVar = CPointerVarOf<GAsyncResult_autoptr>

typealias GAsyncResult_autoptr = CPointer<GAsyncResult>

typealias GAsyncResult_listautoptrVar = CPointerVarOf<GAsyncResult_listautoptr>

typealias GAsyncResult_listautoptr = CPointer<GList>

typealias GAsyncResult_slistautoptrVar = CPointerVarOf<GAsyncResult_slistautoptr>

typealias GAsyncResult_slistautoptr = CPointer<GSList>

typealias GAsyncResult_queueautoptrVar = CPointerVarOf<GAsyncResult_queueautoptr>

typealias GAsyncResult_queueautoptr = CPointer<GQueue>

typealias GBufferedInputStream_autoptrVar = CPointerVarOf<GBufferedInputStream_autoptr>

typealias GBufferedInputStream_autoptr = CPointer<GBufferedInputStream>

typealias GBufferedInputStream_listautoptrVar = CPointerVarOf<GBufferedInputStream_listautoptr>

typealias GBufferedInputStream_listautoptr = CPointer<GList>

typealias GBufferedInputStream_slistautoptrVar = CPointerVarOf<GBufferedInputStream_slistautoptr>

typealias GBufferedInputStream_slistautoptr = CPointer<GSList>

typealias GBufferedInputStream_queueautoptrVar = CPointerVarOf<GBufferedInputStream_queueautoptr>

typealias GBufferedInputStream_queueautoptr = CPointer<GQueue>

typealias GBufferedOutputStream_autoptrVar = CPointerVarOf<GBufferedOutputStream_autoptr>

typealias GBufferedOutputStream_autoptr = CPointer<GBufferedOutputStream>

typealias GBufferedOutputStream_listautoptrVar = CPointerVarOf<GBufferedOutputStream_listautoptr>

typealias GBufferedOutputStream_listautoptr = CPointer<GList>

typealias GBufferedOutputStream_slistautoptrVar = CPointerVarOf<GBufferedOutputStream_slistautoptr>

typealias GBufferedOutputStream_slistautoptr = CPointer<GSList>

typealias GBufferedOutputStream_queueautoptrVar = CPointerVarOf<GBufferedOutputStream_queueautoptr>

typealias GBufferedOutputStream_queueautoptr = CPointer<GQueue>

typealias GBytesIcon_autoptrVar = CPointerVarOf<GBytesIcon_autoptr>

typealias GBytesIcon_autoptr = CPointer<GBytesIcon>

typealias GBytesIcon_listautoptrVar = CPointerVarOf<GBytesIcon_listautoptr>

typealias GBytesIcon_listautoptr = CPointer<GList>

typealias GBytesIcon_slistautoptrVar = CPointerVarOf<GBytesIcon_slistautoptr>

typealias GBytesIcon_slistautoptr = CPointer<GSList>

typealias GBytesIcon_queueautoptrVar = CPointerVarOf<GBytesIcon_queueautoptr>

typealias GBytesIcon_queueautoptr = CPointer<GQueue>

typealias GCancellable_autoptrVar = CPointerVarOf<GCancellable_autoptr>

typealias GCancellable_autoptr = CPointer<GCancellable>

typealias GCancellable_listautoptrVar = CPointerVarOf<GCancellable_listautoptr>

typealias GCancellable_listautoptr = CPointer<GList>

typealias GCancellable_slistautoptrVar = CPointerVarOf<GCancellable_slistautoptr>

typealias GCancellable_slistautoptr = CPointer<GSList>

typealias GCancellable_queueautoptrVar = CPointerVarOf<GCancellable_queueautoptr>

typealias GCancellable_queueautoptr = CPointer<GQueue>

typealias GCharsetConverter_autoptrVar = CPointerVarOf<GCharsetConverter_autoptr>

typealias GCharsetConverter_autoptr = CPointer<GCharsetConverter>

typealias GCharsetConverter_listautoptrVar = CPointerVarOf<GCharsetConverter_listautoptr>

typealias GCharsetConverter_listautoptr = CPointer<GList>

typealias GCharsetConverter_slistautoptrVar = CPointerVarOf<GCharsetConverter_slistautoptr>

typealias GCharsetConverter_slistautoptr = CPointer<GSList>

typealias GCharsetConverter_queueautoptrVar = CPointerVarOf<GCharsetConverter_queueautoptr>

typealias GCharsetConverter_queueautoptr = CPointer<GQueue>

typealias GConverter_autoptrVar = CPointerVarOf<GConverter_autoptr>

typealias GConverter_autoptr = CPointer<GConverter>

typealias GConverter_listautoptrVar = CPointerVarOf<GConverter_listautoptr>

typealias GConverter_listautoptr = CPointer<GList>

typealias GConverter_slistautoptrVar = CPointerVarOf<GConverter_slistautoptr>

typealias GConverter_slistautoptr = CPointer<GSList>

typealias GConverter_queueautoptrVar = CPointerVarOf<GConverter_queueautoptr>

typealias GConverter_queueautoptr = CPointer<GQueue>

typealias GConverterInputStream_autoptrVar = CPointerVarOf<GConverterInputStream_autoptr>

typealias GConverterInputStream_autoptr = CPointer<GConverterInputStream>

typealias GConverterInputStream_listautoptrVar = CPointerVarOf<GConverterInputStream_listautoptr>

typealias GConverterInputStream_listautoptr = CPointer<GList>

typealias GConverterInputStream_slistautoptrVar = CPointerVarOf<GConverterInputStream_slistautoptr>

typealias GConverterInputStream_slistautoptr = CPointer<GSList>

typealias GConverterInputStream_queueautoptrVar = CPointerVarOf<GConverterInputStream_queueautoptr>

typealias GConverterInputStream_queueautoptr = CPointer<GQueue>

typealias GConverterOutputStream_autoptrVar = CPointerVarOf<GConverterOutputStream_autoptr>

typealias GConverterOutputStream_autoptr = CPointer<GConverterOutputStream>

typealias GConverterOutputStream_listautoptrVar = CPointerVarOf<GConverterOutputStream_listautoptr>

typealias GConverterOutputStream_listautoptr = CPointer<GList>

typealias GConverterOutputStream_slistautoptrVar = CPointerVarOf<GConverterOutputStream_slistautoptr>

typealias GConverterOutputStream_slistautoptr = CPointer<GSList>

typealias GConverterOutputStream_queueautoptrVar = CPointerVarOf<GConverterOutputStream_queueautoptr>

typealias GConverterOutputStream_queueautoptr = CPointer<GQueue>

typealias GCredentials_autoptrVar = CPointerVarOf<GCredentials_autoptr>

typealias GCredentials_autoptr = CPointer<GCredentials>

typealias GCredentials_listautoptrVar = CPointerVarOf<GCredentials_listautoptr>

typealias GCredentials_listautoptr = CPointer<GList>

typealias GCredentials_slistautoptrVar = CPointerVarOf<GCredentials_slistautoptr>

typealias GCredentials_slistautoptr = CPointer<GSList>

typealias GCredentials_queueautoptrVar = CPointerVarOf<GCredentials_queueautoptr>

typealias GCredentials_queueautoptr = CPointer<GQueue>

typealias GDatagramBased_autoptrVar = CPointerVarOf<GDatagramBased_autoptr>

typealias GDatagramBased_autoptr = CPointer<GDatagramBased>

typealias GDatagramBased_listautoptrVar = CPointerVarOf<GDatagramBased_listautoptr>

typealias GDatagramBased_listautoptr = CPointer<GList>

typealias GDatagramBased_slistautoptrVar = CPointerVarOf<GDatagramBased_slistautoptr>

typealias GDatagramBased_slistautoptr = CPointer<GSList>

typealias GDatagramBased_queueautoptrVar = CPointerVarOf<GDatagramBased_queueautoptr>

typealias GDatagramBased_queueautoptr = CPointer<GQueue>

typealias GDataInputStream_autoptrVar = CPointerVarOf<GDataInputStream_autoptr>

typealias GDataInputStream_autoptr = CPointer<GDataInputStream>

typealias GDataInputStream_listautoptrVar = CPointerVarOf<GDataInputStream_listautoptr>

typealias GDataInputStream_listautoptr = CPointer<GList>

typealias GDataInputStream_slistautoptrVar = CPointerVarOf<GDataInputStream_slistautoptr>

typealias GDataInputStream_slistautoptr = CPointer<GSList>

typealias GDataInputStream_queueautoptrVar = CPointerVarOf<GDataInputStream_queueautoptr>

typealias GDataInputStream_queueautoptr = CPointer<GQueue>

typealias GDataOutputStream_autoptrVar = CPointerVarOf<GDataOutputStream_autoptr>

typealias GDataOutputStream_autoptr = CPointer<GDataOutputStream>

typealias GDataOutputStream_listautoptrVar = CPointerVarOf<GDataOutputStream_listautoptr>

typealias GDataOutputStream_listautoptr = CPointer<GList>

typealias GDataOutputStream_slistautoptrVar = CPointerVarOf<GDataOutputStream_slistautoptr>

typealias GDataOutputStream_slistautoptr = CPointer<GSList>

typealias GDataOutputStream_queueautoptrVar = CPointerVarOf<GDataOutputStream_queueautoptr>

typealias GDataOutputStream_queueautoptr = CPointer<GQueue>

typealias GDBusActionGroup_autoptrVar = CPointerVarOf<GDBusActionGroup_autoptr>

typealias GDBusActionGroup_autoptr = CPointer<GDBusActionGroup>

typealias GDBusActionGroup_listautoptrVar = CPointerVarOf<GDBusActionGroup_listautoptr>

typealias GDBusActionGroup_listautoptr = CPointer<GList>

typealias GDBusActionGroup_slistautoptrVar = CPointerVarOf<GDBusActionGroup_slistautoptr>

typealias GDBusActionGroup_slistautoptr = CPointer<GSList>

typealias GDBusActionGroup_queueautoptrVar = CPointerVarOf<GDBusActionGroup_queueautoptr>

typealias GDBusActionGroup_queueautoptr = CPointer<GQueue>

typealias GDBusAuthObserver_autoptrVar = CPointerVarOf<GDBusAuthObserver_autoptr>

typealias GDBusAuthObserver_autoptr = CPointer<GDBusAuthObserver>

typealias GDBusAuthObserver_listautoptrVar = CPointerVarOf<GDBusAuthObserver_listautoptr>

typealias GDBusAuthObserver_listautoptr = CPointer<GList>

typealias GDBusAuthObserver_slistautoptrVar = CPointerVarOf<GDBusAuthObserver_slistautoptr>

typealias GDBusAuthObserver_slistautoptr = CPointer<GSList>

typealias GDBusAuthObserver_queueautoptrVar = CPointerVarOf<GDBusAuthObserver_queueautoptr>

typealias GDBusAuthObserver_queueautoptr = CPointer<GQueue>

typealias GDBusConnection_autoptrVar = CPointerVarOf<GDBusConnection_autoptr>

typealias GDBusConnection_autoptr = CPointer<GDBusConnection>

typealias GDBusConnection_listautoptrVar = CPointerVarOf<GDBusConnection_listautoptr>

typealias GDBusConnection_listautoptr = CPointer<GList>

typealias GDBusConnection_slistautoptrVar = CPointerVarOf<GDBusConnection_slistautoptr>

typealias GDBusConnection_slistautoptr = CPointer<GSList>

typealias GDBusConnection_queueautoptrVar = CPointerVarOf<GDBusConnection_queueautoptr>

typealias GDBusConnection_queueautoptr = CPointer<GQueue>

typealias GDBusInterface_autoptrVar = CPointerVarOf<GDBusInterface_autoptr>

typealias GDBusInterface_autoptr = CPointer<GDBusInterface>

typealias GDBusInterface_listautoptrVar = CPointerVarOf<GDBusInterface_listautoptr>

typealias GDBusInterface_listautoptr = CPointer<GList>

typealias GDBusInterface_slistautoptrVar = CPointerVarOf<GDBusInterface_slistautoptr>

typealias GDBusInterface_slistautoptr = CPointer<GSList>

typealias GDBusInterface_queueautoptrVar = CPointerVarOf<GDBusInterface_queueautoptr>

typealias GDBusInterface_queueautoptr = CPointer<GQueue>

typealias GDBusInterfaceSkeleton_autoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_autoptr>

typealias GDBusInterfaceSkeleton_autoptr = CPointer<GDBusInterfaceSkeleton>

typealias GDBusInterfaceSkeleton_listautoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_listautoptr>

typealias GDBusInterfaceSkeleton_listautoptr = CPointer<GList>

typealias GDBusInterfaceSkeleton_slistautoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_slistautoptr>

typealias GDBusInterfaceSkeleton_slistautoptr = CPointer<GSList>

typealias GDBusInterfaceSkeleton_queueautoptrVar = CPointerVarOf<GDBusInterfaceSkeleton_queueautoptr>

typealias GDBusInterfaceSkeleton_queueautoptr = CPointer<GQueue>

typealias GDBusMenuModel_autoptrVar = CPointerVarOf<GDBusMenuModel_autoptr>

typealias GDBusMenuModel_autoptr = CPointer<GDBusMenuModel>

typealias GDBusMenuModel_listautoptrVar = CPointerVarOf<GDBusMenuModel_listautoptr>

typealias GDBusMenuModel_listautoptr = CPointer<GList>

typealias GDBusMenuModel_slistautoptrVar = CPointerVarOf<GDBusMenuModel_slistautoptr>

typealias GDBusMenuModel_slistautoptr = CPointer<GSList>

typealias GDBusMenuModel_queueautoptrVar = CPointerVarOf<GDBusMenuModel_queueautoptr>

typealias GDBusMenuModel_queueautoptr = CPointer<GQueue>

typealias GDBusMessage_autoptrVar = CPointerVarOf<GDBusMessage_autoptr>

typealias GDBusMessage_autoptr = CPointer<GDBusMessage>

typealias GDBusMessage_listautoptrVar = CPointerVarOf<GDBusMessage_listautoptr>

typealias GDBusMessage_listautoptr = CPointer<GList>

typealias GDBusMessage_slistautoptrVar = CPointerVarOf<GDBusMessage_slistautoptr>

typealias GDBusMessage_slistautoptr = CPointer<GSList>

typealias GDBusMessage_queueautoptrVar = CPointerVarOf<GDBusMessage_queueautoptr>

typealias GDBusMessage_queueautoptr = CPointer<GQueue>

typealias GDBusMethodInvocation_autoptrVar = CPointerVarOf<GDBusMethodInvocation_autoptr>

typealias GDBusMethodInvocation_autoptr = CPointer<GDBusMethodInvocation>

typealias GDBusMethodInvocation_listautoptrVar = CPointerVarOf<GDBusMethodInvocation_listautoptr>

typealias GDBusMethodInvocation_listautoptr = CPointer<GList>

typealias GDBusMethodInvocation_slistautoptrVar = CPointerVarOf<GDBusMethodInvocation_slistautoptr>

typealias GDBusMethodInvocation_slistautoptr = CPointer<GSList>

typealias GDBusMethodInvocation_queueautoptrVar = CPointerVarOf<GDBusMethodInvocation_queueautoptr>

typealias GDBusMethodInvocation_queueautoptr = CPointer<GQueue>

typealias GDBusNodeInfo_autoptrVar = CPointerVarOf<GDBusNodeInfo_autoptr>

typealias GDBusNodeInfo_autoptr = CPointer<GDBusNodeInfo>

typealias GDBusNodeInfo_listautoptrVar = CPointerVarOf<GDBusNodeInfo_listautoptr>

typealias GDBusNodeInfo_listautoptr = CPointer<GList>

typealias GDBusNodeInfo_slistautoptrVar = CPointerVarOf<GDBusNodeInfo_slistautoptr>

typealias GDBusNodeInfo_slistautoptr = CPointer<GSList>

typealias GDBusNodeInfo_queueautoptrVar = CPointerVarOf<GDBusNodeInfo_queueautoptr>

typealias GDBusNodeInfo_queueautoptr = CPointer<GQueue>

typealias GDBusObject_autoptrVar = CPointerVarOf<GDBusObject_autoptr>

typealias GDBusObject_autoptr = CPointer<GDBusObject>

typealias GDBusObject_listautoptrVar = CPointerVarOf<GDBusObject_listautoptr>

typealias GDBusObject_listautoptr = CPointer<GList>

typealias GDBusObject_slistautoptrVar = CPointerVarOf<GDBusObject_slistautoptr>

typealias GDBusObject_slistautoptr = CPointer<GSList>

typealias GDBusObject_queueautoptrVar = CPointerVarOf<GDBusObject_queueautoptr>

typealias GDBusObject_queueautoptr = CPointer<GQueue>

typealias GDBusObjectManagerClient_autoptrVar = CPointerVarOf<GDBusObjectManagerClient_autoptr>

typealias GDBusObjectManagerClient_autoptr = CPointer<GDBusObjectManagerClient>

typealias GDBusObjectManagerClient_listautoptrVar = CPointerVarOf<GDBusObjectManagerClient_listautoptr>

typealias GDBusObjectManagerClient_listautoptr = CPointer<GList>

typealias GDBusObjectManagerClient_slistautoptrVar = CPointerVarOf<GDBusObjectManagerClient_slistautoptr>

typealias GDBusObjectManagerClient_slistautoptr = CPointer<GSList>

typealias GDBusObjectManagerClient_queueautoptrVar = CPointerVarOf<GDBusObjectManagerClient_queueautoptr>

typealias GDBusObjectManagerClient_queueautoptr = CPointer<GQueue>

typealias GDBusObjectManager_autoptrVar = CPointerVarOf<GDBusObjectManager_autoptr>

typealias GDBusObjectManager_autoptr = CPointer<GDBusObjectManager>

typealias GDBusObjectManager_listautoptrVar = CPointerVarOf<GDBusObjectManager_listautoptr>

typealias GDBusObjectManager_listautoptr = CPointer<GList>

typealias GDBusObjectManager_slistautoptrVar = CPointerVarOf<GDBusObjectManager_slistautoptr>

typealias GDBusObjectManager_slistautoptr = CPointer<GSList>

typealias GDBusObjectManager_queueautoptrVar = CPointerVarOf<GDBusObjectManager_queueautoptr>

typealias GDBusObjectManager_queueautoptr = CPointer<GQueue>

typealias GDBusObjectManagerServer_autoptrVar = CPointerVarOf<GDBusObjectManagerServer_autoptr>

typealias GDBusObjectManagerServer_autoptr = CPointer<GDBusObjectManagerServer>

typealias GDBusObjectManagerServer_listautoptrVar = CPointerVarOf<GDBusObjectManagerServer_listautoptr>

typealias GDBusObjectManagerServer_listautoptr = CPointer<GList>

typealias GDBusObjectManagerServer_slistautoptrVar = CPointerVarOf<GDBusObjectManagerServer_slistautoptr>

typealias GDBusObjectManagerServer_slistautoptr = CPointer<GSList>

typealias GDBusObjectManagerServer_queueautoptrVar = CPointerVarOf<GDBusObjectManagerServer_queueautoptr>

typealias GDBusObjectManagerServer_queueautoptr = CPointer<GQueue>

typealias GDBusObjectProxy_autoptrVar = CPointerVarOf<GDBusObjectProxy_autoptr>

typealias GDBusObjectProxy_autoptr = CPointer<GDBusObjectProxy>

typealias GDBusObjectProxy_listautoptrVar = CPointerVarOf<GDBusObjectProxy_listautoptr>

typealias GDBusObjectProxy_listautoptr = CPointer<GList>

typealias GDBusObjectProxy_slistautoptrVar = CPointerVarOf<GDBusObjectProxy_slistautoptr>

typealias GDBusObjectProxy_slistautoptr = CPointer<GSList>

typealias GDBusObjectProxy_queueautoptrVar = CPointerVarOf<GDBusObjectProxy_queueautoptr>

typealias GDBusObjectProxy_queueautoptr = CPointer<GQueue>

typealias GDBusObjectSkeleton_autoptrVar = CPointerVarOf<GDBusObjectSkeleton_autoptr>

typealias GDBusObjectSkeleton_autoptr = CPointer<GDBusObjectSkeleton>

typealias GDBusObjectSkeleton_listautoptrVar = CPointerVarOf<GDBusObjectSkeleton_listautoptr>

typealias GDBusObjectSkeleton_listautoptr = CPointer<GList>

typealias GDBusObjectSkeleton_slistautoptrVar = CPointerVarOf<GDBusObjectSkeleton_slistautoptr>

typealias GDBusObjectSkeleton_slistautoptr = CPointer<GSList>

typealias GDBusObjectSkeleton_queueautoptrVar = CPointerVarOf<GDBusObjectSkeleton_queueautoptr>

typealias GDBusObjectSkeleton_queueautoptr = CPointer<GQueue>

typealias GDBusProxy_autoptrVar = CPointerVarOf<GDBusProxy_autoptr>

typealias GDBusProxy_autoptr = CPointer<GDBusProxy>

typealias GDBusProxy_listautoptrVar = CPointerVarOf<GDBusProxy_listautoptr>

typealias GDBusProxy_listautoptr = CPointer<GList>

typealias GDBusProxy_slistautoptrVar = CPointerVarOf<GDBusProxy_slistautoptr>

typealias GDBusProxy_slistautoptr = CPointer<GSList>

typealias GDBusProxy_queueautoptrVar = CPointerVarOf<GDBusProxy_queueautoptr>

typealias GDBusProxy_queueautoptr = CPointer<GQueue>

typealias GDBusServer_autoptrVar = CPointerVarOf<GDBusServer_autoptr>

typealias GDBusServer_autoptr = CPointer<GDBusServer>

typealias GDBusServer_listautoptrVar = CPointerVarOf<GDBusServer_listautoptr>

typealias GDBusServer_listautoptr = CPointer<GList>

typealias GDBusServer_slistautoptrVar = CPointerVarOf<GDBusServer_slistautoptr>

typealias GDBusServer_slistautoptr = CPointer<GSList>

typealias GDBusServer_queueautoptrVar = CPointerVarOf<GDBusServer_queueautoptr>

typealias GDBusServer_queueautoptr = CPointer<GQueue>

typealias GDrive_autoptrVar = CPointerVarOf<GDrive_autoptr>

typealias GDrive_autoptr = CPointer<GDrive>

typealias GDrive_listautoptrVar = CPointerVarOf<GDrive_listautoptr>

typealias GDrive_listautoptr = CPointer<GList>

typealias GDrive_slistautoptrVar = CPointerVarOf<GDrive_slistautoptr>

typealias GDrive_slistautoptr = CPointer<GSList>

typealias GDrive_queueautoptrVar = CPointerVarOf<GDrive_queueautoptr>

typealias GDrive_queueautoptr = CPointer<GQueue>

typealias GEmblemedIcon_autoptrVar = CPointerVarOf<GEmblemedIcon_autoptr>

typealias GEmblemedIcon_autoptr = CPointer<GEmblemedIcon>

typealias GEmblemedIcon_listautoptrVar = CPointerVarOf<GEmblemedIcon_listautoptr>

typealias GEmblemedIcon_listautoptr = CPointer<GList>

typealias GEmblemedIcon_slistautoptrVar = CPointerVarOf<GEmblemedIcon_slistautoptr>

typealias GEmblemedIcon_slistautoptr = CPointer<GSList>

typealias GEmblemedIcon_queueautoptrVar = CPointerVarOf<GEmblemedIcon_queueautoptr>

typealias GEmblemedIcon_queueautoptr = CPointer<GQueue>

typealias GEmblem_autoptrVar = CPointerVarOf<GEmblem_autoptr>

typealias GEmblem_autoptr = CPointer<GEmblem>

typealias GEmblem_listautoptrVar = CPointerVarOf<GEmblem_listautoptr>

typealias GEmblem_listautoptr = CPointer<GList>

typealias GEmblem_slistautoptrVar = CPointerVarOf<GEmblem_slistautoptr>

typealias GEmblem_slistautoptr = CPointer<GSList>

typealias GEmblem_queueautoptrVar = CPointerVarOf<GEmblem_queueautoptr>

typealias GEmblem_queueautoptr = CPointer<GQueue>

typealias GFileEnumerator_autoptrVar = CPointerVarOf<GFileEnumerator_autoptr>

typealias GFileEnumerator_autoptr = CPointer<GFileEnumerator>

typealias GFileEnumerator_listautoptrVar = CPointerVarOf<GFileEnumerator_listautoptr>

typealias GFileEnumerator_listautoptr = CPointer<GList>

typealias GFileEnumerator_slistautoptrVar = CPointerVarOf<GFileEnumerator_slistautoptr>

typealias GFileEnumerator_slistautoptr = CPointer<GSList>

typealias GFileEnumerator_queueautoptrVar = CPointerVarOf<GFileEnumerator_queueautoptr>

typealias GFileEnumerator_queueautoptr = CPointer<GQueue>

typealias GFile_autoptrVar = CPointerVarOf<GFile_autoptr>

typealias GFile_autoptr = CPointer<GFile>

typealias GFile_listautoptrVar = CPointerVarOf<GFile_listautoptr>

typealias GFile_listautoptr = CPointer<GList>

typealias GFile_slistautoptrVar = CPointerVarOf<GFile_slistautoptr>

typealias GFile_slistautoptr = CPointer<GSList>

typealias GFile_queueautoptrVar = CPointerVarOf<GFile_queueautoptr>

typealias GFile_queueautoptr = CPointer<GQueue>

typealias GFileAttributeInfoList_autoptrVar = CPointerVarOf<GFileAttributeInfoList_autoptr>

typealias GFileAttributeInfoList_autoptr = CPointer<GFileAttributeInfoList>

typealias GFileAttributeInfoList_listautoptrVar = CPointerVarOf<GFileAttributeInfoList_listautoptr>

typealias GFileAttributeInfoList_listautoptr = CPointer<GList>

typealias GFileAttributeInfoList_slistautoptrVar = CPointerVarOf<GFileAttributeInfoList_slistautoptr>

typealias GFileAttributeInfoList_slistautoptr = CPointer<GSList>

typealias GFileAttributeInfoList_queueautoptrVar = CPointerVarOf<GFileAttributeInfoList_queueautoptr>

typealias GFileAttributeInfoList_queueautoptr = CPointer<GQueue>

typealias GFileIcon_autoptrVar = CPointerVarOf<GFileIcon_autoptr>

typealias GFileIcon_autoptr = CPointer<GFileIcon>

typealias GFileIcon_listautoptrVar = CPointerVarOf<GFileIcon_listautoptr>

typealias GFileIcon_listautoptr = CPointer<GList>

typealias GFileIcon_slistautoptrVar = CPointerVarOf<GFileIcon_slistautoptr>

typealias GFileIcon_slistautoptr = CPointer<GSList>

typealias GFileIcon_queueautoptrVar = CPointerVarOf<GFileIcon_queueautoptr>

typealias GFileIcon_queueautoptr = CPointer<GQueue>

typealias GFileInfo_autoptrVar = CPointerVarOf<GFileInfo_autoptr>

typealias GFileInfo_autoptr = CPointer<GFileInfo>

typealias GFileInfo_listautoptrVar = CPointerVarOf<GFileInfo_listautoptr>

typealias GFileInfo_listautoptr = CPointer<GList>

typealias GFileInfo_slistautoptrVar = CPointerVarOf<GFileInfo_slistautoptr>

typealias GFileInfo_slistautoptr = CPointer<GSList>

typealias GFileInfo_queueautoptrVar = CPointerVarOf<GFileInfo_queueautoptr>

typealias GFileInfo_queueautoptr = CPointer<GQueue>

typealias GFileInputStream_autoptrVar = CPointerVarOf<GFileInputStream_autoptr>

typealias GFileInputStream_autoptr = CPointer<GFileInputStream>

typealias GFileInputStream_listautoptrVar = CPointerVarOf<GFileInputStream_listautoptr>

typealias GFileInputStream_listautoptr = CPointer<GList>

typealias GFileInputStream_slistautoptrVar = CPointerVarOf<GFileInputStream_slistautoptr>

typealias GFileInputStream_slistautoptr = CPointer<GSList>

typealias GFileInputStream_queueautoptrVar = CPointerVarOf<GFileInputStream_queueautoptr>

typealias GFileInputStream_queueautoptr = CPointer<GQueue>

typealias GFileIOStream_autoptrVar = CPointerVarOf<GFileIOStream_autoptr>

typealias GFileIOStream_autoptr = CPointer<GFileIOStream>

typealias GFileIOStream_listautoptrVar = CPointerVarOf<GFileIOStream_listautoptr>

typealias GFileIOStream_listautoptr = CPointer<GList>

typealias GFileIOStream_slistautoptrVar = CPointerVarOf<GFileIOStream_slistautoptr>

typealias GFileIOStream_slistautoptr = CPointer<GSList>

typealias GFileIOStream_queueautoptrVar = CPointerVarOf<GFileIOStream_queueautoptr>

typealias GFileIOStream_queueautoptr = CPointer<GQueue>

typealias GFileMonitor_autoptrVar = CPointerVarOf<GFileMonitor_autoptr>

typealias GFileMonitor_autoptr = CPointer<GFileMonitor>

typealias GFileMonitor_listautoptrVar = CPointerVarOf<GFileMonitor_listautoptr>

typealias GFileMonitor_listautoptr = CPointer<GList>

typealias GFileMonitor_slistautoptrVar = CPointerVarOf<GFileMonitor_slistautoptr>

typealias GFileMonitor_slistautoptr = CPointer<GSList>

typealias GFileMonitor_queueautoptrVar = CPointerVarOf<GFileMonitor_queueautoptr>

typealias GFileMonitor_queueautoptr = CPointer<GQueue>

typealias GFilenameCompleter_autoptrVar = CPointerVarOf<GFilenameCompleter_autoptr>

typealias GFilenameCompleter_autoptr = CPointer<GFilenameCompleter>

typealias GFilenameCompleter_listautoptrVar = CPointerVarOf<GFilenameCompleter_listautoptr>

typealias GFilenameCompleter_listautoptr = CPointer<GList>

typealias GFilenameCompleter_slistautoptrVar = CPointerVarOf<GFilenameCompleter_slistautoptr>

typealias GFilenameCompleter_slistautoptr = CPointer<GSList>

typealias GFilenameCompleter_queueautoptrVar = CPointerVarOf<GFilenameCompleter_queueautoptr>

typealias GFilenameCompleter_queueautoptr = CPointer<GQueue>

typealias GFileOutputStream_autoptrVar = CPointerVarOf<GFileOutputStream_autoptr>

typealias GFileOutputStream_autoptr = CPointer<GFileOutputStream>

typealias GFileOutputStream_listautoptrVar = CPointerVarOf<GFileOutputStream_listautoptr>

typealias GFileOutputStream_listautoptr = CPointer<GList>

typealias GFileOutputStream_slistautoptrVar = CPointerVarOf<GFileOutputStream_slistautoptr>

typealias GFileOutputStream_slistautoptr = CPointer<GSList>

typealias GFileOutputStream_queueautoptrVar = CPointerVarOf<GFileOutputStream_queueautoptr>

typealias GFileOutputStream_queueautoptr = CPointer<GQueue>

typealias GFilterInputStream_autoptrVar = CPointerVarOf<GFilterInputStream_autoptr>

typealias GFilterInputStream_autoptr = CPointer<GFilterInputStream>

typealias GFilterInputStream_listautoptrVar = CPointerVarOf<GFilterInputStream_listautoptr>

typealias GFilterInputStream_listautoptr = CPointer<GList>

typealias GFilterInputStream_slistautoptrVar = CPointerVarOf<GFilterInputStream_slistautoptr>

typealias GFilterInputStream_slistautoptr = CPointer<GSList>

typealias GFilterInputStream_queueautoptrVar = CPointerVarOf<GFilterInputStream_queueautoptr>

typealias GFilterInputStream_queueautoptr = CPointer<GQueue>

typealias GFilterOutputStream_autoptrVar = CPointerVarOf<GFilterOutputStream_autoptr>

typealias GFilterOutputStream_autoptr = CPointer<GFilterOutputStream>

typealias GFilterOutputStream_listautoptrVar = CPointerVarOf<GFilterOutputStream_listautoptr>

typealias GFilterOutputStream_listautoptr = CPointer<GList>

typealias GFilterOutputStream_slistautoptrVar = CPointerVarOf<GFilterOutputStream_slistautoptr>

typealias GFilterOutputStream_slistautoptr = CPointer<GSList>

typealias GFilterOutputStream_queueautoptrVar = CPointerVarOf<GFilterOutputStream_queueautoptr>

typealias GFilterOutputStream_queueautoptr = CPointer<GQueue>

typealias GIcon_autoptrVar = CPointerVarOf<GIcon_autoptr>

typealias GIcon_autoptr = CPointer<GIcon>

typealias GIcon_listautoptrVar = CPointerVarOf<GIcon_listautoptr>

typealias GIcon_listautoptr = CPointer<GList>

typealias GIcon_slistautoptrVar = CPointerVarOf<GIcon_slistautoptr>

typealias GIcon_slistautoptr = CPointer<GSList>

typealias GIcon_queueautoptrVar = CPointerVarOf<GIcon_queueautoptr>

typealias GIcon_queueautoptr = CPointer<GQueue>

typealias GInetAddress_autoptrVar = CPointerVarOf<GInetAddress_autoptr>

typealias GInetAddress_autoptr = CPointer<GInetAddress>

typealias GInetAddress_listautoptrVar = CPointerVarOf<GInetAddress_listautoptr>

typealias GInetAddress_listautoptr = CPointer<GList>

typealias GInetAddress_slistautoptrVar = CPointerVarOf<GInetAddress_slistautoptr>

typealias GInetAddress_slistautoptr = CPointer<GSList>

typealias GInetAddress_queueautoptrVar = CPointerVarOf<GInetAddress_queueautoptr>

typealias GInetAddress_queueautoptr = CPointer<GQueue>

typealias GInetAddressMask_autoptrVar = CPointerVarOf<GInetAddressMask_autoptr>

typealias GInetAddressMask_autoptr = CPointer<GInetAddressMask>

typealias GInetAddressMask_listautoptrVar = CPointerVarOf<GInetAddressMask_listautoptr>

typealias GInetAddressMask_listautoptr = CPointer<GList>

typealias GInetAddressMask_slistautoptrVar = CPointerVarOf<GInetAddressMask_slistautoptr>

typealias GInetAddressMask_slistautoptr = CPointer<GSList>

typealias GInetAddressMask_queueautoptrVar = CPointerVarOf<GInetAddressMask_queueautoptr>

typealias GInetAddressMask_queueautoptr = CPointer<GQueue>

typealias GInetSocketAddress_autoptrVar = CPointerVarOf<GInetSocketAddress_autoptr>

typealias GInetSocketAddress_autoptr = CPointer<GInetSocketAddress>

typealias GInetSocketAddress_listautoptrVar = CPointerVarOf<GInetSocketAddress_listautoptr>

typealias GInetSocketAddress_listautoptr = CPointer<GList>

typealias GInetSocketAddress_slistautoptrVar = CPointerVarOf<GInetSocketAddress_slistautoptr>

typealias GInetSocketAddress_slistautoptr = CPointer<GSList>

typealias GInetSocketAddress_queueautoptrVar = CPointerVarOf<GInetSocketAddress_queueautoptr>

typealias GInetSocketAddress_queueautoptr = CPointer<GQueue>

typealias GInitable_autoptrVar = CPointerVarOf<GInitable_autoptr>

typealias GInitable_autoptr = CPointer<GInitable>

typealias GInitable_listautoptrVar = CPointerVarOf<GInitable_listautoptr>

typealias GInitable_listautoptr = CPointer<GList>

typealias GInitable_slistautoptrVar = CPointerVarOf<GInitable_slistautoptr>

typealias GInitable_slistautoptr = CPointer<GSList>

typealias GInitable_queueautoptrVar = CPointerVarOf<GInitable_queueautoptr>

typealias GInitable_queueautoptr = CPointer<GQueue>

typealias GInputStream_autoptrVar = CPointerVarOf<GInputStream_autoptr>

typealias GInputStream_autoptr = CPointer<GInputStream>

typealias GInputStream_listautoptrVar = CPointerVarOf<GInputStream_listautoptr>

typealias GInputStream_listautoptr = CPointer<GList>

typealias GInputStream_slistautoptrVar = CPointerVarOf<GInputStream_slistautoptr>

typealias GInputStream_slistautoptr = CPointer<GSList>

typealias GInputStream_queueautoptrVar = CPointerVarOf<GInputStream_queueautoptr>

typealias GInputStream_queueautoptr = CPointer<GQueue>

typealias GIOModule_autoptrVar = CPointerVarOf<GIOModule_autoptr>

typealias GIOModule_autoptr = CPointer<GIOModule>

typealias GIOModule_listautoptrVar = CPointerVarOf<GIOModule_listautoptr>

typealias GIOModule_listautoptr = CPointer<GList>

typealias GIOModule_slistautoptrVar = CPointerVarOf<GIOModule_slistautoptr>

typealias GIOModule_slistautoptr = CPointer<GSList>

typealias GIOModule_queueautoptrVar = CPointerVarOf<GIOModule_queueautoptr>

typealias GIOModule_queueautoptr = CPointer<GQueue>

typealias GIOStream_autoptrVar = CPointerVarOf<GIOStream_autoptr>

typealias GIOStream_autoptr = CPointer<GIOStream>

typealias GIOStream_listautoptrVar = CPointerVarOf<GIOStream_listautoptr>

typealias GIOStream_listautoptr = CPointer<GList>

typealias GIOStream_slistautoptrVar = CPointerVarOf<GIOStream_slistautoptr>

typealias GIOStream_slistautoptr = CPointer<GSList>

typealias GIOStream_queueautoptrVar = CPointerVarOf<GIOStream_queueautoptr>

typealias GIOStream_queueautoptr = CPointer<GQueue>

typealias GLoadableIcon_autoptrVar = CPointerVarOf<GLoadableIcon_autoptr>

typealias GLoadableIcon_autoptr = CPointer<GLoadableIcon>

typealias GLoadableIcon_listautoptrVar = CPointerVarOf<GLoadableIcon_listautoptr>

typealias GLoadableIcon_listautoptr = CPointer<GList>

typealias GLoadableIcon_slistautoptrVar = CPointerVarOf<GLoadableIcon_slistautoptr>

typealias GLoadableIcon_slistautoptr = CPointer<GSList>

typealias GLoadableIcon_queueautoptrVar = CPointerVarOf<GLoadableIcon_queueautoptr>

typealias GLoadableIcon_queueautoptr = CPointer<GQueue>

typealias GMemoryInputStream_autoptrVar = CPointerVarOf<GMemoryInputStream_autoptr>

typealias GMemoryInputStream_autoptr = CPointer<GMemoryInputStream>

typealias GMemoryInputStream_listautoptrVar = CPointerVarOf<GMemoryInputStream_listautoptr>

typealias GMemoryInputStream_listautoptr = CPointer<GList>

typealias GMemoryInputStream_slistautoptrVar = CPointerVarOf<GMemoryInputStream_slistautoptr>

typealias GMemoryInputStream_slistautoptr = CPointer<GSList>

typealias GMemoryInputStream_queueautoptrVar = CPointerVarOf<GMemoryInputStream_queueautoptr>

typealias GMemoryInputStream_queueautoptr = CPointer<GQueue>

typealias GMemoryOutputStream_autoptrVar = CPointerVarOf<GMemoryOutputStream_autoptr>

typealias GMemoryOutputStream_autoptr = CPointer<GMemoryOutputStream>

typealias GMemoryOutputStream_listautoptrVar = CPointerVarOf<GMemoryOutputStream_listautoptr>

typealias GMemoryOutputStream_listautoptr = CPointer<GList>

typealias GMemoryOutputStream_slistautoptrVar = CPointerVarOf<GMemoryOutputStream_slistautoptr>

typealias GMemoryOutputStream_slistautoptr = CPointer<GSList>

typealias GMemoryOutputStream_queueautoptrVar = CPointerVarOf<GMemoryOutputStream_queueautoptr>

typealias GMemoryOutputStream_queueautoptr = CPointer<GQueue>

typealias GMenu_autoptrVar = CPointerVarOf<GMenu_autoptr>

typealias GMenu_autoptr = CPointer<GMenu>

typealias GMenu_listautoptrVar = CPointerVarOf<GMenu_listautoptr>

typealias GMenu_listautoptr = CPointer<GList>

typealias GMenu_slistautoptrVar = CPointerVarOf<GMenu_slistautoptr>

typealias GMenu_slistautoptr = CPointer<GSList>

typealias GMenu_queueautoptrVar = CPointerVarOf<GMenu_queueautoptr>

typealias GMenu_queueautoptr = CPointer<GQueue>

typealias GMenuItem_autoptrVar = CPointerVarOf<GMenuItem_autoptr>

typealias GMenuItem_autoptr = CPointer<GMenuItem>

typealias GMenuItem_listautoptrVar = CPointerVarOf<GMenuItem_listautoptr>

typealias GMenuItem_listautoptr = CPointer<GList>

typealias GMenuItem_slistautoptrVar = CPointerVarOf<GMenuItem_slistautoptr>

typealias GMenuItem_slistautoptr = CPointer<GSList>

typealias GMenuItem_queueautoptrVar = CPointerVarOf<GMenuItem_queueautoptr>

typealias GMenuItem_queueautoptr = CPointer<GQueue>

typealias GMenuModel_autoptrVar = CPointerVarOf<GMenuModel_autoptr>

typealias GMenuModel_autoptr = CPointer<GMenuModel>

typealias GMenuModel_listautoptrVar = CPointerVarOf<GMenuModel_listautoptr>

typealias GMenuModel_listautoptr = CPointer<GList>

typealias GMenuModel_slistautoptrVar = CPointerVarOf<GMenuModel_slistautoptr>

typealias GMenuModel_slistautoptr = CPointer<GSList>

typealias GMenuModel_queueautoptrVar = CPointerVarOf<GMenuModel_queueautoptr>

typealias GMenuModel_queueautoptr = CPointer<GQueue>

typealias GMenuAttributeIter_autoptrVar = CPointerVarOf<GMenuAttributeIter_autoptr>

typealias GMenuAttributeIter_autoptr = CPointer<GMenuAttributeIter>

typealias GMenuAttributeIter_listautoptrVar = CPointerVarOf<GMenuAttributeIter_listautoptr>

typealias GMenuAttributeIter_listautoptr = CPointer<GList>

typealias GMenuAttributeIter_slistautoptrVar = CPointerVarOf<GMenuAttributeIter_slistautoptr>

typealias GMenuAttributeIter_slistautoptr = CPointer<GSList>

typealias GMenuAttributeIter_queueautoptrVar = CPointerVarOf<GMenuAttributeIter_queueautoptr>

typealias GMenuAttributeIter_queueautoptr = CPointer<GQueue>

typealias GMenuLinkIter_autoptrVar = CPointerVarOf<GMenuLinkIter_autoptr>

typealias GMenuLinkIter_autoptr = CPointer<GMenuLinkIter>

typealias GMenuLinkIter_listautoptrVar = CPointerVarOf<GMenuLinkIter_listautoptr>

typealias GMenuLinkIter_listautoptr = CPointer<GList>

typealias GMenuLinkIter_slistautoptrVar = CPointerVarOf<GMenuLinkIter_slistautoptr>

typealias GMenuLinkIter_slistautoptr = CPointer<GSList>

typealias GMenuLinkIter_queueautoptrVar = CPointerVarOf<GMenuLinkIter_queueautoptr>

typealias GMenuLinkIter_queueautoptr = CPointer<GQueue>

typealias GMount_autoptrVar = CPointerVarOf<GMount_autoptr>

typealias GMount_autoptr = CPointer<GMount>

typealias GMount_listautoptrVar = CPointerVarOf<GMount_listautoptr>

typealias GMount_listautoptr = CPointer<GList>

typealias GMount_slistautoptrVar = CPointerVarOf<GMount_slistautoptr>

typealias GMount_slistautoptr = CPointer<GSList>

typealias GMount_queueautoptrVar = CPointerVarOf<GMount_queueautoptr>

typealias GMount_queueautoptr = CPointer<GQueue>

typealias GMountOperation_autoptrVar = CPointerVarOf<GMountOperation_autoptr>

typealias GMountOperation_autoptr = CPointer<GMountOperation>

typealias GMountOperation_listautoptrVar = CPointerVarOf<GMountOperation_listautoptr>

typealias GMountOperation_listautoptr = CPointer<GList>

typealias GMountOperation_slistautoptrVar = CPointerVarOf<GMountOperation_slistautoptr>

typealias GMountOperation_slistautoptr = CPointer<GSList>

typealias GMountOperation_queueautoptrVar = CPointerVarOf<GMountOperation_queueautoptr>

typealias GMountOperation_queueautoptr = CPointer<GQueue>

typealias GNativeVolumeMonitor_autoptrVar = CPointerVarOf<GNativeVolumeMonitor_autoptr>

typealias GNativeVolumeMonitor_autoptr = CPointer<GNativeVolumeMonitor>

typealias GNativeVolumeMonitor_listautoptrVar = CPointerVarOf<GNativeVolumeMonitor_listautoptr>

typealias GNativeVolumeMonitor_listautoptr = CPointer<GList>

typealias GNativeVolumeMonitor_slistautoptrVar = CPointerVarOf<GNativeVolumeMonitor_slistautoptr>

typealias GNativeVolumeMonitor_slistautoptr = CPointer<GSList>

typealias GNativeVolumeMonitor_queueautoptrVar = CPointerVarOf<GNativeVolumeMonitor_queueautoptr>

typealias GNativeVolumeMonitor_queueautoptr = CPointer<GQueue>

typealias GNetworkAddress_autoptrVar = CPointerVarOf<GNetworkAddress_autoptr>

typealias GNetworkAddress_autoptr = CPointer<GNetworkAddress>

typealias GNetworkAddress_listautoptrVar = CPointerVarOf<GNetworkAddress_listautoptr>

typealias GNetworkAddress_listautoptr = CPointer<GList>

typealias GNetworkAddress_slistautoptrVar = CPointerVarOf<GNetworkAddress_slistautoptr>

typealias GNetworkAddress_slistautoptr = CPointer<GSList>

typealias GNetworkAddress_queueautoptrVar = CPointerVarOf<GNetworkAddress_queueautoptr>

typealias GNetworkAddress_queueautoptr = CPointer<GQueue>

typealias GNetworkMonitor_autoptrVar = CPointerVarOf<GNetworkMonitor_autoptr>

typealias GNetworkMonitor_autoptr = CPointer<GNetworkMonitor>

typealias GNetworkMonitor_listautoptrVar = CPointerVarOf<GNetworkMonitor_listautoptr>

typealias GNetworkMonitor_listautoptr = CPointer<GList>

typealias GNetworkMonitor_slistautoptrVar = CPointerVarOf<GNetworkMonitor_slistautoptr>

typealias GNetworkMonitor_slistautoptr = CPointer<GSList>

typealias GNetworkMonitor_queueautoptrVar = CPointerVarOf<GNetworkMonitor_queueautoptr>

typealias GNetworkMonitor_queueautoptr = CPointer<GQueue>

typealias GNetworkService_autoptrVar = CPointerVarOf<GNetworkService_autoptr>

typealias GNetworkService_autoptr = CPointer<GNetworkService>

typealias GNetworkService_listautoptrVar = CPointerVarOf<GNetworkService_listautoptr>

typealias GNetworkService_listautoptr = CPointer<GList>

typealias GNetworkService_slistautoptrVar = CPointerVarOf<GNetworkService_slistautoptr>

typealias GNetworkService_slistautoptr = CPointer<GSList>

typealias GNetworkService_queueautoptrVar = CPointerVarOf<GNetworkService_queueautoptr>

typealias GNetworkService_queueautoptr = CPointer<GQueue>

typealias GNotification_autoptrVar = CPointerVarOf<GNotification_autoptr>

typealias GNotification_autoptr = CPointer<GNotification>

typealias GNotification_listautoptrVar = CPointerVarOf<GNotification_listautoptr>

typealias GNotification_listautoptr = CPointer<GList>

typealias GNotification_slistautoptrVar = CPointerVarOf<GNotification_slistautoptr>

typealias GNotification_slistautoptr = CPointer<GSList>

typealias GNotification_queueautoptrVar = CPointerVarOf<GNotification_queueautoptr>

typealias GNotification_queueautoptr = CPointer<GQueue>

typealias GOutputStream_autoptrVar = CPointerVarOf<GOutputStream_autoptr>

typealias GOutputStream_autoptr = CPointer<GOutputStream>

typealias GOutputStream_listautoptrVar = CPointerVarOf<GOutputStream_listautoptr>

typealias GOutputStream_listautoptr = CPointer<GList>

typealias GOutputStream_slistautoptrVar = CPointerVarOf<GOutputStream_slistautoptr>

typealias GOutputStream_slistautoptr = CPointer<GSList>

typealias GOutputStream_queueautoptrVar = CPointerVarOf<GOutputStream_queueautoptr>

typealias GOutputStream_queueautoptr = CPointer<GQueue>

typealias GPermission_autoptrVar = CPointerVarOf<GPermission_autoptr>

typealias GPermission_autoptr = CPointer<GPermission>

typealias GPermission_listautoptrVar = CPointerVarOf<GPermission_listautoptr>

typealias GPermission_listautoptr = CPointer<GList>

typealias GPermission_slistautoptrVar = CPointerVarOf<GPermission_slistautoptr>

typealias GPermission_slistautoptr = CPointer<GSList>

typealias GPermission_queueautoptrVar = CPointerVarOf<GPermission_queueautoptr>

typealias GPermission_queueautoptr = CPointer<GQueue>

typealias GPollableInputStream_autoptrVar = CPointerVarOf<GPollableInputStream_autoptr>

typealias GPollableInputStream_autoptr = CPointer<GPollableInputStream>

typealias GPollableInputStream_listautoptrVar = CPointerVarOf<GPollableInputStream_listautoptr>

typealias GPollableInputStream_listautoptr = CPointer<GList>

typealias GPollableInputStream_slistautoptrVar = CPointerVarOf<GPollableInputStream_slistautoptr>

typealias GPollableInputStream_slistautoptr = CPointer<GSList>

typealias GPollableInputStream_queueautoptrVar = CPointerVarOf<GPollableInputStream_queueautoptr>

typealias GPollableInputStream_queueautoptr = CPointer<GQueue>

typealias GPollableOutputStream_autoptrVar = CPointerVarOf<GPollableOutputStream_autoptr>

typealias GPollableOutputStream_autoptr = CPointer<GPollableOutputStream>

typealias GPollableOutputStream_listautoptrVar = CPointerVarOf<GPollableOutputStream_listautoptr>

typealias GPollableOutputStream_listautoptr = CPointer<GList>

typealias GPollableOutputStream_slistautoptrVar = CPointerVarOf<GPollableOutputStream_slistautoptr>

typealias GPollableOutputStream_slistautoptr = CPointer<GSList>

typealias GPollableOutputStream_queueautoptrVar = CPointerVarOf<GPollableOutputStream_queueautoptr>

typealias GPollableOutputStream_queueautoptr = CPointer<GQueue>

typealias GPropertyAction_autoptrVar = CPointerVarOf<GPropertyAction_autoptr>

typealias GPropertyAction_autoptr = CPointer<GPropertyAction>

typealias GPropertyAction_listautoptrVar = CPointerVarOf<GPropertyAction_listautoptr>

typealias GPropertyAction_listautoptr = CPointer<GList>

typealias GPropertyAction_slistautoptrVar = CPointerVarOf<GPropertyAction_slistautoptr>

typealias GPropertyAction_slistautoptr = CPointer<GSList>

typealias GPropertyAction_queueautoptrVar = CPointerVarOf<GPropertyAction_queueautoptr>

typealias GPropertyAction_queueautoptr = CPointer<GQueue>

typealias GProxyAddressEnumerator_autoptrVar = CPointerVarOf<GProxyAddressEnumerator_autoptr>

typealias GProxyAddressEnumerator_autoptr = CPointer<GProxyAddressEnumerator>

typealias GProxyAddressEnumerator_listautoptrVar = CPointerVarOf<GProxyAddressEnumerator_listautoptr>

typealias GProxyAddressEnumerator_listautoptr = CPointer<GList>

typealias GProxyAddressEnumerator_slistautoptrVar = CPointerVarOf<GProxyAddressEnumerator_slistautoptr>

typealias GProxyAddressEnumerator_slistautoptr = CPointer<GSList>

typealias GProxyAddressEnumerator_queueautoptrVar = CPointerVarOf<GProxyAddressEnumerator_queueautoptr>

typealias GProxyAddressEnumerator_queueautoptr = CPointer<GQueue>

typealias GProxyAddress_autoptrVar = CPointerVarOf<GProxyAddress_autoptr>

typealias GProxyAddress_autoptr = CPointer<GProxyAddress>

typealias GProxyAddress_listautoptrVar = CPointerVarOf<GProxyAddress_listautoptr>

typealias GProxyAddress_listautoptr = CPointer<GList>

typealias GProxyAddress_slistautoptrVar = CPointerVarOf<GProxyAddress_slistautoptr>

typealias GProxyAddress_slistautoptr = CPointer<GSList>

typealias GProxyAddress_queueautoptrVar = CPointerVarOf<GProxyAddress_queueautoptr>

typealias GProxyAddress_queueautoptr = CPointer<GQueue>

typealias GProxy_autoptrVar = CPointerVarOf<GProxy_autoptr>

typealias GProxy_autoptr = CPointer<GProxy>

typealias GProxy_listautoptrVar = CPointerVarOf<GProxy_listautoptr>

typealias GProxy_listautoptr = CPointer<GList>

typealias GProxy_slistautoptrVar = CPointerVarOf<GProxy_slistautoptr>

typealias GProxy_slistautoptr = CPointer<GSList>

typealias GProxy_queueautoptrVar = CPointerVarOf<GProxy_queueautoptr>

typealias GProxy_queueautoptr = CPointer<GQueue>

typealias GProxyResolver_autoptrVar = CPointerVarOf<GProxyResolver_autoptr>

typealias GProxyResolver_autoptr = CPointer<GProxyResolver>

typealias GProxyResolver_listautoptrVar = CPointerVarOf<GProxyResolver_listautoptr>

typealias GProxyResolver_listautoptr = CPointer<GList>

typealias GProxyResolver_slistautoptrVar = CPointerVarOf<GProxyResolver_slistautoptr>

typealias GProxyResolver_slistautoptr = CPointer<GSList>

typealias GProxyResolver_queueautoptrVar = CPointerVarOf<GProxyResolver_queueautoptr>

typealias GProxyResolver_queueautoptr = CPointer<GQueue>

typealias GRemoteActionGroup_autoptrVar = CPointerVarOf<GRemoteActionGroup_autoptr>

typealias GRemoteActionGroup_autoptr = CPointer<GRemoteActionGroup>

typealias GRemoteActionGroup_listautoptrVar = CPointerVarOf<GRemoteActionGroup_listautoptr>

typealias GRemoteActionGroup_listautoptr = CPointer<GList>

typealias GRemoteActionGroup_slistautoptrVar = CPointerVarOf<GRemoteActionGroup_slistautoptr>

typealias GRemoteActionGroup_slistautoptr = CPointer<GSList>

typealias GRemoteActionGroup_queueautoptrVar = CPointerVarOf<GRemoteActionGroup_queueautoptr>

typealias GRemoteActionGroup_queueautoptr = CPointer<GQueue>

typealias GResolver_autoptrVar = CPointerVarOf<GResolver_autoptr>

typealias GResolver_autoptr = CPointer<GResolver>

typealias GResolver_listautoptrVar = CPointerVarOf<GResolver_listautoptr>

typealias GResolver_listautoptr = CPointer<GList>

typealias GResolver_slistautoptrVar = CPointerVarOf<GResolver_slistautoptr>

typealias GResolver_slistautoptr = CPointer<GSList>

typealias GResolver_queueautoptrVar = CPointerVarOf<GResolver_queueautoptr>

typealias GResolver_queueautoptr = CPointer<GQueue>

typealias GResource_autoptrVar = CPointerVarOf<GResource_autoptr>

typealias GResource_autoptr = CPointer<GResource>

typealias GResource_listautoptrVar = CPointerVarOf<GResource_listautoptr>

typealias GResource_listautoptr = CPointer<GList>

typealias GResource_slistautoptrVar = CPointerVarOf<GResource_slistautoptr>

typealias GResource_slistautoptr = CPointer<GSList>

typealias GResource_queueautoptrVar = CPointerVarOf<GResource_queueautoptr>

typealias GResource_queueautoptr = CPointer<GQueue>

typealias GSeekable_autoptrVar = CPointerVarOf<GSeekable_autoptr>

typealias GSeekable_autoptr = CPointer<GSeekable>

typealias GSeekable_listautoptrVar = CPointerVarOf<GSeekable_listautoptr>

typealias GSeekable_listautoptr = CPointer<GList>

typealias GSeekable_slistautoptrVar = CPointerVarOf<GSeekable_slistautoptr>

typealias GSeekable_slistautoptr = CPointer<GSList>

typealias GSeekable_queueautoptrVar = CPointerVarOf<GSeekable_queueautoptr>

typealias GSeekable_queueautoptr = CPointer<GQueue>

typealias GSettingsBackend_autoptrVar = CPointerVarOf<GSettingsBackend_autoptr>

typealias GSettingsBackend_autoptr = CPointer<GSettingsBackend>

typealias GSettingsBackend_listautoptrVar = CPointerVarOf<GSettingsBackend_listautoptr>

typealias GSettingsBackend_listautoptr = CPointer<GList>

typealias GSettingsBackend_slistautoptrVar = CPointerVarOf<GSettingsBackend_slistautoptr>

typealias GSettingsBackend_slistautoptr = CPointer<GSList>

typealias GSettingsBackend_queueautoptrVar = CPointerVarOf<GSettingsBackend_queueautoptr>

typealias GSettingsBackend_queueautoptr = CPointer<GQueue>

typealias GSettingsSchema_autoptrVar = CPointerVarOf<GSettingsSchema_autoptr>

typealias GSettingsSchema_autoptr = CPointer<GSettingsSchema>

typealias GSettingsSchema_listautoptrVar = CPointerVarOf<GSettingsSchema_listautoptr>

typealias GSettingsSchema_listautoptr = CPointer<GList>

typealias GSettingsSchema_slistautoptrVar = CPointerVarOf<GSettingsSchema_slistautoptr>

typealias GSettingsSchema_slistautoptr = CPointer<GSList>

typealias GSettingsSchema_queueautoptrVar = CPointerVarOf<GSettingsSchema_queueautoptr>

typealias GSettingsSchema_queueautoptr = CPointer<GQueue>

typealias GSettingsSchemaKey_autoptrVar = CPointerVarOf<GSettingsSchemaKey_autoptr>

typealias GSettingsSchemaKey_autoptr = CPointer<GSettingsSchemaKey>

typealias GSettingsSchemaKey_listautoptrVar = CPointerVarOf<GSettingsSchemaKey_listautoptr>

typealias GSettingsSchemaKey_listautoptr = CPointer<GList>

typealias GSettingsSchemaKey_slistautoptrVar = CPointerVarOf<GSettingsSchemaKey_slistautoptr>

typealias GSettingsSchemaKey_slistautoptr = CPointer<GSList>

typealias GSettingsSchemaKey_queueautoptrVar = CPointerVarOf<GSettingsSchemaKey_queueautoptr>

typealias GSettingsSchemaKey_queueautoptr = CPointer<GQueue>

typealias GSettingsSchemaSource_autoptrVar = CPointerVarOf<GSettingsSchemaSource_autoptr>

typealias GSettingsSchemaSource_autoptr = CPointer<GSettingsSchemaSource>

typealias GSettingsSchemaSource_listautoptrVar = CPointerVarOf<GSettingsSchemaSource_listautoptr>

typealias GSettingsSchemaSource_listautoptr = CPointer<GList>

typealias GSettingsSchemaSource_slistautoptrVar = CPointerVarOf<GSettingsSchemaSource_slistautoptr>

typealias GSettingsSchemaSource_slistautoptr = CPointer<GSList>

typealias GSettingsSchemaSource_queueautoptrVar = CPointerVarOf<GSettingsSchemaSource_queueautoptr>

typealias GSettingsSchemaSource_queueautoptr = CPointer<GQueue>

typealias GSettings_autoptrVar = CPointerVarOf<GSettings_autoptr>

typealias GSettings_autoptr = CPointer<GSettings>

typealias GSettings_listautoptrVar = CPointerVarOf<GSettings_listautoptr>

typealias GSettings_listautoptr = CPointer<GList>

typealias GSettings_slistautoptrVar = CPointerVarOf<GSettings_slistautoptr>

typealias GSettings_slistautoptr = CPointer<GSList>

typealias GSettings_queueautoptrVar = CPointerVarOf<GSettings_queueautoptr>

typealias GSettings_queueautoptr = CPointer<GQueue>

typealias GSimpleActionGroup_autoptrVar = CPointerVarOf<GSimpleActionGroup_autoptr>

typealias GSimpleActionGroup_autoptr = CPointer<GSimpleActionGroup>

typealias GSimpleActionGroup_listautoptrVar = CPointerVarOf<GSimpleActionGroup_listautoptr>

typealias GSimpleActionGroup_listautoptr = CPointer<GList>

typealias GSimpleActionGroup_slistautoptrVar = CPointerVarOf<GSimpleActionGroup_slistautoptr>

typealias GSimpleActionGroup_slistautoptr = CPointer<GSList>

typealias GSimpleActionGroup_queueautoptrVar = CPointerVarOf<GSimpleActionGroup_queueautoptr>

typealias GSimpleActionGroup_queueautoptr = CPointer<GQueue>

typealias GSimpleAction_autoptrVar = CPointerVarOf<GSimpleAction_autoptr>

typealias GSimpleAction_autoptr = CPointer<GSimpleAction>

typealias GSimpleAction_listautoptrVar = CPointerVarOf<GSimpleAction_listautoptr>

typealias GSimpleAction_listautoptr = CPointer<GList>

typealias GSimpleAction_slistautoptrVar = CPointerVarOf<GSimpleAction_slistautoptr>

typealias GSimpleAction_slistautoptr = CPointer<GSList>

typealias GSimpleAction_queueautoptrVar = CPointerVarOf<GSimpleAction_queueautoptr>

typealias GSimpleAction_queueautoptr = CPointer<GQueue>

typealias GSimpleAsyncResult_autoptrVar = CPointerVarOf<GSimpleAsyncResult_autoptr>

typealias GSimpleAsyncResult_autoptr = CPointer<GSimpleAsyncResult>

typealias GSimpleAsyncResult_listautoptrVar = CPointerVarOf<GSimpleAsyncResult_listautoptr>

typealias GSimpleAsyncResult_listautoptr = CPointer<GList>

typealias GSimpleAsyncResult_slistautoptrVar = CPointerVarOf<GSimpleAsyncResult_slistautoptr>

typealias GSimpleAsyncResult_slistautoptr = CPointer<GSList>

typealias GSimpleAsyncResult_queueautoptrVar = CPointerVarOf<GSimpleAsyncResult_queueautoptr>

typealias GSimpleAsyncResult_queueautoptr = CPointer<GQueue>

typealias GSimplePermission_autoptrVar = CPointerVarOf<GSimplePermission_autoptr>

typealias GSimplePermission_autoptr = CPointer<GSimplePermission>

typealias GSimplePermission_listautoptrVar = CPointerVarOf<GSimplePermission_listautoptr>

typealias GSimplePermission_listautoptr = CPointer<GList>

typealias GSimplePermission_slistautoptrVar = CPointerVarOf<GSimplePermission_slistautoptr>

typealias GSimplePermission_slistautoptr = CPointer<GSList>

typealias GSimplePermission_queueautoptrVar = CPointerVarOf<GSimplePermission_queueautoptr>

typealias GSimplePermission_queueautoptr = CPointer<GQueue>

typealias GSimpleProxyResolver_autoptrVar = CPointerVarOf<GSimpleProxyResolver_autoptr>

typealias GSimpleProxyResolver_autoptr = CPointer<GSimpleProxyResolver>

typealias GSimpleProxyResolver_listautoptrVar = CPointerVarOf<GSimpleProxyResolver_listautoptr>

typealias GSimpleProxyResolver_listautoptr = CPointer<GList>

typealias GSimpleProxyResolver_slistautoptrVar = CPointerVarOf<GSimpleProxyResolver_slistautoptr>

typealias GSimpleProxyResolver_slistautoptr = CPointer<GSList>

typealias GSimpleProxyResolver_queueautoptrVar = CPointerVarOf<GSimpleProxyResolver_queueautoptr>

typealias GSimpleProxyResolver_queueautoptr = CPointer<GQueue>

typealias GSocketAddressEnumerator_autoptrVar = CPointerVarOf<GSocketAddressEnumerator_autoptr>

typealias GSocketAddressEnumerator_autoptr = CPointer<GSocketAddressEnumerator>

typealias GSocketAddressEnumerator_listautoptrVar = CPointerVarOf<GSocketAddressEnumerator_listautoptr>

typealias GSocketAddressEnumerator_listautoptr = CPointer<GList>

typealias GSocketAddressEnumerator_slistautoptrVar = CPointerVarOf<GSocketAddressEnumerator_slistautoptr>

typealias GSocketAddressEnumerator_slistautoptr = CPointer<GSList>

typealias GSocketAddressEnumerator_queueautoptrVar = CPointerVarOf<GSocketAddressEnumerator_queueautoptr>

typealias GSocketAddressEnumerator_queueautoptr = CPointer<GQueue>

typealias GSocketAddress_autoptrVar = CPointerVarOf<GSocketAddress_autoptr>

typealias GSocketAddress_autoptr = CPointer<GSocketAddress>

typealias GSocketAddress_listautoptrVar = CPointerVarOf<GSocketAddress_listautoptr>

typealias GSocketAddress_listautoptr = CPointer<GList>

typealias GSocketAddress_slistautoptrVar = CPointerVarOf<GSocketAddress_slistautoptr>

typealias GSocketAddress_slistautoptr = CPointer<GSList>

typealias GSocketAddress_queueautoptrVar = CPointerVarOf<GSocketAddress_queueautoptr>

typealias GSocketAddress_queueautoptr = CPointer<GQueue>

typealias GSocketClient_autoptrVar = CPointerVarOf<GSocketClient_autoptr>

typealias GSocketClient_autoptr = CPointer<GSocketClient>

typealias GSocketClient_listautoptrVar = CPointerVarOf<GSocketClient_listautoptr>

typealias GSocketClient_listautoptr = CPointer<GList>

typealias GSocketClient_slistautoptrVar = CPointerVarOf<GSocketClient_slistautoptr>

typealias GSocketClient_slistautoptr = CPointer<GSList>

typealias GSocketClient_queueautoptrVar = CPointerVarOf<GSocketClient_queueautoptr>

typealias GSocketClient_queueautoptr = CPointer<GQueue>

typealias GSocketConnectable_autoptrVar = CPointerVarOf<GSocketConnectable_autoptr>

typealias GSocketConnectable_autoptr = CPointer<GSocketConnectable>

typealias GSocketConnectable_listautoptrVar = CPointerVarOf<GSocketConnectable_listautoptr>

typealias GSocketConnectable_listautoptr = CPointer<GList>

typealias GSocketConnectable_slistautoptrVar = CPointerVarOf<GSocketConnectable_slistautoptr>

typealias GSocketConnectable_slistautoptr = CPointer<GSList>

typealias GSocketConnectable_queueautoptrVar = CPointerVarOf<GSocketConnectable_queueautoptr>

typealias GSocketConnectable_queueautoptr = CPointer<GQueue>

typealias GSocketConnection_autoptrVar = CPointerVarOf<GSocketConnection_autoptr>

typealias GSocketConnection_autoptr = CPointer<GSocketConnection>

typealias GSocketConnection_listautoptrVar = CPointerVarOf<GSocketConnection_listautoptr>

typealias GSocketConnection_listautoptr = CPointer<GList>

typealias GSocketConnection_slistautoptrVar = CPointerVarOf<GSocketConnection_slistautoptr>

typealias GSocketConnection_slistautoptr = CPointer<GSList>

typealias GSocketConnection_queueautoptrVar = CPointerVarOf<GSocketConnection_queueautoptr>

typealias GSocketConnection_queueautoptr = CPointer<GQueue>

typealias GSocketControlMessage_autoptrVar = CPointerVarOf<GSocketControlMessage_autoptr>

typealias GSocketControlMessage_autoptr = CPointer<GSocketControlMessage>

typealias GSocketControlMessage_listautoptrVar = CPointerVarOf<GSocketControlMessage_listautoptr>

typealias GSocketControlMessage_listautoptr = CPointer<GList>

typealias GSocketControlMessage_slistautoptrVar = CPointerVarOf<GSocketControlMessage_slistautoptr>

typealias GSocketControlMessage_slistautoptr = CPointer<GSList>

typealias GSocketControlMessage_queueautoptrVar = CPointerVarOf<GSocketControlMessage_queueautoptr>

typealias GSocketControlMessage_queueautoptr = CPointer<GQueue>

typealias GSocket_autoptrVar = CPointerVarOf<GSocket_autoptr>

typealias GSocket_autoptr = CPointer<GSocket>

typealias GSocket_listautoptrVar = CPointerVarOf<GSocket_listautoptr>

typealias GSocket_listautoptr = CPointer<GList>

typealias GSocket_slistautoptrVar = CPointerVarOf<GSocket_slistautoptr>

typealias GSocket_slistautoptr = CPointer<GSList>

typealias GSocket_queueautoptrVar = CPointerVarOf<GSocket_queueautoptr>

typealias GSocket_queueautoptr = CPointer<GQueue>

typealias GSocketListener_autoptrVar = CPointerVarOf<GSocketListener_autoptr>

typealias GSocketListener_autoptr = CPointer<GSocketListener>

typealias GSocketListener_listautoptrVar = CPointerVarOf<GSocketListener_listautoptr>

typealias GSocketListener_listautoptr = CPointer<GList>

typealias GSocketListener_slistautoptrVar = CPointerVarOf<GSocketListener_slistautoptr>

typealias GSocketListener_slistautoptr = CPointer<GSList>

typealias GSocketListener_queueautoptrVar = CPointerVarOf<GSocketListener_queueautoptr>

typealias GSocketListener_queueautoptr = CPointer<GQueue>

typealias GSocketService_autoptrVar = CPointerVarOf<GSocketService_autoptr>

typealias GSocketService_autoptr = CPointer<GSocketService>

typealias GSocketService_listautoptrVar = CPointerVarOf<GSocketService_listautoptr>

typealias GSocketService_listautoptr = CPointer<GList>

typealias GSocketService_slistautoptrVar = CPointerVarOf<GSocketService_slistautoptr>

typealias GSocketService_slistautoptr = CPointer<GSList>

typealias GSocketService_queueautoptrVar = CPointerVarOf<GSocketService_queueautoptr>

typealias GSocketService_queueautoptr = CPointer<GQueue>

typealias GSubprocess_autoptrVar = CPointerVarOf<GSubprocess_autoptr>

typealias GSubprocess_autoptr = CPointer<GSubprocess>

typealias GSubprocess_listautoptrVar = CPointerVarOf<GSubprocess_listautoptr>

typealias GSubprocess_listautoptr = CPointer<GList>

typealias GSubprocess_slistautoptrVar = CPointerVarOf<GSubprocess_slistautoptr>

typealias GSubprocess_slistautoptr = CPointer<GSList>

typealias GSubprocess_queueautoptrVar = CPointerVarOf<GSubprocess_queueautoptr>

typealias GSubprocess_queueautoptr = CPointer<GQueue>

typealias GSubprocessLauncher_autoptrVar = CPointerVarOf<GSubprocessLauncher_autoptr>

typealias GSubprocessLauncher_autoptr = CPointer<GSubprocessLauncher>

typealias GSubprocessLauncher_listautoptrVar = CPointerVarOf<GSubprocessLauncher_listautoptr>

typealias GSubprocessLauncher_listautoptr = CPointer<GList>

typealias GSubprocessLauncher_slistautoptrVar = CPointerVarOf<GSubprocessLauncher_slistautoptr>

typealias GSubprocessLauncher_slistautoptr = CPointer<GSList>

typealias GSubprocessLauncher_queueautoptrVar = CPointerVarOf<GSubprocessLauncher_queueautoptr>

typealias GSubprocessLauncher_queueautoptr = CPointer<GQueue>

typealias GTask_autoptrVar = CPointerVarOf<GTask_autoptr>

typealias GTask_autoptr = CPointer<GTask>

typealias GTask_listautoptrVar = CPointerVarOf<GTask_listautoptr>

typealias GTask_listautoptr = CPointer<GList>

typealias GTask_slistautoptrVar = CPointerVarOf<GTask_slistautoptr>

typealias GTask_slistautoptr = CPointer<GSList>

typealias GTask_queueautoptrVar = CPointerVarOf<GTask_queueautoptr>

typealias GTask_queueautoptr = CPointer<GQueue>

typealias GTcpConnection_autoptrVar = CPointerVarOf<GTcpConnection_autoptr>

typealias GTcpConnection_autoptr = CPointer<GTcpConnection>

typealias GTcpConnection_listautoptrVar = CPointerVarOf<GTcpConnection_listautoptr>

typealias GTcpConnection_listautoptr = CPointer<GList>

typealias GTcpConnection_slistautoptrVar = CPointerVarOf<GTcpConnection_slistautoptr>

typealias GTcpConnection_slistautoptr = CPointer<GSList>

typealias GTcpConnection_queueautoptrVar = CPointerVarOf<GTcpConnection_queueautoptr>

typealias GTcpConnection_queueautoptr = CPointer<GQueue>

typealias GTcpWrapperConnection_autoptrVar = CPointerVarOf<GTcpWrapperConnection_autoptr>

typealias GTcpWrapperConnection_autoptr = CPointer<GTcpWrapperConnection>

typealias GTcpWrapperConnection_listautoptrVar = CPointerVarOf<GTcpWrapperConnection_listautoptr>

typealias GTcpWrapperConnection_listautoptr = CPointer<GList>

typealias GTcpWrapperConnection_slistautoptrVar = CPointerVarOf<GTcpWrapperConnection_slistautoptr>

typealias GTcpWrapperConnection_slistautoptr = CPointer<GSList>

typealias GTcpWrapperConnection_queueautoptrVar = CPointerVarOf<GTcpWrapperConnection_queueautoptr>

typealias GTcpWrapperConnection_queueautoptr = CPointer<GQueue>

typealias GTestDBus_autoptrVar = CPointerVarOf<GTestDBus_autoptr>

typealias GTestDBus_autoptr = CPointer<GTestDBus>

typealias GTestDBus_listautoptrVar = CPointerVarOf<GTestDBus_listautoptr>

typealias GTestDBus_listautoptr = CPointer<GList>

typealias GTestDBus_slistautoptrVar = CPointerVarOf<GTestDBus_slistautoptr>

typealias GTestDBus_slistautoptr = CPointer<GSList>

typealias GTestDBus_queueautoptrVar = CPointerVarOf<GTestDBus_queueautoptr>

typealias GTestDBus_queueautoptr = CPointer<GQueue>

typealias GThemedIcon_autoptrVar = CPointerVarOf<GThemedIcon_autoptr>

typealias GThemedIcon_autoptr = CPointer<GThemedIcon>

typealias GThemedIcon_listautoptrVar = CPointerVarOf<GThemedIcon_listautoptr>

typealias GThemedIcon_listautoptr = CPointer<GList>

typealias GThemedIcon_slistautoptrVar = CPointerVarOf<GThemedIcon_slistautoptr>

typealias GThemedIcon_slistautoptr = CPointer<GSList>

typealias GThemedIcon_queueautoptrVar = CPointerVarOf<GThemedIcon_queueautoptr>

typealias GThemedIcon_queueautoptr = CPointer<GQueue>

typealias GThreadedSocketService_autoptrVar = CPointerVarOf<GThreadedSocketService_autoptr>

typealias GThreadedSocketService_autoptr = CPointer<GThreadedSocketService>

typealias GThreadedSocketService_listautoptrVar = CPointerVarOf<GThreadedSocketService_listautoptr>

typealias GThreadedSocketService_listautoptr = CPointer<GList>

typealias GThreadedSocketService_slistautoptrVar = CPointerVarOf<GThreadedSocketService_slistautoptr>

typealias GThreadedSocketService_slistautoptr = CPointer<GSList>

typealias GThreadedSocketService_queueautoptrVar = CPointerVarOf<GThreadedSocketService_queueautoptr>

typealias GThreadedSocketService_queueautoptr = CPointer<GQueue>

typealias GTlsBackend_autoptrVar = CPointerVarOf<GTlsBackend_autoptr>

typealias GTlsBackend_autoptr = CPointer<GTlsBackend>

typealias GTlsBackend_listautoptrVar = CPointerVarOf<GTlsBackend_listautoptr>

typealias GTlsBackend_listautoptr = CPointer<GList>

typealias GTlsBackend_slistautoptrVar = CPointerVarOf<GTlsBackend_slistautoptr>

typealias GTlsBackend_slistautoptr = CPointer<GSList>

typealias GTlsBackend_queueautoptrVar = CPointerVarOf<GTlsBackend_queueautoptr>

typealias GTlsBackend_queueautoptr = CPointer<GQueue>

typealias GTlsCertificate_autoptrVar = CPointerVarOf<GTlsCertificate_autoptr>

typealias GTlsCertificate_autoptr = CPointer<GTlsCertificate>

typealias GTlsCertificate_listautoptrVar = CPointerVarOf<GTlsCertificate_listautoptr>

typealias GTlsCertificate_listautoptr = CPointer<GList>

typealias GTlsCertificate_slistautoptrVar = CPointerVarOf<GTlsCertificate_slistautoptr>

typealias GTlsCertificate_slistautoptr = CPointer<GSList>

typealias GTlsCertificate_queueautoptrVar = CPointerVarOf<GTlsCertificate_queueautoptr>

typealias GTlsCertificate_queueautoptr = CPointer<GQueue>

typealias GTlsClientConnection_autoptrVar = CPointerVarOf<GTlsClientConnection_autoptr>

typealias GTlsClientConnection_autoptr = CPointer<GTlsClientConnection>

typealias GTlsClientConnection_listautoptrVar = CPointerVarOf<GTlsClientConnection_listautoptr>

typealias GTlsClientConnection_listautoptr = CPointer<GList>

typealias GTlsClientConnection_slistautoptrVar = CPointerVarOf<GTlsClientConnection_slistautoptr>

typealias GTlsClientConnection_slistautoptr = CPointer<GSList>

typealias GTlsClientConnection_queueautoptrVar = CPointerVarOf<GTlsClientConnection_queueautoptr>

typealias GTlsClientConnection_queueautoptr = CPointer<GQueue>

typealias GTlsConnection_autoptrVar = CPointerVarOf<GTlsConnection_autoptr>

typealias GTlsConnection_autoptr = CPointer<GTlsConnection>

typealias GTlsConnection_listautoptrVar = CPointerVarOf<GTlsConnection_listautoptr>

typealias GTlsConnection_listautoptr = CPointer<GList>

typealias GTlsConnection_slistautoptrVar = CPointerVarOf<GTlsConnection_slistautoptr>

typealias GTlsConnection_slistautoptr = CPointer<GSList>

typealias GTlsConnection_queueautoptrVar = CPointerVarOf<GTlsConnection_queueautoptr>

typealias GTlsConnection_queueautoptr = CPointer<GQueue>

typealias GTlsDatabase_autoptrVar = CPointerVarOf<GTlsDatabase_autoptr>

typealias GTlsDatabase_autoptr = CPointer<GTlsDatabase>

typealias GTlsDatabase_listautoptrVar = CPointerVarOf<GTlsDatabase_listautoptr>

typealias GTlsDatabase_listautoptr = CPointer<GList>

typealias GTlsDatabase_slistautoptrVar = CPointerVarOf<GTlsDatabase_slistautoptr>

typealias GTlsDatabase_slistautoptr = CPointer<GSList>

typealias GTlsDatabase_queueautoptrVar = CPointerVarOf<GTlsDatabase_queueautoptr>

typealias GTlsDatabase_queueautoptr = CPointer<GQueue>

typealias GTlsFileDatabase_autoptrVar = CPointerVarOf<GTlsFileDatabase_autoptr>

typealias GTlsFileDatabase_autoptr = CPointer<GTlsFileDatabase>

typealias GTlsFileDatabase_listautoptrVar = CPointerVarOf<GTlsFileDatabase_listautoptr>

typealias GTlsFileDatabase_listautoptr = CPointer<GList>

typealias GTlsFileDatabase_slistautoptrVar = CPointerVarOf<GTlsFileDatabase_slistautoptr>

typealias GTlsFileDatabase_slistautoptr = CPointer<GSList>

typealias GTlsFileDatabase_queueautoptrVar = CPointerVarOf<GTlsFileDatabase_queueautoptr>

typealias GTlsFileDatabase_queueautoptr = CPointer<GQueue>

typealias GTlsInteraction_autoptrVar = CPointerVarOf<GTlsInteraction_autoptr>

typealias GTlsInteraction_autoptr = CPointer<GTlsInteraction>

typealias GTlsInteraction_listautoptrVar = CPointerVarOf<GTlsInteraction_listautoptr>

typealias GTlsInteraction_listautoptr = CPointer<GList>

typealias GTlsInteraction_slistautoptrVar = CPointerVarOf<GTlsInteraction_slistautoptr>

typealias GTlsInteraction_slistautoptr = CPointer<GSList>

typealias GTlsInteraction_queueautoptrVar = CPointerVarOf<GTlsInteraction_queueautoptr>

typealias GTlsInteraction_queueautoptr = CPointer<GQueue>

typealias GTlsPassword_autoptrVar = CPointerVarOf<GTlsPassword_autoptr>

typealias GTlsPassword_autoptr = CPointer<GTlsPassword>

typealias GTlsPassword_listautoptrVar = CPointerVarOf<GTlsPassword_listautoptr>

typealias GTlsPassword_listautoptr = CPointer<GList>

typealias GTlsPassword_slistautoptrVar = CPointerVarOf<GTlsPassword_slistautoptr>

typealias GTlsPassword_slistautoptr = CPointer<GSList>

typealias GTlsPassword_queueautoptrVar = CPointerVarOf<GTlsPassword_queueautoptr>

typealias GTlsPassword_queueautoptr = CPointer<GQueue>

typealias GTlsServerConnection_autoptrVar = CPointerVarOf<GTlsServerConnection_autoptr>

typealias GTlsServerConnection_autoptr = CPointer<GTlsServerConnection>

typealias GTlsServerConnection_listautoptrVar = CPointerVarOf<GTlsServerConnection_listautoptr>

typealias GTlsServerConnection_listautoptr = CPointer<GList>

typealias GTlsServerConnection_slistautoptrVar = CPointerVarOf<GTlsServerConnection_slistautoptr>

typealias GTlsServerConnection_slistautoptr = CPointer<GSList>

typealias GTlsServerConnection_queueautoptrVar = CPointerVarOf<GTlsServerConnection_queueautoptr>

typealias GTlsServerConnection_queueautoptr = CPointer<GQueue>

typealias GVfs_autoptrVar = CPointerVarOf<GVfs_autoptr>

typealias GVfs_autoptr = CPointer<GVfs>

typealias GVfs_listautoptrVar = CPointerVarOf<GVfs_listautoptr>

typealias GVfs_listautoptr = CPointer<GList>

typealias GVfs_slistautoptrVar = CPointerVarOf<GVfs_slistautoptr>

typealias GVfs_slistautoptr = CPointer<GSList>

typealias GVfs_queueautoptrVar = CPointerVarOf<GVfs_queueautoptr>

typealias GVfs_queueautoptr = CPointer<GQueue>

typealias GVolume_autoptrVar = CPointerVarOf<GVolume_autoptr>

typealias GVolume_autoptr = CPointer<GVolume>

typealias GVolume_listautoptrVar = CPointerVarOf<GVolume_listautoptr>

typealias GVolume_listautoptr = CPointer<GList>

typealias GVolume_slistautoptrVar = CPointerVarOf<GVolume_slistautoptr>

typealias GVolume_slistautoptr = CPointer<GSList>

typealias GVolume_queueautoptrVar = CPointerVarOf<GVolume_queueautoptr>

typealias GVolume_queueautoptr = CPointer<GQueue>

typealias GVolumeMonitor_autoptrVar = CPointerVarOf<GVolumeMonitor_autoptr>

typealias GVolumeMonitor_autoptr = CPointer<GVolumeMonitor>

typealias GVolumeMonitor_listautoptrVar = CPointerVarOf<GVolumeMonitor_listautoptr>

typealias GVolumeMonitor_listautoptr = CPointer<GList>

typealias GVolumeMonitor_slistautoptrVar = CPointerVarOf<GVolumeMonitor_slistautoptr>

typealias GVolumeMonitor_slistautoptr = CPointer<GSList>

typealias GVolumeMonitor_queueautoptrVar = CPointerVarOf<GVolumeMonitor_queueautoptr>

typealias GVolumeMonitor_queueautoptr = CPointer<GQueue>

typealias GZlibCompressor_autoptrVar = CPointerVarOf<GZlibCompressor_autoptr>

typealias GZlibCompressor_autoptr = CPointer<GZlibCompressor>

typealias GZlibCompressor_listautoptrVar = CPointerVarOf<GZlibCompressor_listautoptr>

typealias GZlibCompressor_listautoptr = CPointer<GList>

typealias GZlibCompressor_slistautoptrVar = CPointerVarOf<GZlibCompressor_slistautoptr>

typealias GZlibCompressor_slistautoptr = CPointer<GSList>

typealias GZlibCompressor_queueautoptrVar = CPointerVarOf<GZlibCompressor_queueautoptr>

typealias GZlibCompressor_queueautoptr = CPointer<GQueue>

typealias GZlibDecompressor_autoptrVar = CPointerVarOf<GZlibDecompressor_autoptr>

typealias GZlibDecompressor_autoptr = CPointer<GZlibDecompressor>

typealias GZlibDecompressor_listautoptrVar = CPointerVarOf<GZlibDecompressor_listautoptr>

typealias GZlibDecompressor_listautoptr = CPointer<GList>

typealias GZlibDecompressor_slistautoptrVar = CPointerVarOf<GZlibDecompressor_slistautoptr>

typealias GZlibDecompressor_slistautoptr = CPointer<GSList>

typealias GZlibDecompressor_queueautoptrVar = CPointerVarOf<GZlibDecompressor_queueautoptr>

typealias GZlibDecompressor_queueautoptr = CPointer<GQueue>

typealias GtkAccelGroupPrivate = _GtkAccelGroupPrivate

typealias GtkAccelGroup = _GtkAccelGroup

typealias GtkAccelGroupClass = _GtkAccelGroupClass

typealias GtkAccelKey = _GtkAccelKey

typealias GtkAccelGroupEntry = _GtkAccelGroupEntry

typealias GtkAccelGroupActivateVar = CPointerVarOf<GtkAccelGroupActivate>

typealias GtkAccelGroupActivate = CPointer<CFunction<(CPointer<GtkAccelGroup>?, CPointer<GObject>?, guint, GdkModifierType) -> gboolean>>

typealias GtkAccelGroupFindFuncVar = CPointerVarOf<GtkAccelGroupFindFunc>

typealias GtkAccelGroupFindFunc = CPointer<CFunction<(CPointer<GtkAccelKey>?, CPointer<GClosure>?, gpointer?) -> gboolean>>

typealias GdkDisplay = _GdkDisplay

typealias GtkAccelGroup_autoptrVar = CPointerVarOf<GtkAccelGroup_autoptr>

typealias GtkAccelGroup_autoptr = CPointer<GtkAccelGroup>

typealias GtkAccelGroup_listautoptrVar = CPointerVarOf<GtkAccelGroup_listautoptr>

typealias GtkAccelGroup_listautoptr = CPointer<GList>

typealias GtkAccelGroup_slistautoptrVar = CPointerVarOf<GtkAccelGroup_slistautoptr>

typealias GtkAccelGroup_slistautoptr = CPointer<GSList>

typealias GtkAccelGroup_queueautoptrVar = CPointerVarOf<GtkAccelGroup_queueautoptr>

typealias GtkAccelGroup_queueautoptr = CPointer<GQueue>

typealias GtkBorder = _GtkBorder

typealias GtkBorder_autoptrVar = CPointerVarOf<GtkBorder_autoptr>

typealias GtkBorder_autoptr = CPointer<GtkBorder>

typealias GtkBorder_listautoptrVar = CPointerVarOf<GtkBorder_listautoptr>

typealias GtkBorder_listautoptr = CPointer<GList>

typealias GtkBorder_slistautoptrVar = CPointerVarOf<GtkBorder_slistautoptr>

typealias GtkBorder_slistautoptr = CPointer<GSList>

typealias GtkBorder_queueautoptrVar = CPointerVarOf<GtkBorder_queueautoptr>

typealias GtkBorder_queueautoptr = CPointer<GQueue>

typealias GtkAdjustmentPrivate = _GtkAdjustmentPrivate

typealias GtkAdjustment = _GtkAdjustment

typealias GtkBuilderPrivate = _GtkBuilderPrivate

typealias GtkBuilder = _GtkBuilder

typealias GtkClipboard = _GtkClipboard

typealias GtkIconSet = _GtkIconSet

typealias GtkIconSource = _GtkIconSource

typealias PangoFontDescription = _PangoFontDescription

typealias GdkColor = _GdkColor

typealias GtkRcStyle = _GtkRcStyle

typealias GtkRequisition = _GtkRequisition

typealias GtkSelectionData = _GtkSelectionData

typealias GtkSettingsPrivate = _GtkSettingsPrivate

typealias GtkSettings = _GtkSettings

typealias cairo_pattern_t = _cairo_pattern

typealias GdkVisual = _GdkVisual

typealias GtkStyle = _GtkStyle

typealias GtkStyleContextPrivate = _GtkStyleContextPrivate

typealias GtkStyleContext = _GtkStyleContext

typealias GtkTooltip = _GtkTooltip

typealias GtkWidgetPrivate = _GtkWidgetPrivate

typealias GtkWidget = _GtkWidget

typealias GtkWidgetPath = _GtkWidgetPath

typealias GtkContainerPrivate = _GtkContainerPrivate

typealias GtkContainer = _GtkContainer

typealias GtkBinPrivate = _GtkBinPrivate

typealias GtkBin = _GtkBin

typealias GtkWindowPrivate = _GtkWindowPrivate

typealias GtkWindow = _GtkWindow

typealias GtkRcPropertyParserVar = CPointerVarOf<GtkRcPropertyParser>

typealias GtkRcPropertyParser = CPointer<CFunction<(CPointer<GParamSpec>?, CPointer<GString>?, CPointer<GValue>?) -> gboolean>>

typealias GtkBuilderConnectFuncVar = CPointerVarOf<GtkBuilderConnectFunc>

typealias GtkBuilderConnectFunc = CPointer<CFunction<(CPointer<GtkBuilder>?, CPointer<GObject>?, CPointer<gcharVar>?, CPointer<gcharVar>?, CPointer<GObject>?, GConnectFlags, gpointer?) -> Unit>>

typealias cairo_rectangle_int_t = _cairo_rectangle_int

typealias GdkRectangle = cairo_rectangle_int_t

typealias GtkAllocation = GdkRectangle

typealias cairo_t = _cairo

typealias GdkWindow = _GdkWindow

typealias GdkEventAny = _GdkEventAny

typealias cairo_region_t = _cairo_region

typealias GdkEventExpose = _GdkEventExpose

typealias GdkEventVisibility = _GdkEventVisibility

typealias GdkDevice = _GdkDevice

typealias GdkEventMotion = _GdkEventMotion

typealias GdkEventButton = _GdkEventButton

typealias GdkEventSequence = _GdkEventSequence

typealias GdkEventTouch = _GdkEventTouch

typealias GdkEventScroll = _GdkEventScroll

typealias GdkEventKey = _GdkEventKey

typealias GdkEventCrossing = _GdkEventCrossing

typealias GdkEventFocus = _GdkEventFocus

typealias GdkEventConfigure = _GdkEventConfigure

typealias GdkAtomVar = CPointerVarOf<GdkAtom>

typealias GdkAtom = CPointer<_GdkAtom>

typealias GdkEventProperty = _GdkEventProperty

typealias GdkEventSelection = _GdkEventSelection

typealias GdkEventOwnerChange = _GdkEventOwnerChange

typealias GdkEventProximity = _GdkEventProximity

typealias GdkDragContext = _GdkDragContext

typealias gshortVar = ShortVarOf<gshort>

typealias gshort = Short

typealias GdkEventDND = _GdkEventDND

typealias GdkEventWindowState = _GdkEventWindowState

typealias GdkEventSetting = _GdkEventSetting

typealias GdkEventGrabBroken = _GdkEventGrabBroken

typealias GdkEventTouchpadSwipe = _GdkEventTouchpadSwipe

typealias GdkEventTouchpadPinch = _GdkEventTouchpadPinch

typealias GdkEventPadButton = _GdkEventPadButton

typealias GdkEventPadAxis = _GdkEventPadAxis

typealias GdkEventPadGroupMode = _GdkEventPadGroupMode

typealias GdkEvent = _GdkEvent

typealias AtkObject = _AtkObject

typealias AtkRelationSet = _AtkRelationSet

typealias GdkScreen = _GdkScreen

typealias GtkWidgetClassPrivate = _GtkWidgetClassPrivate

typealias GtkWidgetClass = _GtkWidgetClass

typealias GtkCallbackVar = CPointerVarOf<GtkCallback>

typealias GtkCallback = CPointer<CFunction<(CPointer<GtkWidget>?, gpointer?) -> Unit>>

typealias GdkFrameClock = _GdkFrameClock

typealias GtkTickCallbackVar = CPointerVarOf<GtkTickCallback>

typealias GtkTickCallback = CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkFrameClock>?, gpointer?) -> gboolean>>

typealias GdkRGBA = _GdkRGBA

typealias PangoContext = _PangoContext

typealias cairo_font_options_t = _cairo_font_options

typealias PangoLayout = _PangoLayout

typealias GdkPixbuf = _GdkPixbuf

typealias va_listVar = CPointerVarOf<va_list>

typealias va_list = __gnuc_va_list

typealias PangoFontMap = _PangoFontMap

typealias GtkWidget_autoptrVar = CPointerVarOf<GtkWidget_autoptr>

typealias GtkWidget_autoptr = CPointer<GtkWidget>

typealias GtkWidget_listautoptrVar = CPointerVarOf<GtkWidget_listautoptr>

typealias GtkWidget_listautoptr = CPointer<GList>

typealias GtkWidget_slistautoptrVar = CPointerVarOf<GtkWidget_slistautoptr>

typealias GtkWidget_slistautoptr = CPointer<GSList>

typealias GtkWidget_queueautoptrVar = CPointerVarOf<GtkWidget_queueautoptr>

typealias GtkWidget_queueautoptr = CPointer<GQueue>

typealias GtkRequisition_autoptrVar = CPointerVarOf<GtkRequisition_autoptr>

typealias GtkRequisition_autoptr = CPointer<GtkRequisition>

typealias GtkRequisition_listautoptrVar = CPointerVarOf<GtkRequisition_listautoptr>

typealias GtkRequisition_listautoptr = CPointer<GList>

typealias GtkRequisition_slistautoptrVar = CPointerVarOf<GtkRequisition_slistautoptr>

typealias GtkRequisition_slistautoptr = CPointer<GSList>

typealias GtkRequisition_queueautoptrVar = CPointerVarOf<GtkRequisition_queueautoptr>

typealias GtkRequisition_queueautoptr = CPointer<GQueue>

typealias GtkApplicationPrivate = _GtkApplicationPrivate

typealias GtkApplication = _GtkApplication

typealias GtkApplicationClass = _GtkApplicationClass

typealias GtkApplication_autoptrVar = CPointerVarOf<GtkApplication_autoptr>

typealias GtkApplication_autoptr = CPointer<GtkApplication>

typealias GtkApplication_listautoptrVar = CPointerVarOf<GtkApplication_listautoptr>

typealias GtkApplication_listautoptr = CPointer<GList>

typealias GtkApplication_slistautoptrVar = CPointerVarOf<GtkApplication_slistautoptr>

typealias GtkApplication_slistautoptr = CPointer<GSList>

typealias GtkApplication_queueautoptrVar = CPointerVarOf<GtkApplication_queueautoptr>

typealias GtkApplication_queueautoptr = CPointer<GQueue>

typealias GtkContainerClass = _GtkContainerClass

typealias GtkContainer_autoptrVar = CPointerVarOf<GtkContainer_autoptr>

typealias GtkContainer_autoptr = CPointer<GtkContainer>

typealias GtkContainer_listautoptrVar = CPointerVarOf<GtkContainer_listautoptr>

typealias GtkContainer_listautoptr = CPointer<GList>

typealias GtkContainer_slistautoptrVar = CPointerVarOf<GtkContainer_slistautoptr>

typealias GtkContainer_slistautoptr = CPointer<GSList>

typealias GtkContainer_queueautoptrVar = CPointerVarOf<GtkContainer_queueautoptr>

typealias GtkContainer_queueautoptr = CPointer<GQueue>

typealias GtkBinClass = _GtkBinClass

typealias GtkBin_autoptrVar = CPointerVarOf<GtkBin_autoptr>

typealias GtkBin_autoptr = CPointer<GtkBin>

typealias GtkBin_listautoptrVar = CPointerVarOf<GtkBin_listautoptr>

typealias GtkBin_listautoptr = CPointer<GList>

typealias GtkBin_slistautoptrVar = CPointerVarOf<GtkBin_slistautoptr>

typealias GtkBin_slistautoptr = CPointer<GSList>

typealias GtkBin_queueautoptrVar = CPointerVarOf<GtkBin_queueautoptr>

typealias GtkBin_queueautoptr = CPointer<GQueue>

typealias GtkWindowClass = _GtkWindowClass

typealias GtkWindowGeometryInfo = _GtkWindowGeometryInfo

typealias GtkWindowGroupPrivate = _GtkWindowGroupPrivate

typealias GtkWindowGroup = _GtkWindowGroup

typealias GtkWindowGroupClass = _GtkWindowGroupClass

typealias GdkGeometry = _GdkGeometry

typealias GtkWindow_autoptrVar = CPointerVarOf<GtkWindow_autoptr>

typealias GtkWindow_autoptr = CPointer<GtkWindow>

typealias GtkWindow_listautoptrVar = CPointerVarOf<GtkWindow_listautoptr>

typealias GtkWindow_listautoptr = CPointer<GList>

typealias GtkWindow_slistautoptrVar = CPointerVarOf<GtkWindow_slistautoptr>

typealias GtkWindow_slistautoptr = CPointer<GSList>

typealias GtkWindow_queueautoptrVar = CPointerVarOf<GtkWindow_queueautoptr>

typealias GtkWindow_queueautoptr = CPointer<GQueue>

typealias GtkWindowGroup_autoptrVar = CPointerVarOf<GtkWindowGroup_autoptr>

typealias GtkWindowGroup_autoptr = CPointer<GtkWindowGroup>

typealias GtkWindowGroup_listautoptrVar = CPointerVarOf<GtkWindowGroup_listautoptr>

typealias GtkWindowGroup_listautoptr = CPointer<GList>

typealias GtkWindowGroup_slistautoptrVar = CPointerVarOf<GtkWindowGroup_slistautoptr>

typealias GtkWindowGroup_slistautoptr = CPointer<GSList>

typealias GtkWindowGroup_queueautoptrVar = CPointerVarOf<GtkWindowGroup_queueautoptr>

typealias GtkWindowGroup_queueautoptr = CPointer<GQueue>

typealias GtkDialogPrivate = _GtkDialogPrivate

typealias GtkDialog = _GtkDialog

typealias GtkDialogClass = _GtkDialogClass

typealias GtkDialog_autoptrVar = CPointerVarOf<GtkDialog_autoptr>

typealias GtkDialog_autoptr = CPointer<GtkDialog>

typealias GtkDialog_listautoptrVar = CPointerVarOf<GtkDialog_listautoptr>

typealias GtkDialog_listautoptr = CPointer<GList>

typealias GtkDialog_slistautoptrVar = CPointerVarOf<GtkDialog_slistautoptr>

typealias GtkDialog_slistautoptr = CPointer<GSList>

typealias GtkDialog_queueautoptrVar = CPointerVarOf<GtkDialog_queueautoptr>

typealias GtkDialog_queueautoptr = CPointer<GQueue>

typealias GtkAboutDialogPrivate = _GtkAboutDialogPrivate

typealias GtkAboutDialog = _GtkAboutDialog

typealias GtkAboutDialogClass = _GtkAboutDialogClass

typealias GtkAboutDialog_autoptrVar = CPointerVarOf<GtkAboutDialog_autoptr>

typealias GtkAboutDialog_autoptr = CPointer<GtkAboutDialog>

typealias GtkAboutDialog_listautoptrVar = CPointerVarOf<GtkAboutDialog_listautoptr>

typealias GtkAboutDialog_listautoptr = CPointer<GList>

typealias GtkAboutDialog_slistautoptrVar = CPointerVarOf<GtkAboutDialog_slistautoptr>

typealias GtkAboutDialog_slistautoptr = CPointer<GSList>

typealias GtkAboutDialog_queueautoptrVar = CPointerVarOf<GtkAboutDialog_queueautoptr>

typealias GtkAboutDialog_queueautoptr = CPointer<GQueue>

typealias GtkMenuShellPrivate = _GtkMenuShellPrivate

typealias GtkMenuShell = _GtkMenuShell

typealias GtkMenuShellClass = _GtkMenuShellClass

typealias GtkMenuShell_autoptrVar = CPointerVarOf<GtkMenuShell_autoptr>

typealias GtkMenuShell_autoptr = CPointer<GtkMenuShell>

typealias GtkMenuShell_listautoptrVar = CPointerVarOf<GtkMenuShell_listautoptr>

typealias GtkMenuShell_listautoptr = CPointer<GList>

typealias GtkMenuShell_slistautoptrVar = CPointerVarOf<GtkMenuShell_slistautoptr>

typealias GtkMenuShell_slistautoptr = CPointer<GSList>

typealias GtkMenuShell_queueautoptrVar = CPointerVarOf<GtkMenuShell_queueautoptr>

typealias GtkMenuShell_queueautoptr = CPointer<GQueue>

typealias GtkMenuPrivate = _GtkMenuPrivate

typealias GtkMenu = _GtkMenu

typealias GtkMenuClass = _GtkMenuClass

typealias GtkMenuPositionFuncVar = CPointerVarOf<GtkMenuPositionFunc>

typealias GtkMenuPositionFunc = CPointer<CFunction<(CPointer<GtkMenu>?, CPointer<gintVar>?, CPointer<gintVar>?, CPointer<gbooleanVar>?, gpointer?) -> Unit>>

typealias GtkMenuDetachFuncVar = CPointerVarOf<GtkMenuDetachFunc>

typealias GtkMenuDetachFunc = CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GtkMenu>?) -> Unit>>

typealias GdkMonitor = _GdkMonitor

typealias GtkMenu_autoptrVar = CPointerVarOf<GtkMenu_autoptr>

typealias GtkMenu_autoptr = CPointer<GtkMenu>

typealias GtkMenu_listautoptrVar = CPointerVarOf<GtkMenu_listautoptr>

typealias GtkMenu_listautoptr = CPointer<GList>

typealias GtkMenu_slistautoptrVar = CPointerVarOf<GtkMenu_slistautoptr>

typealias GtkMenu_slistautoptr = CPointer<GSList>

typealias GtkMenu_queueautoptrVar = CPointerVarOf<GtkMenu_queueautoptr>

typealias GtkMenu_queueautoptr = CPointer<GQueue>

typealias GtkMiscPrivate = _GtkMiscPrivate

typealias GtkMisc = _GtkMisc

typealias GtkLabelPrivate = _GtkLabelPrivate

typealias GtkLabel = _GtkLabel

typealias GtkMiscClass = _GtkMiscClass

typealias GtkLabelClass = _GtkLabelClass

typealias GtkLabelSelectionInfo = _GtkLabelSelectionInfo

typealias PangoAttrList = _PangoAttrList

typealias GtkLabel_autoptrVar = CPointerVarOf<GtkLabel_autoptr>

typealias GtkLabel_autoptr = CPointer<GtkLabel>

typealias GtkLabel_listautoptrVar = CPointerVarOf<GtkLabel_listautoptr>

typealias GtkLabel_listautoptr = CPointer<GList>

typealias GtkLabel_slistautoptrVar = CPointerVarOf<GtkLabel_slistautoptr>

typealias GtkLabel_slistautoptr = CPointer<GSList>

typealias GtkLabel_queueautoptrVar = CPointerVarOf<GtkLabel_queueautoptr>

typealias GtkLabel_queueautoptr = CPointer<GQueue>

typealias GtkAccelLabelPrivate = _GtkAccelLabelPrivate

typealias GtkAccelLabel = _GtkAccelLabel

typealias GtkAccelLabelClass = _GtkAccelLabelClass

typealias GtkAccelLabel_autoptrVar = CPointerVarOf<GtkAccelLabel_autoptr>

typealias GtkAccelLabel_autoptr = CPointer<GtkAccelLabel>

typealias GtkAccelLabel_listautoptrVar = CPointerVarOf<GtkAccelLabel_listautoptr>

typealias GtkAccelLabel_listautoptr = CPointer<GList>

typealias GtkAccelLabel_slistautoptrVar = CPointerVarOf<GtkAccelLabel_slistautoptr>

typealias GtkAccelLabel_slistautoptr = CPointer<GSList>

typealias GtkAccelLabel_queueautoptrVar = CPointerVarOf<GtkAccelLabel_queueautoptr>

typealias GtkAccelLabel_queueautoptr = CPointer<GQueue>

typealias GtkAccelMap = _GtkAccelMap

typealias GtkAccelMapClass = _GtkAccelMapClass

typealias GtkAccelMapForeachVar = CPointerVarOf<GtkAccelMapForeach>

typealias GtkAccelMapForeach = CPointer<CFunction<(gpointer?, CPointer<gcharVar>?, guint, GdkModifierType, gboolean) -> Unit>>

typealias GScannerConfig = _GScannerConfig

typealias GTokenValue = _GTokenValue

typealias GScanner = _GScanner

typealias GScannerMsgFuncVar = CPointerVarOf<GScannerMsgFunc>

typealias GScannerMsgFunc = CPointer<CFunction<(CPointer<GScanner>?, CPointer<gcharVar>?, gboolean) -> Unit>>

typealias GtkAccelMap_autoptrVar = CPointerVarOf<GtkAccelMap_autoptr>

typealias GtkAccelMap_autoptr = CPointer<GtkAccelMap>

typealias GtkAccelMap_listautoptrVar = CPointerVarOf<GtkAccelMap_listautoptr>

typealias GtkAccelMap_listautoptr = CPointer<GList>

typealias GtkAccelMap_slistautoptrVar = CPointerVarOf<GtkAccelMap_slistautoptr>

typealias GtkAccelMap_slistautoptr = CPointer<GSList>

typealias GtkAccelMap_queueautoptrVar = CPointerVarOf<GtkAccelMap_queueautoptr>

typealias GtkAccelMap_queueautoptr = CPointer<GQueue>

typealias GtkAccessiblePrivate = _GtkAccessiblePrivate

typealias GtkAccessible = _GtkAccessible

typealias AtkStateSet = _AtkStateSet

typealias AtkPropertyValues = _AtkPropertyValues

typealias AtkPropertyChangeHandlerVar = CPointerVarOf<AtkPropertyChangeHandler>

typealias AtkPropertyChangeHandler = CPointer<CFunction<(CPointer<AtkObject>?, CPointer<AtkPropertyValues>?) -> Unit>>

typealias AtkAttributeSet = GSList

typealias AtkFunctionVar = CPointerVarOf<AtkFunction>

typealias AtkFunction = CPointer<CFunction<(gpointer?) -> gboolean>>

typealias AtkObjectClass = _AtkObjectClass

typealias GtkAccessibleClass = _GtkAccessibleClass

typealias GtkActionable = _GtkActionable

typealias GtkActionableInterface = _GtkActionableInterface

typealias GtkActionBar = _GtkActionBar

typealias GtkActionBarPrivate = _GtkActionBarPrivate

typealias GtkActionBarClass = _GtkActionBarClass

typealias GtkAdjustmentClass = _GtkAdjustmentClass

typealias GtkAppChooser = _GtkAppChooser

typealias GtkAppChooserDialogPrivate = _GtkAppChooserDialogPrivate

typealias GtkAppChooserDialog = _GtkAppChooserDialog

typealias GtkAppChooserDialogClass = _GtkAppChooserDialogClass

typealias GtkBoxPrivate = _GtkBoxPrivate

typealias GtkBox = _GtkBox

typealias GtkBoxClass = _GtkBoxClass

typealias GtkAppChooserWidgetPrivate = _GtkAppChooserWidgetPrivate

typealias GtkAppChooserWidget = _GtkAppChooserWidget

typealias GtkAppChooserWidgetClass = _GtkAppChooserWidgetClass

typealias GtkTreeIter = _GtkTreeIter

typealias GtkTreePath = _GtkTreePath

typealias GtkTreeRowReference = _GtkTreeRowReference

typealias GtkTreeModel = _GtkTreeModel

typealias GtkTreeModelIface = _GtkTreeModelIface

typealias GtkTreeModelForeachFuncVar = CPointerVarOf<GtkTreeModelForeachFunc>

typealias GtkTreeModelForeachFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>

typealias GtkCellEditable = _GtkCellEditable

typealias GtkCellEditableIface = _GtkCellEditableIface

typealias GtkCellRendererPrivate = _GtkCellRendererPrivate

typealias GtkCellRenderer = _GtkCellRenderer

typealias GtkCellRendererClassPrivate = _GtkCellRendererClassPrivate

typealias GtkCellRendererClass = _GtkCellRendererClass

typealias GtkTreeSortable = _GtkTreeSortable

typealias GtkTreeIterCompareFuncVar = CPointerVarOf<GtkTreeIterCompareFunc>

typealias GtkTreeIterCompareFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GtkTreeIter>?, gpointer?) -> gint>>

typealias GtkTreeSortableIface = _GtkTreeSortableIface

typealias GtkCellAreaPrivate = _GtkCellAreaPrivate

typealias GtkCellArea = _GtkCellArea

typealias GtkCellCallbackVar = CPointerVarOf<GtkCellCallback>

typealias GtkCellCallback = CPointer<CFunction<(CPointer<GtkCellRenderer>?, gpointer?) -> gboolean>>

typealias GtkCellAreaContextPrivate = _GtkCellAreaContextPrivate

typealias GtkCellAreaContext = _GtkCellAreaContext

typealias GtkCellAllocCallbackVar = CPointerVarOf<GtkCellAllocCallback>

typealias GtkCellAllocCallback = CPointer<CFunction<(CPointer<GtkCellRenderer>?, CPointer<GdkRectangle>?, CPointer<GdkRectangle>?, gpointer?) -> gboolean>>

typealias GtkCellAreaClass = _GtkCellAreaClass

typealias GFuncVar = CPointerVarOf<GFunc>

typealias GFunc = CPointer<CFunction<(gpointer?, gpointer?) -> Unit>>

typealias GtkTreeViewColumnPrivate = _GtkTreeViewColumnPrivate

typealias GtkTreeViewColumn = _GtkTreeViewColumn

typealias GtkTreeViewColumnClass = _GtkTreeViewColumnClass

typealias GtkTreeCellDataFuncVar = CPointerVarOf<GtkTreeCellDataFunc>

typealias GtkTreeCellDataFunc = CPointer<CFunction<(CPointer<GtkTreeViewColumn>?, CPointer<GtkCellRenderer>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gpointer?) -> Unit>>

typealias GtkTextAppearance = _GtkTextAppearance

typealias PangoTabArray = _PangoTabArray

typealias PangoLanguage = _PangoLanguage

typealias GtkTextAttributes = _GtkTextAttributes

typealias GtkTextChildAnchor = _GtkTextChildAnchor

typealias GtkTextChildAnchorClass = _GtkTextChildAnchorClass

typealias GtkTextIter = _GtkTextIter

typealias GtkTextTagTablePrivate = _GtkTextTagTablePrivate

typealias GtkTextTagTable = _GtkTextTagTable

typealias GtkTextTagPrivate = _GtkTextTagPrivate

typealias GtkTextTag = _GtkTextTag

typealias GtkTextTagClass = _GtkTextTagClass

typealias GtkTextBufferPrivate = _GtkTextBufferPrivate

typealias GtkTextBuffer = _GtkTextBuffer

typealias GtkTextCharPredicateVar = CPointerVarOf<GtkTextCharPredicate>

typealias GtkTextCharPredicate = CPointer<CFunction<(gunichar, gpointer?) -> gboolean>>

typealias GtkTargetPair = _GtkTargetPair

typealias GtkTargetList = _GtkTargetList

typealias GtkTargetEntry = _GtkTargetEntry

typealias cairo_surface_t = _cairo_surface

typealias GtkEditable = _GtkEditable

typealias GtkEditableInterface = _GtkEditableInterface

typealias GtkIMContext = _GtkIMContext

typealias GtkIMContextClass = _GtkIMContextClass

typealias GtkEntryBufferPrivate = _GtkEntryBufferPrivate

typealias GtkEntryBuffer = _GtkEntryBuffer

typealias GtkEntryBufferClass = _GtkEntryBufferClass

typealias GtkListStorePrivate = _GtkListStorePrivate

typealias GtkListStore = _GtkListStore

typealias GtkListStoreClass = _GtkListStoreClass

typealias GtkTreeModelFilterVisibleFuncVar = CPointerVarOf<GtkTreeModelFilterVisibleFunc>

typealias GtkTreeModelFilterVisibleFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>

typealias GtkTreeModelFilterModifyFuncVar = CPointerVarOf<GtkTreeModelFilterModifyFunc>

typealias GtkTreeModelFilterModifyFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, CPointer<GValue>?, gint, gpointer?) -> Unit>>

typealias GtkTreeModelFilterPrivate = _GtkTreeModelFilterPrivate

typealias GtkTreeModelFilter = _GtkTreeModelFilter

typealias GtkTreeModelFilterClass = _GtkTreeModelFilterClass

typealias GtkEntryCompletionPrivate = _GtkEntryCompletionPrivate

typealias GtkEntryCompletion = _GtkEntryCompletion

typealias GtkEntryCompletionClass = _GtkEntryCompletionClass

typealias GtkEntryCompletionMatchFuncVar = CPointerVarOf<GtkEntryCompletionMatchFunc>

typealias GtkEntryCompletionMatchFunc = CPointer<CFunction<(CPointer<GtkEntryCompletion>?, CPointer<gcharVar>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>

typealias GtkImagePrivate = _GtkImagePrivate

typealias GtkImage = _GtkImage

typealias GtkImageClass = _GtkImageClass

typealias GdkPixbufAnimation = _GdkPixbufAnimation

typealias GtkEntryPrivate = _GtkEntryPrivate

typealias GtkEntry = _GtkEntry

typealias GtkEntryClass = _GtkEntryClass

typealias GtkTreeViewPrivate = _GtkTreeViewPrivate

typealias GtkTreeView = _GtkTreeView

typealias GtkTreeViewClass = _GtkTreeViewClass

typealias GtkTreeSelectionPrivate = _GtkTreeSelectionPrivate

typealias GtkTreeSelection = _GtkTreeSelection

typealias GtkTreeSelectionClass = _GtkTreeSelectionClass

typealias GtkTreeViewColumnDropFuncVar = CPointerVarOf<GtkTreeViewColumnDropFunc>

typealias GtkTreeViewColumnDropFunc = CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreeViewColumn>?, CPointer<GtkTreeViewColumn>?, CPointer<GtkTreeViewColumn>?, gpointer?) -> gboolean>>

typealias GtkTreeViewMappingFuncVar = CPointerVarOf<GtkTreeViewMappingFunc>

typealias GtkTreeViewMappingFunc = CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreePath>?, gpointer?) -> Unit>>

typealias GtkTreeViewSearchEqualFuncVar = CPointerVarOf<GtkTreeViewSearchEqualFunc>

typealias GtkTreeViewSearchEqualFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, gint, CPointer<gcharVar>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>

typealias GtkTreeViewRowSeparatorFuncVar = CPointerVarOf<GtkTreeViewRowSeparatorFunc>

typealias GtkTreeViewRowSeparatorFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gpointer?) -> gboolean>>

typealias GtkTreeViewSearchPositionFuncVar = CPointerVarOf<GtkTreeViewSearchPositionFunc>

typealias GtkTreeViewSearchPositionFunc = CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkWidget>?, gpointer?) -> Unit>>

typealias GtkTreeDestroyCountFuncVar = CPointerVarOf<GtkTreeDestroyCountFunc>

typealias GtkTreeDestroyCountFunc = CPointer<CFunction<(CPointer<GtkTreeView>?, CPointer<GtkTreePath>?, gint, gpointer?) -> Unit>>

typealias GtkComboBoxPrivate = _GtkComboBoxPrivate

typealias GtkComboBox = _GtkComboBox

typealias GtkComboBoxClass = _GtkComboBoxClass

typealias GtkAppChooserButtonPrivate = _GtkAppChooserButtonPrivate

typealias GtkAppChooserButton = _GtkAppChooserButton

typealias GtkAppChooserButtonClass = _GtkAppChooserButtonClass

typealias GtkShortcutsWindow = _GtkShortcutsWindow

typealias GtkShortcutsWindowClass = _GtkShortcutsWindowClass

typealias GtkShortcutsWindow_autoptrVar = CPointerVarOf<GtkShortcutsWindow_autoptr>

typealias GtkShortcutsWindow_autoptr = CPointer<GtkShortcutsWindow>

typealias GtkShortcutsWindow_listautoptrVar = CPointerVarOf<GtkShortcutsWindow_listautoptr>

typealias GtkShortcutsWindow_listautoptr = CPointer<GList>

typealias GtkShortcutsWindow_slistautoptrVar = CPointerVarOf<GtkShortcutsWindow_slistautoptr>

typealias GtkShortcutsWindow_slistautoptr = CPointer<GSList>

typealias GtkShortcutsWindow_queueautoptrVar = CPointerVarOf<GtkShortcutsWindow_queueautoptr>

typealias GtkShortcutsWindow_queueautoptr = CPointer<GQueue>

typealias GtkApplicationWindowPrivate = _GtkApplicationWindowPrivate

typealias GtkApplicationWindowClass = _GtkApplicationWindowClass

typealias GtkApplicationWindow = _GtkApplicationWindow

typealias GtkFramePrivate = _GtkFramePrivate

typealias GtkFrame = _GtkFrame

typealias GtkFrameClass = _GtkFrameClass

typealias GtkAspectFramePrivate = _GtkAspectFramePrivate

typealias GtkAspectFrame = _GtkAspectFrame

typealias GtkAspectFrameClass = _GtkAspectFrameClass

typealias GtkAssistantPrivate = _GtkAssistantPrivate

typealias GtkAssistant = _GtkAssistant

typealias GtkAssistantClass = _GtkAssistantClass

typealias GtkAssistantPageFuncVar = CPointerVarOf<GtkAssistantPageFunc>

typealias GtkAssistantPageFunc = CPointer<CFunction<(gint, gpointer?) -> gint>>

typealias GtkButtonBoxPrivate = _GtkButtonBoxPrivate

typealias GtkButtonBox = _GtkButtonBox

typealias GtkButtonBoxClass = _GtkButtonBoxClass

typealias GtkBindingSet = _GtkBindingSet

typealias GtkBindingEntry = _GtkBindingEntry

typealias GtkBindingSignal = _GtkBindingSignal

typealias GtkBindingArg = _GtkBindingArg

typealias GtkBuilderClass = _GtkBuilderClass

typealias GtkBuildable = _GtkBuildable

typealias GMarkupParseContext = _GMarkupParseContext

typealias GMarkupParser = _GMarkupParser

typealias GtkBuildableIface = _GtkBuildableIface

typealias GtkButtonPrivate = _GtkButtonPrivate

typealias GtkButton = _GtkButton

typealias GtkButtonClass = _GtkButtonClass

typealias GtkCalendarPrivate = _GtkCalendarPrivate

typealias GtkCalendar = _GtkCalendar

typealias GtkCalendarClass = _GtkCalendarClass

typealias GtkCalendarDetailFuncVar = CPointerVarOf<GtkCalendarDetailFunc>

typealias GtkCalendarDetailFunc = CPointer<CFunction<(CPointer<GtkCalendar>?, guint, guint, guint, gpointer?) -> CPointer<gcharVar>?>>

typealias GtkCellAreaBoxPrivate = _GtkCellAreaBoxPrivate

typealias GtkCellAreaBox = _GtkCellAreaBox

typealias GtkCellAreaBoxClass = _GtkCellAreaBoxClass

typealias GtkCellAreaContextClass = _GtkCellAreaContextClass

typealias GtkCellLayout = _GtkCellLayout

typealias GtkCellLayoutDataFuncVar = CPointerVarOf<GtkCellLayoutDataFunc>

typealias GtkCellLayoutDataFunc = CPointer<CFunction<(CPointer<GtkCellLayout>?, CPointer<GtkCellRenderer>?, CPointer<GtkTreeModel>?, CPointer<GtkTreeIter>?, gpointer?) -> Unit>>

typealias GtkCellLayoutIface = _GtkCellLayoutIface

typealias GtkCellRendererTextPrivate = _GtkCellRendererTextPrivate

typealias GtkCellRendererText = _GtkCellRendererText

typealias GtkCellRendererTextClass = _GtkCellRendererTextClass

typealias GtkCellRendererAccelPrivate = _GtkCellRendererAccelPrivate

typealias GtkCellRendererAccel = _GtkCellRendererAccel

typealias GtkCellRendererAccelClass = _GtkCellRendererAccelClass

typealias GtkCellRendererComboPrivate = _GtkCellRendererComboPrivate

typealias GtkCellRendererCombo = _GtkCellRendererCombo

typealias GtkCellRendererComboClass = _GtkCellRendererComboClass

typealias GtkCellRendererPixbufPrivate = _GtkCellRendererPixbufPrivate

typealias GtkCellRendererPixbuf = _GtkCellRendererPixbuf

typealias GtkCellRendererPixbufClass = _GtkCellRendererPixbufClass

typealias GtkCellRendererProgressPrivate = _GtkCellRendererProgressPrivate

typealias GtkCellRendererProgress = _GtkCellRendererProgress

typealias GtkCellRendererProgressClass = _GtkCellRendererProgressClass

typealias GtkCellRendererSpinPrivate = _GtkCellRendererSpinPrivate

typealias GtkCellRendererSpin = _GtkCellRendererSpin

typealias GtkCellRendererSpinClass = _GtkCellRendererSpinClass

typealias GtkCellRendererSpinnerPrivate = _GtkCellRendererSpinnerPrivate

typealias GtkCellRendererSpinner = _GtkCellRendererSpinner

typealias GtkCellRendererSpinnerClass = _GtkCellRendererSpinnerClass

typealias GtkCellRendererTogglePrivate = _GtkCellRendererTogglePrivate

typealias GtkCellRendererToggle = _GtkCellRendererToggle

typealias GtkCellRendererToggleClass = _GtkCellRendererToggleClass

typealias GtkCellViewPrivate = _GtkCellViewPrivate

typealias GtkCellView = _GtkCellView

typealias GtkCellViewClass = _GtkCellViewClass

typealias GtkToggleButtonPrivate = _GtkToggleButtonPrivate

typealias GtkToggleButton = _GtkToggleButton

typealias GtkToggleButtonClass = _GtkToggleButtonClass

typealias GtkCheckButton = _GtkCheckButton

typealias GtkCheckButtonClass = _GtkCheckButtonClass

typealias GtkMenuItemPrivate = _GtkMenuItemPrivate

typealias GtkMenuItem = _GtkMenuItem

typealias GtkMenuItemClass = _GtkMenuItemClass

typealias GtkCheckMenuItemPrivate = _GtkCheckMenuItemPrivate

typealias GtkCheckMenuItem = _GtkCheckMenuItem

typealias GtkCheckMenuItemClass = _GtkCheckMenuItemClass

typealias GtkClipboardReceivedFuncVar = CPointerVarOf<GtkClipboardReceivedFunc>

typealias GtkClipboardReceivedFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, CPointer<GtkSelectionData>?, gpointer?) -> Unit>>

typealias GtkClipboardTextReceivedFuncVar = CPointerVarOf<GtkClipboardTextReceivedFunc>

typealias GtkClipboardTextReceivedFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GtkClipboardRichTextReceivedFuncVar = CPointerVarOf<GtkClipboardRichTextReceivedFunc>

typealias GtkClipboardRichTextReceivedFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, GdkAtom?, CPointer<guint8Var>?, gsize, gpointer?) -> Unit>>

typealias GtkClipboardImageReceivedFuncVar = CPointerVarOf<GtkClipboardImageReceivedFunc>

typealias GtkClipboardImageReceivedFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, CPointer<GdkPixbuf>?, gpointer?) -> Unit>>

typealias GtkClipboardURIReceivedFuncVar = CPointerVarOf<GtkClipboardURIReceivedFunc>

typealias GtkClipboardURIReceivedFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, CPointer<CPointerVar<gcharVar>>?, gpointer?) -> Unit>>

typealias GtkClipboardTargetsReceivedFuncVar = CPointerVarOf<GtkClipboardTargetsReceivedFunc>

typealias GtkClipboardTargetsReceivedFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, CPointer<GdkAtomVar>?, gint, gpointer?) -> Unit>>

typealias GtkClipboardGetFuncVar = CPointerVarOf<GtkClipboardGetFunc>

typealias GtkClipboardGetFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, CPointer<GtkSelectionData>?, guint, gpointer?) -> Unit>>

typealias GtkClipboardClearFuncVar = CPointerVarOf<GtkClipboardClearFunc>

typealias GtkClipboardClearFunc = CPointer<CFunction<(CPointer<GtkClipboard>?, gpointer?) -> Unit>>

typealias GtkColorButtonPrivate = _GtkColorButtonPrivate

typealias GtkColorButton = _GtkColorButton

typealias GtkColorButtonClass = _GtkColorButtonClass

typealias GtkColorChooser = _GtkColorChooser

typealias GtkColorChooserInterface = _GtkColorChooserInterface

typealias GtkColorChooserDialogPrivate = _GtkColorChooserDialogPrivate

typealias GtkColorChooserDialog = _GtkColorChooserDialog

typealias GtkColorChooserDialogClass = _GtkColorChooserDialogClass

typealias GtkColorChooserWidgetPrivate = _GtkColorChooserWidgetPrivate

typealias GtkColorChooserWidget = _GtkColorChooserWidget

typealias GtkColorChooserWidgetClass = _GtkColorChooserWidgetClass

typealias GtkComboBoxTextPrivate = _GtkComboBoxTextPrivate

typealias GtkComboBoxText = _GtkComboBoxText

typealias GtkComboBoxTextClass = _GtkComboBoxTextClass

typealias GtkCssSection = _GtkCssSection

typealias GtkCssProviderPrivate = _GtkCssProviderPrivate

typealias GtkCssProvider = _GtkCssProvider

typealias GtkCssProviderClass = _GtkCssProviderClass

typealias GtkDrawingArea = _GtkDrawingArea

typealias GtkDrawingAreaClass = _GtkDrawingAreaClass

typealias GtkEventBoxPrivate = _GtkEventBoxPrivate

typealias GtkEventBox = _GtkEventBox

typealias GtkEventBoxClass = _GtkEventBoxClass

typealias GtkEventController = _GtkEventController

typealias GtkEventControllerClass = _GtkEventControllerClass

typealias GtkEventControllerKey = _GtkEventControllerKey

typealias GtkEventControllerKeyClass = _GtkEventControllerKeyClass

typealias GtkEventControllerMotion = _GtkEventControllerMotion

typealias GtkEventControllerMotionClass = _GtkEventControllerMotionClass

typealias GtkEventControllerScroll = _GtkEventControllerScroll

typealias GtkEventControllerScrollClass = _GtkEventControllerScrollClass

typealias GtkExpanderPrivate = _GtkExpanderPrivate

typealias GtkExpander = _GtkExpander

typealias GtkExpanderClass = _GtkExpanderClass

typealias GtkFixedPrivate = _GtkFixedPrivate

typealias GtkFixed = _GtkFixed

typealias GtkFixedClass = _GtkFixedClass

typealias GtkFixedChild = _GtkFixedChild

typealias GtkFileFilter = _GtkFileFilter

typealias GtkFileFilterInfo = _GtkFileFilterInfo

typealias GtkFileFilterFuncVar = CPointerVarOf<GtkFileFilterFunc>

typealias GtkFileFilterFunc = CPointer<CFunction<(CPointer<GtkFileFilterInfo>?, gpointer?) -> gboolean>>

typealias GtkFileChooser = _GtkFileChooser

typealias GtkFileChooserButtonPrivate = _GtkFileChooserButtonPrivate

typealias GtkFileChooserButton = _GtkFileChooserButton

typealias GtkFileChooserButtonClass = _GtkFileChooserButtonClass

typealias GtkFileChooserDialogPrivate = _GtkFileChooserDialogPrivate

typealias GtkFileChooserDialog = _GtkFileChooserDialog

typealias GtkFileChooserDialogClass = _GtkFileChooserDialogClass

typealias GtkNativeDialog = _GtkNativeDialog

typealias GtkNativeDialogClass = _GtkNativeDialogClass

typealias GtkNativeDialog_autoptrVar = CPointerVarOf<GtkNativeDialog_autoptr>

typealias GtkNativeDialog_autoptr = CPointer<GtkNativeDialog>

typealias GtkNativeDialog_listautoptrVar = CPointerVarOf<GtkNativeDialog_listautoptr>

typealias GtkNativeDialog_listautoptr = CPointer<GList>

typealias GtkNativeDialog_slistautoptrVar = CPointerVarOf<GtkNativeDialog_slistautoptr>

typealias GtkNativeDialog_slistautoptr = CPointer<GSList>

typealias GtkNativeDialog_queueautoptrVar = CPointerVarOf<GtkNativeDialog_queueautoptr>

typealias GtkNativeDialog_queueautoptr = CPointer<GQueue>

typealias GtkFileChooserNative = _GtkFileChooserNative

typealias GtkFileChooserNative_autoptrVar = CPointerVarOf<GtkFileChooserNative_autoptr>

typealias GtkFileChooserNative_autoptr = CPointer<GtkFileChooserNative>

typealias GtkFileChooserNative_listautoptrVar = CPointerVarOf<GtkFileChooserNative_listautoptr>

typealias GtkFileChooserNative_listautoptr = CPointer<GList>

typealias GtkFileChooserNative_slistautoptrVar = CPointerVarOf<GtkFileChooserNative_slistautoptr>

typealias GtkFileChooserNative_slistautoptr = CPointer<GSList>

typealias GtkFileChooserNative_queueautoptrVar = CPointerVarOf<GtkFileChooserNative_queueautoptr>

typealias GtkFileChooserNative_queueautoptr = CPointer<GQueue>

typealias GtkFileChooserWidgetPrivate = _GtkFileChooserWidgetPrivate

typealias GtkFileChooserWidget = _GtkFileChooserWidget

typealias GtkFileChooserWidgetClass = _GtkFileChooserWidgetClass

typealias GtkFlowBox = _GtkFlowBox

typealias GtkFlowBoxChild = _GtkFlowBoxChild

typealias GtkFlowBoxClass = _GtkFlowBoxClass

typealias GtkFlowBoxChildClass = _GtkFlowBoxChildClass

typealias GtkFlowBoxCreateWidgetFuncVar = CPointerVarOf<GtkFlowBoxCreateWidgetFunc>

typealias GtkFlowBoxCreateWidgetFunc = CPointer<CFunction<(gpointer?, gpointer?) -> CPointer<GtkWidget>?>>

typealias GtkFlowBoxForeachFuncVar = CPointerVarOf<GtkFlowBoxForeachFunc>

typealias GtkFlowBoxForeachFunc = CPointer<CFunction<(CPointer<GtkFlowBox>?, CPointer<GtkFlowBoxChild>?, gpointer?) -> Unit>>

typealias GtkFlowBoxFilterFuncVar = CPointerVarOf<GtkFlowBoxFilterFunc>

typealias GtkFlowBoxFilterFunc = CPointer<CFunction<(CPointer<GtkFlowBoxChild>?, gpointer?) -> gboolean>>

typealias GtkFlowBoxSortFuncVar = CPointerVarOf<GtkFlowBoxSortFunc>

typealias GtkFlowBoxSortFunc = CPointer<CFunction<(CPointer<GtkFlowBoxChild>?, CPointer<GtkFlowBoxChild>?, gpointer?) -> gint>>

typealias GtkFontButtonPrivate = _GtkFontButtonPrivate

typealias GtkFontButton = _GtkFontButton

typealias GtkFontButtonClass = _GtkFontButtonClass

typealias PangoFontFamily = _PangoFontFamily

typealias PangoFontFace = _PangoFontFace

typealias GtkFontFilterFuncVar = CPointerVarOf<GtkFontFilterFunc>

typealias GtkFontFilterFunc = CPointer<CFunction<(CPointer<PangoFontFamily>?, CPointer<PangoFontFace>?, gpointer?) -> gboolean>>

typealias GtkFontChooser = _GtkFontChooser

typealias GtkFontChooserIface = _GtkFontChooserIface

typealias GtkFontChooserDialogPrivate = _GtkFontChooserDialogPrivate

typealias GtkFontChooserDialog = _GtkFontChooserDialog

typealias GtkFontChooserDialogClass = _GtkFontChooserDialogClass

typealias GtkFontChooserWidgetPrivate = _GtkFontChooserWidgetPrivate

typealias GtkFontChooserWidget = _GtkFontChooserWidget

typealias GtkFontChooserWidgetClass = _GtkFontChooserWidgetClass

typealias GtkGesture = _GtkGesture

typealias GtkGestureClass = _GtkGestureClass

typealias GtkGestureSingle = _GtkGestureSingle

typealias GtkGestureSingleClass = _GtkGestureSingleClass

typealias GtkGestureDrag = _GtkGestureDrag

typealias GtkGestureDragClass = _GtkGestureDragClass

typealias GtkGestureLongPress = _GtkGestureLongPress

typealias GtkGestureLongPressClass = _GtkGestureLongPressClass

typealias GtkGestureMultiPress = _GtkGestureMultiPress

typealias GtkGestureMultiPressClass = _GtkGestureMultiPressClass

typealias GtkGesturePan = _GtkGesturePan

typealias GtkGesturePanClass = _GtkGesturePanClass

typealias GtkGestureRotate = _GtkGestureRotate

typealias GtkGestureRotateClass = _GtkGestureRotateClass

typealias GtkGestureStylus = _GtkGestureStylus

typealias GtkGestureStylusClass = _GtkGestureStylusClass

typealias GdkDeviceTool = _GdkDeviceTool

typealias GtkGestureSwipe = _GtkGestureSwipe

typealias GtkGestureSwipeClass = _GtkGestureSwipeClass

typealias GtkGestureZoom = _GtkGestureZoom

typealias GtkGestureZoomClass = _GtkGestureZoomClass

typealias GtkGLArea = _GtkGLArea

typealias GdkGLContext = _GdkGLContext

typealias GtkGLAreaClass = _GtkGLAreaClass

typealias GtkGridPrivate = _GtkGridPrivate

typealias GtkGrid = _GtkGrid

typealias GtkGridClass = _GtkGridClass

typealias GtkHeaderBar = _GtkHeaderBar

typealias GtkHeaderBarPrivate = _GtkHeaderBarPrivate

typealias GtkHeaderBarClass = _GtkHeaderBarClass

typealias GtkStylePropertiesPrivate = _GtkStylePropertiesPrivate

typealias GtkStyleProperties = _GtkStyleProperties

typealias GtkStyleProvider = _GtkStyleProvider

typealias GtkIconFactoryPrivate = _GtkIconFactoryPrivate

typealias GtkIconFactory = _GtkIconFactory

typealias GtkStyleProviderIface = _GtkStyleProviderIface

typealias GtkStyleContextClass = _GtkStyleContextClass

typealias GtkIconInfo = _GtkIconInfo

typealias GtkIconInfoClass = _GtkIconInfoClass

typealias GtkIconThemePrivate = _GtkIconThemePrivate

typealias GtkIconTheme = _GtkIconTheme

typealias GtkIconThemeClass = _GtkIconThemeClass

typealias GdkPoint = _GdkPoint

typealias GtkIconViewPrivate = _GtkIconViewPrivate

typealias GtkIconView = _GtkIconView

typealias GtkIconViewClass = _GtkIconViewClass

typealias GtkIconViewForeachFuncVar = CPointerVarOf<GtkIconViewForeachFunc>

typealias GtkIconViewForeachFunc = CPointer<CFunction<(CPointer<GtkIconView>?, CPointer<GtkTreePath>?, gpointer?) -> Unit>>

typealias GtkIMContextInfo = _GtkIMContextInfo

typealias GtkIMContextSimplePrivate = _GtkIMContextSimplePrivate

typealias GtkIMContextSimple = _GtkIMContextSimple

typealias GtkIMContextSimpleClass = _GtkIMContextSimpleClass

typealias GtkIMMulticontextPrivate = _GtkIMMulticontextPrivate

typealias GtkIMMulticontext = _GtkIMMulticontext

typealias GtkIMMulticontextClass = _GtkIMMulticontextClass

typealias GtkInfoBarPrivate = _GtkInfoBarPrivate

typealias GtkInfoBar = _GtkInfoBar

typealias GtkInfoBarClass = _GtkInfoBarClass

typealias GtkInvisiblePrivate = _GtkInvisiblePrivate

typealias GtkInvisible = _GtkInvisible

typealias GtkInvisibleClass = _GtkInvisibleClass

typealias GtkLayoutPrivate = _GtkLayoutPrivate

typealias GtkLayout = _GtkLayout

typealias GtkLayoutClass = _GtkLayoutClass

typealias GtkLevelBarPrivate = _GtkLevelBarPrivate

typealias GtkLevelBar = _GtkLevelBar

typealias GtkLevelBarClass = _GtkLevelBarClass

typealias GtkLinkButtonPrivate = _GtkLinkButtonPrivate

typealias GtkLinkButton = _GtkLinkButton

typealias GtkLinkButtonClass = _GtkLinkButtonClass

typealias GtkListBox = _GtkListBox

typealias GtkListBoxRow = _GtkListBoxRow

typealias GtkListBoxClass = _GtkListBoxClass

typealias GtkListBoxRowClass = _GtkListBoxRowClass

typealias GtkListBoxFilterFuncVar = CPointerVarOf<GtkListBoxFilterFunc>

typealias GtkListBoxFilterFunc = CPointer<CFunction<(CPointer<GtkListBoxRow>?, gpointer?) -> gboolean>>

typealias GtkListBoxSortFuncVar = CPointerVarOf<GtkListBoxSortFunc>

typealias GtkListBoxSortFunc = CPointer<CFunction<(CPointer<GtkListBoxRow>?, CPointer<GtkListBoxRow>?, gpointer?) -> gint>>

typealias GtkListBoxUpdateHeaderFuncVar = CPointerVarOf<GtkListBoxUpdateHeaderFunc>

typealias GtkListBoxUpdateHeaderFunc = CPointer<CFunction<(CPointer<GtkListBoxRow>?, CPointer<GtkListBoxRow>?, gpointer?) -> Unit>>

typealias GtkListBoxCreateWidgetFuncVar = CPointerVarOf<GtkListBoxCreateWidgetFunc>

typealias GtkListBoxCreateWidgetFunc = CPointer<CFunction<(gpointer?, gpointer?) -> CPointer<GtkWidget>?>>

typealias GtkListBoxForeachFuncVar = CPointerVarOf<GtkListBoxForeachFunc>

typealias GtkListBoxForeachFunc = CPointer<CFunction<(CPointer<GtkListBox>?, CPointer<GtkListBoxRow>?, gpointer?) -> Unit>>

typealias GtkListBox_autoptrVar = CPointerVarOf<GtkListBox_autoptr>

typealias GtkListBox_autoptr = CPointer<GtkListBox>

typealias GtkListBox_listautoptrVar = CPointerVarOf<GtkListBox_listautoptr>

typealias GtkListBox_listautoptr = CPointer<GList>

typealias GtkListBox_slistautoptrVar = CPointerVarOf<GtkListBox_slistautoptr>

typealias GtkListBox_slistautoptr = CPointer<GSList>

typealias GtkListBox_queueautoptrVar = CPointerVarOf<GtkListBox_queueautoptr>

typealias GtkListBox_queueautoptr = CPointer<GQueue>

typealias GtkListBoxRow_autoptrVar = CPointerVarOf<GtkListBoxRow_autoptr>

typealias GtkListBoxRow_autoptr = CPointer<GtkListBoxRow>

typealias GtkListBoxRow_listautoptrVar = CPointerVarOf<GtkListBoxRow_listautoptr>

typealias GtkListBoxRow_listautoptr = CPointer<GList>

typealias GtkListBoxRow_slistautoptrVar = CPointerVarOf<GtkListBoxRow_slistautoptr>

typealias GtkListBoxRow_slistautoptr = CPointer<GSList>

typealias GtkListBoxRow_queueautoptrVar = CPointerVarOf<GtkListBoxRow_queueautoptr>

typealias GtkListBoxRow_queueautoptr = CPointer<GQueue>

typealias GtkLockButtonPrivate = _GtkLockButtonPrivate

typealias GtkLockButton = _GtkLockButton

typealias GtkLockButtonClass = _GtkLockButtonClass

typealias GtkKeySnoopFuncVar = CPointerVarOf<GtkKeySnoopFunc>

typealias GtkKeySnoopFunc = CPointer<CFunction<(CPointer<GtkWidget>?, CPointer<GdkEventKey>?, gpointer?) -> gint>>

typealias GtkMenuBarPrivate = _GtkMenuBarPrivate

typealias GtkMenuBar = _GtkMenuBar

typealias GtkMenuBarClass = _GtkMenuBarClass

typealias GtkPopoverPrivate = _GtkPopoverPrivate

typealias GtkPopover = _GtkPopover

typealias GtkPopoverClass = _GtkPopoverClass

typealias GtkMenuButtonPrivate = _GtkMenuButtonPrivate

typealias GtkMenuButton = _GtkMenuButton

typealias GtkMenuButtonClass = _GtkMenuButtonClass

typealias GtkSizeGroupPrivate = _GtkSizeGroupPrivate

typealias GtkSizeGroup = _GtkSizeGroup

typealias GtkSizeGroupClass = _GtkSizeGroupClass

typealias GtkToolItemPrivate = _GtkToolItemPrivate

typealias GtkToolItem = _GtkToolItem

typealias GtkToolItemClass = _GtkToolItemClass

typealias GtkToolButtonPrivate = _GtkToolButtonPrivate

typealias GtkToolButton = _GtkToolButton

typealias GtkToolButtonClass = _GtkToolButtonClass

typealias GtkMenuToolButtonPrivate = _GtkMenuToolButtonPrivate

typealias GtkMenuToolButton = _GtkMenuToolButton

typealias GtkMenuToolButtonClass = _GtkMenuToolButtonClass

typealias GtkMessageDialogPrivate = _GtkMessageDialogPrivate

typealias GtkMessageDialog = _GtkMessageDialog

typealias GtkMessageDialogClass = _GtkMessageDialogClass

typealias GtkModelButton = _GtkModelButton

typealias GtkModuleInitFuncVar = CPointerVarOf<GtkModuleInitFunc>

typealias GtkModuleInitFunc = CPointer<CFunction<(CPointer<gintVar>?, CPointer<CPointerVar<CPointerVar<gcharVar>>>?) -> Unit>>

typealias GtkModuleDisplayInitFuncVar = CPointerVarOf<GtkModuleDisplayInitFunc>

typealias GtkModuleDisplayInitFunc = CPointer<CFunction<(CPointer<GdkDisplay>?) -> Unit>>

typealias GtkMountOperationPrivate = _GtkMountOperationPrivate

typealias GtkMountOperation = _GtkMountOperation

typealias GtkMountOperationClass = _GtkMountOperationClass

typealias GtkNotebookPrivate = _GtkNotebookPrivate

typealias GtkNotebook = _GtkNotebook

typealias GtkNotebookClass = _GtkNotebookClass

typealias GtkOffscreenWindow = _GtkOffscreenWindow

typealias GtkOffscreenWindowClass = _GtkOffscreenWindowClass

typealias GtkOrientable = _GtkOrientable

typealias GtkOrientableIface = _GtkOrientableIface

typealias GtkOverlayPrivate = _GtkOverlayPrivate

typealias GtkOverlay = _GtkOverlay

typealias GtkOverlayClass = _GtkOverlayClass

typealias GtkPadController = _GtkPadController

typealias GtkPadControllerClass = _GtkPadControllerClass

typealias GtkPadActionEntry = _GtkPadActionEntry

typealias GtkPaperSize = _GtkPaperSize

typealias GKeyFile = _GKeyFile

typealias GtkPageSetup = _GtkPageSetup

typealias GtkPanedPrivate = _GtkPanedPrivate

typealias GtkPaned = _GtkPaned

typealias GtkPanedClass = _GtkPanedClass

typealias GtkPlacesSidebar = _GtkPlacesSidebar

typealias GtkPlacesSidebarClass = _GtkPlacesSidebarClass

typealias GtkPopoverMenu = _GtkPopoverMenu

typealias GtkPopoverMenuClass = _GtkPopoverMenuClass

typealias GtkPrintContext = _GtkPrintContext

typealias GtkPrintSettings = _GtkPrintSettings

typealias GtkPrintSettingsFuncVar = CPointerVarOf<GtkPrintSettingsFunc>

typealias GtkPrintSettingsFunc = CPointer<CFunction<(CPointer<gcharVar>?, CPointer<gcharVar>?, gpointer?) -> Unit>>

typealias GtkPageRange = _GtkPageRange

typealias GtkPrintOperationPreview = _GtkPrintOperationPreview

typealias GtkPrintOperationPreviewIface = _GtkPrintOperationPreviewIface

typealias GtkPrintOperationPrivate = _GtkPrintOperationPrivate

typealias GtkPrintOperation = _GtkPrintOperation

typealias GtkPrintOperationClass = _GtkPrintOperationClass

typealias GtkPageSetupDoneFuncVar = CPointerVarOf<GtkPageSetupDoneFunc>

typealias GtkPageSetupDoneFunc = CPointer<CFunction<(CPointer<GtkPageSetup>?, gpointer?) -> Unit>>

typealias GtkProgressBarPrivate = _GtkProgressBarPrivate

typealias GtkProgressBar = _GtkProgressBar

typealias GtkProgressBarClass = _GtkProgressBarClass

typealias GtkRadioButtonPrivate = _GtkRadioButtonPrivate

typealias GtkRadioButton = _GtkRadioButton

typealias GtkRadioButtonClass = _GtkRadioButtonClass

typealias GtkRadioMenuItemPrivate = _GtkRadioMenuItemPrivate

typealias GtkRadioMenuItem = _GtkRadioMenuItem

typealias GtkRadioMenuItemClass = _GtkRadioMenuItemClass

typealias GtkToggleToolButtonPrivate = _GtkToggleToolButtonPrivate

typealias GtkToggleToolButton = _GtkToggleToolButton

typealias GtkToggleToolButtonClass = _GtkToggleToolButtonClass

typealias GtkRadioToolButton = _GtkRadioToolButton

typealias GtkRadioToolButtonClass = _GtkRadioToolButtonClass

typealias GtkRangePrivate = _GtkRangePrivate

typealias GtkRange = _GtkRange

typealias GtkRangeClass = _GtkRangeClass

typealias GtkRecentInfo = _GtkRecentInfo

typealias GtkRecentData = _GtkRecentData

typealias GtkRecentManagerPrivate = _GtkRecentManagerPrivate

typealias GtkRecentManager = _GtkRecentManager

typealias GtkRecentManagerClass = _GtkRecentManagerClass

typealias __time_tVar = LongVarOf<__time_t>

typealias __time_t = Long

typealias time_tVar = LongVarOf<time_t>

typealias time_t = __time_t

typealias GtkRecentFilter = _GtkRecentFilter

typealias GtkRecentFilterInfo = _GtkRecentFilterInfo

typealias GtkRecentFilterFuncVar = CPointerVarOf<GtkRecentFilterFunc>

typealias GtkRecentFilterFunc = CPointer<CFunction<(CPointer<GtkRecentFilterInfo>?, gpointer?) -> gboolean>>

typealias GtkRecentSortFuncVar = CPointerVarOf<GtkRecentSortFunc>

typealias GtkRecentSortFunc = CPointer<CFunction<(CPointer<GtkRecentInfo>?, CPointer<GtkRecentInfo>?, gpointer?) -> gint>>

typealias GtkRecentChooser = _GtkRecentChooser

typealias GtkRecentChooserIface = _GtkRecentChooserIface

typealias GtkRecentChooserDialogPrivate = _GtkRecentChooserDialogPrivate

typealias GtkRecentChooserDialog = _GtkRecentChooserDialog

typealias GtkRecentChooserDialogClass = _GtkRecentChooserDialogClass

typealias GtkRecentChooserMenuPrivate = _GtkRecentChooserMenuPrivate

typealias GtkRecentChooserMenu = _GtkRecentChooserMenu

typealias GtkRecentChooserMenuClass = _GtkRecentChooserMenuClass

typealias GtkRecentChooserWidgetPrivate = _GtkRecentChooserWidgetPrivate

typealias GtkRecentChooserWidget = _GtkRecentChooserWidget

typealias GtkRecentChooserWidgetClass = _GtkRecentChooserWidgetClass

typealias GtkRevealer = _GtkRevealer

typealias GtkRevealerClass = _GtkRevealerClass

typealias GtkScalePrivate = _GtkScalePrivate

typealias GtkScale = _GtkScale

typealias GtkScaleClass = _GtkScaleClass

typealias GtkScaleButtonPrivate = _GtkScaleButtonPrivate

typealias GtkScaleButton = _GtkScaleButton

typealias GtkScaleButtonClass = _GtkScaleButtonClass

typealias GtkScrollable = _GtkScrollable

typealias GtkScrollableInterface = _GtkScrollableInterface

typealias GtkScrollbar = _GtkScrollbar

typealias GtkScrollbarClass = _GtkScrollbarClass

typealias GtkScrolledWindowPrivate = _GtkScrolledWindowPrivate

typealias GtkScrolledWindow = _GtkScrolledWindow

typealias GtkScrolledWindowClass = _GtkScrolledWindowClass

typealias GtkSearchBar = _GtkSearchBar

typealias GtkSearchBarClass = _GtkSearchBarClass

typealias GtkSearchEntry = _GtkSearchEntry

typealias GtkSearchEntryClass = _GtkSearchEntryClass

typealias GtkSeparatorPrivate = _GtkSeparatorPrivate

typealias GtkSeparator = _GtkSeparator

typealias GtkSeparatorClass = _GtkSeparatorClass

typealias GtkSeparatorMenuItem = _GtkSeparatorMenuItem

typealias GtkSeparatorMenuItemClass = _GtkSeparatorMenuItemClass

typealias GtkSeparatorToolItemPrivate = _GtkSeparatorToolItemPrivate

typealias GtkSeparatorToolItem = _GtkSeparatorToolItem

typealias GtkSeparatorToolItemClass = _GtkSeparatorToolItemClass

typealias GtkSettingsClass = _GtkSettingsClass

typealias GtkSettingsValue = _GtkSettingsValue

typealias GtkShortcutLabel = _GtkShortcutLabel

typealias GtkShortcutLabelClass = _GtkShortcutLabelClass

typealias GtkShortcutsGroup = _GtkShortcutsGroup

typealias GtkShortcutsGroupClass = _GtkShortcutsGroupClass

typealias GtkShortcutsSection = _GtkShortcutsSection

typealias GtkShortcutsSectionClass = _GtkShortcutsSectionClass

typealias GtkShortcutsShortcut = _GtkShortcutsShortcut

typealias GtkShortcutsShortcutClass = _GtkShortcutsShortcutClass

typealias GtkStack = _GtkStack

typealias GtkStackClass = _GtkStackClass

typealias GtkStackSidebar = _GtkStackSidebar

typealias GtkStackSidebarPrivate = _GtkStackSidebarPrivate

typealias GtkStackSidebarClass = _GtkStackSidebarClass

typealias GtkRequestedSize = _GtkRequestedSize

typealias GtkSpinButtonPrivate = _GtkSpinButtonPrivate

typealias GtkSpinButton = _GtkSpinButton

typealias GtkSpinButtonClass = _GtkSpinButtonClass

typealias GtkSpinnerPrivate = _GtkSpinnerPrivate

typealias GtkSpinner = _GtkSpinner

typealias GtkSpinnerClass = _GtkSpinnerClass

typealias GtkStackSwitcher = _GtkStackSwitcher

typealias GtkStackSwitcherClass = _GtkStackSwitcherClass

typealias GtkStatusbarPrivate = _GtkStatusbarPrivate

typealias GtkStatusbar = _GtkStatusbar

typealias GtkStatusbarClass = _GtkStatusbarClass

typealias GtkSwitchPrivate = _GtkSwitchPrivate

typealias GtkSwitch = _GtkSwitch

typealias GtkSwitchClass = _GtkSwitchClass

typealias GtkTextTagTableForeachVar = CPointerVarOf<GtkTextTagTableForeach>

typealias GtkTextTagTableForeach = CPointer<CFunction<(CPointer<GtkTextTag>?, gpointer?) -> Unit>>

typealias GtkTextTagTableClass = _GtkTextTagTableClass

typealias GtkTextMark = _GtkTextMark

typealias GtkTextMarkClass = _GtkTextMarkClass

typealias GtkTextBTree = _GtkTextBTree

typealias GtkTextBufferClass = _GtkTextBufferClass

typealias GtkTextBufferSerializeFuncVar = CPointerVarOf<GtkTextBufferSerializeFunc>

typealias GtkTextBufferSerializeFunc = CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<GtkTextIter>?, CPointer<gsizeVar>?, gpointer?) -> CPointer<guint8Var>?>>

typealias GtkTextBufferDeserializeFuncVar = CPointerVarOf<GtkTextBufferDeserializeFunc>

typealias GtkTextBufferDeserializeFunc = CPointer<CFunction<(CPointer<GtkTextBuffer>?, CPointer<GtkTextBuffer>?, CPointer<GtkTextIter>?, CPointer<guint8Var>?, gsize, gboolean, gpointer?, CPointer<CPointerVar<GError>>?) -> gboolean>>

typealias GtkTextViewPrivate = _GtkTextViewPrivate

typealias GtkTextView = _GtkTextView

typealias GtkTextViewClass = _GtkTextViewClass

typealias GtkToolbarPrivate = _GtkToolbarPrivate

typealias GtkToolbar = _GtkToolbar

typealias GtkToolbarClass = _GtkToolbarClass

typealias GtkToolItemGroupPrivate = _GtkToolItemGroupPrivate

typealias GtkToolItemGroup = _GtkToolItemGroup

typealias GtkToolItemGroupClass = _GtkToolItemGroupClass

typealias GtkToolPalettePrivate = _GtkToolPalettePrivate

typealias GtkToolPalette = _GtkToolPalette

typealias GtkToolPaletteClass = _GtkToolPaletteClass

typealias GtkToolShell = _GtkToolShell

typealias GtkToolShellIface = _GtkToolShellIface

typealias GtkTreeDragSource = _GtkTreeDragSource

typealias GtkTreeDragSourceIface = _GtkTreeDragSourceIface

typealias GtkTreeDragDest = _GtkTreeDragDest

typealias GtkTreeDragDestIface = _GtkTreeDragDestIface

typealias GtkTreeModelSortPrivate = _GtkTreeModelSortPrivate

typealias GtkTreeModelSort = _GtkTreeModelSort

typealias GtkTreeModelSortClass = _GtkTreeModelSortClass

typealias GtkTreeSelectionFuncVar = CPointerVarOf<GtkTreeSelectionFunc>

typealias GtkTreeSelectionFunc = CPointer<CFunction<(CPointer<GtkTreeSelection>?, CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, gboolean, gpointer?) -> gboolean>>

typealias GtkTreeSelectionForeachFuncVar = CPointerVarOf<GtkTreeSelectionForeachFunc>

typealias GtkTreeSelectionForeachFunc = CPointer<CFunction<(CPointer<GtkTreeModel>?, CPointer<GtkTreePath>?, CPointer<GtkTreeIter>?, gpointer?) -> Unit>>

typealias GtkTreeStorePrivate = _GtkTreeStorePrivate

typealias GtkTreeStore = _GtkTreeStore

typealias GtkTreeStoreClass = _GtkTreeStoreClass

typealias GtkViewportPrivate = _GtkViewportPrivate

typealias GtkViewport = _GtkViewport

typealias GtkViewportClass = _GtkViewportClass

typealias GtkVolumeButton = _GtkVolumeButton

typealias GtkVolumeButtonClass = _GtkVolumeButtonClass

typealias GtkAccessible_autoptrVar = CPointerVarOf<GtkAccessible_autoptr>

typealias GtkAccessible_autoptr = CPointer<GtkAccessible>

typealias GtkAccessible_listautoptrVar = CPointerVarOf<GtkAccessible_listautoptr>

typealias GtkAccessible_listautoptr = CPointer<GList>

typealias GtkAccessible_slistautoptrVar = CPointerVarOf<GtkAccessible_slistautoptr>

typealias GtkAccessible_slistautoptr = CPointer<GSList>

typealias GtkAccessible_queueautoptrVar = CPointerVarOf<GtkAccessible_queueautoptr>

typealias GtkAccessible_queueautoptr = CPointer<GQueue>

typealias GtkActionBar_autoptrVar = CPointerVarOf<GtkActionBar_autoptr>

typealias GtkActionBar_autoptr = CPointer<GtkActionBar>

typealias GtkActionBar_listautoptrVar = CPointerVarOf<GtkActionBar_listautoptr>

typealias GtkActionBar_listautoptr = CPointer<GList>

typealias GtkActionBar_slistautoptrVar = CPointerVarOf<GtkActionBar_slistautoptr>

typealias GtkActionBar_slistautoptr = CPointer<GSList>

typealias GtkActionBar_queueautoptrVar = CPointerVarOf<GtkActionBar_queueautoptr>

typealias GtkActionBar_queueautoptr = CPointer<GQueue>

typealias GtkActionable_autoptrVar = CPointerVarOf<GtkActionable_autoptr>

typealias GtkActionable_autoptr = CPointer<GtkActionable>

typealias GtkActionable_listautoptrVar = CPointerVarOf<GtkActionable_listautoptr>

typealias GtkActionable_listautoptr = CPointer<GList>

typealias GtkActionable_slistautoptrVar = CPointerVarOf<GtkActionable_slistautoptr>

typealias GtkActionable_slistautoptr = CPointer<GSList>

typealias GtkActionable_queueautoptrVar = CPointerVarOf<GtkActionable_queueautoptr>

typealias GtkActionable_queueautoptr = CPointer<GQueue>

typealias GtkAdjustment_autoptrVar = CPointerVarOf<GtkAdjustment_autoptr>

typealias GtkAdjustment_autoptr = CPointer<GtkAdjustment>

typealias GtkAdjustment_listautoptrVar = CPointerVarOf<GtkAdjustment_listautoptr>

typealias GtkAdjustment_listautoptr = CPointer<GList>

typealias GtkAdjustment_slistautoptrVar = CPointerVarOf<GtkAdjustment_slistautoptr>

typealias GtkAdjustment_slistautoptr = CPointer<GSList>

typealias GtkAdjustment_queueautoptrVar = CPointerVarOf<GtkAdjustment_queueautoptr>

typealias GtkAdjustment_queueautoptr = CPointer<GQueue>

typealias GtkAppChooser_autoptrVar = CPointerVarOf<GtkAppChooser_autoptr>

typealias GtkAppChooser_autoptr = CPointer<GtkAppChooser>

typealias GtkAppChooser_listautoptrVar = CPointerVarOf<GtkAppChooser_listautoptr>

typealias GtkAppChooser_listautoptr = CPointer<GList>

typealias GtkAppChooser_slistautoptrVar = CPointerVarOf<GtkAppChooser_slistautoptr>

typealias GtkAppChooser_slistautoptr = CPointer<GSList>

typealias GtkAppChooser_queueautoptrVar = CPointerVarOf<GtkAppChooser_queueautoptr>

typealias GtkAppChooser_queueautoptr = CPointer<GQueue>

typealias GtkAppChooserButton_autoptrVar = CPointerVarOf<GtkAppChooserButton_autoptr>

typealias GtkAppChooserButton_autoptr = CPointer<GtkAppChooserButton>

typealias GtkAppChooserButton_listautoptrVar = CPointerVarOf<GtkAppChooserButton_listautoptr>

typealias GtkAppChooserButton_listautoptr = CPointer<GList>

typealias GtkAppChooserButton_slistautoptrVar = CPointerVarOf<GtkAppChooserButton_slistautoptr>

typealias GtkAppChooserButton_slistautoptr = CPointer<GSList>

typealias GtkAppChooserButton_queueautoptrVar = CPointerVarOf<GtkAppChooserButton_queueautoptr>

typealias GtkAppChooserButton_queueautoptr = CPointer<GQueue>

typealias GtkAppChooserDialog_autoptrVar = CPointerVarOf<GtkAppChooserDialog_autoptr>

typealias GtkAppChooserDialog_autoptr = CPointer<GtkAppChooserDialog>

typealias GtkAppChooserDialog_listautoptrVar = CPointerVarOf<GtkAppChooserDialog_listautoptr>

typealias GtkAppChooserDialog_listautoptr = CPointer<GList>

typealias GtkAppChooserDialog_slistautoptrVar = CPointerVarOf<GtkAppChooserDialog_slistautoptr>

typealias GtkAppChooserDialog_slistautoptr = CPointer<GSList>

typealias GtkAppChooserDialog_queueautoptrVar = CPointerVarOf<GtkAppChooserDialog_queueautoptr>

typealias GtkAppChooserDialog_queueautoptr = CPointer<GQueue>

typealias GtkAppChooserWidget_autoptrVar = CPointerVarOf<GtkAppChooserWidget_autoptr>

typealias GtkAppChooserWidget_autoptr = CPointer<GtkAppChooserWidget>

typealias GtkAppChooserWidget_listautoptrVar = CPointerVarOf<GtkAppChooserWidget_listautoptr>

typealias GtkAppChooserWidget_listautoptr = CPointer<GList>

typealias GtkAppChooserWidget_slistautoptrVar = CPointerVarOf<GtkAppChooserWidget_slistautoptr>

typealias GtkAppChooserWidget_slistautoptr = CPointer<GSList>

typealias GtkAppChooserWidget_queueautoptrVar = CPointerVarOf<GtkAppChooserWidget_queueautoptr>

typealias GtkAppChooserWidget_queueautoptr = CPointer<GQueue>

typealias GtkApplicationWindow_autoptrVar = CPointerVarOf<GtkApplicationWindow_autoptr>

typealias GtkApplicationWindow_autoptr = CPointer<GtkApplicationWindow>

typealias GtkApplicationWindow_listautoptrVar = CPointerVarOf<GtkApplicationWindow_listautoptr>

typealias GtkApplicationWindow_listautoptr = CPointer<GList>

typealias GtkApplicationWindow_slistautoptrVar = CPointerVarOf<GtkApplicationWindow_slistautoptr>

typealias GtkApplicationWindow_slistautoptr = CPointer<GSList>

typealias GtkApplicationWindow_queueautoptrVar = CPointerVarOf<GtkApplicationWindow_queueautoptr>

typealias GtkApplicationWindow_queueautoptr = CPointer<GQueue>

typealias GtkAspectFrame_autoptrVar = CPointerVarOf<GtkAspectFrame_autoptr>

typealias GtkAspectFrame_autoptr = CPointer<GtkAspectFrame>

typealias GtkAspectFrame_listautoptrVar = CPointerVarOf<GtkAspectFrame_listautoptr>

typealias GtkAspectFrame_listautoptr = CPointer<GList>

typealias GtkAspectFrame_slistautoptrVar = CPointerVarOf<GtkAspectFrame_slistautoptr>

typealias GtkAspectFrame_slistautoptr = CPointer<GSList>

typealias GtkAspectFrame_queueautoptrVar = CPointerVarOf<GtkAspectFrame_queueautoptr>

typealias GtkAspectFrame_queueautoptr = CPointer<GQueue>

typealias GtkAssistant_autoptrVar = CPointerVarOf<GtkAssistant_autoptr>

typealias GtkAssistant_autoptr = CPointer<GtkAssistant>

typealias GtkAssistant_listautoptrVar = CPointerVarOf<GtkAssistant_listautoptr>

typealias GtkAssistant_listautoptr = CPointer<GList>

typealias GtkAssistant_slistautoptrVar = CPointerVarOf<GtkAssistant_slistautoptr>

typealias GtkAssistant_slistautoptr = CPointer<GSList>

typealias GtkAssistant_queueautoptrVar = CPointerVarOf<GtkAssistant_queueautoptr>

typealias GtkAssistant_queueautoptr = CPointer<GQueue>

typealias GtkBox_autoptrVar = CPointerVarOf<GtkBox_autoptr>

typealias GtkBox_autoptr = CPointer<GtkBox>

typealias GtkBox_listautoptrVar = CPointerVarOf<GtkBox_listautoptr>

typealias GtkBox_listautoptr = CPointer<GList>

typealias GtkBox_slistautoptrVar = CPointerVarOf<GtkBox_slistautoptr>

typealias GtkBox_slistautoptr = CPointer<GSList>

typealias GtkBox_queueautoptrVar = CPointerVarOf<GtkBox_queueautoptr>

typealias GtkBox_queueautoptr = CPointer<GQueue>

typealias GtkBuildable_autoptrVar = CPointerVarOf<GtkBuildable_autoptr>

typealias GtkBuildable_autoptr = CPointer<GtkBuildable>

typealias GtkBuildable_listautoptrVar = CPointerVarOf<GtkBuildable_listautoptr>

typealias GtkBuildable_listautoptr = CPointer<GList>

typealias GtkBuildable_slistautoptrVar = CPointerVarOf<GtkBuildable_slistautoptr>

typealias GtkBuildable_slistautoptr = CPointer<GSList>

typealias GtkBuildable_queueautoptrVar = CPointerVarOf<GtkBuildable_queueautoptr>

typealias GtkBuildable_queueautoptr = CPointer<GQueue>

typealias GtkBuilder_autoptrVar = CPointerVarOf<GtkBuilder_autoptr>

typealias GtkBuilder_autoptr = CPointer<GtkBuilder>

typealias GtkBuilder_listautoptrVar = CPointerVarOf<GtkBuilder_listautoptr>

typealias GtkBuilder_listautoptr = CPointer<GList>

typealias GtkBuilder_slistautoptrVar = CPointerVarOf<GtkBuilder_slistautoptr>

typealias GtkBuilder_slistautoptr = CPointer<GSList>

typealias GtkBuilder_queueautoptrVar = CPointerVarOf<GtkBuilder_queueautoptr>

typealias GtkBuilder_queueautoptr = CPointer<GQueue>

typealias GtkButton_autoptrVar = CPointerVarOf<GtkButton_autoptr>

typealias GtkButton_autoptr = CPointer<GtkButton>

typealias GtkButton_listautoptrVar = CPointerVarOf<GtkButton_listautoptr>

typealias GtkButton_listautoptr = CPointer<GList>

typealias GtkButton_slistautoptrVar = CPointerVarOf<GtkButton_slistautoptr>

typealias GtkButton_slistautoptr = CPointer<GSList>

typealias GtkButton_queueautoptrVar = CPointerVarOf<GtkButton_queueautoptr>

typealias GtkButton_queueautoptr = CPointer<GQueue>

typealias GtkButtonBox_autoptrVar = CPointerVarOf<GtkButtonBox_autoptr>

typealias GtkButtonBox_autoptr = CPointer<GtkButtonBox>

typealias GtkButtonBox_listautoptrVar = CPointerVarOf<GtkButtonBox_listautoptr>

typealias GtkButtonBox_listautoptr = CPointer<GList>

typealias GtkButtonBox_slistautoptrVar = CPointerVarOf<GtkButtonBox_slistautoptr>

typealias GtkButtonBox_slistautoptr = CPointer<GSList>

typealias GtkButtonBox_queueautoptrVar = CPointerVarOf<GtkButtonBox_queueautoptr>

typealias GtkButtonBox_queueautoptr = CPointer<GQueue>

typealias GtkCalendar_autoptrVar = CPointerVarOf<GtkCalendar_autoptr>

typealias GtkCalendar_autoptr = CPointer<GtkCalendar>

typealias GtkCalendar_listautoptrVar = CPointerVarOf<GtkCalendar_listautoptr>

typealias GtkCalendar_listautoptr = CPointer<GList>

typealias GtkCalendar_slistautoptrVar = CPointerVarOf<GtkCalendar_slistautoptr>

typealias GtkCalendar_slistautoptr = CPointer<GSList>

typealias GtkCalendar_queueautoptrVar = CPointerVarOf<GtkCalendar_queueautoptr>

typealias GtkCalendar_queueautoptr = CPointer<GQueue>

typealias GtkCellArea_autoptrVar = CPointerVarOf<GtkCellArea_autoptr>

typealias GtkCellArea_autoptr = CPointer<GtkCellArea>

typealias GtkCellArea_listautoptrVar = CPointerVarOf<GtkCellArea_listautoptr>

typealias GtkCellArea_listautoptr = CPointer<GList>

typealias GtkCellArea_slistautoptrVar = CPointerVarOf<GtkCellArea_slistautoptr>

typealias GtkCellArea_slistautoptr = CPointer<GSList>

typealias GtkCellArea_queueautoptrVar = CPointerVarOf<GtkCellArea_queueautoptr>

typealias GtkCellArea_queueautoptr = CPointer<GQueue>

typealias GtkCellAreaBox_autoptrVar = CPointerVarOf<GtkCellAreaBox_autoptr>

typealias GtkCellAreaBox_autoptr = CPointer<GtkCellAreaBox>

typealias GtkCellAreaBox_listautoptrVar = CPointerVarOf<GtkCellAreaBox_listautoptr>

typealias GtkCellAreaBox_listautoptr = CPointer<GList>

typealias GtkCellAreaBox_slistautoptrVar = CPointerVarOf<GtkCellAreaBox_slistautoptr>

typealias GtkCellAreaBox_slistautoptr = CPointer<GSList>

typealias GtkCellAreaBox_queueautoptrVar = CPointerVarOf<GtkCellAreaBox_queueautoptr>

typealias GtkCellAreaBox_queueautoptr = CPointer<GQueue>

typealias GtkCellAreaContext_autoptrVar = CPointerVarOf<GtkCellAreaContext_autoptr>

typealias GtkCellAreaContext_autoptr = CPointer<GtkCellAreaContext>

typealias GtkCellAreaContext_listautoptrVar = CPointerVarOf<GtkCellAreaContext_listautoptr>

typealias GtkCellAreaContext_listautoptr = CPointer<GList>

typealias GtkCellAreaContext_slistautoptrVar = CPointerVarOf<GtkCellAreaContext_slistautoptr>

typealias GtkCellAreaContext_slistautoptr = CPointer<GSList>

typealias GtkCellAreaContext_queueautoptrVar = CPointerVarOf<GtkCellAreaContext_queueautoptr>

typealias GtkCellAreaContext_queueautoptr = CPointer<GQueue>

typealias GtkCellEditable_autoptrVar = CPointerVarOf<GtkCellEditable_autoptr>

typealias GtkCellEditable_autoptr = CPointer<GtkCellEditable>

typealias GtkCellEditable_listautoptrVar = CPointerVarOf<GtkCellEditable_listautoptr>

typealias GtkCellEditable_listautoptr = CPointer<GList>

typealias GtkCellEditable_slistautoptrVar = CPointerVarOf<GtkCellEditable_slistautoptr>

typealias GtkCellEditable_slistautoptr = CPointer<GSList>

typealias GtkCellEditable_queueautoptrVar = CPointerVarOf<GtkCellEditable_queueautoptr>

typealias GtkCellEditable_queueautoptr = CPointer<GQueue>

typealias GtkCellLayout_autoptrVar = CPointerVarOf<GtkCellLayout_autoptr>

typealias GtkCellLayout_autoptr = CPointer<GtkCellLayout>

typealias GtkCellLayout_listautoptrVar = CPointerVarOf<GtkCellLayout_listautoptr>

typealias GtkCellLayout_listautoptr = CPointer<GList>

typealias GtkCellLayout_slistautoptrVar = CPointerVarOf<GtkCellLayout_slistautoptr>

typealias GtkCellLayout_slistautoptr = CPointer<GSList>

typealias GtkCellLayout_queueautoptrVar = CPointerVarOf<GtkCellLayout_queueautoptr>

typealias GtkCellLayout_queueautoptr = CPointer<GQueue>

typealias GtkCellRenderer_autoptrVar = CPointerVarOf<GtkCellRenderer_autoptr>

typealias GtkCellRenderer_autoptr = CPointer<GtkCellRenderer>

typealias GtkCellRenderer_listautoptrVar = CPointerVarOf<GtkCellRenderer_listautoptr>

typealias GtkCellRenderer_listautoptr = CPointer<GList>

typealias GtkCellRenderer_slistautoptrVar = CPointerVarOf<GtkCellRenderer_slistautoptr>

typealias GtkCellRenderer_slistautoptr = CPointer<GSList>

typealias GtkCellRenderer_queueautoptrVar = CPointerVarOf<GtkCellRenderer_queueautoptr>

typealias GtkCellRenderer_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererAccel_autoptrVar = CPointerVarOf<GtkCellRendererAccel_autoptr>

typealias GtkCellRendererAccel_autoptr = CPointer<GtkCellRendererAccel>

typealias GtkCellRendererAccel_listautoptrVar = CPointerVarOf<GtkCellRendererAccel_listautoptr>

typealias GtkCellRendererAccel_listautoptr = CPointer<GList>

typealias GtkCellRendererAccel_slistautoptrVar = CPointerVarOf<GtkCellRendererAccel_slistautoptr>

typealias GtkCellRendererAccel_slistautoptr = CPointer<GSList>

typealias GtkCellRendererAccel_queueautoptrVar = CPointerVarOf<GtkCellRendererAccel_queueautoptr>

typealias GtkCellRendererAccel_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererCombo_autoptrVar = CPointerVarOf<GtkCellRendererCombo_autoptr>

typealias GtkCellRendererCombo_autoptr = CPointer<GtkCellRendererCombo>

typealias GtkCellRendererCombo_listautoptrVar = CPointerVarOf<GtkCellRendererCombo_listautoptr>

typealias GtkCellRendererCombo_listautoptr = CPointer<GList>

typealias GtkCellRendererCombo_slistautoptrVar = CPointerVarOf<GtkCellRendererCombo_slistautoptr>

typealias GtkCellRendererCombo_slistautoptr = CPointer<GSList>

typealias GtkCellRendererCombo_queueautoptrVar = CPointerVarOf<GtkCellRendererCombo_queueautoptr>

typealias GtkCellRendererCombo_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererPixbuf_autoptrVar = CPointerVarOf<GtkCellRendererPixbuf_autoptr>

typealias GtkCellRendererPixbuf_autoptr = CPointer<GtkCellRendererPixbuf>

typealias GtkCellRendererPixbuf_listautoptrVar = CPointerVarOf<GtkCellRendererPixbuf_listautoptr>

typealias GtkCellRendererPixbuf_listautoptr = CPointer<GList>

typealias GtkCellRendererPixbuf_slistautoptrVar = CPointerVarOf<GtkCellRendererPixbuf_slistautoptr>

typealias GtkCellRendererPixbuf_slistautoptr = CPointer<GSList>

typealias GtkCellRendererPixbuf_queueautoptrVar = CPointerVarOf<GtkCellRendererPixbuf_queueautoptr>

typealias GtkCellRendererPixbuf_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererProgress_autoptrVar = CPointerVarOf<GtkCellRendererProgress_autoptr>

typealias GtkCellRendererProgress_autoptr = CPointer<GtkCellRendererProgress>

typealias GtkCellRendererProgress_listautoptrVar = CPointerVarOf<GtkCellRendererProgress_listautoptr>

typealias GtkCellRendererProgress_listautoptr = CPointer<GList>

typealias GtkCellRendererProgress_slistautoptrVar = CPointerVarOf<GtkCellRendererProgress_slistautoptr>

typealias GtkCellRendererProgress_slistautoptr = CPointer<GSList>

typealias GtkCellRendererProgress_queueautoptrVar = CPointerVarOf<GtkCellRendererProgress_queueautoptr>

typealias GtkCellRendererProgress_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererSpin_autoptrVar = CPointerVarOf<GtkCellRendererSpin_autoptr>

typealias GtkCellRendererSpin_autoptr = CPointer<GtkCellRendererSpin>

typealias GtkCellRendererSpin_listautoptrVar = CPointerVarOf<GtkCellRendererSpin_listautoptr>

typealias GtkCellRendererSpin_listautoptr = CPointer<GList>

typealias GtkCellRendererSpin_slistautoptrVar = CPointerVarOf<GtkCellRendererSpin_slistautoptr>

typealias GtkCellRendererSpin_slistautoptr = CPointer<GSList>

typealias GtkCellRendererSpin_queueautoptrVar = CPointerVarOf<GtkCellRendererSpin_queueautoptr>

typealias GtkCellRendererSpin_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererSpinner_autoptrVar = CPointerVarOf<GtkCellRendererSpinner_autoptr>

typealias GtkCellRendererSpinner_autoptr = CPointer<GtkCellRendererSpinner>

typealias GtkCellRendererSpinner_listautoptrVar = CPointerVarOf<GtkCellRendererSpinner_listautoptr>

typealias GtkCellRendererSpinner_listautoptr = CPointer<GList>

typealias GtkCellRendererSpinner_slistautoptrVar = CPointerVarOf<GtkCellRendererSpinner_slistautoptr>

typealias GtkCellRendererSpinner_slistautoptr = CPointer<GSList>

typealias GtkCellRendererSpinner_queueautoptrVar = CPointerVarOf<GtkCellRendererSpinner_queueautoptr>

typealias GtkCellRendererSpinner_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererText_autoptrVar = CPointerVarOf<GtkCellRendererText_autoptr>

typealias GtkCellRendererText_autoptr = CPointer<GtkCellRendererText>

typealias GtkCellRendererText_listautoptrVar = CPointerVarOf<GtkCellRendererText_listautoptr>

typealias GtkCellRendererText_listautoptr = CPointer<GList>

typealias GtkCellRendererText_slistautoptrVar = CPointerVarOf<GtkCellRendererText_slistautoptr>

typealias GtkCellRendererText_slistautoptr = CPointer<GSList>

typealias GtkCellRendererText_queueautoptrVar = CPointerVarOf<GtkCellRendererText_queueautoptr>

typealias GtkCellRendererText_queueautoptr = CPointer<GQueue>

typealias GtkCellRendererToggle_autoptrVar = CPointerVarOf<GtkCellRendererToggle_autoptr>

typealias GtkCellRendererToggle_autoptr = CPointer<GtkCellRendererToggle>

typealias GtkCellRendererToggle_listautoptrVar = CPointerVarOf<GtkCellRendererToggle_listautoptr>

typealias GtkCellRendererToggle_listautoptr = CPointer<GList>

typealias GtkCellRendererToggle_slistautoptrVar = CPointerVarOf<GtkCellRendererToggle_slistautoptr>

typealias GtkCellRendererToggle_slistautoptr = CPointer<GSList>

typealias GtkCellRendererToggle_queueautoptrVar = CPointerVarOf<GtkCellRendererToggle_queueautoptr>

typealias GtkCellRendererToggle_queueautoptr = CPointer<GQueue>

typealias GtkCellView_autoptrVar = CPointerVarOf<GtkCellView_autoptr>

typealias GtkCellView_autoptr = CPointer<GtkCellView>

typealias GtkCellView_listautoptrVar = CPointerVarOf<GtkCellView_listautoptr>

typealias GtkCellView_listautoptr = CPointer<GList>

typealias GtkCellView_slistautoptrVar = CPointerVarOf<GtkCellView_slistautoptr>

typealias GtkCellView_slistautoptr = CPointer<GSList>

typealias GtkCellView_queueautoptrVar = CPointerVarOf<GtkCellView_queueautoptr>

typealias GtkCellView_queueautoptr = CPointer<GQueue>

typealias GtkCheckButton_autoptrVar = CPointerVarOf<GtkCheckButton_autoptr>

typealias GtkCheckButton_autoptr = CPointer<GtkCheckButton>

typealias GtkCheckButton_listautoptrVar = CPointerVarOf<GtkCheckButton_listautoptr>

typealias GtkCheckButton_listautoptr = CPointer<GList>

typealias GtkCheckButton_slistautoptrVar = CPointerVarOf<GtkCheckButton_slistautoptr>

typealias GtkCheckButton_slistautoptr = CPointer<GSList>

typealias GtkCheckButton_queueautoptrVar = CPointerVarOf<GtkCheckButton_queueautoptr>

typealias GtkCheckButton_queueautoptr = CPointer<GQueue>

typealias GtkCheckMenuItem_autoptrVar = CPointerVarOf<GtkCheckMenuItem_autoptr>

typealias GtkCheckMenuItem_autoptr = CPointer<GtkCheckMenuItem>

typealias GtkCheckMenuItem_listautoptrVar = CPointerVarOf<GtkCheckMenuItem_listautoptr>

typealias GtkCheckMenuItem_listautoptr = CPointer<GList>

typealias GtkCheckMenuItem_slistautoptrVar = CPointerVarOf<GtkCheckMenuItem_slistautoptr>

typealias GtkCheckMenuItem_slistautoptr = CPointer<GSList>

typealias GtkCheckMenuItem_queueautoptrVar = CPointerVarOf<GtkCheckMenuItem_queueautoptr>

typealias GtkCheckMenuItem_queueautoptr = CPointer<GQueue>

typealias GtkClipboard_autoptrVar = CPointerVarOf<GtkClipboard_autoptr>

typealias GtkClipboard_autoptr = CPointer<GtkClipboard>

typealias GtkClipboard_listautoptrVar = CPointerVarOf<GtkClipboard_listautoptr>

typealias GtkClipboard_listautoptr = CPointer<GList>

typealias GtkClipboard_slistautoptrVar = CPointerVarOf<GtkClipboard_slistautoptr>

typealias GtkClipboard_slistautoptr = CPointer<GSList>

typealias GtkClipboard_queueautoptrVar = CPointerVarOf<GtkClipboard_queueautoptr>

typealias GtkClipboard_queueautoptr = CPointer<GQueue>

typealias GtkColorButton_autoptrVar = CPointerVarOf<GtkColorButton_autoptr>

typealias GtkColorButton_autoptr = CPointer<GtkColorButton>

typealias GtkColorButton_listautoptrVar = CPointerVarOf<GtkColorButton_listautoptr>

typealias GtkColorButton_listautoptr = CPointer<GList>

typealias GtkColorButton_slistautoptrVar = CPointerVarOf<GtkColorButton_slistautoptr>

typealias GtkColorButton_slistautoptr = CPointer<GSList>

typealias GtkColorButton_queueautoptrVar = CPointerVarOf<GtkColorButton_queueautoptr>

typealias GtkColorButton_queueautoptr = CPointer<GQueue>

typealias GtkColorChooser_autoptrVar = CPointerVarOf<GtkColorChooser_autoptr>

typealias GtkColorChooser_autoptr = CPointer<GtkColorChooser>

typealias GtkColorChooser_listautoptrVar = CPointerVarOf<GtkColorChooser_listautoptr>

typealias GtkColorChooser_listautoptr = CPointer<GList>

typealias GtkColorChooser_slistautoptrVar = CPointerVarOf<GtkColorChooser_slistautoptr>

typealias GtkColorChooser_slistautoptr = CPointer<GSList>

typealias GtkColorChooser_queueautoptrVar = CPointerVarOf<GtkColorChooser_queueautoptr>

typealias GtkColorChooser_queueautoptr = CPointer<GQueue>

typealias GtkColorChooserDialog_autoptrVar = CPointerVarOf<GtkColorChooserDialog_autoptr>

typealias GtkColorChooserDialog_autoptr = CPointer<GtkColorChooserDialog>

typealias GtkColorChooserDialog_listautoptrVar = CPointerVarOf<GtkColorChooserDialog_listautoptr>

typealias GtkColorChooserDialog_listautoptr = CPointer<GList>

typealias GtkColorChooserDialog_slistautoptrVar = CPointerVarOf<GtkColorChooserDialog_slistautoptr>

typealias GtkColorChooserDialog_slistautoptr = CPointer<GSList>

typealias GtkColorChooserDialog_queueautoptrVar = CPointerVarOf<GtkColorChooserDialog_queueautoptr>

typealias GtkColorChooserDialog_queueautoptr = CPointer<GQueue>

typealias GtkColorChooserWidget_autoptrVar = CPointerVarOf<GtkColorChooserWidget_autoptr>

typealias GtkColorChooserWidget_autoptr = CPointer<GtkColorChooserWidget>

typealias GtkColorChooserWidget_listautoptrVar = CPointerVarOf<GtkColorChooserWidget_listautoptr>

typealias GtkColorChooserWidget_listautoptr = CPointer<GList>

typealias GtkColorChooserWidget_slistautoptrVar = CPointerVarOf<GtkColorChooserWidget_slistautoptr>

typealias GtkColorChooserWidget_slistautoptr = CPointer<GSList>

typealias GtkColorChooserWidget_queueautoptrVar = CPointerVarOf<GtkColorChooserWidget_queueautoptr>

typealias GtkColorChooserWidget_queueautoptr = CPointer<GQueue>

typealias GtkComboBox_autoptrVar = CPointerVarOf<GtkComboBox_autoptr>

typealias GtkComboBox_autoptr = CPointer<GtkComboBox>

typealias GtkComboBox_listautoptrVar = CPointerVarOf<GtkComboBox_listautoptr>

typealias GtkComboBox_listautoptr = CPointer<GList>

typealias GtkComboBox_slistautoptrVar = CPointerVarOf<GtkComboBox_slistautoptr>

typealias GtkComboBox_slistautoptr = CPointer<GSList>

typealias GtkComboBox_queueautoptrVar = CPointerVarOf<GtkComboBox_queueautoptr>

typealias GtkComboBox_queueautoptr = CPointer<GQueue>

typealias GtkComboBoxText_autoptrVar = CPointerVarOf<GtkComboBoxText_autoptr>

typealias GtkComboBoxText_autoptr = CPointer<GtkComboBoxText>

typealias GtkComboBoxText_listautoptrVar = CPointerVarOf<GtkComboBoxText_listautoptr>

typealias GtkComboBoxText_listautoptr = CPointer<GList>

typealias GtkComboBoxText_slistautoptrVar = CPointerVarOf<GtkComboBoxText_slistautoptr>

typealias GtkComboBoxText_slistautoptr = CPointer<GSList>

typealias GtkComboBoxText_queueautoptrVar = CPointerVarOf<GtkComboBoxText_queueautoptr>

typealias GtkComboBoxText_queueautoptr = CPointer<GQueue>

typealias GtkCssProvider_autoptrVar = CPointerVarOf<GtkCssProvider_autoptr>

typealias GtkCssProvider_autoptr = CPointer<GtkCssProvider>

typealias GtkCssProvider_listautoptrVar = CPointerVarOf<GtkCssProvider_listautoptr>

typealias GtkCssProvider_listautoptr = CPointer<GList>

typealias GtkCssProvider_slistautoptrVar = CPointerVarOf<GtkCssProvider_slistautoptr>

typealias GtkCssProvider_slistautoptr = CPointer<GSList>

typealias GtkCssProvider_queueautoptrVar = CPointerVarOf<GtkCssProvider_queueautoptr>

typealias GtkCssProvider_queueautoptr = CPointer<GQueue>

typealias GtkDrawingArea_autoptrVar = CPointerVarOf<GtkDrawingArea_autoptr>

typealias GtkDrawingArea_autoptr = CPointer<GtkDrawingArea>

typealias GtkDrawingArea_listautoptrVar = CPointerVarOf<GtkDrawingArea_listautoptr>

typealias GtkDrawingArea_listautoptr = CPointer<GList>

typealias GtkDrawingArea_slistautoptrVar = CPointerVarOf<GtkDrawingArea_slistautoptr>

typealias GtkDrawingArea_slistautoptr = CPointer<GSList>

typealias GtkDrawingArea_queueautoptrVar = CPointerVarOf<GtkDrawingArea_queueautoptr>

typealias GtkDrawingArea_queueautoptr = CPointer<GQueue>

typealias GtkEditable_autoptrVar = CPointerVarOf<GtkEditable_autoptr>

typealias GtkEditable_autoptr = CPointer<GtkEditable>

typealias GtkEditable_listautoptrVar = CPointerVarOf<GtkEditable_listautoptr>

typealias GtkEditable_listautoptr = CPointer<GList>

typealias GtkEditable_slistautoptrVar = CPointerVarOf<GtkEditable_slistautoptr>

typealias GtkEditable_slistautoptr = CPointer<GSList>

typealias GtkEditable_queueautoptrVar = CPointerVarOf<GtkEditable_queueautoptr>

typealias GtkEditable_queueautoptr = CPointer<GQueue>

typealias GtkEntry_autoptrVar = CPointerVarOf<GtkEntry_autoptr>

typealias GtkEntry_autoptr = CPointer<GtkEntry>

typealias GtkEntry_listautoptrVar = CPointerVarOf<GtkEntry_listautoptr>

typealias GtkEntry_listautoptr = CPointer<GList>

typealias GtkEntry_slistautoptrVar = CPointerVarOf<GtkEntry_slistautoptr>

typealias GtkEntry_slistautoptr = CPointer<GSList>

typealias GtkEntry_queueautoptrVar = CPointerVarOf<GtkEntry_queueautoptr>

typealias GtkEntry_queueautoptr = CPointer<GQueue>

typealias GtkEntryBuffer_autoptrVar = CPointerVarOf<GtkEntryBuffer_autoptr>

typealias GtkEntryBuffer_autoptr = CPointer<GtkEntryBuffer>

typealias GtkEntryBuffer_listautoptrVar = CPointerVarOf<GtkEntryBuffer_listautoptr>

typealias GtkEntryBuffer_listautoptr = CPointer<GList>

typealias GtkEntryBuffer_slistautoptrVar = CPointerVarOf<GtkEntryBuffer_slistautoptr>

typealias GtkEntryBuffer_slistautoptr = CPointer<GSList>

typealias GtkEntryBuffer_queueautoptrVar = CPointerVarOf<GtkEntryBuffer_queueautoptr>

typealias GtkEntryBuffer_queueautoptr = CPointer<GQueue>

typealias GtkEntryCompletion_autoptrVar = CPointerVarOf<GtkEntryCompletion_autoptr>

typealias GtkEntryCompletion_autoptr = CPointer<GtkEntryCompletion>

typealias GtkEntryCompletion_listautoptrVar = CPointerVarOf<GtkEntryCompletion_listautoptr>

typealias GtkEntryCompletion_listautoptr = CPointer<GList>

typealias GtkEntryCompletion_slistautoptrVar = CPointerVarOf<GtkEntryCompletion_slistautoptr>

typealias GtkEntryCompletion_slistautoptr = CPointer<GSList>

typealias GtkEntryCompletion_queueautoptrVar = CPointerVarOf<GtkEntryCompletion_queueautoptr>

typealias GtkEntryCompletion_queueautoptr = CPointer<GQueue>

typealias GtkEventBox_autoptrVar = CPointerVarOf<GtkEventBox_autoptr>

typealias GtkEventBox_autoptr = CPointer<GtkEventBox>

typealias GtkEventBox_listautoptrVar = CPointerVarOf<GtkEventBox_listautoptr>

typealias GtkEventBox_listautoptr = CPointer<GList>

typealias GtkEventBox_slistautoptrVar = CPointerVarOf<GtkEventBox_slistautoptr>

typealias GtkEventBox_slistautoptr = CPointer<GSList>

typealias GtkEventBox_queueautoptrVar = CPointerVarOf<GtkEventBox_queueautoptr>

typealias GtkEventBox_queueautoptr = CPointer<GQueue>

typealias GtkEventController_autoptrVar = CPointerVarOf<GtkEventController_autoptr>

typealias GtkEventController_autoptr = CPointer<GtkEventController>

typealias GtkEventController_listautoptrVar = CPointerVarOf<GtkEventController_listautoptr>

typealias GtkEventController_listautoptr = CPointer<GList>

typealias GtkEventController_slistautoptrVar = CPointerVarOf<GtkEventController_slistautoptr>

typealias GtkEventController_slistautoptr = CPointer<GSList>

typealias GtkEventController_queueautoptrVar = CPointerVarOf<GtkEventController_queueautoptr>

typealias GtkEventController_queueautoptr = CPointer<GQueue>

typealias GtkExpander_autoptrVar = CPointerVarOf<GtkExpander_autoptr>

typealias GtkExpander_autoptr = CPointer<GtkExpander>

typealias GtkExpander_listautoptrVar = CPointerVarOf<GtkExpander_listautoptr>

typealias GtkExpander_listautoptr = CPointer<GList>

typealias GtkExpander_slistautoptrVar = CPointerVarOf<GtkExpander_slistautoptr>

typealias GtkExpander_slistautoptr = CPointer<GSList>

typealias GtkExpander_queueautoptrVar = CPointerVarOf<GtkExpander_queueautoptr>

typealias GtkExpander_queueautoptr = CPointer<GQueue>

typealias GtkFileChooserButton_autoptrVar = CPointerVarOf<GtkFileChooserButton_autoptr>

typealias GtkFileChooserButton_autoptr = CPointer<GtkFileChooserButton>

typealias GtkFileChooserButton_listautoptrVar = CPointerVarOf<GtkFileChooserButton_listautoptr>

typealias GtkFileChooserButton_listautoptr = CPointer<GList>

typealias GtkFileChooserButton_slistautoptrVar = CPointerVarOf<GtkFileChooserButton_slistautoptr>

typealias GtkFileChooserButton_slistautoptr = CPointer<GSList>

typealias GtkFileChooserButton_queueautoptrVar = CPointerVarOf<GtkFileChooserButton_queueautoptr>

typealias GtkFileChooserButton_queueautoptr = CPointer<GQueue>

typealias GtkFileChooserDialog_autoptrVar = CPointerVarOf<GtkFileChooserDialog_autoptr>

typealias GtkFileChooserDialog_autoptr = CPointer<GtkFileChooserDialog>

typealias GtkFileChooserDialog_listautoptrVar = CPointerVarOf<GtkFileChooserDialog_listautoptr>

typealias GtkFileChooserDialog_listautoptr = CPointer<GList>

typealias GtkFileChooserDialog_slistautoptrVar = CPointerVarOf<GtkFileChooserDialog_slistautoptr>

typealias GtkFileChooserDialog_slistautoptr = CPointer<GSList>

typealias GtkFileChooserDialog_queueautoptrVar = CPointerVarOf<GtkFileChooserDialog_queueautoptr>

typealias GtkFileChooserDialog_queueautoptr = CPointer<GQueue>

typealias GtkFileChooserWidget_autoptrVar = CPointerVarOf<GtkFileChooserWidget_autoptr>

typealias GtkFileChooserWidget_autoptr = CPointer<GtkFileChooserWidget>

typealias GtkFileChooserWidget_listautoptrVar = CPointerVarOf<GtkFileChooserWidget_listautoptr>

typealias GtkFileChooserWidget_listautoptr = CPointer<GList>

typealias GtkFileChooserWidget_slistautoptrVar = CPointerVarOf<GtkFileChooserWidget_slistautoptr>

typealias GtkFileChooserWidget_slistautoptr = CPointer<GSList>

typealias GtkFileChooserWidget_queueautoptrVar = CPointerVarOf<GtkFileChooserWidget_queueautoptr>

typealias GtkFileChooserWidget_queueautoptr = CPointer<GQueue>

typealias GtkFileFilter_autoptrVar = CPointerVarOf<GtkFileFilter_autoptr>

typealias GtkFileFilter_autoptr = CPointer<GtkFileFilter>

typealias GtkFileFilter_listautoptrVar = CPointerVarOf<GtkFileFilter_listautoptr>

typealias GtkFileFilter_listautoptr = CPointer<GList>

typealias GtkFileFilter_slistautoptrVar = CPointerVarOf<GtkFileFilter_slistautoptr>

typealias GtkFileFilter_slistautoptr = CPointer<GSList>

typealias GtkFileFilter_queueautoptrVar = CPointerVarOf<GtkFileFilter_queueautoptr>

typealias GtkFileFilter_queueautoptr = CPointer<GQueue>

typealias GtkFixed_autoptrVar = CPointerVarOf<GtkFixed_autoptr>

typealias GtkFixed_autoptr = CPointer<GtkFixed>

typealias GtkFixed_listautoptrVar = CPointerVarOf<GtkFixed_listautoptr>

typealias GtkFixed_listautoptr = CPointer<GList>

typealias GtkFixed_slistautoptrVar = CPointerVarOf<GtkFixed_slistautoptr>

typealias GtkFixed_slistautoptr = CPointer<GSList>

typealias GtkFixed_queueautoptrVar = CPointerVarOf<GtkFixed_queueautoptr>

typealias GtkFixed_queueautoptr = CPointer<GQueue>

typealias GtkFlowBox_autoptrVar = CPointerVarOf<GtkFlowBox_autoptr>

typealias GtkFlowBox_autoptr = CPointer<GtkFlowBox>

typealias GtkFlowBox_listautoptrVar = CPointerVarOf<GtkFlowBox_listautoptr>

typealias GtkFlowBox_listautoptr = CPointer<GList>

typealias GtkFlowBox_slistautoptrVar = CPointerVarOf<GtkFlowBox_slistautoptr>

typealias GtkFlowBox_slistautoptr = CPointer<GSList>

typealias GtkFlowBox_queueautoptrVar = CPointerVarOf<GtkFlowBox_queueautoptr>

typealias GtkFlowBox_queueautoptr = CPointer<GQueue>

typealias GtkFlowBoxChild_autoptrVar = CPointerVarOf<GtkFlowBoxChild_autoptr>

typealias GtkFlowBoxChild_autoptr = CPointer<GtkFlowBoxChild>

typealias GtkFlowBoxChild_listautoptrVar = CPointerVarOf<GtkFlowBoxChild_listautoptr>

typealias GtkFlowBoxChild_listautoptr = CPointer<GList>

typealias GtkFlowBoxChild_slistautoptrVar = CPointerVarOf<GtkFlowBoxChild_slistautoptr>

typealias GtkFlowBoxChild_slistautoptr = CPointer<GSList>

typealias GtkFlowBoxChild_queueautoptrVar = CPointerVarOf<GtkFlowBoxChild_queueautoptr>

typealias GtkFlowBoxChild_queueautoptr = CPointer<GQueue>

typealias GtkFontButton_autoptrVar = CPointerVarOf<GtkFontButton_autoptr>

typealias GtkFontButton_autoptr = CPointer<GtkFontButton>

typealias GtkFontButton_listautoptrVar = CPointerVarOf<GtkFontButton_listautoptr>

typealias GtkFontButton_listautoptr = CPointer<GList>

typealias GtkFontButton_slistautoptrVar = CPointerVarOf<GtkFontButton_slistautoptr>

typealias GtkFontButton_slistautoptr = CPointer<GSList>

typealias GtkFontButton_queueautoptrVar = CPointerVarOf<GtkFontButton_queueautoptr>

typealias GtkFontButton_queueautoptr = CPointer<GQueue>

typealias GtkFontChooser_autoptrVar = CPointerVarOf<GtkFontChooser_autoptr>

typealias GtkFontChooser_autoptr = CPointer<GtkFontChooser>

typealias GtkFontChooser_listautoptrVar = CPointerVarOf<GtkFontChooser_listautoptr>

typealias GtkFontChooser_listautoptr = CPointer<GList>

typealias GtkFontChooser_slistautoptrVar = CPointerVarOf<GtkFontChooser_slistautoptr>

typealias GtkFontChooser_slistautoptr = CPointer<GSList>

typealias GtkFontChooser_queueautoptrVar = CPointerVarOf<GtkFontChooser_queueautoptr>

typealias GtkFontChooser_queueautoptr = CPointer<GQueue>

typealias GtkFontChooserDialog_autoptrVar = CPointerVarOf<GtkFontChooserDialog_autoptr>

typealias GtkFontChooserDialog_autoptr = CPointer<GtkFontChooserDialog>

typealias GtkFontChooserDialog_listautoptrVar = CPointerVarOf<GtkFontChooserDialog_listautoptr>

typealias GtkFontChooserDialog_listautoptr = CPointer<GList>

typealias GtkFontChooserDialog_slistautoptrVar = CPointerVarOf<GtkFontChooserDialog_slistautoptr>

typealias GtkFontChooserDialog_slistautoptr = CPointer<GSList>

typealias GtkFontChooserDialog_queueautoptrVar = CPointerVarOf<GtkFontChooserDialog_queueautoptr>

typealias GtkFontChooserDialog_queueautoptr = CPointer<GQueue>

typealias GtkFontChooserWidget_autoptrVar = CPointerVarOf<GtkFontChooserWidget_autoptr>

typealias GtkFontChooserWidget_autoptr = CPointer<GtkFontChooserWidget>

typealias GtkFontChooserWidget_listautoptrVar = CPointerVarOf<GtkFontChooserWidget_listautoptr>

typealias GtkFontChooserWidget_listautoptr = CPointer<GList>

typealias GtkFontChooserWidget_slistautoptrVar = CPointerVarOf<GtkFontChooserWidget_slistautoptr>

typealias GtkFontChooserWidget_slistautoptr = CPointer<GSList>

typealias GtkFontChooserWidget_queueautoptrVar = CPointerVarOf<GtkFontChooserWidget_queueautoptr>

typealias GtkFontChooserWidget_queueautoptr = CPointer<GQueue>

typealias GtkFrame_autoptrVar = CPointerVarOf<GtkFrame_autoptr>

typealias GtkFrame_autoptr = CPointer<GtkFrame>

typealias GtkFrame_listautoptrVar = CPointerVarOf<GtkFrame_listautoptr>

typealias GtkFrame_listautoptr = CPointer<GList>

typealias GtkFrame_slistautoptrVar = CPointerVarOf<GtkFrame_slistautoptr>

typealias GtkFrame_slistautoptr = CPointer<GSList>

typealias GtkFrame_queueautoptrVar = CPointerVarOf<GtkFrame_queueautoptr>

typealias GtkFrame_queueautoptr = CPointer<GQueue>

typealias GtkGLArea_autoptrVar = CPointerVarOf<GtkGLArea_autoptr>

typealias GtkGLArea_autoptr = CPointer<GtkGLArea>

typealias GtkGLArea_listautoptrVar = CPointerVarOf<GtkGLArea_listautoptr>

typealias GtkGLArea_listautoptr = CPointer<GList>

typealias GtkGLArea_slistautoptrVar = CPointerVarOf<GtkGLArea_slistautoptr>

typealias GtkGLArea_slistautoptr = CPointer<GSList>

typealias GtkGLArea_queueautoptrVar = CPointerVarOf<GtkGLArea_queueautoptr>

typealias GtkGLArea_queueautoptr = CPointer<GQueue>

typealias GtkGesture_autoptrVar = CPointerVarOf<GtkGesture_autoptr>

typealias GtkGesture_autoptr = CPointer<GtkGesture>

typealias GtkGesture_listautoptrVar = CPointerVarOf<GtkGesture_listautoptr>

typealias GtkGesture_listautoptr = CPointer<GList>

typealias GtkGesture_slistautoptrVar = CPointerVarOf<GtkGesture_slistautoptr>

typealias GtkGesture_slistautoptr = CPointer<GSList>

typealias GtkGesture_queueautoptrVar = CPointerVarOf<GtkGesture_queueautoptr>

typealias GtkGesture_queueautoptr = CPointer<GQueue>

typealias GtkGestureDrag_autoptrVar = CPointerVarOf<GtkGestureDrag_autoptr>

typealias GtkGestureDrag_autoptr = CPointer<GtkGestureDrag>

typealias GtkGestureDrag_listautoptrVar = CPointerVarOf<GtkGestureDrag_listautoptr>

typealias GtkGestureDrag_listautoptr = CPointer<GList>

typealias GtkGestureDrag_slistautoptrVar = CPointerVarOf<GtkGestureDrag_slistautoptr>

typealias GtkGestureDrag_slistautoptr = CPointer<GSList>

typealias GtkGestureDrag_queueautoptrVar = CPointerVarOf<GtkGestureDrag_queueautoptr>

typealias GtkGestureDrag_queueautoptr = CPointer<GQueue>

typealias GtkGestureLongPress_autoptrVar = CPointerVarOf<GtkGestureLongPress_autoptr>

typealias GtkGestureLongPress_autoptr = CPointer<GtkGestureLongPress>

typealias GtkGestureLongPress_listautoptrVar = CPointerVarOf<GtkGestureLongPress_listautoptr>

typealias GtkGestureLongPress_listautoptr = CPointer<GList>

typealias GtkGestureLongPress_slistautoptrVar = CPointerVarOf<GtkGestureLongPress_slistautoptr>

typealias GtkGestureLongPress_slistautoptr = CPointer<GSList>

typealias GtkGestureLongPress_queueautoptrVar = CPointerVarOf<GtkGestureLongPress_queueautoptr>

typealias GtkGestureLongPress_queueautoptr = CPointer<GQueue>

typealias GtkGestureMultiPress_autoptrVar = CPointerVarOf<GtkGestureMultiPress_autoptr>

typealias GtkGestureMultiPress_autoptr = CPointer<GtkGestureMultiPress>

typealias GtkGestureMultiPress_listautoptrVar = CPointerVarOf<GtkGestureMultiPress_listautoptr>

typealias GtkGestureMultiPress_listautoptr = CPointer<GList>

typealias GtkGestureMultiPress_slistautoptrVar = CPointerVarOf<GtkGestureMultiPress_slistautoptr>

typealias GtkGestureMultiPress_slistautoptr = CPointer<GSList>

typealias GtkGestureMultiPress_queueautoptrVar = CPointerVarOf<GtkGestureMultiPress_queueautoptr>

typealias GtkGestureMultiPress_queueautoptr = CPointer<GQueue>

typealias GtkGesturePan_autoptrVar = CPointerVarOf<GtkGesturePan_autoptr>

typealias GtkGesturePan_autoptr = CPointer<GtkGesturePan>

typealias GtkGesturePan_listautoptrVar = CPointerVarOf<GtkGesturePan_listautoptr>

typealias GtkGesturePan_listautoptr = CPointer<GList>

typealias GtkGesturePan_slistautoptrVar = CPointerVarOf<GtkGesturePan_slistautoptr>

typealias GtkGesturePan_slistautoptr = CPointer<GSList>

typealias GtkGesturePan_queueautoptrVar = CPointerVarOf<GtkGesturePan_queueautoptr>

typealias GtkGesturePan_queueautoptr = CPointer<GQueue>

typealias GtkGestureRotate_autoptrVar = CPointerVarOf<GtkGestureRotate_autoptr>

typealias GtkGestureRotate_autoptr = CPointer<GtkGestureRotate>

typealias GtkGestureRotate_listautoptrVar = CPointerVarOf<GtkGestureRotate_listautoptr>

typealias GtkGestureRotate_listautoptr = CPointer<GList>

typealias GtkGestureRotate_slistautoptrVar = CPointerVarOf<GtkGestureRotate_slistautoptr>

typealias GtkGestureRotate_slistautoptr = CPointer<GSList>

typealias GtkGestureRotate_queueautoptrVar = CPointerVarOf<GtkGestureRotate_queueautoptr>

typealias GtkGestureRotate_queueautoptr = CPointer<GQueue>

typealias GtkGestureSingle_autoptrVar = CPointerVarOf<GtkGestureSingle_autoptr>

typealias GtkGestureSingle_autoptr = CPointer<GtkGestureSingle>

typealias GtkGestureSingle_listautoptrVar = CPointerVarOf<GtkGestureSingle_listautoptr>

typealias GtkGestureSingle_listautoptr = CPointer<GList>

typealias GtkGestureSingle_slistautoptrVar = CPointerVarOf<GtkGestureSingle_slistautoptr>

typealias GtkGestureSingle_slistautoptr = CPointer<GSList>

typealias GtkGestureSingle_queueautoptrVar = CPointerVarOf<GtkGestureSingle_queueautoptr>

typealias GtkGestureSingle_queueautoptr = CPointer<GQueue>

typealias GtkGestureSwipe_autoptrVar = CPointerVarOf<GtkGestureSwipe_autoptr>

typealias GtkGestureSwipe_autoptr = CPointer<GtkGestureSwipe>

typealias GtkGestureSwipe_listautoptrVar = CPointerVarOf<GtkGestureSwipe_listautoptr>

typealias GtkGestureSwipe_listautoptr = CPointer<GList>

typealias GtkGestureSwipe_slistautoptrVar = CPointerVarOf<GtkGestureSwipe_slistautoptr>

typealias GtkGestureSwipe_slistautoptr = CPointer<GSList>

typealias GtkGestureSwipe_queueautoptrVar = CPointerVarOf<GtkGestureSwipe_queueautoptr>

typealias GtkGestureSwipe_queueautoptr = CPointer<GQueue>

typealias GtkGestureZoom_autoptrVar = CPointerVarOf<GtkGestureZoom_autoptr>

typealias GtkGestureZoom_autoptr = CPointer<GtkGestureZoom>

typealias GtkGestureZoom_listautoptrVar = CPointerVarOf<GtkGestureZoom_listautoptr>

typealias GtkGestureZoom_listautoptr = CPointer<GList>

typealias GtkGestureZoom_slistautoptrVar = CPointerVarOf<GtkGestureZoom_slistautoptr>

typealias GtkGestureZoom_slistautoptr = CPointer<GSList>

typealias GtkGestureZoom_queueautoptrVar = CPointerVarOf<GtkGestureZoom_queueautoptr>

typealias GtkGestureZoom_queueautoptr = CPointer<GQueue>

typealias GtkGrid_autoptrVar = CPointerVarOf<GtkGrid_autoptr>

typealias GtkGrid_autoptr = CPointer<GtkGrid>

typealias GtkGrid_listautoptrVar = CPointerVarOf<GtkGrid_listautoptr>

typealias GtkGrid_listautoptr = CPointer<GList>

typealias GtkGrid_slistautoptrVar = CPointerVarOf<GtkGrid_slistautoptr>

typealias GtkGrid_slistautoptr = CPointer<GSList>

typealias GtkGrid_queueautoptrVar = CPointerVarOf<GtkGrid_queueautoptr>

typealias GtkGrid_queueautoptr = CPointer<GQueue>

typealias GtkHeaderBar_autoptrVar = CPointerVarOf<GtkHeaderBar_autoptr>

typealias GtkHeaderBar_autoptr = CPointer<GtkHeaderBar>

typealias GtkHeaderBar_listautoptrVar = CPointerVarOf<GtkHeaderBar_listautoptr>

typealias GtkHeaderBar_listautoptr = CPointer<GList>

typealias GtkHeaderBar_slistautoptrVar = CPointerVarOf<GtkHeaderBar_slistautoptr>

typealias GtkHeaderBar_slistautoptr = CPointer<GSList>

typealias GtkHeaderBar_queueautoptrVar = CPointerVarOf<GtkHeaderBar_queueautoptr>

typealias GtkHeaderBar_queueautoptr = CPointer<GQueue>

typealias GtkIMContext_autoptrVar = CPointerVarOf<GtkIMContext_autoptr>

typealias GtkIMContext_autoptr = CPointer<GtkIMContext>

typealias GtkIMContext_listautoptrVar = CPointerVarOf<GtkIMContext_listautoptr>

typealias GtkIMContext_listautoptr = CPointer<GList>

typealias GtkIMContext_slistautoptrVar = CPointerVarOf<GtkIMContext_slistautoptr>

typealias GtkIMContext_slistautoptr = CPointer<GSList>

typealias GtkIMContext_queueautoptrVar = CPointerVarOf<GtkIMContext_queueautoptr>

typealias GtkIMContext_queueautoptr = CPointer<GQueue>

typealias GtkIMContextSimple_autoptrVar = CPointerVarOf<GtkIMContextSimple_autoptr>

typealias GtkIMContextSimple_autoptr = CPointer<GtkIMContextSimple>

typealias GtkIMContextSimple_listautoptrVar = CPointerVarOf<GtkIMContextSimple_listautoptr>

typealias GtkIMContextSimple_listautoptr = CPointer<GList>

typealias GtkIMContextSimple_slistautoptrVar = CPointerVarOf<GtkIMContextSimple_slistautoptr>

typealias GtkIMContextSimple_slistautoptr = CPointer<GSList>

typealias GtkIMContextSimple_queueautoptrVar = CPointerVarOf<GtkIMContextSimple_queueautoptr>

typealias GtkIMContextSimple_queueautoptr = CPointer<GQueue>

typealias GtkIMMulticontext_autoptrVar = CPointerVarOf<GtkIMMulticontext_autoptr>

typealias GtkIMMulticontext_autoptr = CPointer<GtkIMMulticontext>

typealias GtkIMMulticontext_listautoptrVar = CPointerVarOf<GtkIMMulticontext_listautoptr>

typealias GtkIMMulticontext_listautoptr = CPointer<GList>

typealias GtkIMMulticontext_slistautoptrVar = CPointerVarOf<GtkIMMulticontext_slistautoptr>

typealias GtkIMMulticontext_slistautoptr = CPointer<GSList>

typealias GtkIMMulticontext_queueautoptrVar = CPointerVarOf<GtkIMMulticontext_queueautoptr>

typealias GtkIMMulticontext_queueautoptr = CPointer<GQueue>

typealias GtkIconInfo_autoptrVar = CPointerVarOf<GtkIconInfo_autoptr>

typealias GtkIconInfo_autoptr = CPointer<GtkIconInfo>

typealias GtkIconInfo_listautoptrVar = CPointerVarOf<GtkIconInfo_listautoptr>

typealias GtkIconInfo_listautoptr = CPointer<GList>

typealias GtkIconInfo_slistautoptrVar = CPointerVarOf<GtkIconInfo_slistautoptr>

typealias GtkIconInfo_slistautoptr = CPointer<GSList>

typealias GtkIconInfo_queueautoptrVar = CPointerVarOf<GtkIconInfo_queueautoptr>

typealias GtkIconInfo_queueautoptr = CPointer<GQueue>

typealias GtkIconTheme_autoptrVar = CPointerVarOf<GtkIconTheme_autoptr>

typealias GtkIconTheme_autoptr = CPointer<GtkIconTheme>

typealias GtkIconTheme_listautoptrVar = CPointerVarOf<GtkIconTheme_listautoptr>

typealias GtkIconTheme_listautoptr = CPointer<GList>

typealias GtkIconTheme_slistautoptrVar = CPointerVarOf<GtkIconTheme_slistautoptr>

typealias GtkIconTheme_slistautoptr = CPointer<GSList>

typealias GtkIconTheme_queueautoptrVar = CPointerVarOf<GtkIconTheme_queueautoptr>

typealias GtkIconTheme_queueautoptr = CPointer<GQueue>

typealias GtkIconView_autoptrVar = CPointerVarOf<GtkIconView_autoptr>

typealias GtkIconView_autoptr = CPointer<GtkIconView>

typealias GtkIconView_listautoptrVar = CPointerVarOf<GtkIconView_listautoptr>

typealias GtkIconView_listautoptr = CPointer<GList>

typealias GtkIconView_slistautoptrVar = CPointerVarOf<GtkIconView_slistautoptr>

typealias GtkIconView_slistautoptr = CPointer<GSList>

typealias GtkIconView_queueautoptrVar = CPointerVarOf<GtkIconView_queueautoptr>

typealias GtkIconView_queueautoptr = CPointer<GQueue>

typealias GtkImage_autoptrVar = CPointerVarOf<GtkImage_autoptr>

typealias GtkImage_autoptr = CPointer<GtkImage>

typealias GtkImage_listautoptrVar = CPointerVarOf<GtkImage_listautoptr>

typealias GtkImage_listautoptr = CPointer<GList>

typealias GtkImage_slistautoptrVar = CPointerVarOf<GtkImage_slistautoptr>

typealias GtkImage_slistautoptr = CPointer<GSList>

typealias GtkImage_queueautoptrVar = CPointerVarOf<GtkImage_queueautoptr>

typealias GtkImage_queueautoptr = CPointer<GQueue>

typealias GtkInfoBar_autoptrVar = CPointerVarOf<GtkInfoBar_autoptr>

typealias GtkInfoBar_autoptr = CPointer<GtkInfoBar>

typealias GtkInfoBar_listautoptrVar = CPointerVarOf<GtkInfoBar_listautoptr>

typealias GtkInfoBar_listautoptr = CPointer<GList>

typealias GtkInfoBar_slistautoptrVar = CPointerVarOf<GtkInfoBar_slistautoptr>

typealias GtkInfoBar_slistautoptr = CPointer<GSList>

typealias GtkInfoBar_queueautoptrVar = CPointerVarOf<GtkInfoBar_queueautoptr>

typealias GtkInfoBar_queueautoptr = CPointer<GQueue>

typealias GtkInvisible_autoptrVar = CPointerVarOf<GtkInvisible_autoptr>

typealias GtkInvisible_autoptr = CPointer<GtkInvisible>

typealias GtkInvisible_listautoptrVar = CPointerVarOf<GtkInvisible_listautoptr>

typealias GtkInvisible_listautoptr = CPointer<GList>

typealias GtkInvisible_slistautoptrVar = CPointerVarOf<GtkInvisible_slistautoptr>

typealias GtkInvisible_slistautoptr = CPointer<GSList>

typealias GtkInvisible_queueautoptrVar = CPointerVarOf<GtkInvisible_queueautoptr>

typealias GtkInvisible_queueautoptr = CPointer<GQueue>

typealias GtkLayout_autoptrVar = CPointerVarOf<GtkLayout_autoptr>

typealias GtkLayout_autoptr = CPointer<GtkLayout>

typealias GtkLayout_listautoptrVar = CPointerVarOf<GtkLayout_listautoptr>

typealias GtkLayout_listautoptr = CPointer<GList>

typealias GtkLayout_slistautoptrVar = CPointerVarOf<GtkLayout_slistautoptr>

typealias GtkLayout_slistautoptr = CPointer<GSList>

typealias GtkLayout_queueautoptrVar = CPointerVarOf<GtkLayout_queueautoptr>

typealias GtkLayout_queueautoptr = CPointer<GQueue>

typealias GtkLevelBar_autoptrVar = CPointerVarOf<GtkLevelBar_autoptr>

typealias GtkLevelBar_autoptr = CPointer<GtkLevelBar>

typealias GtkLevelBar_listautoptrVar = CPointerVarOf<GtkLevelBar_listautoptr>

typealias GtkLevelBar_listautoptr = CPointer<GList>

typealias GtkLevelBar_slistautoptrVar = CPointerVarOf<GtkLevelBar_slistautoptr>

typealias GtkLevelBar_slistautoptr = CPointer<GSList>

typealias GtkLevelBar_queueautoptrVar = CPointerVarOf<GtkLevelBar_queueautoptr>

typealias GtkLevelBar_queueautoptr = CPointer<GQueue>

typealias GtkLinkButton_autoptrVar = CPointerVarOf<GtkLinkButton_autoptr>

typealias GtkLinkButton_autoptr = CPointer<GtkLinkButton>

typealias GtkLinkButton_listautoptrVar = CPointerVarOf<GtkLinkButton_listautoptr>

typealias GtkLinkButton_listautoptr = CPointer<GList>

typealias GtkLinkButton_slistautoptrVar = CPointerVarOf<GtkLinkButton_slistautoptr>

typealias GtkLinkButton_slistautoptr = CPointer<GSList>

typealias GtkLinkButton_queueautoptrVar = CPointerVarOf<GtkLinkButton_queueautoptr>

typealias GtkLinkButton_queueautoptr = CPointer<GQueue>

typealias GtkListStore_autoptrVar = CPointerVarOf<GtkListStore_autoptr>

typealias GtkListStore_autoptr = CPointer<GtkListStore>

typealias GtkListStore_listautoptrVar = CPointerVarOf<GtkListStore_listautoptr>

typealias GtkListStore_listautoptr = CPointer<GList>

typealias GtkListStore_slistautoptrVar = CPointerVarOf<GtkListStore_slistautoptr>

typealias GtkListStore_slistautoptr = CPointer<GSList>

typealias GtkListStore_queueautoptrVar = CPointerVarOf<GtkListStore_queueautoptr>

typealias GtkListStore_queueautoptr = CPointer<GQueue>

typealias GtkLockButton_autoptrVar = CPointerVarOf<GtkLockButton_autoptr>

typealias GtkLockButton_autoptr = CPointer<GtkLockButton>

typealias GtkLockButton_listautoptrVar = CPointerVarOf<GtkLockButton_listautoptr>

typealias GtkLockButton_listautoptr = CPointer<GList>

typealias GtkLockButton_slistautoptrVar = CPointerVarOf<GtkLockButton_slistautoptr>

typealias GtkLockButton_slistautoptr = CPointer<GSList>

typealias GtkLockButton_queueautoptrVar = CPointerVarOf<GtkLockButton_queueautoptr>

typealias GtkLockButton_queueautoptr = CPointer<GQueue>

typealias GtkMenuBar_autoptrVar = CPointerVarOf<GtkMenuBar_autoptr>

typealias GtkMenuBar_autoptr = CPointer<GtkMenuBar>

typealias GtkMenuBar_listautoptrVar = CPointerVarOf<GtkMenuBar_listautoptr>

typealias GtkMenuBar_listautoptr = CPointer<GList>

typealias GtkMenuBar_slistautoptrVar = CPointerVarOf<GtkMenuBar_slistautoptr>

typealias GtkMenuBar_slistautoptr = CPointer<GSList>

typealias GtkMenuBar_queueautoptrVar = CPointerVarOf<GtkMenuBar_queueautoptr>

typealias GtkMenuBar_queueautoptr = CPointer<GQueue>

typealias GtkMenuButton_autoptrVar = CPointerVarOf<GtkMenuButton_autoptr>

typealias GtkMenuButton_autoptr = CPointer<GtkMenuButton>

typealias GtkMenuButton_listautoptrVar = CPointerVarOf<GtkMenuButton_listautoptr>

typealias GtkMenuButton_listautoptr = CPointer<GList>

typealias GtkMenuButton_slistautoptrVar = CPointerVarOf<GtkMenuButton_slistautoptr>

typealias GtkMenuButton_slistautoptr = CPointer<GSList>

typealias GtkMenuButton_queueautoptrVar = CPointerVarOf<GtkMenuButton_queueautoptr>

typealias GtkMenuButton_queueautoptr = CPointer<GQueue>

typealias GtkMenuItem_autoptrVar = CPointerVarOf<GtkMenuItem_autoptr>

typealias GtkMenuItem_autoptr = CPointer<GtkMenuItem>

typealias GtkMenuItem_listautoptrVar = CPointerVarOf<GtkMenuItem_listautoptr>

typealias GtkMenuItem_listautoptr = CPointer<GList>

typealias GtkMenuItem_slistautoptrVar = CPointerVarOf<GtkMenuItem_slistautoptr>

typealias GtkMenuItem_slistautoptr = CPointer<GSList>

typealias GtkMenuItem_queueautoptrVar = CPointerVarOf<GtkMenuItem_queueautoptr>

typealias GtkMenuItem_queueautoptr = CPointer<GQueue>

typealias GtkMenuToolButton_autoptrVar = CPointerVarOf<GtkMenuToolButton_autoptr>

typealias GtkMenuToolButton_autoptr = CPointer<GtkMenuToolButton>

typealias GtkMenuToolButton_listautoptrVar = CPointerVarOf<GtkMenuToolButton_listautoptr>

typealias GtkMenuToolButton_listautoptr = CPointer<GList>

typealias GtkMenuToolButton_slistautoptrVar = CPointerVarOf<GtkMenuToolButton_slistautoptr>

typealias GtkMenuToolButton_slistautoptr = CPointer<GSList>

typealias GtkMenuToolButton_queueautoptrVar = CPointerVarOf<GtkMenuToolButton_queueautoptr>

typealias GtkMenuToolButton_queueautoptr = CPointer<GQueue>

typealias GtkMessageDialog_autoptrVar = CPointerVarOf<GtkMessageDialog_autoptr>

typealias GtkMessageDialog_autoptr = CPointer<GtkMessageDialog>

typealias GtkMessageDialog_listautoptrVar = CPointerVarOf<GtkMessageDialog_listautoptr>

typealias GtkMessageDialog_listautoptr = CPointer<GList>

typealias GtkMessageDialog_slistautoptrVar = CPointerVarOf<GtkMessageDialog_slistautoptr>

typealias GtkMessageDialog_slistautoptr = CPointer<GSList>

typealias GtkMessageDialog_queueautoptrVar = CPointerVarOf<GtkMessageDialog_queueautoptr>

typealias GtkMessageDialog_queueautoptr = CPointer<GQueue>

typealias GtkMountOperation_autoptrVar = CPointerVarOf<GtkMountOperation_autoptr>

typealias GtkMountOperation_autoptr = CPointer<GtkMountOperation>

typealias GtkMountOperation_listautoptrVar = CPointerVarOf<GtkMountOperation_listautoptr>

typealias GtkMountOperation_listautoptr = CPointer<GList>

typealias GtkMountOperation_slistautoptrVar = CPointerVarOf<GtkMountOperation_slistautoptr>

typealias GtkMountOperation_slistautoptr = CPointer<GSList>

typealias GtkMountOperation_queueautoptrVar = CPointerVarOf<GtkMountOperation_queueautoptr>

typealias GtkMountOperation_queueautoptr = CPointer<GQueue>

typealias GtkNotebook_autoptrVar = CPointerVarOf<GtkNotebook_autoptr>

typealias GtkNotebook_autoptr = CPointer<GtkNotebook>

typealias GtkNotebook_listautoptrVar = CPointerVarOf<GtkNotebook_listautoptr>

typealias GtkNotebook_listautoptr = CPointer<GList>

typealias GtkNotebook_slistautoptrVar = CPointerVarOf<GtkNotebook_slistautoptr>

typealias GtkNotebook_slistautoptr = CPointer<GSList>

typealias GtkNotebook_queueautoptrVar = CPointerVarOf<GtkNotebook_queueautoptr>

typealias GtkNotebook_queueautoptr = CPointer<GQueue>

typealias GtkOffscreenWindow_autoptrVar = CPointerVarOf<GtkOffscreenWindow_autoptr>

typealias GtkOffscreenWindow_autoptr = CPointer<GtkOffscreenWindow>

typealias GtkOffscreenWindow_listautoptrVar = CPointerVarOf<GtkOffscreenWindow_listautoptr>

typealias GtkOffscreenWindow_listautoptr = CPointer<GList>

typealias GtkOffscreenWindow_slistautoptrVar = CPointerVarOf<GtkOffscreenWindow_slistautoptr>

typealias GtkOffscreenWindow_slistautoptr = CPointer<GSList>

typealias GtkOffscreenWindow_queueautoptrVar = CPointerVarOf<GtkOffscreenWindow_queueautoptr>

typealias GtkOffscreenWindow_queueautoptr = CPointer<GQueue>

typealias GtkOrientable_autoptrVar = CPointerVarOf<GtkOrientable_autoptr>

typealias GtkOrientable_autoptr = CPointer<GtkOrientable>

typealias GtkOrientable_listautoptrVar = CPointerVarOf<GtkOrientable_listautoptr>

typealias GtkOrientable_listautoptr = CPointer<GList>

typealias GtkOrientable_slistautoptrVar = CPointerVarOf<GtkOrientable_slistautoptr>

typealias GtkOrientable_slistautoptr = CPointer<GSList>

typealias GtkOrientable_queueautoptrVar = CPointerVarOf<GtkOrientable_queueautoptr>

typealias GtkOrientable_queueautoptr = CPointer<GQueue>

typealias GtkOverlay_autoptrVar = CPointerVarOf<GtkOverlay_autoptr>

typealias GtkOverlay_autoptr = CPointer<GtkOverlay>

typealias GtkOverlay_listautoptrVar = CPointerVarOf<GtkOverlay_listautoptr>

typealias GtkOverlay_listautoptr = CPointer<GList>

typealias GtkOverlay_slistautoptrVar = CPointerVarOf<GtkOverlay_slistautoptr>

typealias GtkOverlay_slistautoptr = CPointer<GSList>

typealias GtkOverlay_queueautoptrVar = CPointerVarOf<GtkOverlay_queueautoptr>

typealias GtkOverlay_queueautoptr = CPointer<GQueue>

typealias GtkPageSetup_autoptrVar = CPointerVarOf<GtkPageSetup_autoptr>

typealias GtkPageSetup_autoptr = CPointer<GtkPageSetup>

typealias GtkPageSetup_listautoptrVar = CPointerVarOf<GtkPageSetup_listautoptr>

typealias GtkPageSetup_listautoptr = CPointer<GList>

typealias GtkPageSetup_slistautoptrVar = CPointerVarOf<GtkPageSetup_slistautoptr>

typealias GtkPageSetup_slistautoptr = CPointer<GSList>

typealias GtkPageSetup_queueautoptrVar = CPointerVarOf<GtkPageSetup_queueautoptr>

typealias GtkPageSetup_queueautoptr = CPointer<GQueue>

typealias GtkPaned_autoptrVar = CPointerVarOf<GtkPaned_autoptr>

typealias GtkPaned_autoptr = CPointer<GtkPaned>

typealias GtkPaned_listautoptrVar = CPointerVarOf<GtkPaned_listautoptr>

typealias GtkPaned_listautoptr = CPointer<GList>

typealias GtkPaned_slistautoptrVar = CPointerVarOf<GtkPaned_slistautoptr>

typealias GtkPaned_slistautoptr = CPointer<GSList>

typealias GtkPaned_queueautoptrVar = CPointerVarOf<GtkPaned_queueautoptr>

typealias GtkPaned_queueautoptr = CPointer<GQueue>

typealias GtkPlacesSidebar_autoptrVar = CPointerVarOf<GtkPlacesSidebar_autoptr>

typealias GtkPlacesSidebar_autoptr = CPointer<GtkPlacesSidebar>

typealias GtkPlacesSidebar_listautoptrVar = CPointerVarOf<GtkPlacesSidebar_listautoptr>

typealias GtkPlacesSidebar_listautoptr = CPointer<GList>

typealias GtkPlacesSidebar_slistautoptrVar = CPointerVarOf<GtkPlacesSidebar_slistautoptr>

typealias GtkPlacesSidebar_slistautoptr = CPointer<GSList>

typealias GtkPlacesSidebar_queueautoptrVar = CPointerVarOf<GtkPlacesSidebar_queueautoptr>

typealias GtkPlacesSidebar_queueautoptr = CPointer<GQueue>

typealias GtkPopover_autoptrVar = CPointerVarOf<GtkPopover_autoptr>

typealias GtkPopover_autoptr = CPointer<GtkPopover>

typealias GtkPopover_listautoptrVar = CPointerVarOf<GtkPopover_listautoptr>

typealias GtkPopover_listautoptr = CPointer<GList>

typealias GtkPopover_slistautoptrVar = CPointerVarOf<GtkPopover_slistautoptr>

typealias GtkPopover_slistautoptr = CPointer<GSList>

typealias GtkPopover_queueautoptrVar = CPointerVarOf<GtkPopover_queueautoptr>

typealias GtkPopover_queueautoptr = CPointer<GQueue>

typealias GtkPopoverMenu_autoptrVar = CPointerVarOf<GtkPopoverMenu_autoptr>

typealias GtkPopoverMenu_autoptr = CPointer<GtkPopoverMenu>

typealias GtkPopoverMenu_listautoptrVar = CPointerVarOf<GtkPopoverMenu_listautoptr>

typealias GtkPopoverMenu_listautoptr = CPointer<GList>

typealias GtkPopoverMenu_slistautoptrVar = CPointerVarOf<GtkPopoverMenu_slistautoptr>

typealias GtkPopoverMenu_slistautoptr = CPointer<GSList>

typealias GtkPopoverMenu_queueautoptrVar = CPointerVarOf<GtkPopoverMenu_queueautoptr>

typealias GtkPopoverMenu_queueautoptr = CPointer<GQueue>

typealias GtkPrintContext_autoptrVar = CPointerVarOf<GtkPrintContext_autoptr>

typealias GtkPrintContext_autoptr = CPointer<GtkPrintContext>

typealias GtkPrintContext_listautoptrVar = CPointerVarOf<GtkPrintContext_listautoptr>

typealias GtkPrintContext_listautoptr = CPointer<GList>

typealias GtkPrintContext_slistautoptrVar = CPointerVarOf<GtkPrintContext_slistautoptr>

typealias GtkPrintContext_slistautoptr = CPointer<GSList>

typealias GtkPrintContext_queueautoptrVar = CPointerVarOf<GtkPrintContext_queueautoptr>

typealias GtkPrintContext_queueautoptr = CPointer<GQueue>

typealias GtkPrintOperation_autoptrVar = CPointerVarOf<GtkPrintOperation_autoptr>

typealias GtkPrintOperation_autoptr = CPointer<GtkPrintOperation>

typealias GtkPrintOperation_listautoptrVar = CPointerVarOf<GtkPrintOperation_listautoptr>

typealias GtkPrintOperation_listautoptr = CPointer<GList>

typealias GtkPrintOperation_slistautoptrVar = CPointerVarOf<GtkPrintOperation_slistautoptr>

typealias GtkPrintOperation_slistautoptr = CPointer<GSList>

typealias GtkPrintOperation_queueautoptrVar = CPointerVarOf<GtkPrintOperation_queueautoptr>

typealias GtkPrintOperation_queueautoptr = CPointer<GQueue>

typealias GtkPrintOperationPreview_autoptrVar = CPointerVarOf<GtkPrintOperationPreview_autoptr>

typealias GtkPrintOperationPreview_autoptr = CPointer<GtkPrintOperationPreview>

typealias GtkPrintOperationPreview_listautoptrVar = CPointerVarOf<GtkPrintOperationPreview_listautoptr>

typealias GtkPrintOperationPreview_listautoptr = CPointer<GList>

typealias GtkPrintOperationPreview_slistautoptrVar = CPointerVarOf<GtkPrintOperationPreview_slistautoptr>

typealias GtkPrintOperationPreview_slistautoptr = CPointer<GSList>

typealias GtkPrintOperationPreview_queueautoptrVar = CPointerVarOf<GtkPrintOperationPreview_queueautoptr>

typealias GtkPrintOperationPreview_queueautoptr = CPointer<GQueue>

typealias GtkPrintSettings_autoptrVar = CPointerVarOf<GtkPrintSettings_autoptr>

typealias GtkPrintSettings_autoptr = CPointer<GtkPrintSettings>

typealias GtkPrintSettings_listautoptrVar = CPointerVarOf<GtkPrintSettings_listautoptr>

typealias GtkPrintSettings_listautoptr = CPointer<GList>

typealias GtkPrintSettings_slistautoptrVar = CPointerVarOf<GtkPrintSettings_slistautoptr>

typealias GtkPrintSettings_slistautoptr = CPointer<GSList>

typealias GtkPrintSettings_queueautoptrVar = CPointerVarOf<GtkPrintSettings_queueautoptr>

typealias GtkPrintSettings_queueautoptr = CPointer<GQueue>

typealias GtkProgressBar_autoptrVar = CPointerVarOf<GtkProgressBar_autoptr>

typealias GtkProgressBar_autoptr = CPointer<GtkProgressBar>

typealias GtkProgressBar_listautoptrVar = CPointerVarOf<GtkProgressBar_listautoptr>

typealias GtkProgressBar_listautoptr = CPointer<GList>

typealias GtkProgressBar_slistautoptrVar = CPointerVarOf<GtkProgressBar_slistautoptr>

typealias GtkProgressBar_slistautoptr = CPointer<GSList>

typealias GtkProgressBar_queueautoptrVar = CPointerVarOf<GtkProgressBar_queueautoptr>

typealias GtkProgressBar_queueautoptr = CPointer<GQueue>

typealias GtkRadioButton_autoptrVar = CPointerVarOf<GtkRadioButton_autoptr>

typealias GtkRadioButton_autoptr = CPointer<GtkRadioButton>

typealias GtkRadioButton_listautoptrVar = CPointerVarOf<GtkRadioButton_listautoptr>

typealias GtkRadioButton_listautoptr = CPointer<GList>

typealias GtkRadioButton_slistautoptrVar = CPointerVarOf<GtkRadioButton_slistautoptr>

typealias GtkRadioButton_slistautoptr = CPointer<GSList>

typealias GtkRadioButton_queueautoptrVar = CPointerVarOf<GtkRadioButton_queueautoptr>

typealias GtkRadioButton_queueautoptr = CPointer<GQueue>

typealias GtkRadioMenuItem_autoptrVar = CPointerVarOf<GtkRadioMenuItem_autoptr>

typealias GtkRadioMenuItem_autoptr = CPointer<GtkRadioMenuItem>

typealias GtkRadioMenuItem_listautoptrVar = CPointerVarOf<GtkRadioMenuItem_listautoptr>

typealias GtkRadioMenuItem_listautoptr = CPointer<GList>

typealias GtkRadioMenuItem_slistautoptrVar = CPointerVarOf<GtkRadioMenuItem_slistautoptr>

typealias GtkRadioMenuItem_slistautoptr = CPointer<GSList>

typealias GtkRadioMenuItem_queueautoptrVar = CPointerVarOf<GtkRadioMenuItem_queueautoptr>

typealias GtkRadioMenuItem_queueautoptr = CPointer<GQueue>

typealias GtkRadioToolButton_autoptrVar = CPointerVarOf<GtkRadioToolButton_autoptr>

typealias GtkRadioToolButton_autoptr = CPointer<GtkRadioToolButton>

typealias GtkRadioToolButton_listautoptrVar = CPointerVarOf<GtkRadioToolButton_listautoptr>

typealias GtkRadioToolButton_listautoptr = CPointer<GList>

typealias GtkRadioToolButton_slistautoptrVar = CPointerVarOf<GtkRadioToolButton_slistautoptr>

typealias GtkRadioToolButton_slistautoptr = CPointer<GSList>

typealias GtkRadioToolButton_queueautoptrVar = CPointerVarOf<GtkRadioToolButton_queueautoptr>

typealias GtkRadioToolButton_queueautoptr = CPointer<GQueue>

typealias GtkRange_autoptrVar = CPointerVarOf<GtkRange_autoptr>

typealias GtkRange_autoptr = CPointer<GtkRange>

typealias GtkRange_listautoptrVar = CPointerVarOf<GtkRange_listautoptr>

typealias GtkRange_listautoptr = CPointer<GList>

typealias GtkRange_slistautoptrVar = CPointerVarOf<GtkRange_slistautoptr>

typealias GtkRange_slistautoptr = CPointer<GSList>

typealias GtkRange_queueautoptrVar = CPointerVarOf<GtkRange_queueautoptr>

typealias GtkRange_queueautoptr = CPointer<GQueue>

typealias GtkRcStyle_autoptrVar = CPointerVarOf<GtkRcStyle_autoptr>

typealias GtkRcStyle_autoptr = CPointer<GtkRcStyle>

typealias GtkRcStyle_listautoptrVar = CPointerVarOf<GtkRcStyle_listautoptr>

typealias GtkRcStyle_listautoptr = CPointer<GList>

typealias GtkRcStyle_slistautoptrVar = CPointerVarOf<GtkRcStyle_slistautoptr>

typealias GtkRcStyle_slistautoptr = CPointer<GSList>

typealias GtkRcStyle_queueautoptrVar = CPointerVarOf<GtkRcStyle_queueautoptr>

typealias GtkRcStyle_queueautoptr = CPointer<GQueue>

typealias GtkRecentChooser_autoptrVar = CPointerVarOf<GtkRecentChooser_autoptr>

typealias GtkRecentChooser_autoptr = CPointer<GtkRecentChooser>

typealias GtkRecentChooser_listautoptrVar = CPointerVarOf<GtkRecentChooser_listautoptr>

typealias GtkRecentChooser_listautoptr = CPointer<GList>

typealias GtkRecentChooser_slistautoptrVar = CPointerVarOf<GtkRecentChooser_slistautoptr>

typealias GtkRecentChooser_slistautoptr = CPointer<GSList>

typealias GtkRecentChooser_queueautoptrVar = CPointerVarOf<GtkRecentChooser_queueautoptr>

typealias GtkRecentChooser_queueautoptr = CPointer<GQueue>

typealias GtkRecentChooserDialog_autoptrVar = CPointerVarOf<GtkRecentChooserDialog_autoptr>

typealias GtkRecentChooserDialog_autoptr = CPointer<GtkRecentChooserDialog>

typealias GtkRecentChooserDialog_listautoptrVar = CPointerVarOf<GtkRecentChooserDialog_listautoptr>

typealias GtkRecentChooserDialog_listautoptr = CPointer<GList>

typealias GtkRecentChooserDialog_slistautoptrVar = CPointerVarOf<GtkRecentChooserDialog_slistautoptr>

typealias GtkRecentChooserDialog_slistautoptr = CPointer<GSList>

typealias GtkRecentChooserDialog_queueautoptrVar = CPointerVarOf<GtkRecentChooserDialog_queueautoptr>

typealias GtkRecentChooserDialog_queueautoptr = CPointer<GQueue>

typealias GtkRecentChooserMenu_autoptrVar = CPointerVarOf<GtkRecentChooserMenu_autoptr>

typealias GtkRecentChooserMenu_autoptr = CPointer<GtkRecentChooserMenu>

typealias GtkRecentChooserMenu_listautoptrVar = CPointerVarOf<GtkRecentChooserMenu_listautoptr>

typealias GtkRecentChooserMenu_listautoptr = CPointer<GList>

typealias GtkRecentChooserMenu_slistautoptrVar = CPointerVarOf<GtkRecentChooserMenu_slistautoptr>

typealias GtkRecentChooserMenu_slistautoptr = CPointer<GSList>

typealias GtkRecentChooserMenu_queueautoptrVar = CPointerVarOf<GtkRecentChooserMenu_queueautoptr>

typealias GtkRecentChooserMenu_queueautoptr = CPointer<GQueue>

typealias GtkRecentChooserWidget_autoptrVar = CPointerVarOf<GtkRecentChooserWidget_autoptr>

typealias GtkRecentChooserWidget_autoptr = CPointer<GtkRecentChooserWidget>

typealias GtkRecentChooserWidget_listautoptrVar = CPointerVarOf<GtkRecentChooserWidget_listautoptr>

typealias GtkRecentChooserWidget_listautoptr = CPointer<GList>

typealias GtkRecentChooserWidget_slistautoptrVar = CPointerVarOf<GtkRecentChooserWidget_slistautoptr>

typealias GtkRecentChooserWidget_slistautoptr = CPointer<GSList>

typealias GtkRecentChooserWidget_queueautoptrVar = CPointerVarOf<GtkRecentChooserWidget_queueautoptr>

typealias GtkRecentChooserWidget_queueautoptr = CPointer<GQueue>

typealias GtkRecentFilter_autoptrVar = CPointerVarOf<GtkRecentFilter_autoptr>

typealias GtkRecentFilter_autoptr = CPointer<GtkRecentFilter>

typealias GtkRecentFilter_listautoptrVar = CPointerVarOf<GtkRecentFilter_listautoptr>

typealias GtkRecentFilter_listautoptr = CPointer<GList>

typealias GtkRecentFilter_slistautoptrVar = CPointerVarOf<GtkRecentFilter_slistautoptr>

typealias GtkRecentFilter_slistautoptr = CPointer<GSList>

typealias GtkRecentFilter_queueautoptrVar = CPointerVarOf<GtkRecentFilter_queueautoptr>

typealias GtkRecentFilter_queueautoptr = CPointer<GQueue>

typealias GtkRecentManager_autoptrVar = CPointerVarOf<GtkRecentManager_autoptr>

typealias GtkRecentManager_autoptr = CPointer<GtkRecentManager>

typealias GtkRecentManager_listautoptrVar = CPointerVarOf<GtkRecentManager_listautoptr>

typealias GtkRecentManager_listautoptr = CPointer<GList>

typealias GtkRecentManager_slistautoptrVar = CPointerVarOf<GtkRecentManager_slistautoptr>

typealias GtkRecentManager_slistautoptr = CPointer<GSList>

typealias GtkRecentManager_queueautoptrVar = CPointerVarOf<GtkRecentManager_queueautoptr>

typealias GtkRecentManager_queueautoptr = CPointer<GQueue>

typealias GtkRevealer_autoptrVar = CPointerVarOf<GtkRevealer_autoptr>

typealias GtkRevealer_autoptr = CPointer<GtkRevealer>

typealias GtkRevealer_listautoptrVar = CPointerVarOf<GtkRevealer_listautoptr>

typealias GtkRevealer_listautoptr = CPointer<GList>

typealias GtkRevealer_slistautoptrVar = CPointerVarOf<GtkRevealer_slistautoptr>

typealias GtkRevealer_slistautoptr = CPointer<GSList>

typealias GtkRevealer_queueautoptrVar = CPointerVarOf<GtkRevealer_queueautoptr>

typealias GtkRevealer_queueautoptr = CPointer<GQueue>

typealias GtkScale_autoptrVar = CPointerVarOf<GtkScale_autoptr>

typealias GtkScale_autoptr = CPointer<GtkScale>

typealias GtkScale_listautoptrVar = CPointerVarOf<GtkScale_listautoptr>

typealias GtkScale_listautoptr = CPointer<GList>

typealias GtkScale_slistautoptrVar = CPointerVarOf<GtkScale_slistautoptr>

typealias GtkScale_slistautoptr = CPointer<GSList>

typealias GtkScale_queueautoptrVar = CPointerVarOf<GtkScale_queueautoptr>

typealias GtkScale_queueautoptr = CPointer<GQueue>

typealias GtkScaleButton_autoptrVar = CPointerVarOf<GtkScaleButton_autoptr>

typealias GtkScaleButton_autoptr = CPointer<GtkScaleButton>

typealias GtkScaleButton_listautoptrVar = CPointerVarOf<GtkScaleButton_listautoptr>

typealias GtkScaleButton_listautoptr = CPointer<GList>

typealias GtkScaleButton_slistautoptrVar = CPointerVarOf<GtkScaleButton_slistautoptr>

typealias GtkScaleButton_slistautoptr = CPointer<GSList>

typealias GtkScaleButton_queueautoptrVar = CPointerVarOf<GtkScaleButton_queueautoptr>

typealias GtkScaleButton_queueautoptr = CPointer<GQueue>

typealias GtkScrollable_autoptrVar = CPointerVarOf<GtkScrollable_autoptr>

typealias GtkScrollable_autoptr = CPointer<GtkScrollable>

typealias GtkScrollable_listautoptrVar = CPointerVarOf<GtkScrollable_listautoptr>

typealias GtkScrollable_listautoptr = CPointer<GList>

typealias GtkScrollable_slistautoptrVar = CPointerVarOf<GtkScrollable_slistautoptr>

typealias GtkScrollable_slistautoptr = CPointer<GSList>

typealias GtkScrollable_queueautoptrVar = CPointerVarOf<GtkScrollable_queueautoptr>

typealias GtkScrollable_queueautoptr = CPointer<GQueue>

typealias GtkScrollbar_autoptrVar = CPointerVarOf<GtkScrollbar_autoptr>

typealias GtkScrollbar_autoptr = CPointer<GtkScrollbar>

typealias GtkScrollbar_listautoptrVar = CPointerVarOf<GtkScrollbar_listautoptr>

typealias GtkScrollbar_listautoptr = CPointer<GList>

typealias GtkScrollbar_slistautoptrVar = CPointerVarOf<GtkScrollbar_slistautoptr>

typealias GtkScrollbar_slistautoptr = CPointer<GSList>

typealias GtkScrollbar_queueautoptrVar = CPointerVarOf<GtkScrollbar_queueautoptr>

typealias GtkScrollbar_queueautoptr = CPointer<GQueue>

typealias GtkScrolledWindow_autoptrVar = CPointerVarOf<GtkScrolledWindow_autoptr>

typealias GtkScrolledWindow_autoptr = CPointer<GtkScrolledWindow>

typealias GtkScrolledWindow_listautoptrVar = CPointerVarOf<GtkScrolledWindow_listautoptr>

typealias GtkScrolledWindow_listautoptr = CPointer<GList>

typealias GtkScrolledWindow_slistautoptrVar = CPointerVarOf<GtkScrolledWindow_slistautoptr>

typealias GtkScrolledWindow_slistautoptr = CPointer<GSList>

typealias GtkScrolledWindow_queueautoptrVar = CPointerVarOf<GtkScrolledWindow_queueautoptr>

typealias GtkScrolledWindow_queueautoptr = CPointer<GQueue>

typealias GtkSearchBar_autoptrVar = CPointerVarOf<GtkSearchBar_autoptr>

typealias GtkSearchBar_autoptr = CPointer<GtkSearchBar>

typealias GtkSearchBar_listautoptrVar = CPointerVarOf<GtkSearchBar_listautoptr>

typealias GtkSearchBar_listautoptr = CPointer<GList>

typealias GtkSearchBar_slistautoptrVar = CPointerVarOf<GtkSearchBar_slistautoptr>

typealias GtkSearchBar_slistautoptr = CPointer<GSList>

typealias GtkSearchBar_queueautoptrVar = CPointerVarOf<GtkSearchBar_queueautoptr>

typealias GtkSearchBar_queueautoptr = CPointer<GQueue>

typealias GtkSearchEntry_autoptrVar = CPointerVarOf<GtkSearchEntry_autoptr>

typealias GtkSearchEntry_autoptr = CPointer<GtkSearchEntry>

typealias GtkSearchEntry_listautoptrVar = CPointerVarOf<GtkSearchEntry_listautoptr>

typealias GtkSearchEntry_listautoptr = CPointer<GList>

typealias GtkSearchEntry_slistautoptrVar = CPointerVarOf<GtkSearchEntry_slistautoptr>

typealias GtkSearchEntry_slistautoptr = CPointer<GSList>

typealias GtkSearchEntry_queueautoptrVar = CPointerVarOf<GtkSearchEntry_queueautoptr>

typealias GtkSearchEntry_queueautoptr = CPointer<GQueue>

typealias GtkSeparator_autoptrVar = CPointerVarOf<GtkSeparator_autoptr>

typealias GtkSeparator_autoptr = CPointer<GtkSeparator>

typealias GtkSeparator_listautoptrVar = CPointerVarOf<GtkSeparator_listautoptr>

typealias GtkSeparator_listautoptr = CPointer<GList>

typealias GtkSeparator_slistautoptrVar = CPointerVarOf<GtkSeparator_slistautoptr>

typealias GtkSeparator_slistautoptr = CPointer<GSList>

typealias GtkSeparator_queueautoptrVar = CPointerVarOf<GtkSeparator_queueautoptr>

typealias GtkSeparator_queueautoptr = CPointer<GQueue>

typealias GtkSeparatorMenuItem_autoptrVar = CPointerVarOf<GtkSeparatorMenuItem_autoptr>

typealias GtkSeparatorMenuItem_autoptr = CPointer<GtkSeparatorMenuItem>

typealias GtkSeparatorMenuItem_listautoptrVar = CPointerVarOf<GtkSeparatorMenuItem_listautoptr>

typealias GtkSeparatorMenuItem_listautoptr = CPointer<GList>

typealias GtkSeparatorMenuItem_slistautoptrVar = CPointerVarOf<GtkSeparatorMenuItem_slistautoptr>

typealias GtkSeparatorMenuItem_slistautoptr = CPointer<GSList>

typealias GtkSeparatorMenuItem_queueautoptrVar = CPointerVarOf<GtkSeparatorMenuItem_queueautoptr>

typealias GtkSeparatorMenuItem_queueautoptr = CPointer<GQueue>

typealias GtkSeparatorToolItem_autoptrVar = CPointerVarOf<GtkSeparatorToolItem_autoptr>

typealias GtkSeparatorToolItem_autoptr = CPointer<GtkSeparatorToolItem>

typealias GtkSeparatorToolItem_listautoptrVar = CPointerVarOf<GtkSeparatorToolItem_listautoptr>

typealias GtkSeparatorToolItem_listautoptr = CPointer<GList>

typealias GtkSeparatorToolItem_slistautoptrVar = CPointerVarOf<GtkSeparatorToolItem_slistautoptr>

typealias GtkSeparatorToolItem_slistautoptr = CPointer<GSList>

typealias GtkSeparatorToolItem_queueautoptrVar = CPointerVarOf<GtkSeparatorToolItem_queueautoptr>

typealias GtkSeparatorToolItem_queueautoptr = CPointer<GQueue>

typealias GtkSettings_autoptrVar = CPointerVarOf<GtkSettings_autoptr>

typealias GtkSettings_autoptr = CPointer<GtkSettings>

typealias GtkSettings_listautoptrVar = CPointerVarOf<GtkSettings_listautoptr>

typealias GtkSettings_listautoptr = CPointer<GList>

typealias GtkSettings_slistautoptrVar = CPointerVarOf<GtkSettings_slistautoptr>

typealias GtkSettings_slistautoptr = CPointer<GSList>

typealias GtkSettings_queueautoptrVar = CPointerVarOf<GtkSettings_queueautoptr>

typealias GtkSettings_queueautoptr = CPointer<GQueue>

typealias GtkStackSidebar_autoptrVar = CPointerVarOf<GtkStackSidebar_autoptr>

typealias GtkStackSidebar_autoptr = CPointer<GtkStackSidebar>

typealias GtkStackSidebar_listautoptrVar = CPointerVarOf<GtkStackSidebar_listautoptr>

typealias GtkStackSidebar_listautoptr = CPointer<GList>

typealias GtkStackSidebar_slistautoptrVar = CPointerVarOf<GtkStackSidebar_slistautoptr>

typealias GtkStackSidebar_slistautoptr = CPointer<GSList>

typealias GtkStackSidebar_queueautoptrVar = CPointerVarOf<GtkStackSidebar_queueautoptr>

typealias GtkStackSidebar_queueautoptr = CPointer<GQueue>

typealias GtkSizeGroup_autoptrVar = CPointerVarOf<GtkSizeGroup_autoptr>

typealias GtkSizeGroup_autoptr = CPointer<GtkSizeGroup>

typealias GtkSizeGroup_listautoptrVar = CPointerVarOf<GtkSizeGroup_listautoptr>

typealias GtkSizeGroup_listautoptr = CPointer<GList>

typealias GtkSizeGroup_slistautoptrVar = CPointerVarOf<GtkSizeGroup_slistautoptr>

typealias GtkSizeGroup_slistautoptr = CPointer<GSList>

typealias GtkSizeGroup_queueautoptrVar = CPointerVarOf<GtkSizeGroup_queueautoptr>

typealias GtkSizeGroup_queueautoptr = CPointer<GQueue>

typealias GtkSpinButton_autoptrVar = CPointerVarOf<GtkSpinButton_autoptr>

typealias GtkSpinButton_autoptr = CPointer<GtkSpinButton>

typealias GtkSpinButton_listautoptrVar = CPointerVarOf<GtkSpinButton_listautoptr>

typealias GtkSpinButton_listautoptr = CPointer<GList>

typealias GtkSpinButton_slistautoptrVar = CPointerVarOf<GtkSpinButton_slistautoptr>

typealias GtkSpinButton_slistautoptr = CPointer<GSList>

typealias GtkSpinButton_queueautoptrVar = CPointerVarOf<GtkSpinButton_queueautoptr>

typealias GtkSpinButton_queueautoptr = CPointer<GQueue>

typealias GtkSpinner_autoptrVar = CPointerVarOf<GtkSpinner_autoptr>

typealias GtkSpinner_autoptr = CPointer<GtkSpinner>

typealias GtkSpinner_listautoptrVar = CPointerVarOf<GtkSpinner_listautoptr>

typealias GtkSpinner_listautoptr = CPointer<GList>

typealias GtkSpinner_slistautoptrVar = CPointerVarOf<GtkSpinner_slistautoptr>

typealias GtkSpinner_slistautoptr = CPointer<GSList>

typealias GtkSpinner_queueautoptrVar = CPointerVarOf<GtkSpinner_queueautoptr>

typealias GtkSpinner_queueautoptr = CPointer<GQueue>

typealias GtkStack_autoptrVar = CPointerVarOf<GtkStack_autoptr>

typealias GtkStack_autoptr = CPointer<GtkStack>

typealias GtkStack_listautoptrVar = CPointerVarOf<GtkStack_listautoptr>

typealias GtkStack_listautoptr = CPointer<GList>

typealias GtkStack_slistautoptrVar = CPointerVarOf<GtkStack_slistautoptr>

typealias GtkStack_slistautoptr = CPointer<GSList>

typealias GtkStack_queueautoptrVar = CPointerVarOf<GtkStack_queueautoptr>

typealias GtkStack_queueautoptr = CPointer<GQueue>

typealias GtkStackSwitcher_autoptrVar = CPointerVarOf<GtkStackSwitcher_autoptr>

typealias GtkStackSwitcher_autoptr = CPointer<GtkStackSwitcher>

typealias GtkStackSwitcher_listautoptrVar = CPointerVarOf<GtkStackSwitcher_listautoptr>

typealias GtkStackSwitcher_listautoptr = CPointer<GList>

typealias GtkStackSwitcher_slistautoptrVar = CPointerVarOf<GtkStackSwitcher_slistautoptr>

typealias GtkStackSwitcher_slistautoptr = CPointer<GSList>

typealias GtkStackSwitcher_queueautoptrVar = CPointerVarOf<GtkStackSwitcher_queueautoptr>

typealias GtkStackSwitcher_queueautoptr = CPointer<GQueue>

typealias GtkStatusbar_autoptrVar = CPointerVarOf<GtkStatusbar_autoptr>

typealias GtkStatusbar_autoptr = CPointer<GtkStatusbar>

typealias GtkStatusbar_listautoptrVar = CPointerVarOf<GtkStatusbar_listautoptr>

typealias GtkStatusbar_listautoptr = CPointer<GList>

typealias GtkStatusbar_slistautoptrVar = CPointerVarOf<GtkStatusbar_slistautoptr>

typealias GtkStatusbar_slistautoptr = CPointer<GSList>

typealias GtkStatusbar_queueautoptrVar = CPointerVarOf<GtkStatusbar_queueautoptr>

typealias GtkStatusbar_queueautoptr = CPointer<GQueue>

typealias GtkStyle_autoptrVar = CPointerVarOf<GtkStyle_autoptr>

typealias GtkStyle_autoptr = CPointer<GtkStyle>

typealias GtkStyle_listautoptrVar = CPointerVarOf<GtkStyle_listautoptr>

typealias GtkStyle_listautoptr = CPointer<GList>

typealias GtkStyle_slistautoptrVar = CPointerVarOf<GtkStyle_slistautoptr>

typealias GtkStyle_slistautoptr = CPointer<GSList>

typealias GtkStyle_queueautoptrVar = CPointerVarOf<GtkStyle_queueautoptr>

typealias GtkStyle_queueautoptr = CPointer<GQueue>

typealias GtkStyleContext_autoptrVar = CPointerVarOf<GtkStyleContext_autoptr>

typealias GtkStyleContext_autoptr = CPointer<GtkStyleContext>

typealias GtkStyleContext_listautoptrVar = CPointerVarOf<GtkStyleContext_listautoptr>

typealias GtkStyleContext_listautoptr = CPointer<GList>

typealias GtkStyleContext_slistautoptrVar = CPointerVarOf<GtkStyleContext_slistautoptr>

typealias GtkStyleContext_slistautoptr = CPointer<GSList>

typealias GtkStyleContext_queueautoptrVar = CPointerVarOf<GtkStyleContext_queueautoptr>

typealias GtkStyleContext_queueautoptr = CPointer<GQueue>

typealias GtkStyleProperties_autoptrVar = CPointerVarOf<GtkStyleProperties_autoptr>

typealias GtkStyleProperties_autoptr = CPointer<GtkStyleProperties>

typealias GtkStyleProperties_listautoptrVar = CPointerVarOf<GtkStyleProperties_listautoptr>

typealias GtkStyleProperties_listautoptr = CPointer<GList>

typealias GtkStyleProperties_slistautoptrVar = CPointerVarOf<GtkStyleProperties_slistautoptr>

typealias GtkStyleProperties_slistautoptr = CPointer<GSList>

typealias GtkStyleProperties_queueautoptrVar = CPointerVarOf<GtkStyleProperties_queueautoptr>

typealias GtkStyleProperties_queueautoptr = CPointer<GQueue>

typealias GtkStyleProvider_autoptrVar = CPointerVarOf<GtkStyleProvider_autoptr>

typealias GtkStyleProvider_autoptr = CPointer<GtkStyleProvider>

typealias GtkStyleProvider_listautoptrVar = CPointerVarOf<GtkStyleProvider_listautoptr>

typealias GtkStyleProvider_listautoptr = CPointer<GList>

typealias GtkStyleProvider_slistautoptrVar = CPointerVarOf<GtkStyleProvider_slistautoptr>

typealias GtkStyleProvider_slistautoptr = CPointer<GSList>

typealias GtkStyleProvider_queueautoptrVar = CPointerVarOf<GtkStyleProvider_queueautoptr>

typealias GtkStyleProvider_queueautoptr = CPointer<GQueue>

typealias GtkSwitch_autoptrVar = CPointerVarOf<GtkSwitch_autoptr>

typealias GtkSwitch_autoptr = CPointer<GtkSwitch>

typealias GtkSwitch_listautoptrVar = CPointerVarOf<GtkSwitch_listautoptr>

typealias GtkSwitch_listautoptr = CPointer<GList>

typealias GtkSwitch_slistautoptrVar = CPointerVarOf<GtkSwitch_slistautoptr>

typealias GtkSwitch_slistautoptr = CPointer<GSList>

typealias GtkSwitch_queueautoptrVar = CPointerVarOf<GtkSwitch_queueautoptr>

typealias GtkSwitch_queueautoptr = CPointer<GQueue>

typealias GtkTextBuffer_autoptrVar = CPointerVarOf<GtkTextBuffer_autoptr>

typealias GtkTextBuffer_autoptr = CPointer<GtkTextBuffer>

typealias GtkTextBuffer_listautoptrVar = CPointerVarOf<GtkTextBuffer_listautoptr>

typealias GtkTextBuffer_listautoptr = CPointer<GList>

typealias GtkTextBuffer_slistautoptrVar = CPointerVarOf<GtkTextBuffer_slistautoptr>

typealias GtkTextBuffer_slistautoptr = CPointer<GSList>

typealias GtkTextBuffer_queueautoptrVar = CPointerVarOf<GtkTextBuffer_queueautoptr>

typealias GtkTextBuffer_queueautoptr = CPointer<GQueue>

typealias GtkTextChildAnchor_autoptrVar = CPointerVarOf<GtkTextChildAnchor_autoptr>

typealias GtkTextChildAnchor_autoptr = CPointer<GtkTextChildAnchor>

typealias GtkTextChildAnchor_listautoptrVar = CPointerVarOf<GtkTextChildAnchor_listautoptr>

typealias GtkTextChildAnchor_listautoptr = CPointer<GList>

typealias GtkTextChildAnchor_slistautoptrVar = CPointerVarOf<GtkTextChildAnchor_slistautoptr>

typealias GtkTextChildAnchor_slistautoptr = CPointer<GSList>

typealias GtkTextChildAnchor_queueautoptrVar = CPointerVarOf<GtkTextChildAnchor_queueautoptr>

typealias GtkTextChildAnchor_queueautoptr = CPointer<GQueue>

typealias GtkTextMark_autoptrVar = CPointerVarOf<GtkTextMark_autoptr>

typealias GtkTextMark_autoptr = CPointer<GtkTextMark>

typealias GtkTextMark_listautoptrVar = CPointerVarOf<GtkTextMark_listautoptr>

typealias GtkTextMark_listautoptr = CPointer<GList>

typealias GtkTextMark_slistautoptrVar = CPointerVarOf<GtkTextMark_slistautoptr>

typealias GtkTextMark_slistautoptr = CPointer<GSList>

typealias GtkTextMark_queueautoptrVar = CPointerVarOf<GtkTextMark_queueautoptr>

typealias GtkTextMark_queueautoptr = CPointer<GQueue>

typealias GtkTextTag_autoptrVar = CPointerVarOf<GtkTextTag_autoptr>

typealias GtkTextTag_autoptr = CPointer<GtkTextTag>

typealias GtkTextTag_listautoptrVar = CPointerVarOf<GtkTextTag_listautoptr>

typealias GtkTextTag_listautoptr = CPointer<GList>

typealias GtkTextTag_slistautoptrVar = CPointerVarOf<GtkTextTag_slistautoptr>

typealias GtkTextTag_slistautoptr = CPointer<GSList>

typealias GtkTextTag_queueautoptrVar = CPointerVarOf<GtkTextTag_queueautoptr>

typealias GtkTextTag_queueautoptr = CPointer<GQueue>

typealias GtkTextTagTable_autoptrVar = CPointerVarOf<GtkTextTagTable_autoptr>

typealias GtkTextTagTable_autoptr = CPointer<GtkTextTagTable>

typealias GtkTextTagTable_listautoptrVar = CPointerVarOf<GtkTextTagTable_listautoptr>

typealias GtkTextTagTable_listautoptr = CPointer<GList>

typealias GtkTextTagTable_slistautoptrVar = CPointerVarOf<GtkTextTagTable_slistautoptr>

typealias GtkTextTagTable_slistautoptr = CPointer<GSList>

typealias GtkTextTagTable_queueautoptrVar = CPointerVarOf<GtkTextTagTable_queueautoptr>

typealias GtkTextTagTable_queueautoptr = CPointer<GQueue>

typealias GtkTextView_autoptrVar = CPointerVarOf<GtkTextView_autoptr>

typealias GtkTextView_autoptr = CPointer<GtkTextView>

typealias GtkTextView_listautoptrVar = CPointerVarOf<GtkTextView_listautoptr>

typealias GtkTextView_listautoptr = CPointer<GList>

typealias GtkTextView_slistautoptrVar = CPointerVarOf<GtkTextView_slistautoptr>

typealias GtkTextView_slistautoptr = CPointer<GSList>

typealias GtkTextView_queueautoptrVar = CPointerVarOf<GtkTextView_queueautoptr>

typealias GtkTextView_queueautoptr = CPointer<GQueue>

typealias GtkToggleButton_autoptrVar = CPointerVarOf<GtkToggleButton_autoptr>

typealias GtkToggleButton_autoptr = CPointer<GtkToggleButton>

typealias GtkToggleButton_listautoptrVar = CPointerVarOf<GtkToggleButton_listautoptr>

typealias GtkToggleButton_listautoptr = CPointer<GList>

typealias GtkToggleButton_slistautoptrVar = CPointerVarOf<GtkToggleButton_slistautoptr>

typealias GtkToggleButton_slistautoptr = CPointer<GSList>

typealias GtkToggleButton_queueautoptrVar = CPointerVarOf<GtkToggleButton_queueautoptr>

typealias GtkToggleButton_queueautoptr = CPointer<GQueue>

typealias GtkToggleToolButton_autoptrVar = CPointerVarOf<GtkToggleToolButton_autoptr>

typealias GtkToggleToolButton_autoptr = CPointer<GtkToggleToolButton>

typealias GtkToggleToolButton_listautoptrVar = CPointerVarOf<GtkToggleToolButton_listautoptr>

typealias GtkToggleToolButton_listautoptr = CPointer<GList>

typealias GtkToggleToolButton_slistautoptrVar = CPointerVarOf<GtkToggleToolButton_slistautoptr>

typealias GtkToggleToolButton_slistautoptr = CPointer<GSList>

typealias GtkToggleToolButton_queueautoptrVar = CPointerVarOf<GtkToggleToolButton_queueautoptr>

typealias GtkToggleToolButton_queueautoptr = CPointer<GQueue>

typealias GtkToolButton_autoptrVar = CPointerVarOf<GtkToolButton_autoptr>

typealias GtkToolButton_autoptr = CPointer<GtkToolButton>

typealias GtkToolButton_listautoptrVar = CPointerVarOf<GtkToolButton_listautoptr>

typealias GtkToolButton_listautoptr = CPointer<GList>

typealias GtkToolButton_slistautoptrVar = CPointerVarOf<GtkToolButton_slistautoptr>

typealias GtkToolButton_slistautoptr = CPointer<GSList>

typealias GtkToolButton_queueautoptrVar = CPointerVarOf<GtkToolButton_queueautoptr>

typealias GtkToolButton_queueautoptr = CPointer<GQueue>

typealias GtkToolItem_autoptrVar = CPointerVarOf<GtkToolItem_autoptr>

typealias GtkToolItem_autoptr = CPointer<GtkToolItem>

typealias GtkToolItem_listautoptrVar = CPointerVarOf<GtkToolItem_listautoptr>

typealias GtkToolItem_listautoptr = CPointer<GList>

typealias GtkToolItem_slistautoptrVar = CPointerVarOf<GtkToolItem_slistautoptr>

typealias GtkToolItem_slistautoptr = CPointer<GSList>

typealias GtkToolItem_queueautoptrVar = CPointerVarOf<GtkToolItem_queueautoptr>

typealias GtkToolItem_queueautoptr = CPointer<GQueue>

typealias GtkToolItemGroup_autoptrVar = CPointerVarOf<GtkToolItemGroup_autoptr>

typealias GtkToolItemGroup_autoptr = CPointer<GtkToolItemGroup>

typealias GtkToolItemGroup_listautoptrVar = CPointerVarOf<GtkToolItemGroup_listautoptr>

typealias GtkToolItemGroup_listautoptr = CPointer<GList>

typealias GtkToolItemGroup_slistautoptrVar = CPointerVarOf<GtkToolItemGroup_slistautoptr>

typealias GtkToolItemGroup_slistautoptr = CPointer<GSList>

typealias GtkToolItemGroup_queueautoptrVar = CPointerVarOf<GtkToolItemGroup_queueautoptr>

typealias GtkToolItemGroup_queueautoptr = CPointer<GQueue>

typealias GtkToolPalette_autoptrVar = CPointerVarOf<GtkToolPalette_autoptr>

typealias GtkToolPalette_autoptr = CPointer<GtkToolPalette>

typealias GtkToolPalette_listautoptrVar = CPointerVarOf<GtkToolPalette_listautoptr>

typealias GtkToolPalette_listautoptr = CPointer<GList>

typealias GtkToolPalette_slistautoptrVar = CPointerVarOf<GtkToolPalette_slistautoptr>

typealias GtkToolPalette_slistautoptr = CPointer<GSList>

typealias GtkToolPalette_queueautoptrVar = CPointerVarOf<GtkToolPalette_queueautoptr>

typealias GtkToolPalette_queueautoptr = CPointer<GQueue>

typealias GtkToolShell_autoptrVar = CPointerVarOf<GtkToolShell_autoptr>

typealias GtkToolShell_autoptr = CPointer<GtkToolShell>

typealias GtkToolShell_listautoptrVar = CPointerVarOf<GtkToolShell_listautoptr>

typealias GtkToolShell_listautoptr = CPointer<GList>

typealias GtkToolShell_slistautoptrVar = CPointerVarOf<GtkToolShell_slistautoptr>

typealias GtkToolShell_slistautoptr = CPointer<GSList>

typealias GtkToolShell_queueautoptrVar = CPointerVarOf<GtkToolShell_queueautoptr>

typealias GtkToolShell_queueautoptr = CPointer<GQueue>

typealias GtkToolbar_autoptrVar = CPointerVarOf<GtkToolbar_autoptr>

typealias GtkToolbar_autoptr = CPointer<GtkToolbar>

typealias GtkToolbar_listautoptrVar = CPointerVarOf<GtkToolbar_listautoptr>

typealias GtkToolbar_listautoptr = CPointer<GList>

typealias GtkToolbar_slistautoptrVar = CPointerVarOf<GtkToolbar_slistautoptr>

typealias GtkToolbar_slistautoptr = CPointer<GSList>

typealias GtkToolbar_queueautoptrVar = CPointerVarOf<GtkToolbar_queueautoptr>

typealias GtkToolbar_queueautoptr = CPointer<GQueue>

typealias GtkTooltip_autoptrVar = CPointerVarOf<GtkTooltip_autoptr>

typealias GtkTooltip_autoptr = CPointer<GtkTooltip>

typealias GtkTooltip_listautoptrVar = CPointerVarOf<GtkTooltip_listautoptr>

typealias GtkTooltip_listautoptr = CPointer<GList>

typealias GtkTooltip_slistautoptrVar = CPointerVarOf<GtkTooltip_slistautoptr>

typealias GtkTooltip_slistautoptr = CPointer<GSList>

typealias GtkTooltip_queueautoptrVar = CPointerVarOf<GtkTooltip_queueautoptr>

typealias GtkTooltip_queueautoptr = CPointer<GQueue>

typealias GtkTreeDragDest_autoptrVar = CPointerVarOf<GtkTreeDragDest_autoptr>

typealias GtkTreeDragDest_autoptr = CPointer<GtkTreeDragDest>

typealias GtkTreeDragDest_listautoptrVar = CPointerVarOf<GtkTreeDragDest_listautoptr>

typealias GtkTreeDragDest_listautoptr = CPointer<GList>

typealias GtkTreeDragDest_slistautoptrVar = CPointerVarOf<GtkTreeDragDest_slistautoptr>

typealias GtkTreeDragDest_slistautoptr = CPointer<GSList>

typealias GtkTreeDragDest_queueautoptrVar = CPointerVarOf<GtkTreeDragDest_queueautoptr>

typealias GtkTreeDragDest_queueautoptr = CPointer<GQueue>

typealias GtkTreeDragSource_autoptrVar = CPointerVarOf<GtkTreeDragSource_autoptr>

typealias GtkTreeDragSource_autoptr = CPointer<GtkTreeDragSource>

typealias GtkTreeDragSource_listautoptrVar = CPointerVarOf<GtkTreeDragSource_listautoptr>

typealias GtkTreeDragSource_listautoptr = CPointer<GList>

typealias GtkTreeDragSource_slistautoptrVar = CPointerVarOf<GtkTreeDragSource_slistautoptr>

typealias GtkTreeDragSource_slistautoptr = CPointer<GSList>

typealias GtkTreeDragSource_queueautoptrVar = CPointerVarOf<GtkTreeDragSource_queueautoptr>

typealias GtkTreeDragSource_queueautoptr = CPointer<GQueue>

typealias GtkTreeModel_autoptrVar = CPointerVarOf<GtkTreeModel_autoptr>

typealias GtkTreeModel_autoptr = CPointer<GtkTreeModel>

typealias GtkTreeModel_listautoptrVar = CPointerVarOf<GtkTreeModel_listautoptr>

typealias GtkTreeModel_listautoptr = CPointer<GList>

typealias GtkTreeModel_slistautoptrVar = CPointerVarOf<GtkTreeModel_slistautoptr>

typealias GtkTreeModel_slistautoptr = CPointer<GSList>

typealias GtkTreeModel_queueautoptrVar = CPointerVarOf<GtkTreeModel_queueautoptr>

typealias GtkTreeModel_queueautoptr = CPointer<GQueue>

typealias GtkTreeModelFilter_autoptrVar = CPointerVarOf<GtkTreeModelFilter_autoptr>

typealias GtkTreeModelFilter_autoptr = CPointer<GtkTreeModelFilter>

typealias GtkTreeModelFilter_listautoptrVar = CPointerVarOf<GtkTreeModelFilter_listautoptr>

typealias GtkTreeModelFilter_listautoptr = CPointer<GList>

typealias GtkTreeModelFilter_slistautoptrVar = CPointerVarOf<GtkTreeModelFilter_slistautoptr>

typealias GtkTreeModelFilter_slistautoptr = CPointer<GSList>

typealias GtkTreeModelFilter_queueautoptrVar = CPointerVarOf<GtkTreeModelFilter_queueautoptr>

typealias GtkTreeModelFilter_queueautoptr = CPointer<GQueue>

typealias GtkTreeModelSort_autoptrVar = CPointerVarOf<GtkTreeModelSort_autoptr>

typealias GtkTreeModelSort_autoptr = CPointer<GtkTreeModelSort>

typealias GtkTreeModelSort_listautoptrVar = CPointerVarOf<GtkTreeModelSort_listautoptr>

typealias GtkTreeModelSort_listautoptr = CPointer<GList>

typealias GtkTreeModelSort_slistautoptrVar = CPointerVarOf<GtkTreeModelSort_slistautoptr>

typealias GtkTreeModelSort_slistautoptr = CPointer<GSList>

typealias GtkTreeModelSort_queueautoptrVar = CPointerVarOf<GtkTreeModelSort_queueautoptr>

typealias GtkTreeModelSort_queueautoptr = CPointer<GQueue>

typealias GtkTreeSelection_autoptrVar = CPointerVarOf<GtkTreeSelection_autoptr>

typealias GtkTreeSelection_autoptr = CPointer<GtkTreeSelection>

typealias GtkTreeSelection_listautoptrVar = CPointerVarOf<GtkTreeSelection_listautoptr>

typealias GtkTreeSelection_listautoptr = CPointer<GList>

typealias GtkTreeSelection_slistautoptrVar = CPointerVarOf<GtkTreeSelection_slistautoptr>

typealias GtkTreeSelection_slistautoptr = CPointer<GSList>

typealias GtkTreeSelection_queueautoptrVar = CPointerVarOf<GtkTreeSelection_queueautoptr>

typealias GtkTreeSelection_queueautoptr = CPointer<GQueue>

typealias GtkTreeSortable_autoptrVar = CPointerVarOf<GtkTreeSortable_autoptr>

typealias GtkTreeSortable_autoptr = CPointer<GtkTreeSortable>

typealias GtkTreeSortable_listautoptrVar = CPointerVarOf<GtkTreeSortable_listautoptr>

typealias GtkTreeSortable_listautoptr = CPointer<GList>

typealias GtkTreeSortable_slistautoptrVar = CPointerVarOf<GtkTreeSortable_slistautoptr>

typealias GtkTreeSortable_slistautoptr = CPointer<GSList>

typealias GtkTreeSortable_queueautoptrVar = CPointerVarOf<GtkTreeSortable_queueautoptr>

typealias GtkTreeSortable_queueautoptr = CPointer<GQueue>

typealias GtkTreeStore_autoptrVar = CPointerVarOf<GtkTreeStore_autoptr>

typealias GtkTreeStore_autoptr = CPointer<GtkTreeStore>

typealias GtkTreeStore_listautoptrVar = CPointerVarOf<GtkTreeStore_listautoptr>

typealias GtkTreeStore_listautoptr = CPointer<GList>

typealias GtkTreeStore_slistautoptrVar = CPointerVarOf<GtkTreeStore_slistautoptr>

typealias GtkTreeStore_slistautoptr = CPointer<GSList>

typealias GtkTreeStore_queueautoptrVar = CPointerVarOf<GtkTreeStore_queueautoptr>

typealias GtkTreeStore_queueautoptr = CPointer<GQueue>

typealias GtkTreeView_autoptrVar = CPointerVarOf<GtkTreeView_autoptr>

typealias GtkTreeView_autoptr = CPointer<GtkTreeView>

typealias GtkTreeView_listautoptrVar = CPointerVarOf<GtkTreeView_listautoptr>

typealias GtkTreeView_listautoptr = CPointer<GList>

typealias GtkTreeView_slistautoptrVar = CPointerVarOf<GtkTreeView_slistautoptr>

typealias GtkTreeView_slistautoptr = CPointer<GSList>

typealias GtkTreeView_queueautoptrVar = CPointerVarOf<GtkTreeView_queueautoptr>

typealias GtkTreeView_queueautoptr = CPointer<GQueue>

typealias GtkTreeViewColumn_autoptrVar = CPointerVarOf<GtkTreeViewColumn_autoptr>

typealias GtkTreeViewColumn_autoptr = CPointer<GtkTreeViewColumn>

typealias GtkTreeViewColumn_listautoptrVar = CPointerVarOf<GtkTreeViewColumn_listautoptr>

typealias GtkTreeViewColumn_listautoptr = CPointer<GList>

typealias GtkTreeViewColumn_slistautoptrVar = CPointerVarOf<GtkTreeViewColumn_slistautoptr>

typealias GtkTreeViewColumn_slistautoptr = CPointer<GSList>

typealias GtkTreeViewColumn_queueautoptrVar = CPointerVarOf<GtkTreeViewColumn_queueautoptr>

typealias GtkTreeViewColumn_queueautoptr = CPointer<GQueue>

typealias GtkViewport_autoptrVar = CPointerVarOf<GtkViewport_autoptr>

typealias GtkViewport_autoptr = CPointer<GtkViewport>

typealias GtkViewport_listautoptrVar = CPointerVarOf<GtkViewport_listautoptr>

typealias GtkViewport_listautoptr = CPointer<GList>

typealias GtkViewport_slistautoptrVar = CPointerVarOf<GtkViewport_slistautoptr>

typealias GtkViewport_slistautoptr = CPointer<GSList>

typealias GtkViewport_queueautoptrVar = CPointerVarOf<GtkViewport_queueautoptr>

typealias GtkViewport_queueautoptr = CPointer<GQueue>

typealias GtkVolumeButton_autoptrVar = CPointerVarOf<GtkVolumeButton_autoptr>

typealias GtkVolumeButton_autoptr = CPointer<GtkVolumeButton>

typealias GtkVolumeButton_listautoptrVar = CPointerVarOf<GtkVolumeButton_listautoptr>

typealias GtkVolumeButton_listautoptr = CPointer<GList>

typealias GtkVolumeButton_slistautoptrVar = CPointerVarOf<GtkVolumeButton_slistautoptr>

typealias GtkVolumeButton_slistautoptr = CPointer<GSList>

typealias GtkVolumeButton_queueautoptrVar = CPointerVarOf<GtkVolumeButton_queueautoptr>

typealias GtkVolumeButton_queueautoptr = CPointer<GQueue>

typealias GtkPaperSize_autoptrVar = CPointerVarOf<GtkPaperSize_autoptr>

typealias GtkPaperSize_autoptr = CPointer<GtkPaperSize>

typealias GtkPaperSize_listautoptrVar = CPointerVarOf<GtkPaperSize_listautoptr>

typealias GtkPaperSize_listautoptr = CPointer<GList>

typealias GtkPaperSize_slistautoptrVar = CPointerVarOf<GtkPaperSize_slistautoptr>

typealias GtkPaperSize_slistautoptr = CPointer<GSList>

typealias GtkPaperSize_queueautoptrVar = CPointerVarOf<GtkPaperSize_queueautoptr>

typealias GtkPaperSize_queueautoptr = CPointer<GQueue>

typealias GtkRecentInfo_autoptrVar = CPointerVarOf<GtkRecentInfo_autoptr>

typealias GtkRecentInfo_autoptr = CPointer<GtkRecentInfo>

typealias GtkRecentInfo_listautoptrVar = CPointerVarOf<GtkRecentInfo_listautoptr>

typealias GtkRecentInfo_listautoptr = CPointer<GList>

typealias GtkRecentInfo_slistautoptrVar = CPointerVarOf<GtkRecentInfo_slistautoptr>

typealias GtkRecentInfo_slistautoptr = CPointer<GSList>

typealias GtkRecentInfo_queueautoptrVar = CPointerVarOf<GtkRecentInfo_queueautoptr>

typealias GtkRecentInfo_queueautoptr = CPointer<GQueue>

typealias GtkSelectionData_autoptrVar = CPointerVarOf<GtkSelectionData_autoptr>

typealias GtkSelectionData_autoptr = CPointer<GtkSelectionData>

typealias GtkSelectionData_listautoptrVar = CPointerVarOf<GtkSelectionData_listautoptr>

typealias GtkSelectionData_listautoptr = CPointer<GList>

typealias GtkSelectionData_slistautoptrVar = CPointerVarOf<GtkSelectionData_slistautoptr>

typealias GtkSelectionData_slistautoptr = CPointer<GSList>

typealias GtkSelectionData_queueautoptrVar = CPointerVarOf<GtkSelectionData_queueautoptr>

typealias GtkSelectionData_queueautoptr = CPointer<GQueue>

typealias GtkTargetList_autoptrVar = CPointerVarOf<GtkTargetList_autoptr>

typealias GtkTargetList_autoptr = CPointer<GtkTargetList>

typealias GtkTargetList_listautoptrVar = CPointerVarOf<GtkTargetList_listautoptr>

typealias GtkTargetList_listautoptr = CPointer<GList>

typealias GtkTargetList_slistautoptrVar = CPointerVarOf<GtkTargetList_slistautoptr>

typealias GtkTargetList_slistautoptr = CPointer<GSList>

typealias GtkTargetList_queueautoptrVar = CPointerVarOf<GtkTargetList_queueautoptr>

typealias GtkTargetList_queueautoptr = CPointer<GQueue>

typealias GtkTextAttributes_autoptrVar = CPointerVarOf<GtkTextAttributes_autoptr>

typealias GtkTextAttributes_autoptr = CPointer<GtkTextAttributes>

typealias GtkTextAttributes_listautoptrVar = CPointerVarOf<GtkTextAttributes_listautoptr>

typealias GtkTextAttributes_listautoptr = CPointer<GList>

typealias GtkTextAttributes_slistautoptrVar = CPointerVarOf<GtkTextAttributes_slistautoptr>

typealias GtkTextAttributes_slistautoptr = CPointer<GSList>

typealias GtkTextAttributes_queueautoptrVar = CPointerVarOf<GtkTextAttributes_queueautoptr>

typealias GtkTextAttributes_queueautoptr = CPointer<GQueue>

typealias GtkTextIter_autoptrVar = CPointerVarOf<GtkTextIter_autoptr>

typealias GtkTextIter_autoptr = CPointer<GtkTextIter>

typealias GtkTextIter_listautoptrVar = CPointerVarOf<GtkTextIter_listautoptr>

typealias GtkTextIter_listautoptr = CPointer<GList>

typealias GtkTextIter_slistautoptrVar = CPointerVarOf<GtkTextIter_slistautoptr>

typealias GtkTextIter_slistautoptr = CPointer<GSList>

typealias GtkTextIter_queueautoptrVar = CPointerVarOf<GtkTextIter_queueautoptr>

typealias GtkTextIter_queueautoptr = CPointer<GQueue>

typealias GtkTreeIter_autoptrVar = CPointerVarOf<GtkTreeIter_autoptr>

typealias GtkTreeIter_autoptr = CPointer<GtkTreeIter>

typealias GtkTreeIter_listautoptrVar = CPointerVarOf<GtkTreeIter_listautoptr>

typealias GtkTreeIter_listautoptr = CPointer<GList>

typealias GtkTreeIter_slistautoptrVar = CPointerVarOf<GtkTreeIter_slistautoptr>

typealias GtkTreeIter_slistautoptr = CPointer<GSList>

typealias GtkTreeIter_queueautoptrVar = CPointerVarOf<GtkTreeIter_queueautoptr>

typealias GtkTreeIter_queueautoptr = CPointer<GQueue>

typealias GtkTreePath_autoptrVar = CPointerVarOf<GtkTreePath_autoptr>

typealias GtkTreePath_autoptr = CPointer<GtkTreePath>

typealias GtkTreePath_listautoptrVar = CPointerVarOf<GtkTreePath_listautoptr>

typealias GtkTreePath_listautoptr = CPointer<GList>

typealias GtkTreePath_slistautoptrVar = CPointerVarOf<GtkTreePath_slistautoptr>

typealias GtkTreePath_slistautoptr = CPointer<GSList>

typealias GtkTreePath_queueautoptrVar = CPointerVarOf<GtkTreePath_queueautoptr>

typealias GtkTreePath_queueautoptr = CPointer<GQueue>

typealias GtkTreeRowReference_autoptrVar = CPointerVarOf<GtkTreeRowReference_autoptr>

typealias GtkTreeRowReference_autoptr = CPointer<GtkTreeRowReference>

typealias GtkTreeRowReference_listautoptrVar = CPointerVarOf<GtkTreeRowReference_listautoptr>

typealias GtkTreeRowReference_listautoptr = CPointer<GList>

typealias GtkTreeRowReference_slistautoptrVar = CPointerVarOf<GtkTreeRowReference_slistautoptr>

typealias GtkTreeRowReference_slistautoptr = CPointer<GSList>

typealias GtkTreeRowReference_queueautoptrVar = CPointerVarOf<GtkTreeRowReference_queueautoptr>

typealias GtkTreeRowReference_queueautoptr = CPointer<GQueue>

typealias GtkWidgetPath_autoptrVar = CPointerVarOf<GtkWidgetPath_autoptr>

typealias GtkWidgetPath_autoptr = CPointer<GtkWidgetPath>

typealias GtkWidgetPath_listautoptrVar = CPointerVarOf<GtkWidgetPath_listautoptr>

typealias GtkWidgetPath_listautoptr = CPointer<GList>

typealias GtkWidgetPath_slistautoptrVar = CPointerVarOf<GtkWidgetPath_slistautoptr>

typealias GtkWidgetPath_slistautoptr = CPointer<GSList>

typealias GtkWidgetPath_queueautoptrVar = CPointerVarOf<GtkWidgetPath_queueautoptr>

typealias GtkWidgetPath_queueautoptr = CPointer<GQueue>


val G_TYPE_FLAG_CLASSED: GTypeFundamentalFlags get() = 1u

val G_TYPE_FLAG_INSTANTIATABLE: GTypeFundamentalFlags get() = 2u

val G_TYPE_FLAG_DERIVABLE: GTypeFundamentalFlags get() = 4u

val G_TYPE_FLAG_DEEP_DERIVABLE: GTypeFundamentalFlags get() = 8u

typealias GTypeFundamentalFlagsVar = UIntVarOf<GTypeFundamentalFlags>

typealias GTypeFundamentalFlags = UInt


val G_TYPE_DEBUG_NONE: GTypeDebugFlags get() = 0u

val G_TYPE_DEBUG_OBJECTS: GTypeDebugFlags get() = 1u

val G_TYPE_DEBUG_SIGNALS: GTypeDebugFlags get() = 2u

val G_TYPE_DEBUG_INSTANCE_COUNT: GTypeDebugFlags get() = 4u

val G_TYPE_DEBUG_MASK: GTypeDebugFlags get() = 7u

typealias GTypeDebugFlagsVar = UIntVarOf<GTypeDebugFlags>

typealias GTypeDebugFlags = UInt


val G_TYPE_FLAG_ABSTRACT: GTypeFlags get() = 16u

val G_TYPE_FLAG_VALUE_ABSTRACT: GTypeFlags get() = 32u

typealias GTypeFlagsVar = UIntVarOf<GTypeFlags>

typealias GTypeFlags = UInt


val G_PARAM_READABLE: GParamFlags get() = 1

val G_PARAM_WRITABLE: GParamFlags get() = 2

val G_PARAM_READWRITE: GParamFlags get() = 3

val G_PARAM_CONSTRUCT: GParamFlags get() = 4

val G_PARAM_CONSTRUCT_ONLY: GParamFlags get() = 8

val G_PARAM_LAX_VALIDATION: GParamFlags get() = 16

val G_PARAM_STATIC_NAME: GParamFlags get() = 32

val G_PARAM_PRIVATE: GParamFlags get() = 32

val G_PARAM_STATIC_NICK: GParamFlags get() = 64

val G_PARAM_STATIC_BLURB: GParamFlags get() = 128

val G_PARAM_EXPLICIT_NOTIFY: GParamFlags get() = 1073741824

val G_PARAM_DEPRECATED: GParamFlags get() = -2147483648

typealias GParamFlagsVar = IntVarOf<GParamFlags>

typealias GParamFlags = Int


val G_SIGNAL_RUN_FIRST: GSignalFlags get() = 1u

val G_SIGNAL_RUN_LAST: GSignalFlags get() = 2u

val G_SIGNAL_RUN_CLEANUP: GSignalFlags get() = 4u

val G_SIGNAL_NO_RECURSE: GSignalFlags get() = 8u

val G_SIGNAL_DETAILED: GSignalFlags get() = 16u

val G_SIGNAL_ACTION: GSignalFlags get() = 32u

val G_SIGNAL_NO_HOOKS: GSignalFlags get() = 64u

val G_SIGNAL_MUST_COLLECT: GSignalFlags get() = 128u

val G_SIGNAL_DEPRECATED: GSignalFlags get() = 256u

typealias GSignalFlagsVar = UIntVarOf<GSignalFlags>

typealias GSignalFlags = UInt


val G_CONNECT_AFTER: GConnectFlags get() = 1u

val G_CONNECT_SWAPPED: GConnectFlags get() = 2u

typealias GConnectFlagsVar = UIntVarOf<GConnectFlags>

typealias GConnectFlags = UInt


val G_SIGNAL_MATCH_ID: GSignalMatchType get() = 1u

val G_SIGNAL_MATCH_DETAIL: GSignalMatchType get() = 2u

val G_SIGNAL_MATCH_CLOSURE: GSignalMatchType get() = 4u

val G_SIGNAL_MATCH_FUNC: GSignalMatchType get() = 8u

val G_SIGNAL_MATCH_DATA: GSignalMatchType get() = 16u

val G_SIGNAL_MATCH_UNBLOCKED: GSignalMatchType get() = 32u

typealias GSignalMatchTypeVar = UIntVarOf<GSignalMatchType>

typealias GSignalMatchType = UInt


val G_BINDING_DEFAULT: GBindingFlags get() = 0u

val G_BINDING_BIDIRECTIONAL: GBindingFlags get() = 1u

val G_BINDING_SYNC_CREATE: GBindingFlags get() = 2u

val G_BINDING_INVERT_BOOLEAN: GBindingFlags get() = 4u

typealias GBindingFlagsVar = UIntVarOf<GBindingFlags>

typealias GBindingFlags = UInt


val G_APP_INFO_CREATE_NONE: GAppInfoCreateFlags get() = 0u

val G_APP_INFO_CREATE_NEEDS_TERMINAL: GAppInfoCreateFlags get() = 1u

val G_APP_INFO_CREATE_SUPPORTS_URIS: GAppInfoCreateFlags get() = 2u

val G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: GAppInfoCreateFlags get() = 4u

typealias GAppInfoCreateFlagsVar = UIntVarOf<GAppInfoCreateFlags>

typealias GAppInfoCreateFlags = UInt


val G_CONVERTER_NO_FLAGS: GConverterFlags get() = 0u

val G_CONVERTER_INPUT_AT_END: GConverterFlags get() = 1u

val G_CONVERTER_FLUSH: GConverterFlags get() = 2u

typealias GConverterFlagsVar = UIntVarOf<GConverterFlags>

typealias GConverterFlags = UInt


val G_CONVERTER_ERROR: GConverterResult get() = 0u

val G_CONVERTER_CONVERTED: GConverterResult get() = 1u

val G_CONVERTER_FINISHED: GConverterResult get() = 2u

val G_CONVERTER_FLUSHED: GConverterResult get() = 3u

typealias GConverterResultVar = UIntVarOf<GConverterResult>

typealias GConverterResult = UInt


val G_FILE_ATTRIBUTE_TYPE_INVALID: GFileAttributeType get() = 0u

val G_FILE_ATTRIBUTE_TYPE_STRING: GFileAttributeType get() = 1u

val G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: GFileAttributeType get() = 2u

val G_FILE_ATTRIBUTE_TYPE_BOOLEAN: GFileAttributeType get() = 3u

val G_FILE_ATTRIBUTE_TYPE_UINT32: GFileAttributeType get() = 4u

val G_FILE_ATTRIBUTE_TYPE_INT32: GFileAttributeType get() = 5u

val G_FILE_ATTRIBUTE_TYPE_UINT64: GFileAttributeType get() = 6u

val G_FILE_ATTRIBUTE_TYPE_INT64: GFileAttributeType get() = 7u

val G_FILE_ATTRIBUTE_TYPE_OBJECT: GFileAttributeType get() = 8u

val G_FILE_ATTRIBUTE_TYPE_STRINGV: GFileAttributeType get() = 9u

typealias GFileAttributeTypeVar = UIntVarOf<GFileAttributeType>

typealias GFileAttributeType = UInt


val G_FILE_ATTRIBUTE_INFO_NONE: GFileAttributeInfoFlags get() = 0u

val G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: GFileAttributeInfoFlags get() = 1u

val G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: GFileAttributeInfoFlags get() = 2u

typealias GFileAttributeInfoFlagsVar = UIntVarOf<GFileAttributeInfoFlags>

typealias GFileAttributeInfoFlags = UInt


val G_FILE_ATTRIBUTE_STATUS_UNSET: GFileAttributeStatus get() = 0u

val G_FILE_ATTRIBUTE_STATUS_SET: GFileAttributeStatus get() = 1u

val G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: GFileAttributeStatus get() = 2u

typealias GFileAttributeStatusVar = UIntVarOf<GFileAttributeStatus>

typealias GFileAttributeStatus = UInt


val G_FILE_QUERY_INFO_NONE: GFileQueryInfoFlags get() = 0u

val G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: GFileQueryInfoFlags get() = 1u

typealias GFileQueryInfoFlagsVar = UIntVarOf<GFileQueryInfoFlags>

typealias GFileQueryInfoFlags = UInt


val G_FILE_CREATE_NONE: GFileCreateFlags get() = 0u

val G_FILE_CREATE_PRIVATE: GFileCreateFlags get() = 1u

val G_FILE_CREATE_REPLACE_DESTINATION: GFileCreateFlags get() = 2u

typealias GFileCreateFlagsVar = UIntVarOf<GFileCreateFlags>

typealias GFileCreateFlags = UInt


val G_FILE_MEASURE_NONE: GFileMeasureFlags get() = 0u

val G_FILE_MEASURE_REPORT_ANY_ERROR: GFileMeasureFlags get() = 2u

val G_FILE_MEASURE_APPARENT_SIZE: GFileMeasureFlags get() = 4u

val G_FILE_MEASURE_NO_XDEV: GFileMeasureFlags get() = 8u

typealias GFileMeasureFlagsVar = UIntVarOf<GFileMeasureFlags>

typealias GFileMeasureFlags = UInt


val G_MOUNT_MOUNT_NONE: GMountMountFlags get() = 0u

typealias GMountMountFlagsVar = UIntVarOf<GMountMountFlags>

typealias GMountMountFlags = UInt


val G_MOUNT_UNMOUNT_NONE: GMountUnmountFlags get() = 0u

val G_MOUNT_UNMOUNT_FORCE: GMountUnmountFlags get() = 1u

typealias GMountUnmountFlagsVar = UIntVarOf<GMountUnmountFlags>

typealias GMountUnmountFlags = UInt


val G_DRIVE_START_NONE: GDriveStartFlags get() = 0u

typealias GDriveStartFlagsVar = UIntVarOf<GDriveStartFlags>

typealias GDriveStartFlags = UInt


val G_FILE_COPY_NONE: GFileCopyFlags get() = 0u

val G_FILE_COPY_OVERWRITE: GFileCopyFlags get() = 1u

val G_FILE_COPY_BACKUP: GFileCopyFlags get() = 2u

val G_FILE_COPY_NOFOLLOW_SYMLINKS: GFileCopyFlags get() = 4u

val G_FILE_COPY_ALL_METADATA: GFileCopyFlags get() = 8u

val G_FILE_COPY_NO_FALLBACK_FOR_MOVE: GFileCopyFlags get() = 16u

val G_FILE_COPY_TARGET_DEFAULT_PERMS: GFileCopyFlags get() = 32u

typealias GFileCopyFlagsVar = UIntVarOf<GFileCopyFlags>

typealias GFileCopyFlags = UInt


val G_FILE_MONITOR_NONE: GFileMonitorFlags get() = 0u

val G_FILE_MONITOR_WATCH_MOUNTS: GFileMonitorFlags get() = 1u

val G_FILE_MONITOR_SEND_MOVED: GFileMonitorFlags get() = 2u

val G_FILE_MONITOR_WATCH_HARD_LINKS: GFileMonitorFlags get() = 4u

val G_FILE_MONITOR_WATCH_MOVES: GFileMonitorFlags get() = 8u

typealias GFileMonitorFlagsVar = UIntVarOf<GFileMonitorFlags>

typealias GFileMonitorFlags = UInt


val G_FILE_TYPE_UNKNOWN: GFileType get() = 0u

val G_FILE_TYPE_REGULAR: GFileType get() = 1u

val G_FILE_TYPE_DIRECTORY: GFileType get() = 2u

val G_FILE_TYPE_SYMBOLIC_LINK: GFileType get() = 3u

val G_FILE_TYPE_SPECIAL: GFileType get() = 4u

val G_FILE_TYPE_SHORTCUT: GFileType get() = 5u

val G_FILE_TYPE_MOUNTABLE: GFileType get() = 6u

typealias GFileTypeVar = UIntVarOf<GFileType>

typealias GFileType = UInt


val G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: GFilesystemPreviewType get() = 0u

val G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: GFilesystemPreviewType get() = 1u

val G_FILESYSTEM_PREVIEW_TYPE_NEVER: GFilesystemPreviewType get() = 2u

typealias GFilesystemPreviewTypeVar = UIntVarOf<GFilesystemPreviewType>

typealias GFilesystemPreviewType = UInt


val G_IO_ERROR_FAILED: GIOErrorEnum get() = 0u

val G_IO_ERROR_NOT_FOUND: GIOErrorEnum get() = 1u

val G_IO_ERROR_EXISTS: GIOErrorEnum get() = 2u

val G_IO_ERROR_IS_DIRECTORY: GIOErrorEnum get() = 3u

val G_IO_ERROR_NOT_DIRECTORY: GIOErrorEnum get() = 4u

val G_IO_ERROR_NOT_EMPTY: GIOErrorEnum get() = 5u

val G_IO_ERROR_NOT_REGULAR_FILE: GIOErrorEnum get() = 6u

val G_IO_ERROR_NOT_SYMBOLIC_LINK: GIOErrorEnum get() = 7u

val G_IO_ERROR_NOT_MOUNTABLE_FILE: GIOErrorEnum get() = 8u

val G_IO_ERROR_FILENAME_TOO_LONG: GIOErrorEnum get() = 9u

val G_IO_ERROR_INVALID_FILENAME: GIOErrorEnum get() = 10u

val G_IO_ERROR_TOO_MANY_LINKS: GIOErrorEnum get() = 11u

val G_IO_ERROR_NO_SPACE: GIOErrorEnum get() = 12u

val G_IO_ERROR_INVALID_ARGUMENT: GIOErrorEnum get() = 13u

val G_IO_ERROR_PERMISSION_DENIED: GIOErrorEnum get() = 14u

val G_IO_ERROR_NOT_SUPPORTED: GIOErrorEnum get() = 15u

val G_IO_ERROR_NOT_MOUNTED: GIOErrorEnum get() = 16u

val G_IO_ERROR_ALREADY_MOUNTED: GIOErrorEnum get() = 17u

val G_IO_ERROR_CLOSED: GIOErrorEnum get() = 18u

val G_IO_ERROR_CANCELLED: GIOErrorEnum get() = 19u

val G_IO_ERROR_PENDING: GIOErrorEnum get() = 20u

val G_IO_ERROR_READ_ONLY: GIOErrorEnum get() = 21u

val G_IO_ERROR_CANT_CREATE_BACKUP: GIOErrorEnum get() = 22u

val G_IO_ERROR_WRONG_ETAG: GIOErrorEnum get() = 23u

val G_IO_ERROR_TIMED_OUT: GIOErrorEnum get() = 24u

val G_IO_ERROR_WOULD_RECURSE: GIOErrorEnum get() = 25u

val G_IO_ERROR_BUSY: GIOErrorEnum get() = 26u

val G_IO_ERROR_WOULD_BLOCK: GIOErrorEnum get() = 27u

val G_IO_ERROR_HOST_NOT_FOUND: GIOErrorEnum get() = 28u

val G_IO_ERROR_WOULD_MERGE: GIOErrorEnum get() = 29u

val G_IO_ERROR_FAILED_HANDLED: GIOErrorEnum get() = 30u

val G_IO_ERROR_TOO_MANY_OPEN_FILES: GIOErrorEnum get() = 31u

val G_IO_ERROR_NOT_INITIALIZED: GIOErrorEnum get() = 32u

val G_IO_ERROR_ADDRESS_IN_USE: GIOErrorEnum get() = 33u

val G_IO_ERROR_PARTIAL_INPUT: GIOErrorEnum get() = 34u

val G_IO_ERROR_INVALID_DATA: GIOErrorEnum get() = 35u

val G_IO_ERROR_DBUS_ERROR: GIOErrorEnum get() = 36u

val G_IO_ERROR_HOST_UNREACHABLE: GIOErrorEnum get() = 37u

val G_IO_ERROR_NETWORK_UNREACHABLE: GIOErrorEnum get() = 38u

val G_IO_ERROR_CONNECTION_REFUSED: GIOErrorEnum get() = 39u

val G_IO_ERROR_PROXY_FAILED: GIOErrorEnum get() = 40u

val G_IO_ERROR_PROXY_AUTH_FAILED: GIOErrorEnum get() = 41u

val G_IO_ERROR_PROXY_NEED_AUTH: GIOErrorEnum get() = 42u

val G_IO_ERROR_PROXY_NOT_ALLOWED: GIOErrorEnum get() = 43u

val G_IO_ERROR_BROKEN_PIPE: GIOErrorEnum get() = 44u

val G_IO_ERROR_CONNECTION_CLOSED: GIOErrorEnum get() = 44u

val G_IO_ERROR_NOT_CONNECTED: GIOErrorEnum get() = 45u

val G_IO_ERROR_MESSAGE_TOO_LARGE: GIOErrorEnum get() = 46u

typealias GIOErrorEnumVar = UIntVarOf<GIOErrorEnum>

typealias GIOErrorEnum = UInt


val G_ASK_PASSWORD_NEED_PASSWORD: GAskPasswordFlags get() = 1u

val G_ASK_PASSWORD_NEED_USERNAME: GAskPasswordFlags get() = 2u

val G_ASK_PASSWORD_NEED_DOMAIN: GAskPasswordFlags get() = 4u

val G_ASK_PASSWORD_SAVING_SUPPORTED: GAskPasswordFlags get() = 8u

val G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: GAskPasswordFlags get() = 16u

val G_ASK_PASSWORD_TCRYPT: GAskPasswordFlags get() = 32u

typealias GAskPasswordFlagsVar = UIntVarOf<GAskPasswordFlags>

typealias GAskPasswordFlags = UInt


val G_OUTPUT_STREAM_SPLICE_NONE: GOutputStreamSpliceFlags get() = 0u

val G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: GOutputStreamSpliceFlags get() = 1u

val G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: GOutputStreamSpliceFlags get() = 2u

typealias GOutputStreamSpliceFlagsVar = UIntVarOf<GOutputStreamSpliceFlags>

typealias GOutputStreamSpliceFlags = UInt


val G_IO_STREAM_SPLICE_NONE: GIOStreamSpliceFlags get() = 0u

val G_IO_STREAM_SPLICE_CLOSE_STREAM1: GIOStreamSpliceFlags get() = 1u

val G_IO_STREAM_SPLICE_CLOSE_STREAM2: GIOStreamSpliceFlags get() = 2u

val G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: GIOStreamSpliceFlags get() = 4u

typealias GIOStreamSpliceFlagsVar = UIntVarOf<GIOStreamSpliceFlags>

typealias GIOStreamSpliceFlags = UInt


val G_RESOLVER_RECORD_SRV: GResolverRecordType get() = 1u

val G_RESOLVER_RECORD_MX: GResolverRecordType get() = 2u

val G_RESOLVER_RECORD_TXT: GResolverRecordType get() = 3u

val G_RESOLVER_RECORD_SOA: GResolverRecordType get() = 4u

val G_RESOLVER_RECORD_NS: GResolverRecordType get() = 5u

typealias GResolverRecordTypeVar = UIntVarOf<GResolverRecordType>

typealias GResolverRecordType = UInt


val G_RESOURCE_FLAGS_NONE: GResourceFlags get() = 0u

val G_RESOURCE_FLAGS_COMPRESSED: GResourceFlags get() = 1u

typealias GResourceFlagsVar = UIntVarOf<GResourceFlags>

typealias GResourceFlags = UInt


val G_RESOURCE_LOOKUP_FLAGS_NONE: GResourceLookupFlags get() = 0u

typealias GResourceLookupFlagsVar = UIntVarOf<GResourceLookupFlags>

typealias GResourceLookupFlags = UInt


val G_SOCKET_FAMILY_INVALID: GSocketFamily get() = 0u

val G_SOCKET_FAMILY_UNIX: GSocketFamily get() = 1u

val G_SOCKET_FAMILY_IPV4: GSocketFamily get() = 2u

val G_SOCKET_FAMILY_IPV6: GSocketFamily get() = 10u

typealias GSocketFamilyVar = UIntVarOf<GSocketFamily>

typealias GSocketFamily = UInt


val G_SOCKET_MSG_NONE: GSocketMsgFlags get() = 0u

val G_SOCKET_MSG_OOB: GSocketMsgFlags get() = 1u

val G_SOCKET_MSG_PEEK: GSocketMsgFlags get() = 2u

val G_SOCKET_MSG_DONTROUTE: GSocketMsgFlags get() = 4u

typealias GSocketMsgFlagsVar = UIntVarOf<GSocketMsgFlags>

typealias GSocketMsgFlags = UInt


val G_SOCKET_PROTOCOL_UNKNOWN: GSocketProtocol get() = -1

val G_SOCKET_PROTOCOL_DEFAULT: GSocketProtocol get() = 0

val G_SOCKET_PROTOCOL_TCP: GSocketProtocol get() = 6

val G_SOCKET_PROTOCOL_UDP: GSocketProtocol get() = 17

val G_SOCKET_PROTOCOL_SCTP: GSocketProtocol get() = 132

typealias GSocketProtocolVar = IntVarOf<GSocketProtocol>

typealias GSocketProtocol = Int


val G_BUS_TYPE_STARTER: GBusType get() = -1

val G_BUS_TYPE_NONE: GBusType get() = 0

val G_BUS_TYPE_SYSTEM: GBusType get() = 1

val G_BUS_TYPE_SESSION: GBusType get() = 2

typealias GBusTypeVar = IntVarOf<GBusType>

typealias GBusType = Int


val G_BUS_NAME_OWNER_FLAGS_NONE: GBusNameOwnerFlags get() = 0u

val G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: GBusNameOwnerFlags get() = 1u

val G_BUS_NAME_OWNER_FLAGS_REPLACE: GBusNameOwnerFlags get() = 2u

val G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE: GBusNameOwnerFlags get() = 4u

typealias GBusNameOwnerFlagsVar = UIntVarOf<GBusNameOwnerFlags>

typealias GBusNameOwnerFlags = UInt


val G_BUS_NAME_WATCHER_FLAGS_NONE: GBusNameWatcherFlags get() = 0u

val G_BUS_NAME_WATCHER_FLAGS_AUTO_START: GBusNameWatcherFlags get() = 1u

typealias GBusNameWatcherFlagsVar = UIntVarOf<GBusNameWatcherFlags>

typealias GBusNameWatcherFlags = UInt


val G_DBUS_PROXY_FLAGS_NONE: GDBusProxyFlags get() = 0u

val G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: GDBusProxyFlags get() = 1u

val G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: GDBusProxyFlags get() = 2u

val G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: GDBusProxyFlags get() = 4u

val G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: GDBusProxyFlags get() = 8u

val G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION: GDBusProxyFlags get() = 16u

typealias GDBusProxyFlagsVar = UIntVarOf<GDBusProxyFlags>

typealias GDBusProxyFlags = UInt


val G_DBUS_CONNECTION_FLAGS_NONE: GDBusConnectionFlags get() = 0u

val G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: GDBusConnectionFlags get() = 1u

val G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: GDBusConnectionFlags get() = 2u

val G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: GDBusConnectionFlags get() = 4u

val G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION: GDBusConnectionFlags get() = 8u

val G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING: GDBusConnectionFlags get() = 16u

typealias GDBusConnectionFlagsVar = UIntVarOf<GDBusConnectionFlags>

typealias GDBusConnectionFlags = UInt


val G_DBUS_CAPABILITY_FLAGS_NONE: GDBusCapabilityFlags get() = 0u

val G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: GDBusCapabilityFlags get() = 1u

typealias GDBusCapabilityFlagsVar = UIntVarOf<GDBusCapabilityFlags>

typealias GDBusCapabilityFlags = UInt


val G_DBUS_CALL_FLAGS_NONE: GDBusCallFlags get() = 0u

val G_DBUS_CALL_FLAGS_NO_AUTO_START: GDBusCallFlags get() = 1u

val G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: GDBusCallFlags get() = 2u

typealias GDBusCallFlagsVar = UIntVarOf<GDBusCallFlags>

typealias GDBusCallFlags = UInt


val G_DBUS_MESSAGE_FLAGS_NONE: GDBusMessageFlags get() = 0u

val G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: GDBusMessageFlags get() = 1u

val G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: GDBusMessageFlags get() = 2u

val G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: GDBusMessageFlags get() = 4u

typealias GDBusMessageFlagsVar = UIntVarOf<GDBusMessageFlags>

typealias GDBusMessageFlags = UInt


val G_DBUS_PROPERTY_INFO_FLAGS_NONE: GDBusPropertyInfoFlags get() = 0u

val G_DBUS_PROPERTY_INFO_FLAGS_READABLE: GDBusPropertyInfoFlags get() = 1u

val G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: GDBusPropertyInfoFlags get() = 2u

typealias GDBusPropertyInfoFlagsVar = UIntVarOf<GDBusPropertyInfoFlags>

typealias GDBusPropertyInfoFlags = UInt


val G_DBUS_SUBTREE_FLAGS_NONE: GDBusSubtreeFlags get() = 0u

val G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: GDBusSubtreeFlags get() = 1u

typealias GDBusSubtreeFlagsVar = UIntVarOf<GDBusSubtreeFlags>

typealias GDBusSubtreeFlags = UInt


val G_DBUS_SERVER_FLAGS_NONE: GDBusServerFlags get() = 0u

val G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: GDBusServerFlags get() = 1u

val G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: GDBusServerFlags get() = 2u

typealias GDBusServerFlagsVar = UIntVarOf<GDBusServerFlags>

typealias GDBusServerFlags = UInt


val G_DBUS_SIGNAL_FLAGS_NONE: GDBusSignalFlags get() = 0u

val G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: GDBusSignalFlags get() = 1u

val G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE: GDBusSignalFlags get() = 2u

val G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH: GDBusSignalFlags get() = 4u

typealias GDBusSignalFlagsVar = UIntVarOf<GDBusSignalFlags>

typealias GDBusSignalFlags = UInt


val G_DBUS_SEND_MESSAGE_FLAGS_NONE: GDBusSendMessageFlags get() = 0u

val G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: GDBusSendMessageFlags get() = 1u

typealias GDBusSendMessageFlagsVar = UIntVarOf<GDBusSendMessageFlags>

typealias GDBusSendMessageFlags = UInt


val G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: GDBusMessageByteOrder get() = 66u

val G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: GDBusMessageByteOrder get() = 108u

typealias GDBusMessageByteOrderVar = UIntVarOf<GDBusMessageByteOrder>

typealias GDBusMessageByteOrder = UInt


val G_APPLICATION_FLAGS_NONE: GApplicationFlags get() = 0u

val G_APPLICATION_IS_SERVICE: GApplicationFlags get() = 1u

val G_APPLICATION_IS_LAUNCHER: GApplicationFlags get() = 2u

val G_APPLICATION_HANDLES_OPEN: GApplicationFlags get() = 4u

val G_APPLICATION_HANDLES_COMMAND_LINE: GApplicationFlags get() = 8u

val G_APPLICATION_SEND_ENVIRONMENT: GApplicationFlags get() = 16u

val G_APPLICATION_NON_UNIQUE: GApplicationFlags get() = 32u

val G_APPLICATION_CAN_OVERRIDE_APP_ID: GApplicationFlags get() = 64u

val G_APPLICATION_ALLOW_REPLACEMENT: GApplicationFlags get() = 128u

val G_APPLICATION_REPLACE: GApplicationFlags get() = 256u

typealias GApplicationFlagsVar = UIntVarOf<GApplicationFlags>

typealias GApplicationFlags = UInt


val G_TLS_CERTIFICATE_UNKNOWN_CA: GTlsCertificateFlags get() = 1u

val G_TLS_CERTIFICATE_BAD_IDENTITY: GTlsCertificateFlags get() = 2u

val G_TLS_CERTIFICATE_NOT_ACTIVATED: GTlsCertificateFlags get() = 4u

val G_TLS_CERTIFICATE_EXPIRED: GTlsCertificateFlags get() = 8u

val G_TLS_CERTIFICATE_REVOKED: GTlsCertificateFlags get() = 16u

val G_TLS_CERTIFICATE_INSECURE: GTlsCertificateFlags get() = 32u

val G_TLS_CERTIFICATE_GENERIC_ERROR: GTlsCertificateFlags get() = 64u

val G_TLS_CERTIFICATE_VALIDATE_ALL: GTlsCertificateFlags get() = 127u

typealias GTlsCertificateFlagsVar = UIntVarOf<GTlsCertificateFlags>

typealias GTlsCertificateFlags = UInt


val G_TLS_PASSWORD_NONE: _GTlsPasswordFlags get() = 0u

val G_TLS_PASSWORD_RETRY: _GTlsPasswordFlags get() = 2u

val G_TLS_PASSWORD_MANY_TRIES: _GTlsPasswordFlags get() = 4u

val G_TLS_PASSWORD_FINAL_TRY: _GTlsPasswordFlags get() = 8u

typealias _GTlsPasswordFlagsVar = UIntVarOf<_GTlsPasswordFlags>

typealias _GTlsPasswordFlags = UInt


val G_DBUS_INTERFACE_SKELETON_FLAGS_NONE: GDBusInterfaceSkeletonFlags get() = 0u

val G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD: GDBusInterfaceSkeletonFlags get() = 1u

typealias GDBusInterfaceSkeletonFlagsVar = UIntVarOf<GDBusInterfaceSkeletonFlags>

typealias GDBusInterfaceSkeletonFlags = UInt


val G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE: GDBusObjectManagerClientFlags get() = 0u

val G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START: GDBusObjectManagerClientFlags get() = 1u

typealias GDBusObjectManagerClientFlagsVar = UIntVarOf<GDBusObjectManagerClientFlags>

typealias GDBusObjectManagerClientFlags = UInt


val G_TLS_DATABASE_VERIFY_NONE: GTlsDatabaseVerifyFlags get() = 0u

typealias GTlsDatabaseVerifyFlagsVar = UIntVarOf<GTlsDatabaseVerifyFlags>

typealias GTlsDatabaseVerifyFlags = UInt


val G_TLS_DATABASE_LOOKUP_NONE: GTlsDatabaseLookupFlags get() = 0u

val G_TLS_DATABASE_LOOKUP_KEYPAIR: GTlsDatabaseLookupFlags get() = 1u

typealias GTlsDatabaseLookupFlagsVar = UIntVarOf<GTlsDatabaseLookupFlags>

typealias GTlsDatabaseLookupFlags = UInt


val G_TLS_CERTIFICATE_REQUEST_NONE: GTlsCertificateRequestFlags get() = 0u

typealias GTlsCertificateRequestFlagsVar = UIntVarOf<GTlsCertificateRequestFlags>

typealias GTlsCertificateRequestFlags = UInt


val G_TEST_DBUS_NONE: GTestDBusFlags get() = 0u

typealias GTestDBusFlagsVar = UIntVarOf<GTestDBusFlags>

typealias GTestDBusFlags = UInt


val G_SUBPROCESS_FLAGS_NONE: GSubprocessFlags get() = 0u

val G_SUBPROCESS_FLAGS_STDIN_PIPE: GSubprocessFlags get() = 1u

val G_SUBPROCESS_FLAGS_STDIN_INHERIT: GSubprocessFlags get() = 2u

val G_SUBPROCESS_FLAGS_STDOUT_PIPE: GSubprocessFlags get() = 4u

val G_SUBPROCESS_FLAGS_STDOUT_SILENCE: GSubprocessFlags get() = 8u

val G_SUBPROCESS_FLAGS_STDERR_PIPE: GSubprocessFlags get() = 16u

val G_SUBPROCESS_FLAGS_STDERR_SILENCE: GSubprocessFlags get() = 32u

val G_SUBPROCESS_FLAGS_STDERR_MERGE: GSubprocessFlags get() = 64u

val G_SUBPROCESS_FLAGS_INHERIT_FDS: GSubprocessFlags get() = 128u

typealias GSubprocessFlagsVar = UIntVarOf<GSubprocessFlags>

typealias GSubprocessFlags = UInt


val G_NETWORK_CONNECTIVITY_LOCAL: GNetworkConnectivity get() = 1u

val G_NETWORK_CONNECTIVITY_LIMITED: GNetworkConnectivity get() = 2u

val G_NETWORK_CONNECTIVITY_PORTAL: GNetworkConnectivity get() = 3u

val G_NETWORK_CONNECTIVITY_FULL: GNetworkConnectivity get() = 4u

typealias GNetworkConnectivityVar = UIntVarOf<GNetworkConnectivity>

typealias GNetworkConnectivity = UInt


val G_POLLABLE_RETURN_FAILED: GPollableReturn get() = 0

val G_POLLABLE_RETURN_OK: GPollableReturn get() = 1

val G_POLLABLE_RETURN_WOULD_BLOCK: GPollableReturn get() = -27

typealias GPollableReturnVar = IntVarOf<GPollableReturn>

typealias GPollableReturn = Int


val G_IO_IN: GIOCondition get() = 1u

val G_IO_OUT: GIOCondition get() = 4u

val G_IO_PRI: GIOCondition get() = 2u

val G_IO_ERR: GIOCondition get() = 8u

val G_IO_HUP: GIOCondition get() = 16u

val G_IO_NVAL: GIOCondition get() = 32u

typealias GIOConditionVar = UIntVarOf<GIOCondition>

typealias GIOCondition = UInt


val G_OPTION_FLAG_NONE: GOptionFlags get() = 0u

val G_OPTION_FLAG_HIDDEN: GOptionFlags get() = 1u

val G_OPTION_FLAG_IN_MAIN: GOptionFlags get() = 2u

val G_OPTION_FLAG_REVERSE: GOptionFlags get() = 4u

val G_OPTION_FLAG_NO_ARG: GOptionFlags get() = 8u

val G_OPTION_FLAG_FILENAME: GOptionFlags get() = 16u

val G_OPTION_FLAG_OPTIONAL_ARG: GOptionFlags get() = 32u

val G_OPTION_FLAG_NOALIAS: GOptionFlags get() = 64u

typealias GOptionFlagsVar = UIntVarOf<GOptionFlags>

typealias GOptionFlags = UInt


val G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT: GResolverNameLookupFlags get() = 0u

val G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY: GResolverNameLookupFlags get() = 1u

val G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY: GResolverNameLookupFlags get() = 2u

typealias GResolverNameLookupFlagsVar = UIntVarOf<GResolverNameLookupFlags>

typealias GResolverNameLookupFlags = UInt


val G_SETTINGS_BIND_DEFAULT: GSettingsBindFlags get() = 0u

val G_SETTINGS_BIND_GET: GSettingsBindFlags get() = 1u

val G_SETTINGS_BIND_SET: GSettingsBindFlags get() = 2u

val G_SETTINGS_BIND_NO_SENSITIVITY: GSettingsBindFlags get() = 4u

val G_SETTINGS_BIND_GET_NO_CHANGES: GSettingsBindFlags get() = 8u

val G_SETTINGS_BIND_INVERT_BOOLEAN: GSettingsBindFlags get() = 16u

typealias GSettingsBindFlagsVar = UIntVarOf<GSettingsBindFlags>

typealias GSettingsBindFlags = UInt


val GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH: GtkSizeRequestMode get() = 0u

val GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT: GtkSizeRequestMode get() = 1u

val GTK_SIZE_REQUEST_CONSTANT_SIZE: GtkSizeRequestMode get() = 2u

typealias GtkSizeRequestModeVar = UIntVarOf<GtkSizeRequestMode>

typealias GtkSizeRequestMode = UInt


val GTK_SCROLL_MINIMUM: GtkScrollablePolicy get() = 0u

val GTK_SCROLL_NATURAL: GtkScrollablePolicy get() = 1u

typealias GtkScrollablePolicyVar = UIntVarOf<GtkScrollablePolicy>

typealias GtkScrollablePolicy = UInt


val GTK_STATE_FLAG_NORMAL: GtkStateFlags get() = 0u

val GTK_STATE_FLAG_ACTIVE: GtkStateFlags get() = 1u

val GTK_STATE_FLAG_PRELIGHT: GtkStateFlags get() = 2u

val GTK_STATE_FLAG_SELECTED: GtkStateFlags get() = 4u

val GTK_STATE_FLAG_INSENSITIVE: GtkStateFlags get() = 8u

val GTK_STATE_FLAG_INCONSISTENT: GtkStateFlags get() = 16u

val GTK_STATE_FLAG_FOCUSED: GtkStateFlags get() = 32u

val GTK_STATE_FLAG_BACKDROP: GtkStateFlags get() = 64u

val GTK_STATE_FLAG_DIR_LTR: GtkStateFlags get() = 128u

val GTK_STATE_FLAG_DIR_RTL: GtkStateFlags get() = 256u

val GTK_STATE_FLAG_LINK: GtkStateFlags get() = 512u

val GTK_STATE_FLAG_VISITED: GtkStateFlags get() = 1024u

val GTK_STATE_FLAG_CHECKED: GtkStateFlags get() = 2048u

val GTK_STATE_FLAG_DROP_ACTIVE: GtkStateFlags get() = 4096u

typealias GtkStateFlagsVar = UIntVarOf<GtkStateFlags>

typealias GtkStateFlags = UInt


val GTK_REGION_EVEN: GtkRegionFlags get() = 1u

val GTK_REGION_ODD: GtkRegionFlags get() = 2u

val GTK_REGION_FIRST: GtkRegionFlags get() = 4u

val GTK_REGION_LAST: GtkRegionFlags get() = 8u

val GTK_REGION_ONLY: GtkRegionFlags get() = 16u

val GTK_REGION_SORTED: GtkRegionFlags get() = 32u

typealias GtkRegionFlagsVar = UIntVarOf<GtkRegionFlags>

typealias GtkRegionFlags = UInt


val GTK_JUNCTION_NONE: GtkJunctionSides get() = 0u

val GTK_JUNCTION_CORNER_TOPLEFT: GtkJunctionSides get() = 1u

val GTK_JUNCTION_CORNER_TOPRIGHT: GtkJunctionSides get() = 2u

val GTK_JUNCTION_CORNER_BOTTOMLEFT: GtkJunctionSides get() = 4u

val GTK_JUNCTION_CORNER_BOTTOMRIGHT: GtkJunctionSides get() = 8u

val GTK_JUNCTION_TOP: GtkJunctionSides get() = 3u

val GTK_JUNCTION_BOTTOM: GtkJunctionSides get() = 12u

val GTK_JUNCTION_LEFT: GtkJunctionSides get() = 5u

val GTK_JUNCTION_RIGHT: GtkJunctionSides get() = 10u

typealias GtkJunctionSidesVar = UIntVarOf<GtkJunctionSides>

typealias GtkJunctionSides = UInt


val GTK_INPUT_HINT_NONE: GtkInputHints get() = 0u

val GTK_INPUT_HINT_SPELLCHECK: GtkInputHints get() = 1u

val GTK_INPUT_HINT_NO_SPELLCHECK: GtkInputHints get() = 2u

val GTK_INPUT_HINT_WORD_COMPLETION: GtkInputHints get() = 4u

val GTK_INPUT_HINT_LOWERCASE: GtkInputHints get() = 8u

val GTK_INPUT_HINT_UPPERCASE_CHARS: GtkInputHints get() = 16u

val GTK_INPUT_HINT_UPPERCASE_WORDS: GtkInputHints get() = 32u

val GTK_INPUT_HINT_UPPERCASE_SENTENCES: GtkInputHints get() = 64u

val GTK_INPUT_HINT_INHIBIT_OSK: GtkInputHints get() = 128u

val GTK_INPUT_HINT_VERTICAL_WRITING: GtkInputHints get() = 256u

val GTK_INPUT_HINT_EMOJI: GtkInputHints get() = 512u

val GTK_INPUT_HINT_NO_EMOJI: GtkInputHints get() = 1024u

typealias GtkInputHintsVar = UIntVarOf<GtkInputHints>

typealias GtkInputHints = UInt


val GTK_ACCEL_VISIBLE: GtkAccelFlags get() = 1u

val GTK_ACCEL_LOCKED: GtkAccelFlags get() = 2u

val GTK_ACCEL_MASK: GtkAccelFlags get() = 7u

typealias GtkAccelFlagsVar = UIntVarOf<GtkAccelFlags>

typealias GtkAccelFlags = UInt


val GDK_SHIFT_MASK: GdkModifierType get() = 1u

val GDK_LOCK_MASK: GdkModifierType get() = 2u

val GDK_CONTROL_MASK: GdkModifierType get() = 4u

val GDK_MOD1_MASK: GdkModifierType get() = 8u

val GDK_MOD2_MASK: GdkModifierType get() = 16u

val GDK_MOD3_MASK: GdkModifierType get() = 32u

val GDK_MOD4_MASK: GdkModifierType get() = 64u

val GDK_MOD5_MASK: GdkModifierType get() = 128u

val GDK_BUTTON1_MASK: GdkModifierType get() = 256u

val GDK_BUTTON2_MASK: GdkModifierType get() = 512u

val GDK_BUTTON3_MASK: GdkModifierType get() = 1024u

val GDK_BUTTON4_MASK: GdkModifierType get() = 2048u

val GDK_BUTTON5_MASK: GdkModifierType get() = 4096u

val GDK_MODIFIER_RESERVED_13_MASK: GdkModifierType get() = 8192u

val GDK_MODIFIER_RESERVED_14_MASK: GdkModifierType get() = 16384u

val GDK_MODIFIER_RESERVED_15_MASK: GdkModifierType get() = 32768u

val GDK_MODIFIER_RESERVED_16_MASK: GdkModifierType get() = 65536u

val GDK_MODIFIER_RESERVED_17_MASK: GdkModifierType get() = 131072u

val GDK_MODIFIER_RESERVED_18_MASK: GdkModifierType get() = 262144u

val GDK_MODIFIER_RESERVED_19_MASK: GdkModifierType get() = 524288u

val GDK_MODIFIER_RESERVED_20_MASK: GdkModifierType get() = 1048576u

val GDK_MODIFIER_RESERVED_21_MASK: GdkModifierType get() = 2097152u

val GDK_MODIFIER_RESERVED_22_MASK: GdkModifierType get() = 4194304u

val GDK_MODIFIER_RESERVED_23_MASK: GdkModifierType get() = 8388608u

val GDK_MODIFIER_RESERVED_24_MASK: GdkModifierType get() = 16777216u

val GDK_MODIFIER_RESERVED_25_MASK: GdkModifierType get() = 33554432u

val GDK_SUPER_MASK: GdkModifierType get() = 67108864u

val GDK_HYPER_MASK: GdkModifierType get() = 134217728u

val GDK_META_MASK: GdkModifierType get() = 268435456u

val GDK_MODIFIER_RESERVED_29_MASK: GdkModifierType get() = 536870912u

val GDK_RELEASE_MASK: GdkModifierType get() = 1073741824u

val GDK_MODIFIER_MASK: GdkModifierType get() = 1543512063u

typealias GdkModifierTypeVar = UIntVarOf<GdkModifierType>

typealias GdkModifierType = UInt


val GTK_RC_FG: GtkRcFlags get() = 1u

val GTK_RC_BG: GtkRcFlags get() = 2u

val GTK_RC_TEXT: GtkRcFlags get() = 4u

val GTK_RC_BASE: GtkRcFlags get() = 8u

typealias GtkRcFlagsVar = UIntVarOf<GtkRcFlags>

typealias GtkRcFlags = UInt


val GDK_NOTHING: GdkEventType get() = -1

val GDK_DELETE: GdkEventType get() = 0

val GDK_DESTROY: GdkEventType get() = 1

val GDK_EXPOSE: GdkEventType get() = 2

val GDK_MOTION_NOTIFY: GdkEventType get() = 3

val GDK_BUTTON_PRESS: GdkEventType get() = 4

val GDK_2BUTTON_PRESS: GdkEventType get() = 5

val GDK_DOUBLE_BUTTON_PRESS: GdkEventType get() = 5

val GDK_3BUTTON_PRESS: GdkEventType get() = 6

val GDK_TRIPLE_BUTTON_PRESS: GdkEventType get() = 6

val GDK_BUTTON_RELEASE: GdkEventType get() = 7

val GDK_KEY_PRESS: GdkEventType get() = 8

val GDK_KEY_RELEASE: GdkEventType get() = 9

val GDK_ENTER_NOTIFY: GdkEventType get() = 10

val GDK_LEAVE_NOTIFY: GdkEventType get() = 11

val GDK_FOCUS_CHANGE: GdkEventType get() = 12

val GDK_CONFIGURE: GdkEventType get() = 13

val GDK_MAP: GdkEventType get() = 14

val GDK_UNMAP: GdkEventType get() = 15

val GDK_PROPERTY_NOTIFY: GdkEventType get() = 16

val GDK_SELECTION_CLEAR: GdkEventType get() = 17

val GDK_SELECTION_REQUEST: GdkEventType get() = 18

val GDK_SELECTION_NOTIFY: GdkEventType get() = 19

val GDK_PROXIMITY_IN: GdkEventType get() = 20

val GDK_PROXIMITY_OUT: GdkEventType get() = 21

val GDK_DRAG_ENTER: GdkEventType get() = 22

val GDK_DRAG_LEAVE: GdkEventType get() = 23

val GDK_DRAG_MOTION: GdkEventType get() = 24

val GDK_DRAG_STATUS: GdkEventType get() = 25

val GDK_DROP_START: GdkEventType get() = 26

val GDK_DROP_FINISHED: GdkEventType get() = 27

val GDK_CLIENT_EVENT: GdkEventType get() = 28

val GDK_VISIBILITY_NOTIFY: GdkEventType get() = 29

val GDK_SCROLL: GdkEventType get() = 31

val GDK_WINDOW_STATE: GdkEventType get() = 32

val GDK_SETTING: GdkEventType get() = 33

val GDK_OWNER_CHANGE: GdkEventType get() = 34

val GDK_GRAB_BROKEN: GdkEventType get() = 35

val GDK_DAMAGE: GdkEventType get() = 36

val GDK_TOUCH_BEGIN: GdkEventType get() = 37

val GDK_TOUCH_UPDATE: GdkEventType get() = 38

val GDK_TOUCH_END: GdkEventType get() = 39

val GDK_TOUCH_CANCEL: GdkEventType get() = 40

val GDK_TOUCHPAD_SWIPE: GdkEventType get() = 41

val GDK_TOUCHPAD_PINCH: GdkEventType get() = 42

val GDK_PAD_BUTTON_PRESS: GdkEventType get() = 43

val GDK_PAD_BUTTON_RELEASE: GdkEventType get() = 44

val GDK_PAD_RING: GdkEventType get() = 45

val GDK_PAD_STRIP: GdkEventType get() = 46

val GDK_PAD_GROUP_MODE: GdkEventType get() = 47

val GDK_EVENT_LAST: GdkEventType get() = 48

typealias GdkEventTypeVar = IntVarOf<GdkEventType>

typealias GdkEventType = Int


val GDK_NOTIFY_ANCESTOR: GdkNotifyType get() = 0u

val GDK_NOTIFY_VIRTUAL: GdkNotifyType get() = 1u

val GDK_NOTIFY_INFERIOR: GdkNotifyType get() = 2u

val GDK_NOTIFY_NONLINEAR: GdkNotifyType get() = 3u

val GDK_NOTIFY_NONLINEAR_VIRTUAL: GdkNotifyType get() = 4u

val GDK_NOTIFY_UNKNOWN: GdkNotifyType get() = 5u

typealias GdkNotifyTypeVar = UIntVarOf<GdkNotifyType>

typealias GdkNotifyType = UInt


val GDK_WINDOW_STATE_WITHDRAWN: GdkWindowState get() = 1u

val GDK_WINDOW_STATE_ICONIFIED: GdkWindowState get() = 2u

val GDK_WINDOW_STATE_MAXIMIZED: GdkWindowState get() = 4u

val GDK_WINDOW_STATE_STICKY: GdkWindowState get() = 8u

val GDK_WINDOW_STATE_FULLSCREEN: GdkWindowState get() = 16u

val GDK_WINDOW_STATE_ABOVE: GdkWindowState get() = 32u

val GDK_WINDOW_STATE_BELOW: GdkWindowState get() = 64u

val GDK_WINDOW_STATE_FOCUSED: GdkWindowState get() = 128u

val GDK_WINDOW_STATE_TILED: GdkWindowState get() = 256u

val GDK_WINDOW_STATE_TOP_TILED: GdkWindowState get() = 512u

val GDK_WINDOW_STATE_TOP_RESIZABLE: GdkWindowState get() = 1024u

val GDK_WINDOW_STATE_RIGHT_TILED: GdkWindowState get() = 2048u

val GDK_WINDOW_STATE_RIGHT_RESIZABLE: GdkWindowState get() = 4096u

val GDK_WINDOW_STATE_BOTTOM_TILED: GdkWindowState get() = 8192u

val GDK_WINDOW_STATE_BOTTOM_RESIZABLE: GdkWindowState get() = 16384u

val GDK_WINDOW_STATE_LEFT_TILED: GdkWindowState get() = 32768u

val GDK_WINDOW_STATE_LEFT_RESIZABLE: GdkWindowState get() = 65536u

typealias GdkWindowStateVar = UIntVarOf<GdkWindowState>

typealias GdkWindowState = UInt


val ATK_ROLE_INVALID: AtkRole get() = 0u

val ATK_ROLE_ACCEL_LABEL: AtkRole get() = 1u

val ATK_ROLE_ALERT: AtkRole get() = 2u

val ATK_ROLE_ANIMATION: AtkRole get() = 3u

val ATK_ROLE_ARROW: AtkRole get() = 4u

val ATK_ROLE_CALENDAR: AtkRole get() = 5u

val ATK_ROLE_CANVAS: AtkRole get() = 6u

val ATK_ROLE_CHECK_BOX: AtkRole get() = 7u

val ATK_ROLE_CHECK_MENU_ITEM: AtkRole get() = 8u

val ATK_ROLE_COLOR_CHOOSER: AtkRole get() = 9u

val ATK_ROLE_COLUMN_HEADER: AtkRole get() = 10u

val ATK_ROLE_COMBO_BOX: AtkRole get() = 11u

val ATK_ROLE_DATE_EDITOR: AtkRole get() = 12u

val ATK_ROLE_DESKTOP_ICON: AtkRole get() = 13u

val ATK_ROLE_DESKTOP_FRAME: AtkRole get() = 14u

val ATK_ROLE_DIAL: AtkRole get() = 15u

val ATK_ROLE_DIALOG: AtkRole get() = 16u

val ATK_ROLE_DIRECTORY_PANE: AtkRole get() = 17u

val ATK_ROLE_DRAWING_AREA: AtkRole get() = 18u

val ATK_ROLE_FILE_CHOOSER: AtkRole get() = 19u

val ATK_ROLE_FILLER: AtkRole get() = 20u

val ATK_ROLE_FONT_CHOOSER: AtkRole get() = 21u

val ATK_ROLE_FRAME: AtkRole get() = 22u

val ATK_ROLE_GLASS_PANE: AtkRole get() = 23u

val ATK_ROLE_HTML_CONTAINER: AtkRole get() = 24u

val ATK_ROLE_ICON: AtkRole get() = 25u

val ATK_ROLE_IMAGE: AtkRole get() = 26u

val ATK_ROLE_INTERNAL_FRAME: AtkRole get() = 27u

val ATK_ROLE_LABEL: AtkRole get() = 28u

val ATK_ROLE_LAYERED_PANE: AtkRole get() = 29u

val ATK_ROLE_LIST: AtkRole get() = 30u

val ATK_ROLE_LIST_ITEM: AtkRole get() = 31u

val ATK_ROLE_MENU: AtkRole get() = 32u

val ATK_ROLE_MENU_BAR: AtkRole get() = 33u

val ATK_ROLE_MENU_ITEM: AtkRole get() = 34u

val ATK_ROLE_OPTION_PANE: AtkRole get() = 35u

val ATK_ROLE_PAGE_TAB: AtkRole get() = 36u

val ATK_ROLE_PAGE_TAB_LIST: AtkRole get() = 37u

val ATK_ROLE_PANEL: AtkRole get() = 38u

val ATK_ROLE_PASSWORD_TEXT: AtkRole get() = 39u

val ATK_ROLE_POPUP_MENU: AtkRole get() = 40u

val ATK_ROLE_PROGRESS_BAR: AtkRole get() = 41u

val ATK_ROLE_PUSH_BUTTON: AtkRole get() = 42u

val ATK_ROLE_RADIO_BUTTON: AtkRole get() = 43u

val ATK_ROLE_RADIO_MENU_ITEM: AtkRole get() = 44u

val ATK_ROLE_ROOT_PANE: AtkRole get() = 45u

val ATK_ROLE_ROW_HEADER: AtkRole get() = 46u

val ATK_ROLE_SCROLL_BAR: AtkRole get() = 47u

val ATK_ROLE_SCROLL_PANE: AtkRole get() = 48u

val ATK_ROLE_SEPARATOR: AtkRole get() = 49u

val ATK_ROLE_SLIDER: AtkRole get() = 50u

val ATK_ROLE_SPLIT_PANE: AtkRole get() = 51u

val ATK_ROLE_SPIN_BUTTON: AtkRole get() = 52u

val ATK_ROLE_STATUSBAR: AtkRole get() = 53u

val ATK_ROLE_TABLE: AtkRole get() = 54u

val ATK_ROLE_TABLE_CELL: AtkRole get() = 55u

val ATK_ROLE_TABLE_COLUMN_HEADER: AtkRole get() = 56u

val ATK_ROLE_TABLE_ROW_HEADER: AtkRole get() = 57u

val ATK_ROLE_TEAR_OFF_MENU_ITEM: AtkRole get() = 58u

val ATK_ROLE_TERMINAL: AtkRole get() = 59u

val ATK_ROLE_TEXT: AtkRole get() = 60u

val ATK_ROLE_TOGGLE_BUTTON: AtkRole get() = 61u

val ATK_ROLE_TOOL_BAR: AtkRole get() = 62u

val ATK_ROLE_TOOL_TIP: AtkRole get() = 63u

val ATK_ROLE_TREE: AtkRole get() = 64u

val ATK_ROLE_TREE_TABLE: AtkRole get() = 65u

val ATK_ROLE_UNKNOWN: AtkRole get() = 66u

val ATK_ROLE_VIEWPORT: AtkRole get() = 67u

val ATK_ROLE_WINDOW: AtkRole get() = 68u

val ATK_ROLE_HEADER: AtkRole get() = 69u

val ATK_ROLE_FOOTER: AtkRole get() = 70u

val ATK_ROLE_PARAGRAPH: AtkRole get() = 71u

val ATK_ROLE_RULER: AtkRole get() = 72u

val ATK_ROLE_APPLICATION: AtkRole get() = 73u

val ATK_ROLE_AUTOCOMPLETE: AtkRole get() = 74u

val ATK_ROLE_EDITBAR: AtkRole get() = 75u

val ATK_ROLE_EMBEDDED: AtkRole get() = 76u

val ATK_ROLE_ENTRY: AtkRole get() = 77u

val ATK_ROLE_CHART: AtkRole get() = 78u

val ATK_ROLE_CAPTION: AtkRole get() = 79u

val ATK_ROLE_DOCUMENT_FRAME: AtkRole get() = 80u

val ATK_ROLE_HEADING: AtkRole get() = 81u

val ATK_ROLE_PAGE: AtkRole get() = 82u

val ATK_ROLE_SECTION: AtkRole get() = 83u

val ATK_ROLE_REDUNDANT_OBJECT: AtkRole get() = 84u

val ATK_ROLE_FORM: AtkRole get() = 85u

val ATK_ROLE_LINK: AtkRole get() = 86u

val ATK_ROLE_INPUT_METHOD_WINDOW: AtkRole get() = 87u

val ATK_ROLE_TABLE_ROW: AtkRole get() = 88u

val ATK_ROLE_TREE_ITEM: AtkRole get() = 89u

val ATK_ROLE_DOCUMENT_SPREADSHEET: AtkRole get() = 90u

val ATK_ROLE_DOCUMENT_PRESENTATION: AtkRole get() = 91u

val ATK_ROLE_DOCUMENT_TEXT: AtkRole get() = 92u

val ATK_ROLE_DOCUMENT_WEB: AtkRole get() = 93u

val ATK_ROLE_DOCUMENT_EMAIL: AtkRole get() = 94u

val ATK_ROLE_COMMENT: AtkRole get() = 95u

val ATK_ROLE_LIST_BOX: AtkRole get() = 96u

val ATK_ROLE_GROUPING: AtkRole get() = 97u

val ATK_ROLE_IMAGE_MAP: AtkRole get() = 98u

val ATK_ROLE_NOTIFICATION: AtkRole get() = 99u

val ATK_ROLE_INFO_BAR: AtkRole get() = 100u

val ATK_ROLE_LEVEL_BAR: AtkRole get() = 101u

val ATK_ROLE_TITLE_BAR: AtkRole get() = 102u

val ATK_ROLE_BLOCK_QUOTE: AtkRole get() = 103u

val ATK_ROLE_AUDIO: AtkRole get() = 104u

val ATK_ROLE_VIDEO: AtkRole get() = 105u

val ATK_ROLE_DEFINITION: AtkRole get() = 106u

val ATK_ROLE_ARTICLE: AtkRole get() = 107u

val ATK_ROLE_LANDMARK: AtkRole get() = 108u

val ATK_ROLE_LOG: AtkRole get() = 109u

val ATK_ROLE_MARQUEE: AtkRole get() = 110u

val ATK_ROLE_MATH: AtkRole get() = 111u

val ATK_ROLE_RATING: AtkRole get() = 112u

val ATK_ROLE_TIMER: AtkRole get() = 113u

val ATK_ROLE_DESCRIPTION_LIST: AtkRole get() = 114u

val ATK_ROLE_DESCRIPTION_TERM: AtkRole get() = 115u

val ATK_ROLE_DESCRIPTION_VALUE: AtkRole get() = 116u

val ATK_ROLE_STATIC: AtkRole get() = 117u

val ATK_ROLE_MATH_FRACTION: AtkRole get() = 118u

val ATK_ROLE_MATH_ROOT: AtkRole get() = 119u

val ATK_ROLE_SUBSCRIPT: AtkRole get() = 120u

val ATK_ROLE_SUPERSCRIPT: AtkRole get() = 121u

val ATK_ROLE_FOOTNOTE: AtkRole get() = 122u

val ATK_ROLE_CONTENT_DELETION: AtkRole get() = 123u

val ATK_ROLE_CONTENT_INSERTION: AtkRole get() = 124u

val ATK_ROLE_LAST_DEFINED: AtkRole get() = 125u

typealias AtkRoleVar = UIntVarOf<AtkRole>

typealias AtkRole = UInt


val GDK_EXPOSURE_MASK: GdkEventMask get() = 2u

val GDK_POINTER_MOTION_MASK: GdkEventMask get() = 4u

val GDK_POINTER_MOTION_HINT_MASK: GdkEventMask get() = 8u

val GDK_BUTTON_MOTION_MASK: GdkEventMask get() = 16u

val GDK_BUTTON1_MOTION_MASK: GdkEventMask get() = 32u

val GDK_BUTTON2_MOTION_MASK: GdkEventMask get() = 64u

val GDK_BUTTON3_MOTION_MASK: GdkEventMask get() = 128u

val GDK_BUTTON_PRESS_MASK: GdkEventMask get() = 256u

val GDK_BUTTON_RELEASE_MASK: GdkEventMask get() = 512u

val GDK_KEY_PRESS_MASK: GdkEventMask get() = 1024u

val GDK_KEY_RELEASE_MASK: GdkEventMask get() = 2048u

val GDK_ENTER_NOTIFY_MASK: GdkEventMask get() = 4096u

val GDK_LEAVE_NOTIFY_MASK: GdkEventMask get() = 8192u

val GDK_FOCUS_CHANGE_MASK: GdkEventMask get() = 16384u

val GDK_STRUCTURE_MASK: GdkEventMask get() = 32768u

val GDK_PROPERTY_CHANGE_MASK: GdkEventMask get() = 65536u

val GDK_VISIBILITY_NOTIFY_MASK: GdkEventMask get() = 131072u

val GDK_PROXIMITY_IN_MASK: GdkEventMask get() = 262144u

val GDK_PROXIMITY_OUT_MASK: GdkEventMask get() = 524288u

val GDK_SUBSTRUCTURE_MASK: GdkEventMask get() = 1048576u

val GDK_SCROLL_MASK: GdkEventMask get() = 2097152u

val GDK_TOUCH_MASK: GdkEventMask get() = 4194304u

val GDK_SMOOTH_SCROLL_MASK: GdkEventMask get() = 8388608u

val GDK_TOUCHPAD_GESTURE_MASK: GdkEventMask get() = 16777216u

val GDK_TABLET_PAD_MASK: GdkEventMask get() = 33554432u

val GDK_ALL_EVENTS_MASK: GdkEventMask get() = 67108862u

typealias GdkEventMaskVar = UIntVarOf<GdkEventMask>

typealias GdkEventMask = UInt


val GTK_APPLICATION_INHIBIT_LOGOUT: GtkApplicationInhibitFlags get() = 1u

val GTK_APPLICATION_INHIBIT_SWITCH: GtkApplicationInhibitFlags get() = 2u

val GTK_APPLICATION_INHIBIT_SUSPEND: GtkApplicationInhibitFlags get() = 4u

val GTK_APPLICATION_INHIBIT_IDLE: GtkApplicationInhibitFlags get() = 8u

typealias GtkApplicationInhibitFlagsVar = UIntVarOf<GtkApplicationInhibitFlags>

typealias GtkApplicationInhibitFlags = UInt


val GDK_GRAVITY_NORTH_WEST: GdkGravity get() = 1u

val GDK_GRAVITY_NORTH: GdkGravity get() = 2u

val GDK_GRAVITY_NORTH_EAST: GdkGravity get() = 3u

val GDK_GRAVITY_WEST: GdkGravity get() = 4u

val GDK_GRAVITY_CENTER: GdkGravity get() = 5u

val GDK_GRAVITY_EAST: GdkGravity get() = 6u

val GDK_GRAVITY_SOUTH_WEST: GdkGravity get() = 7u

val GDK_GRAVITY_SOUTH: GdkGravity get() = 8u

val GDK_GRAVITY_SOUTH_EAST: GdkGravity get() = 9u

val GDK_GRAVITY_STATIC: GdkGravity get() = 10u

typealias GdkGravityVar = UIntVarOf<GdkGravity>

typealias GdkGravity = UInt


val GDK_HINT_POS: GdkWindowHints get() = 1u

val GDK_HINT_MIN_SIZE: GdkWindowHints get() = 2u

val GDK_HINT_MAX_SIZE: GdkWindowHints get() = 4u

val GDK_HINT_BASE_SIZE: GdkWindowHints get() = 8u

val GDK_HINT_ASPECT: GdkWindowHints get() = 16u

val GDK_HINT_RESIZE_INC: GdkWindowHints get() = 32u

val GDK_HINT_WIN_GRAVITY: GdkWindowHints get() = 64u

val GDK_HINT_USER_POS: GdkWindowHints get() = 128u

val GDK_HINT_USER_SIZE: GdkWindowHints get() = 256u

typealias GdkWindowHintsVar = UIntVarOf<GdkWindowHints>

typealias GdkWindowHints = UInt


val GTK_DIALOG_MODAL: GtkDialogFlags get() = 1u

val GTK_DIALOG_DESTROY_WITH_PARENT: GtkDialogFlags get() = 2u

val GTK_DIALOG_USE_HEADER_BAR: GtkDialogFlags get() = 4u

typealias GtkDialogFlagsVar = UIntVarOf<GtkDialogFlags>

typealias GtkDialogFlags = UInt


val GTK_RESPONSE_NONE: GtkResponseType get() = -1

val GTK_RESPONSE_REJECT: GtkResponseType get() = -2

val GTK_RESPONSE_ACCEPT: GtkResponseType get() = -3

val GTK_RESPONSE_DELETE_EVENT: GtkResponseType get() = -4

val GTK_RESPONSE_OK: GtkResponseType get() = -5

val GTK_RESPONSE_CANCEL: GtkResponseType get() = -6

val GTK_RESPONSE_CLOSE: GtkResponseType get() = -7

val GTK_RESPONSE_YES: GtkResponseType get() = -8

val GTK_RESPONSE_NO: GtkResponseType get() = -9

val GTK_RESPONSE_APPLY: GtkResponseType get() = -10

val GTK_RESPONSE_HELP: GtkResponseType get() = -11

typealias GtkResponseTypeVar = IntVarOf<GtkResponseType>

typealias GtkResponseType = Int


val G_TOKEN_EOF: GTokenType get() = 0u

val G_TOKEN_LEFT_PAREN: GTokenType get() = 40u

val G_TOKEN_RIGHT_PAREN: GTokenType get() = 41u

val G_TOKEN_LEFT_CURLY: GTokenType get() = 123u

val G_TOKEN_RIGHT_CURLY: GTokenType get() = 125u

val G_TOKEN_LEFT_BRACE: GTokenType get() = 91u

val G_TOKEN_RIGHT_BRACE: GTokenType get() = 93u

val G_TOKEN_EQUAL_SIGN: GTokenType get() = 61u

val G_TOKEN_COMMA: GTokenType get() = 44u

val G_TOKEN_NONE: GTokenType get() = 256u

val G_TOKEN_ERROR: GTokenType get() = 257u

val G_TOKEN_CHAR: GTokenType get() = 258u

val G_TOKEN_BINARY: GTokenType get() = 259u

val G_TOKEN_OCTAL: GTokenType get() = 260u

val G_TOKEN_INT: GTokenType get() = 261u

val G_TOKEN_HEX: GTokenType get() = 262u

val G_TOKEN_FLOAT: GTokenType get() = 263u

val G_TOKEN_STRING: GTokenType get() = 264u

val G_TOKEN_SYMBOL: GTokenType get() = 265u

val G_TOKEN_IDENTIFIER: GTokenType get() = 266u

val G_TOKEN_IDENTIFIER_NULL: GTokenType get() = 267u

val G_TOKEN_COMMENT_SINGLE: GTokenType get() = 268u

val G_TOKEN_COMMENT_MULTI: GTokenType get() = 269u

val G_TOKEN_LAST: GTokenType get() = 270u

typealias GTokenTypeVar = UIntVarOf<GTokenType>

typealias GTokenType = UInt


val GTK_TREE_MODEL_ITERS_PERSIST: GtkTreeModelFlags get() = 1u

val GTK_TREE_MODEL_LIST_ONLY: GtkTreeModelFlags get() = 2u

typealias GtkTreeModelFlagsVar = UIntVarOf<GtkTreeModelFlags>

typealias GtkTreeModelFlags = UInt


val GTK_CELL_RENDERER_SELECTED: GtkCellRendererState get() = 1u

val GTK_CELL_RENDERER_PRELIT: GtkCellRendererState get() = 2u

val GTK_CELL_RENDERER_INSENSITIVE: GtkCellRendererState get() = 4u

val GTK_CELL_RENDERER_SORTED: GtkCellRendererState get() = 8u

val GTK_CELL_RENDERER_FOCUSED: GtkCellRendererState get() = 16u

val GTK_CELL_RENDERER_EXPANDABLE: GtkCellRendererState get() = 32u

val GTK_CELL_RENDERER_EXPANDED: GtkCellRendererState get() = 64u

typealias GtkCellRendererStateVar = UIntVarOf<GtkCellRendererState>

typealias GtkCellRendererState = UInt


val GTK_TEXT_SEARCH_VISIBLE_ONLY: GtkTextSearchFlags get() = 1u

val GTK_TEXT_SEARCH_TEXT_ONLY: GtkTextSearchFlags get() = 2u

val GTK_TEXT_SEARCH_CASE_INSENSITIVE: GtkTextSearchFlags get() = 4u

typealias GtkTextSearchFlagsVar = UIntVarOf<GtkTextSearchFlags>

typealias GtkTextSearchFlags = UInt


val GTK_TARGET_SAME_APP: GtkTargetFlags get() = 1u

val GTK_TARGET_SAME_WIDGET: GtkTargetFlags get() = 2u

val GTK_TARGET_OTHER_APP: GtkTargetFlags get() = 4u

val GTK_TARGET_OTHER_WIDGET: GtkTargetFlags get() = 8u

typealias GtkTargetFlagsVar = UIntVarOf<GtkTargetFlags>

typealias GtkTargetFlags = UInt


val GDK_ACTION_DEFAULT: GdkDragAction get() = 1u

val GDK_ACTION_COPY: GdkDragAction get() = 2u

val GDK_ACTION_MOVE: GdkDragAction get() = 4u

val GDK_ACTION_LINK: GdkDragAction get() = 8u

val GDK_ACTION_PRIVATE: GdkDragAction get() = 16u

val GDK_ACTION_ASK: GdkDragAction get() = 32u

typealias GdkDragActionVar = UIntVarOf<GdkDragAction>

typealias GdkDragAction = UInt


val GTK_BUTTONBOX_SPREAD: GtkButtonBoxStyle get() = 1u

val GTK_BUTTONBOX_EDGE: GtkButtonBoxStyle get() = 2u

val GTK_BUTTONBOX_START: GtkButtonBoxStyle get() = 3u

val GTK_BUTTONBOX_END: GtkButtonBoxStyle get() = 4u

val GTK_BUTTONBOX_CENTER: GtkButtonBoxStyle get() = 5u

val GTK_BUTTONBOX_EXPAND: GtkButtonBoxStyle get() = 6u

typealias GtkButtonBoxStyleVar = UIntVarOf<GtkButtonBoxStyle>

typealias GtkButtonBoxStyle = UInt


val GTK_CALENDAR_SHOW_HEADING: GtkCalendarDisplayOptions get() = 1u

val GTK_CALENDAR_SHOW_DAY_NAMES: GtkCalendarDisplayOptions get() = 2u

val GTK_CALENDAR_NO_MONTH_CHANGE: GtkCalendarDisplayOptions get() = 4u

val GTK_CALENDAR_SHOW_WEEK_NUMBERS: GtkCalendarDisplayOptions get() = 8u

val GTK_CALENDAR_SHOW_DETAILS: GtkCalendarDisplayOptions get() = 32u

typealias GtkCalendarDisplayOptionsVar = UIntVarOf<GtkCalendarDisplayOptions>

typealias GtkCalendarDisplayOptions = UInt


val GTK_DEBUG_MISC: GtkDebugFlag get() = 1u

val GTK_DEBUG_PLUGSOCKET: GtkDebugFlag get() = 2u

val GTK_DEBUG_TEXT: GtkDebugFlag get() = 4u

val GTK_DEBUG_TREE: GtkDebugFlag get() = 8u

val GTK_DEBUG_UPDATES: GtkDebugFlag get() = 16u

val GTK_DEBUG_KEYBINDINGS: GtkDebugFlag get() = 32u

val GTK_DEBUG_MULTIHEAD: GtkDebugFlag get() = 64u

val GTK_DEBUG_MODULES: GtkDebugFlag get() = 128u

val GTK_DEBUG_GEOMETRY: GtkDebugFlag get() = 256u

val GTK_DEBUG_ICONTHEME: GtkDebugFlag get() = 512u

val GTK_DEBUG_PRINTING: GtkDebugFlag get() = 1024u

val GTK_DEBUG_BUILDER: GtkDebugFlag get() = 2048u

val GTK_DEBUG_SIZE_REQUEST: GtkDebugFlag get() = 4096u

val GTK_DEBUG_NO_CSS_CACHE: GtkDebugFlag get() = 8192u

val GTK_DEBUG_BASELINES: GtkDebugFlag get() = 16384u

val GTK_DEBUG_PIXEL_CACHE: GtkDebugFlag get() = 32768u

val GTK_DEBUG_NO_PIXEL_CACHE: GtkDebugFlag get() = 65536u

val GTK_DEBUG_INTERACTIVE: GtkDebugFlag get() = 131072u

val GTK_DEBUG_TOUCHSCREEN: GtkDebugFlag get() = 262144u

val GTK_DEBUG_ACTIONS: GtkDebugFlag get() = 524288u

val GTK_DEBUG_RESIZE: GtkDebugFlag get() = 1048576u

val GTK_DEBUG_LAYOUT: GtkDebugFlag get() = 2097152u

typealias GtkDebugFlagVar = UIntVarOf<GtkDebugFlag>

typealias GtkDebugFlag = UInt


val GTK_DEST_DEFAULT_MOTION: GtkDestDefaults get() = 1u

val GTK_DEST_DEFAULT_HIGHLIGHT: GtkDestDefaults get() = 2u

val GTK_DEST_DEFAULT_DROP: GtkDestDefaults get() = 4u

val GTK_DEST_DEFAULT_ALL: GtkDestDefaults get() = 7u

typealias GtkDestDefaultsVar = UIntVarOf<GtkDestDefaults>

typealias GtkDestDefaults = UInt


val GDK_DRAG_PROTO_NONE: GdkDragProtocol get() = 0u

val GDK_DRAG_PROTO_MOTIF: GdkDragProtocol get() = 1u

val GDK_DRAG_PROTO_XDND: GdkDragProtocol get() = 2u

val GDK_DRAG_PROTO_ROOTWIN: GdkDragProtocol get() = 3u

val GDK_DRAG_PROTO_WIN32_DROPFILES: GdkDragProtocol get() = 4u

val GDK_DRAG_PROTO_OLE2: GdkDragProtocol get() = 5u

val GDK_DRAG_PROTO_LOCAL: GdkDragProtocol get() = 6u

val GDK_DRAG_PROTO_WAYLAND: GdkDragProtocol get() = 7u

typealias GdkDragProtocolVar = UIntVarOf<GdkDragProtocol>

typealias GdkDragProtocol = UInt


val GTK_EVENT_CONTROLLER_SCROLL_NONE: GtkEventControllerScrollFlags get() = 0u

val GTK_EVENT_CONTROLLER_SCROLL_VERTICAL: GtkEventControllerScrollFlags get() = 1u

val GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL: GtkEventControllerScrollFlags get() = 2u

val GTK_EVENT_CONTROLLER_SCROLL_DISCRETE: GtkEventControllerScrollFlags get() = 4u

val GTK_EVENT_CONTROLLER_SCROLL_KINETIC: GtkEventControllerScrollFlags get() = 8u

val GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES: GtkEventControllerScrollFlags get() = 3u

typealias GtkEventControllerScrollFlagsVar = UIntVarOf<GtkEventControllerScrollFlags>

typealias GtkEventControllerScrollFlags = UInt


val GTK_FILE_FILTER_FILENAME: GtkFileFilterFlags get() = 1u

val GTK_FILE_FILTER_URI: GtkFileFilterFlags get() = 2u

val GTK_FILE_FILTER_DISPLAY_NAME: GtkFileFilterFlags get() = 4u

val GTK_FILE_FILTER_MIME_TYPE: GtkFileFilterFlags get() = 8u

typealias GtkFileFilterFlagsVar = UIntVarOf<GtkFileFilterFlags>

typealias GtkFileFilterFlags = UInt


val GTK_FONT_CHOOSER_LEVEL_FAMILY: GtkFontChooserLevel get() = 0u

val GTK_FONT_CHOOSER_LEVEL_STYLE: GtkFontChooserLevel get() = 1u

val GTK_FONT_CHOOSER_LEVEL_SIZE: GtkFontChooserLevel get() = 2u

val GTK_FONT_CHOOSER_LEVEL_VARIATIONS: GtkFontChooserLevel get() = 4u

val GTK_FONT_CHOOSER_LEVEL_FEATURES: GtkFontChooserLevel get() = 8u

typealias GtkFontChooserLevelVar = UIntVarOf<GtkFontChooserLevel>

typealias GtkFontChooserLevel = UInt


val GTK_STYLE_CONTEXT_PRINT_NONE: GtkStyleContextPrintFlags get() = 0u

val GTK_STYLE_CONTEXT_PRINT_RECURSE: GtkStyleContextPrintFlags get() = 1u

val GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE: GtkStyleContextPrintFlags get() = 2u

typealias GtkStyleContextPrintFlagsVar = UIntVarOf<GtkStyleContextPrintFlags>

typealias GtkStyleContextPrintFlags = UInt


val GTK_ICON_LOOKUP_NO_SVG: GtkIconLookupFlags get() = 1u

val GTK_ICON_LOOKUP_FORCE_SVG: GtkIconLookupFlags get() = 2u

val GTK_ICON_LOOKUP_USE_BUILTIN: GtkIconLookupFlags get() = 4u

val GTK_ICON_LOOKUP_GENERIC_FALLBACK: GtkIconLookupFlags get() = 8u

val GTK_ICON_LOOKUP_FORCE_SIZE: GtkIconLookupFlags get() = 16u

val GTK_ICON_LOOKUP_FORCE_REGULAR: GtkIconLookupFlags get() = 32u

val GTK_ICON_LOOKUP_FORCE_SYMBOLIC: GtkIconLookupFlags get() = 64u

val GTK_ICON_LOOKUP_DIR_LTR: GtkIconLookupFlags get() = 128u

val GTK_ICON_LOOKUP_DIR_RTL: GtkIconLookupFlags get() = 256u

typealias GtkIconLookupFlagsVar = UIntVarOf<GtkIconLookupFlags>

typealias GtkIconLookupFlags = UInt


val GTK_PLACES_OPEN_NORMAL: GtkPlacesOpenFlags get() = 1u

val GTK_PLACES_OPEN_NEW_TAB: GtkPlacesOpenFlags get() = 2u

val GTK_PLACES_OPEN_NEW_WINDOW: GtkPlacesOpenFlags get() = 4u

typealias GtkPlacesOpenFlagsVar = UIntVarOf<GtkPlacesOpenFlags>

typealias GtkPlacesOpenFlags = UInt


val GTK_RECENT_FILTER_URI: GtkRecentFilterFlags get() = 1u

val GTK_RECENT_FILTER_DISPLAY_NAME: GtkRecentFilterFlags get() = 2u

val GTK_RECENT_FILTER_MIME_TYPE: GtkRecentFilterFlags get() = 4u

val GTK_RECENT_FILTER_APPLICATION: GtkRecentFilterFlags get() = 8u

val GTK_RECENT_FILTER_GROUP: GtkRecentFilterFlags get() = 16u

val GTK_RECENT_FILTER_AGE: GtkRecentFilterFlags get() = 32u

typealias GtkRecentFilterFlagsVar = UIntVarOf<GtkRecentFilterFlags>

typealias GtkRecentFilterFlags = UInt


val GTK_RECENT_SORT_NONE: GtkRecentSortType get() = 0u

val GTK_RECENT_SORT_MRU: GtkRecentSortType get() = 1u

val GTK_RECENT_SORT_LRU: GtkRecentSortType get() = 2u

val GTK_RECENT_SORT_CUSTOM: GtkRecentSortType get() = 3u

typealias GtkRecentSortTypeVar = UIntVarOf<GtkRecentSortType>

typealias GtkRecentSortType = UInt


val GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS: GtkTextBufferTargetInfo get() = -1

val GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT: GtkTextBufferTargetInfo get() = -2

val GTK_TEXT_BUFFER_TARGET_INFO_TEXT: GtkTextBufferTargetInfo get() = -3

typealias GtkTextBufferTargetInfoVar = IntVarOf<GtkTextBufferTargetInfo>

typealias GtkTextBufferTargetInfo = Int


val GTK_TOOL_PALETTE_DRAG_ITEMS: GtkToolPaletteDragTargets get() = 1u

val GTK_TOOL_PALETTE_DRAG_GROUPS: GtkToolPaletteDragTargets get() = 2u

typealias GtkToolPaletteDragTargetsVar = UIntVarOf<GtkToolPaletteDragTargets>

typealias GtkToolPaletteDragTargets = UInt
@SymbolName("libgtk3_kniBridge0")
private external fun kniBridge0(): Unit
@SymbolName("libgtk3_kniBridge1")
private external fun kniBridge1(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge2")
private external fun kniBridge2(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge3")
private external fun kniBridge3(p0: ULong): UInt
@SymbolName("libgtk3_kniBridge4")
private external fun kniBridge4(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge5")
private external fun kniBridge5(p0: ULong): ULong
@SymbolName("libgtk3_kniBridge6")
private external fun kniBridge6(p0: ULong): UInt
@SymbolName("libgtk3_kniBridge7")
private external fun kniBridge7(p0: ULong, p1: ULong): ULong
@SymbolName("libgtk3_kniBridge8")
private external fun kniBridge8(p0: ULong, p1: ULong): Int
@SymbolName("libgtk3_kniBridge9")
private external fun kniBridge9(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge10")
private external fun kniBridge10(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge11")
private external fun kniBridge11(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge12")
private external fun kniBridge12(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge13")
private external fun kniBridge13(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge14")
private external fun kniBridge14(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge15")
private external fun kniBridge15(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge16")
private external fun kniBridge16(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge17")
private external fun kniBridge17(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge18")
private external fun kniBridge18(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge19")
private external fun kniBridge19(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge20")
private external fun kniBridge20(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge21")
private external fun kniBridge21(p0: ULong, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge22")
private external fun kniBridge22(p0: ULong, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge23")
private external fun kniBridge23(p0: ULong, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge24")
private external fun kniBridge24(p0: ULong): Int
@SymbolName("libgtk3_kniBridge25")
private external fun kniBridge25(p0: ULong, p1: NativePtr, p2: NativePtr, p3: UInt): ULong
@SymbolName("libgtk3_kniBridge26")
private external fun kniBridge26(p0: ULong, p1: NativePtr, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr, p6: UInt): ULong
@SymbolName("libgtk3_kniBridge27")
private external fun kniBridge27(p0: ULong, p1: NativePtr, p2: NativePtr, p3: UInt): ULong
@SymbolName("libgtk3_kniBridge28")
private external fun kniBridge28(p0: ULong, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): ULong
@SymbolName("libgtk3_kniBridge29")
private external fun kniBridge29(p0: ULong, p1: ULong, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge30")
private external fun kniBridge30(p0: ULong, p1: ULong, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge31")
private external fun kniBridge31(p0: ULong, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge32")
private external fun kniBridge32(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge33")
private external fun kniBridge33(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge34")
private external fun kniBridge34(p0: ULong, p1: ULong): Int
@SymbolName("libgtk3_kniBridge35")
private external fun kniBridge35(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge36")
private external fun kniBridge36(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge37")
private external fun kniBridge37(p0: ULong, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge38")
private external fun kniBridge38(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge39")
private external fun kniBridge39(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge40")
private external fun kniBridge40(p0: ULong): Unit
@SymbolName("libgtk3_kniBridge41")
private external fun kniBridge41(): UInt
@SymbolName("libgtk3_kniBridge42")
private external fun kniBridge42(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge43")
private external fun kniBridge43(p0: ULong, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge44")
private external fun kniBridge44(): ULong
@SymbolName("libgtk3_kniBridge45")
private external fun kniBridge45(p0: ULong): ULong
@SymbolName("libgtk3_kniBridge46")
private external fun kniBridge46(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge47")
private external fun kniBridge47(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge48")
private external fun kniBridge48(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge49")
private external fun kniBridge49(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge50")
private external fun kniBridge50(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge51")
private external fun kniBridge51(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge52")
private external fun kniBridge52(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge53")
private external fun kniBridge53(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge54")
private external fun kniBridge54(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge55")
private external fun kniBridge55(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge56")
private external fun kniBridge56(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge57")
private external fun kniBridge57(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge58")
private external fun kniBridge58(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge59")
private external fun kniBridge59(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge60")
private external fun kniBridge60(p0: ULong): Int
@SymbolName("libgtk3_kniBridge61")
private external fun kniBridge61(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge62")
private external fun kniBridge62(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge63")
private external fun kniBridge63(p0: ULong, p1: UInt): Int
@SymbolName("libgtk3_kniBridge64")
private external fun kniBridge64(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge65")
private external fun kniBridge65(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge66")
private external fun kniBridge66(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge67")
private external fun kniBridge67(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge68")
private external fun kniBridge68(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge69")
private external fun kniBridge69(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge70")
private external fun kniBridge70(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge71")
private external fun kniBridge71(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge72")
private external fun kniBridge72(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge73")
private external fun kniBridge73(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge74")
private external fun kniBridge74(p0: ULong, p1: ULong): Int
@SymbolName("libgtk3_kniBridge75")
private external fun kniBridge75(p0: ULong, p1: ULong): Int
@SymbolName("libgtk3_kniBridge76")
private external fun kniBridge76(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge77")
private external fun kniBridge77(p0: ULong, p1: ULong, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge78")
private external fun kniBridge78(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge79")
private external fun kniBridge79(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge80")
private external fun kniBridge80(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge81")
private external fun kniBridge81(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge82")
private external fun kniBridge82(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge83")
private external fun kniBridge83(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge84")
private external fun kniBridge84(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge85")
private external fun kniBridge85(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge86")
private external fun kniBridge86(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge87")
private external fun kniBridge87(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge88")
private external fun kniBridge88(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge89")
private external fun kniBridge89(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge90")
private external fun kniBridge90(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libgtk3_kniBridge91")
private external fun kniBridge91(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge92")
private external fun kniBridge92(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge93")
private external fun kniBridge93(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge94")
private external fun kniBridge94(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge95")
private external fun kniBridge95(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge96")
private external fun kniBridge96(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge97")
private external fun kniBridge97(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge98")
private external fun kniBridge98(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge99")
private external fun kniBridge99(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge100")
private external fun kniBridge100(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge101")
private external fun kniBridge101(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge102")
private external fun kniBridge102(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge103")
private external fun kniBridge103(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libgtk3_kniBridge104")
private external fun kniBridge104(p0: ULong, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge105")
private external fun kniBridge105(p0: Int): NativePtr
@SymbolName("libgtk3_kniBridge106")
private external fun kniBridge106(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libgtk3_kniBridge107")
private external fun kniBridge107(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge108")
private external fun kniBridge108(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int): NativePtr
@SymbolName("libgtk3_kniBridge109")
private external fun kniBridge109(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge110")
private external fun kniBridge110(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge111")
private external fun kniBridge111(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge112")
private external fun kniBridge112(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge113")
private external fun kniBridge113(p0: ULong, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge114")
private external fun kniBridge114(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge115")
private external fun kniBridge115(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge116")
private external fun kniBridge116(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge117")
private external fun kniBridge117(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge118")
private external fun kniBridge118(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge119")
private external fun kniBridge119(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge120")
private external fun kniBridge120(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge121")
private external fun kniBridge121(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge122")
private external fun kniBridge122(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge123")
private external fun kniBridge123(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge124")
private external fun kniBridge124(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge125")
private external fun kniBridge125(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge126")
private external fun kniBridge126(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge127")
private external fun kniBridge127(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge128")
private external fun kniBridge128(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge129")
private external fun kniBridge129(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge130")
private external fun kniBridge130(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge131")
private external fun kniBridge131(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge132")
private external fun kniBridge132(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge133")
private external fun kniBridge133(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge134")
private external fun kniBridge134(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge135")
private external fun kniBridge135(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge136")
private external fun kniBridge136(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge137")
private external fun kniBridge137(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge138")
private external fun kniBridge138(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge139")
private external fun kniBridge139(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge140")
private external fun kniBridge140(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge141")
private external fun kniBridge141(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge142")
private external fun kniBridge142(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge143")
private external fun kniBridge143(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge144")
private external fun kniBridge144(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge145")
private external fun kniBridge145(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge146")
private external fun kniBridge146(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge147")
private external fun kniBridge147(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge148")
private external fun kniBridge148(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge149")
private external fun kniBridge149(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge150")
private external fun kniBridge150(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge151")
private external fun kniBridge151(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge152")
private external fun kniBridge152(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge153")
private external fun kniBridge153(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge154")
private external fun kniBridge154(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge155")
private external fun kniBridge155(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge156")
private external fun kniBridge156(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge157")
private external fun kniBridge157(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge158")
private external fun kniBridge158(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge159")
private external fun kniBridge159(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge160")
private external fun kniBridge160(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge161")
private external fun kniBridge161(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge162")
private external fun kniBridge162(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge163")
private external fun kniBridge163(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge164")
private external fun kniBridge164(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge165")
private external fun kniBridge165(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge166")
private external fun kniBridge166(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge167")
private external fun kniBridge167(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge168")
private external fun kniBridge168(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge169")
private external fun kniBridge169(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge170")
private external fun kniBridge170(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge171")
private external fun kniBridge171(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge172")
private external fun kniBridge172(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge173")
private external fun kniBridge173(p0: NativePtr, p1: ULong, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: ULong, p8: UInt, p9: NativePtr): UInt
@SymbolName("libgtk3_kniBridge174")
private external fun kniBridge174(p0: NativePtr, p1: ULong, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: ULong, p8: UInt, p9: NativePtr): UInt
@SymbolName("libgtk3_kniBridge175")
private external fun kniBridge175(p0: UInt, p1: ULong, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge176")
private external fun kniBridge176(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge177")
private external fun kniBridge177(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge178")
private external fun kniBridge178(p0: NativePtr, p1: ULong): UInt
@SymbolName("libgtk3_kniBridge179")
private external fun kniBridge179(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge180")
private external fun kniBridge180(p0: UInt, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge181")
private external fun kniBridge181(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge182")
private external fun kniBridge182(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libgtk3_kniBridge183")
private external fun kniBridge183(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge184")
private external fun kniBridge184(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge185")
private external fun kniBridge185(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge186")
private external fun kniBridge186(p0: UInt, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): ULong
@SymbolName("libgtk3_kniBridge187")
private external fun kniBridge187(p0: UInt, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge188")
private external fun kniBridge188(p0: NativePtr, p1: UInt, p2: UInt, p3: Int): Int
@SymbolName("libgtk3_kniBridge189")
private external fun kniBridge189(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr, p4: Int): ULong
@SymbolName("libgtk3_kniBridge190")
private external fun kniBridge190(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): ULong
@SymbolName("libgtk3_kniBridge191")
private external fun kniBridge191(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt): ULong
@SymbolName("libgtk3_kniBridge192")
private external fun kniBridge192(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge193")
private external fun kniBridge193(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge194")
private external fun kniBridge194(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge195")
private external fun kniBridge195(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge196")
private external fun kniBridge196(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): ULong
@SymbolName("libgtk3_kniBridge197")
private external fun kniBridge197(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge198")
private external fun kniBridge198(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge199")
private external fun kniBridge199(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge200")
private external fun kniBridge200(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge201")
private external fun kniBridge201(p0: UInt, p1: ULong, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge202")
private external fun kniBridge202(p0: NativePtr, p1: ULong, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge203")
private external fun kniBridge203(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge204")
private external fun kniBridge204(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge205")
private external fun kniBridge205(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge206")
private external fun kniBridge206(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge207")
private external fun kniBridge207(p0: ULong): Unit
@SymbolName("libgtk3_kniBridge208")
private external fun kniBridge208(): ULong
@SymbolName("libgtk3_kniBridge209")
private external fun kniBridge209(): ULong
@SymbolName("libgtk3_kniBridge210")
private external fun kniBridge210(): ULong
@SymbolName("libgtk3_kniBridge211")
private external fun kniBridge211(): ULong
@SymbolName("libgtk3_kniBridge212")
private external fun kniBridge212(): ULong
@SymbolName("libgtk3_kniBridge213")
private external fun kniBridge213(): ULong
@SymbolName("libgtk3_kniBridge214")
private external fun kniBridge214(): ULong
@SymbolName("libgtk3_kniBridge215")
private external fun kniBridge215(): ULong
@SymbolName("libgtk3_kniBridge216")
private external fun kniBridge216(): ULong
@SymbolName("libgtk3_kniBridge217")
private external fun kniBridge217(): ULong
@SymbolName("libgtk3_kniBridge218")
private external fun kniBridge218(): ULong
@SymbolName("libgtk3_kniBridge219")
private external fun kniBridge219(): ULong
@SymbolName("libgtk3_kniBridge220")
private external fun kniBridge220(): ULong
@SymbolName("libgtk3_kniBridge221")
private external fun kniBridge221(): ULong
@SymbolName("libgtk3_kniBridge222")
private external fun kniBridge222(): ULong
@SymbolName("libgtk3_kniBridge223")
private external fun kniBridge223(): ULong
@SymbolName("libgtk3_kniBridge224")
private external fun kniBridge224(): ULong
@SymbolName("libgtk3_kniBridge225")
private external fun kniBridge225(): ULong
@SymbolName("libgtk3_kniBridge226")
private external fun kniBridge226(): ULong
@SymbolName("libgtk3_kniBridge227")
private external fun kniBridge227(): ULong
@SymbolName("libgtk3_kniBridge228")
private external fun kniBridge228(): ULong
@SymbolName("libgtk3_kniBridge229")
private external fun kniBridge229(): ULong
@SymbolName("libgtk3_kniBridge230")
private external fun kniBridge230(): ULong
@SymbolName("libgtk3_kniBridge231")
private external fun kniBridge231(): ULong
@SymbolName("libgtk3_kniBridge232")
private external fun kniBridge232(): ULong
@SymbolName("libgtk3_kniBridge233")
private external fun kniBridge233(): ULong
@SymbolName("libgtk3_kniBridge234")
private external fun kniBridge234(): ULong
@SymbolName("libgtk3_kniBridge235")
private external fun kniBridge235(): ULong
@SymbolName("libgtk3_kniBridge236")
private external fun kniBridge236(): ULong
@SymbolName("libgtk3_kniBridge237")
private external fun kniBridge237(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge238")
private external fun kniBridge238(p0: ULong, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge239")
private external fun kniBridge239(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge240")
private external fun kniBridge240(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge241")
private external fun kniBridge241(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge242")
private external fun kniBridge242(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge243")
private external fun kniBridge243(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge244")
private external fun kniBridge244(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge245")
private external fun kniBridge245(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("libgtk3_kniBridge246")
private external fun kniBridge246(): ULong
@SymbolName("libgtk3_kniBridge247")
private external fun kniBridge247(): ULong
@SymbolName("libgtk3_kniBridge248")
private external fun kniBridge248(): ULong
@SymbolName("libgtk3_kniBridge249")
private external fun kniBridge249(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge250")
private external fun kniBridge250(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge251")
private external fun kniBridge251(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge252")
private external fun kniBridge252(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge253")
private external fun kniBridge253(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge254")
private external fun kniBridge254(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge255")
private external fun kniBridge255(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge256")
private external fun kniBridge256(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge257")
private external fun kniBridge257(): ULong
@SymbolName("libgtk3_kniBridge258")
private external fun kniBridge258(p0: ULong, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge259")
private external fun kniBridge259(p0: ULong, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge260")
private external fun kniBridge260(p0: ULong, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge261")
private external fun kniBridge261(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge262")
private external fun kniBridge262(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge263")
private external fun kniBridge263(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge264")
private external fun kniBridge264(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge265")
private external fun kniBridge265(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge266")
private external fun kniBridge266(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge267")
private external fun kniBridge267(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge268")
private external fun kniBridge268(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge269")
private external fun kniBridge269(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge270")
private external fun kniBridge270(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge271")
private external fun kniBridge271(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge272")
private external fun kniBridge272(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge273")
private external fun kniBridge273(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge274")
private external fun kniBridge274(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge275")
private external fun kniBridge275(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge276")
private external fun kniBridge276(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge277")
private external fun kniBridge277(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge278")
private external fun kniBridge278(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge279")
private external fun kniBridge279(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge280")
private external fun kniBridge280(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge281")
private external fun kniBridge281(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge282")
private external fun kniBridge282(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge283")
private external fun kniBridge283(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge284")
private external fun kniBridge284(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge285")
private external fun kniBridge285(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge286")
private external fun kniBridge286(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge287")
private external fun kniBridge287(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge288")
private external fun kniBridge288(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge289")
private external fun kniBridge289(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge290")
private external fun kniBridge290(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge291")
private external fun kniBridge291(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge292")
private external fun kniBridge292(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge293")
private external fun kniBridge293(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge294")
private external fun kniBridge294(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge295")
private external fun kniBridge295(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge296")
private external fun kniBridge296(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge297")
private external fun kniBridge297(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge298")
private external fun kniBridge298(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge299")
private external fun kniBridge299(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge300")
private external fun kniBridge300(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): ULong
@SymbolName("libgtk3_kniBridge301")
private external fun kniBridge301(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge302")
private external fun kniBridge302(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge303")
private external fun kniBridge303(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge304")
private external fun kniBridge304(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge305")
private external fun kniBridge305(p0: ULong, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge306")
private external fun kniBridge306(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge307")
private external fun kniBridge307(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge308")
private external fun kniBridge308(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge309")
private external fun kniBridge309(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge311")
private external fun kniBridge311(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge312")
private external fun kniBridge312(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge313")
private external fun kniBridge313(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge314")
private external fun kniBridge314(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge315")
private external fun kniBridge315(): ULong
@SymbolName("libgtk3_kniBridge316")
private external fun kniBridge316(): ULong
@SymbolName("libgtk3_kniBridge317")
private external fun kniBridge317(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge318")
private external fun kniBridge318(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge319")
private external fun kniBridge319(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge320")
private external fun kniBridge320(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge321")
private external fun kniBridge321(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge322")
private external fun kniBridge322(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge323")
private external fun kniBridge323(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): NativePtr
@SymbolName("libgtk3_kniBridge324")
private external fun kniBridge324(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge325")
private external fun kniBridge325(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge326")
private external fun kniBridge326(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge327")
private external fun kniBridge327(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge328")
private external fun kniBridge328(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge329")
private external fun kniBridge329(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge330")
private external fun kniBridge330(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge331")
private external fun kniBridge331(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge332")
private external fun kniBridge332(p0: ULong, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge333")
private external fun kniBridge333(p0: ULong, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge334")
private external fun kniBridge334(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge335")
private external fun kniBridge335(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge336")
private external fun kniBridge336(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge337")
private external fun kniBridge337(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge338")
private external fun kniBridge338(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge339")
private external fun kniBridge339(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge340")
private external fun kniBridge340(p0: ULong, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge341")
private external fun kniBridge341(p0: ULong, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge342")
private external fun kniBridge342(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Byte, p4: Byte, p5: Byte, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge343")
private external fun kniBridge343(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UByte, p4: UByte, p5: UByte, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge344")
private external fun kniBridge344(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge345")
private external fun kniBridge345(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int, p5: Int, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge346")
private external fun kniBridge346(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: UInt, p5: UInt, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge347")
private external fun kniBridge347(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Long, p4: Long, p5: Long, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge348")
private external fun kniBridge348(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: ULong, p5: ULong, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge349")
private external fun kniBridge349(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Long, p4: Long, p5: Long, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge350")
private external fun kniBridge350(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: ULong, p5: ULong, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge351")
private external fun kniBridge351(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge352")
private external fun kniBridge352(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int, p5: Int): NativePtr
@SymbolName("libgtk3_kniBridge353")
private external fun kniBridge353(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: UInt, p5: Int): NativePtr
@SymbolName("libgtk3_kniBridge354")
private external fun kniBridge354(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Float, p4: Float, p5: Float, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge355")
private external fun kniBridge355(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Double, p4: Double, p5: Double, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge356")
private external fun kniBridge356(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge357")
private external fun kniBridge357(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge358")
private external fun kniBridge358(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge359")
private external fun kniBridge359(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libgtk3_kniBridge360")
private external fun kniBridge360(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge361")
private external fun kniBridge361(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge362")
private external fun kniBridge362(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge363")
private external fun kniBridge363(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge364")
private external fun kniBridge364(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): NativePtr
@SymbolName("libgtk3_kniBridge365")
private external fun kniBridge365(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge366")
private external fun kniBridge366(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge367")
private external fun kniBridge367(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge368")
private external fun kniBridge368(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge369")
private external fun kniBridge369(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge370")
private external fun kniBridge370(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge371")
private external fun kniBridge371(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge372")
private external fun kniBridge372(): ULong
@SymbolName("libgtk3_kniBridge373")
private external fun kniBridge373(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge374")
private external fun kniBridge374(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge375")
private external fun kniBridge375(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge376")
private external fun kniBridge376(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: UInt): ULong
@SymbolName("libgtk3_kniBridge377")
private external fun kniBridge377(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge378")
private external fun kniBridge378(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("libgtk3_kniBridge379")
private external fun kniBridge379(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("libgtk3_kniBridge380")
private external fun kniBridge380(): ULong
@SymbolName("libgtk3_kniBridge381")
private external fun kniBridge381(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge382")
private external fun kniBridge382(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge383")
private external fun kniBridge383(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge384")
private external fun kniBridge384(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge385")
private external fun kniBridge385(): ULong
@SymbolName("libgtk3_kniBridge386")
private external fun kniBridge386(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge387")
private external fun kniBridge387(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge388")
private external fun kniBridge388(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge389")
private external fun kniBridge389(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge390")
private external fun kniBridge390(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge391")
private external fun kniBridge391(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge392")
private external fun kniBridge392(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge393")
private external fun kniBridge393(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge394")
private external fun kniBridge394(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge395")
private external fun kniBridge395(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge396")
private external fun kniBridge396(p0: NativePtr, p1: Byte): Unit
@SymbolName("libgtk3_kniBridge397")
private external fun kniBridge397(p0: NativePtr): Byte
@SymbolName("libgtk3_kniBridge398")
private external fun kniBridge398(p0: NativePtr, p1: Byte): Unit
@SymbolName("libgtk3_kniBridge399")
private external fun kniBridge399(p0: NativePtr): Byte
@SymbolName("libgtk3_kniBridge400")
private external fun kniBridge400(p0: NativePtr, p1: UByte): Unit
@SymbolName("libgtk3_kniBridge401")
private external fun kniBridge401(p0: NativePtr): UByte
@SymbolName("libgtk3_kniBridge402")
private external fun kniBridge402(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge403")
private external fun kniBridge403(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge404")
private external fun kniBridge404(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge405")
private external fun kniBridge405(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge406")
private external fun kniBridge406(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge407")
private external fun kniBridge407(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge408")
private external fun kniBridge408(p0: NativePtr, p1: Long): Unit
@SymbolName("libgtk3_kniBridge409")
private external fun kniBridge409(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge410")
private external fun kniBridge410(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge411")
private external fun kniBridge411(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge412")
private external fun kniBridge412(p0: NativePtr, p1: Long): Unit
@SymbolName("libgtk3_kniBridge413")
private external fun kniBridge413(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge414")
private external fun kniBridge414(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge415")
private external fun kniBridge415(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge416")
private external fun kniBridge416(p0: NativePtr, p1: Float): Unit
@SymbolName("libgtk3_kniBridge417")
private external fun kniBridge417(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge418")
private external fun kniBridge418(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge419")
private external fun kniBridge419(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge420")
private external fun kniBridge420(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge421")
private external fun kniBridge421(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge422")
private external fun kniBridge422(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge423")
private external fun kniBridge423(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge424")
private external fun kniBridge424(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge425")
private external fun kniBridge425(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge426")
private external fun kniBridge426(): ULong
@SymbolName("libgtk3_kniBridge427")
private external fun kniBridge427(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge428")
private external fun kniBridge428(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge429")
private external fun kniBridge429(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge430")
private external fun kniBridge430(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge431")
private external fun kniBridge431(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge432")
private external fun kniBridge432(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge433")
private external fun kniBridge433(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge434")
private external fun kniBridge434(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge435")
private external fun kniBridge435(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge436")
private external fun kniBridge436(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge437")
private external fun kniBridge437(): ULong
@SymbolName("libgtk3_kniBridge438")
private external fun kniBridge438(): ULong
@SymbolName("libgtk3_kniBridge439")
private external fun kniBridge439(): ULong
@SymbolName("libgtk3_kniBridge440")
private external fun kniBridge440(): ULong
@SymbolName("libgtk3_kniBridge441")
private external fun kniBridge441(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge442")
private external fun kniBridge442(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge443")
private external fun kniBridge443(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge444")
private external fun kniBridge444(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge445")
private external fun kniBridge445(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge446")
private external fun kniBridge446(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge447")
private external fun kniBridge447(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge448")
private external fun kniBridge448(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge449")
private external fun kniBridge449(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge450")
private external fun kniBridge450(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge451")
private external fun kniBridge451(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge452")
private external fun kniBridge452(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge453")
private external fun kniBridge453(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge454")
private external fun kniBridge454(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge455")
private external fun kniBridge455(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge456")
private external fun kniBridge456(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge457")
private external fun kniBridge457(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge458")
private external fun kniBridge458(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge459")
private external fun kniBridge459(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge460")
private external fun kniBridge460(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge461")
private external fun kniBridge461(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge462")
private external fun kniBridge462(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge463")
private external fun kniBridge463(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge464")
private external fun kniBridge464(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge465")
private external fun kniBridge465(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge466")
private external fun kniBridge466(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge467")
private external fun kniBridge467(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge468")
private external fun kniBridge468(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge469")
private external fun kniBridge469(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge470")
private external fun kniBridge470(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge471")
private external fun kniBridge471(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge472")
private external fun kniBridge472(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge473")
private external fun kniBridge473(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge474")
private external fun kniBridge474(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge475")
private external fun kniBridge475(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge476")
private external fun kniBridge476(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge477")
private external fun kniBridge477(): ULong
@SymbolName("libgtk3_kniBridge478")
private external fun kniBridge478(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge479")
private external fun kniBridge479(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge480")
private external fun kniBridge480(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge481")
private external fun kniBridge481(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge482")
private external fun kniBridge482(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge483")
private external fun kniBridge483(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge484")
private external fun kniBridge484(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge485")
private external fun kniBridge485(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge486")
private external fun kniBridge486(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge487")
private external fun kniBridge487(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge488")
private external fun kniBridge488(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge489")
private external fun kniBridge489(): ULong
@SymbolName("libgtk3_kniBridge490")
private external fun kniBridge490(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge491")
private external fun kniBridge491(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge492")
private external fun kniBridge492(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge493")
private external fun kniBridge493(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge494")
private external fun kniBridge494(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge495")
private external fun kniBridge495(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge496")
private external fun kniBridge496(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge497")
private external fun kniBridge497(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge498")
private external fun kniBridge498(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge499")
private external fun kniBridge499(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge500")
private external fun kniBridge500(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge501")
private external fun kniBridge501(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge502")
private external fun kniBridge502(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge503")
private external fun kniBridge503(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge504")
private external fun kniBridge504(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge505")
private external fun kniBridge505(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge506")
private external fun kniBridge506(): ULong
@SymbolName("libgtk3_kniBridge507")
private external fun kniBridge507(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge508")
private external fun kniBridge508(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge509")
private external fun kniBridge509(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge510")
private external fun kniBridge510(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge511")
private external fun kniBridge511(): ULong
@SymbolName("libgtk3_kniBridge512")
private external fun kniBridge512(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge513")
private external fun kniBridge513(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge514")
private external fun kniBridge514(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge515")
private external fun kniBridge515(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge516")
private external fun kniBridge516(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge517")
private external fun kniBridge517(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge518")
private external fun kniBridge518(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge519")
private external fun kniBridge519(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge520")
private external fun kniBridge520(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge521")
private external fun kniBridge521(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge522")
private external fun kniBridge522(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge523")
private external fun kniBridge523(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge524")
private external fun kniBridge524(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge525")
private external fun kniBridge525(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge526")
private external fun kniBridge526(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge527")
private external fun kniBridge527(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge528")
private external fun kniBridge528(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge529")
private external fun kniBridge529(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge530")
private external fun kniBridge530(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge531")
private external fun kniBridge531(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge532")
private external fun kniBridge532(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge533")
private external fun kniBridge533(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge534")
private external fun kniBridge534(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge535")
private external fun kniBridge535(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge536")
private external fun kniBridge536(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge537")
private external fun kniBridge537(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge538")
private external fun kniBridge538(): NativePtr
@SymbolName("libgtk3_kniBridge539")
private external fun kniBridge539(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge540")
private external fun kniBridge540(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge541")
private external fun kniBridge541(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge542")
private external fun kniBridge542(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge543")
private external fun kniBridge543(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge544")
private external fun kniBridge544(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge545")
private external fun kniBridge545(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge546")
private external fun kniBridge546(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge547")
private external fun kniBridge547(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge548")
private external fun kniBridge548(): ULong
@SymbolName("libgtk3_kniBridge549")
private external fun kniBridge549(): NativePtr
@SymbolName("libgtk3_kniBridge550")
private external fun kniBridge550(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge551")
private external fun kniBridge551(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge552")
private external fun kniBridge552(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge553")
private external fun kniBridge553(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge554")
private external fun kniBridge554(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge555")
private external fun kniBridge555(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge556")
private external fun kniBridge556(): ULong
@SymbolName("libgtk3_kniBridge557")
private external fun kniBridge557(): NativePtr
@SymbolName("libgtk3_kniBridge558")
private external fun kniBridge558(): ULong
@SymbolName("libgtk3_kniBridge559")
private external fun kniBridge559(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge560")
private external fun kniBridge560(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge561")
private external fun kniBridge561(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge562")
private external fun kniBridge562(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge563")
private external fun kniBridge563(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge564")
private external fun kniBridge564(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge565")
private external fun kniBridge565(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge566")
private external fun kniBridge566(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge567")
private external fun kniBridge567(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge568")
private external fun kniBridge568(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge569")
private external fun kniBridge569(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge570")
private external fun kniBridge570(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge571")
private external fun kniBridge571(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge572")
private external fun kniBridge572(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge573")
private external fun kniBridge573(p0: NativePtr, p1: NativePtr, p2: Byte, p3: UInt, p4: UInt, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge574")
private external fun kniBridge574(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge575")
private external fun kniBridge575(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge576")
private external fun kniBridge576(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge577")
private external fun kniBridge577(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge578")
private external fun kniBridge578(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge579")
private external fun kniBridge579(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge580")
private external fun kniBridge580(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge581")
private external fun kniBridge581(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge582")
private external fun kniBridge582(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge583")
private external fun kniBridge583(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge584")
private external fun kniBridge584(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge585")
private external fun kniBridge585(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge586")
private external fun kniBridge586(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge587")
private external fun kniBridge587(): NativePtr
@SymbolName("libgtk3_kniBridge588")
private external fun kniBridge588(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge589")
private external fun kniBridge589(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge590")
private external fun kniBridge590(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge591")
private external fun kniBridge591(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge592")
private external fun kniBridge592(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge593")
private external fun kniBridge593(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge594")
private external fun kniBridge594(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge595")
private external fun kniBridge595(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge596")
private external fun kniBridge596(): ULong
@SymbolName("libgtk3_kniBridge597")
private external fun kniBridge597(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge598")
private external fun kniBridge598(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge599")
private external fun kniBridge599(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge600")
private external fun kniBridge600(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge601")
private external fun kniBridge601(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge602")
private external fun kniBridge602(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge603")
private external fun kniBridge603(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge604")
private external fun kniBridge604(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge605")
private external fun kniBridge605(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge606")
private external fun kniBridge606(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge607")
private external fun kniBridge607(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge608")
private external fun kniBridge608(): ULong
@SymbolName("libgtk3_kniBridge609")
private external fun kniBridge609(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge610")
private external fun kniBridge610(p0: ULong, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge611")
private external fun kniBridge611(p0: ULong, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge612")
private external fun kniBridge612(): ULong
@SymbolName("libgtk3_kniBridge613")
private external fun kniBridge613(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge614")
private external fun kniBridge614(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge615")
private external fun kniBridge615(p0: ULong, p1: UInt, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge616")
private external fun kniBridge616(p0: ULong, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge617")
private external fun kniBridge617(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge618")
private external fun kniBridge618(): ULong
@SymbolName("libgtk3_kniBridge619")
private external fun kniBridge619(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge620")
private external fun kniBridge620(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge621")
private external fun kniBridge621(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge622")
private external fun kniBridge622(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge623")
private external fun kniBridge623(): ULong
@SymbolName("libgtk3_kniBridge624")
private external fun kniBridge624(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge625")
private external fun kniBridge625(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge626")
private external fun kniBridge626(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge627")
private external fun kniBridge627(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Long
@SymbolName("libgtk3_kniBridge628")
private external fun kniBridge628(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge629")
private external fun kniBridge629(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge630")
private external fun kniBridge630(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge631")
private external fun kniBridge631(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge632")
private external fun kniBridge632(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge633")
private external fun kniBridge633(p0: NativePtr, p1: ULong, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge634")
private external fun kniBridge634(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge635")
private external fun kniBridge635(p0: NativePtr, p1: ULong, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge636")
private external fun kniBridge636(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge637")
private external fun kniBridge637(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge638")
private external fun kniBridge638(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge639")
private external fun kniBridge639(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge640")
private external fun kniBridge640(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge641")
private external fun kniBridge641(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge642")
private external fun kniBridge642(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge643")
private external fun kniBridge643(): ULong
@SymbolName("libgtk3_kniBridge644")
private external fun kniBridge644(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge645")
private external fun kniBridge645(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge646")
private external fun kniBridge646(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge647")
private external fun kniBridge647(): ULong
@SymbolName("libgtk3_kniBridge648")
private external fun kniBridge648(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge649")
private external fun kniBridge649(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge650")
private external fun kniBridge650(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge651")
private external fun kniBridge651(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge652")
private external fun kniBridge652(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge653")
private external fun kniBridge653(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong): ULong
@SymbolName("libgtk3_kniBridge654")
private external fun kniBridge654(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge655")
private external fun kniBridge655(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr): Long
@SymbolName("libgtk3_kniBridge656")
private external fun kniBridge656(p0: NativePtr, p1: Long, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge657")
private external fun kniBridge657(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge658")
private external fun kniBridge658(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge659")
private external fun kniBridge659(): ULong
@SymbolName("libgtk3_kniBridge660")
private external fun kniBridge660(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge661")
private external fun kniBridge661(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge662")
private external fun kniBridge662(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge663")
private external fun kniBridge663(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge664")
private external fun kniBridge664(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge665")
private external fun kniBridge665(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Long
@SymbolName("libgtk3_kniBridge666")
private external fun kniBridge666(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge667")
private external fun kniBridge667(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge668")
private external fun kniBridge668(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge669")
private external fun kniBridge669(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge670")
private external fun kniBridge670(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge671")
private external fun kniBridge671(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge672")
private external fun kniBridge672(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge673")
private external fun kniBridge673(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge674")
private external fun kniBridge674(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge675")
private external fun kniBridge675(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge676")
private external fun kniBridge676(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge677")
private external fun kniBridge677(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge678")
private external fun kniBridge678(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge679")
private external fun kniBridge679(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge680")
private external fun kniBridge680(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge681")
private external fun kniBridge681(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge682")
private external fun kniBridge682(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge683")
private external fun kniBridge683(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge684")
private external fun kniBridge684(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge685")
private external fun kniBridge685(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge686")
private external fun kniBridge686(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge687")
private external fun kniBridge687(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge688")
private external fun kniBridge688(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge689")
private external fun kniBridge689(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge690")
private external fun kniBridge690(): ULong
@SymbolName("libgtk3_kniBridge691")
private external fun kniBridge691(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge692")
private external fun kniBridge692(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge693")
private external fun kniBridge693(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge694")
private external fun kniBridge694(): ULong
@SymbolName("libgtk3_kniBridge695")
private external fun kniBridge695(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge696")
private external fun kniBridge696(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge697")
private external fun kniBridge697(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge698")
private external fun kniBridge698(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge699")
private external fun kniBridge699(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge700")
private external fun kniBridge700(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge701")
private external fun kniBridge701(): ULong
@SymbolName("libgtk3_kniBridge702")
private external fun kniBridge702(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge703")
private external fun kniBridge703(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge704")
private external fun kniBridge704(): ULong
@SymbolName("libgtk3_kniBridge705")
private external fun kniBridge705(): NativePtr
@SymbolName("libgtk3_kniBridge706")
private external fun kniBridge706(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge707")
private external fun kniBridge707(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge708")
private external fun kniBridge708(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge709")
private external fun kniBridge709(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge710")
private external fun kniBridge710(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge711")
private external fun kniBridge711(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge712")
private external fun kniBridge712(): NativePtr
@SymbolName("libgtk3_kniBridge713")
private external fun kniBridge713(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge714")
private external fun kniBridge714(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge715")
private external fun kniBridge715(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge716")
private external fun kniBridge716(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("libgtk3_kniBridge717")
private external fun kniBridge717(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge718")
private external fun kniBridge718(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge719")
private external fun kniBridge719(): ULong
@SymbolName("libgtk3_kniBridge720")
private external fun kniBridge720(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): UInt
@SymbolName("libgtk3_kniBridge721")
private external fun kniBridge721(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge722")
private external fun kniBridge722(): ULong
@SymbolName("libgtk3_kniBridge723")
private external fun kniBridge723(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge724")
private external fun kniBridge724(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge725")
private external fun kniBridge725(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge726")
private external fun kniBridge726(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge727")
private external fun kniBridge727(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge728")
private external fun kniBridge728(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge729")
private external fun kniBridge729(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge730")
private external fun kniBridge730(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge731")
private external fun kniBridge731(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge732")
private external fun kniBridge732(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge733")
private external fun kniBridge733(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge734")
private external fun kniBridge734(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge735")
private external fun kniBridge735(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge736")
private external fun kniBridge736(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge737")
private external fun kniBridge737(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge738")
private external fun kniBridge738(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge739")
private external fun kniBridge739(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge740")
private external fun kniBridge740(): NativePtr
@SymbolName("libgtk3_kniBridge741")
private external fun kniBridge741(): NativePtr
@SymbolName("libgtk3_kniBridge742")
private external fun kniBridge742(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge743")
private external fun kniBridge743(): ULong
@SymbolName("libgtk3_kniBridge744")
private external fun kniBridge744(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge745")
private external fun kniBridge745(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge746")
private external fun kniBridge746(): ULong
@SymbolName("libgtk3_kniBridge747")
private external fun kniBridge747(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge748")
private external fun kniBridge748(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge749")
private external fun kniBridge749(): ULong
@SymbolName("libgtk3_kniBridge750")
private external fun kniBridge750(): NativePtr
@SymbolName("libgtk3_kniBridge751")
private external fun kniBridge751(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge752")
private external fun kniBridge752(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge753")
private external fun kniBridge753(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge754")
private external fun kniBridge754(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge755")
private external fun kniBridge755(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge756")
private external fun kniBridge756(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge757")
private external fun kniBridge757(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge758")
private external fun kniBridge758(): ULong
@SymbolName("libgtk3_kniBridge759")
private external fun kniBridge759(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Long, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge760")
private external fun kniBridge760(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Long, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge761")
private external fun kniBridge761(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge762")
private external fun kniBridge762(p0: NativePtr, p1: UInt): UInt
@SymbolName("libgtk3_kniBridge763")
private external fun kniBridge763(p0: NativePtr, p1: UInt, p2: Long, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge764")
private external fun kniBridge764(): ULong
@SymbolName("libgtk3_kniBridge765")
private external fun kniBridge765(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge766")
private external fun kniBridge766(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge767")
private external fun kniBridge767(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge768")
private external fun kniBridge768(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge769")
private external fun kniBridge769(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge770")
private external fun kniBridge770(p0: NativePtr, p1: NativePtr, p2: NativePtr): UByte
@SymbolName("libgtk3_kniBridge771")
private external fun kniBridge771(p0: NativePtr, p1: NativePtr, p2: NativePtr): Short
@SymbolName("libgtk3_kniBridge772")
private external fun kniBridge772(p0: NativePtr, p1: NativePtr, p2: NativePtr): UShort
@SymbolName("libgtk3_kniBridge773")
private external fun kniBridge773(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge774")
private external fun kniBridge774(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge775")
private external fun kniBridge775(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge776")
private external fun kniBridge776(p0: NativePtr, p1: NativePtr, p2: NativePtr): ULong
@SymbolName("libgtk3_kniBridge777")
private external fun kniBridge777(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge778")
private external fun kniBridge778(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge779")
private external fun kniBridge779(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge780")
private external fun kniBridge780(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge781")
private external fun kniBridge781(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge782")
private external fun kniBridge782(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge783")
private external fun kniBridge783(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge784")
private external fun kniBridge784(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge785")
private external fun kniBridge785(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge786")
private external fun kniBridge786(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge787")
private external fun kniBridge787(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge788")
private external fun kniBridge788(): ULong
@SymbolName("libgtk3_kniBridge789")
private external fun kniBridge789(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge790")
private external fun kniBridge790(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge791")
private external fun kniBridge791(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge792")
private external fun kniBridge792(p0: NativePtr, p1: UByte, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge793")
private external fun kniBridge793(p0: NativePtr, p1: Short, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge794")
private external fun kniBridge794(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge795")
private external fun kniBridge795(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge796")
private external fun kniBridge796(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge797")
private external fun kniBridge797(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge798")
private external fun kniBridge798(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge799")
private external fun kniBridge799(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge800")
private external fun kniBridge800(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge801")
private external fun kniBridge801(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge802")
private external fun kniBridge802(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge803")
private external fun kniBridge803(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge804")
private external fun kniBridge804(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge805")
private external fun kniBridge805(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge806")
private external fun kniBridge806(p0: Int, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge807")
private external fun kniBridge807(): ULong
@SymbolName("libgtk3_kniBridge808")
private external fun kniBridge808(): NativePtr
@SymbolName("libgtk3_kniBridge809")
private external fun kniBridge809(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge810")
private external fun kniBridge810(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge811")
private external fun kniBridge811(): ULong
@SymbolName("libgtk3_kniBridge812")
private external fun kniBridge812(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge813")
private external fun kniBridge813(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge814")
private external fun kniBridge814(p0: Int, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge815")
private external fun kniBridge815(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge816")
private external fun kniBridge816(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge817")
private external fun kniBridge817(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge818")
private external fun kniBridge818(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge819")
private external fun kniBridge819(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge820")
private external fun kniBridge820(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge821")
private external fun kniBridge821(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge822")
private external fun kniBridge822(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge823")
private external fun kniBridge823(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge824")
private external fun kniBridge824(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge825")
private external fun kniBridge825(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge826")
private external fun kniBridge826(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge827")
private external fun kniBridge827(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge828")
private external fun kniBridge828(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge829")
private external fun kniBridge829(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge830")
private external fun kniBridge830(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge831")
private external fun kniBridge831(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge832")
private external fun kniBridge832(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge833")
private external fun kniBridge833(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge834")
private external fun kniBridge834(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge835")
private external fun kniBridge835(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge836")
private external fun kniBridge836(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge837")
private external fun kniBridge837(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge838")
private external fun kniBridge838(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge839")
private external fun kniBridge839(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge840")
private external fun kniBridge840(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge841")
private external fun kniBridge841(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge842")
private external fun kniBridge842(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge843")
private external fun kniBridge843(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr, p11: NativePtr): Unit
@SymbolName("libgtk3_kniBridge844")
private external fun kniBridge844(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge845")
private external fun kniBridge845(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge846")
private external fun kniBridge846(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr, p11: NativePtr, p12: NativePtr): Unit
@SymbolName("libgtk3_kniBridge847")
private external fun kniBridge847(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge848")
private external fun kniBridge848(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: Int, p9: NativePtr, p10: NativePtr, p11: NativePtr, p12: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge849")
private external fun kniBridge849(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge850")
private external fun kniBridge850(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge851")
private external fun kniBridge851(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge852")
private external fun kniBridge852(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge853")
private external fun kniBridge853(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge854")
private external fun kniBridge854(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UInt, p7: NativePtr, p8: NativePtr, p9: NativePtr): UInt
@SymbolName("libgtk3_kniBridge855")
private external fun kniBridge855(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge856")
private external fun kniBridge856(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge857")
private external fun kniBridge857(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge858")
private external fun kniBridge858(): UInt
@SymbolName("libgtk3_kniBridge859")
private external fun kniBridge859(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge860")
private external fun kniBridge860(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge861")
private external fun kniBridge861(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge862")
private external fun kniBridge862(p0: UInt, p1: Int, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge863")
private external fun kniBridge863(p0: UInt, p1: Int, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge864")
private external fun kniBridge864(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge865")
private external fun kniBridge865(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge866")
private external fun kniBridge866(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge867")
private external fun kniBridge867(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge868")
private external fun kniBridge868(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge869")
private external fun kniBridge869(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge870")
private external fun kniBridge870(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge871")
private external fun kniBridge871(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge872")
private external fun kniBridge872(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge873")
private external fun kniBridge873(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge874")
private external fun kniBridge874(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge875")
private external fun kniBridge875(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge876")
private external fun kniBridge876(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge877")
private external fun kniBridge877(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge878")
private external fun kniBridge878(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge879")
private external fun kniBridge879(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge880")
private external fun kniBridge880(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge881")
private external fun kniBridge881(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge882")
private external fun kniBridge882(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge883")
private external fun kniBridge883(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge884")
private external fun kniBridge884(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge885")
private external fun kniBridge885(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge886")
private external fun kniBridge886(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge887")
private external fun kniBridge887(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge888")
private external fun kniBridge888(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge889")
private external fun kniBridge889(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge890")
private external fun kniBridge890(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge891")
private external fun kniBridge891(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge892")
private external fun kniBridge892(): ULong
@SymbolName("libgtk3_kniBridge893")
private external fun kniBridge893(): ULong
@SymbolName("libgtk3_kniBridge894")
private external fun kniBridge894(): ULong
@SymbolName("libgtk3_kniBridge895")
private external fun kniBridge895(): ULong
@SymbolName("libgtk3_kniBridge896")
private external fun kniBridge896(): ULong
@SymbolName("libgtk3_kniBridge897")
private external fun kniBridge897(): ULong
@SymbolName("libgtk3_kniBridge898")
private external fun kniBridge898(): ULong
@SymbolName("libgtk3_kniBridge899")
private external fun kniBridge899(): ULong
@SymbolName("libgtk3_kniBridge900")
private external fun kniBridge900(): NativePtr
@SymbolName("libgtk3_kniBridge901")
private external fun kniBridge901(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge902")
private external fun kniBridge902(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge903")
private external fun kniBridge903(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge904")
private external fun kniBridge904(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge905")
private external fun kniBridge905(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge906")
private external fun kniBridge906(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge907")
private external fun kniBridge907(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge908")
private external fun kniBridge908(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge909")
private external fun kniBridge909(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge910")
private external fun kniBridge910(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge911")
private external fun kniBridge911(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge912")
private external fun kniBridge912(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge913")
private external fun kniBridge913(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge914")
private external fun kniBridge914(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge915")
private external fun kniBridge915(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge916")
private external fun kniBridge916(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge917")
private external fun kniBridge917(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge918")
private external fun kniBridge918(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge919")
private external fun kniBridge919(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge920")
private external fun kniBridge920(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge921")
private external fun kniBridge921(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge922")
private external fun kniBridge922(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge923")
private external fun kniBridge923(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge924")
private external fun kniBridge924(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge925")
private external fun kniBridge925(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge926")
private external fun kniBridge926(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge927")
private external fun kniBridge927(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge928")
private external fun kniBridge928(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge929")
private external fun kniBridge929(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge930")
private external fun kniBridge930(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge931")
private external fun kniBridge931(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge932")
private external fun kniBridge932(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge933")
private external fun kniBridge933(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge934")
private external fun kniBridge934(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge935")
private external fun kniBridge935(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge936")
private external fun kniBridge936(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge937")
private external fun kniBridge937(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge938")
private external fun kniBridge938(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge939")
private external fun kniBridge939(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge940")
private external fun kniBridge940(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge941")
private external fun kniBridge941(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge942")
private external fun kniBridge942(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge943")
private external fun kniBridge943(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge944")
private external fun kniBridge944(p0: NativePtr, p1: ULong, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge945")
private external fun kniBridge945(p0: NativePtr, p1: ULong, p2: NativePtr): Long
@SymbolName("libgtk3_kniBridge946")
private external fun kniBridge946(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge947")
private external fun kniBridge947(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge948")
private external fun kniBridge948(): ULong
@SymbolName("libgtk3_kniBridge949")
private external fun kniBridge949(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge950")
private external fun kniBridge950(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge951")
private external fun kniBridge951(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge952")
private external fun kniBridge952(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge953")
private external fun kniBridge953(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge954")
private external fun kniBridge954(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge955")
private external fun kniBridge955(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge956")
private external fun kniBridge956(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge957")
private external fun kniBridge957(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge958")
private external fun kniBridge958(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge959")
private external fun kniBridge959(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge960")
private external fun kniBridge960(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge961")
private external fun kniBridge961(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge962")
private external fun kniBridge962(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge963")
private external fun kniBridge963(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge964")
private external fun kniBridge964(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge965")
private external fun kniBridge965(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge966")
private external fun kniBridge966(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): UInt
@SymbolName("libgtk3_kniBridge967")
private external fun kniBridge967(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge968")
private external fun kniBridge968(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): UInt
@SymbolName("libgtk3_kniBridge969")
private external fun kniBridge969(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("libgtk3_kniBridge970")
private external fun kniBridge970(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge971")
private external fun kniBridge971(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge972")
private external fun kniBridge972(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): UInt
@SymbolName("libgtk3_kniBridge973")
private external fun kniBridge973(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("libgtk3_kniBridge974")
private external fun kniBridge974(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("libgtk3_kniBridge975")
private external fun kniBridge975(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge976")
private external fun kniBridge976(): ULong
@SymbolName("libgtk3_kniBridge977")
private external fun kniBridge977(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge978")
private external fun kniBridge978(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge979")
private external fun kniBridge979(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge980")
private external fun kniBridge980(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge981")
private external fun kniBridge981(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge982")
private external fun kniBridge982(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge983")
private external fun kniBridge983(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge984")
private external fun kniBridge984(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge985")
private external fun kniBridge985(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge986")
private external fun kniBridge986(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge987")
private external fun kniBridge987(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge988")
private external fun kniBridge988(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge989")
private external fun kniBridge989(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge990")
private external fun kniBridge990(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge991")
private external fun kniBridge991(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge992")
private external fun kniBridge992(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge993")
private external fun kniBridge993(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge994")
private external fun kniBridge994(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge995")
private external fun kniBridge995(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge996")
private external fun kniBridge996(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge997")
private external fun kniBridge997(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge998")
private external fun kniBridge998(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge999")
private external fun kniBridge999(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1000")
private external fun kniBridge1000(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1001")
private external fun kniBridge1001(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1002")
private external fun kniBridge1002(): ULong
@SymbolName("libgtk3_kniBridge1003")
private external fun kniBridge1003(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1004")
private external fun kniBridge1004(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1005")
private external fun kniBridge1005(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1006")
private external fun kniBridge1006(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1007")
private external fun kniBridge1007(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1008")
private external fun kniBridge1008(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1009")
private external fun kniBridge1009(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1010")
private external fun kniBridge1010(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1011")
private external fun kniBridge1011(): NativePtr
@SymbolName("libgtk3_kniBridge1012")
private external fun kniBridge1012(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1013")
private external fun kniBridge1013(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1014")
private external fun kniBridge1014(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1015")
private external fun kniBridge1015(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1016")
private external fun kniBridge1016(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1017")
private external fun kniBridge1017(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1018")
private external fun kniBridge1018(): ULong
@SymbolName("libgtk3_kniBridge1019")
private external fun kniBridge1019(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1020")
private external fun kniBridge1020(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1021")
private external fun kniBridge1021(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1022")
private external fun kniBridge1022(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1023")
private external fun kniBridge1023(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1024")
private external fun kniBridge1024(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1025")
private external fun kniBridge1025(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1026")
private external fun kniBridge1026(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1027")
private external fun kniBridge1027(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1028")
private external fun kniBridge1028(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1029")
private external fun kniBridge1029(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1030")
private external fun kniBridge1030(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1031")
private external fun kniBridge1031(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1032")
private external fun kniBridge1032(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1033")
private external fun kniBridge1033(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1034")
private external fun kniBridge1034(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1035")
private external fun kniBridge1035(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1036")
private external fun kniBridge1036(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1037")
private external fun kniBridge1037(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1038")
private external fun kniBridge1038(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1039")
private external fun kniBridge1039(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1040")
private external fun kniBridge1040(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1041")
private external fun kniBridge1041(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1042")
private external fun kniBridge1042(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1043")
private external fun kniBridge1043(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1044")
private external fun kniBridge1044(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1045")
private external fun kniBridge1045(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1046")
private external fun kniBridge1046(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1047")
private external fun kniBridge1047(): ULong
@SymbolName("libgtk3_kniBridge1048")
private external fun kniBridge1048(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1049")
private external fun kniBridge1049(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1050")
private external fun kniBridge1050(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1051")
private external fun kniBridge1051(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1052")
private external fun kniBridge1052(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1053")
private external fun kniBridge1053(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1054")
private external fun kniBridge1054(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1055")
private external fun kniBridge1055(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1056")
private external fun kniBridge1056(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1057")
private external fun kniBridge1057(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1058")
private external fun kniBridge1058(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1059")
private external fun kniBridge1059(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1060")
private external fun kniBridge1060(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1061")
private external fun kniBridge1061(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1062")
private external fun kniBridge1062(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1063")
private external fun kniBridge1063(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1064")
private external fun kniBridge1064(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1065")
private external fun kniBridge1065(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1066")
private external fun kniBridge1066(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1067")
private external fun kniBridge1067(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1068")
private external fun kniBridge1068(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1069")
private external fun kniBridge1069(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge1070")
private external fun kniBridge1070(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1071")
private external fun kniBridge1071(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1072")
private external fun kniBridge1072(): ULong
@SymbolName("libgtk3_kniBridge1073")
private external fun kniBridge1073(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1074")
private external fun kniBridge1074(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1075")
private external fun kniBridge1075(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1076")
private external fun kniBridge1076(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1077")
private external fun kniBridge1077(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1078")
private external fun kniBridge1078(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1079")
private external fun kniBridge1079(): ULong
@SymbolName("libgtk3_kniBridge1080")
private external fun kniBridge1080(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1081")
private external fun kniBridge1081(): ULong
@SymbolName("libgtk3_kniBridge1082")
private external fun kniBridge1082(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1083")
private external fun kniBridge1083(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1084")
private external fun kniBridge1084(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1085")
private external fun kniBridge1085(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1086")
private external fun kniBridge1086(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1087")
private external fun kniBridge1087(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1088")
private external fun kniBridge1088(): ULong
@SymbolName("libgtk3_kniBridge1089")
private external fun kniBridge1089(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1090")
private external fun kniBridge1090(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge1091")
private external fun kniBridge1091(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1092")
private external fun kniBridge1092(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1093")
private external fun kniBridge1093(): ULong
@SymbolName("libgtk3_kniBridge1094")
private external fun kniBridge1094(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1095")
private external fun kniBridge1095(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1096")
private external fun kniBridge1096(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1097")
private external fun kniBridge1097(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1098")
private external fun kniBridge1098(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1099")
private external fun kniBridge1099(): ULong
@SymbolName("libgtk3_kniBridge1100")
private external fun kniBridge1100(): NativePtr
@SymbolName("libgtk3_kniBridge1101")
private external fun kniBridge1101(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1102")
private external fun kniBridge1102(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1103")
private external fun kniBridge1103(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1104")
private external fun kniBridge1104(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1105")
private external fun kniBridge1105(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge1106")
private external fun kniBridge1106(): ULong
@SymbolName("libgtk3_kniBridge1107")
private external fun kniBridge1107(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1108")
private external fun kniBridge1108(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1109")
private external fun kniBridge1109(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1110")
private external fun kniBridge1110(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1111")
private external fun kniBridge1111(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1112")
private external fun kniBridge1112(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1113")
private external fun kniBridge1113(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1114")
private external fun kniBridge1114(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1115")
private external fun kniBridge1115(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1116")
private external fun kniBridge1116(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1117")
private external fun kniBridge1117(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1118")
private external fun kniBridge1118(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1119")
private external fun kniBridge1119(): ULong
@SymbolName("libgtk3_kniBridge1120")
private external fun kniBridge1120(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1121")
private external fun kniBridge1121(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1122")
private external fun kniBridge1122(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1123")
private external fun kniBridge1123(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1124")
private external fun kniBridge1124(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1125")
private external fun kniBridge1125(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1126")
private external fun kniBridge1126(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1127")
private external fun kniBridge1127(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1128")
private external fun kniBridge1128(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1129")
private external fun kniBridge1129(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1130")
private external fun kniBridge1130(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1131")
private external fun kniBridge1131(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1132")
private external fun kniBridge1132(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1133")
private external fun kniBridge1133(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1134")
private external fun kniBridge1134(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1135")
private external fun kniBridge1135(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1136")
private external fun kniBridge1136(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1137")
private external fun kniBridge1137(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1138")
private external fun kniBridge1138(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1139")
private external fun kniBridge1139(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1140")
private external fun kniBridge1140(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1141")
private external fun kniBridge1141(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1142")
private external fun kniBridge1142(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1143")
private external fun kniBridge1143(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1144")
private external fun kniBridge1144(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1145")
private external fun kniBridge1145(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1146")
private external fun kniBridge1146(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1147")
private external fun kniBridge1147(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1148")
private external fun kniBridge1148(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1149")
private external fun kniBridge1149(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1150")
private external fun kniBridge1150(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1151")
private external fun kniBridge1151(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1152")
private external fun kniBridge1152(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1153")
private external fun kniBridge1153(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1154")
private external fun kniBridge1154(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1155")
private external fun kniBridge1155(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1156")
private external fun kniBridge1156(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1157")
private external fun kniBridge1157(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1158")
private external fun kniBridge1158(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1159")
private external fun kniBridge1159(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1160")
private external fun kniBridge1160(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1161")
private external fun kniBridge1161(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1162")
private external fun kniBridge1162(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1163")
private external fun kniBridge1163(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: Int, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1164")
private external fun kniBridge1164(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1165")
private external fun kniBridge1165(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1166")
private external fun kniBridge1166(p0: NativePtr, p1: UInt, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1167")
private external fun kniBridge1167(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1168")
private external fun kniBridge1168(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1169")
private external fun kniBridge1169(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1170")
private external fun kniBridge1170(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1171")
private external fun kniBridge1171(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1172")
private external fun kniBridge1172(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1173")
private external fun kniBridge1173(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1174")
private external fun kniBridge1174(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1175")
private external fun kniBridge1175(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1176")
private external fun kniBridge1176(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1177")
private external fun kniBridge1177(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1178")
private external fun kniBridge1178(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1179")
private external fun kniBridge1179(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1180")
private external fun kniBridge1180(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1181")
private external fun kniBridge1181(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1182")
private external fun kniBridge1182(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1183")
private external fun kniBridge1183(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1184")
private external fun kniBridge1184(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1185")
private external fun kniBridge1185(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1186")
private external fun kniBridge1186(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1187")
private external fun kniBridge1187(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1188")
private external fun kniBridge1188(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge1189")
private external fun kniBridge1189(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1190")
private external fun kniBridge1190(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1191")
private external fun kniBridge1191(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge1192")
private external fun kniBridge1192(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1193")
private external fun kniBridge1193(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1194")
private external fun kniBridge1194(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1195")
private external fun kniBridge1195(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1196")
private external fun kniBridge1196(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1197")
private external fun kniBridge1197(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1198")
private external fun kniBridge1198(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1199")
private external fun kniBridge1199(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge1200")
private external fun kniBridge1200(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1201")
private external fun kniBridge1201(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1202")
private external fun kniBridge1202(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1203")
private external fun kniBridge1203(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1204")
private external fun kniBridge1204(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1205")
private external fun kniBridge1205(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1206")
private external fun kniBridge1206(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1207")
private external fun kniBridge1207(p0: NativePtr, p1: NativePtr, p2: ULong, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1208")
private external fun kniBridge1208(p0: NativePtr, p1: NativePtr, p2: Long, p3: UInt, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1209")
private external fun kniBridge1209(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1210")
private external fun kniBridge1210(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1211")
private external fun kniBridge1211(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1212")
private external fun kniBridge1212(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1213")
private external fun kniBridge1213(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1214")
private external fun kniBridge1214(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1215")
private external fun kniBridge1215(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1216")
private external fun kniBridge1216(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1217")
private external fun kniBridge1217(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1218")
private external fun kniBridge1218(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1219")
private external fun kniBridge1219(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1220")
private external fun kniBridge1220(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1221")
private external fun kniBridge1221(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1222")
private external fun kniBridge1222(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1223")
private external fun kniBridge1223(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1224")
private external fun kniBridge1224(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1225")
private external fun kniBridge1225(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libgtk3_kniBridge1226")
private external fun kniBridge1226(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1227")
private external fun kniBridge1227(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1228")
private external fun kniBridge1228(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1229")
private external fun kniBridge1229(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1230")
private external fun kniBridge1230(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1231")
private external fun kniBridge1231(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1232")
private external fun kniBridge1232(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1233")
private external fun kniBridge1233(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1234")
private external fun kniBridge1234(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1235")
private external fun kniBridge1235(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1236")
private external fun kniBridge1236(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1237")
private external fun kniBridge1237(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1238")
private external fun kniBridge1238(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1239")
private external fun kniBridge1239(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1240")
private external fun kniBridge1240(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1241")
private external fun kniBridge1241(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1242")
private external fun kniBridge1242(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: Int, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libgtk3_kniBridge1243")
private external fun kniBridge1243(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: Int, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1244")
private external fun kniBridge1244(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1245")
private external fun kniBridge1245(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1246")
private external fun kniBridge1246(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1247")
private external fun kniBridge1247(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1248")
private external fun kniBridge1248(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1249")
private external fun kniBridge1249(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1250")
private external fun kniBridge1250(): ULong
@SymbolName("libgtk3_kniBridge1251")
private external fun kniBridge1251(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1252")
private external fun kniBridge1252(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1253")
private external fun kniBridge1253(): ULong
@SymbolName("libgtk3_kniBridge1254")
private external fun kniBridge1254(): NativePtr
@SymbolName("libgtk3_kniBridge1255")
private external fun kniBridge1255(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1256")
private external fun kniBridge1256(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1257")
private external fun kniBridge1257(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1258")
private external fun kniBridge1258(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1259")
private external fun kniBridge1259(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1260")
private external fun kniBridge1260(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1261")
private external fun kniBridge1261(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1262")
private external fun kniBridge1262(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1263")
private external fun kniBridge1263(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1264")
private external fun kniBridge1264(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge1265")
private external fun kniBridge1265(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1266")
private external fun kniBridge1266(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1267")
private external fun kniBridge1267(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1268")
private external fun kniBridge1268(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1269")
private external fun kniBridge1269(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1270")
private external fun kniBridge1270(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1271")
private external fun kniBridge1271(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1272")
private external fun kniBridge1272(p0: NativePtr, p1: NativePtr): Long
@SymbolName("libgtk3_kniBridge1273")
private external fun kniBridge1273(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1274")
private external fun kniBridge1274(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1275")
private external fun kniBridge1275(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1276")
private external fun kniBridge1276(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1277")
private external fun kniBridge1277(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1278")
private external fun kniBridge1278(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge1279")
private external fun kniBridge1279(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge1280")
private external fun kniBridge1280(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge1281")
private external fun kniBridge1281(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libgtk3_kniBridge1282")
private external fun kniBridge1282(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("libgtk3_kniBridge1283")
private external fun kniBridge1283(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1284")
private external fun kniBridge1284(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1285")
private external fun kniBridge1285(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1286")
private external fun kniBridge1286(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1287")
private external fun kniBridge1287(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1288")
private external fun kniBridge1288(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1289")
private external fun kniBridge1289(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1290")
private external fun kniBridge1290(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1291")
private external fun kniBridge1291(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1292")
private external fun kniBridge1292(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1293")
private external fun kniBridge1293(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1294")
private external fun kniBridge1294(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1295")
private external fun kniBridge1295(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1296")
private external fun kniBridge1296(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1297")
private external fun kniBridge1297(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge1298")
private external fun kniBridge1298(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1299")
private external fun kniBridge1299(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1300")
private external fun kniBridge1300(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1301")
private external fun kniBridge1301(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1302")
private external fun kniBridge1302(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1303")
private external fun kniBridge1303(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1304")
private external fun kniBridge1304(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1305")
private external fun kniBridge1305(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1306")
private external fun kniBridge1306(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1307")
private external fun kniBridge1307(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1308")
private external fun kniBridge1308(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1309")
private external fun kniBridge1309(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1310")
private external fun kniBridge1310(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1311")
private external fun kniBridge1311(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1312")
private external fun kniBridge1312(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1313")
private external fun kniBridge1313(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1314")
private external fun kniBridge1314(p0: NativePtr, p1: Long): Unit
@SymbolName("libgtk3_kniBridge1315")
private external fun kniBridge1315(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1316")
private external fun kniBridge1316(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1317")
private external fun kniBridge1317(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1318")
private external fun kniBridge1318(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1319")
private external fun kniBridge1319(): ULong
@SymbolName("libgtk3_kniBridge1320")
private external fun kniBridge1320(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1321")
private external fun kniBridge1321(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1322")
private external fun kniBridge1322(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1323")
private external fun kniBridge1323(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1324")
private external fun kniBridge1324(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1325")
private external fun kniBridge1325(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1326")
private external fun kniBridge1326(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1327")
private external fun kniBridge1327(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1328")
private external fun kniBridge1328(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1329")
private external fun kniBridge1329(): ULong
@SymbolName("libgtk3_kniBridge1330")
private external fun kniBridge1330(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1331")
private external fun kniBridge1331(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1332")
private external fun kniBridge1332(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1333")
private external fun kniBridge1333(): UInt
@SymbolName("libgtk3_kniBridge1334")
private external fun kniBridge1334(p0: Int): UInt
@SymbolName("libgtk3_kniBridge1335")
private external fun kniBridge1335(): ULong
@SymbolName("libgtk3_kniBridge1336")
private external fun kniBridge1336(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1337")
private external fun kniBridge1337(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1338")
private external fun kniBridge1338(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1339")
private external fun kniBridge1339(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1340")
private external fun kniBridge1340(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1341")
private external fun kniBridge1341(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1342")
private external fun kniBridge1342(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1343")
private external fun kniBridge1343(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1344")
private external fun kniBridge1344(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1345")
private external fun kniBridge1345(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1346")
private external fun kniBridge1346(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1347")
private external fun kniBridge1347(): ULong
@SymbolName("libgtk3_kniBridge1348")
private external fun kniBridge1348(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1349")
private external fun kniBridge1349(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1350")
private external fun kniBridge1350(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1351")
private external fun kniBridge1351(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1352")
private external fun kniBridge1352(): ULong
@SymbolName("libgtk3_kniBridge1353")
private external fun kniBridge1353(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1354")
private external fun kniBridge1354(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1355")
private external fun kniBridge1355(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1356")
private external fun kniBridge1356(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge1357")
private external fun kniBridge1357(): ULong
@SymbolName("libgtk3_kniBridge1358")
private external fun kniBridge1358(): NativePtr
@SymbolName("libgtk3_kniBridge1359")
private external fun kniBridge1359(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1360")
private external fun kniBridge1360(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1361")
private external fun kniBridge1361(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1362")
private external fun kniBridge1362(): ULong
@SymbolName("libgtk3_kniBridge1363")
private external fun kniBridge1363(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1364")
private external fun kniBridge1364(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1365")
private external fun kniBridge1365(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1366")
private external fun kniBridge1366(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1367")
private external fun kniBridge1367(): ULong
@SymbolName("libgtk3_kniBridge1368")
private external fun kniBridge1368(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1369")
private external fun kniBridge1369(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge1370")
private external fun kniBridge1370(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge1371")
private external fun kniBridge1371(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge1372")
private external fun kniBridge1372(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1373")
private external fun kniBridge1373(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1374")
private external fun kniBridge1374(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1375")
private external fun kniBridge1375(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1376")
private external fun kniBridge1376(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1377")
private external fun kniBridge1377(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1378")
private external fun kniBridge1378(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1379")
private external fun kniBridge1379(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1380")
private external fun kniBridge1380(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1381")
private external fun kniBridge1381(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1382")
private external fun kniBridge1382(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1383")
private external fun kniBridge1383(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1384")
private external fun kniBridge1384(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1385")
private external fun kniBridge1385(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1386")
private external fun kniBridge1386(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1387")
private external fun kniBridge1387(): ULong
@SymbolName("libgtk3_kniBridge1388")
private external fun kniBridge1388(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1389")
private external fun kniBridge1389(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1390")
private external fun kniBridge1390(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1391")
private external fun kniBridge1391(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1392")
private external fun kniBridge1392(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1393")
private external fun kniBridge1393(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1394")
private external fun kniBridge1394(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1395")
private external fun kniBridge1395(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1396")
private external fun kniBridge1396(): ULong
@SymbolName("libgtk3_kniBridge1397")
private external fun kniBridge1397(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1398")
private external fun kniBridge1398(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge1399")
private external fun kniBridge1399(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1400")
private external fun kniBridge1400(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge1401")
private external fun kniBridge1401(): ULong
@SymbolName("libgtk3_kniBridge1402")
private external fun kniBridge1402(p0: NativePtr, p1: UShort): NativePtr
@SymbolName("libgtk3_kniBridge1403")
private external fun kniBridge1403(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge1404")
private external fun kniBridge1404(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1405")
private external fun kniBridge1405(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1406")
private external fun kniBridge1406(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1407")
private external fun kniBridge1407(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1408")
private external fun kniBridge1408(): ULong
@SymbolName("libgtk3_kniBridge1409")
private external fun kniBridge1409(): ULong
@SymbolName("libgtk3_kniBridge1410")
private external fun kniBridge1410(): ULong
@SymbolName("libgtk3_kniBridge1411")
private external fun kniBridge1411(): ULong
@SymbolName("libgtk3_kniBridge1412")
private external fun kniBridge1412(): ULong
@SymbolName("libgtk3_kniBridge1413")
private external fun kniBridge1413(): ULong
@SymbolName("libgtk3_kniBridge1414")
private external fun kniBridge1414(): ULong
@SymbolName("libgtk3_kniBridge1415")
private external fun kniBridge1415(): ULong
@SymbolName("libgtk3_kniBridge1416")
private external fun kniBridge1416(): ULong
@SymbolName("libgtk3_kniBridge1417")
private external fun kniBridge1417(): ULong
@SymbolName("libgtk3_kniBridge1418")
private external fun kniBridge1418(): ULong
@SymbolName("libgtk3_kniBridge1419")
private external fun kniBridge1419(): ULong
@SymbolName("libgtk3_kniBridge1420")
private external fun kniBridge1420(): ULong
@SymbolName("libgtk3_kniBridge1421")
private external fun kniBridge1421(): ULong
@SymbolName("libgtk3_kniBridge1422")
private external fun kniBridge1422(): ULong
@SymbolName("libgtk3_kniBridge1423")
private external fun kniBridge1423(): ULong
@SymbolName("libgtk3_kniBridge1424")
private external fun kniBridge1424(): ULong
@SymbolName("libgtk3_kniBridge1425")
private external fun kniBridge1425(): ULong
@SymbolName("libgtk3_kniBridge1426")
private external fun kniBridge1426(): ULong
@SymbolName("libgtk3_kniBridge1427")
private external fun kniBridge1427(): ULong
@SymbolName("libgtk3_kniBridge1428")
private external fun kniBridge1428(): ULong
@SymbolName("libgtk3_kniBridge1429")
private external fun kniBridge1429(): ULong
@SymbolName("libgtk3_kniBridge1430")
private external fun kniBridge1430(): ULong
@SymbolName("libgtk3_kniBridge1431")
private external fun kniBridge1431(): ULong
@SymbolName("libgtk3_kniBridge1432")
private external fun kniBridge1432(): ULong
@SymbolName("libgtk3_kniBridge1433")
private external fun kniBridge1433(): ULong
@SymbolName("libgtk3_kniBridge1434")
private external fun kniBridge1434(): ULong
@SymbolName("libgtk3_kniBridge1435")
private external fun kniBridge1435(): ULong
@SymbolName("libgtk3_kniBridge1436")
private external fun kniBridge1436(): ULong
@SymbolName("libgtk3_kniBridge1437")
private external fun kniBridge1437(): ULong
@SymbolName("libgtk3_kniBridge1438")
private external fun kniBridge1438(): ULong
@SymbolName("libgtk3_kniBridge1439")
private external fun kniBridge1439(): ULong
@SymbolName("libgtk3_kniBridge1440")
private external fun kniBridge1440(): ULong
@SymbolName("libgtk3_kniBridge1441")
private external fun kniBridge1441(): ULong
@SymbolName("libgtk3_kniBridge1442")
private external fun kniBridge1442(): ULong
@SymbolName("libgtk3_kniBridge1443")
private external fun kniBridge1443(): ULong
@SymbolName("libgtk3_kniBridge1444")
private external fun kniBridge1444(): ULong
@SymbolName("libgtk3_kniBridge1445")
private external fun kniBridge1445(): ULong
@SymbolName("libgtk3_kniBridge1446")
private external fun kniBridge1446(): ULong
@SymbolName("libgtk3_kniBridge1447")
private external fun kniBridge1447(): ULong
@SymbolName("libgtk3_kniBridge1448")
private external fun kniBridge1448(): ULong
@SymbolName("libgtk3_kniBridge1449")
private external fun kniBridge1449(): ULong
@SymbolName("libgtk3_kniBridge1450")
private external fun kniBridge1450(): ULong
@SymbolName("libgtk3_kniBridge1451")
private external fun kniBridge1451(): ULong
@SymbolName("libgtk3_kniBridge1452")
private external fun kniBridge1452(): ULong
@SymbolName("libgtk3_kniBridge1453")
private external fun kniBridge1453(): ULong
@SymbolName("libgtk3_kniBridge1454")
private external fun kniBridge1454(): ULong
@SymbolName("libgtk3_kniBridge1455")
private external fun kniBridge1455(): ULong
@SymbolName("libgtk3_kniBridge1456")
private external fun kniBridge1456(): ULong
@SymbolName("libgtk3_kniBridge1457")
private external fun kniBridge1457(): ULong
@SymbolName("libgtk3_kniBridge1458")
private external fun kniBridge1458(): ULong
@SymbolName("libgtk3_kniBridge1459")
private external fun kniBridge1459(): ULong
@SymbolName("libgtk3_kniBridge1460")
private external fun kniBridge1460(): ULong
@SymbolName("libgtk3_kniBridge1461")
private external fun kniBridge1461(): ULong
@SymbolName("libgtk3_kniBridge1462")
private external fun kniBridge1462(): ULong
@SymbolName("libgtk3_kniBridge1463")
private external fun kniBridge1463(): ULong
@SymbolName("libgtk3_kniBridge1464")
private external fun kniBridge1464(): ULong
@SymbolName("libgtk3_kniBridge1465")
private external fun kniBridge1465(): ULong
@SymbolName("libgtk3_kniBridge1466")
private external fun kniBridge1466(): ULong
@SymbolName("libgtk3_kniBridge1467")
private external fun kniBridge1467(): ULong
@SymbolName("libgtk3_kniBridge1468")
private external fun kniBridge1468(): ULong
@SymbolName("libgtk3_kniBridge1469")
private external fun kniBridge1469(): ULong
@SymbolName("libgtk3_kniBridge1470")
private external fun kniBridge1470(): ULong
@SymbolName("libgtk3_kniBridge1471")
private external fun kniBridge1471(): ULong
@SymbolName("libgtk3_kniBridge1472")
private external fun kniBridge1472(): ULong
@SymbolName("libgtk3_kniBridge1473")
private external fun kniBridge1473(): ULong
@SymbolName("libgtk3_kniBridge1474")
private external fun kniBridge1474(): ULong
@SymbolName("libgtk3_kniBridge1475")
private external fun kniBridge1475(): ULong
@SymbolName("libgtk3_kniBridge1476")
private external fun kniBridge1476(): ULong
@SymbolName("libgtk3_kniBridge1477")
private external fun kniBridge1477(): ULong
@SymbolName("libgtk3_kniBridge1478")
private external fun kniBridge1478(): ULong
@SymbolName("libgtk3_kniBridge1479")
private external fun kniBridge1479(): ULong
@SymbolName("libgtk3_kniBridge1480")
private external fun kniBridge1480(): ULong
@SymbolName("libgtk3_kniBridge1481")
private external fun kniBridge1481(): ULong
@SymbolName("libgtk3_kniBridge1482")
private external fun kniBridge1482(): ULong
@SymbolName("libgtk3_kniBridge1483")
private external fun kniBridge1483(): ULong
@SymbolName("libgtk3_kniBridge1484")
private external fun kniBridge1484(): ULong
@SymbolName("libgtk3_kniBridge1485")
private external fun kniBridge1485(): ULong
@SymbolName("libgtk3_kniBridge1486")
private external fun kniBridge1486(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge1487")
private external fun kniBridge1487(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1488")
private external fun kniBridge1488(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1489")
private external fun kniBridge1489(): ULong
@SymbolName("libgtk3_kniBridge1490")
private external fun kniBridge1490(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1491")
private external fun kniBridge1491(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1492")
private external fun kniBridge1492(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1493")
private external fun kniBridge1493(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1494")
private external fun kniBridge1494(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1495")
private external fun kniBridge1495(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1496")
private external fun kniBridge1496(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1497")
private external fun kniBridge1497(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge1498")
private external fun kniBridge1498(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1499")
private external fun kniBridge1499(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1500")
private external fun kniBridge1500(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1501")
private external fun kniBridge1501(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libgtk3_kniBridge1502")
private external fun kniBridge1502(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1503")
private external fun kniBridge1503(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1504")
private external fun kniBridge1504(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1505")
private external fun kniBridge1505(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1506")
private external fun kniBridge1506(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1507")
private external fun kniBridge1507(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1508")
private external fun kniBridge1508(): NativePtr
@SymbolName("libgtk3_kniBridge1509")
private external fun kniBridge1509(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1510")
private external fun kniBridge1510(): Unit
@SymbolName("libgtk3_kniBridge1511")
private external fun kniBridge1511(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1512")
private external fun kniBridge1512(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1513")
private external fun kniBridge1513(): ULong
@SymbolName("libgtk3_kniBridge1514")
private external fun kniBridge1514(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1515")
private external fun kniBridge1515(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1516")
private external fun kniBridge1516(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1517")
private external fun kniBridge1517(): ULong
@SymbolName("libgtk3_kniBridge1518")
private external fun kniBridge1518(): NativePtr
@SymbolName("libgtk3_kniBridge1519")
private external fun kniBridge1519(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1520")
private external fun kniBridge1520(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1521")
private external fun kniBridge1521(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1522")
private external fun kniBridge1522(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1523")
private external fun kniBridge1523(): ULong
@SymbolName("libgtk3_kniBridge1524")
private external fun kniBridge1524(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1525")
private external fun kniBridge1525(): NativePtr
@SymbolName("libgtk3_kniBridge1526")
private external fun kniBridge1526(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1527")
private external fun kniBridge1527(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1528")
private external fun kniBridge1528(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1529")
private external fun kniBridge1529(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1530")
private external fun kniBridge1530(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1531")
private external fun kniBridge1531(): ULong
@SymbolName("libgtk3_kniBridge1532")
private external fun kniBridge1532(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1533")
private external fun kniBridge1533(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1534")
private external fun kniBridge1534(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1535")
private external fun kniBridge1535(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1536")
private external fun kniBridge1536(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1537")
private external fun kniBridge1537(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1538")
private external fun kniBridge1538(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1539")
private external fun kniBridge1539(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1540")
private external fun kniBridge1540(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1541")
private external fun kniBridge1541(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1542")
private external fun kniBridge1542(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1543")
private external fun kniBridge1543(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1544")
private external fun kniBridge1544(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1545")
private external fun kniBridge1545(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1546")
private external fun kniBridge1546(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1547")
private external fun kniBridge1547(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1548")
private external fun kniBridge1548(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1549")
private external fun kniBridge1549(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1550")
private external fun kniBridge1550(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1551")
private external fun kniBridge1551(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1552")
private external fun kniBridge1552(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1553")
private external fun kniBridge1553(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1554")
private external fun kniBridge1554(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1555")
private external fun kniBridge1555(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1556")
private external fun kniBridge1556(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1557")
private external fun kniBridge1557(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1558")
private external fun kniBridge1558(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1559")
private external fun kniBridge1559(): ULong
@SymbolName("libgtk3_kniBridge1560")
private external fun kniBridge1560(): NativePtr
@SymbolName("libgtk3_kniBridge1561")
private external fun kniBridge1561(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1562")
private external fun kniBridge1562(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1563")
private external fun kniBridge1563(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1564")
private external fun kniBridge1564(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1565")
private external fun kniBridge1565(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1566")
private external fun kniBridge1566(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1567")
private external fun kniBridge1567(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1568")
private external fun kniBridge1568(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1569")
private external fun kniBridge1569(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1570")
private external fun kniBridge1570(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1571")
private external fun kniBridge1571(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1572")
private external fun kniBridge1572(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1573")
private external fun kniBridge1573(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1574")
private external fun kniBridge1574(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1575")
private external fun kniBridge1575(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1576")
private external fun kniBridge1576(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1577")
private external fun kniBridge1577(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1578")
private external fun kniBridge1578(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1579")
private external fun kniBridge1579(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1580")
private external fun kniBridge1580(): ULong
@SymbolName("libgtk3_kniBridge1581")
private external fun kniBridge1581(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge1582")
private external fun kniBridge1582(): ULong
@SymbolName("libgtk3_kniBridge1583")
private external fun kniBridge1583(): NativePtr
@SymbolName("libgtk3_kniBridge1584")
private external fun kniBridge1584(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1585")
private external fun kniBridge1585(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1586")
private external fun kniBridge1586(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1587")
private external fun kniBridge1587(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1588")
private external fun kniBridge1588(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1589")
private external fun kniBridge1589(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1590")
private external fun kniBridge1590(): ULong
@SymbolName("libgtk3_kniBridge1591")
private external fun kniBridge1591(): ULong
@SymbolName("libgtk3_kniBridge1592")
private external fun kniBridge1592(p0: NativePtr, p1: UShort): NativePtr
@SymbolName("libgtk3_kniBridge1593")
private external fun kniBridge1593(p0: UShort): NativePtr
@SymbolName("libgtk3_kniBridge1594")
private external fun kniBridge1594(p0: NativePtr, p1: UShort, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1595")
private external fun kniBridge1595(p0: NativePtr, p1: UShort, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1596")
private external fun kniBridge1596(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1597")
private external fun kniBridge1597(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1598")
private external fun kniBridge1598(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1599")
private external fun kniBridge1599(): ULong
@SymbolName("libgtk3_kniBridge1600")
private external fun kniBridge1600(): NativePtr
@SymbolName("libgtk3_kniBridge1601")
private external fun kniBridge1601(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1602")
private external fun kniBridge1602(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1603")
private external fun kniBridge1603(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1604")
private external fun kniBridge1604(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1605")
private external fun kniBridge1605(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1606")
private external fun kniBridge1606(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1607")
private external fun kniBridge1607(): ULong
@SymbolName("libgtk3_kniBridge1608")
private external fun kniBridge1608(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1609")
private external fun kniBridge1609(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1610")
private external fun kniBridge1610(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1611")
private external fun kniBridge1611(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1612")
private external fun kniBridge1612(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1613")
private external fun kniBridge1613(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1614")
private external fun kniBridge1614(): ULong
@SymbolName("libgtk3_kniBridge1615")
private external fun kniBridge1615(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1616")
private external fun kniBridge1616(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1617")
private external fun kniBridge1617(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1618")
private external fun kniBridge1618(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1619")
private external fun kniBridge1619(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1620")
private external fun kniBridge1620(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1621")
private external fun kniBridge1621(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1622")
private external fun kniBridge1622(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1623")
private external fun kniBridge1623(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1624")
private external fun kniBridge1624(p0: NativePtr, p1: Int, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge1625")
private external fun kniBridge1625(): ULong
@SymbolName("libgtk3_kniBridge1626")
private external fun kniBridge1626(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1627")
private external fun kniBridge1627(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1628")
private external fun kniBridge1628(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1629")
private external fun kniBridge1629(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge1630")
private external fun kniBridge1630(): ULong
@SymbolName("libgtk3_kniBridge1631")
private external fun kniBridge1631(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1632")
private external fun kniBridge1632(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1633")
private external fun kniBridge1633(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1634")
private external fun kniBridge1634(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge1635")
private external fun kniBridge1635(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1636")
private external fun kniBridge1636(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1637")
private external fun kniBridge1637(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1638")
private external fun kniBridge1638(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libgtk3_kniBridge1639")
private external fun kniBridge1639(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libgtk3_kniBridge1640")
private external fun kniBridge1640(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge1641")
private external fun kniBridge1641(): ULong
@SymbolName("libgtk3_kniBridge1642")
private external fun kniBridge1642(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1643")
private external fun kniBridge1643(): ULong
@SymbolName("libgtk3_kniBridge1644")
private external fun kniBridge1644(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1645")
private external fun kniBridge1645(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1646")
private external fun kniBridge1646(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1647")
private external fun kniBridge1647(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1648")
private external fun kniBridge1648(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1649")
private external fun kniBridge1649(): ULong
@SymbolName("libgtk3_kniBridge1650")
private external fun kniBridge1650(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr, p4: UShort, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1651")
private external fun kniBridge1651(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1652")
private external fun kniBridge1652(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1653")
private external fun kniBridge1653(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1654")
private external fun kniBridge1654(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1655")
private external fun kniBridge1655(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1656")
private external fun kniBridge1656(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1657")
private external fun kniBridge1657(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1658")
private external fun kniBridge1658(): ULong
@SymbolName("libgtk3_kniBridge1659")
private external fun kniBridge1659(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1660")
private external fun kniBridge1660(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1661")
private external fun kniBridge1661(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1662")
private external fun kniBridge1662(): ULong
@SymbolName("libgtk3_kniBridge1663")
private external fun kniBridge1663(): ULong
@SymbolName("libgtk3_kniBridge1664")
private external fun kniBridge1664(): NativePtr
@SymbolName("libgtk3_kniBridge1665")
private external fun kniBridge1665(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1666")
private external fun kniBridge1666(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1667")
private external fun kniBridge1667(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1668")
private external fun kniBridge1668(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1669")
private external fun kniBridge1669(): ULong
@SymbolName("libgtk3_kniBridge1670")
private external fun kniBridge1670(): NativePtr
@SymbolName("libgtk3_kniBridge1671")
private external fun kniBridge1671(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1672")
private external fun kniBridge1672(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1673")
private external fun kniBridge1673(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1674")
private external fun kniBridge1674(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1675")
private external fun kniBridge1675(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1676")
private external fun kniBridge1676(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1677")
private external fun kniBridge1677(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1678")
private external fun kniBridge1678(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1679")
private external fun kniBridge1679(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1680")
private external fun kniBridge1680(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1681")
private external fun kniBridge1681(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1682")
private external fun kniBridge1682(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1683")
private external fun kniBridge1683(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1684")
private external fun kniBridge1684(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1685")
private external fun kniBridge1685(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1686")
private external fun kniBridge1686(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1687")
private external fun kniBridge1687(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1688")
private external fun kniBridge1688(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1689")
private external fun kniBridge1689(): UInt
@SymbolName("libgtk3_kniBridge1690")
private external fun kniBridge1690(): UInt
@SymbolName("libgtk3_kniBridge1691")
private external fun kniBridge1691(): ULong
@SymbolName("libgtk3_kniBridge1692")
private external fun kniBridge1692(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1693")
private external fun kniBridge1693(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1694")
private external fun kniBridge1694(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1695")
private external fun kniBridge1695(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1696")
private external fun kniBridge1696(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1697")
private external fun kniBridge1697(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1698")
private external fun kniBridge1698(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1699")
private external fun kniBridge1699(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1700")
private external fun kniBridge1700(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1701")
private external fun kniBridge1701(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1702")
private external fun kniBridge1702(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1703")
private external fun kniBridge1703(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1704")
private external fun kniBridge1704(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1705")
private external fun kniBridge1705(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1706")
private external fun kniBridge1706(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1707")
private external fun kniBridge1707(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1708")
private external fun kniBridge1708(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1709")
private external fun kniBridge1709(): ULong
@SymbolName("libgtk3_kniBridge1710")
private external fun kniBridge1710(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge1711")
private external fun kniBridge1711(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1712")
private external fun kniBridge1712(p0: NativePtr, p1: Long, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1713")
private external fun kniBridge1713(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1714")
private external fun kniBridge1714(p0: NativePtr, p1: Long, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1715")
private external fun kniBridge1715(): ULong
@SymbolName("libgtk3_kniBridge1716")
private external fun kniBridge1716(): NativePtr
@SymbolName("libgtk3_kniBridge1717")
private external fun kniBridge1717(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1718")
private external fun kniBridge1718(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1719")
private external fun kniBridge1719(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1720")
private external fun kniBridge1720(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge1721")
private external fun kniBridge1721(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1722")
private external fun kniBridge1722(): ULong
@SymbolName("libgtk3_kniBridge1723")
private external fun kniBridge1723(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1724")
private external fun kniBridge1724(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1725")
private external fun kniBridge1725(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1726")
private external fun kniBridge1726(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1727")
private external fun kniBridge1727(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1728")
private external fun kniBridge1728(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1729")
private external fun kniBridge1729(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1730")
private external fun kniBridge1730(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1731")
private external fun kniBridge1731(): ULong
@SymbolName("libgtk3_kniBridge1732")
private external fun kniBridge1732(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1733")
private external fun kniBridge1733(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1734")
private external fun kniBridge1734(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1735")
private external fun kniBridge1735(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1736")
private external fun kniBridge1736(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1737")
private external fun kniBridge1737(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1738")
private external fun kniBridge1738(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1739")
private external fun kniBridge1739(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1740")
private external fun kniBridge1740(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1741")
private external fun kniBridge1741(): ULong
@SymbolName("libgtk3_kniBridge1742")
private external fun kniBridge1742(): NativePtr
@SymbolName("libgtk3_kniBridge1743")
private external fun kniBridge1743(): NativePtr
@SymbolName("libgtk3_kniBridge1744")
private external fun kniBridge1744(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1745")
private external fun kniBridge1745(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1746")
private external fun kniBridge1746(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1747")
private external fun kniBridge1747(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1748")
private external fun kniBridge1748(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1749")
private external fun kniBridge1749(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1750")
private external fun kniBridge1750(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1751")
private external fun kniBridge1751(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1752")
private external fun kniBridge1752(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1753")
private external fun kniBridge1753(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1754")
private external fun kniBridge1754(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1755")
private external fun kniBridge1755(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1756")
private external fun kniBridge1756(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1757")
private external fun kniBridge1757(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1758")
private external fun kniBridge1758(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1759")
private external fun kniBridge1759(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge1760")
private external fun kniBridge1760(p0: NativePtr, p1: NativePtr): Long
@SymbolName("libgtk3_kniBridge1761")
private external fun kniBridge1761(p0: NativePtr, p1: NativePtr, p2: Long): Int
@SymbolName("libgtk3_kniBridge1762")
private external fun kniBridge1762(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1763")
private external fun kniBridge1763(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge1764")
private external fun kniBridge1764(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1765")
private external fun kniBridge1765(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libgtk3_kniBridge1766")
private external fun kniBridge1766(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1767")
private external fun kniBridge1767(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1768")
private external fun kniBridge1768(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1769")
private external fun kniBridge1769(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge1770")
private external fun kniBridge1770(p0: NativePtr, p1: NativePtr): Double
@SymbolName("libgtk3_kniBridge1771")
private external fun kniBridge1771(p0: NativePtr, p1: NativePtr, p2: Double): Int
@SymbolName("libgtk3_kniBridge1772")
private external fun kniBridge1772(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1773")
private external fun kniBridge1773(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1774")
private external fun kniBridge1774(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1775")
private external fun kniBridge1775(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge1776")
private external fun kniBridge1776(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1777")
private external fun kniBridge1777(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge1778")
private external fun kniBridge1778(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1779")
private external fun kniBridge1779(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1780")
private external fun kniBridge1780(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1781")
private external fun kniBridge1781(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1782")
private external fun kniBridge1782(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1783")
private external fun kniBridge1783(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1784")
private external fun kniBridge1784(): Unit
@SymbolName("libgtk3_kniBridge1785")
private external fun kniBridge1785(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge1786")
private external fun kniBridge1786(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1787")
private external fun kniBridge1787(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Unit
@SymbolName("libgtk3_kniBridge1788")
private external fun kniBridge1788(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1789")
private external fun kniBridge1789(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1790")
private external fun kniBridge1790(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1791")
private external fun kniBridge1791(): ULong
@SymbolName("libgtk3_kniBridge1792")
private external fun kniBridge1792(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1793")
private external fun kniBridge1793(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1794")
private external fun kniBridge1794(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1795")
private external fun kniBridge1795(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1796")
private external fun kniBridge1796(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1797")
private external fun kniBridge1797(): ULong
@SymbolName("libgtk3_kniBridge1798")
private external fun kniBridge1798(): NativePtr
@SymbolName("libgtk3_kniBridge1799")
private external fun kniBridge1799(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1800")
private external fun kniBridge1800(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1801")
private external fun kniBridge1801(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1802")
private external fun kniBridge1802(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1803")
private external fun kniBridge1803(): ULong
@SymbolName("libgtk3_kniBridge1804")
private external fun kniBridge1804(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1805")
private external fun kniBridge1805(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1806")
private external fun kniBridge1806(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1807")
private external fun kniBridge1807(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1808")
private external fun kniBridge1808(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1809")
private external fun kniBridge1809(p0: NativePtr, p1: Long): Unit
@SymbolName("libgtk3_kniBridge1810")
private external fun kniBridge1810(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge1811")
private external fun kniBridge1811(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1812")
private external fun kniBridge1812(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1813")
private external fun kniBridge1813(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1814")
private external fun kniBridge1814(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1815")
private external fun kniBridge1815(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1816")
private external fun kniBridge1816(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1817")
private external fun kniBridge1817(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1818")
private external fun kniBridge1818(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1819")
private external fun kniBridge1819(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1820")
private external fun kniBridge1820(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1821")
private external fun kniBridge1821(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1822")
private external fun kniBridge1822(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1823")
private external fun kniBridge1823(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1824")
private external fun kniBridge1824(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1825")
private external fun kniBridge1825(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1826")
private external fun kniBridge1826(): ULong
@SymbolName("libgtk3_kniBridge1827")
private external fun kniBridge1827(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1828")
private external fun kniBridge1828(): ULong
@SymbolName("libgtk3_kniBridge1829")
private external fun kniBridge1829(p0: Int): NativePtr
@SymbolName("libgtk3_kniBridge1830")
private external fun kniBridge1830(): ULong
@SymbolName("libgtk3_kniBridge1831")
private external fun kniBridge1831(): NativePtr
@SymbolName("libgtk3_kniBridge1832")
private external fun kniBridge1832(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1833")
private external fun kniBridge1833(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1834")
private external fun kniBridge1834(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1835")
private external fun kniBridge1835(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1836")
private external fun kniBridge1836(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1837")
private external fun kniBridge1837(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1838")
private external fun kniBridge1838(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1839")
private external fun kniBridge1839(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1840")
private external fun kniBridge1840(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1841")
private external fun kniBridge1841(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1842")
private external fun kniBridge1842(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1843")
private external fun kniBridge1843(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1844")
private external fun kniBridge1844(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1845")
private external fun kniBridge1845(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1846")
private external fun kniBridge1846(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1847")
private external fun kniBridge1847(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1848")
private external fun kniBridge1848(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1849")
private external fun kniBridge1849(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1850")
private external fun kniBridge1850(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1851")
private external fun kniBridge1851(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1852")
private external fun kniBridge1852(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1853")
private external fun kniBridge1853(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1854")
private external fun kniBridge1854(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1855")
private external fun kniBridge1855(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1856")
private external fun kniBridge1856(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1857")
private external fun kniBridge1857(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1858")
private external fun kniBridge1858(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1859")
private external fun kniBridge1859(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1860")
private external fun kniBridge1860(p0: NativePtr, p1: NativePtr, p2: UShort, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1861")
private external fun kniBridge1861(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1862")
private external fun kniBridge1862(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1863")
private external fun kniBridge1863(): ULong
@SymbolName("libgtk3_kniBridge1864")
private external fun kniBridge1864(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1865")
private external fun kniBridge1865(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1866")
private external fun kniBridge1866(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1867")
private external fun kniBridge1867(): ULong
@SymbolName("libgtk3_kniBridge1868")
private external fun kniBridge1868(p0: UInt, p1: UInt, p2: Int, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1869")
private external fun kniBridge1869(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1870")
private external fun kniBridge1870(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1871")
private external fun kniBridge1871(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1872")
private external fun kniBridge1872(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1873")
private external fun kniBridge1873(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1874")
private external fun kniBridge1874(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1875")
private external fun kniBridge1875(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1876")
private external fun kniBridge1876(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1877")
private external fun kniBridge1877(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1878")
private external fun kniBridge1878(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1879")
private external fun kniBridge1879(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1880")
private external fun kniBridge1880(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1881")
private external fun kniBridge1881(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1882")
private external fun kniBridge1882(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1883")
private external fun kniBridge1883(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1884")
private external fun kniBridge1884(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1885")
private external fun kniBridge1885(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1886")
private external fun kniBridge1886(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1887")
private external fun kniBridge1887(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1888")
private external fun kniBridge1888(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1889")
private external fun kniBridge1889(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1890")
private external fun kniBridge1890(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge1891")
private external fun kniBridge1891(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge1892")
private external fun kniBridge1892(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1893")
private external fun kniBridge1893(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1894")
private external fun kniBridge1894(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1895")
private external fun kniBridge1895(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1896")
private external fun kniBridge1896(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1897")
private external fun kniBridge1897(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1898")
private external fun kniBridge1898(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1899")
private external fun kniBridge1899(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1900")
private external fun kniBridge1900(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge1901")
private external fun kniBridge1901(p0: NativePtr, p1: UInt): UInt
@SymbolName("libgtk3_kniBridge1902")
private external fun kniBridge1902(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1903")
private external fun kniBridge1903(p0: NativePtr, p1: UInt, p2: Long, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1904")
private external fun kniBridge1904(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1905")
private external fun kniBridge1905(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1906")
private external fun kniBridge1906(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge1907")
private external fun kniBridge1907(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libgtk3_kniBridge1908")
private external fun kniBridge1908(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Long
@SymbolName("libgtk3_kniBridge1909")
private external fun kniBridge1909(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libgtk3_kniBridge1910")
private external fun kniBridge1910(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Long
@SymbolName("libgtk3_kniBridge1911")
private external fun kniBridge1911(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int, p6: Int, p7: NativePtr, p8: NativePtr): Long
@SymbolName("libgtk3_kniBridge1912")
private external fun kniBridge1912(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1913")
private external fun kniBridge1913(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge1914")
private external fun kniBridge1914(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1915")
private external fun kniBridge1915(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1916")
private external fun kniBridge1916(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1917")
private external fun kniBridge1917(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1918")
private external fun kniBridge1918(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1919")
private external fun kniBridge1919(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1920")
private external fun kniBridge1920(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libgtk3_kniBridge1921")
private external fun kniBridge1921(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libgtk3_kniBridge1922")
private external fun kniBridge1922(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int, p6: Int, p7: Long, p8: NativePtr, p9: NativePtr, p10: NativePtr): Int
@SymbolName("libgtk3_kniBridge1923")
private external fun kniBridge1923(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1924")
private external fun kniBridge1924(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge1925")
private external fun kniBridge1925(): ULong
@SymbolName("libgtk3_kniBridge1926")
private external fun kniBridge1926(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1927")
private external fun kniBridge1927(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1928")
private external fun kniBridge1928(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1929")
private external fun kniBridge1929(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge1930")
private external fun kniBridge1930(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1931")
private external fun kniBridge1931(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1932")
private external fun kniBridge1932(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1933")
private external fun kniBridge1933(p0: ULong, p1: UInt, p2: UInt, p3: Int): Unit
@SymbolName("libgtk3_kniBridge1934")
private external fun kniBridge1934(p0: UInt, p1: UInt, p2: Int): ULong
@SymbolName("libgtk3_kniBridge1935")
private external fun kniBridge1935(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1936")
private external fun kniBridge1936(): ULong
@SymbolName("libgtk3_kniBridge1937")
private external fun kniBridge1937(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge1938")
private external fun kniBridge1938(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1939")
private external fun kniBridge1939(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1940")
private external fun kniBridge1940(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1941")
private external fun kniBridge1941(p0: Int, p1: Int, p2: ULong, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1942")
private external fun kniBridge1942(): ULong
@SymbolName("libgtk3_kniBridge1943")
private external fun kniBridge1943(): NativePtr
@SymbolName("libgtk3_kniBridge1944")
private external fun kniBridge1944(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1945")
private external fun kniBridge1945(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1946")
private external fun kniBridge1946(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge1947")
private external fun kniBridge1947(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge1948")
private external fun kniBridge1948(p0: NativePtr, p1: NativePtr, p2: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1949")
private external fun kniBridge1949(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1950")
private external fun kniBridge1950(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1951")
private external fun kniBridge1951(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1952")
private external fun kniBridge1952(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1953")
private external fun kniBridge1953(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1954")
private external fun kniBridge1954(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1955")
private external fun kniBridge1955(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1956")
private external fun kniBridge1956(): ULong
@SymbolName("libgtk3_kniBridge1957")
private external fun kniBridge1957(): NativePtr
@SymbolName("libgtk3_kniBridge1958")
private external fun kniBridge1958(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1959")
private external fun kniBridge1959(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1960")
private external fun kniBridge1960(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1961")
private external fun kniBridge1961(): ULong
@SymbolName("libgtk3_kniBridge1962")
private external fun kniBridge1962(p0: NativePtr, p1: UShort, p2: UShort, p3: UShort): NativePtr
@SymbolName("libgtk3_kniBridge1963")
private external fun kniBridge1963(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1964")
private external fun kniBridge1964(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1965")
private external fun kniBridge1965(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1966")
private external fun kniBridge1966(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1967")
private external fun kniBridge1967(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1968")
private external fun kniBridge1968(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge1969")
private external fun kniBridge1969(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1970")
private external fun kniBridge1970(): ULong
@SymbolName("libgtk3_kniBridge1971")
private external fun kniBridge1971(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1972")
private external fun kniBridge1972(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1973")
private external fun kniBridge1973(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1974")
private external fun kniBridge1974(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1975")
private external fun kniBridge1975(): ULong
@SymbolName("libgtk3_kniBridge1976")
private external fun kniBridge1976(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1977")
private external fun kniBridge1977(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1978")
private external fun kniBridge1978(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1979")
private external fun kniBridge1979(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1980")
private external fun kniBridge1980(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1981")
private external fun kniBridge1981(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1982")
private external fun kniBridge1982(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1983")
private external fun kniBridge1983(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1984")
private external fun kniBridge1984(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1985")
private external fun kniBridge1985(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1986")
private external fun kniBridge1986(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1987")
private external fun kniBridge1987(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1988")
private external fun kniBridge1988(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1989")
private external fun kniBridge1989(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1990")
private external fun kniBridge1990(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge1991")
private external fun kniBridge1991(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge1992")
private external fun kniBridge1992(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1993")
private external fun kniBridge1993(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1994")
private external fun kniBridge1994(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge1995")
private external fun kniBridge1995(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge1996")
private external fun kniBridge1996(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1997")
private external fun kniBridge1997(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge1998")
private external fun kniBridge1998(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge1999")
private external fun kniBridge1999(p0: NativePtr, p1: Long): Unit
@SymbolName("libgtk3_kniBridge2000")
private external fun kniBridge2000(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2001")
private external fun kniBridge2001(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2002")
private external fun kniBridge2002(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2003")
private external fun kniBridge2003(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge2004")
private external fun kniBridge2004(p0: NativePtr, p1: NativePtr): Long
@SymbolName("libgtk3_kniBridge2005")
private external fun kniBridge2005(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2006")
private external fun kniBridge2006(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2007")
private external fun kniBridge2007(): ULong
@SymbolName("libgtk3_kniBridge2008")
private external fun kniBridge2008(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2009")
private external fun kniBridge2009(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2010")
private external fun kniBridge2010(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2011")
private external fun kniBridge2011(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2012")
private external fun kniBridge2012(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2013")
private external fun kniBridge2013(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2014")
private external fun kniBridge2014(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2015")
private external fun kniBridge2015(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2016")
private external fun kniBridge2016(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2017")
private external fun kniBridge2017(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2018")
private external fun kniBridge2018(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2019")
private external fun kniBridge2019(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2020")
private external fun kniBridge2020(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2021")
private external fun kniBridge2021(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2022")
private external fun kniBridge2022(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2023")
private external fun kniBridge2023(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2024")
private external fun kniBridge2024(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2025")
private external fun kniBridge2025(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2026")
private external fun kniBridge2026(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2027")
private external fun kniBridge2027(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge2028")
private external fun kniBridge2028(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2029")
private external fun kniBridge2029(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge2030")
private external fun kniBridge2030(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge2031")
private external fun kniBridge2031(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2032")
private external fun kniBridge2032(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge2033")
private external fun kniBridge2033(): ULong
@SymbolName("libgtk3_kniBridge2034")
private external fun kniBridge2034(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge2035")
private external fun kniBridge2035(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2036")
private external fun kniBridge2036(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2037")
private external fun kniBridge2037(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge2038")
private external fun kniBridge2038(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2039")
private external fun kniBridge2039(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2040")
private external fun kniBridge2040(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2041")
private external fun kniBridge2041(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2042")
private external fun kniBridge2042(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2043")
private external fun kniBridge2043(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2044")
private external fun kniBridge2044(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2045")
private external fun kniBridge2045(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2046")
private external fun kniBridge2046(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2047")
private external fun kniBridge2047(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2048")
private external fun kniBridge2048(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge2049")
private external fun kniBridge2049(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2050")
private external fun kniBridge2050(): ULong
@SymbolName("libgtk3_kniBridge2051")
private external fun kniBridge2051(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2052")
private external fun kniBridge2052(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2053")
private external fun kniBridge2053(): ULong
@SymbolName("libgtk3_kniBridge2054")
private external fun kniBridge2054(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2055")
private external fun kniBridge2055(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2056")
private external fun kniBridge2056(): ULong
@SymbolName("libgtk3_kniBridge2057")
private external fun kniBridge2057(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge2058")
private external fun kniBridge2058(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2059")
private external fun kniBridge2059(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2060")
private external fun kniBridge2060(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2061")
private external fun kniBridge2061(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2062")
private external fun kniBridge2062(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2063")
private external fun kniBridge2063(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2064")
private external fun kniBridge2064(): Unit
@SymbolName("libgtk3_kniBridge2065")
private external fun kniBridge2065(): ULong
@SymbolName("libgtk3_kniBridge2066")
private external fun kniBridge2066(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2067")
private external fun kniBridge2067(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2068")
private external fun kniBridge2068(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge2069")
private external fun kniBridge2069(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2070")
private external fun kniBridge2070(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2071")
private external fun kniBridge2071(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2072")
private external fun kniBridge2072(): ULong
@SymbolName("libgtk3_kniBridge2073")
private external fun kniBridge2073(p0: Int): NativePtr
@SymbolName("libgtk3_kniBridge2074")
private external fun kniBridge2074(): ULong
@SymbolName("libgtk3_kniBridge2075")
private external fun kniBridge2075(): NativePtr
@SymbolName("libgtk3_kniBridge2076")
private external fun kniBridge2076(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2077")
private external fun kniBridge2077(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2078")
private external fun kniBridge2078(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2079")
private external fun kniBridge2079(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2080")
private external fun kniBridge2080(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2081")
private external fun kniBridge2081(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2082")
private external fun kniBridge2082(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2083")
private external fun kniBridge2083(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2084")
private external fun kniBridge2084(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2085")
private external fun kniBridge2085(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2086")
private external fun kniBridge2086(): ULong
@SymbolName("libgtk3_kniBridge2087")
private external fun kniBridge2087(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2088")
private external fun kniBridge2088(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2089")
private external fun kniBridge2089(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2090")
private external fun kniBridge2090(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2091")
private external fun kniBridge2091(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2092")
private external fun kniBridge2092(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2093")
private external fun kniBridge2093(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge2094")
private external fun kniBridge2094(): ULong
@SymbolName("libgtk3_kniBridge2095")
private external fun kniBridge2095(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2096")
private external fun kniBridge2096(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2097")
private external fun kniBridge2097(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2098")
private external fun kniBridge2098(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2099")
private external fun kniBridge2099(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2100")
private external fun kniBridge2100(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2101")
private external fun kniBridge2101(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2102")
private external fun kniBridge2102(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2103")
private external fun kniBridge2103(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2104")
private external fun kniBridge2104(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2105")
private external fun kniBridge2105(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2106")
private external fun kniBridge2106(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2107")
private external fun kniBridge2107(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2108")
private external fun kniBridge2108(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2109")
private external fun kniBridge2109(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2110")
private external fun kniBridge2110(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2111")
private external fun kniBridge2111(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2112")
private external fun kniBridge2112(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2113")
private external fun kniBridge2113(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2114")
private external fun kniBridge2114(): UInt
@SymbolName("libgtk3_kniBridge2115")
private external fun kniBridge2115(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge2116")
private external fun kniBridge2116(): ULong
@SymbolName("libgtk3_kniBridge2117")
private external fun kniBridge2117(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2118")
private external fun kniBridge2118(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2119")
private external fun kniBridge2119(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2120")
private external fun kniBridge2120(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2121")
private external fun kniBridge2121(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2122")
private external fun kniBridge2122(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2123")
private external fun kniBridge2123(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2124")
private external fun kniBridge2124(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2125")
private external fun kniBridge2125(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2126")
private external fun kniBridge2126(): ULong
@SymbolName("libgtk3_kniBridge2127")
private external fun kniBridge2127(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt, p6: NativePtr, p7: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2128")
private external fun kniBridge2128(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt, p6: NativePtr, p7: NativePtr, p8: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2129")
private external fun kniBridge2129(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2130")
private external fun kniBridge2130(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2131")
private external fun kniBridge2131(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2132")
private external fun kniBridge2132(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2133")
private external fun kniBridge2133(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2134")
private external fun kniBridge2134(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2135")
private external fun kniBridge2135(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2136")
private external fun kniBridge2136(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2137")
private external fun kniBridge2137(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2138")
private external fun kniBridge2138(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2139")
private external fun kniBridge2139(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2140")
private external fun kniBridge2140(): ULong
@SymbolName("libgtk3_kniBridge2141")
private external fun kniBridge2141(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2142")
private external fun kniBridge2142(): ULong
@SymbolName("libgtk3_kniBridge2143")
private external fun kniBridge2143(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2144")
private external fun kniBridge2144(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2145")
private external fun kniBridge2145(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2146")
private external fun kniBridge2146(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2147")
private external fun kniBridge2147(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2148")
private external fun kniBridge2148(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2149")
private external fun kniBridge2149(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2150")
private external fun kniBridge2150(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2151")
private external fun kniBridge2151(): ULong
@SymbolName("libgtk3_kniBridge2152")
private external fun kniBridge2152(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2153")
private external fun kniBridge2153(): ULong
@SymbolName("libgtk3_kniBridge2154")
private external fun kniBridge2154(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2155")
private external fun kniBridge2155(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2156")
private external fun kniBridge2156(p0: NativePtr, p1: NativePtr, p2: Long): Unit
@SymbolName("libgtk3_kniBridge2157")
private external fun kniBridge2157(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2158")
private external fun kniBridge2158(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2159")
private external fun kniBridge2159(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2160")
private external fun kniBridge2160(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2161")
private external fun kniBridge2161(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2162")
private external fun kniBridge2162(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2163")
private external fun kniBridge2163(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2164")
private external fun kniBridge2164(): ULong
@SymbolName("libgtk3_kniBridge2165")
private external fun kniBridge2165(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2166")
private external fun kniBridge2166(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2167")
private external fun kniBridge2167(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2168")
private external fun kniBridge2168(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2169")
private external fun kniBridge2169(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2170")
private external fun kniBridge2170(): NativePtr
@SymbolName("libgtk3_kniBridge2171")
private external fun kniBridge2171(): NativePtr
@SymbolName("libgtk3_kniBridge2172")
private external fun kniBridge2172(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libgtk3_kniBridge2173")
private external fun kniBridge2173(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge2174")
private external fun kniBridge2174(): ULong
@SymbolName("libgtk3_kniBridge2175")
private external fun kniBridge2175(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2176")
private external fun kniBridge2176(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2177")
private external fun kniBridge2177(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2178")
private external fun kniBridge2178(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2179")
private external fun kniBridge2179(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2180")
private external fun kniBridge2180(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2181")
private external fun kniBridge2181(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2182")
private external fun kniBridge2182(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2183")
private external fun kniBridge2183(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2184")
private external fun kniBridge2184(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2185")
private external fun kniBridge2185(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2186")
private external fun kniBridge2186(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2187")
private external fun kniBridge2187(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2188")
private external fun kniBridge2188(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2189")
private external fun kniBridge2189(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2190")
private external fun kniBridge2190(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2191")
private external fun kniBridge2191(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2192")
private external fun kniBridge2192(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2193")
private external fun kniBridge2193(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2194")
private external fun kniBridge2194(): ULong
@SymbolName("libgtk3_kniBridge2195")
private external fun kniBridge2195(p0: UInt, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge2196")
private external fun kniBridge2196(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2197")
private external fun kniBridge2197(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2198")
private external fun kniBridge2198(): ULong
@SymbolName("libgtk3_kniBridge2199")
private external fun kniBridge2199(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge2200")
private external fun kniBridge2200(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2201")
private external fun kniBridge2201(): ULong
@SymbolName("libgtk3_kniBridge2202")
private external fun kniBridge2202(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2203")
private external fun kniBridge2203(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2204")
private external fun kniBridge2204(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2205")
private external fun kniBridge2205(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2206")
private external fun kniBridge2206(): ULong
@SymbolName("libgtk3_kniBridge2207")
private external fun kniBridge2207(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2208")
private external fun kniBridge2208(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2209")
private external fun kniBridge2209(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2210")
private external fun kniBridge2210(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2211")
private external fun kniBridge2211(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2212")
private external fun kniBridge2212(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2213")
private external fun kniBridge2213(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge2214")
private external fun kniBridge2214(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2215")
private external fun kniBridge2215(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2216")
private external fun kniBridge2216(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2217")
private external fun kniBridge2217(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2218")
private external fun kniBridge2218(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge2219")
private external fun kniBridge2219(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2220")
private external fun kniBridge2220(): ULong
@SymbolName("libgtk3_kniBridge2221")
private external fun kniBridge2221(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2222")
private external fun kniBridge2222(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2223")
private external fun kniBridge2223(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2224")
private external fun kniBridge2224(): ULong
@SymbolName("libgtk3_kniBridge2225")
private external fun kniBridge2225(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2226")
private external fun kniBridge2226(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2227")
private external fun kniBridge2227(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2228")
private external fun kniBridge2228(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2229")
private external fun kniBridge2229(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2230")
private external fun kniBridge2230(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2231")
private external fun kniBridge2231(): ULong
@SymbolName("libgtk3_kniBridge2232")
private external fun kniBridge2232(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2233")
private external fun kniBridge2233(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2234")
private external fun kniBridge2234(): ULong
@SymbolName("libgtk3_kniBridge2235")
private external fun kniBridge2235(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2236")
private external fun kniBridge2236(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2237")
private external fun kniBridge2237(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2238")
private external fun kniBridge2238(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2239")
private external fun kniBridge2239(): ULong
@SymbolName("libgtk3_kniBridge2240")
private external fun kniBridge2240(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2241")
private external fun kniBridge2241(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2242")
private external fun kniBridge2242(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2243")
private external fun kniBridge2243(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2244")
private external fun kniBridge2244(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2245")
private external fun kniBridge2245(p0: Int, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2246")
private external fun kniBridge2246(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2247")
private external fun kniBridge2247(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2248")
private external fun kniBridge2248(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2249")
private external fun kniBridge2249(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2250")
private external fun kniBridge2250(): ULong
@SymbolName("libgtk3_kniBridge2251")
private external fun kniBridge2251(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2252")
private external fun kniBridge2252(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2253")
private external fun kniBridge2253(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2254")
private external fun kniBridge2254(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2255")
private external fun kniBridge2255(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2256")
private external fun kniBridge2256(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge2257")
private external fun kniBridge2257(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge2258")
private external fun kniBridge2258(): ULong
@SymbolName("libgtk3_kniBridge2259")
private external fun kniBridge2259(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2260")
private external fun kniBridge2260(): ULong
@SymbolName("libgtk3_kniBridge2261")
private external fun kniBridge2261(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2262")
private external fun kniBridge2262(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2263")
private external fun kniBridge2263(): ULong
@SymbolName("libgtk3_kniBridge2264")
private external fun kniBridge2264(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2265")
private external fun kniBridge2265(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2266")
private external fun kniBridge2266(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge2267")
private external fun kniBridge2267(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2268")
private external fun kniBridge2268(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge2269")
private external fun kniBridge2269(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2270")
private external fun kniBridge2270(p0: NativePtr, p1: Int, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge2271")
private external fun kniBridge2271(): ULong
@SymbolName("libgtk3_kniBridge2272")
private external fun kniBridge2272(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2273")
private external fun kniBridge2273(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2274")
private external fun kniBridge2274(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2275")
private external fun kniBridge2275(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2276")
private external fun kniBridge2276(): ULong
@SymbolName("libgtk3_kniBridge2277")
private external fun kniBridge2277(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge2278")
private external fun kniBridge2278(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2279")
private external fun kniBridge2279(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2280")
private external fun kniBridge2280(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2281")
private external fun kniBridge2281(): ULong
@SymbolName("libgtk3_kniBridge2282")
private external fun kniBridge2282(): NativePtr
@SymbolName("libgtk3_kniBridge2283")
private external fun kniBridge2283(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2284")
private external fun kniBridge2284(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2285")
private external fun kniBridge2285(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2286")
private external fun kniBridge2286(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2287")
private external fun kniBridge2287(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2288")
private external fun kniBridge2288(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2289")
private external fun kniBridge2289(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2290")
private external fun kniBridge2290(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2291")
private external fun kniBridge2291(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2292")
private external fun kniBridge2292(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2293")
private external fun kniBridge2293(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2294")
private external fun kniBridge2294(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2295")
private external fun kniBridge2295(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2296")
private external fun kniBridge2296(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2297")
private external fun kniBridge2297(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2298")
private external fun kniBridge2298(): ULong
@SymbolName("libgtk3_kniBridge2299")
private external fun kniBridge2299(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2300")
private external fun kniBridge2300(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge2301")
private external fun kniBridge2301(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2302")
private external fun kniBridge2302(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2303")
private external fun kniBridge2303(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2304")
private external fun kniBridge2304(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2305")
private external fun kniBridge2305(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2306")
private external fun kniBridge2306(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2307")
private external fun kniBridge2307(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2308")
private external fun kniBridge2308(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2309")
private external fun kniBridge2309(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2310")
private external fun kniBridge2310(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2311")
private external fun kniBridge2311(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2312")
private external fun kniBridge2312(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2313")
private external fun kniBridge2313(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2314")
private external fun kniBridge2314(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2315")
private external fun kniBridge2315(): ULong
@SymbolName("libgtk3_kniBridge2316")
private external fun kniBridge2316(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2317")
private external fun kniBridge2317(): ULong
@SymbolName("libgtk3_kniBridge2318")
private external fun kniBridge2318(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2319")
private external fun kniBridge2319(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2320")
private external fun kniBridge2320(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2321")
private external fun kniBridge2321(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2322")
private external fun kniBridge2322(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge2323")
private external fun kniBridge2323(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2324")
private external fun kniBridge2324(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2325")
private external fun kniBridge2325(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2326")
private external fun kniBridge2326(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2327")
private external fun kniBridge2327(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2328")
private external fun kniBridge2328(): ULong
@SymbolName("libgtk3_kniBridge2329")
private external fun kniBridge2329(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2330")
private external fun kniBridge2330(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2331")
private external fun kniBridge2331(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2332")
private external fun kniBridge2332(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2333")
private external fun kniBridge2333(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2334")
private external fun kniBridge2334(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2335")
private external fun kniBridge2335(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2336")
private external fun kniBridge2336(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2337")
private external fun kniBridge2337(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge2338")
private external fun kniBridge2338(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2339")
private external fun kniBridge2339(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge2340")
private external fun kniBridge2340(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge2341")
private external fun kniBridge2341(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge2342")
private external fun kniBridge2342(): ULong
@SymbolName("libgtk3_kniBridge2343")
private external fun kniBridge2343(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2344")
private external fun kniBridge2344(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2345")
private external fun kniBridge2345(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2346")
private external fun kniBridge2346(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2347")
private external fun kniBridge2347(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2348")
private external fun kniBridge2348(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge2349")
private external fun kniBridge2349(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge2350")
private external fun kniBridge2350(p0: ULong): NativePtr
@SymbolName("libgtk3_kniBridge2351")
private external fun kniBridge2351(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2352")
private external fun kniBridge2352(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge2353")
private external fun kniBridge2353(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2354")
private external fun kniBridge2354(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2355")
private external fun kniBridge2355(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge2356")
private external fun kniBridge2356(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2357")
private external fun kniBridge2357(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge2358")
private external fun kniBridge2358(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2359")
private external fun kniBridge2359(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2360")
private external fun kniBridge2360(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2361")
private external fun kniBridge2361(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2362")
private external fun kniBridge2362(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2363")
private external fun kniBridge2363(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2364")
private external fun kniBridge2364(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2365")
private external fun kniBridge2365(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2366")
private external fun kniBridge2366(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2367")
private external fun kniBridge2367(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2368")
private external fun kniBridge2368(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2369")
private external fun kniBridge2369(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2370")
private external fun kniBridge2370(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2371")
private external fun kniBridge2371(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2372")
private external fun kniBridge2372(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2373")
private external fun kniBridge2373(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2374")
private external fun kniBridge2374(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2375")
private external fun kniBridge2375(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2376")
private external fun kniBridge2376(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2377")
private external fun kniBridge2377(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2378")
private external fun kniBridge2378(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2379")
private external fun kniBridge2379(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2380")
private external fun kniBridge2380(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2381")
private external fun kniBridge2381(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2382")
private external fun kniBridge2382(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2383")
private external fun kniBridge2383(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2384")
private external fun kniBridge2384(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2385")
private external fun kniBridge2385(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2386")
private external fun kniBridge2386(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2387")
private external fun kniBridge2387(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2388")
private external fun kniBridge2388(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2389")
private external fun kniBridge2389(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2390")
private external fun kniBridge2390(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2391")
private external fun kniBridge2391(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2392")
private external fun kniBridge2392(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2393")
private external fun kniBridge2393(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2394")
private external fun kniBridge2394(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2395")
private external fun kniBridge2395(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2396")
private external fun kniBridge2396(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2397")
private external fun kniBridge2397(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2398")
private external fun kniBridge2398(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2399")
private external fun kniBridge2399(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2400")
private external fun kniBridge2400(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2401")
private external fun kniBridge2401(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2402")
private external fun kniBridge2402(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2403")
private external fun kniBridge2403(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2404")
private external fun kniBridge2404(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2405")
private external fun kniBridge2405(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2406")
private external fun kniBridge2406(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2407")
private external fun kniBridge2407(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2408")
private external fun kniBridge2408(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2409")
private external fun kniBridge2409(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2410")
private external fun kniBridge2410(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2411")
private external fun kniBridge2411(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2412")
private external fun kniBridge2412(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2413")
private external fun kniBridge2413(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2414")
private external fun kniBridge2414(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2415")
private external fun kniBridge2415(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2416")
private external fun kniBridge2416(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2417")
private external fun kniBridge2417(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2418")
private external fun kniBridge2418(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2419")
private external fun kniBridge2419(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2420")
private external fun kniBridge2420(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2421")
private external fun kniBridge2421(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2422")
private external fun kniBridge2422(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2423")
private external fun kniBridge2423(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2424")
private external fun kniBridge2424(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2425")
private external fun kniBridge2425(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2426")
private external fun kniBridge2426(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2427")
private external fun kniBridge2427(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2428")
private external fun kniBridge2428(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2429")
private external fun kniBridge2429(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2430")
private external fun kniBridge2430(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2431")
private external fun kniBridge2431(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2432")
private external fun kniBridge2432(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2433")
private external fun kniBridge2433(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2434")
private external fun kniBridge2434(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2435")
private external fun kniBridge2435(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2436")
private external fun kniBridge2436(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2437")
private external fun kniBridge2437(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2438")
private external fun kniBridge2438(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2439")
private external fun kniBridge2439(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2440")
private external fun kniBridge2440(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2441")
private external fun kniBridge2441(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2442")
private external fun kniBridge2442(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2443")
private external fun kniBridge2443(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2444")
private external fun kniBridge2444(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2445")
private external fun kniBridge2445(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2446")
private external fun kniBridge2446(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2447")
private external fun kniBridge2447(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2448")
private external fun kniBridge2448(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2449")
private external fun kniBridge2449(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2450")
private external fun kniBridge2450(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2451")
private external fun kniBridge2451(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2452")
private external fun kniBridge2452(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2453")
private external fun kniBridge2453(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2454")
private external fun kniBridge2454(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2455")
private external fun kniBridge2455(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2456")
private external fun kniBridge2456(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2457")
private external fun kniBridge2457(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2458")
private external fun kniBridge2458(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2459")
private external fun kniBridge2459(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2460")
private external fun kniBridge2460(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2461")
private external fun kniBridge2461(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2462")
private external fun kniBridge2462(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2463")
private external fun kniBridge2463(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2464")
private external fun kniBridge2464(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2465")
private external fun kniBridge2465(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2466")
private external fun kniBridge2466(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2467")
private external fun kniBridge2467(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2468")
private external fun kniBridge2468(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2469")
private external fun kniBridge2469(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2470")
private external fun kniBridge2470(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2471")
private external fun kniBridge2471(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2472")
private external fun kniBridge2472(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2473")
private external fun kniBridge2473(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2474")
private external fun kniBridge2474(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2475")
private external fun kniBridge2475(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2476")
private external fun kniBridge2476(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2477")
private external fun kniBridge2477(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2478")
private external fun kniBridge2478(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2479")
private external fun kniBridge2479(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2480")
private external fun kniBridge2480(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2481")
private external fun kniBridge2481(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2482")
private external fun kniBridge2482(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2483")
private external fun kniBridge2483(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2484")
private external fun kniBridge2484(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2485")
private external fun kniBridge2485(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2486")
private external fun kniBridge2486(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2487")
private external fun kniBridge2487(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2488")
private external fun kniBridge2488(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2489")
private external fun kniBridge2489(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2490")
private external fun kniBridge2490(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2491")
private external fun kniBridge2491(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2492")
private external fun kniBridge2492(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2493")
private external fun kniBridge2493(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2494")
private external fun kniBridge2494(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2495")
private external fun kniBridge2495(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2496")
private external fun kniBridge2496(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2497")
private external fun kniBridge2497(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2498")
private external fun kniBridge2498(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2499")
private external fun kniBridge2499(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2500")
private external fun kniBridge2500(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2501")
private external fun kniBridge2501(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2502")
private external fun kniBridge2502(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2503")
private external fun kniBridge2503(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2504")
private external fun kniBridge2504(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2505")
private external fun kniBridge2505(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2506")
private external fun kniBridge2506(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2507")
private external fun kniBridge2507(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2508")
private external fun kniBridge2508(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2509")
private external fun kniBridge2509(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2510")
private external fun kniBridge2510(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2511")
private external fun kniBridge2511(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2512")
private external fun kniBridge2512(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2513")
private external fun kniBridge2513(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2514")
private external fun kniBridge2514(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2515")
private external fun kniBridge2515(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2516")
private external fun kniBridge2516(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2517")
private external fun kniBridge2517(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2518")
private external fun kniBridge2518(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2519")
private external fun kniBridge2519(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2520")
private external fun kniBridge2520(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2521")
private external fun kniBridge2521(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2522")
private external fun kniBridge2522(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2523")
private external fun kniBridge2523(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2524")
private external fun kniBridge2524(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2525")
private external fun kniBridge2525(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2526")
private external fun kniBridge2526(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2527")
private external fun kniBridge2527(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2528")
private external fun kniBridge2528(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2529")
private external fun kniBridge2529(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2530")
private external fun kniBridge2530(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2531")
private external fun kniBridge2531(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2532")
private external fun kniBridge2532(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2533")
private external fun kniBridge2533(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2534")
private external fun kniBridge2534(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2535")
private external fun kniBridge2535(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2536")
private external fun kniBridge2536(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2537")
private external fun kniBridge2537(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2538")
private external fun kniBridge2538(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2539")
private external fun kniBridge2539(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2540")
private external fun kniBridge2540(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2541")
private external fun kniBridge2541(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2542")
private external fun kniBridge2542(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2543")
private external fun kniBridge2543(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2544")
private external fun kniBridge2544(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2545")
private external fun kniBridge2545(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2546")
private external fun kniBridge2546(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2547")
private external fun kniBridge2547(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2548")
private external fun kniBridge2548(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2549")
private external fun kniBridge2549(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2550")
private external fun kniBridge2550(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2551")
private external fun kniBridge2551(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2552")
private external fun kniBridge2552(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2553")
private external fun kniBridge2553(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2554")
private external fun kniBridge2554(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2555")
private external fun kniBridge2555(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2556")
private external fun kniBridge2556(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2557")
private external fun kniBridge2557(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2558")
private external fun kniBridge2558(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2559")
private external fun kniBridge2559(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2560")
private external fun kniBridge2560(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2561")
private external fun kniBridge2561(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2562")
private external fun kniBridge2562(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2563")
private external fun kniBridge2563(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2564")
private external fun kniBridge2564(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2565")
private external fun kniBridge2565(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2566")
private external fun kniBridge2566(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2567")
private external fun kniBridge2567(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2568")
private external fun kniBridge2568(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2569")
private external fun kniBridge2569(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2570")
private external fun kniBridge2570(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2571")
private external fun kniBridge2571(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2572")
private external fun kniBridge2572(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2573")
private external fun kniBridge2573(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2574")
private external fun kniBridge2574(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2575")
private external fun kniBridge2575(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2576")
private external fun kniBridge2576(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2577")
private external fun kniBridge2577(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2578")
private external fun kniBridge2578(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2579")
private external fun kniBridge2579(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2580")
private external fun kniBridge2580(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2581")
private external fun kniBridge2581(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2582")
private external fun kniBridge2582(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2583")
private external fun kniBridge2583(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2584")
private external fun kniBridge2584(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2585")
private external fun kniBridge2585(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2586")
private external fun kniBridge2586(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2587")
private external fun kniBridge2587(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2588")
private external fun kniBridge2588(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2589")
private external fun kniBridge2589(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2590")
private external fun kniBridge2590(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2591")
private external fun kniBridge2591(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2592")
private external fun kniBridge2592(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2593")
private external fun kniBridge2593(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2594")
private external fun kniBridge2594(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2595")
private external fun kniBridge2595(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2596")
private external fun kniBridge2596(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2597")
private external fun kniBridge2597(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2598")
private external fun kniBridge2598(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2599")
private external fun kniBridge2599(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2600")
private external fun kniBridge2600(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2601")
private external fun kniBridge2601(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2602")
private external fun kniBridge2602(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2603")
private external fun kniBridge2603(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2604")
private external fun kniBridge2604(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2605")
private external fun kniBridge2605(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2606")
private external fun kniBridge2606(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2607")
private external fun kniBridge2607(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2608")
private external fun kniBridge2608(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2609")
private external fun kniBridge2609(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2610")
private external fun kniBridge2610(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2611")
private external fun kniBridge2611(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2612")
private external fun kniBridge2612(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2613")
private external fun kniBridge2613(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2614")
private external fun kniBridge2614(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2615")
private external fun kniBridge2615(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2616")
private external fun kniBridge2616(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2617")
private external fun kniBridge2617(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2618")
private external fun kniBridge2618(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2619")
private external fun kniBridge2619(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2620")
private external fun kniBridge2620(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2621")
private external fun kniBridge2621(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2622")
private external fun kniBridge2622(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2623")
private external fun kniBridge2623(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2624")
private external fun kniBridge2624(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2625")
private external fun kniBridge2625(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2626")
private external fun kniBridge2626(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2627")
private external fun kniBridge2627(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2628")
private external fun kniBridge2628(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2629")
private external fun kniBridge2629(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2630")
private external fun kniBridge2630(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2631")
private external fun kniBridge2631(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2632")
private external fun kniBridge2632(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2633")
private external fun kniBridge2633(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2634")
private external fun kniBridge2634(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2635")
private external fun kniBridge2635(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2636")
private external fun kniBridge2636(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2637")
private external fun kniBridge2637(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2638")
private external fun kniBridge2638(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2639")
private external fun kniBridge2639(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2640")
private external fun kniBridge2640(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2641")
private external fun kniBridge2641(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2642")
private external fun kniBridge2642(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2643")
private external fun kniBridge2643(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2644")
private external fun kniBridge2644(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2645")
private external fun kniBridge2645(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2646")
private external fun kniBridge2646(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2647")
private external fun kniBridge2647(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2648")
private external fun kniBridge2648(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2649")
private external fun kniBridge2649(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2650")
private external fun kniBridge2650(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2651")
private external fun kniBridge2651(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2652")
private external fun kniBridge2652(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2653")
private external fun kniBridge2653(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2654")
private external fun kniBridge2654(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2655")
private external fun kniBridge2655(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2656")
private external fun kniBridge2656(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2657")
private external fun kniBridge2657(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2658")
private external fun kniBridge2658(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2659")
private external fun kniBridge2659(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2660")
private external fun kniBridge2660(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2661")
private external fun kniBridge2661(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2662")
private external fun kniBridge2662(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2663")
private external fun kniBridge2663(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2664")
private external fun kniBridge2664(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2665")
private external fun kniBridge2665(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2666")
private external fun kniBridge2666(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2667")
private external fun kniBridge2667(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2668")
private external fun kniBridge2668(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2669")
private external fun kniBridge2669(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2670")
private external fun kniBridge2670(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2671")
private external fun kniBridge2671(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2672")
private external fun kniBridge2672(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2673")
private external fun kniBridge2673(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2674")
private external fun kniBridge2674(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2675")
private external fun kniBridge2675(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2676")
private external fun kniBridge2676(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2677")
private external fun kniBridge2677(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2678")
private external fun kniBridge2678(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2679")
private external fun kniBridge2679(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2680")
private external fun kniBridge2680(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2681")
private external fun kniBridge2681(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2682")
private external fun kniBridge2682(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2683")
private external fun kniBridge2683(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2684")
private external fun kniBridge2684(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2685")
private external fun kniBridge2685(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2686")
private external fun kniBridge2686(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2687")
private external fun kniBridge2687(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2688")
private external fun kniBridge2688(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2689")
private external fun kniBridge2689(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2690")
private external fun kniBridge2690(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2691")
private external fun kniBridge2691(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2692")
private external fun kniBridge2692(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2693")
private external fun kniBridge2693(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2694")
private external fun kniBridge2694(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2695")
private external fun kniBridge2695(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2696")
private external fun kniBridge2696(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2697")
private external fun kniBridge2697(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2698")
private external fun kniBridge2698(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2699")
private external fun kniBridge2699(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2700")
private external fun kniBridge2700(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2701")
private external fun kniBridge2701(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2702")
private external fun kniBridge2702(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2703")
private external fun kniBridge2703(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2704")
private external fun kniBridge2704(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2705")
private external fun kniBridge2705(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2706")
private external fun kniBridge2706(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2707")
private external fun kniBridge2707(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2708")
private external fun kniBridge2708(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2709")
private external fun kniBridge2709(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2710")
private external fun kniBridge2710(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2711")
private external fun kniBridge2711(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2712")
private external fun kniBridge2712(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2713")
private external fun kniBridge2713(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2714")
private external fun kniBridge2714(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2715")
private external fun kniBridge2715(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2716")
private external fun kniBridge2716(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2717")
private external fun kniBridge2717(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2718")
private external fun kniBridge2718(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2719")
private external fun kniBridge2719(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2720")
private external fun kniBridge2720(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2721")
private external fun kniBridge2721(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2722")
private external fun kniBridge2722(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2723")
private external fun kniBridge2723(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2724")
private external fun kniBridge2724(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2725")
private external fun kniBridge2725(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2726")
private external fun kniBridge2726(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2727")
private external fun kniBridge2727(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2728")
private external fun kniBridge2728(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2729")
private external fun kniBridge2729(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2730")
private external fun kniBridge2730(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2731")
private external fun kniBridge2731(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2732")
private external fun kniBridge2732(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2733")
private external fun kniBridge2733(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2734")
private external fun kniBridge2734(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2735")
private external fun kniBridge2735(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2736")
private external fun kniBridge2736(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2737")
private external fun kniBridge2737(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2738")
private external fun kniBridge2738(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2739")
private external fun kniBridge2739(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2740")
private external fun kniBridge2740(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2741")
private external fun kniBridge2741(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2742")
private external fun kniBridge2742(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2743")
private external fun kniBridge2743(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2744")
private external fun kniBridge2744(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2745")
private external fun kniBridge2745(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2746")
private external fun kniBridge2746(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2747")
private external fun kniBridge2747(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2748")
private external fun kniBridge2748(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2749")
private external fun kniBridge2749(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2750")
private external fun kniBridge2750(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2751")
private external fun kniBridge2751(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2752")
private external fun kniBridge2752(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2753")
private external fun kniBridge2753(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2754")
private external fun kniBridge2754(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2755")
private external fun kniBridge2755(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2756")
private external fun kniBridge2756(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2757")
private external fun kniBridge2757(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2758")
private external fun kniBridge2758(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2759")
private external fun kniBridge2759(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2760")
private external fun kniBridge2760(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2761")
private external fun kniBridge2761(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2762")
private external fun kniBridge2762(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2763")
private external fun kniBridge2763(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2764")
private external fun kniBridge2764(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2765")
private external fun kniBridge2765(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2766")
private external fun kniBridge2766(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2767")
private external fun kniBridge2767(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2768")
private external fun kniBridge2768(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2769")
private external fun kniBridge2769(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2770")
private external fun kniBridge2770(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2771")
private external fun kniBridge2771(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2772")
private external fun kniBridge2772(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2773")
private external fun kniBridge2773(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2774")
private external fun kniBridge2774(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2775")
private external fun kniBridge2775(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2776")
private external fun kniBridge2776(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2777")
private external fun kniBridge2777(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2778")
private external fun kniBridge2778(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2779")
private external fun kniBridge2779(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2780")
private external fun kniBridge2780(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2781")
private external fun kniBridge2781(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2782")
private external fun kniBridge2782(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2783")
private external fun kniBridge2783(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2784")
private external fun kniBridge2784(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2785")
private external fun kniBridge2785(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2786")
private external fun kniBridge2786(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2787")
private external fun kniBridge2787(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2788")
private external fun kniBridge2788(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2789")
private external fun kniBridge2789(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2790")
private external fun kniBridge2790(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2791")
private external fun kniBridge2791(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2792")
private external fun kniBridge2792(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2793")
private external fun kniBridge2793(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2794")
private external fun kniBridge2794(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2795")
private external fun kniBridge2795(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2796")
private external fun kniBridge2796(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2797")
private external fun kniBridge2797(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2798")
private external fun kniBridge2798(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2799")
private external fun kniBridge2799(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2800")
private external fun kniBridge2800(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2801")
private external fun kniBridge2801(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2802")
private external fun kniBridge2802(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2803")
private external fun kniBridge2803(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2804")
private external fun kniBridge2804(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2805")
private external fun kniBridge2805(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2806")
private external fun kniBridge2806(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2807")
private external fun kniBridge2807(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2808")
private external fun kniBridge2808(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2809")
private external fun kniBridge2809(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2810")
private external fun kniBridge2810(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2811")
private external fun kniBridge2811(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2812")
private external fun kniBridge2812(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2813")
private external fun kniBridge2813(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2814")
private external fun kniBridge2814(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2815")
private external fun kniBridge2815(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2816")
private external fun kniBridge2816(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2817")
private external fun kniBridge2817(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2818")
private external fun kniBridge2818(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2819")
private external fun kniBridge2819(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2820")
private external fun kniBridge2820(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2821")
private external fun kniBridge2821(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2822")
private external fun kniBridge2822(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2823")
private external fun kniBridge2823(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2824")
private external fun kniBridge2824(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2825")
private external fun kniBridge2825(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2826")
private external fun kniBridge2826(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2827")
private external fun kniBridge2827(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2828")
private external fun kniBridge2828(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2829")
private external fun kniBridge2829(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2830")
private external fun kniBridge2830(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2831")
private external fun kniBridge2831(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2832")
private external fun kniBridge2832(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2833")
private external fun kniBridge2833(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2834")
private external fun kniBridge2834(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2835")
private external fun kniBridge2835(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2836")
private external fun kniBridge2836(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2837")
private external fun kniBridge2837(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2838")
private external fun kniBridge2838(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2839")
private external fun kniBridge2839(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2840")
private external fun kniBridge2840(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2841")
private external fun kniBridge2841(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2842")
private external fun kniBridge2842(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2843")
private external fun kniBridge2843(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2844")
private external fun kniBridge2844(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2845")
private external fun kniBridge2845(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2846")
private external fun kniBridge2846(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2847")
private external fun kniBridge2847(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2848")
private external fun kniBridge2848(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2849")
private external fun kniBridge2849(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2850")
private external fun kniBridge2850(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2851")
private external fun kniBridge2851(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2852")
private external fun kniBridge2852(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2853")
private external fun kniBridge2853(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2854")
private external fun kniBridge2854(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2855")
private external fun kniBridge2855(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2856")
private external fun kniBridge2856(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2857")
private external fun kniBridge2857(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2858")
private external fun kniBridge2858(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2859")
private external fun kniBridge2859(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2860")
private external fun kniBridge2860(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2861")
private external fun kniBridge2861(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2862")
private external fun kniBridge2862(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2863")
private external fun kniBridge2863(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2864")
private external fun kniBridge2864(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2865")
private external fun kniBridge2865(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2866")
private external fun kniBridge2866(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2867")
private external fun kniBridge2867(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2868")
private external fun kniBridge2868(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2869")
private external fun kniBridge2869(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2870")
private external fun kniBridge2870(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2871")
private external fun kniBridge2871(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2872")
private external fun kniBridge2872(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2873")
private external fun kniBridge2873(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2874")
private external fun kniBridge2874(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2875")
private external fun kniBridge2875(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2876")
private external fun kniBridge2876(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2877")
private external fun kniBridge2877(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2878")
private external fun kniBridge2878(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2879")
private external fun kniBridge2879(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2880")
private external fun kniBridge2880(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2881")
private external fun kniBridge2881(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2882")
private external fun kniBridge2882(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2883")
private external fun kniBridge2883(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2884")
private external fun kniBridge2884(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2885")
private external fun kniBridge2885(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2886")
private external fun kniBridge2886(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2887")
private external fun kniBridge2887(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2888")
private external fun kniBridge2888(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2889")
private external fun kniBridge2889(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2890")
private external fun kniBridge2890(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2891")
private external fun kniBridge2891(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2892")
private external fun kniBridge2892(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2893")
private external fun kniBridge2893(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2894")
private external fun kniBridge2894(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2895")
private external fun kniBridge2895(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2896")
private external fun kniBridge2896(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2897")
private external fun kniBridge2897(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2898")
private external fun kniBridge2898(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2899")
private external fun kniBridge2899(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2900")
private external fun kniBridge2900(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2901")
private external fun kniBridge2901(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2902")
private external fun kniBridge2902(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2903")
private external fun kniBridge2903(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2904")
private external fun kniBridge2904(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2905")
private external fun kniBridge2905(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2906")
private external fun kniBridge2906(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2907")
private external fun kniBridge2907(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2908")
private external fun kniBridge2908(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2909")
private external fun kniBridge2909(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2910")
private external fun kniBridge2910(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2911")
private external fun kniBridge2911(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2912")
private external fun kniBridge2912(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2913")
private external fun kniBridge2913(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2914")
private external fun kniBridge2914(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2915")
private external fun kniBridge2915(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2916")
private external fun kniBridge2916(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2917")
private external fun kniBridge2917(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2918")
private external fun kniBridge2918(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2919")
private external fun kniBridge2919(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2920")
private external fun kniBridge2920(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2921")
private external fun kniBridge2921(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2922")
private external fun kniBridge2922(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2923")
private external fun kniBridge2923(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2924")
private external fun kniBridge2924(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2925")
private external fun kniBridge2925(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2926")
private external fun kniBridge2926(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2927")
private external fun kniBridge2927(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2928")
private external fun kniBridge2928(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2929")
private external fun kniBridge2929(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2930")
private external fun kniBridge2930(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2931")
private external fun kniBridge2931(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2932")
private external fun kniBridge2932(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2933")
private external fun kniBridge2933(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2934")
private external fun kniBridge2934(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2935")
private external fun kniBridge2935(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2936")
private external fun kniBridge2936(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2937")
private external fun kniBridge2937(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2938")
private external fun kniBridge2938(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2939")
private external fun kniBridge2939(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2940")
private external fun kniBridge2940(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2941")
private external fun kniBridge2941(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2942")
private external fun kniBridge2942(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2943")
private external fun kniBridge2943(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2944")
private external fun kniBridge2944(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2945")
private external fun kniBridge2945(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2946")
private external fun kniBridge2946(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2947")
private external fun kniBridge2947(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2948")
private external fun kniBridge2948(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2949")
private external fun kniBridge2949(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2950")
private external fun kniBridge2950(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2951")
private external fun kniBridge2951(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2952")
private external fun kniBridge2952(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2953")
private external fun kniBridge2953(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2954")
private external fun kniBridge2954(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2955")
private external fun kniBridge2955(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2956")
private external fun kniBridge2956(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2957")
private external fun kniBridge2957(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2958")
private external fun kniBridge2958(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2959")
private external fun kniBridge2959(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2960")
private external fun kniBridge2960(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2961")
private external fun kniBridge2961(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2962")
private external fun kniBridge2962(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2963")
private external fun kniBridge2963(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2964")
private external fun kniBridge2964(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2965")
private external fun kniBridge2965(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2966")
private external fun kniBridge2966(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2967")
private external fun kniBridge2967(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2968")
private external fun kniBridge2968(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2969")
private external fun kniBridge2969(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2970")
private external fun kniBridge2970(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2971")
private external fun kniBridge2971(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2972")
private external fun kniBridge2972(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2973")
private external fun kniBridge2973(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2974")
private external fun kniBridge2974(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2975")
private external fun kniBridge2975(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2976")
private external fun kniBridge2976(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2977")
private external fun kniBridge2977(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2978")
private external fun kniBridge2978(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2979")
private external fun kniBridge2979(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2980")
private external fun kniBridge2980(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2981")
private external fun kniBridge2981(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2982")
private external fun kniBridge2982(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2983")
private external fun kniBridge2983(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2984")
private external fun kniBridge2984(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2985")
private external fun kniBridge2985(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2986")
private external fun kniBridge2986(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2987")
private external fun kniBridge2987(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2988")
private external fun kniBridge2988(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2989")
private external fun kniBridge2989(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2990")
private external fun kniBridge2990(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2991")
private external fun kniBridge2991(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2992")
private external fun kniBridge2992(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2993")
private external fun kniBridge2993(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2994")
private external fun kniBridge2994(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2995")
private external fun kniBridge2995(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2996")
private external fun kniBridge2996(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2997")
private external fun kniBridge2997(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2998")
private external fun kniBridge2998(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge2999")
private external fun kniBridge2999(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3000")
private external fun kniBridge3000(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3001")
private external fun kniBridge3001(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3002")
private external fun kniBridge3002(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3003")
private external fun kniBridge3003(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3004")
private external fun kniBridge3004(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3005")
private external fun kniBridge3005(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3006")
private external fun kniBridge3006(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3007")
private external fun kniBridge3007(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3008")
private external fun kniBridge3008(): ULong
@SymbolName("libgtk3_kniBridge3009")
private external fun kniBridge3009(): NativePtr
@SymbolName("libgtk3_kniBridge3010")
private external fun kniBridge3010(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3011")
private external fun kniBridge3011(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3012")
private external fun kniBridge3012(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3013")
private external fun kniBridge3013(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3014")
private external fun kniBridge3014(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3015")
private external fun kniBridge3015(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3016")
private external fun kniBridge3016(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3017")
private external fun kniBridge3017(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libgtk3_kniBridge3018")
private external fun kniBridge3018(p0: NativePtr, p1: UInt, p2: NativePtr, p3: UInt, p4: UInt): Int
@SymbolName("libgtk3_kniBridge3019")
private external fun kniBridge3019(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3020")
private external fun kniBridge3020(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3021")
private external fun kniBridge3021(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libgtk3_kniBridge3022")
private external fun kniBridge3022(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3023")
private external fun kniBridge3023(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3024")
private external fun kniBridge3024(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3025")
private external fun kniBridge3025(p0: UInt, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3026")
private external fun kniBridge3026(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3027")
private external fun kniBridge3027(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3028")
private external fun kniBridge3028(p0: UInt, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3029")
private external fun kniBridge3029(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3030")
private external fun kniBridge3030(p0: UInt, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3031")
private external fun kniBridge3031(p0: NativePtr, p1: UInt, p2: UInt, p3: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3032")
private external fun kniBridge3032(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge3033")
private external fun kniBridge3033(): UInt
@SymbolName("libgtk3_kniBridge3034")
private external fun kniBridge3034(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3035")
private external fun kniBridge3035(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3036")
private external fun kniBridge3036(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3037")
private external fun kniBridge3037(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3038")
private external fun kniBridge3038(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3039")
private external fun kniBridge3039(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3040")
private external fun kniBridge3040(): ULong
@SymbolName("libgtk3_kniBridge3041")
private external fun kniBridge3041(): NativePtr
@SymbolName("libgtk3_kniBridge3042")
private external fun kniBridge3042(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3043")
private external fun kniBridge3043(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3044")
private external fun kniBridge3044(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3045")
private external fun kniBridge3045(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3046")
private external fun kniBridge3046(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3047")
private external fun kniBridge3047(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3048")
private external fun kniBridge3048(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3049")
private external fun kniBridge3049(): ULong
@SymbolName("libgtk3_kniBridge3050")
private external fun kniBridge3050(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3051")
private external fun kniBridge3051(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3052")
private external fun kniBridge3052(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3053")
private external fun kniBridge3053(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3054")
private external fun kniBridge3054(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3055")
private external fun kniBridge3055(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3056")
private external fun kniBridge3056(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3057")
private external fun kniBridge3057(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3058")
private external fun kniBridge3058(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3059")
private external fun kniBridge3059(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3060")
private external fun kniBridge3060(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3061")
private external fun kniBridge3061(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3062")
private external fun kniBridge3062(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3063")
private external fun kniBridge3063(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3064")
private external fun kniBridge3064(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3065")
private external fun kniBridge3065(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: Int): Unit
@SymbolName("libgtk3_kniBridge3066")
private external fun kniBridge3066(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3067")
private external fun kniBridge3067(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3068")
private external fun kniBridge3068(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3069")
private external fun kniBridge3069(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3070")
private external fun kniBridge3070(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3071")
private external fun kniBridge3071(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3072")
private external fun kniBridge3072(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3073")
private external fun kniBridge3073(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3074")
private external fun kniBridge3074(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3075")
private external fun kniBridge3075(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3076")
private external fun kniBridge3076(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3077")
private external fun kniBridge3077(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3078")
private external fun kniBridge3078(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3079")
private external fun kniBridge3079(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3080")
private external fun kniBridge3080(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3081")
private external fun kniBridge3081(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3082")
private external fun kniBridge3082(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: UInt, p5: UInt): Unit
@SymbolName("libgtk3_kniBridge3083")
private external fun kniBridge3083(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt): Int
@SymbolName("libgtk3_kniBridge3084")
private external fun kniBridge3084(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3085")
private external fun kniBridge3085(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3086")
private external fun kniBridge3086(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3087")
private external fun kniBridge3087(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge3088")
private external fun kniBridge3088(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3089")
private external fun kniBridge3089(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3090")
private external fun kniBridge3090(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3091")
private external fun kniBridge3091(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3092")
private external fun kniBridge3092(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3093")
private external fun kniBridge3093(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3094")
private external fun kniBridge3094(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3095")
private external fun kniBridge3095(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3096")
private external fun kniBridge3096(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3097")
private external fun kniBridge3097(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3098")
private external fun kniBridge3098(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3099")
private external fun kniBridge3099(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3100")
private external fun kniBridge3100(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3101")
private external fun kniBridge3101(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3102")
private external fun kniBridge3102(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3103")
private external fun kniBridge3103(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3104")
private external fun kniBridge3104(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3105")
private external fun kniBridge3105(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3106")
private external fun kniBridge3106(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3107")
private external fun kniBridge3107(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3108")
private external fun kniBridge3108(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3109")
private external fun kniBridge3109(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3110")
private external fun kniBridge3110(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3111")
private external fun kniBridge3111(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3112")
private external fun kniBridge3112(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3113")
private external fun kniBridge3113(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3114")
private external fun kniBridge3114(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3115")
private external fun kniBridge3115(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3116")
private external fun kniBridge3116(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3117")
private external fun kniBridge3117(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3118")
private external fun kniBridge3118(p0: NativePtr, p1: UInt, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3119")
private external fun kniBridge3119(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3120")
private external fun kniBridge3120(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3121")
private external fun kniBridge3121(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3122")
private external fun kniBridge3122(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3123")
private external fun kniBridge3123(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3124")
private external fun kniBridge3124(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3125")
private external fun kniBridge3125(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3126")
private external fun kniBridge3126(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3127")
private external fun kniBridge3127(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3128")
private external fun kniBridge3128(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3129")
private external fun kniBridge3129(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3130")
private external fun kniBridge3130(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3131")
private external fun kniBridge3131(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3132")
private external fun kniBridge3132(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3133")
private external fun kniBridge3133(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3134")
private external fun kniBridge3134(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3135")
private external fun kniBridge3135(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3136")
private external fun kniBridge3136(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3137")
private external fun kniBridge3137(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3138")
private external fun kniBridge3138(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3139")
private external fun kniBridge3139(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3140")
private external fun kniBridge3140(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3141")
private external fun kniBridge3141(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3142")
private external fun kniBridge3142(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3143")
private external fun kniBridge3143(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3144")
private external fun kniBridge3144(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3145")
private external fun kniBridge3145(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3146")
private external fun kniBridge3146(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3147")
private external fun kniBridge3147(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3148")
private external fun kniBridge3148(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3149")
private external fun kniBridge3149(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3150")
private external fun kniBridge3150(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3151")
private external fun kniBridge3151(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3152")
private external fun kniBridge3152(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3153")
private external fun kniBridge3153(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3154")
private external fun kniBridge3154(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3155")
private external fun kniBridge3155(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3156")
private external fun kniBridge3156(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3157")
private external fun kniBridge3157(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3158")
private external fun kniBridge3158(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3159")
private external fun kniBridge3159(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3160")
private external fun kniBridge3160(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3161")
private external fun kniBridge3161(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3162")
private external fun kniBridge3162(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3163")
private external fun kniBridge3163(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3164")
private external fun kniBridge3164(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3165")
private external fun kniBridge3165(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3166")
private external fun kniBridge3166(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge3167")
private external fun kniBridge3167(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge3168")
private external fun kniBridge3168(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3169")
private external fun kniBridge3169(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3170")
private external fun kniBridge3170(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3171")
private external fun kniBridge3171(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3172")
private external fun kniBridge3172(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3173")
private external fun kniBridge3173(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge3174")
private external fun kniBridge3174(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3175")
private external fun kniBridge3175(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3176")
private external fun kniBridge3176(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3177")
private external fun kniBridge3177(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3178")
private external fun kniBridge3178(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3179")
private external fun kniBridge3179(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3180")
private external fun kniBridge3180(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3181")
private external fun kniBridge3181(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3182")
private external fun kniBridge3182(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3183")
private external fun kniBridge3183(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3184")
private external fun kniBridge3184(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3185")
private external fun kniBridge3185(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3186")
private external fun kniBridge3186(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3187")
private external fun kniBridge3187(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3188")
private external fun kniBridge3188(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3189")
private external fun kniBridge3189(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3190")
private external fun kniBridge3190(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3191")
private external fun kniBridge3191(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3192")
private external fun kniBridge3192(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3193")
private external fun kniBridge3193(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3194")
private external fun kniBridge3194(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3195")
private external fun kniBridge3195(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge3196")
private external fun kniBridge3196(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3197")
private external fun kniBridge3197(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3198")
private external fun kniBridge3198(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3199")
private external fun kniBridge3199(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3200")
private external fun kniBridge3200(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3201")
private external fun kniBridge3201(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3202")
private external fun kniBridge3202(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3203")
private external fun kniBridge3203(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3204")
private external fun kniBridge3204(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3205")
private external fun kniBridge3205(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3206")
private external fun kniBridge3206(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3207")
private external fun kniBridge3207(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3208")
private external fun kniBridge3208(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3209")
private external fun kniBridge3209(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3210")
private external fun kniBridge3210(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3211")
private external fun kniBridge3211(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3212")
private external fun kniBridge3212(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3213")
private external fun kniBridge3213(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3214")
private external fun kniBridge3214(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3215")
private external fun kniBridge3215(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3216")
private external fun kniBridge3216(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3217")
private external fun kniBridge3217(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3218")
private external fun kniBridge3218(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3219")
private external fun kniBridge3219(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge3220")
private external fun kniBridge3220(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3221")
private external fun kniBridge3221(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3222")
private external fun kniBridge3222(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3223")
private external fun kniBridge3223(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3224")
private external fun kniBridge3224(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3225")
private external fun kniBridge3225(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3226")
private external fun kniBridge3226(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3227")
private external fun kniBridge3227(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3228")
private external fun kniBridge3228(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3229")
private external fun kniBridge3229(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3230")
private external fun kniBridge3230(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3231")
private external fun kniBridge3231(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3232")
private external fun kniBridge3232(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3233")
private external fun kniBridge3233(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3234")
private external fun kniBridge3234(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3235")
private external fun kniBridge3235(): Unit
@SymbolName("libgtk3_kniBridge3236")
private external fun kniBridge3236(): Unit
@SymbolName("libgtk3_kniBridge3237")
private external fun kniBridge3237(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3238")
private external fun kniBridge3238(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3239")
private external fun kniBridge3239(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3240")
private external fun kniBridge3240(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3241")
private external fun kniBridge3241(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3242")
private external fun kniBridge3242(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3243")
private external fun kniBridge3243(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3244")
private external fun kniBridge3244(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3245")
private external fun kniBridge3245(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge3246")
private external fun kniBridge3246(): UInt
@SymbolName("libgtk3_kniBridge3247")
private external fun kniBridge3247(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3248")
private external fun kniBridge3248(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3249")
private external fun kniBridge3249(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3250")
private external fun kniBridge3250(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3251")
private external fun kniBridge3251(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3252")
private external fun kniBridge3252(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3253")
private external fun kniBridge3253(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3254")
private external fun kniBridge3254(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3255")
private external fun kniBridge3255(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3256")
private external fun kniBridge3256(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3257")
private external fun kniBridge3257(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3258")
private external fun kniBridge3258(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3259")
private external fun kniBridge3259(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3260")
private external fun kniBridge3260(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3261")
private external fun kniBridge3261(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3262")
private external fun kniBridge3262(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3263")
private external fun kniBridge3263(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3264")
private external fun kniBridge3264(): ULong
@SymbolName("libgtk3_kniBridge3265")
private external fun kniBridge3265(): NativePtr
@SymbolName("libgtk3_kniBridge3266")
private external fun kniBridge3266(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3267")
private external fun kniBridge3267(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3268")
private external fun kniBridge3268(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3269")
private external fun kniBridge3269(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3270")
private external fun kniBridge3270(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3271")
private external fun kniBridge3271(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3272")
private external fun kniBridge3272(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3273")
private external fun kniBridge3273(p0: NativePtr, p1: UInt): UInt
@SymbolName("libgtk3_kniBridge3274")
private external fun kniBridge3274(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3275")
private external fun kniBridge3275(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3276")
private external fun kniBridge3276(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3277")
private external fun kniBridge3277(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3278")
private external fun kniBridge3278(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3279")
private external fun kniBridge3279(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3280")
private external fun kniBridge3280(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3281")
private external fun kniBridge3281(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3282")
private external fun kniBridge3282(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3283")
private external fun kniBridge3283(p0: NativePtr, p1: NativePtr, p2: Int, p3: Long): Unit
@SymbolName("libgtk3_kniBridge3284")
private external fun kniBridge3284(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3285")
private external fun kniBridge3285(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3286")
private external fun kniBridge3286(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3287")
private external fun kniBridge3287(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3288")
private external fun kniBridge3288(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3289")
private external fun kniBridge3289(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3290")
private external fun kniBridge3290(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3291")
private external fun kniBridge3291(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3292")
private external fun kniBridge3292(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3293")
private external fun kniBridge3293(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3294")
private external fun kniBridge3294(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3295")
private external fun kniBridge3295(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3296")
private external fun kniBridge3296(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3297")
private external fun kniBridge3297(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3298")
private external fun kniBridge3298(): ULong
@SymbolName("libgtk3_kniBridge3299")
private external fun kniBridge3299(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3300")
private external fun kniBridge3300(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3301")
private external fun kniBridge3301(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3302")
private external fun kniBridge3302(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3303")
private external fun kniBridge3303(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3304")
private external fun kniBridge3304(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3305")
private external fun kniBridge3305(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3306")
private external fun kniBridge3306(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3307")
private external fun kniBridge3307(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3308")
private external fun kniBridge3308(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3309")
private external fun kniBridge3309(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3310")
private external fun kniBridge3310(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3311")
private external fun kniBridge3311(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3312")
private external fun kniBridge3312(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3313")
private external fun kniBridge3313(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3314")
private external fun kniBridge3314(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3315")
private external fun kniBridge3315(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3316")
private external fun kniBridge3316(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3317")
private external fun kniBridge3317(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3318")
private external fun kniBridge3318(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3319")
private external fun kniBridge3319(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3320")
private external fun kniBridge3320(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3321")
private external fun kniBridge3321(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3322")
private external fun kniBridge3322(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3323")
private external fun kniBridge3323(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3324")
private external fun kniBridge3324(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3325")
private external fun kniBridge3325(): ULong
@SymbolName("libgtk3_kniBridge3326")
private external fun kniBridge3326(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3327")
private external fun kniBridge3327(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3328")
private external fun kniBridge3328(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3329")
private external fun kniBridge3329(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3330")
private external fun kniBridge3330(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3331")
private external fun kniBridge3331(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3332")
private external fun kniBridge3332(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3333")
private external fun kniBridge3333(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3334")
private external fun kniBridge3334(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3335")
private external fun kniBridge3335(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3336")
private external fun kniBridge3336(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3337")
private external fun kniBridge3337(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3338")
private external fun kniBridge3338(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3339")
private external fun kniBridge3339(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3340")
private external fun kniBridge3340(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3341")
private external fun kniBridge3341(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3342")
private external fun kniBridge3342(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3343")
private external fun kniBridge3343(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3344")
private external fun kniBridge3344(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3345")
private external fun kniBridge3345(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3346")
private external fun kniBridge3346(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3347")
private external fun kniBridge3347(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge3348")
private external fun kniBridge3348(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3349")
private external fun kniBridge3349(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3350")
private external fun kniBridge3350(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3351")
private external fun kniBridge3351(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3352")
private external fun kniBridge3352(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3353")
private external fun kniBridge3353(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3354")
private external fun kniBridge3354(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3355")
private external fun kniBridge3355(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3356")
private external fun kniBridge3356(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3357")
private external fun kniBridge3357(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3358")
private external fun kniBridge3358(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3359")
private external fun kniBridge3359(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3360")
private external fun kniBridge3360(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3361")
private external fun kniBridge3361(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3362")
private external fun kniBridge3362(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3363")
private external fun kniBridge3363(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3364")
private external fun kniBridge3364(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3365")
private external fun kniBridge3365(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3366")
private external fun kniBridge3366(): ULong
@SymbolName("libgtk3_kniBridge3367")
private external fun kniBridge3367(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3368")
private external fun kniBridge3368(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3369")
private external fun kniBridge3369(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3370")
private external fun kniBridge3370(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3371")
private external fun kniBridge3371(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3372")
private external fun kniBridge3372(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3373")
private external fun kniBridge3373(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3374")
private external fun kniBridge3374(): ULong
@SymbolName("libgtk3_kniBridge3375")
private external fun kniBridge3375(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3376")
private external fun kniBridge3376(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3377")
private external fun kniBridge3377(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3378")
private external fun kniBridge3378(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3379")
private external fun kniBridge3379(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3380")
private external fun kniBridge3380(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3381")
private external fun kniBridge3381(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3382")
private external fun kniBridge3382(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3383")
private external fun kniBridge3383(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3384")
private external fun kniBridge3384(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3385")
private external fun kniBridge3385(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3386")
private external fun kniBridge3386(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3387")
private external fun kniBridge3387(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3388")
private external fun kniBridge3388(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3389")
private external fun kniBridge3389(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3390")
private external fun kniBridge3390(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3391")
private external fun kniBridge3391(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3392")
private external fun kniBridge3392(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3393")
private external fun kniBridge3393(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3394")
private external fun kniBridge3394(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3395")
private external fun kniBridge3395(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3396")
private external fun kniBridge3396(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3397")
private external fun kniBridge3397(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3398")
private external fun kniBridge3398(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3399")
private external fun kniBridge3399(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3400")
private external fun kniBridge3400(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3401")
private external fun kniBridge3401(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3402")
private external fun kniBridge3402(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3403")
private external fun kniBridge3403(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3404")
private external fun kniBridge3404(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3405")
private external fun kniBridge3405(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3406")
private external fun kniBridge3406(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3407")
private external fun kniBridge3407(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3408")
private external fun kniBridge3408(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3409")
private external fun kniBridge3409(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3410")
private external fun kniBridge3410(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3411")
private external fun kniBridge3411(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3412")
private external fun kniBridge3412(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3413")
private external fun kniBridge3413(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3414")
private external fun kniBridge3414(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3415")
private external fun kniBridge3415(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3416")
private external fun kniBridge3416(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3417")
private external fun kniBridge3417(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3418")
private external fun kniBridge3418(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3419")
private external fun kniBridge3419(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3420")
private external fun kniBridge3420(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3421")
private external fun kniBridge3421(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge3422")
private external fun kniBridge3422(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3423")
private external fun kniBridge3423(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3424")
private external fun kniBridge3424(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3425")
private external fun kniBridge3425(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3426")
private external fun kniBridge3426(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3427")
private external fun kniBridge3427(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3428")
private external fun kniBridge3428(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3429")
private external fun kniBridge3429(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3430")
private external fun kniBridge3430(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3431")
private external fun kniBridge3431(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3432")
private external fun kniBridge3432(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3433")
private external fun kniBridge3433(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3434")
private external fun kniBridge3434(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3435")
private external fun kniBridge3435(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3436")
private external fun kniBridge3436(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3437")
private external fun kniBridge3437(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3438")
private external fun kniBridge3438(): NativePtr
@SymbolName("libgtk3_kniBridge3439")
private external fun kniBridge3439(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3440")
private external fun kniBridge3440(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3441")
private external fun kniBridge3441(): NativePtr
@SymbolName("libgtk3_kniBridge3442")
private external fun kniBridge3442(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3443")
private external fun kniBridge3443(p0: Int): Unit
@SymbolName("libgtk3_kniBridge3444")
private external fun kniBridge3444(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3445")
private external fun kniBridge3445(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3446")
private external fun kniBridge3446(): NativePtr
@SymbolName("libgtk3_kniBridge3447")
private external fun kniBridge3447(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3448")
private external fun kniBridge3448(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3449")
private external fun kniBridge3449(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3450")
private external fun kniBridge3450(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libgtk3_kniBridge3451")
private external fun kniBridge3451(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3452")
private external fun kniBridge3452(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3453")
private external fun kniBridge3453(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3454")
private external fun kniBridge3454(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3455")
private external fun kniBridge3455(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3456")
private external fun kniBridge3456(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3457")
private external fun kniBridge3457(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3458")
private external fun kniBridge3458(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3459")
private external fun kniBridge3459(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3460")
private external fun kniBridge3460(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3461")
private external fun kniBridge3461(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3462")
private external fun kniBridge3462(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3463")
private external fun kniBridge3463(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3464")
private external fun kniBridge3464(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3465")
private external fun kniBridge3465(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3466")
private external fun kniBridge3466(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3467")
private external fun kniBridge3467(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3468")
private external fun kniBridge3468(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3469")
private external fun kniBridge3469(p0: NativePtr, p1: UInt, p2: Int, p3: Int, p4: Int, p5: UInt): Unit
@SymbolName("libgtk3_kniBridge3470")
private external fun kniBridge3470(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge3471")
private external fun kniBridge3471(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3472")
private external fun kniBridge3472(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3473")
private external fun kniBridge3473(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3474")
private external fun kniBridge3474(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3475")
private external fun kniBridge3475(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3476")
private external fun kniBridge3476(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3477")
private external fun kniBridge3477(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3478")
private external fun kniBridge3478(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3479")
private external fun kniBridge3479(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3480")
private external fun kniBridge3480(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3481")
private external fun kniBridge3481(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3482")
private external fun kniBridge3482(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3483")
private external fun kniBridge3483(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3484")
private external fun kniBridge3484(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3485")
private external fun kniBridge3485(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3486")
private external fun kniBridge3486(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3487")
private external fun kniBridge3487(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3488")
private external fun kniBridge3488(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3489")
private external fun kniBridge3489(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3490")
private external fun kniBridge3490(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3491")
private external fun kniBridge3491(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3492")
private external fun kniBridge3492(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3493")
private external fun kniBridge3493(p0: Int): Unit
@SymbolName("libgtk3_kniBridge3494")
private external fun kniBridge3494(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3495")
private external fun kniBridge3495(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3496")
private external fun kniBridge3496(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3497")
private external fun kniBridge3497(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3498")
private external fun kniBridge3498(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3499")
private external fun kniBridge3499(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3500")
private external fun kniBridge3500(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3501")
private external fun kniBridge3501(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3502")
private external fun kniBridge3502(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3503")
private external fun kniBridge3503(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3504")
private external fun kniBridge3504(): ULong
@SymbolName("libgtk3_kniBridge3505")
private external fun kniBridge3505(): NativePtr
@SymbolName("libgtk3_kniBridge3506")
private external fun kniBridge3506(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3507")
private external fun kniBridge3507(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge3508")
private external fun kniBridge3508(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3509")
private external fun kniBridge3509(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3510")
private external fun kniBridge3510(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge3511")
private external fun kniBridge3511(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3512")
private external fun kniBridge3512(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3513")
private external fun kniBridge3513(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3514")
private external fun kniBridge3514(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3515")
private external fun kniBridge3515(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3516")
private external fun kniBridge3516(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3517")
private external fun kniBridge3517(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3518")
private external fun kniBridge3518(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3519")
private external fun kniBridge3519(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3520")
private external fun kniBridge3520(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3521")
private external fun kniBridge3521(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3522")
private external fun kniBridge3522(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3523")
private external fun kniBridge3523(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3524")
private external fun kniBridge3524(): ULong
@SymbolName("libgtk3_kniBridge3525")
private external fun kniBridge3525(): NativePtr
@SymbolName("libgtk3_kniBridge3526")
private external fun kniBridge3526(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3527")
private external fun kniBridge3527(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3528")
private external fun kniBridge3528(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3529")
private external fun kniBridge3529(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3530")
private external fun kniBridge3530(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3531")
private external fun kniBridge3531(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3532")
private external fun kniBridge3532(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3533")
private external fun kniBridge3533(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3534")
private external fun kniBridge3534(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3535")
private external fun kniBridge3535(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3536")
private external fun kniBridge3536(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3537")
private external fun kniBridge3537(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3538")
private external fun kniBridge3538(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3539")
private external fun kniBridge3539(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3540")
private external fun kniBridge3540(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3541")
private external fun kniBridge3541(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3542")
private external fun kniBridge3542(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3543")
private external fun kniBridge3543(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3544")
private external fun kniBridge3544(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3545")
private external fun kniBridge3545(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3546")
private external fun kniBridge3546(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3547")
private external fun kniBridge3547(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3548")
private external fun kniBridge3548(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3549")
private external fun kniBridge3549(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3550")
private external fun kniBridge3550(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3551")
private external fun kniBridge3551(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3552")
private external fun kniBridge3552(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3553")
private external fun kniBridge3553(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3554")
private external fun kniBridge3554(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3555")
private external fun kniBridge3555(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3556")
private external fun kniBridge3556(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3557")
private external fun kniBridge3557(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3558")
private external fun kniBridge3558(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3559")
private external fun kniBridge3559(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3560")
private external fun kniBridge3560(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3561")
private external fun kniBridge3561(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3562")
private external fun kniBridge3562(): ULong
@SymbolName("libgtk3_kniBridge3563")
private external fun kniBridge3563(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3564")
private external fun kniBridge3564(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3565")
private external fun kniBridge3565(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3566")
private external fun kniBridge3566(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3567")
private external fun kniBridge3567(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3568")
private external fun kniBridge3568(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3569")
private external fun kniBridge3569(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3570")
private external fun kniBridge3570(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3571")
private external fun kniBridge3571(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3572")
private external fun kniBridge3572(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3573")
private external fun kniBridge3573(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3574")
private external fun kniBridge3574(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3575")
private external fun kniBridge3575(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3576")
private external fun kniBridge3576(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge3577")
private external fun kniBridge3577(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3578")
private external fun kniBridge3578(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3579")
private external fun kniBridge3579(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3580")
private external fun kniBridge3580(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3581")
private external fun kniBridge3581(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3582")
private external fun kniBridge3582(): ULong
@SymbolName("libgtk3_kniBridge3583")
private external fun kniBridge3583(): NativePtr
@SymbolName("libgtk3_kniBridge3584")
private external fun kniBridge3584(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3585")
private external fun kniBridge3585(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt, p6: UInt): Unit
@SymbolName("libgtk3_kniBridge3586")
private external fun kniBridge3586(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: UInt, p8: UInt): Unit
@SymbolName("libgtk3_kniBridge3587")
private external fun kniBridge3587(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: UInt, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3588")
private external fun kniBridge3588(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3589")
private external fun kniBridge3589(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3590")
private external fun kniBridge3590(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3591")
private external fun kniBridge3591(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3592")
private external fun kniBridge3592(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3593")
private external fun kniBridge3593(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3594")
private external fun kniBridge3594(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3595")
private external fun kniBridge3595(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3596")
private external fun kniBridge3596(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3597")
private external fun kniBridge3597(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3598")
private external fun kniBridge3598(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3599")
private external fun kniBridge3599(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3600")
private external fun kniBridge3600(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3601")
private external fun kniBridge3601(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3602")
private external fun kniBridge3602(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3603")
private external fun kniBridge3603(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3604")
private external fun kniBridge3604(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3605")
private external fun kniBridge3605(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3606")
private external fun kniBridge3606(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3607")
private external fun kniBridge3607(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt, p4: UInt, p5: UInt): Unit
@SymbolName("libgtk3_kniBridge3608")
private external fun kniBridge3608(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3609")
private external fun kniBridge3609(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3610")
private external fun kniBridge3610(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3611")
private external fun kniBridge3611(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3612")
private external fun kniBridge3612(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3613")
private external fun kniBridge3613(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3614")
private external fun kniBridge3614(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3615")
private external fun kniBridge3615(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3616")
private external fun kniBridge3616(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3617")
private external fun kniBridge3617(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3618")
private external fun kniBridge3618(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3619")
private external fun kniBridge3619(): ULong
@SymbolName("libgtk3_kniBridge3620")
private external fun kniBridge3620(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3621")
private external fun kniBridge3621(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3622")
private external fun kniBridge3622(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3623")
private external fun kniBridge3623(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3624")
private external fun kniBridge3624(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3625")
private external fun kniBridge3625(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3626")
private external fun kniBridge3626(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3627")
private external fun kniBridge3627(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3628")
private external fun kniBridge3628(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3629")
private external fun kniBridge3629(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3630")
private external fun kniBridge3630(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3631")
private external fun kniBridge3631(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3632")
private external fun kniBridge3632(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3633")
private external fun kniBridge3633(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3634")
private external fun kniBridge3634(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3635")
private external fun kniBridge3635(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3636")
private external fun kniBridge3636(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3637")
private external fun kniBridge3637(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3638")
private external fun kniBridge3638(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3639")
private external fun kniBridge3639(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3640")
private external fun kniBridge3640(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3641")
private external fun kniBridge3641(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3642")
private external fun kniBridge3642(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3643")
private external fun kniBridge3643(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3644")
private external fun kniBridge3644(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3645")
private external fun kniBridge3645(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3646")
private external fun kniBridge3646(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3647")
private external fun kniBridge3647(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3648")
private external fun kniBridge3648(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3649")
private external fun kniBridge3649(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3650")
private external fun kniBridge3650(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3651")
private external fun kniBridge3651(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3652")
private external fun kniBridge3652(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3653")
private external fun kniBridge3653(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3654")
private external fun kniBridge3654(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3655")
private external fun kniBridge3655(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3656")
private external fun kniBridge3656(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3657")
private external fun kniBridge3657(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3658")
private external fun kniBridge3658(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3659")
private external fun kniBridge3659(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3660")
private external fun kniBridge3660(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3661")
private external fun kniBridge3661(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3662")
private external fun kniBridge3662(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3663")
private external fun kniBridge3663(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3664")
private external fun kniBridge3664(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3665")
private external fun kniBridge3665(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3666")
private external fun kniBridge3666(p0: NativePtr, p1: Float): Unit
@SymbolName("libgtk3_kniBridge3667")
private external fun kniBridge3667(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge3668")
private external fun kniBridge3668(p0: NativePtr, p1: Float): Unit
@SymbolName("libgtk3_kniBridge3669")
private external fun kniBridge3669(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge3670")
private external fun kniBridge3670(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3671")
private external fun kniBridge3671(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3672")
private external fun kniBridge3672(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3673")
private external fun kniBridge3673(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3674")
private external fun kniBridge3674(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3675")
private external fun kniBridge3675(): ULong
@SymbolName("libgtk3_kniBridge3676")
private external fun kniBridge3676(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3677")
private external fun kniBridge3677(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3678")
private external fun kniBridge3678(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3679")
private external fun kniBridge3679(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3680")
private external fun kniBridge3680(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3681")
private external fun kniBridge3681(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3682")
private external fun kniBridge3682(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge3683")
private external fun kniBridge3683(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3684")
private external fun kniBridge3684(p0: NativePtr, p1: UInt, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3685")
private external fun kniBridge3685(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3686")
private external fun kniBridge3686(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3687")
private external fun kniBridge3687(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3688")
private external fun kniBridge3688(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3689")
private external fun kniBridge3689(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3690")
private external fun kniBridge3690(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge3691")
private external fun kniBridge3691(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3692")
private external fun kniBridge3692(p0: NativePtr, p1: UInt, p2: UInt, p3: Int): Int
@SymbolName("libgtk3_kniBridge3693")
private external fun kniBridge3693(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3694")
private external fun kniBridge3694(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3695")
private external fun kniBridge3695(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3696")
private external fun kniBridge3696(p0: Int): Unit
@SymbolName("libgtk3_kniBridge3697")
private external fun kniBridge3697(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3698")
private external fun kniBridge3698(p0: Int): Unit
@SymbolName("libgtk3_kniBridge3699")
private external fun kniBridge3699(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3700")
private external fun kniBridge3700(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3701")
private external fun kniBridge3701(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3702")
private external fun kniBridge3702(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3703")
private external fun kniBridge3703(): ULong
@SymbolName("libgtk3_kniBridge3704")
private external fun kniBridge3704(): NativePtr
@SymbolName("libgtk3_kniBridge3705")
private external fun kniBridge3705(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3706")
private external fun kniBridge3706(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3707")
private external fun kniBridge3707(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3708")
private external fun kniBridge3708(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3709")
private external fun kniBridge3709(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3710")
private external fun kniBridge3710(): ULong
@SymbolName("libgtk3_kniBridge3711")
private external fun kniBridge3711(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3712")
private external fun kniBridge3712(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3713")
private external fun kniBridge3713(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3714")
private external fun kniBridge3714(): ULong
@SymbolName("libgtk3_kniBridge3715")
private external fun kniBridge3715(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3716")
private external fun kniBridge3716(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3717")
private external fun kniBridge3717(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3718")
private external fun kniBridge3718(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3719")
private external fun kniBridge3719(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3720")
private external fun kniBridge3720(): ULong
@SymbolName("libgtk3_kniBridge3721")
private external fun kniBridge3721(): NativePtr
@SymbolName("libgtk3_kniBridge3722")
private external fun kniBridge3722(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3723")
private external fun kniBridge3723(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3724")
private external fun kniBridge3724(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3725")
private external fun kniBridge3725(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3726")
private external fun kniBridge3726(): ULong
@SymbolName("libgtk3_kniBridge3727")
private external fun kniBridge3727(p0: Double, p1: Double, p2: Double, p3: Double, p4: Double, p5: Double): NativePtr
@SymbolName("libgtk3_kniBridge3728")
private external fun kniBridge3728(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3729")
private external fun kniBridge3729(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3730")
private external fun kniBridge3730(p0: NativePtr, p1: Double, p2: Double): Unit
@SymbolName("libgtk3_kniBridge3731")
private external fun kniBridge3731(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3732")
private external fun kniBridge3732(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3733")
private external fun kniBridge3733(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3734")
private external fun kniBridge3734(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3735")
private external fun kniBridge3735(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3736")
private external fun kniBridge3736(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3737")
private external fun kniBridge3737(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3738")
private external fun kniBridge3738(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3739")
private external fun kniBridge3739(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3740")
private external fun kniBridge3740(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3741")
private external fun kniBridge3741(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3742")
private external fun kniBridge3742(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge3743")
private external fun kniBridge3743(p0: NativePtr, p1: Double, p2: Double, p3: Double, p4: Double, p5: Double, p6: Double): Unit
@SymbolName("libgtk3_kniBridge3744")
private external fun kniBridge3744(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge3745")
private external fun kniBridge3745(): ULong
@SymbolName("libgtk3_kniBridge3746")
private external fun kniBridge3746(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3747")
private external fun kniBridge3747(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3748")
private external fun kniBridge3748(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3749")
private external fun kniBridge3749(): ULong
@SymbolName("libgtk3_kniBridge3750")
private external fun kniBridge3750(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3751")
private external fun kniBridge3751(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3752")
private external fun kniBridge3752(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3753")
private external fun kniBridge3753(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3754")
private external fun kniBridge3754(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3755")
private external fun kniBridge3755(): ULong
@SymbolName("libgtk3_kniBridge3756")
private external fun kniBridge3756(p0: UInt, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge3757")
private external fun kniBridge3757(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge3758")
private external fun kniBridge3758(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge3759")
private external fun kniBridge3759(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3760")
private external fun kniBridge3760(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3761")
private external fun kniBridge3761(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3762")
private external fun kniBridge3762(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3763")
private external fun kniBridge3763(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3764")
private external fun kniBridge3764(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3765")
private external fun kniBridge3765(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3766")
private external fun kniBridge3766(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3767")
private external fun kniBridge3767(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt, p5: UInt): Unit
@SymbolName("libgtk3_kniBridge3768")
private external fun kniBridge3768(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3769")
private external fun kniBridge3769(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3770")
private external fun kniBridge3770(): ULong
@SymbolName("libgtk3_kniBridge3771")
private external fun kniBridge3771(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3772")
private external fun kniBridge3772(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3773")
private external fun kniBridge3773(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3774")
private external fun kniBridge3774(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3775")
private external fun kniBridge3775(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3776")
private external fun kniBridge3776(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3777")
private external fun kniBridge3777(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3778")
private external fun kniBridge3778(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3779")
private external fun kniBridge3779(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3780")
private external fun kniBridge3780(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3781")
private external fun kniBridge3781(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3782")
private external fun kniBridge3782(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3783")
private external fun kniBridge3783(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3784")
private external fun kniBridge3784(): NativePtr
@SymbolName("libgtk3_kniBridge3785")
private external fun kniBridge3785(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3786")
private external fun kniBridge3786(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge3787")
private external fun kniBridge3787(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3788")
private external fun kniBridge3788(): NativePtr
@SymbolName("libgtk3_kniBridge3789")
private external fun kniBridge3789(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3790")
private external fun kniBridge3790(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3791")
private external fun kniBridge3791(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3792")
private external fun kniBridge3792(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3793")
private external fun kniBridge3793(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3794")
private external fun kniBridge3794(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3795")
private external fun kniBridge3795(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3796")
private external fun kniBridge3796(): ULong
@SymbolName("libgtk3_kniBridge3797")
private external fun kniBridge3797(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3798")
private external fun kniBridge3798(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3799")
private external fun kniBridge3799(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3800")
private external fun kniBridge3800(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3801")
private external fun kniBridge3801(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3802")
private external fun kniBridge3802(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3803")
private external fun kniBridge3803(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3804")
private external fun kniBridge3804(): ULong
@SymbolName("libgtk3_kniBridge3805")
private external fun kniBridge3805(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3806")
private external fun kniBridge3806(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3807")
private external fun kniBridge3807(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3808")
private external fun kniBridge3808(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3809")
private external fun kniBridge3809(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3810")
private external fun kniBridge3810(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3811")
private external fun kniBridge3811(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3812")
private external fun kniBridge3812(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3813")
private external fun kniBridge3813(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3814")
private external fun kniBridge3814(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3815")
private external fun kniBridge3815(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3816")
private external fun kniBridge3816(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3817")
private external fun kniBridge3817(): ULong
@SymbolName("libgtk3_kniBridge3818")
private external fun kniBridge3818(): ULong
@SymbolName("libgtk3_kniBridge3819")
private external fun kniBridge3819(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3820")
private external fun kniBridge3820(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3821")
private external fun kniBridge3821(p0: NativePtr, p1: Int): ULong
@SymbolName("libgtk3_kniBridge3822")
private external fun kniBridge3822(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3823")
private external fun kniBridge3823(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3824")
private external fun kniBridge3824(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3825")
private external fun kniBridge3825(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3826")
private external fun kniBridge3826(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3827")
private external fun kniBridge3827(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3828")
private external fun kniBridge3828(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3829")
private external fun kniBridge3829(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3830")
private external fun kniBridge3830(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3831")
private external fun kniBridge3831(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3832")
private external fun kniBridge3832(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3833")
private external fun kniBridge3833(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libgtk3_kniBridge3834")
private external fun kniBridge3834(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3835")
private external fun kniBridge3835(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3836")
private external fun kniBridge3836(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3837")
private external fun kniBridge3837(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3838")
private external fun kniBridge3838(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3839")
private external fun kniBridge3839(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3840")
private external fun kniBridge3840(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3841")
private external fun kniBridge3841(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3842")
private external fun kniBridge3842(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3843")
private external fun kniBridge3843(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3844")
private external fun kniBridge3844(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Unit
@SymbolName("libgtk3_kniBridge3845")
private external fun kniBridge3845(): ULong
@SymbolName("libgtk3_kniBridge3846")
private external fun kniBridge3846(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3847")
private external fun kniBridge3847(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3848")
private external fun kniBridge3848(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3849")
private external fun kniBridge3849(): ULong
@SymbolName("libgtk3_kniBridge3850")
private external fun kniBridge3850(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3851")
private external fun kniBridge3851(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3852")
private external fun kniBridge3852(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3853")
private external fun kniBridge3853(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3854")
private external fun kniBridge3854(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3855")
private external fun kniBridge3855(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3856")
private external fun kniBridge3856(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3857")
private external fun kniBridge3857(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3858")
private external fun kniBridge3858(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt): Unit
@SymbolName("libgtk3_kniBridge3859")
private external fun kniBridge3859(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UInt): Int
@SymbolName("libgtk3_kniBridge3860")
private external fun kniBridge3860(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UInt): NativePtr
@SymbolName("libgtk3_kniBridge3861")
private external fun kniBridge3861(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3862")
private external fun kniBridge3862(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3863")
private external fun kniBridge3863(p0: NativePtr, p1: Float, p2: Float): Unit
@SymbolName("libgtk3_kniBridge3864")
private external fun kniBridge3864(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3865")
private external fun kniBridge3865(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3866")
private external fun kniBridge3866(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3867")
private external fun kniBridge3867(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3868")
private external fun kniBridge3868(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3869")
private external fun kniBridge3869(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3870")
private external fun kniBridge3870(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3871")
private external fun kniBridge3871(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3872")
private external fun kniBridge3872(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3873")
private external fun kniBridge3873(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Int, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3874")
private external fun kniBridge3874(p0: NativePtr, p1: NativePtr, p2: UInt): UInt
@SymbolName("libgtk3_kniBridge3875")
private external fun kniBridge3875(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge3876")
private external fun kniBridge3876(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge3877")
private external fun kniBridge3877(): ULong
@SymbolName("libgtk3_kniBridge3878")
private external fun kniBridge3878(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3879")
private external fun kniBridge3879(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3880")
private external fun kniBridge3880(p0: NativePtr, p1: Int, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge3881")
private external fun kniBridge3881(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3882")
private external fun kniBridge3882(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3883")
private external fun kniBridge3883(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3884")
private external fun kniBridge3884(): ULong
@SymbolName("libgtk3_kniBridge3885")
private external fun kniBridge3885(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3886")
private external fun kniBridge3886(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3887")
private external fun kniBridge3887(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge3888")
private external fun kniBridge3888(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3889")
private external fun kniBridge3889(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3890")
private external fun kniBridge3890(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt): Int
@SymbolName("libgtk3_kniBridge3891")
private external fun kniBridge3891(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UInt, p7: Int): Unit
@SymbolName("libgtk3_kniBridge3892")
private external fun kniBridge3892(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3893")
private external fun kniBridge3893(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: Int, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3894")
private external fun kniBridge3894(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3895")
private external fun kniBridge3895(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3896")
private external fun kniBridge3896(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3897")
private external fun kniBridge3897(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3898")
private external fun kniBridge3898(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3899")
private external fun kniBridge3899(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3900")
private external fun kniBridge3900(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3901")
private external fun kniBridge3901(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3902")
private external fun kniBridge3902(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): Unit
@SymbolName("libgtk3_kniBridge3903")
private external fun kniBridge3903(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge3904")
private external fun kniBridge3904(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3905")
private external fun kniBridge3905(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3906")
private external fun kniBridge3906(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3907")
private external fun kniBridge3907(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3908")
private external fun kniBridge3908(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3909")
private external fun kniBridge3909(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3910")
private external fun kniBridge3910(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3911")
private external fun kniBridge3911(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3912")
private external fun kniBridge3912(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3913")
private external fun kniBridge3913(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3914")
private external fun kniBridge3914(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt, p5: Int): Int
@SymbolName("libgtk3_kniBridge3915")
private external fun kniBridge3915(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge3916")
private external fun kniBridge3916(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3917")
private external fun kniBridge3917(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3918")
private external fun kniBridge3918(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3919")
private external fun kniBridge3919(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3920")
private external fun kniBridge3920(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge3921")
private external fun kniBridge3921(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3922")
private external fun kniBridge3922(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3923")
private external fun kniBridge3923(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3924")
private external fun kniBridge3924(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3925")
private external fun kniBridge3925(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: UInt): Int
@SymbolName("libgtk3_kniBridge3926")
private external fun kniBridge3926(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3927")
private external fun kniBridge3927(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3928")
private external fun kniBridge3928(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3929")
private external fun kniBridge3929(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3930")
private external fun kniBridge3930(): ULong
@SymbolName("libgtk3_kniBridge3931")
private external fun kniBridge3931(): NativePtr
@SymbolName("libgtk3_kniBridge3932")
private external fun kniBridge3932(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3933")
private external fun kniBridge3933(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3934")
private external fun kniBridge3934(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge3935")
private external fun kniBridge3935(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3936")
private external fun kniBridge3936(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge3937")
private external fun kniBridge3937(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3938")
private external fun kniBridge3938(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3939")
private external fun kniBridge3939(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3940")
private external fun kniBridge3940(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3941")
private external fun kniBridge3941(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3942")
private external fun kniBridge3942(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3943")
private external fun kniBridge3943(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3944")
private external fun kniBridge3944(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3945")
private external fun kniBridge3945(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3946")
private external fun kniBridge3946(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3947")
private external fun kniBridge3947(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3948")
private external fun kniBridge3948(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3949")
private external fun kniBridge3949(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3950")
private external fun kniBridge3950(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3951")
private external fun kniBridge3951(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3952")
private external fun kniBridge3952(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3953")
private external fun kniBridge3953(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3954")
private external fun kniBridge3954(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3955")
private external fun kniBridge3955(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3956")
private external fun kniBridge3956(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3957")
private external fun kniBridge3957(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3958")
private external fun kniBridge3958(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3959")
private external fun kniBridge3959(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3960")
private external fun kniBridge3960(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3961")
private external fun kniBridge3961(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3962")
private external fun kniBridge3962(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3963")
private external fun kniBridge3963(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3964")
private external fun kniBridge3964(p0: NativePtr, p1: Float): Unit
@SymbolName("libgtk3_kniBridge3965")
private external fun kniBridge3965(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge3966")
private external fun kniBridge3966(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3967")
private external fun kniBridge3967(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3968")
private external fun kniBridge3968(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3969")
private external fun kniBridge3969(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3970")
private external fun kniBridge3970(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3971")
private external fun kniBridge3971(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3972")
private external fun kniBridge3972(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge3973")
private external fun kniBridge3973(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge3974")
private external fun kniBridge3974(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): Unit
@SymbolName("libgtk3_kniBridge3975")
private external fun kniBridge3975(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3976")
private external fun kniBridge3976(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3977")
private external fun kniBridge3977(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3978")
private external fun kniBridge3978(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge3979")
private external fun kniBridge3979(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3980")
private external fun kniBridge3980(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3981")
private external fun kniBridge3981(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3982")
private external fun kniBridge3982(): NativePtr
@SymbolName("libgtk3_kniBridge3983")
private external fun kniBridge3983(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3984")
private external fun kniBridge3984(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3985")
private external fun kniBridge3985(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge3986")
private external fun kniBridge3986(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3987")
private external fun kniBridge3987(): ULong
@SymbolName("libgtk3_kniBridge3988")
private external fun kniBridge3988(): ULong
@SymbolName("libgtk3_kniBridge3989")
private external fun kniBridge3989(): NativePtr
@SymbolName("libgtk3_kniBridge3990")
private external fun kniBridge3990(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3991")
private external fun kniBridge3991(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3992")
private external fun kniBridge3992(): ULong
@SymbolName("libgtk3_kniBridge3993")
private external fun kniBridge3993(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3994")
private external fun kniBridge3994(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge3995")
private external fun kniBridge3995(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3996")
private external fun kniBridge3996(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge3997")
private external fun kniBridge3997(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge3998")
private external fun kniBridge3998(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge3999")
private external fun kniBridge3999(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4000")
private external fun kniBridge4000(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4001")
private external fun kniBridge4001(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4002")
private external fun kniBridge4002(): ULong
@SymbolName("libgtk3_kniBridge4003")
private external fun kniBridge4003(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4004")
private external fun kniBridge4004(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4005")
private external fun kniBridge4005(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4006")
private external fun kniBridge4006(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4007")
private external fun kniBridge4007(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4008")
private external fun kniBridge4008(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4009")
private external fun kniBridge4009(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4010")
private external fun kniBridge4010(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4011")
private external fun kniBridge4011(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4012")
private external fun kniBridge4012(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4013")
private external fun kniBridge4013(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4014")
private external fun kniBridge4014(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4015")
private external fun kniBridge4015(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4016")
private external fun kniBridge4016(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4017")
private external fun kniBridge4017(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge4018")
private external fun kniBridge4018(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4019")
private external fun kniBridge4019(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4020")
private external fun kniBridge4020(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4021")
private external fun kniBridge4021(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4022")
private external fun kniBridge4022(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4023")
private external fun kniBridge4023(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4024")
private external fun kniBridge4024(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4025")
private external fun kniBridge4025(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4026")
private external fun kniBridge4026(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4027")
private external fun kniBridge4027(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4028")
private external fun kniBridge4028(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4029")
private external fun kniBridge4029(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4030")
private external fun kniBridge4030(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4031")
private external fun kniBridge4031(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4032")
private external fun kniBridge4032(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4033")
private external fun kniBridge4033(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4034")
private external fun kniBridge4034(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4035")
private external fun kniBridge4035(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4036")
private external fun kniBridge4036(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4037")
private external fun kniBridge4037(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4038")
private external fun kniBridge4038(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4039")
private external fun kniBridge4039(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4040")
private external fun kniBridge4040(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4041")
private external fun kniBridge4041(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4042")
private external fun kniBridge4042(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4043")
private external fun kniBridge4043(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4044")
private external fun kniBridge4044(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4045")
private external fun kniBridge4045(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4046")
private external fun kniBridge4046(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4047")
private external fun kniBridge4047(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4048")
private external fun kniBridge4048(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4049")
private external fun kniBridge4049(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4050")
private external fun kniBridge4050(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4051")
private external fun kniBridge4051(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4052")
private external fun kniBridge4052(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4053")
private external fun kniBridge4053(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4054")
private external fun kniBridge4054(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4055")
private external fun kniBridge4055(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4056")
private external fun kniBridge4056(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4057")
private external fun kniBridge4057(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4058")
private external fun kniBridge4058(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4059")
private external fun kniBridge4059(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4060")
private external fun kniBridge4060(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4061")
private external fun kniBridge4061(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4062")
private external fun kniBridge4062(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4063")
private external fun kniBridge4063(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4064")
private external fun kniBridge4064(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4065")
private external fun kniBridge4065(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4066")
private external fun kniBridge4066(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4067")
private external fun kniBridge4067(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4068")
private external fun kniBridge4068(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4069")
private external fun kniBridge4069(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4070")
private external fun kniBridge4070(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4071")
private external fun kniBridge4071(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4072")
private external fun kniBridge4072(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4073")
private external fun kniBridge4073(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4074")
private external fun kniBridge4074(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4075")
private external fun kniBridge4075(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4076")
private external fun kniBridge4076(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4077")
private external fun kniBridge4077(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4078")
private external fun kniBridge4078(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4079")
private external fun kniBridge4079(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4080")
private external fun kniBridge4080(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4081")
private external fun kniBridge4081(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4082")
private external fun kniBridge4082(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4083")
private external fun kniBridge4083(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge4084")
private external fun kniBridge4084(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge4085")
private external fun kniBridge4085(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge4086")
private external fun kniBridge4086(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge4087")
private external fun kniBridge4087(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4088")
private external fun kniBridge4088(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4089")
private external fun kniBridge4089(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4090")
private external fun kniBridge4090(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4091")
private external fun kniBridge4091(): ULong
@SymbolName("libgtk3_kniBridge4092")
private external fun kniBridge4092(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4093")
private external fun kniBridge4093(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4094")
private external fun kniBridge4094(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4095")
private external fun kniBridge4095(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4096")
private external fun kniBridge4096(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4097")
private external fun kniBridge4097(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4098")
private external fun kniBridge4098(p0: NativePtr, p1: UInt, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4099")
private external fun kniBridge4099(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4100")
private external fun kniBridge4100(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4101")
private external fun kniBridge4101(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4102")
private external fun kniBridge4102(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4103")
private external fun kniBridge4103(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4104")
private external fun kniBridge4104(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4105")
private external fun kniBridge4105(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge4106")
private external fun kniBridge4106(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Int
@SymbolName("libgtk3_kniBridge4107")
private external fun kniBridge4107(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4108")
private external fun kniBridge4108(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4109")
private external fun kniBridge4109(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4110")
private external fun kniBridge4110(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Int
@SymbolName("libgtk3_kniBridge4111")
private external fun kniBridge4111(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4112")
private external fun kniBridge4112(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4113")
private external fun kniBridge4113(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4114")
private external fun kniBridge4114(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4115")
private external fun kniBridge4115(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4116")
private external fun kniBridge4116(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4117")
private external fun kniBridge4117(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4118")
private external fun kniBridge4118(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4119")
private external fun kniBridge4119(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4120")
private external fun kniBridge4120(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Unit
@SymbolName("libgtk3_kniBridge4121")
private external fun kniBridge4121(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge4122")
private external fun kniBridge4122(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4123")
private external fun kniBridge4123(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4124")
private external fun kniBridge4124(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4125")
private external fun kniBridge4125(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4126")
private external fun kniBridge4126(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4127")
private external fun kniBridge4127(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4128")
private external fun kniBridge4128(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4129")
private external fun kniBridge4129(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4130")
private external fun kniBridge4130(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4131")
private external fun kniBridge4131(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4132")
private external fun kniBridge4132(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4133")
private external fun kniBridge4133(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4134")
private external fun kniBridge4134(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libgtk3_kniBridge4135")
private external fun kniBridge4135(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4136")
private external fun kniBridge4136(): ULong
@SymbolName("libgtk3_kniBridge4137")
private external fun kniBridge4137(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4138")
private external fun kniBridge4138(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4139")
private external fun kniBridge4139(): ULong
@SymbolName("libgtk3_kniBridge4140")
private external fun kniBridge4140(p0: NativePtr, p1: UInt, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4141")
private external fun kniBridge4141(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4142")
private external fun kniBridge4142(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4143")
private external fun kniBridge4143(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4144")
private external fun kniBridge4144(p0: NativePtr, p1: Int, p2: Int, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4145")
private external fun kniBridge4145(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4146")
private external fun kniBridge4146(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4147")
private external fun kniBridge4147(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4148")
private external fun kniBridge4148(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: Int, p6: Int): NativePtr
@SymbolName("libgtk3_kniBridge4149")
private external fun kniBridge4149(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4150")
private external fun kniBridge4150(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4151")
private external fun kniBridge4151(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4152")
private external fun kniBridge4152(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4153")
private external fun kniBridge4153(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4154")
private external fun kniBridge4154(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4155")
private external fun kniBridge4155(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4156")
private external fun kniBridge4156(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4157")
private external fun kniBridge4157(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4158")
private external fun kniBridge4158(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: Int): Int
@SymbolName("libgtk3_kniBridge4159")
private external fun kniBridge4159(): ULong
@SymbolName("libgtk3_kniBridge4160")
private external fun kniBridge4160(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4161")
private external fun kniBridge4161(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4162")
private external fun kniBridge4162(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4163")
private external fun kniBridge4163(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4164")
private external fun kniBridge4164(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge4165")
private external fun kniBridge4165(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4166")
private external fun kniBridge4166(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4167")
private external fun kniBridge4167(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4168")
private external fun kniBridge4168(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4169")
private external fun kniBridge4169(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4170")
private external fun kniBridge4170(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4171")
private external fun kniBridge4171(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4172")
private external fun kniBridge4172(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4173")
private external fun kniBridge4173(): ULong
@SymbolName("libgtk3_kniBridge4174")
private external fun kniBridge4174(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4175")
private external fun kniBridge4175(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4176")
private external fun kniBridge4176(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4177")
private external fun kniBridge4177(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4178")
private external fun kniBridge4178(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4179")
private external fun kniBridge4179(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4180")
private external fun kniBridge4180(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4181")
private external fun kniBridge4181(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4182")
private external fun kniBridge4182(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4183")
private external fun kniBridge4183(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4184")
private external fun kniBridge4184(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libgtk3_kniBridge4185")
private external fun kniBridge4185(): ULong
@SymbolName("libgtk3_kniBridge4186")
private external fun kniBridge4186(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge4187")
private external fun kniBridge4187(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge4188")
private external fun kniBridge4188(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4189")
private external fun kniBridge4189(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4190")
private external fun kniBridge4190(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4191")
private external fun kniBridge4191(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4192")
private external fun kniBridge4192(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4193")
private external fun kniBridge4193(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int): UInt
@SymbolName("libgtk3_kniBridge4194")
private external fun kniBridge4194(p0: NativePtr, p1: UInt, p2: Int): UInt
@SymbolName("libgtk3_kniBridge4195")
private external fun kniBridge4195(p0: NativePtr, p1: UInt, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4196")
private external fun kniBridge4196(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4197")
private external fun kniBridge4197(): ULong
@SymbolName("libgtk3_kniBridge4198")
private external fun kniBridge4198(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4199")
private external fun kniBridge4199(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4200")
private external fun kniBridge4200(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4201")
private external fun kniBridge4201(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Unit
@SymbolName("libgtk3_kniBridge4202")
private external fun kniBridge4202(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4203")
private external fun kniBridge4203(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4204")
private external fun kniBridge4204(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4205")
private external fun kniBridge4205(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4206")
private external fun kniBridge4206(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4207")
private external fun kniBridge4207(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: Int): Unit
@SymbolName("libgtk3_kniBridge4208")
private external fun kniBridge4208(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4209")
private external fun kniBridge4209(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4210")
private external fun kniBridge4210(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4211")
private external fun kniBridge4211(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4212")
private external fun kniBridge4212(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4213")
private external fun kniBridge4213(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4214")
private external fun kniBridge4214(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4215")
private external fun kniBridge4215(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4216")
private external fun kniBridge4216(): ULong
@SymbolName("libgtk3_kniBridge4217")
private external fun kniBridge4217(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4218")
private external fun kniBridge4218(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4219")
private external fun kniBridge4219(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4220")
private external fun kniBridge4220(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4221")
private external fun kniBridge4221(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4222")
private external fun kniBridge4222(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4223")
private external fun kniBridge4223(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4224")
private external fun kniBridge4224(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4225")
private external fun kniBridge4225(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4226")
private external fun kniBridge4226(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4227")
private external fun kniBridge4227(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4228")
private external fun kniBridge4228(): ULong
@SymbolName("libgtk3_kniBridge4229")
private external fun kniBridge4229(): NativePtr
@SymbolName("libgtk3_kniBridge4230")
private external fun kniBridge4230(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4231")
private external fun kniBridge4231(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4232")
private external fun kniBridge4232(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4233")
private external fun kniBridge4233(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4234")
private external fun kniBridge4234(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4235")
private external fun kniBridge4235(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4236")
private external fun kniBridge4236(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4237")
private external fun kniBridge4237(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4238")
private external fun kniBridge4238(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4239")
private external fun kniBridge4239(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4240")
private external fun kniBridge4240(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4241")
private external fun kniBridge4241(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4242")
private external fun kniBridge4242(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4243")
private external fun kniBridge4243(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4244")
private external fun kniBridge4244(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4245")
private external fun kniBridge4245(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4246")
private external fun kniBridge4246(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4247")
private external fun kniBridge4247(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4248")
private external fun kniBridge4248(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4249")
private external fun kniBridge4249(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4250")
private external fun kniBridge4250(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4251")
private external fun kniBridge4251(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4252")
private external fun kniBridge4252(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4253")
private external fun kniBridge4253(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4254")
private external fun kniBridge4254(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4255")
private external fun kniBridge4255(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4256")
private external fun kniBridge4256(): ULong
@SymbolName("libgtk3_kniBridge4257")
private external fun kniBridge4257(): NativePtr
@SymbolName("libgtk3_kniBridge4258")
private external fun kniBridge4258(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4259")
private external fun kniBridge4259(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4260")
private external fun kniBridge4260(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4261")
private external fun kniBridge4261(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4262")
private external fun kniBridge4262(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4263")
private external fun kniBridge4263(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4264")
private external fun kniBridge4264(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4265")
private external fun kniBridge4265(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4266")
private external fun kniBridge4266(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4267")
private external fun kniBridge4267(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4268")
private external fun kniBridge4268(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4269")
private external fun kniBridge4269(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4270")
private external fun kniBridge4270(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4271")
private external fun kniBridge4271(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4272")
private external fun kniBridge4272(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4273")
private external fun kniBridge4273(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4274")
private external fun kniBridge4274(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4275")
private external fun kniBridge4275(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4276")
private external fun kniBridge4276(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4277")
private external fun kniBridge4277(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4278")
private external fun kniBridge4278(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4279")
private external fun kniBridge4279(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4280")
private external fun kniBridge4280(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4281")
private external fun kniBridge4281(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4282")
private external fun kniBridge4282(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4283")
private external fun kniBridge4283(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4284")
private external fun kniBridge4284(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4285")
private external fun kniBridge4285(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4286")
private external fun kniBridge4286(): ULong
@SymbolName("libgtk3_kniBridge4287")
private external fun kniBridge4287(): NativePtr
@SymbolName("libgtk3_kniBridge4288")
private external fun kniBridge4288(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4289")
private external fun kniBridge4289(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4290")
private external fun kniBridge4290(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4291")
private external fun kniBridge4291(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4292")
private external fun kniBridge4292(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4293")
private external fun kniBridge4293(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4294")
private external fun kniBridge4294(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4295")
private external fun kniBridge4295(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4296")
private external fun kniBridge4296(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4297")
private external fun kniBridge4297(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4298")
private external fun kniBridge4298(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4299")
private external fun kniBridge4299(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4300")
private external fun kniBridge4300(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4301")
private external fun kniBridge4301(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4302")
private external fun kniBridge4302(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4303")
private external fun kniBridge4303(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4304")
private external fun kniBridge4304(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4305")
private external fun kniBridge4305(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge4306")
private external fun kniBridge4306(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4307")
private external fun kniBridge4307(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4308")
private external fun kniBridge4308(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4309")
private external fun kniBridge4309(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4310")
private external fun kniBridge4310(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4311")
private external fun kniBridge4311(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4312")
private external fun kniBridge4312(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4313")
private external fun kniBridge4313(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4314")
private external fun kniBridge4314(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4315")
private external fun kniBridge4315(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4316")
private external fun kniBridge4316(p0: NativePtr, p1: Float): Unit
@SymbolName("libgtk3_kniBridge4317")
private external fun kniBridge4317(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge4318")
private external fun kniBridge4318(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4319")
private external fun kniBridge4319(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4320")
private external fun kniBridge4320(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4321")
private external fun kniBridge4321(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4322")
private external fun kniBridge4322(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4323")
private external fun kniBridge4323(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4324")
private external fun kniBridge4324(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge4325")
private external fun kniBridge4325(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge4326")
private external fun kniBridge4326(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge4327")
private external fun kniBridge4327(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge4328")
private external fun kniBridge4328(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4329")
private external fun kniBridge4329(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4330")
private external fun kniBridge4330(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4331")
private external fun kniBridge4331(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4332")
private external fun kniBridge4332(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4333")
private external fun kniBridge4333(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4334")
private external fun kniBridge4334(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4335")
private external fun kniBridge4335(p0: NativePtr, p1: UInt): UInt
@SymbolName("libgtk3_kniBridge4336")
private external fun kniBridge4336(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4337")
private external fun kniBridge4337(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4338")
private external fun kniBridge4338(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4339")
private external fun kniBridge4339(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4340")
private external fun kniBridge4340(p0: NativePtr, p1: UInt, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4341")
private external fun kniBridge4341(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge4342")
private external fun kniBridge4342(p0: NativePtr, p1: UInt, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4343")
private external fun kniBridge4343(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge4344")
private external fun kniBridge4344(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libgtk3_kniBridge4345")
private external fun kniBridge4345(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4346")
private external fun kniBridge4346(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4347")
private external fun kniBridge4347(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4348")
private external fun kniBridge4348(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4349")
private external fun kniBridge4349(p0: NativePtr, p1: UInt, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4350")
private external fun kniBridge4350(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4351")
private external fun kniBridge4351(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4352")
private external fun kniBridge4352(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4353")
private external fun kniBridge4353(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4354")
private external fun kniBridge4354(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4355")
private external fun kniBridge4355(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4356")
private external fun kniBridge4356(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4357")
private external fun kniBridge4357(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4358")
private external fun kniBridge4358(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4359")
private external fun kniBridge4359(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4360")
private external fun kniBridge4360(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4361")
private external fun kniBridge4361(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4362")
private external fun kniBridge4362(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4363")
private external fun kniBridge4363(): ULong
@SymbolName("libgtk3_kniBridge4364")
private external fun kniBridge4364(): NativePtr
@SymbolName("libgtk3_kniBridge4365")
private external fun kniBridge4365(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4366")
private external fun kniBridge4366(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4367")
private external fun kniBridge4367(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4368")
private external fun kniBridge4368(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4369")
private external fun kniBridge4369(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4370")
private external fun kniBridge4370(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4371")
private external fun kniBridge4371(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4372")
private external fun kniBridge4372(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4373")
private external fun kniBridge4373(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4374")
private external fun kniBridge4374(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4375")
private external fun kniBridge4375(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4376")
private external fun kniBridge4376(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4377")
private external fun kniBridge4377(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4378")
private external fun kniBridge4378(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4379")
private external fun kniBridge4379(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4380")
private external fun kniBridge4380(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4381")
private external fun kniBridge4381(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4382")
private external fun kniBridge4382(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4383")
private external fun kniBridge4383(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4384")
private external fun kniBridge4384(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge4385")
private external fun kniBridge4385(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge4386")
private external fun kniBridge4386(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4387")
private external fun kniBridge4387(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge4388")
private external fun kniBridge4388(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4389")
private external fun kniBridge4389(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4390")
private external fun kniBridge4390(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4391")
private external fun kniBridge4391(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4392")
private external fun kniBridge4392(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4393")
private external fun kniBridge4393(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4394")
private external fun kniBridge4394(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Float, p5: Float): Unit
@SymbolName("libgtk3_kniBridge4395")
private external fun kniBridge4395(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4396")
private external fun kniBridge4396(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4397")
private external fun kniBridge4397(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4398")
private external fun kniBridge4398(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4399")
private external fun kniBridge4399(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge4400")
private external fun kniBridge4400(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4401")
private external fun kniBridge4401(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4402")
private external fun kniBridge4402(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4403")
private external fun kniBridge4403(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4404")
private external fun kniBridge4404(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4405")
private external fun kniBridge4405(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4406")
private external fun kniBridge4406(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Unit
@SymbolName("libgtk3_kniBridge4407")
private external fun kniBridge4407(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4408")
private external fun kniBridge4408(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4409")
private external fun kniBridge4409(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge4410")
private external fun kniBridge4410(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4411")
private external fun kniBridge4411(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4412")
private external fun kniBridge4412(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4413")
private external fun kniBridge4413(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4414")
private external fun kniBridge4414(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge4415")
private external fun kniBridge4415(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge4416")
private external fun kniBridge4416(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge4417")
private external fun kniBridge4417(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4418")
private external fun kniBridge4418(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4419")
private external fun kniBridge4419(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4420")
private external fun kniBridge4420(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4421")
private external fun kniBridge4421(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge4422")
private external fun kniBridge4422(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4423")
private external fun kniBridge4423(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4424")
private external fun kniBridge4424(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4425")
private external fun kniBridge4425(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4426")
private external fun kniBridge4426(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4427")
private external fun kniBridge4427(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4428")
private external fun kniBridge4428(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4429")
private external fun kniBridge4429(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4430")
private external fun kniBridge4430(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4431")
private external fun kniBridge4431(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4432")
private external fun kniBridge4432(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4433")
private external fun kniBridge4433(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4434")
private external fun kniBridge4434(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4435")
private external fun kniBridge4435(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4436")
private external fun kniBridge4436(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4437")
private external fun kniBridge4437(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4438")
private external fun kniBridge4438(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4439")
private external fun kniBridge4439(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4440")
private external fun kniBridge4440(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4441")
private external fun kniBridge4441(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4442")
private external fun kniBridge4442(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4443")
private external fun kniBridge4443(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4444")
private external fun kniBridge4444(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4445")
private external fun kniBridge4445(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4446")
private external fun kniBridge4446(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4447")
private external fun kniBridge4447(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4448")
private external fun kniBridge4448(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4449")
private external fun kniBridge4449(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4450")
private external fun kniBridge4450(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4451")
private external fun kniBridge4451(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4452")
private external fun kniBridge4452(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4453")
private external fun kniBridge4453(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4454")
private external fun kniBridge4454(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4455")
private external fun kniBridge4455(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4456")
private external fun kniBridge4456(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4457")
private external fun kniBridge4457(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4458")
private external fun kniBridge4458(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4459")
private external fun kniBridge4459(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4460")
private external fun kniBridge4460(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4461")
private external fun kniBridge4461(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge4462")
private external fun kniBridge4462(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4463")
private external fun kniBridge4463(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4464")
private external fun kniBridge4464(): ULong
@SymbolName("libgtk3_kniBridge4465")
private external fun kniBridge4465(): NativePtr
@SymbolName("libgtk3_kniBridge4466")
private external fun kniBridge4466(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4467")
private external fun kniBridge4467(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4468")
private external fun kniBridge4468(): NativePtr
@SymbolName("libgtk3_kniBridge4469")
private external fun kniBridge4469(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4470")
private external fun kniBridge4470(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4471")
private external fun kniBridge4471(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4472")
private external fun kniBridge4472(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4473")
private external fun kniBridge4473(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4474")
private external fun kniBridge4474(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4475")
private external fun kniBridge4475(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4476")
private external fun kniBridge4476(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4477")
private external fun kniBridge4477(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4478")
private external fun kniBridge4478(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4479")
private external fun kniBridge4479(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4480")
private external fun kniBridge4480(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4481")
private external fun kniBridge4481(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4482")
private external fun kniBridge4482(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4483")
private external fun kniBridge4483(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4484")
private external fun kniBridge4484(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4485")
private external fun kniBridge4485(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4486")
private external fun kniBridge4486(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4487")
private external fun kniBridge4487(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4488")
private external fun kniBridge4488(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4489")
private external fun kniBridge4489(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4490")
private external fun kniBridge4490(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4491")
private external fun kniBridge4491(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4492")
private external fun kniBridge4492(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4493")
private external fun kniBridge4493(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4494")
private external fun kniBridge4494(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4495")
private external fun kniBridge4495(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4496")
private external fun kniBridge4496(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4497")
private external fun kniBridge4497(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4498")
private external fun kniBridge4498(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4499")
private external fun kniBridge4499(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4500")
private external fun kniBridge4500(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4501")
private external fun kniBridge4501(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4502")
private external fun kniBridge4502(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4503")
private external fun kniBridge4503(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4504")
private external fun kniBridge4504(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4505")
private external fun kniBridge4505(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4506")
private external fun kniBridge4506(): ULong
@SymbolName("libgtk3_kniBridge4507")
private external fun kniBridge4507(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4508")
private external fun kniBridge4508(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4509")
private external fun kniBridge4509(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4510")
private external fun kniBridge4510(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4511")
private external fun kniBridge4511(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4512")
private external fun kniBridge4512(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4513")
private external fun kniBridge4513(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4514")
private external fun kniBridge4514(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4515")
private external fun kniBridge4515(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4516")
private external fun kniBridge4516(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4517")
private external fun kniBridge4517(): ULong
@SymbolName("libgtk3_kniBridge4518")
private external fun kniBridge4518(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4519")
private external fun kniBridge4519(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4520")
private external fun kniBridge4520(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4521")
private external fun kniBridge4521(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4522")
private external fun kniBridge4522(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4523")
private external fun kniBridge4523(): ULong
@SymbolName("libgtk3_kniBridge4524")
private external fun kniBridge4524(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4525")
private external fun kniBridge4525(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4526")
private external fun kniBridge4526(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4527")
private external fun kniBridge4527(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4528")
private external fun kniBridge4528(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4529")
private external fun kniBridge4529(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4530")
private external fun kniBridge4530(): ULong
@SymbolName("libgtk3_kniBridge4531")
private external fun kniBridge4531(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4532")
private external fun kniBridge4532(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4533")
private external fun kniBridge4533(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4534")
private external fun kniBridge4534(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4535")
private external fun kniBridge4535(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4536")
private external fun kniBridge4536(p0: NativePtr, p1: Float, p2: Float): Unit
@SymbolName("libgtk3_kniBridge4537")
private external fun kniBridge4537(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4538")
private external fun kniBridge4538(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4539")
private external fun kniBridge4539(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4540")
private external fun kniBridge4540(): ULong
@SymbolName("libgtk3_kniBridge4541")
private external fun kniBridge4541(p0: NativePtr, p1: Float, p2: Float, p3: Float, p4: Int): NativePtr
@SymbolName("libgtk3_kniBridge4542")
private external fun kniBridge4542(p0: NativePtr, p1: Float, p2: Float, p3: Float, p4: Int): Unit
@SymbolName("libgtk3_kniBridge4543")
private external fun kniBridge4543(): ULong
@SymbolName("libgtk3_kniBridge4544")
private external fun kniBridge4544(): NativePtr
@SymbolName("libgtk3_kniBridge4545")
private external fun kniBridge4545(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4546")
private external fun kniBridge4546(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4547")
private external fun kniBridge4547(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4548")
private external fun kniBridge4548(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4549")
private external fun kniBridge4549(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4550")
private external fun kniBridge4550(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge4551")
private external fun kniBridge4551(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4552")
private external fun kniBridge4552(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4553")
private external fun kniBridge4553(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge4554")
private external fun kniBridge4554(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4555")
private external fun kniBridge4555(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4556")
private external fun kniBridge4556(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4557")
private external fun kniBridge4557(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4558")
private external fun kniBridge4558(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4559")
private external fun kniBridge4559(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4560")
private external fun kniBridge4560(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4561")
private external fun kniBridge4561(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4562")
private external fun kniBridge4562(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4563")
private external fun kniBridge4563(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4564")
private external fun kniBridge4564(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4565")
private external fun kniBridge4565(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4566")
private external fun kniBridge4566(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4567")
private external fun kniBridge4567(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4568")
private external fun kniBridge4568(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4569")
private external fun kniBridge4569(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4570")
private external fun kniBridge4570(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4571")
private external fun kniBridge4571(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4572")
private external fun kniBridge4572(): ULong
@SymbolName("libgtk3_kniBridge4573")
private external fun kniBridge4573(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4574")
private external fun kniBridge4574(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4575")
private external fun kniBridge4575(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4576")
private external fun kniBridge4576(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4577")
private external fun kniBridge4577(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4578")
private external fun kniBridge4578(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4579")
private external fun kniBridge4579(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4580")
private external fun kniBridge4580(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4581")
private external fun kniBridge4581(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4582")
private external fun kniBridge4582(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4583")
private external fun kniBridge4583(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libgtk3_kniBridge4584")
private external fun kniBridge4584(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4585")
private external fun kniBridge4585(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge4586")
private external fun kniBridge4586(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4587")
private external fun kniBridge4587(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4588")
private external fun kniBridge4588(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4589")
private external fun kniBridge4589(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4590")
private external fun kniBridge4590(): UInt
@SymbolName("libgtk3_kniBridge4591")
private external fun kniBridge4591(): ULong
@SymbolName("libgtk3_kniBridge4592")
private external fun kniBridge4592(): NativePtr
@SymbolName("libgtk3_kniBridge4593")
private external fun kniBridge4593(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4594")
private external fun kniBridge4594(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4595")
private external fun kniBridge4595(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4596")
private external fun kniBridge4596(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4597")
private external fun kniBridge4597(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4598")
private external fun kniBridge4598(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4599")
private external fun kniBridge4599(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4600")
private external fun kniBridge4600(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4601")
private external fun kniBridge4601(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4602")
private external fun kniBridge4602(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4603")
private external fun kniBridge4603(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4604")
private external fun kniBridge4604(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4605")
private external fun kniBridge4605(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4606")
private external fun kniBridge4606(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libgtk3_kniBridge4607")
private external fun kniBridge4607(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge4608")
private external fun kniBridge4608(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge4609")
private external fun kniBridge4609(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4610")
private external fun kniBridge4610(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4611")
private external fun kniBridge4611(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libgtk3_kniBridge4612")
private external fun kniBridge4612(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4613")
private external fun kniBridge4613(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4614")
private external fun kniBridge4614(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4615")
private external fun kniBridge4615(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4616")
private external fun kniBridge4616(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong, p5: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4617")
private external fun kniBridge4617(): ULong
@SymbolName("libgtk3_kniBridge4618")
private external fun kniBridge4618(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4619")
private external fun kniBridge4619(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4620")
private external fun kniBridge4620(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4621")
private external fun kniBridge4621(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4622")
private external fun kniBridge4622(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4623")
private external fun kniBridge4623(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge4624")
private external fun kniBridge4624(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4625")
private external fun kniBridge4625(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4626")
private external fun kniBridge4626(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4627")
private external fun kniBridge4627(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4628")
private external fun kniBridge4628(): ULong
@SymbolName("libgtk3_kniBridge4629")
private external fun kniBridge4629(): NativePtr
@SymbolName("libgtk3_kniBridge4630")
private external fun kniBridge4630(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4631")
private external fun kniBridge4631(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4632")
private external fun kniBridge4632(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4633")
private external fun kniBridge4633(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4634")
private external fun kniBridge4634(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4635")
private external fun kniBridge4635(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4636")
private external fun kniBridge4636(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4637")
private external fun kniBridge4637(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4638")
private external fun kniBridge4638(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4639")
private external fun kniBridge4639(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4640")
private external fun kniBridge4640(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4641")
private external fun kniBridge4641(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4642")
private external fun kniBridge4642(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4643")
private external fun kniBridge4643(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4644")
private external fun kniBridge4644(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4645")
private external fun kniBridge4645(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4646")
private external fun kniBridge4646(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4647")
private external fun kniBridge4647(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4648")
private external fun kniBridge4648(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4649")
private external fun kniBridge4649(p0: NativePtr, p1: Float, p2: Float): Unit
@SymbolName("libgtk3_kniBridge4650")
private external fun kniBridge4650(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4651")
private external fun kniBridge4651(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4652")
private external fun kniBridge4652(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4653")
private external fun kniBridge4653(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4654")
private external fun kniBridge4654(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4655")
private external fun kniBridge4655(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4656")
private external fun kniBridge4656(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4657")
private external fun kniBridge4657(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4658")
private external fun kniBridge4658(): ULong
@SymbolName("libgtk3_kniBridge4659")
private external fun kniBridge4659(): NativePtr
@SymbolName("libgtk3_kniBridge4660")
private external fun kniBridge4660(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge4661")
private external fun kniBridge4661(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4662")
private external fun kniBridge4662(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4663")
private external fun kniBridge4663(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4664")
private external fun kniBridge4664(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4665")
private external fun kniBridge4665(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4666")
private external fun kniBridge4666(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4667")
private external fun kniBridge4667(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4668")
private external fun kniBridge4668(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4669")
private external fun kniBridge4669(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4670")
private external fun kniBridge4670(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4671")
private external fun kniBridge4671(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4672")
private external fun kniBridge4672(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4673")
private external fun kniBridge4673(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge4674")
private external fun kniBridge4674(): ULong
@SymbolName("libgtk3_kniBridge4675")
private external fun kniBridge4675(): NativePtr
@SymbolName("libgtk3_kniBridge4676")
private external fun kniBridge4676(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: Int): Unit
@SymbolName("libgtk3_kniBridge4677")
private external fun kniBridge4677(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: Int): Unit
@SymbolName("libgtk3_kniBridge4678")
private external fun kniBridge4678(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4679")
private external fun kniBridge4679(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4680")
private external fun kniBridge4680(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge4681")
private external fun kniBridge4681(): ULong
@SymbolName("libgtk3_kniBridge4682")
private external fun kniBridge4682(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4683")
private external fun kniBridge4683(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4684")
private external fun kniBridge4684(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4685")
private external fun kniBridge4685(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4686")
private external fun kniBridge4686(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4687")
private external fun kniBridge4687(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4688")
private external fun kniBridge4688(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4689")
private external fun kniBridge4689(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4690")
private external fun kniBridge4690(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4691")
private external fun kniBridge4691(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4692")
private external fun kniBridge4692(): ULong
@SymbolName("libgtk3_kniBridge4693")
private external fun kniBridge4693(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4694")
private external fun kniBridge4694(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4695")
private external fun kniBridge4695(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4696")
private external fun kniBridge4696(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4697")
private external fun kniBridge4697(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4698")
private external fun kniBridge4698(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4699")
private external fun kniBridge4699(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4700")
private external fun kniBridge4700(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4701")
private external fun kniBridge4701(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4702")
private external fun kniBridge4702(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge4703")
private external fun kniBridge4703(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge4704")
private external fun kniBridge4704(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4705")
private external fun kniBridge4705(): ULong
@SymbolName("libgtk3_kniBridge4706")
private external fun kniBridge4706(): NativePtr
@SymbolName("libgtk3_kniBridge4707")
private external fun kniBridge4707(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4708")
private external fun kniBridge4708(): ULong
@SymbolName("libgtk3_kniBridge4709")
private external fun kniBridge4709(): NativePtr
@SymbolName("libgtk3_kniBridge4710")
private external fun kniBridge4710(): ULong
@SymbolName("libgtk3_kniBridge4711")
private external fun kniBridge4711(): NativePtr
@SymbolName("libgtk3_kniBridge4712")
private external fun kniBridge4712(): ULong
@SymbolName("libgtk3_kniBridge4713")
private external fun kniBridge4713(): NativePtr
@SymbolName("libgtk3_kniBridge4714")
private external fun kniBridge4714(): ULong
@SymbolName("libgtk3_kniBridge4715")
private external fun kniBridge4715(): NativePtr
@SymbolName("libgtk3_kniBridge4716")
private external fun kniBridge4716(): ULong
@SymbolName("libgtk3_kniBridge4717")
private external fun kniBridge4717(): NativePtr
@SymbolName("libgtk3_kniBridge4718")
private external fun kniBridge4718(): ULong
@SymbolName("libgtk3_kniBridge4719")
private external fun kniBridge4719(): NativePtr
@SymbolName("libgtk3_kniBridge4720")
private external fun kniBridge4720(): ULong
@SymbolName("libgtk3_kniBridge4721")
private external fun kniBridge4721(): NativePtr
@SymbolName("libgtk3_kniBridge4722")
private external fun kniBridge4722(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4723")
private external fun kniBridge4723(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4724")
private external fun kniBridge4724(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4725")
private external fun kniBridge4725(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4726")
private external fun kniBridge4726(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4727")
private external fun kniBridge4727(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4728")
private external fun kniBridge4728(): ULong
@SymbolName("libgtk3_kniBridge4729")
private external fun kniBridge4729(): NativePtr
@SymbolName("libgtk3_kniBridge4730")
private external fun kniBridge4730(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4731")
private external fun kniBridge4731(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4732")
private external fun kniBridge4732(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4733")
private external fun kniBridge4733(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4734")
private external fun kniBridge4734(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4735")
private external fun kniBridge4735(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4736")
private external fun kniBridge4736(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4737")
private external fun kniBridge4737(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4738")
private external fun kniBridge4738(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4739")
private external fun kniBridge4739(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4740")
private external fun kniBridge4740(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4741")
private external fun kniBridge4741(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4742")
private external fun kniBridge4742(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4743")
private external fun kniBridge4743(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4744")
private external fun kniBridge4744(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4745")
private external fun kniBridge4745(): ULong
@SymbolName("libgtk3_kniBridge4746")
private external fun kniBridge4746(): NativePtr
@SymbolName("libgtk3_kniBridge4747")
private external fun kniBridge4747(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4748")
private external fun kniBridge4748(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4749")
private external fun kniBridge4749(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4750")
private external fun kniBridge4750(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4751")
private external fun kniBridge4751(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4752")
private external fun kniBridge4752(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4753")
private external fun kniBridge4753(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4754")
private external fun kniBridge4754(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4755")
private external fun kniBridge4755(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4756")
private external fun kniBridge4756(): ULong
@SymbolName("libgtk3_kniBridge4757")
private external fun kniBridge4757(): NativePtr
@SymbolName("libgtk3_kniBridge4758")
private external fun kniBridge4758(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4759")
private external fun kniBridge4759(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4760")
private external fun kniBridge4760(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4761")
private external fun kniBridge4761(): ULong
@SymbolName("libgtk3_kniBridge4762")
private external fun kniBridge4762(): NativePtr
@SymbolName("libgtk3_kniBridge4763")
private external fun kniBridge4763(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4764")
private external fun kniBridge4764(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4765")
private external fun kniBridge4765(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4766")
private external fun kniBridge4766(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4767")
private external fun kniBridge4767(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4768")
private external fun kniBridge4768(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4769")
private external fun kniBridge4769(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4770")
private external fun kniBridge4770(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4771")
private external fun kniBridge4771(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4772")
private external fun kniBridge4772(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4773")
private external fun kniBridge4773(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4774")
private external fun kniBridge4774(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4775")
private external fun kniBridge4775(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4776")
private external fun kniBridge4776(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4777")
private external fun kniBridge4777(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4778")
private external fun kniBridge4778(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4779")
private external fun kniBridge4779(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4780")
private external fun kniBridge4780(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4781")
private external fun kniBridge4781(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4782")
private external fun kniBridge4782(): ULong
@SymbolName("libgtk3_kniBridge4783")
private external fun kniBridge4783(): NativePtr
@SymbolName("libgtk3_kniBridge4784")
private external fun kniBridge4784(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4785")
private external fun kniBridge4785(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4786")
private external fun kniBridge4786(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4787")
private external fun kniBridge4787(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4788")
private external fun kniBridge4788(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4789")
private external fun kniBridge4789(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4790")
private external fun kniBridge4790(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4791")
private external fun kniBridge4791(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4792")
private external fun kniBridge4792(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4793")
private external fun kniBridge4793(): ULong
@SymbolName("libgtk3_kniBridge4794")
private external fun kniBridge4794(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4795")
private external fun kniBridge4795(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4796")
private external fun kniBridge4796(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4797")
private external fun kniBridge4797(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4798")
private external fun kniBridge4798(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge4799")
private external fun kniBridge4799(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge4800")
private external fun kniBridge4800(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4801")
private external fun kniBridge4801(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4802")
private external fun kniBridge4802(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4803")
private external fun kniBridge4803(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4804")
private external fun kniBridge4804(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4805")
private external fun kniBridge4805(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4806")
private external fun kniBridge4806(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4807")
private external fun kniBridge4807(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4808")
private external fun kniBridge4808(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4809")
private external fun kniBridge4809(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4810")
private external fun kniBridge4810(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4811")
private external fun kniBridge4811(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4812")
private external fun kniBridge4812(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4813")
private external fun kniBridge4813(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4814")
private external fun kniBridge4814(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4815")
private external fun kniBridge4815(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4816")
private external fun kniBridge4816(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4817")
private external fun kniBridge4817(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4818")
private external fun kniBridge4818(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4819")
private external fun kniBridge4819(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4820")
private external fun kniBridge4820(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4821")
private external fun kniBridge4821(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge4822")
private external fun kniBridge4822(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4823")
private external fun kniBridge4823(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4824")
private external fun kniBridge4824(): ULong
@SymbolName("libgtk3_kniBridge4825")
private external fun kniBridge4825(): NativePtr
@SymbolName("libgtk3_kniBridge4826")
private external fun kniBridge4826(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4827")
private external fun kniBridge4827(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4828")
private external fun kniBridge4828(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4829")
private external fun kniBridge4829(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4830")
private external fun kniBridge4830(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4831")
private external fun kniBridge4831(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4832")
private external fun kniBridge4832(p0: NativePtr, p1: UShort): Unit
@SymbolName("libgtk3_kniBridge4833")
private external fun kniBridge4833(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge4834")
private external fun kniBridge4834(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4835")
private external fun kniBridge4835(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4836")
private external fun kniBridge4836(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4837")
private external fun kniBridge4837(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4838")
private external fun kniBridge4838(): ULong
@SymbolName("libgtk3_kniBridge4839")
private external fun kniBridge4839(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4840")
private external fun kniBridge4840(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4841")
private external fun kniBridge4841(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4842")
private external fun kniBridge4842(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4843")
private external fun kniBridge4843(p0: NativePtr, p1: UInt, p2: Int, p3: Int, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4844")
private external fun kniBridge4844(): ULong
@SymbolName("libgtk3_kniBridge4845")
private external fun kniBridge4845(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4846")
private external fun kniBridge4846(): ULong
@SymbolName("libgtk3_kniBridge4847")
private external fun kniBridge4847(): NativePtr
@SymbolName("libgtk3_kniBridge4848")
private external fun kniBridge4848(p0: Double, p1: Double, p2: Double, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4849")
private external fun kniBridge4849(p0: Double, p1: Double, p2: Double, p3: NativePtr, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4850")
private external fun kniBridge4850(): ULong
@SymbolName("libgtk3_kniBridge4851")
private external fun kniBridge4851(): NativePtr
@SymbolName("libgtk3_kniBridge4852")
private external fun kniBridge4852(): NativePtr
@SymbolName("libgtk3_kniBridge4853")
private external fun kniBridge4853(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4854")
private external fun kniBridge4854(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4855")
private external fun kniBridge4855(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4856")
private external fun kniBridge4856(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4857")
private external fun kniBridge4857(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4858")
private external fun kniBridge4858(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4859")
private external fun kniBridge4859(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4860")
private external fun kniBridge4860(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4861")
private external fun kniBridge4861(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4862")
private external fun kniBridge4862(): ULong
@SymbolName("libgtk3_kniBridge4863")
private external fun kniBridge4863(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4864")
private external fun kniBridge4864(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4865")
private external fun kniBridge4865(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4866")
private external fun kniBridge4866(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4867")
private external fun kniBridge4867(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4868")
private external fun kniBridge4868(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4869")
private external fun kniBridge4869(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4870")
private external fun kniBridge4870(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4871")
private external fun kniBridge4871(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4872")
private external fun kniBridge4872(): UInt
@SymbolName("libgtk3_kniBridge4873")
private external fun kniBridge4873(): ULong
@SymbolName("libgtk3_kniBridge4874")
private external fun kniBridge4874(): NativePtr
@SymbolName("libgtk3_kniBridge4875")
private external fun kniBridge4875(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4876")
private external fun kniBridge4876(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge4877")
private external fun kniBridge4877(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4878")
private external fun kniBridge4878(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge4879")
private external fun kniBridge4879(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4880")
private external fun kniBridge4880(): NativePtr
@SymbolName("libgtk3_kniBridge4881")
private external fun kniBridge4881(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4882")
private external fun kniBridge4882(): UInt
@SymbolName("libgtk3_kniBridge4883")
private external fun kniBridge4883(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge4884")
private external fun kniBridge4884(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge4885")
private external fun kniBridge4885(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4886")
private external fun kniBridge4886(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4887")
private external fun kniBridge4887(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4888")
private external fun kniBridge4888(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4889")
private external fun kniBridge4889(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4890")
private external fun kniBridge4890(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4891")
private external fun kniBridge4891(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4892")
private external fun kniBridge4892(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4893")
private external fun kniBridge4893(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4894")
private external fun kniBridge4894(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4895")
private external fun kniBridge4895(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge4896")
private external fun kniBridge4896(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4897")
private external fun kniBridge4897(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4898")
private external fun kniBridge4898(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4899")
private external fun kniBridge4899(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4900")
private external fun kniBridge4900(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4901")
private external fun kniBridge4901(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4902")
private external fun kniBridge4902(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4903")
private external fun kniBridge4903(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4904")
private external fun kniBridge4904(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4905")
private external fun kniBridge4905(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4906")
private external fun kniBridge4906(): ULong
@SymbolName("libgtk3_kniBridge4907")
private external fun kniBridge4907(): NativePtr
@SymbolName("libgtk3_kniBridge4908")
private external fun kniBridge4908(): ULong
@SymbolName("libgtk3_kniBridge4909")
private external fun kniBridge4909(): NativePtr
@SymbolName("libgtk3_kniBridge4910")
private external fun kniBridge4910(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4911")
private external fun kniBridge4911(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4912")
private external fun kniBridge4912(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4913")
private external fun kniBridge4913(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4914")
private external fun kniBridge4914(): ULong
@SymbolName("libgtk3_kniBridge4915")
private external fun kniBridge4915(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4916")
private external fun kniBridge4916(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4917")
private external fun kniBridge4917(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4918")
private external fun kniBridge4918(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4919")
private external fun kniBridge4919(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4920")
private external fun kniBridge4920(): ULong
@SymbolName("libgtk3_kniBridge4921")
private external fun kniBridge4921(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4922")
private external fun kniBridge4922(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4923")
private external fun kniBridge4923(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4924")
private external fun kniBridge4924(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4925")
private external fun kniBridge4925(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4926")
private external fun kniBridge4926(): ULong
@SymbolName("libgtk3_kniBridge4927")
private external fun kniBridge4927(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4928")
private external fun kniBridge4928(): ULong
@SymbolName("libgtk3_kniBridge4929")
private external fun kniBridge4929(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge4930")
private external fun kniBridge4930(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4931")
private external fun kniBridge4931(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4932")
private external fun kniBridge4932(): ULong
@SymbolName("libgtk3_kniBridge4933")
private external fun kniBridge4933(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4934")
private external fun kniBridge4934(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4935")
private external fun kniBridge4935(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4936")
private external fun kniBridge4936(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4937")
private external fun kniBridge4937(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4938")
private external fun kniBridge4938(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4939")
private external fun kniBridge4939(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4940")
private external fun kniBridge4940(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4941")
private external fun kniBridge4941(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4942")
private external fun kniBridge4942(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4943")
private external fun kniBridge4943(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4944")
private external fun kniBridge4944(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4945")
private external fun kniBridge4945(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4946")
private external fun kniBridge4946(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4947")
private external fun kniBridge4947(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4948")
private external fun kniBridge4948(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4949")
private external fun kniBridge4949(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4950")
private external fun kniBridge4950(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4951")
private external fun kniBridge4951(): ULong
@SymbolName("libgtk3_kniBridge4952")
private external fun kniBridge4952(): NativePtr
@SymbolName("libgtk3_kniBridge4953")
private external fun kniBridge4953(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4954")
private external fun kniBridge4954(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge4955")
private external fun kniBridge4955(): ULong
@SymbolName("libgtk3_kniBridge4956")
private external fun kniBridge4956(): NativePtr
@SymbolName("libgtk3_kniBridge4957")
private external fun kniBridge4957(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4958")
private external fun kniBridge4958(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4959")
private external fun kniBridge4959(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4960")
private external fun kniBridge4960(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4961")
private external fun kniBridge4961(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4962")
private external fun kniBridge4962(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4963")
private external fun kniBridge4963(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4964")
private external fun kniBridge4964(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4965")
private external fun kniBridge4965(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4966")
private external fun kniBridge4966(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4967")
private external fun kniBridge4967(): ULong
@SymbolName("libgtk3_kniBridge4968")
private external fun kniBridge4968(): UInt
@SymbolName("libgtk3_kniBridge4969")
private external fun kniBridge4969(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge4970")
private external fun kniBridge4970(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge4971")
private external fun kniBridge4971(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4972")
private external fun kniBridge4972(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4973")
private external fun kniBridge4973(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4974")
private external fun kniBridge4974(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4975")
private external fun kniBridge4975(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4976")
private external fun kniBridge4976(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4977")
private external fun kniBridge4977(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4978")
private external fun kniBridge4978(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4979")
private external fun kniBridge4979(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge4980")
private external fun kniBridge4980(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge4981")
private external fun kniBridge4981(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4982")
private external fun kniBridge4982(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4983")
private external fun kniBridge4983(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4984")
private external fun kniBridge4984(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4985")
private external fun kniBridge4985(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4986")
private external fun kniBridge4986(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4987")
private external fun kniBridge4987(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4988")
private external fun kniBridge4988(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4989")
private external fun kniBridge4989(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4990")
private external fun kniBridge4990(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4991")
private external fun kniBridge4991(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4992")
private external fun kniBridge4992(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4993")
private external fun kniBridge4993(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4994")
private external fun kniBridge4994(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4995")
private external fun kniBridge4995(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge4996")
private external fun kniBridge4996(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4997")
private external fun kniBridge4997(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge4998")
private external fun kniBridge4998(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge4999")
private external fun kniBridge4999(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5000")
private external fun kniBridge5000(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5001")
private external fun kniBridge5001(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5002")
private external fun kniBridge5002(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5003")
private external fun kniBridge5003(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5004")
private external fun kniBridge5004(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5005")
private external fun kniBridge5005(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5006")
private external fun kniBridge5006(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5007")
private external fun kniBridge5007(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5008")
private external fun kniBridge5008(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5009")
private external fun kniBridge5009(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5010")
private external fun kniBridge5010(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5011")
private external fun kniBridge5011(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5012")
private external fun kniBridge5012(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5013")
private external fun kniBridge5013(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5014")
private external fun kniBridge5014(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5015")
private external fun kniBridge5015(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5016")
private external fun kniBridge5016(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5017")
private external fun kniBridge5017(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5018")
private external fun kniBridge5018(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5019")
private external fun kniBridge5019(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5020")
private external fun kniBridge5020(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5021")
private external fun kniBridge5021(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5022")
private external fun kniBridge5022(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5023")
private external fun kniBridge5023(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5024")
private external fun kniBridge5024(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5025")
private external fun kniBridge5025(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5026")
private external fun kniBridge5026(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5027")
private external fun kniBridge5027(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5028")
private external fun kniBridge5028(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5029")
private external fun kniBridge5029(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5030")
private external fun kniBridge5030(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5031")
private external fun kniBridge5031(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5032")
private external fun kniBridge5032(): ULong
@SymbolName("libgtk3_kniBridge5033")
private external fun kniBridge5033(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5034")
private external fun kniBridge5034(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5035")
private external fun kniBridge5035(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5036")
private external fun kniBridge5036(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5037")
private external fun kniBridge5037(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5038")
private external fun kniBridge5038(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5039")
private external fun kniBridge5039(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5040")
private external fun kniBridge5040(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5041")
private external fun kniBridge5041(): ULong
@SymbolName("libgtk3_kniBridge5042")
private external fun kniBridge5042(): ULong
@SymbolName("libgtk3_kniBridge5043")
private external fun kniBridge5043(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5044")
private external fun kniBridge5044(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5045")
private external fun kniBridge5045(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5046")
private external fun kniBridge5046(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5047")
private external fun kniBridge5047(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5048")
private external fun kniBridge5048(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5049")
private external fun kniBridge5049(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5050")
private external fun kniBridge5050(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5051")
private external fun kniBridge5051(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5052")
private external fun kniBridge5052(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5053")
private external fun kniBridge5053(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5054")
private external fun kniBridge5054(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5055")
private external fun kniBridge5055(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5056")
private external fun kniBridge5056(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5057")
private external fun kniBridge5057(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5058")
private external fun kniBridge5058(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5059")
private external fun kniBridge5059(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5060")
private external fun kniBridge5060(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5061")
private external fun kniBridge5061(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5062")
private external fun kniBridge5062(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5063")
private external fun kniBridge5063(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5064")
private external fun kniBridge5064(): ULong
@SymbolName("libgtk3_kniBridge5065")
private external fun kniBridge5065(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5066")
private external fun kniBridge5066(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5067")
private external fun kniBridge5067(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5068")
private external fun kniBridge5068(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5069")
private external fun kniBridge5069(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5070")
private external fun kniBridge5070(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5071")
private external fun kniBridge5071(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5072")
private external fun kniBridge5072(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5073")
private external fun kniBridge5073(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5074")
private external fun kniBridge5074(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5075")
private external fun kniBridge5075(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5076")
private external fun kniBridge5076(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5077")
private external fun kniBridge5077(): ULong
@SymbolName("libgtk3_kniBridge5078")
private external fun kniBridge5078(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5079")
private external fun kniBridge5079(): ULong
@SymbolName("libgtk3_kniBridge5080")
private external fun kniBridge5080(): NativePtr
@SymbolName("libgtk3_kniBridge5081")
private external fun kniBridge5081(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5082")
private external fun kniBridge5082(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5083")
private external fun kniBridge5083(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5084")
private external fun kniBridge5084(): ULong
@SymbolName("libgtk3_kniBridge5085")
private external fun kniBridge5085(): NativePtr
@SymbolName("libgtk3_kniBridge5086")
private external fun kniBridge5086(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5087")
private external fun kniBridge5087(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5088")
private external fun kniBridge5088(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5089")
private external fun kniBridge5089(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5090")
private external fun kniBridge5090(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5091")
private external fun kniBridge5091(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5092")
private external fun kniBridge5092(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5093")
private external fun kniBridge5093(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5094")
private external fun kniBridge5094(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5095")
private external fun kniBridge5095(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5096")
private external fun kniBridge5096(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5097")
private external fun kniBridge5097(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5098")
private external fun kniBridge5098(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5099")
private external fun kniBridge5099(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5100")
private external fun kniBridge5100(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge5101")
private external fun kniBridge5101(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge5102")
private external fun kniBridge5102(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5103")
private external fun kniBridge5103(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5104")
private external fun kniBridge5104(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5105")
private external fun kniBridge5105(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5106")
private external fun kniBridge5106(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5107")
private external fun kniBridge5107(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5108")
private external fun kniBridge5108(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5109")
private external fun kniBridge5109(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5110")
private external fun kniBridge5110(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5111")
private external fun kniBridge5111(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5112")
private external fun kniBridge5112(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5113")
private external fun kniBridge5113(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5114")
private external fun kniBridge5114(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5115")
private external fun kniBridge5115(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5116")
private external fun kniBridge5116(): ULong
@SymbolName("libgtk3_kniBridge5117")
private external fun kniBridge5117(): NativePtr
@SymbolName("libgtk3_kniBridge5118")
private external fun kniBridge5118(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5119")
private external fun kniBridge5119(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5120")
private external fun kniBridge5120(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5121")
private external fun kniBridge5121(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5122")
private external fun kniBridge5122(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5123")
private external fun kniBridge5123(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5124")
private external fun kniBridge5124(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5125")
private external fun kniBridge5125(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5126")
private external fun kniBridge5126(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5127")
private external fun kniBridge5127(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5128")
private external fun kniBridge5128(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5129")
private external fun kniBridge5129(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5130")
private external fun kniBridge5130(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5131")
private external fun kniBridge5131(): ULong
@SymbolName("libgtk3_kniBridge5132")
private external fun kniBridge5132(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5133")
private external fun kniBridge5133(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5134")
private external fun kniBridge5134(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5135")
private external fun kniBridge5135(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5136")
private external fun kniBridge5136(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5137")
private external fun kniBridge5137(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5138")
private external fun kniBridge5138(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5139")
private external fun kniBridge5139(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5140")
private external fun kniBridge5140(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5141")
private external fun kniBridge5141(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5142")
private external fun kniBridge5142(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5143")
private external fun kniBridge5143(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5144")
private external fun kniBridge5144(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5145")
private external fun kniBridge5145(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5146")
private external fun kniBridge5146(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5147")
private external fun kniBridge5147(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5148")
private external fun kniBridge5148(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5149")
private external fun kniBridge5149(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5150")
private external fun kniBridge5150(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5151")
private external fun kniBridge5151(): ULong
@SymbolName("libgtk3_kniBridge5152")
private external fun kniBridge5152(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5153")
private external fun kniBridge5153(): ULong
@SymbolName("libgtk3_kniBridge5154")
private external fun kniBridge5154(): NativePtr
@SymbolName("libgtk3_kniBridge5155")
private external fun kniBridge5155(): ULong
@SymbolName("libgtk3_kniBridge5156")
private external fun kniBridge5156(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5157")
private external fun kniBridge5157(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge5158")
private external fun kniBridge5158(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5159")
private external fun kniBridge5159(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge5160")
private external fun kniBridge5160(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5161")
private external fun kniBridge5161(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5162")
private external fun kniBridge5162(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5163")
private external fun kniBridge5163(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5164")
private external fun kniBridge5164(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge5165")
private external fun kniBridge5165(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5166")
private external fun kniBridge5166(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5167")
private external fun kniBridge5167(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5168")
private external fun kniBridge5168(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5169")
private external fun kniBridge5169(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5170")
private external fun kniBridge5170(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5171")
private external fun kniBridge5171(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5172")
private external fun kniBridge5172(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5173")
private external fun kniBridge5173(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5174")
private external fun kniBridge5174(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5175")
private external fun kniBridge5175(): ULong
@SymbolName("libgtk3_kniBridge5176")
private external fun kniBridge5176(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5177")
private external fun kniBridge5177(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5178")
private external fun kniBridge5178(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5179")
private external fun kniBridge5179(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5180")
private external fun kniBridge5180(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5181")
private external fun kniBridge5181(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5182")
private external fun kniBridge5182(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5183")
private external fun kniBridge5183(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5184")
private external fun kniBridge5184(): ULong
@SymbolName("libgtk3_kniBridge5185")
private external fun kniBridge5185(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5186")
private external fun kniBridge5186(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5187")
private external fun kniBridge5187(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5188")
private external fun kniBridge5188(): ULong
@SymbolName("libgtk3_kniBridge5189")
private external fun kniBridge5189(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5190")
private external fun kniBridge5190(): ULong
@SymbolName("libgtk3_kniBridge5191")
private external fun kniBridge5191(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5192")
private external fun kniBridge5192(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5193")
private external fun kniBridge5193(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5194")
private external fun kniBridge5194(): ULong
@SymbolName("libgtk3_kniBridge5195")
private external fun kniBridge5195(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5196")
private external fun kniBridge5196(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5197")
private external fun kniBridge5197(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5198")
private external fun kniBridge5198(): ULong
@SymbolName("libgtk3_kniBridge5199")
private external fun kniBridge5199(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5200")
private external fun kniBridge5200(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5201")
private external fun kniBridge5201(): ULong
@SymbolName("libgtk3_kniBridge5202")
private external fun kniBridge5202(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5203")
private external fun kniBridge5203(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5204")
private external fun kniBridge5204(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5205")
private external fun kniBridge5205(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5206")
private external fun kniBridge5206(): ULong
@SymbolName("libgtk3_kniBridge5207")
private external fun kniBridge5207(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5208")
private external fun kniBridge5208(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5209")
private external fun kniBridge5209(): ULong
@SymbolName("libgtk3_kniBridge5210")
private external fun kniBridge5210(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5211")
private external fun kniBridge5211(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5212")
private external fun kniBridge5212(): ULong
@SymbolName("libgtk3_kniBridge5213")
private external fun kniBridge5213(): NativePtr
@SymbolName("libgtk3_kniBridge5214")
private external fun kniBridge5214(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5215")
private external fun kniBridge5215(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5216")
private external fun kniBridge5216(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5217")
private external fun kniBridge5217(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5218")
private external fun kniBridge5218(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5219")
private external fun kniBridge5219(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5220")
private external fun kniBridge5220(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5221")
private external fun kniBridge5221(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5222")
private external fun kniBridge5222(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5223")
private external fun kniBridge5223(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5224")
private external fun kniBridge5224(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5225")
private external fun kniBridge5225(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5226")
private external fun kniBridge5226(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5227")
private external fun kniBridge5227(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5228")
private external fun kniBridge5228(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5229")
private external fun kniBridge5229(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5230")
private external fun kniBridge5230(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5231")
private external fun kniBridge5231(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5232")
private external fun kniBridge5232(): ULong
@SymbolName("libgtk3_kniBridge5233")
private external fun kniBridge5233(): NativePtr
@SymbolName("libgtk3_kniBridge5234")
private external fun kniBridge5234(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: Int, p5: Int): Unit
@SymbolName("libgtk3_kniBridge5235")
private external fun kniBridge5235(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int, p5: Int): Unit
@SymbolName("libgtk3_kniBridge5236")
private external fun kniBridge5236(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge5237")
private external fun kniBridge5237(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5238")
private external fun kniBridge5238(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5239")
private external fun kniBridge5239(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5240")
private external fun kniBridge5240(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5241")
private external fun kniBridge5241(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5242")
private external fun kniBridge5242(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5243")
private external fun kniBridge5243(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5244")
private external fun kniBridge5244(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5245")
private external fun kniBridge5245(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5246")
private external fun kniBridge5246(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5247")
private external fun kniBridge5247(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5248")
private external fun kniBridge5248(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5249")
private external fun kniBridge5249(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5250")
private external fun kniBridge5250(p0: NativePtr, p1: Int, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5251")
private external fun kniBridge5251(p0: NativePtr, p1: Int): UInt
@SymbolName("libgtk3_kniBridge5252")
private external fun kniBridge5252(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5253")
private external fun kniBridge5253(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5254")
private external fun kniBridge5254(): ULong
@SymbolName("libgtk3_kniBridge5255")
private external fun kniBridge5255(): NativePtr
@SymbolName("libgtk3_kniBridge5256")
private external fun kniBridge5256(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5257")
private external fun kniBridge5257(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5258")
private external fun kniBridge5258(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5259")
private external fun kniBridge5259(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5260")
private external fun kniBridge5260(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5261")
private external fun kniBridge5261(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5262")
private external fun kniBridge5262(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5263")
private external fun kniBridge5263(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5264")
private external fun kniBridge5264(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5265")
private external fun kniBridge5265(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5266")
private external fun kniBridge5266(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5267")
private external fun kniBridge5267(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5268")
private external fun kniBridge5268(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5269")
private external fun kniBridge5269(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5270")
private external fun kniBridge5270(): ULong
@SymbolName("libgtk3_kniBridge5271")
private external fun kniBridge5271(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5272")
private external fun kniBridge5272(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge5273")
private external fun kniBridge5273(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5274")
private external fun kniBridge5274(): ULong
@SymbolName("libgtk3_kniBridge5275")
private external fun kniBridge5275(): NativePtr
@SymbolName("libgtk3_kniBridge5276")
private external fun kniBridge5276(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5277")
private external fun kniBridge5277(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5278")
private external fun kniBridge5278(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5279")
private external fun kniBridge5279(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5280")
private external fun kniBridge5280(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5281")
private external fun kniBridge5281(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5282")
private external fun kniBridge5282(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5283")
private external fun kniBridge5283(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5284")
private external fun kniBridge5284(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5285")
private external fun kniBridge5285(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5286")
private external fun kniBridge5286(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5287")
private external fun kniBridge5287(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5288")
private external fun kniBridge5288(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5289")
private external fun kniBridge5289(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5290")
private external fun kniBridge5290(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5291")
private external fun kniBridge5291(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5292")
private external fun kniBridge5292(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5293")
private external fun kniBridge5293(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5294")
private external fun kniBridge5294(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5295")
private external fun kniBridge5295(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5296")
private external fun kniBridge5296(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5297")
private external fun kniBridge5297(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5298")
private external fun kniBridge5298(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5299")
private external fun kniBridge5299(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5300")
private external fun kniBridge5300(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5301")
private external fun kniBridge5301(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5302")
private external fun kniBridge5302(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5303")
private external fun kniBridge5303(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5304")
private external fun kniBridge5304(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5305")
private external fun kniBridge5305(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5306")
private external fun kniBridge5306(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5307")
private external fun kniBridge5307(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5308")
private external fun kniBridge5308(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5309")
private external fun kniBridge5309(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5310")
private external fun kniBridge5310(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5311")
private external fun kniBridge5311(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5312")
private external fun kniBridge5312(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5313")
private external fun kniBridge5313(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5314")
private external fun kniBridge5314(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5315")
private external fun kniBridge5315(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5316")
private external fun kniBridge5316(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: Int): Unit
@SymbolName("libgtk3_kniBridge5317")
private external fun kniBridge5317(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5318")
private external fun kniBridge5318(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5319")
private external fun kniBridge5319(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5320")
private external fun kniBridge5320(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5321")
private external fun kniBridge5321(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5322")
private external fun kniBridge5322(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5323")
private external fun kniBridge5323(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5324")
private external fun kniBridge5324(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5325")
private external fun kniBridge5325(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5326")
private external fun kniBridge5326(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5327")
private external fun kniBridge5327(p0: NativePtr, p1: UInt, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5328")
private external fun kniBridge5328(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5329")
private external fun kniBridge5329(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5330")
private external fun kniBridge5330(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5331")
private external fun kniBridge5331(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: NativePtr, p5: Int, p6: UInt): Unit
@SymbolName("libgtk3_kniBridge5332")
private external fun kniBridge5332(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: UInt, p5: Int): Unit
@SymbolName("libgtk3_kniBridge5333")
private external fun kniBridge5333(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5334")
private external fun kniBridge5334(): UInt
@SymbolName("libgtk3_kniBridge5335")
private external fun kniBridge5335(): ULong
@SymbolName("libgtk3_kniBridge5336")
private external fun kniBridge5336(): NativePtr
@SymbolName("libgtk3_kniBridge5337")
private external fun kniBridge5337(): NativePtr
@SymbolName("libgtk3_kniBridge5338")
private external fun kniBridge5338(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5339")
private external fun kniBridge5339(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5340")
private external fun kniBridge5340(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5341")
private external fun kniBridge5341(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5342")
private external fun kniBridge5342(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5343")
private external fun kniBridge5343(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5344")
private external fun kniBridge5344(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5345")
private external fun kniBridge5345(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5346")
private external fun kniBridge5346(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5347")
private external fun kniBridge5347(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5348")
private external fun kniBridge5348(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5349")
private external fun kniBridge5349(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5350")
private external fun kniBridge5350(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5351")
private external fun kniBridge5351(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5352")
private external fun kniBridge5352(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5353")
private external fun kniBridge5353(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5354")
private external fun kniBridge5354(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr, p5: UInt, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5355")
private external fun kniBridge5355(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5356")
private external fun kniBridge5356(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5357")
private external fun kniBridge5357(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5358")
private external fun kniBridge5358(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5359")
private external fun kniBridge5359(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5360")
private external fun kniBridge5360(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5361")
private external fun kniBridge5361(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5362")
private external fun kniBridge5362(): ULong
@SymbolName("libgtk3_kniBridge5363")
private external fun kniBridge5363(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5364")
private external fun kniBridge5364(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5365")
private external fun kniBridge5365(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5366")
private external fun kniBridge5366(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5367")
private external fun kniBridge5367(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5368")
private external fun kniBridge5368(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5369")
private external fun kniBridge5369(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5370")
private external fun kniBridge5370(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5371")
private external fun kniBridge5371(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5372")
private external fun kniBridge5372(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5373")
private external fun kniBridge5373(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5374")
private external fun kniBridge5374(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5375")
private external fun kniBridge5375(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5376")
private external fun kniBridge5376(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5377")
private external fun kniBridge5377(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5378")
private external fun kniBridge5378(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5379")
private external fun kniBridge5379(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5380")
private external fun kniBridge5380(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5381")
private external fun kniBridge5381(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5382")
private external fun kniBridge5382(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5383")
private external fun kniBridge5383(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5384")
private external fun kniBridge5384(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5385")
private external fun kniBridge5385(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5386")
private external fun kniBridge5386(): ULong
@SymbolName("libgtk3_kniBridge5387")
private external fun kniBridge5387(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5388")
private external fun kniBridge5388(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5389")
private external fun kniBridge5389(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5390")
private external fun kniBridge5390(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5391")
private external fun kniBridge5391(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5392")
private external fun kniBridge5392(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5393")
private external fun kniBridge5393(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5394")
private external fun kniBridge5394(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5395")
private external fun kniBridge5395(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5396")
private external fun kniBridge5396(): ULong
@SymbolName("libgtk3_kniBridge5397")
private external fun kniBridge5397(): NativePtr
@SymbolName("libgtk3_kniBridge5398")
private external fun kniBridge5398(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5399")
private external fun kniBridge5399(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5400")
private external fun kniBridge5400(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5401")
private external fun kniBridge5401(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5402")
private external fun kniBridge5402(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5403")
private external fun kniBridge5403(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5404")
private external fun kniBridge5404(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5405")
private external fun kniBridge5405(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5406")
private external fun kniBridge5406(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5407")
private external fun kniBridge5407(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5408")
private external fun kniBridge5408(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5409")
private external fun kniBridge5409(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5410")
private external fun kniBridge5410(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5411")
private external fun kniBridge5411(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5412")
private external fun kniBridge5412(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5413")
private external fun kniBridge5413(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5414")
private external fun kniBridge5414(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5415")
private external fun kniBridge5415(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5416")
private external fun kniBridge5416(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5417")
private external fun kniBridge5417(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5418")
private external fun kniBridge5418(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5419")
private external fun kniBridge5419(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5420")
private external fun kniBridge5420(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5421")
private external fun kniBridge5421(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5422")
private external fun kniBridge5422(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5423")
private external fun kniBridge5423(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5424")
private external fun kniBridge5424(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge5425")
private external fun kniBridge5425(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge5426")
private external fun kniBridge5426(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5427")
private external fun kniBridge5427(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5428")
private external fun kniBridge5428(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5429")
private external fun kniBridge5429(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5430")
private external fun kniBridge5430(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5431")
private external fun kniBridge5431(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5432")
private external fun kniBridge5432(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5433")
private external fun kniBridge5433(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5434")
private external fun kniBridge5434(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5435")
private external fun kniBridge5435(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5436")
private external fun kniBridge5436(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5437")
private external fun kniBridge5437(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5438")
private external fun kniBridge5438(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5439")
private external fun kniBridge5439(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5440")
private external fun kniBridge5440(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5441")
private external fun kniBridge5441(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5442")
private external fun kniBridge5442(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5443")
private external fun kniBridge5443(p0: NativePtr, p1: NativePtr, p2: Int, p3: Float, p4: Float): Unit
@SymbolName("libgtk3_kniBridge5444")
private external fun kniBridge5444(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge5445")
private external fun kniBridge5445(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge5446")
private external fun kniBridge5446(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5447")
private external fun kniBridge5447(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5448")
private external fun kniBridge5448(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5449")
private external fun kniBridge5449(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5450")
private external fun kniBridge5450(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5451")
private external fun kniBridge5451(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5452")
private external fun kniBridge5452(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge5453")
private external fun kniBridge5453(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5454")
private external fun kniBridge5454(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5455")
private external fun kniBridge5455(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge5456")
private external fun kniBridge5456(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5457")
private external fun kniBridge5457(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5458")
private external fun kniBridge5458(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge5459")
private external fun kniBridge5459(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5460")
private external fun kniBridge5460(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5461")
private external fun kniBridge5461(): ULong
@SymbolName("libgtk3_kniBridge5462")
private external fun kniBridge5462(): NativePtr
@SymbolName("libgtk3_kniBridge5463")
private external fun kniBridge5463(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5464")
private external fun kniBridge5464(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5465")
private external fun kniBridge5465(): ULong
@SymbolName("libgtk3_kniBridge5466")
private external fun kniBridge5466(): NativePtr
@SymbolName("libgtk3_kniBridge5467")
private external fun kniBridge5467(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5468")
private external fun kniBridge5468(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5469")
private external fun kniBridge5469(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5470")
private external fun kniBridge5470(): ULong
@SymbolName("libgtk3_kniBridge5471")
private external fun kniBridge5471(): NativePtr
@SymbolName("libgtk3_kniBridge5472")
private external fun kniBridge5472(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5473")
private external fun kniBridge5473(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5474")
private external fun kniBridge5474(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5475")
private external fun kniBridge5475(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge5476")
private external fun kniBridge5476(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5477")
private external fun kniBridge5477(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5478")
private external fun kniBridge5478(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5479")
private external fun kniBridge5479(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5480")
private external fun kniBridge5480(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5481")
private external fun kniBridge5481(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5482")
private external fun kniBridge5482(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5483")
private external fun kniBridge5483(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5484")
private external fun kniBridge5484(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5485")
private external fun kniBridge5485(): ULong
@SymbolName("libgtk3_kniBridge5486")
private external fun kniBridge5486(): NativePtr
@SymbolName("libgtk3_kniBridge5487")
private external fun kniBridge5487(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5488")
private external fun kniBridge5488(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5489")
private external fun kniBridge5489(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5490")
private external fun kniBridge5490(): ULong
@SymbolName("libgtk3_kniBridge5491")
private external fun kniBridge5491(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5492")
private external fun kniBridge5492(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5493")
private external fun kniBridge5493(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5494")
private external fun kniBridge5494(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5495")
private external fun kniBridge5495(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5496")
private external fun kniBridge5496(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5497")
private external fun kniBridge5497(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5498")
private external fun kniBridge5498(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5499")
private external fun kniBridge5499(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5500")
private external fun kniBridge5500(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5501")
private external fun kniBridge5501(): ULong
@SymbolName("libgtk3_kniBridge5502")
private external fun kniBridge5502(): NativePtr
@SymbolName("libgtk3_kniBridge5503")
private external fun kniBridge5503(p0: Double, p1: Double): NativePtr
@SymbolName("libgtk3_kniBridge5504")
private external fun kniBridge5504(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5505")
private external fun kniBridge5505(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5506")
private external fun kniBridge5506(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge5507")
private external fun kniBridge5507(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5508")
private external fun kniBridge5508(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge5509")
private external fun kniBridge5509(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5510")
private external fun kniBridge5510(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge5511")
private external fun kniBridge5511(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5512")
private external fun kniBridge5512(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5513")
private external fun kniBridge5513(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5514")
private external fun kniBridge5514(p0: NativePtr, p1: NativePtr, p2: Double): Unit
@SymbolName("libgtk3_kniBridge5515")
private external fun kniBridge5515(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5516")
private external fun kniBridge5516(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5517")
private external fun kniBridge5517(): ULong
@SymbolName("libgtk3_kniBridge5518")
private external fun kniBridge5518(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5519")
private external fun kniBridge5519(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5520")
private external fun kniBridge5520(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5521")
private external fun kniBridge5521(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5522")
private external fun kniBridge5522(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5523")
private external fun kniBridge5523(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5524")
private external fun kniBridge5524(): ULong
@SymbolName("libgtk3_kniBridge5525")
private external fun kniBridge5525(): NativePtr
@SymbolName("libgtk3_kniBridge5526")
private external fun kniBridge5526(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5527")
private external fun kniBridge5527(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5528")
private external fun kniBridge5528(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5529")
private external fun kniBridge5529(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5530")
private external fun kniBridge5530(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5531")
private external fun kniBridge5531(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5532")
private external fun kniBridge5532(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5533")
private external fun kniBridge5533(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5534")
private external fun kniBridge5534(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5535")
private external fun kniBridge5535(): ULong
@SymbolName("libgtk3_kniBridge5536")
private external fun kniBridge5536(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5537")
private external fun kniBridge5537(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5538")
private external fun kniBridge5538(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5539")
private external fun kniBridge5539(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge5540")
private external fun kniBridge5540(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge5541")
private external fun kniBridge5541(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5542")
private external fun kniBridge5542(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5543")
private external fun kniBridge5543(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5544")
private external fun kniBridge5544(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5545")
private external fun kniBridge5545(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5546")
private external fun kniBridge5546(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5547")
private external fun kniBridge5547(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5548")
private external fun kniBridge5548(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5549")
private external fun kniBridge5549(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5550")
private external fun kniBridge5550(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5551")
private external fun kniBridge5551(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5552")
private external fun kniBridge5552(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5553")
private external fun kniBridge5553(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5554")
private external fun kniBridge5554(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5555")
private external fun kniBridge5555(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5556")
private external fun kniBridge5556(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5557")
private external fun kniBridge5557(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5558")
private external fun kniBridge5558(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5559")
private external fun kniBridge5559(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5560")
private external fun kniBridge5560(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5561")
private external fun kniBridge5561(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5562")
private external fun kniBridge5562(): NativePtr
@SymbolName("libgtk3_kniBridge5563")
private external fun kniBridge5563(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5564")
private external fun kniBridge5564(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5565")
private external fun kniBridge5565(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5566")
private external fun kniBridge5566(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5567")
private external fun kniBridge5567(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5568")
private external fun kniBridge5568(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5569")
private external fun kniBridge5569(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5570")
private external fun kniBridge5570(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5571")
private external fun kniBridge5571(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5572")
private external fun kniBridge5572(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5573")
private external fun kniBridge5573(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5574")
private external fun kniBridge5574(): ULong
@SymbolName("libgtk3_kniBridge5575")
private external fun kniBridge5575(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5576")
private external fun kniBridge5576(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5577")
private external fun kniBridge5577(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5578")
private external fun kniBridge5578(): UInt
@SymbolName("libgtk3_kniBridge5579")
private external fun kniBridge5579(): UInt
@SymbolName("libgtk3_kniBridge5580")
private external fun kniBridge5580(): UInt
@SymbolName("libgtk3_kniBridge5581")
private external fun kniBridge5581(): UInt
@SymbolName("libgtk3_kniBridge5582")
private external fun kniBridge5582(): UInt
@SymbolName("libgtk3_kniBridge5583")
private external fun kniBridge5583(p0: UInt, p1: UInt, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5584")
private external fun kniBridge5584(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5585")
private external fun kniBridge5585(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5586")
private external fun kniBridge5586(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5587")
private external fun kniBridge5587(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libgtk3_kniBridge5588")
private external fun kniBridge5588(p0: Int): NativePtr
@SymbolName("libgtk3_kniBridge5589")
private external fun kniBridge5589(): Unit
@SymbolName("libgtk3_kniBridge5590")
private external fun kniBridge5590(): NativePtr
@SymbolName("libgtk3_kniBridge5591")
private external fun kniBridge5591(): UInt
@SymbolName("libgtk3_kniBridge5592")
private external fun kniBridge5592(): Int
@SymbolName("libgtk3_kniBridge5593")
private external fun kniBridge5593(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5594")
private external fun kniBridge5594(): Unit
@SymbolName("libgtk3_kniBridge5595")
private external fun kniBridge5595(): UInt
@SymbolName("libgtk3_kniBridge5596")
private external fun kniBridge5596(): Unit
@SymbolName("libgtk3_kniBridge5597")
private external fun kniBridge5597(): Int
@SymbolName("libgtk3_kniBridge5598")
private external fun kniBridge5598(p0: Int): Int
@SymbolName("libgtk3_kniBridge5599")
private external fun kniBridge5599(): Int
@SymbolName("libgtk3_kniBridge5600")
private external fun kniBridge5600(): Int
@SymbolName("libgtk3_kniBridge5601")
private external fun kniBridge5601(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5602")
private external fun kniBridge5602(): NativePtr
@SymbolName("libgtk3_kniBridge5603")
private external fun kniBridge5603(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5604")
private external fun kniBridge5604(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5605")
private external fun kniBridge5605(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5606")
private external fun kniBridge5606(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5607")
private external fun kniBridge5607(p0: UInt): Unit
@SymbolName("libgtk3_kniBridge5608")
private external fun kniBridge5608(): NativePtr
@SymbolName("libgtk3_kniBridge5609")
private external fun kniBridge5609(): UInt
@SymbolName("libgtk3_kniBridge5610")
private external fun kniBridge5610(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5611")
private external fun kniBridge5611(): NativePtr
@SymbolName("libgtk3_kniBridge5612")
private external fun kniBridge5612(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5613")
private external fun kniBridge5613(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5614")
private external fun kniBridge5614(): ULong
@SymbolName("libgtk3_kniBridge5615")
private external fun kniBridge5615(): NativePtr
@SymbolName("libgtk3_kniBridge5616")
private external fun kniBridge5616(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5617")
private external fun kniBridge5617(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5618")
private external fun kniBridge5618(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5619")
private external fun kniBridge5619(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5620")
private external fun kniBridge5620(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5621")
private external fun kniBridge5621(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5622")
private external fun kniBridge5622(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5623")
private external fun kniBridge5623(): ULong
@SymbolName("libgtk3_kniBridge5624")
private external fun kniBridge5624(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5625")
private external fun kniBridge5625(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5626")
private external fun kniBridge5626(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5627")
private external fun kniBridge5627(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5628")
private external fun kniBridge5628(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5629")
private external fun kniBridge5629(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5630")
private external fun kniBridge5630(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5631")
private external fun kniBridge5631(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5632")
private external fun kniBridge5632(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5633")
private external fun kniBridge5633(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5634")
private external fun kniBridge5634(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5635")
private external fun kniBridge5635(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5636")
private external fun kniBridge5636(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5637")
private external fun kniBridge5637(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5638")
private external fun kniBridge5638(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5639")
private external fun kniBridge5639(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5640")
private external fun kniBridge5640(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5641")
private external fun kniBridge5641(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5642")
private external fun kniBridge5642(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5643")
private external fun kniBridge5643(): ULong
@SymbolName("libgtk3_kniBridge5644")
private external fun kniBridge5644(): NativePtr
@SymbolName("libgtk3_kniBridge5645")
private external fun kniBridge5645(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5646")
private external fun kniBridge5646(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5647")
private external fun kniBridge5647(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5648")
private external fun kniBridge5648(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5649")
private external fun kniBridge5649(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5650")
private external fun kniBridge5650(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5651")
private external fun kniBridge5651(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5652")
private external fun kniBridge5652(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5653")
private external fun kniBridge5653(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5654")
private external fun kniBridge5654(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5655")
private external fun kniBridge5655(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5656")
private external fun kniBridge5656(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5657")
private external fun kniBridge5657(): ULong
@SymbolName("libgtk3_kniBridge5658")
private external fun kniBridge5658(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5659")
private external fun kniBridge5659(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5660")
private external fun kniBridge5660(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5661")
private external fun kniBridge5661(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5662")
private external fun kniBridge5662(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5663")
private external fun kniBridge5663(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5664")
private external fun kniBridge5664(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5665")
private external fun kniBridge5665(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5666")
private external fun kniBridge5666(): ULong
@SymbolName("libgtk3_kniBridge5667")
private external fun kniBridge5667(): NativePtr
@SymbolName("libgtk3_kniBridge5668")
private external fun kniBridge5668(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5669")
private external fun kniBridge5669(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5670")
private external fun kniBridge5670(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5671")
private external fun kniBridge5671(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5672")
private external fun kniBridge5672(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5673")
private external fun kniBridge5673(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5674")
private external fun kniBridge5674(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5675")
private external fun kniBridge5675(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5676")
private external fun kniBridge5676(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5677")
private external fun kniBridge5677(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5678")
private external fun kniBridge5678(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5679")
private external fun kniBridge5679(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5680")
private external fun kniBridge5680(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5681")
private external fun kniBridge5681(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5682")
private external fun kniBridge5682(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5683")
private external fun kniBridge5683(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5684")
private external fun kniBridge5684(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5685")
private external fun kniBridge5685(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5686")
private external fun kniBridge5686(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5687")
private external fun kniBridge5687(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge5688")
private external fun kniBridge5688(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5689")
private external fun kniBridge5689(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5690")
private external fun kniBridge5690(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5691")
private external fun kniBridge5691(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5692")
private external fun kniBridge5692(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5693")
private external fun kniBridge5693(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5694")
private external fun kniBridge5694(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5695")
private external fun kniBridge5695(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5696")
private external fun kniBridge5696(): ULong
@SymbolName("libgtk3_kniBridge5697")
private external fun kniBridge5697(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5698")
private external fun kniBridge5698(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5699")
private external fun kniBridge5699(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5700")
private external fun kniBridge5700(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5701")
private external fun kniBridge5701(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5702")
private external fun kniBridge5702(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5703")
private external fun kniBridge5703(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5704")
private external fun kniBridge5704(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5705")
private external fun kniBridge5705(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5706")
private external fun kniBridge5706(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5707")
private external fun kniBridge5707(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5708")
private external fun kniBridge5708(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5709")
private external fun kniBridge5709(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5710")
private external fun kniBridge5710(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5711")
private external fun kniBridge5711(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5712")
private external fun kniBridge5712(): ULong
@SymbolName("libgtk3_kniBridge5713")
private external fun kniBridge5713(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5714")
private external fun kniBridge5714(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5715")
private external fun kniBridge5715(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5716")
private external fun kniBridge5716(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5717")
private external fun kniBridge5717(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5718")
private external fun kniBridge5718(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5719")
private external fun kniBridge5719(): ULong
@SymbolName("libgtk3_kniBridge5720")
private external fun kniBridge5720(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5721")
private external fun kniBridge5721(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5722")
private external fun kniBridge5722(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5723")
private external fun kniBridge5723(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5724")
private external fun kniBridge5724(): ULong
@SymbolName("libgtk3_kniBridge5725")
private external fun kniBridge5725(): NativePtr
@SymbolName("libgtk3_kniBridge5726")
private external fun kniBridge5726(): ULong
@SymbolName("libgtk3_kniBridge5727")
private external fun kniBridge5727(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5728")
private external fun kniBridge5728(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5729")
private external fun kniBridge5729(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5730")
private external fun kniBridge5730(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5731")
private external fun kniBridge5731(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5732")
private external fun kniBridge5732(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5733")
private external fun kniBridge5733(): ULong
@SymbolName("libgtk3_kniBridge5734")
private external fun kniBridge5734(): NativePtr
@SymbolName("libgtk3_kniBridge5735")
private external fun kniBridge5735(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5736")
private external fun kniBridge5736(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge5737")
private external fun kniBridge5737(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5738")
private external fun kniBridge5738(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge5739")
private external fun kniBridge5739(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libgtk3_kniBridge5740")
private external fun kniBridge5740(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libgtk3_kniBridge5741")
private external fun kniBridge5741(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5742")
private external fun kniBridge5742(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5743")
private external fun kniBridge5743(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5744")
private external fun kniBridge5744(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5745")
private external fun kniBridge5745(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge5746")
private external fun kniBridge5746(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5747")
private external fun kniBridge5747(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5748")
private external fun kniBridge5748(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5749")
private external fun kniBridge5749(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5750")
private external fun kniBridge5750(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5751")
private external fun kniBridge5751(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5752")
private external fun kniBridge5752(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5753")
private external fun kniBridge5753(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5754")
private external fun kniBridge5754(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5755")
private external fun kniBridge5755(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5756")
private external fun kniBridge5756(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5757")
private external fun kniBridge5757(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5758")
private external fun kniBridge5758(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5759")
private external fun kniBridge5759(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge5760")
private external fun kniBridge5760(p0: NativePtr): UShort
@SymbolName("libgtk3_kniBridge5761")
private external fun kniBridge5761(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5762")
private external fun kniBridge5762(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5763")
private external fun kniBridge5763(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5764")
private external fun kniBridge5764(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5765")
private external fun kniBridge5765(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5766")
private external fun kniBridge5766(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5767")
private external fun kniBridge5767(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5768")
private external fun kniBridge5768(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5769")
private external fun kniBridge5769(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5770")
private external fun kniBridge5770(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5771")
private external fun kniBridge5771(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5772")
private external fun kniBridge5772(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5773")
private external fun kniBridge5773(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5774")
private external fun kniBridge5774(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5775")
private external fun kniBridge5775(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5776")
private external fun kniBridge5776(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5777")
private external fun kniBridge5777(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5778")
private external fun kniBridge5778(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5779")
private external fun kniBridge5779(): ULong
@SymbolName("libgtk3_kniBridge5780")
private external fun kniBridge5780(): NativePtr
@SymbolName("libgtk3_kniBridge5781")
private external fun kniBridge5781(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5782")
private external fun kniBridge5782(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5783")
private external fun kniBridge5783(): ULong
@SymbolName("libgtk3_kniBridge5784")
private external fun kniBridge5784(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5785")
private external fun kniBridge5785(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5786")
private external fun kniBridge5786(): ULong
@SymbolName("libgtk3_kniBridge5787")
private external fun kniBridge5787(): NativePtr
@SymbolName("libgtk3_kniBridge5788")
private external fun kniBridge5788(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5789")
private external fun kniBridge5789(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5790")
private external fun kniBridge5790(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5791")
private external fun kniBridge5791(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5792")
private external fun kniBridge5792(): ULong
@SymbolName("libgtk3_kniBridge5793")
private external fun kniBridge5793(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5794")
private external fun kniBridge5794(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5795")
private external fun kniBridge5795(p0: NativePtr, p1: UInt, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5796")
private external fun kniBridge5796(): ULong
@SymbolName("libgtk3_kniBridge5797")
private external fun kniBridge5797(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5798")
private external fun kniBridge5798(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double): NativePtr
@SymbolName("libgtk3_kniBridge5799")
private external fun kniBridge5799(p0: NativePtr, p1: Double, p2: Double): NativePtr
@SymbolName("libgtk3_kniBridge5800")
private external fun kniBridge5800(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5801")
private external fun kniBridge5801(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5802")
private external fun kniBridge5802(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5803")
private external fun kniBridge5803(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5804")
private external fun kniBridge5804(p0: Int): NativePtr
@SymbolName("libgtk3_kniBridge5805")
private external fun kniBridge5805(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5806")
private external fun kniBridge5806(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5807")
private external fun kniBridge5807(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5808")
private external fun kniBridge5808(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5809")
private external fun kniBridge5809(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5810")
private external fun kniBridge5810(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5811")
private external fun kniBridge5811(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5812")
private external fun kniBridge5812(p0: NativePtr, p1: Double, p2: Double, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge5813")
private external fun kniBridge5813(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5814")
private external fun kniBridge5814(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5815")
private external fun kniBridge5815(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5816")
private external fun kniBridge5816(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5817")
private external fun kniBridge5817(): NativePtr
@SymbolName("libgtk3_kniBridge5818")
private external fun kniBridge5818(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5819")
private external fun kniBridge5819(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5820")
private external fun kniBridge5820(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5821")
private external fun kniBridge5821(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5822")
private external fun kniBridge5822(): ULong
@SymbolName("libgtk3_kniBridge5823")
private external fun kniBridge5823(): NativePtr
@SymbolName("libgtk3_kniBridge5824")
private external fun kniBridge5824(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5825")
private external fun kniBridge5825(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5826")
private external fun kniBridge5826(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5827")
private external fun kniBridge5827(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5828")
private external fun kniBridge5828(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5829")
private external fun kniBridge5829(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5830")
private external fun kniBridge5830(p0: NativePtr, p1: Double, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5831")
private external fun kniBridge5831(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5832")
private external fun kniBridge5832(p0: NativePtr, p1: Double, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5833")
private external fun kniBridge5833(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5834")
private external fun kniBridge5834(p0: NativePtr, p1: Double, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5835")
private external fun kniBridge5835(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5836")
private external fun kniBridge5836(p0: NativePtr, p1: Double, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5837")
private external fun kniBridge5837(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5838")
private external fun kniBridge5838(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5839")
private external fun kniBridge5839(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5840")
private external fun kniBridge5840(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5841")
private external fun kniBridge5841(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5842")
private external fun kniBridge5842(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5843")
private external fun kniBridge5843(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5844")
private external fun kniBridge5844(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5845")
private external fun kniBridge5845(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5846")
private external fun kniBridge5846(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge5847")
private external fun kniBridge5847(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5848")
private external fun kniBridge5848(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5849")
private external fun kniBridge5849(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5850")
private external fun kniBridge5850(): ULong
@SymbolName("libgtk3_kniBridge5851")
private external fun kniBridge5851(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge5852")
private external fun kniBridge5852(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5853")
private external fun kniBridge5853(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5854")
private external fun kniBridge5854(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5855")
private external fun kniBridge5855(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge5856")
private external fun kniBridge5856(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5857")
private external fun kniBridge5857(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5858")
private external fun kniBridge5858(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5859")
private external fun kniBridge5859(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5860")
private external fun kniBridge5860(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5861")
private external fun kniBridge5861(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5862")
private external fun kniBridge5862(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5863")
private external fun kniBridge5863(): ULong
@SymbolName("libgtk3_kniBridge5864")
private external fun kniBridge5864(): NativePtr
@SymbolName("libgtk3_kniBridge5865")
private external fun kniBridge5865(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5866")
private external fun kniBridge5866(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5867")
private external fun kniBridge5867(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5868")
private external fun kniBridge5868(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5869")
private external fun kniBridge5869(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5870")
private external fun kniBridge5870(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5871")
private external fun kniBridge5871(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5872")
private external fun kniBridge5872(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5873")
private external fun kniBridge5873(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5874")
private external fun kniBridge5874(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5875")
private external fun kniBridge5875(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5876")
private external fun kniBridge5876(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5877")
private external fun kniBridge5877(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5878")
private external fun kniBridge5878(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5879")
private external fun kniBridge5879(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5880")
private external fun kniBridge5880(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5881")
private external fun kniBridge5881(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5882")
private external fun kniBridge5882(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge5883")
private external fun kniBridge5883(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5884")
private external fun kniBridge5884(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5885")
private external fun kniBridge5885(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5886")
private external fun kniBridge5886(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5887")
private external fun kniBridge5887(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5888")
private external fun kniBridge5888(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5889")
private external fun kniBridge5889(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5890")
private external fun kniBridge5890(): ULong
@SymbolName("libgtk3_kniBridge5891")
private external fun kniBridge5891(): NativePtr
@SymbolName("libgtk3_kniBridge5892")
private external fun kniBridge5892(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5893")
private external fun kniBridge5893(): ULong
@SymbolName("libgtk3_kniBridge5894")
private external fun kniBridge5894(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5895")
private external fun kniBridge5895(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5896")
private external fun kniBridge5896(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5897")
private external fun kniBridge5897(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5898")
private external fun kniBridge5898(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5899")
private external fun kniBridge5899(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5900")
private external fun kniBridge5900(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge5901")
private external fun kniBridge5901(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5902")
private external fun kniBridge5902(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5903")
private external fun kniBridge5903(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5904")
private external fun kniBridge5904(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double): Unit
@SymbolName("libgtk3_kniBridge5905")
private external fun kniBridge5905(): ULong
@SymbolName("libgtk3_kniBridge5906")
private external fun kniBridge5906(): NativePtr
@SymbolName("libgtk3_kniBridge5907")
private external fun kniBridge5907(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5908")
private external fun kniBridge5908(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5909")
private external fun kniBridge5909(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5910")
private external fun kniBridge5910(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge5911")
private external fun kniBridge5911(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5912")
private external fun kniBridge5912(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge5913")
private external fun kniBridge5913(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5914")
private external fun kniBridge5914(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5915")
private external fun kniBridge5915(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5916")
private external fun kniBridge5916(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5917")
private external fun kniBridge5917(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5918")
private external fun kniBridge5918(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5919")
private external fun kniBridge5919(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5920")
private external fun kniBridge5920(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5921")
private external fun kniBridge5921(p0: NativePtr, p1: NativePtr): Double
@SymbolName("libgtk3_kniBridge5922")
private external fun kniBridge5922(p0: NativePtr, p1: NativePtr, p2: Double): Double
@SymbolName("libgtk3_kniBridge5923")
private external fun kniBridge5923(p0: NativePtr, p1: NativePtr, p2: Double): Unit
@SymbolName("libgtk3_kniBridge5924")
private external fun kniBridge5924(p0: NativePtr, p1: NativePtr, p2: UInt): Double
@SymbolName("libgtk3_kniBridge5925")
private external fun kniBridge5925(p0: NativePtr, p1: NativePtr, p2: Double, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge5926")
private external fun kniBridge5926(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge5927")
private external fun kniBridge5927(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge5928")
private external fun kniBridge5928(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5929")
private external fun kniBridge5929(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5930")
private external fun kniBridge5930(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5931")
private external fun kniBridge5931(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5932")
private external fun kniBridge5932(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5933")
private external fun kniBridge5933(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5934")
private external fun kniBridge5934(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5935")
private external fun kniBridge5935(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5936")
private external fun kniBridge5936(p0: NativePtr, p1: Double, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5937")
private external fun kniBridge5937(p0: NativePtr, p1: UInt): Double
@SymbolName("libgtk3_kniBridge5938")
private external fun kniBridge5938(p0: NativePtr, p1: Double, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge5939")
private external fun kniBridge5939(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5940")
private external fun kniBridge5940(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5941")
private external fun kniBridge5941(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5942")
private external fun kniBridge5942(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5943")
private external fun kniBridge5943(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5944")
private external fun kniBridge5944(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5945")
private external fun kniBridge5945(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5946")
private external fun kniBridge5946(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5947")
private external fun kniBridge5947(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5948")
private external fun kniBridge5948(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5949")
private external fun kniBridge5949(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5950")
private external fun kniBridge5950(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5951")
private external fun kniBridge5951(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5952")
private external fun kniBridge5952(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5953")
private external fun kniBridge5953(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5954")
private external fun kniBridge5954(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5955")
private external fun kniBridge5955(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5956")
private external fun kniBridge5956(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5957")
private external fun kniBridge5957(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5958")
private external fun kniBridge5958(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge5959")
private external fun kniBridge5959(p0: NativePtr, p1: Int, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5960")
private external fun kniBridge5960(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5961")
private external fun kniBridge5961(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge5962")
private external fun kniBridge5962(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge5963")
private external fun kniBridge5963(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge5964")
private external fun kniBridge5964(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5965")
private external fun kniBridge5965(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5966")
private external fun kniBridge5966(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5967")
private external fun kniBridge5967(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge5968")
private external fun kniBridge5968(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge5969")
private external fun kniBridge5969(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5970")
private external fun kniBridge5970(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5971")
private external fun kniBridge5971(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5972")
private external fun kniBridge5972(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5973")
private external fun kniBridge5973(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5974")
private external fun kniBridge5974(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5975")
private external fun kniBridge5975(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5976")
private external fun kniBridge5976(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5977")
private external fun kniBridge5977(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5978")
private external fun kniBridge5978(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5979")
private external fun kniBridge5979(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5980")
private external fun kniBridge5980(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5981")
private external fun kniBridge5981(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5982")
private external fun kniBridge5982(): ULong
@SymbolName("libgtk3_kniBridge5983")
private external fun kniBridge5983(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5984")
private external fun kniBridge5984(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5985")
private external fun kniBridge5985(p0: NativePtr, p1: Int): Int
@SymbolName("libgtk3_kniBridge5986")
private external fun kniBridge5986(): UInt
@SymbolName("libgtk3_kniBridge5987")
private external fun kniBridge5987(): ULong
@SymbolName("libgtk3_kniBridge5988")
private external fun kniBridge5988(): NativePtr
@SymbolName("libgtk3_kniBridge5989")
private external fun kniBridge5989(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5990")
private external fun kniBridge5990(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5991")
private external fun kniBridge5991(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5992")
private external fun kniBridge5992(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge5993")
private external fun kniBridge5993(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5994")
private external fun kniBridge5994(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5995")
private external fun kniBridge5995(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5996")
private external fun kniBridge5996(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge5997")
private external fun kniBridge5997(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge5998")
private external fun kniBridge5998(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge5999")
private external fun kniBridge5999(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6000")
private external fun kniBridge6000(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6001")
private external fun kniBridge6001(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6002")
private external fun kniBridge6002(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6003")
private external fun kniBridge6003(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6004")
private external fun kniBridge6004(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6005")
private external fun kniBridge6005(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6006")
private external fun kniBridge6006(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6007")
private external fun kniBridge6007(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6008")
private external fun kniBridge6008(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6009")
private external fun kniBridge6009(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6010")
private external fun kniBridge6010(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6011")
private external fun kniBridge6011(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6012")
private external fun kniBridge6012(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6013")
private external fun kniBridge6013(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6014")
private external fun kniBridge6014(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6015")
private external fun kniBridge6015(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6016")
private external fun kniBridge6016(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6017")
private external fun kniBridge6017(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6018")
private external fun kniBridge6018(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6019")
private external fun kniBridge6019(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6020")
private external fun kniBridge6020(): ULong
@SymbolName("libgtk3_kniBridge6021")
private external fun kniBridge6021(): NativePtr
@SymbolName("libgtk3_kniBridge6022")
private external fun kniBridge6022(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6023")
private external fun kniBridge6023(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6024")
private external fun kniBridge6024(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6025")
private external fun kniBridge6025(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6026")
private external fun kniBridge6026(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6027")
private external fun kniBridge6027(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6028")
private external fun kniBridge6028(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6029")
private external fun kniBridge6029(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6030")
private external fun kniBridge6030(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6031")
private external fun kniBridge6031(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6032")
private external fun kniBridge6032(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6033")
private external fun kniBridge6033(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6034")
private external fun kniBridge6034(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6035")
private external fun kniBridge6035(): ULong
@SymbolName("libgtk3_kniBridge6036")
private external fun kniBridge6036(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6037")
private external fun kniBridge6037(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6038")
private external fun kniBridge6038(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6039")
private external fun kniBridge6039(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6040")
private external fun kniBridge6040(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6041")
private external fun kniBridge6041(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6042")
private external fun kniBridge6042(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6043")
private external fun kniBridge6043(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6044")
private external fun kniBridge6044(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6045")
private external fun kniBridge6045(): ULong
@SymbolName("libgtk3_kniBridge6046")
private external fun kniBridge6046(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6047")
private external fun kniBridge6047(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6048")
private external fun kniBridge6048(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6049")
private external fun kniBridge6049(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6050")
private external fun kniBridge6050(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6051")
private external fun kniBridge6051(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6052")
private external fun kniBridge6052(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6053")
private external fun kniBridge6053(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6054")
private external fun kniBridge6054(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6055")
private external fun kniBridge6055(): ULong
@SymbolName("libgtk3_kniBridge6056")
private external fun kniBridge6056(): NativePtr
@SymbolName("libgtk3_kniBridge6057")
private external fun kniBridge6057(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6058")
private external fun kniBridge6058(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6059")
private external fun kniBridge6059(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6060")
private external fun kniBridge6060(): ULong
@SymbolName("libgtk3_kniBridge6061")
private external fun kniBridge6061(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6062")
private external fun kniBridge6062(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6063")
private external fun kniBridge6063(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6064")
private external fun kniBridge6064(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6065")
private external fun kniBridge6065(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6066")
private external fun kniBridge6066(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6067")
private external fun kniBridge6067(): ULong
@SymbolName("libgtk3_kniBridge6068")
private external fun kniBridge6068(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6069")
private external fun kniBridge6069(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6070")
private external fun kniBridge6070(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6071")
private external fun kniBridge6071(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6072")
private external fun kniBridge6072(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6073")
private external fun kniBridge6073(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6074")
private external fun kniBridge6074(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6075")
private external fun kniBridge6075(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6076")
private external fun kniBridge6076(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6077")
private external fun kniBridge6077(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6078")
private external fun kniBridge6078(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6079")
private external fun kniBridge6079(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6080")
private external fun kniBridge6080(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6081")
private external fun kniBridge6081(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6082")
private external fun kniBridge6082(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6083")
private external fun kniBridge6083(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6084")
private external fun kniBridge6084(p0: NativePtr, p1: Double, p2: Double): Unit
@SymbolName("libgtk3_kniBridge6085")
private external fun kniBridge6085(p0: NativePtr, p1: Double, p2: Double): Unit
@SymbolName("libgtk3_kniBridge6086")
private external fun kniBridge6086(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6087")
private external fun kniBridge6087(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6088")
private external fun kniBridge6088(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6089")
private external fun kniBridge6089(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6090")
private external fun kniBridge6090(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6091")
private external fun kniBridge6091(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6092")
private external fun kniBridge6092(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6093")
private external fun kniBridge6093(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6094")
private external fun kniBridge6094(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6095")
private external fun kniBridge6095(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6096")
private external fun kniBridge6096(): UInt
@SymbolName("libgtk3_kniBridge6097")
private external fun kniBridge6097(): ULong
@SymbolName("libgtk3_kniBridge6098")
private external fun kniBridge6098(): NativePtr
@SymbolName("libgtk3_kniBridge6099")
private external fun kniBridge6099(): NativePtr
@SymbolName("libgtk3_kniBridge6100")
private external fun kniBridge6100(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6101")
private external fun kniBridge6101(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6102")
private external fun kniBridge6102(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6103")
private external fun kniBridge6103(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6104")
private external fun kniBridge6104(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6105")
private external fun kniBridge6105(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge6106")
private external fun kniBridge6106(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6107")
private external fun kniBridge6107(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6108")
private external fun kniBridge6108(): ULong
@SymbolName("libgtk3_kniBridge6109")
private external fun kniBridge6109(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6110")
private external fun kniBridge6110(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6111")
private external fun kniBridge6111(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6112")
private external fun kniBridge6112(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6113")
private external fun kniBridge6113(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6114")
private external fun kniBridge6114(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6115")
private external fun kniBridge6115(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge6116")
private external fun kniBridge6116(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge6117")
private external fun kniBridge6117(p0: NativePtr): Long
@SymbolName("libgtk3_kniBridge6118")
private external fun kniBridge6118(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6119")
private external fun kniBridge6119(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libgtk3_kniBridge6120")
private external fun kniBridge6120(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6121")
private external fun kniBridge6121(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6122")
private external fun kniBridge6122(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6123")
private external fun kniBridge6123(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6124")
private external fun kniBridge6124(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6125")
private external fun kniBridge6125(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6126")
private external fun kniBridge6126(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6127")
private external fun kniBridge6127(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6128")
private external fun kniBridge6128(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6129")
private external fun kniBridge6129(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6130")
private external fun kniBridge6130(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6131")
private external fun kniBridge6131(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6132")
private external fun kniBridge6132(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6133")
private external fun kniBridge6133(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6134")
private external fun kniBridge6134(): Unit
@SymbolName("libgtk3_kniBridge6135")
private external fun kniBridge6135(): ULong
@SymbolName("libgtk3_kniBridge6136")
private external fun kniBridge6136(): NativePtr
@SymbolName("libgtk3_kniBridge6137")
private external fun kniBridge6137(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6138")
private external fun kniBridge6138(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6139")
private external fun kniBridge6139(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6140")
private external fun kniBridge6140(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6141")
private external fun kniBridge6141(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6142")
private external fun kniBridge6142(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6143")
private external fun kniBridge6143(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6144")
private external fun kniBridge6144(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6145")
private external fun kniBridge6145(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6146")
private external fun kniBridge6146(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6147")
private external fun kniBridge6147(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6148")
private external fun kniBridge6148(): UInt
@SymbolName("libgtk3_kniBridge6149")
private external fun kniBridge6149(): ULong
@SymbolName("libgtk3_kniBridge6150")
private external fun kniBridge6150(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6151")
private external fun kniBridge6151(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6152")
private external fun kniBridge6152(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6153")
private external fun kniBridge6153(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6154")
private external fun kniBridge6154(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6155")
private external fun kniBridge6155(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6156")
private external fun kniBridge6156(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6157")
private external fun kniBridge6157(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6158")
private external fun kniBridge6158(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6159")
private external fun kniBridge6159(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6160")
private external fun kniBridge6160(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6161")
private external fun kniBridge6161(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6162")
private external fun kniBridge6162(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6163")
private external fun kniBridge6163(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6164")
private external fun kniBridge6164(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6165")
private external fun kniBridge6165(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6166")
private external fun kniBridge6166(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6167")
private external fun kniBridge6167(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6168")
private external fun kniBridge6168(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6169")
private external fun kniBridge6169(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6170")
private external fun kniBridge6170(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6171")
private external fun kniBridge6171(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6172")
private external fun kniBridge6172(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6173")
private external fun kniBridge6173(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6174")
private external fun kniBridge6174(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6175")
private external fun kniBridge6175(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6176")
private external fun kniBridge6176(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6177")
private external fun kniBridge6177(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6178")
private external fun kniBridge6178(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6179")
private external fun kniBridge6179(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6180")
private external fun kniBridge6180(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6181")
private external fun kniBridge6181(): ULong
@SymbolName("libgtk3_kniBridge6182")
private external fun kniBridge6182(): ULong
@SymbolName("libgtk3_kniBridge6183")
private external fun kniBridge6183(): NativePtr
@SymbolName("libgtk3_kniBridge6184")
private external fun kniBridge6184(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6185")
private external fun kniBridge6185(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6186")
private external fun kniBridge6186(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6187")
private external fun kniBridge6187(): ULong
@SymbolName("libgtk3_kniBridge6188")
private external fun kniBridge6188(): NativePtr
@SymbolName("libgtk3_kniBridge6189")
private external fun kniBridge6189(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6190")
private external fun kniBridge6190(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6191")
private external fun kniBridge6191(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6192")
private external fun kniBridge6192(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6193")
private external fun kniBridge6193(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6194")
private external fun kniBridge6194(p0: NativePtr, p1: Double, p2: Double, p3: Double, p4: Double, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6195")
private external fun kniBridge6195(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6196")
private external fun kniBridge6196(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6197")
private external fun kniBridge6197(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6198")
private external fun kniBridge6198(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6199")
private external fun kniBridge6199(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6200")
private external fun kniBridge6200(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double, p6: UInt): Unit
@SymbolName("libgtk3_kniBridge6201")
private external fun kniBridge6201(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double, p6: UInt, p7: Double, p8: Double): Unit
@SymbolName("libgtk3_kniBridge6202")
private external fun kniBridge6202(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double, p6: UInt): Unit
@SymbolName("libgtk3_kniBridge6203")
private external fun kniBridge6203(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6204")
private external fun kniBridge6204(p0: NativePtr, p1: NativePtr, p2: Double, p3: Double, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6205")
private external fun kniBridge6205(p0: NativePtr, p1: NativePtr, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge6206")
private external fun kniBridge6206(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Double, p4: Double): Unit
@SymbolName("libgtk3_kniBridge6207")
private external fun kniBridge6207(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Double, p4: Double): Unit
@SymbolName("libgtk3_kniBridge6208")
private external fun kniBridge6208(): ULong
@SymbolName("libgtk3_kniBridge6209")
private external fun kniBridge6209(): NativePtr
@SymbolName("libgtk3_kniBridge6210")
private external fun kniBridge6210(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6211")
private external fun kniBridge6211(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6212")
private external fun kniBridge6212(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6213")
private external fun kniBridge6213(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6214")
private external fun kniBridge6214(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6215")
private external fun kniBridge6215(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6216")
private external fun kniBridge6216(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6217")
private external fun kniBridge6217(): ULong
@SymbolName("libgtk3_kniBridge6218")
private external fun kniBridge6218(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6219")
private external fun kniBridge6219(p0: UInt, p1: Double, p2: Double, p3: Double): NativePtr
@SymbolName("libgtk3_kniBridge6220")
private external fun kniBridge6220(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6221")
private external fun kniBridge6221(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6222")
private external fun kniBridge6222(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6223")
private external fun kniBridge6223(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6224")
private external fun kniBridge6224(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6225")
private external fun kniBridge6225(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6226")
private external fun kniBridge6226(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6227")
private external fun kniBridge6227(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6228")
private external fun kniBridge6228(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6229")
private external fun kniBridge6229(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6230")
private external fun kniBridge6230(p0: NativePtr, p1: Double, p2: UInt, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6231")
private external fun kniBridge6231(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6232")
private external fun kniBridge6232(): ULong
@SymbolName("libgtk3_kniBridge6233")
private external fun kniBridge6233(p0: UInt, p1: Double, p2: Double, p3: Double, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6234")
private external fun kniBridge6234(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6235")
private external fun kniBridge6235(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6236")
private external fun kniBridge6236(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6237")
private external fun kniBridge6237(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6238")
private external fun kniBridge6238(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6239")
private external fun kniBridge6239(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6240")
private external fun kniBridge6240(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6241")
private external fun kniBridge6241(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6242")
private external fun kniBridge6242(): ULong
@SymbolName("libgtk3_kniBridge6243")
private external fun kniBridge6243(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6244")
private external fun kniBridge6244(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6245")
private external fun kniBridge6245(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6246")
private external fun kniBridge6246(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6247")
private external fun kniBridge6247(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6248")
private external fun kniBridge6248(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6249")
private external fun kniBridge6249(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6250")
private external fun kniBridge6250(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6251")
private external fun kniBridge6251(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6252")
private external fun kniBridge6252(): ULong
@SymbolName("libgtk3_kniBridge6253")
private external fun kniBridge6253(p0: UInt, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6254")
private external fun kniBridge6254(): ULong
@SymbolName("libgtk3_kniBridge6255")
private external fun kniBridge6255(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6256")
private external fun kniBridge6256(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6257")
private external fun kniBridge6257(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6258")
private external fun kniBridge6258(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6259")
private external fun kniBridge6259(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6260")
private external fun kniBridge6260(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6261")
private external fun kniBridge6261(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6262")
private external fun kniBridge6262(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge6263")
private external fun kniBridge6263(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6264")
private external fun kniBridge6264(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6265")
private external fun kniBridge6265(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6266")
private external fun kniBridge6266(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6267")
private external fun kniBridge6267(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6268")
private external fun kniBridge6268(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6269")
private external fun kniBridge6269(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6270")
private external fun kniBridge6270(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6271")
private external fun kniBridge6271(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6272")
private external fun kniBridge6272(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6273")
private external fun kniBridge6273(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6274")
private external fun kniBridge6274(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6275")
private external fun kniBridge6275(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6276")
private external fun kniBridge6276(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6277")
private external fun kniBridge6277(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6278")
private external fun kniBridge6278(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6279")
private external fun kniBridge6279(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6280")
private external fun kniBridge6280(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6281")
private external fun kniBridge6281(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6282")
private external fun kniBridge6282(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6283")
private external fun kniBridge6283(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6284")
private external fun kniBridge6284(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6285")
private external fun kniBridge6285(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6286")
private external fun kniBridge6286(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6287")
private external fun kniBridge6287(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6288")
private external fun kniBridge6288(): ULong
@SymbolName("libgtk3_kniBridge6289")
private external fun kniBridge6289(): NativePtr
@SymbolName("libgtk3_kniBridge6290")
private external fun kniBridge6290(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6291")
private external fun kniBridge6291(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6292")
private external fun kniBridge6292(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6293")
private external fun kniBridge6293(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6294")
private external fun kniBridge6294(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6295")
private external fun kniBridge6295(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6296")
private external fun kniBridge6296(): ULong
@SymbolName("libgtk3_kniBridge6297")
private external fun kniBridge6297(): NativePtr
@SymbolName("libgtk3_kniBridge6298")
private external fun kniBridge6298(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6299")
private external fun kniBridge6299(): ULong
@SymbolName("libgtk3_kniBridge6300")
private external fun kniBridge6300(p0: UInt): NativePtr
@SymbolName("libgtk3_kniBridge6301")
private external fun kniBridge6301(): ULong
@SymbolName("libgtk3_kniBridge6302")
private external fun kniBridge6302(): NativePtr
@SymbolName("libgtk3_kniBridge6303")
private external fun kniBridge6303(): ULong
@SymbolName("libgtk3_kniBridge6304")
private external fun kniBridge6304(): NativePtr
@SymbolName("libgtk3_kniBridge6305")
private external fun kniBridge6305(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6306")
private external fun kniBridge6306(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6307")
private external fun kniBridge6307(): ULong
@SymbolName("libgtk3_kniBridge6308")
private external fun kniBridge6308(): NativePtr
@SymbolName("libgtk3_kniBridge6309")
private external fun kniBridge6309(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6310")
private external fun kniBridge6310(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6311")
private external fun kniBridge6311(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6312")
private external fun kniBridge6312(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6313")
private external fun kniBridge6313(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6314")
private external fun kniBridge6314(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6315")
private external fun kniBridge6315(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6316")
private external fun kniBridge6316(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6317")
private external fun kniBridge6317(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6318")
private external fun kniBridge6318(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6319")
private external fun kniBridge6319(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6320")
private external fun kniBridge6320(p0: NativePtr, p1: NativePtr, p2: Double, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6321")
private external fun kniBridge6321(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6322")
private external fun kniBridge6322(): ULong
@SymbolName("libgtk3_kniBridge6323")
private external fun kniBridge6323(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6324")
private external fun kniBridge6324(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6325")
private external fun kniBridge6325(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6326")
private external fun kniBridge6326(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6327")
private external fun kniBridge6327(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6328")
private external fun kniBridge6328(): ULong
@SymbolName("libgtk3_kniBridge6329")
private external fun kniBridge6329(): ULong
@SymbolName("libgtk3_kniBridge6330")
private external fun kniBridge6330(): ULong
@SymbolName("libgtk3_kniBridge6331")
private external fun kniBridge6331(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge6332")
private external fun kniBridge6332(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge6333")
private external fun kniBridge6333(): ULong
@SymbolName("libgtk3_kniBridge6334")
private external fun kniBridge6334(): NativePtr
@SymbolName("libgtk3_kniBridge6335")
private external fun kniBridge6335(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6336")
private external fun kniBridge6336(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6337")
private external fun kniBridge6337(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6338")
private external fun kniBridge6338(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6339")
private external fun kniBridge6339(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6340")
private external fun kniBridge6340(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6341")
private external fun kniBridge6341(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6342")
private external fun kniBridge6342(p0: NativePtr, p1: NativePtr, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge6343")
private external fun kniBridge6343(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6344")
private external fun kniBridge6344(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6345")
private external fun kniBridge6345(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6346")
private external fun kniBridge6346(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6347")
private external fun kniBridge6347(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6348")
private external fun kniBridge6348(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6349")
private external fun kniBridge6349(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6350")
private external fun kniBridge6350(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6351")
private external fun kniBridge6351(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6352")
private external fun kniBridge6352(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6353")
private external fun kniBridge6353(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6354")
private external fun kniBridge6354(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6355")
private external fun kniBridge6355(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6356")
private external fun kniBridge6356(): ULong
@SymbolName("libgtk3_kniBridge6357")
private external fun kniBridge6357(): NativePtr
@SymbolName("libgtk3_kniBridge6358")
private external fun kniBridge6358(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6359")
private external fun kniBridge6359(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6360")
private external fun kniBridge6360(p0: Int, p1: UInt, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6361")
private external fun kniBridge6361(): ULong
@SymbolName("libgtk3_kniBridge6362")
private external fun kniBridge6362(p0: NativePtr, p1: NativePtr, p2: Double, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge6363")
private external fun kniBridge6363(p0: NativePtr, p1: Double, p2: UInt): NativePtr
@SymbolName("libgtk3_kniBridge6364")
private external fun kniBridge6364(p0: Double, p1: Double, p2: Double): NativePtr
@SymbolName("libgtk3_kniBridge6365")
private external fun kniBridge6365(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6366")
private external fun kniBridge6366(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6367")
private external fun kniBridge6367(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6368")
private external fun kniBridge6368(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6369")
private external fun kniBridge6369(p0: NativePtr, p1: Double, p2: Double): Unit
@SymbolName("libgtk3_kniBridge6370")
private external fun kniBridge6370(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6371")
private external fun kniBridge6371(p0: NativePtr, p1: Double, p2: Double): Unit
@SymbolName("libgtk3_kniBridge6372")
private external fun kniBridge6372(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6373")
private external fun kniBridge6373(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6374")
private external fun kniBridge6374(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6375")
private external fun kniBridge6375(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6376")
private external fun kniBridge6376(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6377")
private external fun kniBridge6377(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6378")
private external fun kniBridge6378(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6379")
private external fun kniBridge6379(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6380")
private external fun kniBridge6380(p0: NativePtr, p1: UInt, p2: Double): Unit
@SymbolName("libgtk3_kniBridge6381")
private external fun kniBridge6381(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6382")
private external fun kniBridge6382(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6383")
private external fun kniBridge6383(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6384")
private external fun kniBridge6384(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6385")
private external fun kniBridge6385(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6386")
private external fun kniBridge6386(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6387")
private external fun kniBridge6387(): ULong
@SymbolName("libgtk3_kniBridge6388")
private external fun kniBridge6388(): NativePtr
@SymbolName("libgtk3_kniBridge6389")
private external fun kniBridge6389(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6390")
private external fun kniBridge6390(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6391")
private external fun kniBridge6391(): ULong
@SymbolName("libgtk3_kniBridge6392")
private external fun kniBridge6392(): NativePtr
@SymbolName("libgtk3_kniBridge6393")
private external fun kniBridge6393(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6394")
private external fun kniBridge6394(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6395")
private external fun kniBridge6395(): ULong
@SymbolName("libgtk3_kniBridge6396")
private external fun kniBridge6396(): NativePtr
@SymbolName("libgtk3_kniBridge6397")
private external fun kniBridge6397(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6398")
private external fun kniBridge6398(p0: NativePtr, p1: UInt, p2: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6399")
private external fun kniBridge6399(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6400")
private external fun kniBridge6400(p0: NativePtr, p1: UInt, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge6401")
private external fun kniBridge6401(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6402")
private external fun kniBridge6402(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6403")
private external fun kniBridge6403(): ULong
@SymbolName("libgtk3_kniBridge6404")
private external fun kniBridge6404(): NativePtr
@SymbolName("libgtk3_kniBridge6405")
private external fun kniBridge6405(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6406")
private external fun kniBridge6406(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6407")
private external fun kniBridge6407(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6408")
private external fun kniBridge6408(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6409")
private external fun kniBridge6409(): ULong
@SymbolName("libgtk3_kniBridge6410")
private external fun kniBridge6410(): NativePtr
@SymbolName("libgtk3_kniBridge6411")
private external fun kniBridge6411(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6412")
private external fun kniBridge6412(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6413")
private external fun kniBridge6413(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6414")
private external fun kniBridge6414(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6415")
private external fun kniBridge6415(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6416")
private external fun kniBridge6416(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6417")
private external fun kniBridge6417(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6418")
private external fun kniBridge6418(): ULong
@SymbolName("libgtk3_kniBridge6419")
private external fun kniBridge6419(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6420")
private external fun kniBridge6420(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6421")
private external fun kniBridge6421(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6422")
private external fun kniBridge6422(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6423")
private external fun kniBridge6423(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6424")
private external fun kniBridge6424(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6425")
private external fun kniBridge6425(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6426")
private external fun kniBridge6426(): ULong
@SymbolName("libgtk3_kniBridge6427")
private external fun kniBridge6427(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6428")
private external fun kniBridge6428(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6429")
private external fun kniBridge6429(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6430")
private external fun kniBridge6430(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6431")
private external fun kniBridge6431(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6432")
private external fun kniBridge6432(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6433")
private external fun kniBridge6433(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6434")
private external fun kniBridge6434(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libgtk3_kniBridge6435")
private external fun kniBridge6435(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libgtk3_kniBridge6436")
private external fun kniBridge6436(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6437")
private external fun kniBridge6437(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libgtk3_kniBridge6438")
private external fun kniBridge6438(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6439")
private external fun kniBridge6439(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6440")
private external fun kniBridge6440(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libgtk3_kniBridge6441")
private external fun kniBridge6441(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libgtk3_kniBridge6442")
private external fun kniBridge6442(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libgtk3_kniBridge6443")
private external fun kniBridge6443(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libgtk3_kniBridge6444")
private external fun kniBridge6444(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6445")
private external fun kniBridge6445(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6446")
private external fun kniBridge6446(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6447")
private external fun kniBridge6447(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6448")
private external fun kniBridge6448(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libgtk3_kniBridge6449")
private external fun kniBridge6449(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6450")
private external fun kniBridge6450(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6451")
private external fun kniBridge6451(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6452")
private external fun kniBridge6452(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6453")
private external fun kniBridge6453(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6454")
private external fun kniBridge6454(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6455")
private external fun kniBridge6455(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6456")
private external fun kniBridge6456(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6457")
private external fun kniBridge6457(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6458")
private external fun kniBridge6458(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6459")
private external fun kniBridge6459(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6460")
private external fun kniBridge6460(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6461")
private external fun kniBridge6461(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6462")
private external fun kniBridge6462(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6463")
private external fun kniBridge6463(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6464")
private external fun kniBridge6464(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6465")
private external fun kniBridge6465(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6466")
private external fun kniBridge6466(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6467")
private external fun kniBridge6467(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6468")
private external fun kniBridge6468(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6469")
private external fun kniBridge6469(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6470")
private external fun kniBridge6470(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6471")
private external fun kniBridge6471(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6472")
private external fun kniBridge6472(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6473")
private external fun kniBridge6473(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6474")
private external fun kniBridge6474(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6475")
private external fun kniBridge6475(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6476")
private external fun kniBridge6476(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6477")
private external fun kniBridge6477(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6478")
private external fun kniBridge6478(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6479")
private external fun kniBridge6479(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6480")
private external fun kniBridge6480(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6481")
private external fun kniBridge6481(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libgtk3_kniBridge6482")
private external fun kniBridge6482(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6483")
private external fun kniBridge6483(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6484")
private external fun kniBridge6484(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6485")
private external fun kniBridge6485(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6486")
private external fun kniBridge6486(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6487")
private external fun kniBridge6487(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6488")
private external fun kniBridge6488(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6489")
private external fun kniBridge6489(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6490")
private external fun kniBridge6490(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6491")
private external fun kniBridge6491(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6492")
private external fun kniBridge6492(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6493")
private external fun kniBridge6493(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6494")
private external fun kniBridge6494(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6495")
private external fun kniBridge6495(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6496")
private external fun kniBridge6496(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6497")
private external fun kniBridge6497(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: ULong, p6: NativePtr): Int
@SymbolName("libgtk3_kniBridge6498")
private external fun kniBridge6498(): ULong
@SymbolName("libgtk3_kniBridge6499")
private external fun kniBridge6499(): NativePtr
@SymbolName("libgtk3_kniBridge6500")
private external fun kniBridge6500(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6501")
private external fun kniBridge6501(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6502")
private external fun kniBridge6502(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6503")
private external fun kniBridge6503(p0: NativePtr, p1: NativePtr, p2: Double, p3: Int, p4: Double, p5: Double): Int
@SymbolName("libgtk3_kniBridge6504")
private external fun kniBridge6504(p0: NativePtr, p1: NativePtr, p2: Double, p3: Int, p4: Double, p5: Double): Unit
@SymbolName("libgtk3_kniBridge6505")
private external fun kniBridge6505(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6506")
private external fun kniBridge6506(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6507")
private external fun kniBridge6507(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6508")
private external fun kniBridge6508(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6509")
private external fun kniBridge6509(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6510")
private external fun kniBridge6510(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6511")
private external fun kniBridge6511(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6512")
private external fun kniBridge6512(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6513")
private external fun kniBridge6513(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6514")
private external fun kniBridge6514(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libgtk3_kniBridge6515")
private external fun kniBridge6515(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libgtk3_kniBridge6516")
private external fun kniBridge6516(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6517")
private external fun kniBridge6517(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6518")
private external fun kniBridge6518(p0: NativePtr, p1: UInt, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6519")
private external fun kniBridge6519(p0: NativePtr, p1: UInt, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6520")
private external fun kniBridge6520(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6521")
private external fun kniBridge6521(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6522")
private external fun kniBridge6522(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge6523")
private external fun kniBridge6523(p0: NativePtr, p1: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6524")
private external fun kniBridge6524(p0: NativePtr, p1: UInt, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6525")
private external fun kniBridge6525(p0: NativePtr, p1: UInt): Int
@SymbolName("libgtk3_kniBridge6526")
private external fun kniBridge6526(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6527")
private external fun kniBridge6527(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6528")
private external fun kniBridge6528(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6529")
private external fun kniBridge6529(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6530")
private external fun kniBridge6530(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6531")
private external fun kniBridge6531(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libgtk3_kniBridge6532")
private external fun kniBridge6532(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6533")
private external fun kniBridge6533(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6534")
private external fun kniBridge6534(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6535")
private external fun kniBridge6535(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Int): Unit
@SymbolName("libgtk3_kniBridge6536")
private external fun kniBridge6536(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6537")
private external fun kniBridge6537(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6538")
private external fun kniBridge6538(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6539")
private external fun kniBridge6539(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6540")
private external fun kniBridge6540(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6541")
private external fun kniBridge6541(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6542")
private external fun kniBridge6542(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6543")
private external fun kniBridge6543(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6544")
private external fun kniBridge6544(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6545")
private external fun kniBridge6545(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6546")
private external fun kniBridge6546(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6547")
private external fun kniBridge6547(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6548")
private external fun kniBridge6548(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6549")
private external fun kniBridge6549(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6550")
private external fun kniBridge6550(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6551")
private external fun kniBridge6551(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6552")
private external fun kniBridge6552(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6553")
private external fun kniBridge6553(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6554")
private external fun kniBridge6554(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6555")
private external fun kniBridge6555(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6556")
private external fun kniBridge6556(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6557")
private external fun kniBridge6557(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6558")
private external fun kniBridge6558(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6559")
private external fun kniBridge6559(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6560")
private external fun kniBridge6560(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6561")
private external fun kniBridge6561(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6562")
private external fun kniBridge6562(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6563")
private external fun kniBridge6563(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6564")
private external fun kniBridge6564(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6565")
private external fun kniBridge6565(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6566")
private external fun kniBridge6566(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6567")
private external fun kniBridge6567(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6568")
private external fun kniBridge6568(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6569")
private external fun kniBridge6569(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6570")
private external fun kniBridge6570(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6571")
private external fun kniBridge6571(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6572")
private external fun kniBridge6572(): ULong
@SymbolName("libgtk3_kniBridge6573")
private external fun kniBridge6573(): NativePtr
@SymbolName("libgtk3_kniBridge6574")
private external fun kniBridge6574(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6575")
private external fun kniBridge6575(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6576")
private external fun kniBridge6576(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6577")
private external fun kniBridge6577(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6578")
private external fun kniBridge6578(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6579")
private external fun kniBridge6579(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6580")
private external fun kniBridge6580(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6581")
private external fun kniBridge6581(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6582")
private external fun kniBridge6582(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6583")
private external fun kniBridge6583(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6584")
private external fun kniBridge6584(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6585")
private external fun kniBridge6585(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6586")
private external fun kniBridge6586(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6587")
private external fun kniBridge6587(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libgtk3_kniBridge6588")
private external fun kniBridge6588(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6589")
private external fun kniBridge6589(): ULong
@SymbolName("libgtk3_kniBridge6590")
private external fun kniBridge6590(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6591")
private external fun kniBridge6591(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6592")
private external fun kniBridge6592(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6593")
private external fun kniBridge6593(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6594")
private external fun kniBridge6594(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6595")
private external fun kniBridge6595(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6596")
private external fun kniBridge6596(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6597")
private external fun kniBridge6597(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6598")
private external fun kniBridge6598(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6599")
private external fun kniBridge6599(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6600")
private external fun kniBridge6600(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6601")
private external fun kniBridge6601(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6602")
private external fun kniBridge6602(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6603")
private external fun kniBridge6603(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6604")
private external fun kniBridge6604(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6605")
private external fun kniBridge6605(p0: NativePtr, p1: UInt): NativePtr
@SymbolName("libgtk3_kniBridge6606")
private external fun kniBridge6606(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge6607")
private external fun kniBridge6607(): ULong
@SymbolName("libgtk3_kniBridge6608")
private external fun kniBridge6608(): NativePtr
@SymbolName("libgtk3_kniBridge6609")
private external fun kniBridge6609(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6610")
private external fun kniBridge6610(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6611")
private external fun kniBridge6611(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libgtk3_kniBridge6612")
private external fun kniBridge6612(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6613")
private external fun kniBridge6613(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6614")
private external fun kniBridge6614(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6615")
private external fun kniBridge6615(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6616")
private external fun kniBridge6616(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6617")
private external fun kniBridge6617(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6618")
private external fun kniBridge6618(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6619")
private external fun kniBridge6619(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6620")
private external fun kniBridge6620(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6621")
private external fun kniBridge6621(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge6622")
private external fun kniBridge6622(p0: NativePtr, p1: Int, p2: Int): NativePtr
@SymbolName("libgtk3_kniBridge6623")
private external fun kniBridge6623(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6624")
private external fun kniBridge6624(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6625")
private external fun kniBridge6625(p0: NativePtr, p1: NativePtr, p2: UInt, p3: UInt, p4: UInt): Unit
@SymbolName("libgtk3_kniBridge6626")
private external fun kniBridge6626(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6627")
private external fun kniBridge6627(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6628")
private external fun kniBridge6628(): NativePtr
@SymbolName("libgtk3_kniBridge6629")
private external fun kniBridge6629(): NativePtr
@SymbolName("libgtk3_kniBridge6630")
private external fun kniBridge6630(): ULong
@SymbolName("libgtk3_kniBridge6631")
private external fun kniBridge6631(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6632")
private external fun kniBridge6632(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6633")
private external fun kniBridge6633(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6634")
private external fun kniBridge6634(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6635")
private external fun kniBridge6635(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6636")
private external fun kniBridge6636(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6637")
private external fun kniBridge6637(p0: NativePtr): Float
@SymbolName("libgtk3_kniBridge6638")
private external fun kniBridge6638(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6639")
private external fun kniBridge6639(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6640")
private external fun kniBridge6640(): Unit
@SymbolName("libgtk3_kniBridge6641")
private external fun kniBridge6641(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6642")
private external fun kniBridge6642(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libgtk3_kniBridge6643")
private external fun kniBridge6643(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6644")
private external fun kniBridge6644(p0: NativePtr, p1: Double): Unit
@SymbolName("libgtk3_kniBridge6645")
private external fun kniBridge6645(p0: NativePtr): Double
@SymbolName("libgtk3_kniBridge6646")
private external fun kniBridge6646(p0: NativePtr, p1: UInt, p2: Int): Int
@SymbolName("libgtk3_kniBridge6647")
private external fun kniBridge6647(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6648")
private external fun kniBridge6648(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libgtk3_kniBridge6649")
private external fun kniBridge6649(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libgtk3_kniBridge6650")
private external fun kniBridge6650(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6651")
private external fun kniBridge6651(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6652")
private external fun kniBridge6652(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libgtk3_kniBridge6653")
private external fun kniBridge6653(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6654")
private external fun kniBridge6654(): ULong
@SymbolName("libgtk3_kniBridge6655")
private external fun kniBridge6655(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6656")
private external fun kniBridge6656(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6657")
private external fun kniBridge6657(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6658")
private external fun kniBridge6658(): ULong
@SymbolName("libgtk3_kniBridge6659")
private external fun kniBridge6659(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6660")
private external fun kniBridge6660(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6661")
private external fun kniBridge6661(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6662")
private external fun kniBridge6662(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6663")
private external fun kniBridge6663(): ULong
@SymbolName("libgtk3_kniBridge6664")
private external fun kniBridge6664(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6665")
private external fun kniBridge6665(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6666")
private external fun kniBridge6666(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6667")
private external fun kniBridge6667(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6668")
private external fun kniBridge6668(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6669")
private external fun kniBridge6669(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6670")
private external fun kniBridge6670(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6671")
private external fun kniBridge6671(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6672")
private external fun kniBridge6672(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6673")
private external fun kniBridge6673(): ULong
@SymbolName("libgtk3_kniBridge6674")
private external fun kniBridge6674(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6675")
private external fun kniBridge6675(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6676")
private external fun kniBridge6676(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6677")
private external fun kniBridge6677(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6678")
private external fun kniBridge6678(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6679")
private external fun kniBridge6679(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6680")
private external fun kniBridge6680(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6681")
private external fun kniBridge6681(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6682")
private external fun kniBridge6682(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6683")
private external fun kniBridge6683(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6684")
private external fun kniBridge6684(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6685")
private external fun kniBridge6685(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6686")
private external fun kniBridge6686(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6687")
private external fun kniBridge6687(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6688")
private external fun kniBridge6688(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6689")
private external fun kniBridge6689(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6690")
private external fun kniBridge6690(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6691")
private external fun kniBridge6691(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6692")
private external fun kniBridge6692(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6693")
private external fun kniBridge6693(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6694")
private external fun kniBridge6694(): ULong
@SymbolName("libgtk3_kniBridge6695")
private external fun kniBridge6695(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6696")
private external fun kniBridge6696(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6697")
private external fun kniBridge6697(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6698")
private external fun kniBridge6698(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Unit
@SymbolName("libgtk3_kniBridge6699")
private external fun kniBridge6699(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6700")
private external fun kniBridge6700(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6701")
private external fun kniBridge6701(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libgtk3_kniBridge6702")
private external fun kniBridge6702(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6703")
private external fun kniBridge6703(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6704")
private external fun kniBridge6704(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: Int): Unit
@SymbolName("libgtk3_kniBridge6705")
private external fun kniBridge6705(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6706")
private external fun kniBridge6706(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6707")
private external fun kniBridge6707(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6708")
private external fun kniBridge6708(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6709")
private external fun kniBridge6709(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6710")
private external fun kniBridge6710(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6711")
private external fun kniBridge6711(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6712")
private external fun kniBridge6712(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6713")
private external fun kniBridge6713(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6714")
private external fun kniBridge6714(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6715")
private external fun kniBridge6715(): ULong
@SymbolName("libgtk3_kniBridge6716")
private external fun kniBridge6716(): ULong
@SymbolName("libgtk3_kniBridge6717")
private external fun kniBridge6717(): ULong
@SymbolName("libgtk3_kniBridge6718")
private external fun kniBridge6718(): ULong
@SymbolName("libgtk3_kniBridge6719")
private external fun kniBridge6719(): ULong
@SymbolName("libgtk3_kniBridge6720")
private external fun kniBridge6720(): ULong
@SymbolName("libgtk3_kniBridge6721")
private external fun kniBridge6721(): ULong
@SymbolName("libgtk3_kniBridge6722")
private external fun kniBridge6722(): ULong
@SymbolName("libgtk3_kniBridge6723")
private external fun kniBridge6723(): ULong
@SymbolName("libgtk3_kniBridge6724")
private external fun kniBridge6724(): ULong
@SymbolName("libgtk3_kniBridge6725")
private external fun kniBridge6725(): ULong
@SymbolName("libgtk3_kniBridge6726")
private external fun kniBridge6726(): ULong
@SymbolName("libgtk3_kniBridge6727")
private external fun kniBridge6727(): ULong
@SymbolName("libgtk3_kniBridge6728")
private external fun kniBridge6728(): ULong
@SymbolName("libgtk3_kniBridge6729")
private external fun kniBridge6729(): ULong
@SymbolName("libgtk3_kniBridge6730")
private external fun kniBridge6730(): ULong
@SymbolName("libgtk3_kniBridge6731")
private external fun kniBridge6731(): ULong
@SymbolName("libgtk3_kniBridge6732")
private external fun kniBridge6732(): ULong
@SymbolName("libgtk3_kniBridge6733")
private external fun kniBridge6733(): ULong
@SymbolName("libgtk3_kniBridge6734")
private external fun kniBridge6734(): ULong
@SymbolName("libgtk3_kniBridge6735")
private external fun kniBridge6735(): ULong
@SymbolName("libgtk3_kniBridge6736")
private external fun kniBridge6736(): ULong
@SymbolName("libgtk3_kniBridge6737")
private external fun kniBridge6737(): ULong
@SymbolName("libgtk3_kniBridge6738")
private external fun kniBridge6738(): ULong
@SymbolName("libgtk3_kniBridge6739")
private external fun kniBridge6739(): ULong
@SymbolName("libgtk3_kniBridge6740")
private external fun kniBridge6740(): ULong
@SymbolName("libgtk3_kniBridge6741")
private external fun kniBridge6741(): ULong
@SymbolName("libgtk3_kniBridge6742")
private external fun kniBridge6742(): ULong
@SymbolName("libgtk3_kniBridge6743")
private external fun kniBridge6743(): ULong
@SymbolName("libgtk3_kniBridge6744")
private external fun kniBridge6744(): ULong
@SymbolName("libgtk3_kniBridge6745")
private external fun kniBridge6745(): ULong
@SymbolName("libgtk3_kniBridge6746")
private external fun kniBridge6746(): ULong
@SymbolName("libgtk3_kniBridge6747")
private external fun kniBridge6747(): ULong
@SymbolName("libgtk3_kniBridge6748")
private external fun kniBridge6748(): ULong
@SymbolName("libgtk3_kniBridge6749")
private external fun kniBridge6749(): ULong
@SymbolName("libgtk3_kniBridge6750")
private external fun kniBridge6750(): ULong
@SymbolName("libgtk3_kniBridge6751")
private external fun kniBridge6751(): ULong
@SymbolName("libgtk3_kniBridge6752")
private external fun kniBridge6752(): ULong
@SymbolName("libgtk3_kniBridge6753")
private external fun kniBridge6753(): ULong
@SymbolName("libgtk3_kniBridge6754")
private external fun kniBridge6754(): ULong
@SymbolName("libgtk3_kniBridge6755")
private external fun kniBridge6755(): ULong
@SymbolName("libgtk3_kniBridge6756")
private external fun kniBridge6756(): ULong
@SymbolName("libgtk3_kniBridge6757")
private external fun kniBridge6757(): ULong
@SymbolName("libgtk3_kniBridge6758")
private external fun kniBridge6758(): ULong
@SymbolName("libgtk3_kniBridge6759")
private external fun kniBridge6759(): ULong
@SymbolName("libgtk3_kniBridge6760")
private external fun kniBridge6760(): ULong
@SymbolName("libgtk3_kniBridge6761")
private external fun kniBridge6761(): ULong
@SymbolName("libgtk3_kniBridge6762")
private external fun kniBridge6762(): ULong
@SymbolName("libgtk3_kniBridge6763")
private external fun kniBridge6763(): ULong
@SymbolName("libgtk3_kniBridge6764")
private external fun kniBridge6764(): ULong
@SymbolName("libgtk3_kniBridge6765")
private external fun kniBridge6765(): ULong
@SymbolName("libgtk3_kniBridge6766")
private external fun kniBridge6766(): ULong
@SymbolName("libgtk3_kniBridge6767")
private external fun kniBridge6767(): ULong
@SymbolName("libgtk3_kniBridge6768")
private external fun kniBridge6768(): ULong
@SymbolName("libgtk3_kniBridge6769")
private external fun kniBridge6769(): ULong
@SymbolName("libgtk3_kniBridge6770")
private external fun kniBridge6770(): ULong
@SymbolName("libgtk3_kniBridge6771")
private external fun kniBridge6771(): ULong
@SymbolName("libgtk3_kniBridge6772")
private external fun kniBridge6772(): ULong
@SymbolName("libgtk3_kniBridge6773")
private external fun kniBridge6773(): ULong
@SymbolName("libgtk3_kniBridge6774")
private external fun kniBridge6774(): ULong
@SymbolName("libgtk3_kniBridge6775")
private external fun kniBridge6775(): ULong
@SymbolName("libgtk3_kniBridge6776")
private external fun kniBridge6776(): ULong
@SymbolName("libgtk3_kniBridge6777")
private external fun kniBridge6777(): ULong
@SymbolName("libgtk3_kniBridge6778")
private external fun kniBridge6778(): ULong
@SymbolName("libgtk3_kniBridge6779")
private external fun kniBridge6779(): ULong
@SymbolName("libgtk3_kniBridge6780")
private external fun kniBridge6780(): ULong
@SymbolName("libgtk3_kniBridge6781")
private external fun kniBridge6781(): ULong
@SymbolName("libgtk3_kniBridge6782")
private external fun kniBridge6782(): ULong
@SymbolName("libgtk3_kniBridge6783")
private external fun kniBridge6783(): ULong
@SymbolName("libgtk3_kniBridge6784")
private external fun kniBridge6784(): ULong
@SymbolName("libgtk3_kniBridge6785")
private external fun kniBridge6785(): ULong
@SymbolName("libgtk3_kniBridge6786")
private external fun kniBridge6786(): ULong
@SymbolName("libgtk3_kniBridge6787")
private external fun kniBridge6787(): ULong
@SymbolName("libgtk3_kniBridge6788")
private external fun kniBridge6788(): ULong
@SymbolName("libgtk3_kniBridge6789")
private external fun kniBridge6789(): ULong
@SymbolName("libgtk3_kniBridge6790")
private external fun kniBridge6790(): ULong
@SymbolName("libgtk3_kniBridge6791")
private external fun kniBridge6791(): ULong
@SymbolName("libgtk3_kniBridge6792")
private external fun kniBridge6792(): ULong
@SymbolName("libgtk3_kniBridge6793")
private external fun kniBridge6793(): ULong
@SymbolName("libgtk3_kniBridge6794")
private external fun kniBridge6794(): ULong
@SymbolName("libgtk3_kniBridge6795")
private external fun kniBridge6795(): ULong
@SymbolName("libgtk3_kniBridge6796")
private external fun kniBridge6796(): ULong
@SymbolName("libgtk3_kniBridge6797")
private external fun kniBridge6797(): ULong
@SymbolName("libgtk3_kniBridge6798")
private external fun kniBridge6798(): ULong
@SymbolName("libgtk3_kniBridge6799")
private external fun kniBridge6799(): ULong
@SymbolName("libgtk3_kniBridge6800")
private external fun kniBridge6800(): ULong
@SymbolName("libgtk3_kniBridge6801")
private external fun kniBridge6801(): ULong
@SymbolName("libgtk3_kniBridge6802")
private external fun kniBridge6802(): ULong
@SymbolName("libgtk3_kniBridge6803")
private external fun kniBridge6803(): ULong
@SymbolName("libgtk3_kniBridge6804")
private external fun kniBridge6804(): ULong
@SymbolName("libgtk3_kniBridge6805")
private external fun kniBridge6805(): ULong
@SymbolName("libgtk3_kniBridge6806")
private external fun kniBridge6806(): ULong
@SymbolName("libgtk3_kniBridge6807")
private external fun kniBridge6807(): ULong
@SymbolName("libgtk3_kniBridge6808")
private external fun kniBridge6808(): ULong
@SymbolName("libgtk3_kniBridge6809")
private external fun kniBridge6809(): ULong
@SymbolName("libgtk3_kniBridge6810")
private external fun kniBridge6810(): ULong
@SymbolName("libgtk3_kniBridge6811")
private external fun kniBridge6811(): ULong
@SymbolName("libgtk3_kniBridge6812")
private external fun kniBridge6812(): ULong
@SymbolName("libgtk3_kniBridge6813")
private external fun kniBridge6813(): ULong
@SymbolName("libgtk3_kniBridge6814")
private external fun kniBridge6814(): ULong
@SymbolName("libgtk3_kniBridge6815")
private external fun kniBridge6815(): ULong
@SymbolName("libgtk3_kniBridge6816")
private external fun kniBridge6816(): ULong
@SymbolName("libgtk3_kniBridge6817")
private external fun kniBridge6817(): ULong
@SymbolName("libgtk3_kniBridge6818")
private external fun kniBridge6818(): ULong
@SymbolName("libgtk3_kniBridge6819")
private external fun kniBridge6819(): ULong
@SymbolName("libgtk3_kniBridge6820")
private external fun kniBridge6820(): ULong
@SymbolName("libgtk3_kniBridge6821")
private external fun kniBridge6821(): ULong
@SymbolName("libgtk3_kniBridge6822")
private external fun kniBridge6822(): ULong
@SymbolName("libgtk3_kniBridge6823")
private external fun kniBridge6823(): ULong
@SymbolName("libgtk3_kniBridge6824")
private external fun kniBridge6824(): ULong
@SymbolName("libgtk3_kniBridge6825")
private external fun kniBridge6825(): ULong
@SymbolName("libgtk3_kniBridge6826")
private external fun kniBridge6826(): ULong
@SymbolName("libgtk3_kniBridge6827")
private external fun kniBridge6827(): ULong
@SymbolName("libgtk3_kniBridge6828")
private external fun kniBridge6828(): ULong
@SymbolName("libgtk3_kniBridge6829")
private external fun kniBridge6829(): ULong
@SymbolName("libgtk3_kniBridge6830")
private external fun kniBridge6830(): ULong
@SymbolName("libgtk3_kniBridge6831")
private external fun kniBridge6831(): ULong
@SymbolName("libgtk3_kniBridge6832")
private external fun kniBridge6832(): ULong
@SymbolName("libgtk3_kniBridge6833")
private external fun kniBridge6833(): ULong
@SymbolName("libgtk3_kniBridge6834")
private external fun kniBridge6834(): ULong
@SymbolName("libgtk3_kniBridge6835")
private external fun kniBridge6835(): ULong
@SymbolName("libgtk3_kniBridge6836")
private external fun kniBridge6836(): ULong
@SymbolName("libgtk3_kniBridge6837")
private external fun kniBridge6837(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6838")
private external fun kniBridge6838(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6839")
private external fun kniBridge6839(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6840")
private external fun kniBridge6840(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6841")
private external fun kniBridge6841(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6842")
private external fun kniBridge6842(p0: NativePtr, p1: UInt): Unit
@SymbolName("libgtk3_kniBridge6843")
private external fun kniBridge6843(p0: NativePtr): UInt
@SymbolName("libgtk3_kniBridge6844")
private external fun kniBridge6844(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6845")
private external fun kniBridge6845(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6846")
private external fun kniBridge6846(): ULong
@SymbolName("libgtk3_kniBridge6847")
private external fun kniBridge6847(): NativePtr
@SymbolName("libgtk3_kniBridge6848")
private external fun kniBridge6848(): ULong
@SymbolName("libgtk3_kniBridge6849")
private external fun kniBridge6849(): NativePtr
@SymbolName("libgtk3_kniBridge6850")
private external fun kniBridge6850(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6851")
private external fun kniBridge6851(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6852")
private external fun kniBridge6852(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6853")
private external fun kniBridge6853(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6854")
private external fun kniBridge6854(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6855")
private external fun kniBridge6855(p0: NativePtr): Int
@SymbolName("libgtk3_kniBridge6856")
private external fun kniBridge6856(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge6857")
private external fun kniBridge6857(p0: NativePtr, p1: ULong): Unit
@SymbolName("libgtk3_kniBridge6858")
private external fun kniBridge6858(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libgtk3_kniBridge6859")
private external fun kniBridge6859(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libgtk3_kniBridge6860")
private external fun kniBridge6860(p0: NativePtr, p1: Int): ULong
@SymbolName("libgtk3_kniBridge6861")
private external fun kniBridge6861(p0: NativePtr, p1: Int, p2: ULong): Unit
@SymbolName("libgtk3_kniBridge6862")
private external fun kniBridge6862(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6863")
private external fun kniBridge6863(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6864")
private external fun kniBridge6864(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6865")
private external fun kniBridge6865(p0: NativePtr, p1: Int): UInt
@SymbolName("libgtk3_kniBridge6866")
private external fun kniBridge6866(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6867")
private external fun kniBridge6867(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6868")
private external fun kniBridge6868(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6869")
private external fun kniBridge6869(p0: NativePtr, p1: Int, p2: UInt): Int
@SymbolName("libgtk3_kniBridge6870")
private external fun kniBridge6870(p0: NativePtr, p1: Int): UInt
@SymbolName("libgtk3_kniBridge6871")
private external fun kniBridge6871(p0: NativePtr, p1: Int, p2: UInt): Unit
@SymbolName("libgtk3_kniBridge6872")
private external fun kniBridge6872(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6873")
private external fun kniBridge6873(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6874")
private external fun kniBridge6874(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6875")
private external fun kniBridge6875(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6876")
private external fun kniBridge6876(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libgtk3_kniBridge6877")
private external fun kniBridge6877(p0: NativePtr, p1: Int, p2: UInt): Int
@SymbolName("libgtk3_kniBridge6878")
private external fun kniBridge6878(p0: NativePtr, p1: Int, p2: NativePtr, p3: UInt): Unit
@SymbolName("libgtk3_kniBridge6879")
private external fun kniBridge6879(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6880")
private external fun kniBridge6880(p0: NativePtr, p1: Int): Unit
@SymbolName("libgtk3_kniBridge6881")
private external fun kniBridge6881(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libgtk3_kniBridge6882")
private external fun kniBridge6882(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge6883")
private external fun kniBridge6883(p0: NativePtr, p1: Int, p2: UInt, p3: NativePtr): Int
@SymbolName("libgtk3_kniBridge6884")
private external fun kniBridge6884(p0: NativePtr): ULong
@SymbolName("libgtk3_kniBridge6885")
private external fun kniBridge6885(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge6886")
private external fun kniBridge6886(p0: NativePtr, p1: ULong): Int
@SymbolName("libgtk3_kniBridge6887")
private external fun kniBridge6887(): ULong
@SymbolName("libgtk3_kniBridge6888")
private external fun kniBridge6888(): NativePtr
@SymbolName("libgtk3_kniBridge6889")
private external fun kniBridge6889(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6890")
private external fun kniBridge6890(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6891")
private external fun kniBridge6891(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6892")
private external fun kniBridge6892(p0: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6893")
private external fun kniBridge6893(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libgtk3_kniBridge6894")
private external fun kniBridge6894(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6895")
private external fun kniBridge6895(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6896")
private external fun kniBridge6896(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6897")
private external fun kniBridge6897(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6898")
private external fun kniBridge6898(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6899")
private external fun kniBridge6899(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6900")
private external fun kniBridge6900(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6901")
private external fun kniBridge6901(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6902")
private external fun kniBridge6902(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6903")
private external fun kniBridge6903(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6904")
private external fun kniBridge6904(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6905")
private external fun kniBridge6905(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6906")
private external fun kniBridge6906(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6907")
private external fun kniBridge6907(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6908")
private external fun kniBridge6908(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6909")
private external fun kniBridge6909(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6910")
private external fun kniBridge6910(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6911")
private external fun kniBridge6911(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6912")
private external fun kniBridge6912(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6913")
private external fun kniBridge6913(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6914")
private external fun kniBridge6914(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6915")
private external fun kniBridge6915(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6916")
private external fun kniBridge6916(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6917")
private external fun kniBridge6917(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6918")
private external fun kniBridge6918(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6919")
private external fun kniBridge6919(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6920")
private external fun kniBridge6920(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6921")
private external fun kniBridge6921(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6922")
private external fun kniBridge6922(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6923")
private external fun kniBridge6923(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6924")
private external fun kniBridge6924(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6925")
private external fun kniBridge6925(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6926")
private external fun kniBridge6926(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6927")
private external fun kniBridge6927(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6928")
private external fun kniBridge6928(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6929")
private external fun kniBridge6929(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6930")
private external fun kniBridge6930(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6931")
private external fun kniBridge6931(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6932")
private external fun kniBridge6932(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6933")
private external fun kniBridge6933(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6934")
private external fun kniBridge6934(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6935")
private external fun kniBridge6935(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6936")
private external fun kniBridge6936(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6937")
private external fun kniBridge6937(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6938")
private external fun kniBridge6938(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6939")
private external fun kniBridge6939(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6940")
private external fun kniBridge6940(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6941")
private external fun kniBridge6941(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6942")
private external fun kniBridge6942(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6943")
private external fun kniBridge6943(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6944")
private external fun kniBridge6944(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6945")
private external fun kniBridge6945(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6946")
private external fun kniBridge6946(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6947")
private external fun kniBridge6947(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6948")
private external fun kniBridge6948(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6949")
private external fun kniBridge6949(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6950")
private external fun kniBridge6950(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6951")
private external fun kniBridge6951(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6952")
private external fun kniBridge6952(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6953")
private external fun kniBridge6953(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6954")
private external fun kniBridge6954(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6955")
private external fun kniBridge6955(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6956")
private external fun kniBridge6956(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6957")
private external fun kniBridge6957(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6958")
private external fun kniBridge6958(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6959")
private external fun kniBridge6959(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6960")
private external fun kniBridge6960(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6961")
private external fun kniBridge6961(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6962")
private external fun kniBridge6962(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6963")
private external fun kniBridge6963(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6964")
private external fun kniBridge6964(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6965")
private external fun kniBridge6965(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6966")
private external fun kniBridge6966(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6967")
private external fun kniBridge6967(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6968")
private external fun kniBridge6968(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6969")
private external fun kniBridge6969(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6970")
private external fun kniBridge6970(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6971")
private external fun kniBridge6971(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6972")
private external fun kniBridge6972(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6973")
private external fun kniBridge6973(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6974")
private external fun kniBridge6974(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6975")
private external fun kniBridge6975(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6976")
private external fun kniBridge6976(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6977")
private external fun kniBridge6977(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6978")
private external fun kniBridge6978(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6979")
private external fun kniBridge6979(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6980")
private external fun kniBridge6980(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6981")
private external fun kniBridge6981(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6982")
private external fun kniBridge6982(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6983")
private external fun kniBridge6983(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6984")
private external fun kniBridge6984(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6985")
private external fun kniBridge6985(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6986")
private external fun kniBridge6986(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6987")
private external fun kniBridge6987(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6988")
private external fun kniBridge6988(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6989")
private external fun kniBridge6989(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6990")
private external fun kniBridge6990(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6991")
private external fun kniBridge6991(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6992")
private external fun kniBridge6992(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6993")
private external fun kniBridge6993(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6994")
private external fun kniBridge6994(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6995")
private external fun kniBridge6995(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6996")
private external fun kniBridge6996(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6997")
private external fun kniBridge6997(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6998")
private external fun kniBridge6998(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge6999")
private external fun kniBridge6999(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7000")
private external fun kniBridge7000(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7001")
private external fun kniBridge7001(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7002")
private external fun kniBridge7002(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7003")
private external fun kniBridge7003(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7004")
private external fun kniBridge7004(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7005")
private external fun kniBridge7005(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7006")
private external fun kniBridge7006(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7007")
private external fun kniBridge7007(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7008")
private external fun kniBridge7008(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7009")
private external fun kniBridge7009(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7010")
private external fun kniBridge7010(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7011")
private external fun kniBridge7011(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7012")
private external fun kniBridge7012(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7013")
private external fun kniBridge7013(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7014")
private external fun kniBridge7014(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7015")
private external fun kniBridge7015(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7016")
private external fun kniBridge7016(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7017")
private external fun kniBridge7017(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7018")
private external fun kniBridge7018(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7019")
private external fun kniBridge7019(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7020")
private external fun kniBridge7020(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7021")
private external fun kniBridge7021(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7022")
private external fun kniBridge7022(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7023")
private external fun kniBridge7023(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7024")
private external fun kniBridge7024(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7025")
private external fun kniBridge7025(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7026")
private external fun kniBridge7026(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7027")
private external fun kniBridge7027(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7028")
private external fun kniBridge7028(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7029")
private external fun kniBridge7029(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7030")
private external fun kniBridge7030(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7031")
private external fun kniBridge7031(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7032")
private external fun kniBridge7032(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7033")
private external fun kniBridge7033(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7034")
private external fun kniBridge7034(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7035")
private external fun kniBridge7035(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7036")
private external fun kniBridge7036(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7037")
private external fun kniBridge7037(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7038")
private external fun kniBridge7038(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7039")
private external fun kniBridge7039(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7040")
private external fun kniBridge7040(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7041")
private external fun kniBridge7041(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7042")
private external fun kniBridge7042(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7043")
private external fun kniBridge7043(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7044")
private external fun kniBridge7044(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7045")
private external fun kniBridge7045(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7046")
private external fun kniBridge7046(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7047")
private external fun kniBridge7047(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7048")
private external fun kniBridge7048(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7049")
private external fun kniBridge7049(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7050")
private external fun kniBridge7050(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7051")
private external fun kniBridge7051(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7052")
private external fun kniBridge7052(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7053")
private external fun kniBridge7053(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7054")
private external fun kniBridge7054(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7055")
private external fun kniBridge7055(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7056")
private external fun kniBridge7056(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7057")
private external fun kniBridge7057(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7058")
private external fun kniBridge7058(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7059")
private external fun kniBridge7059(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7060")
private external fun kniBridge7060(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7061")
private external fun kniBridge7061(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7062")
private external fun kniBridge7062(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7063")
private external fun kniBridge7063(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7064")
private external fun kniBridge7064(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7065")
private external fun kniBridge7065(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7066")
private external fun kniBridge7066(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7067")
private external fun kniBridge7067(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7068")
private external fun kniBridge7068(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7069")
private external fun kniBridge7069(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7070")
private external fun kniBridge7070(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7071")
private external fun kniBridge7071(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7072")
private external fun kniBridge7072(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7073")
private external fun kniBridge7073(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7074")
private external fun kniBridge7074(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7075")
private external fun kniBridge7075(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7076")
private external fun kniBridge7076(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7077")
private external fun kniBridge7077(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7078")
private external fun kniBridge7078(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7079")
private external fun kniBridge7079(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7080")
private external fun kniBridge7080(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7081")
private external fun kniBridge7081(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7082")
private external fun kniBridge7082(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7083")
private external fun kniBridge7083(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7084")
private external fun kniBridge7084(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7085")
private external fun kniBridge7085(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7086")
private external fun kniBridge7086(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7087")
private external fun kniBridge7087(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7088")
private external fun kniBridge7088(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7089")
private external fun kniBridge7089(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7090")
private external fun kniBridge7090(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7091")
private external fun kniBridge7091(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7092")
private external fun kniBridge7092(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7093")
private external fun kniBridge7093(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7094")
private external fun kniBridge7094(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7095")
private external fun kniBridge7095(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7096")
private external fun kniBridge7096(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7097")
private external fun kniBridge7097(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7098")
private external fun kniBridge7098(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7099")
private external fun kniBridge7099(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7100")
private external fun kniBridge7100(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7101")
private external fun kniBridge7101(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7102")
private external fun kniBridge7102(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7103")
private external fun kniBridge7103(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7104")
private external fun kniBridge7104(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7105")
private external fun kniBridge7105(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7106")
private external fun kniBridge7106(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7107")
private external fun kniBridge7107(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7108")
private external fun kniBridge7108(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7109")
private external fun kniBridge7109(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7110")
private external fun kniBridge7110(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7111")
private external fun kniBridge7111(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7112")
private external fun kniBridge7112(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7113")
private external fun kniBridge7113(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7114")
private external fun kniBridge7114(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7115")
private external fun kniBridge7115(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7116")
private external fun kniBridge7116(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7117")
private external fun kniBridge7117(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7118")
private external fun kniBridge7118(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7119")
private external fun kniBridge7119(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7120")
private external fun kniBridge7120(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7121")
private external fun kniBridge7121(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7122")
private external fun kniBridge7122(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7123")
private external fun kniBridge7123(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7124")
private external fun kniBridge7124(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7125")
private external fun kniBridge7125(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7126")
private external fun kniBridge7126(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7127")
private external fun kniBridge7127(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7128")
private external fun kniBridge7128(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7129")
private external fun kniBridge7129(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7130")
private external fun kniBridge7130(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7131")
private external fun kniBridge7131(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7132")
private external fun kniBridge7132(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7133")
private external fun kniBridge7133(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7134")
private external fun kniBridge7134(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7135")
private external fun kniBridge7135(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7136")
private external fun kniBridge7136(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7137")
private external fun kniBridge7137(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7138")
private external fun kniBridge7138(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7139")
private external fun kniBridge7139(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7140")
private external fun kniBridge7140(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7141")
private external fun kniBridge7141(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7142")
private external fun kniBridge7142(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7143")
private external fun kniBridge7143(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7144")
private external fun kniBridge7144(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7145")
private external fun kniBridge7145(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7146")
private external fun kniBridge7146(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7147")
private external fun kniBridge7147(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7148")
private external fun kniBridge7148(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7149")
private external fun kniBridge7149(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7150")
private external fun kniBridge7150(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7151")
private external fun kniBridge7151(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7152")
private external fun kniBridge7152(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7153")
private external fun kniBridge7153(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7154")
private external fun kniBridge7154(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7155")
private external fun kniBridge7155(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7156")
private external fun kniBridge7156(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7157")
private external fun kniBridge7157(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7158")
private external fun kniBridge7158(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7159")
private external fun kniBridge7159(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7160")
private external fun kniBridge7160(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7161")
private external fun kniBridge7161(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7162")
private external fun kniBridge7162(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7163")
private external fun kniBridge7163(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7164")
private external fun kniBridge7164(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7165")
private external fun kniBridge7165(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7166")
private external fun kniBridge7166(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7167")
private external fun kniBridge7167(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7168")
private external fun kniBridge7168(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7169")
private external fun kniBridge7169(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7170")
private external fun kniBridge7170(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7171")
private external fun kniBridge7171(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7172")
private external fun kniBridge7172(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7173")
private external fun kniBridge7173(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7174")
private external fun kniBridge7174(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7175")
private external fun kniBridge7175(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7176")
private external fun kniBridge7176(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7177")
private external fun kniBridge7177(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7178")
private external fun kniBridge7178(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7179")
private external fun kniBridge7179(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7180")
private external fun kniBridge7180(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7181")
private external fun kniBridge7181(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7182")
private external fun kniBridge7182(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7183")
private external fun kniBridge7183(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7184")
private external fun kniBridge7184(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7185")
private external fun kniBridge7185(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7186")
private external fun kniBridge7186(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7187")
private external fun kniBridge7187(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7188")
private external fun kniBridge7188(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7189")
private external fun kniBridge7189(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7190")
private external fun kniBridge7190(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7191")
private external fun kniBridge7191(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7192")
private external fun kniBridge7192(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7193")
private external fun kniBridge7193(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7194")
private external fun kniBridge7194(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7195")
private external fun kniBridge7195(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7196")
private external fun kniBridge7196(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7197")
private external fun kniBridge7197(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7198")
private external fun kniBridge7198(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7199")
private external fun kniBridge7199(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7200")
private external fun kniBridge7200(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7201")
private external fun kniBridge7201(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7202")
private external fun kniBridge7202(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7203")
private external fun kniBridge7203(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7204")
private external fun kniBridge7204(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7205")
private external fun kniBridge7205(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7206")
private external fun kniBridge7206(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7207")
private external fun kniBridge7207(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7208")
private external fun kniBridge7208(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7209")
private external fun kniBridge7209(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7210")
private external fun kniBridge7210(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7211")
private external fun kniBridge7211(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7212")
private external fun kniBridge7212(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7213")
private external fun kniBridge7213(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7214")
private external fun kniBridge7214(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7215")
private external fun kniBridge7215(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7216")
private external fun kniBridge7216(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7217")
private external fun kniBridge7217(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7218")
private external fun kniBridge7218(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7219")
private external fun kniBridge7219(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7220")
private external fun kniBridge7220(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7221")
private external fun kniBridge7221(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7222")
private external fun kniBridge7222(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7223")
private external fun kniBridge7223(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7224")
private external fun kniBridge7224(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7225")
private external fun kniBridge7225(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7226")
private external fun kniBridge7226(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7227")
private external fun kniBridge7227(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7228")
private external fun kniBridge7228(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7229")
private external fun kniBridge7229(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7230")
private external fun kniBridge7230(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7231")
private external fun kniBridge7231(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7232")
private external fun kniBridge7232(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7233")
private external fun kniBridge7233(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7234")
private external fun kniBridge7234(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7235")
private external fun kniBridge7235(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7236")
private external fun kniBridge7236(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7237")
private external fun kniBridge7237(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7238")
private external fun kniBridge7238(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7239")
private external fun kniBridge7239(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7240")
private external fun kniBridge7240(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7241")
private external fun kniBridge7241(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7242")
private external fun kniBridge7242(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7243")
private external fun kniBridge7243(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7244")
private external fun kniBridge7244(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7245")
private external fun kniBridge7245(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7246")
private external fun kniBridge7246(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7247")
private external fun kniBridge7247(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7248")
private external fun kniBridge7248(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7249")
private external fun kniBridge7249(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7250")
private external fun kniBridge7250(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7251")
private external fun kniBridge7251(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7252")
private external fun kniBridge7252(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7253")
private external fun kniBridge7253(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7254")
private external fun kniBridge7254(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7255")
private external fun kniBridge7255(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7256")
private external fun kniBridge7256(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7257")
private external fun kniBridge7257(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7258")
private external fun kniBridge7258(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7259")
private external fun kniBridge7259(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7260")
private external fun kniBridge7260(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7261")
private external fun kniBridge7261(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7262")
private external fun kniBridge7262(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7263")
private external fun kniBridge7263(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7264")
private external fun kniBridge7264(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7265")
private external fun kniBridge7265(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7266")
private external fun kniBridge7266(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7267")
private external fun kniBridge7267(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7268")
private external fun kniBridge7268(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7269")
private external fun kniBridge7269(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7270")
private external fun kniBridge7270(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7271")
private external fun kniBridge7271(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7272")
private external fun kniBridge7272(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7273")
private external fun kniBridge7273(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7274")
private external fun kniBridge7274(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7275")
private external fun kniBridge7275(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7276")
private external fun kniBridge7276(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7277")
private external fun kniBridge7277(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7278")
private external fun kniBridge7278(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7279")
private external fun kniBridge7279(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7280")
private external fun kniBridge7280(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7281")
private external fun kniBridge7281(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7282")
private external fun kniBridge7282(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7283")
private external fun kniBridge7283(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7284")
private external fun kniBridge7284(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7285")
private external fun kniBridge7285(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7286")
private external fun kniBridge7286(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7287")
private external fun kniBridge7287(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7288")
private external fun kniBridge7288(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7289")
private external fun kniBridge7289(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7290")
private external fun kniBridge7290(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7291")
private external fun kniBridge7291(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7292")
private external fun kniBridge7292(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7293")
private external fun kniBridge7293(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7294")
private external fun kniBridge7294(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7295")
private external fun kniBridge7295(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7296")
private external fun kniBridge7296(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7297")
private external fun kniBridge7297(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7298")
private external fun kniBridge7298(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7299")
private external fun kniBridge7299(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7300")
private external fun kniBridge7300(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7301")
private external fun kniBridge7301(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7302")
private external fun kniBridge7302(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7303")
private external fun kniBridge7303(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7304")
private external fun kniBridge7304(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7305")
private external fun kniBridge7305(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7306")
private external fun kniBridge7306(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7307")
private external fun kniBridge7307(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7308")
private external fun kniBridge7308(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7309")
private external fun kniBridge7309(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7310")
private external fun kniBridge7310(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7311")
private external fun kniBridge7311(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7312")
private external fun kniBridge7312(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7313")
private external fun kniBridge7313(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7314")
private external fun kniBridge7314(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7315")
private external fun kniBridge7315(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7316")
private external fun kniBridge7316(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7317")
private external fun kniBridge7317(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7318")
private external fun kniBridge7318(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7319")
private external fun kniBridge7319(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7320")
private external fun kniBridge7320(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7321")
private external fun kniBridge7321(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7322")
private external fun kniBridge7322(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7323")
private external fun kniBridge7323(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7324")
private external fun kniBridge7324(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7325")
private external fun kniBridge7325(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7326")
private external fun kniBridge7326(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7327")
private external fun kniBridge7327(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7328")
private external fun kniBridge7328(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7329")
private external fun kniBridge7329(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7330")
private external fun kniBridge7330(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7331")
private external fun kniBridge7331(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7332")
private external fun kniBridge7332(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7333")
private external fun kniBridge7333(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7334")
private external fun kniBridge7334(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7335")
private external fun kniBridge7335(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7336")
private external fun kniBridge7336(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7337")
private external fun kniBridge7337(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7338")
private external fun kniBridge7338(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7339")
private external fun kniBridge7339(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7340")
private external fun kniBridge7340(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7341")
private external fun kniBridge7341(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7342")
private external fun kniBridge7342(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7343")
private external fun kniBridge7343(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7344")
private external fun kniBridge7344(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7345")
private external fun kniBridge7345(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7346")
private external fun kniBridge7346(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7347")
private external fun kniBridge7347(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7348")
private external fun kniBridge7348(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7349")
private external fun kniBridge7349(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7350")
private external fun kniBridge7350(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7351")
private external fun kniBridge7351(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7352")
private external fun kniBridge7352(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7353")
private external fun kniBridge7353(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7354")
private external fun kniBridge7354(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7355")
private external fun kniBridge7355(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7356")
private external fun kniBridge7356(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7357")
private external fun kniBridge7357(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7358")
private external fun kniBridge7358(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7359")
private external fun kniBridge7359(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7360")
private external fun kniBridge7360(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7361")
private external fun kniBridge7361(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7362")
private external fun kniBridge7362(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7363")
private external fun kniBridge7363(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7364")
private external fun kniBridge7364(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7365")
private external fun kniBridge7365(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7366")
private external fun kniBridge7366(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7367")
private external fun kniBridge7367(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7368")
private external fun kniBridge7368(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7369")
private external fun kniBridge7369(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7370")
private external fun kniBridge7370(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7371")
private external fun kniBridge7371(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7372")
private external fun kniBridge7372(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7373")
private external fun kniBridge7373(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7374")
private external fun kniBridge7374(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7375")
private external fun kniBridge7375(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7376")
private external fun kniBridge7376(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7377")
private external fun kniBridge7377(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7378")
private external fun kniBridge7378(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7379")
private external fun kniBridge7379(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7380")
private external fun kniBridge7380(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7381")
private external fun kniBridge7381(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7382")
private external fun kniBridge7382(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7383")
private external fun kniBridge7383(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7384")
private external fun kniBridge7384(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7385")
private external fun kniBridge7385(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7386")
private external fun kniBridge7386(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7387")
private external fun kniBridge7387(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7388")
private external fun kniBridge7388(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7389")
private external fun kniBridge7389(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7390")
private external fun kniBridge7390(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7391")
private external fun kniBridge7391(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7392")
private external fun kniBridge7392(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7393")
private external fun kniBridge7393(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7394")
private external fun kniBridge7394(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7395")
private external fun kniBridge7395(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7396")
private external fun kniBridge7396(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7397")
private external fun kniBridge7397(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7398")
private external fun kniBridge7398(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7399")
private external fun kniBridge7399(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7400")
private external fun kniBridge7400(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7401")
private external fun kniBridge7401(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7402")
private external fun kniBridge7402(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7403")
private external fun kniBridge7403(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7404")
private external fun kniBridge7404(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7405")
private external fun kniBridge7405(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7406")
private external fun kniBridge7406(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7407")
private external fun kniBridge7407(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7408")
private external fun kniBridge7408(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7409")
private external fun kniBridge7409(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7410")
private external fun kniBridge7410(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7411")
private external fun kniBridge7411(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7412")
private external fun kniBridge7412(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7413")
private external fun kniBridge7413(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7414")
private external fun kniBridge7414(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7415")
private external fun kniBridge7415(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7416")
private external fun kniBridge7416(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7417")
private external fun kniBridge7417(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7418")
private external fun kniBridge7418(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7419")
private external fun kniBridge7419(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7420")
private external fun kniBridge7420(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7421")
private external fun kniBridge7421(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7422")
private external fun kniBridge7422(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7423")
private external fun kniBridge7423(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7424")
private external fun kniBridge7424(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7425")
private external fun kniBridge7425(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7426")
private external fun kniBridge7426(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7427")
private external fun kniBridge7427(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7428")
private external fun kniBridge7428(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7429")
private external fun kniBridge7429(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7430")
private external fun kniBridge7430(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7431")
private external fun kniBridge7431(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7432")
private external fun kniBridge7432(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7433")
private external fun kniBridge7433(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7434")
private external fun kniBridge7434(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7435")
private external fun kniBridge7435(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7436")
private external fun kniBridge7436(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7437")
private external fun kniBridge7437(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7438")
private external fun kniBridge7438(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7439")
private external fun kniBridge7439(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7440")
private external fun kniBridge7440(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7441")
private external fun kniBridge7441(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7442")
private external fun kniBridge7442(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7443")
private external fun kniBridge7443(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7444")
private external fun kniBridge7444(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7445")
private external fun kniBridge7445(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7446")
private external fun kniBridge7446(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7447")
private external fun kniBridge7447(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7448")
private external fun kniBridge7448(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7449")
private external fun kniBridge7449(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7450")
private external fun kniBridge7450(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7451")
private external fun kniBridge7451(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7452")
private external fun kniBridge7452(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7453")
private external fun kniBridge7453(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7454")
private external fun kniBridge7454(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7455")
private external fun kniBridge7455(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7456")
private external fun kniBridge7456(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7457")
private external fun kniBridge7457(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7458")
private external fun kniBridge7458(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7459")
private external fun kniBridge7459(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7460")
private external fun kniBridge7460(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7461")
private external fun kniBridge7461(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7462")
private external fun kniBridge7462(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7463")
private external fun kniBridge7463(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7464")
private external fun kniBridge7464(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7465")
private external fun kniBridge7465(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7466")
private external fun kniBridge7466(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7467")
private external fun kniBridge7467(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7468")
private external fun kniBridge7468(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7469")
private external fun kniBridge7469(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7470")
private external fun kniBridge7470(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7471")
private external fun kniBridge7471(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7472")
private external fun kniBridge7472(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7473")
private external fun kniBridge7473(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7474")
private external fun kniBridge7474(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7475")
private external fun kniBridge7475(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7476")
private external fun kniBridge7476(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7477")
private external fun kniBridge7477(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7478")
private external fun kniBridge7478(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7479")
private external fun kniBridge7479(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7480")
private external fun kniBridge7480(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7481")
private external fun kniBridge7481(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7482")
private external fun kniBridge7482(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7483")
private external fun kniBridge7483(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7484")
private external fun kniBridge7484(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7485")
private external fun kniBridge7485(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7486")
private external fun kniBridge7486(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7487")
private external fun kniBridge7487(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7488")
private external fun kniBridge7488(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7489")
private external fun kniBridge7489(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7490")
private external fun kniBridge7490(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7491")
private external fun kniBridge7491(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7492")
private external fun kniBridge7492(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7493")
private external fun kniBridge7493(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7494")
private external fun kniBridge7494(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7495")
private external fun kniBridge7495(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7496")
private external fun kniBridge7496(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7497")
private external fun kniBridge7497(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7498")
private external fun kniBridge7498(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7499")
private external fun kniBridge7499(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7500")
private external fun kniBridge7500(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7501")
private external fun kniBridge7501(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7502")
private external fun kniBridge7502(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7503")
private external fun kniBridge7503(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7504")
private external fun kniBridge7504(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7505")
private external fun kniBridge7505(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7506")
private external fun kniBridge7506(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7507")
private external fun kniBridge7507(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7508")
private external fun kniBridge7508(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7509")
private external fun kniBridge7509(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7510")
private external fun kniBridge7510(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7511")
private external fun kniBridge7511(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7512")
private external fun kniBridge7512(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7513")
private external fun kniBridge7513(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7514")
private external fun kniBridge7514(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7515")
private external fun kniBridge7515(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7516")
private external fun kniBridge7516(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7517")
private external fun kniBridge7517(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7518")
private external fun kniBridge7518(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7519")
private external fun kniBridge7519(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7520")
private external fun kniBridge7520(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7521")
private external fun kniBridge7521(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7522")
private external fun kniBridge7522(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7523")
private external fun kniBridge7523(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7524")
private external fun kniBridge7524(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7525")
private external fun kniBridge7525(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7526")
private external fun kniBridge7526(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7527")
private external fun kniBridge7527(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7528")
private external fun kniBridge7528(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7529")
private external fun kniBridge7529(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7530")
private external fun kniBridge7530(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7531")
private external fun kniBridge7531(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7532")
private external fun kniBridge7532(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7533")
private external fun kniBridge7533(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7534")
private external fun kniBridge7534(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7535")
private external fun kniBridge7535(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7536")
private external fun kniBridge7536(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7537")
private external fun kniBridge7537(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7538")
private external fun kniBridge7538(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7539")
private external fun kniBridge7539(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7540")
private external fun kniBridge7540(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7541")
private external fun kniBridge7541(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7542")
private external fun kniBridge7542(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7543")
private external fun kniBridge7543(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7544")
private external fun kniBridge7544(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7545")
private external fun kniBridge7545(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7546")
private external fun kniBridge7546(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7547")
private external fun kniBridge7547(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7548")
private external fun kniBridge7548(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7549")
private external fun kniBridge7549(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7550")
private external fun kniBridge7550(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7551")
private external fun kniBridge7551(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7552")
private external fun kniBridge7552(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7553")
private external fun kniBridge7553(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7554")
private external fun kniBridge7554(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7555")
private external fun kniBridge7555(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7556")
private external fun kniBridge7556(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7557")
private external fun kniBridge7557(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7558")
private external fun kniBridge7558(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7559")
private external fun kniBridge7559(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7560")
private external fun kniBridge7560(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7561")
private external fun kniBridge7561(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7562")
private external fun kniBridge7562(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7563")
private external fun kniBridge7563(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7564")
private external fun kniBridge7564(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7565")
private external fun kniBridge7565(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7566")
private external fun kniBridge7566(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7567")
private external fun kniBridge7567(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7568")
private external fun kniBridge7568(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7569")
private external fun kniBridge7569(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7570")
private external fun kniBridge7570(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7571")
private external fun kniBridge7571(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7572")
private external fun kniBridge7572(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7573")
private external fun kniBridge7573(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7574")
private external fun kniBridge7574(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7575")
private external fun kniBridge7575(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7576")
private external fun kniBridge7576(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7577")
private external fun kniBridge7577(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7578")
private external fun kniBridge7578(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7579")
private external fun kniBridge7579(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7580")
private external fun kniBridge7580(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7581")
private external fun kniBridge7581(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7582")
private external fun kniBridge7582(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7583")
private external fun kniBridge7583(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7584")
private external fun kniBridge7584(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7585")
private external fun kniBridge7585(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7586")
private external fun kniBridge7586(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7587")
private external fun kniBridge7587(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7588")
private external fun kniBridge7588(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7589")
private external fun kniBridge7589(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7590")
private external fun kniBridge7590(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7591")
private external fun kniBridge7591(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7592")
private external fun kniBridge7592(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7593")
private external fun kniBridge7593(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7594")
private external fun kniBridge7594(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7595")
private external fun kniBridge7595(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7596")
private external fun kniBridge7596(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7597")
private external fun kniBridge7597(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7598")
private external fun kniBridge7598(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7599")
private external fun kniBridge7599(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7600")
private external fun kniBridge7600(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7601")
private external fun kniBridge7601(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7602")
private external fun kniBridge7602(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7603")
private external fun kniBridge7603(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7604")
private external fun kniBridge7604(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7605")
private external fun kniBridge7605(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7606")
private external fun kniBridge7606(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7607")
private external fun kniBridge7607(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7608")
private external fun kniBridge7608(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7609")
private external fun kniBridge7609(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7610")
private external fun kniBridge7610(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7611")
private external fun kniBridge7611(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7612")
private external fun kniBridge7612(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7613")
private external fun kniBridge7613(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7614")
private external fun kniBridge7614(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7615")
private external fun kniBridge7615(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7616")
private external fun kniBridge7616(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7617")
private external fun kniBridge7617(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7618")
private external fun kniBridge7618(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7619")
private external fun kniBridge7619(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7620")
private external fun kniBridge7620(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7621")
private external fun kniBridge7621(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7622")
private external fun kniBridge7622(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7623")
private external fun kniBridge7623(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7624")
private external fun kniBridge7624(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7625")
private external fun kniBridge7625(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7626")
private external fun kniBridge7626(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7627")
private external fun kniBridge7627(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7628")
private external fun kniBridge7628(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7629")
private external fun kniBridge7629(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7630")
private external fun kniBridge7630(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7631")
private external fun kniBridge7631(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7632")
private external fun kniBridge7632(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7633")
private external fun kniBridge7633(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7634")
private external fun kniBridge7634(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7635")
private external fun kniBridge7635(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7636")
private external fun kniBridge7636(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7637")
private external fun kniBridge7637(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7638")
private external fun kniBridge7638(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7639")
private external fun kniBridge7639(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7640")
private external fun kniBridge7640(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7641")
private external fun kniBridge7641(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7642")
private external fun kniBridge7642(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7643")
private external fun kniBridge7643(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7644")
private external fun kniBridge7644(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7645")
private external fun kniBridge7645(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7646")
private external fun kniBridge7646(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7647")
private external fun kniBridge7647(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7648")
private external fun kniBridge7648(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7649")
private external fun kniBridge7649(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7650")
private external fun kniBridge7650(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7651")
private external fun kniBridge7651(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7652")
private external fun kniBridge7652(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7653")
private external fun kniBridge7653(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7654")
private external fun kniBridge7654(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7655")
private external fun kniBridge7655(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7656")
private external fun kniBridge7656(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7657")
private external fun kniBridge7657(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7658")
private external fun kniBridge7658(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7659")
private external fun kniBridge7659(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7660")
private external fun kniBridge7660(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7661")
private external fun kniBridge7661(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7662")
private external fun kniBridge7662(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7663")
private external fun kniBridge7663(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7664")
private external fun kniBridge7664(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7665")
private external fun kniBridge7665(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7666")
private external fun kniBridge7666(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7667")
private external fun kniBridge7667(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7668")
private external fun kniBridge7668(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7669")
private external fun kniBridge7669(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7670")
private external fun kniBridge7670(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7671")
private external fun kniBridge7671(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7672")
private external fun kniBridge7672(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7673")
private external fun kniBridge7673(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7674")
private external fun kniBridge7674(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7675")
private external fun kniBridge7675(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7676")
private external fun kniBridge7676(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7677")
private external fun kniBridge7677(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7678")
private external fun kniBridge7678(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7679")
private external fun kniBridge7679(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7680")
private external fun kniBridge7680(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7681")
private external fun kniBridge7681(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7682")
private external fun kniBridge7682(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7683")
private external fun kniBridge7683(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7684")
private external fun kniBridge7684(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7685")
private external fun kniBridge7685(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7686")
private external fun kniBridge7686(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7687")
private external fun kniBridge7687(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7688")
private external fun kniBridge7688(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7689")
private external fun kniBridge7689(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7690")
private external fun kniBridge7690(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7691")
private external fun kniBridge7691(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7692")
private external fun kniBridge7692(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7693")
private external fun kniBridge7693(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7694")
private external fun kniBridge7694(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7695")
private external fun kniBridge7695(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7696")
private external fun kniBridge7696(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7697")
private external fun kniBridge7697(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7698")
private external fun kniBridge7698(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7699")
private external fun kniBridge7699(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7700")
private external fun kniBridge7700(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7701")
private external fun kniBridge7701(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7702")
private external fun kniBridge7702(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7703")
private external fun kniBridge7703(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7704")
private external fun kniBridge7704(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7705")
private external fun kniBridge7705(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7706")
private external fun kniBridge7706(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7707")
private external fun kniBridge7707(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7708")
private external fun kniBridge7708(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7709")
private external fun kniBridge7709(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7710")
private external fun kniBridge7710(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7711")
private external fun kniBridge7711(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7712")
private external fun kniBridge7712(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7713")
private external fun kniBridge7713(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7714")
private external fun kniBridge7714(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7715")
private external fun kniBridge7715(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7716")
private external fun kniBridge7716(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7717")
private external fun kniBridge7717(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7718")
private external fun kniBridge7718(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7719")
private external fun kniBridge7719(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7720")
private external fun kniBridge7720(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7721")
private external fun kniBridge7721(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7722")
private external fun kniBridge7722(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7723")
private external fun kniBridge7723(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7724")
private external fun kniBridge7724(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7725")
private external fun kniBridge7725(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7726")
private external fun kniBridge7726(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7727")
private external fun kniBridge7727(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7728")
private external fun kniBridge7728(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7729")
private external fun kniBridge7729(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7730")
private external fun kniBridge7730(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7731")
private external fun kniBridge7731(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7732")
private external fun kniBridge7732(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7733")
private external fun kniBridge7733(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7734")
private external fun kniBridge7734(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7735")
private external fun kniBridge7735(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7736")
private external fun kniBridge7736(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7737")
private external fun kniBridge7737(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7738")
private external fun kniBridge7738(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7739")
private external fun kniBridge7739(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7740")
private external fun kniBridge7740(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7741")
private external fun kniBridge7741(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7742")
private external fun kniBridge7742(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7743")
private external fun kniBridge7743(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7744")
private external fun kniBridge7744(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7745")
private external fun kniBridge7745(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7746")
private external fun kniBridge7746(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7747")
private external fun kniBridge7747(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7748")
private external fun kniBridge7748(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7749")
private external fun kniBridge7749(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7750")
private external fun kniBridge7750(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7751")
private external fun kniBridge7751(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7752")
private external fun kniBridge7752(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7753")
private external fun kniBridge7753(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7754")
private external fun kniBridge7754(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7755")
private external fun kniBridge7755(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7756")
private external fun kniBridge7756(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7757")
private external fun kniBridge7757(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7758")
private external fun kniBridge7758(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7759")
private external fun kniBridge7759(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7760")
private external fun kniBridge7760(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7761")
private external fun kniBridge7761(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7762")
private external fun kniBridge7762(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7763")
private external fun kniBridge7763(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7764")
private external fun kniBridge7764(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7765")
private external fun kniBridge7765(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7766")
private external fun kniBridge7766(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7767")
private external fun kniBridge7767(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7768")
private external fun kniBridge7768(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7769")
private external fun kniBridge7769(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7770")
private external fun kniBridge7770(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7771")
private external fun kniBridge7771(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7772")
private external fun kniBridge7772(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7773")
private external fun kniBridge7773(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7774")
private external fun kniBridge7774(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7775")
private external fun kniBridge7775(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7776")
private external fun kniBridge7776(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7777")
private external fun kniBridge7777(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7778")
private external fun kniBridge7778(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7779")
private external fun kniBridge7779(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7780")
private external fun kniBridge7780(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7781")
private external fun kniBridge7781(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7782")
private external fun kniBridge7782(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7783")
private external fun kniBridge7783(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7784")
private external fun kniBridge7784(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7785")
private external fun kniBridge7785(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7786")
private external fun kniBridge7786(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7787")
private external fun kniBridge7787(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7788")
private external fun kniBridge7788(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7789")
private external fun kniBridge7789(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7790")
private external fun kniBridge7790(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7791")
private external fun kniBridge7791(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7792")
private external fun kniBridge7792(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7793")
private external fun kniBridge7793(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7794")
private external fun kniBridge7794(): Unit
@SymbolName("libgtk3_kniBridge7795")
private external fun kniBridge7795(): NativePtr
@SymbolName("libgtk3_kniBridge7796")
private external fun kniBridge7796(p0: NativePtr): Unit
@SymbolName("libgtk3_kniBridge7797")
private external fun kniBridge7797(): NativePtr
@SymbolName("libgtk3_kniBridge7798")
private external fun kniBridge7798(): NativePtr
@SymbolName("libgtk3_kniBridge7799")
private external fun kniBridge7799(): ULong
@SymbolName("libgtk3_kniBridge7800")
private external fun kniBridge7800(): ULong
@SymbolName("libgtk3_kniBridge7801")
private external fun kniBridge7801(): ULong
@SymbolName("libgtk3_kniBridge7802")
private external fun kniBridge7802(): ULong
@SymbolName("libgtk3_kniBridge7803")
private external fun kniBridge7803(): ULong
@SymbolName("libgtk3_kniBridge7804")
private external fun kniBridge7804(): ULong
@SymbolName("libgtk3_kniBridge7805")
private external fun kniBridge7805(): ULong
@SymbolName("libgtk3_kniBridge7806")
private external fun kniBridge7806(): ULong
@SymbolName("libgtk3_kniBridge7807")
private external fun kniBridge7807(): ULong
@SymbolName("libgtk3_kniBridge7808")
private external fun kniBridge7808(): ULong
@SymbolName("libgtk3_kniBridge7809")
private external fun kniBridge7809(): ULong
@SymbolName("libgtk3_kniBridge7810")
private external fun kniBridge7810(): ULong
@SymbolName("libgtk3_kniBridge7811")
private external fun kniBridge7811(): ULong
@SymbolName("libgtk3_kniBridge7812")
private external fun kniBridge7812(): ULong
@SymbolName("libgtk3_kniBridge7813")
private external fun kniBridge7813(): ULong
@SymbolName("libgtk3_kniBridge7814")
private external fun kniBridge7814(): ULong
@SymbolName("libgtk3_kniBridge7815")
private external fun kniBridge7815(): ULong
@SymbolName("libgtk3_kniBridge7816")
private external fun kniBridge7816(): ULong
@SymbolName("libgtk3_kniBridge7817")
private external fun kniBridge7817(): ULong
@SymbolName("libgtk3_kniBridge7818")
private external fun kniBridge7818(): ULong
@SymbolName("libgtk3_kniBridge7819")
private external fun kniBridge7819(): ULong
@SymbolName("libgtk3_kniBridge7820")
private external fun kniBridge7820(): ULong
@SymbolName("libgtk3_kniBridge7821")
private external fun kniBridge7821(): ULong
@SymbolName("libgtk3_kniBridge7822")
private external fun kniBridge7822(): ULong
@SymbolName("libgtk3_kniBridge7823")
private external fun kniBridge7823(): ULong
@SymbolName("libgtk3_kniBridge7824")
private external fun kniBridge7824(): ULong
@SymbolName("libgtk3_kniBridge7825")
private external fun kniBridge7825(): ULong
@SymbolName("libgtk3_kniBridge7826")
private external fun kniBridge7826(): ULong
@SymbolName("libgtk3_kniBridge7827")
private external fun kniBridge7827(): ULong
@SymbolName("libgtk3_kniBridge7828")
private external fun kniBridge7828(): ULong
@SymbolName("libgtk3_kniBridge7829")
private external fun kniBridge7829(): ULong
@SymbolName("libgtk3_kniBridge7830")
private external fun kniBridge7830(): ULong
@SymbolName("libgtk3_kniBridge7831")
private external fun kniBridge7831(): ULong
@SymbolName("libgtk3_kniBridge7832")
private external fun kniBridge7832(): ULong
@SymbolName("libgtk3_kniBridge7833")
private external fun kniBridge7833(): ULong
@SymbolName("libgtk3_kniBridge7834")
private external fun kniBridge7834(): ULong
@SymbolName("libgtk3_kniBridge7835")
private external fun kniBridge7835(): ULong
@SymbolName("libgtk3_kniBridge7836")
private external fun kniBridge7836(): ULong
@SymbolName("libgtk3_kniBridge7837")
private external fun kniBridge7837(): ULong
@SymbolName("libgtk3_kniBridge7838")
private external fun kniBridge7838(): ULong
@SymbolName("libgtk3_kniBridge7839")
private external fun kniBridge7839(): ULong
@SymbolName("libgtk3_kniBridge7840")
private external fun kniBridge7840(): ULong
@SymbolName("libgtk3_kniBridge7841")
private external fun kniBridge7841(): ULong
@SymbolName("libgtk3_kniBridge7842")
private external fun kniBridge7842(): ULong
@SymbolName("libgtk3_kniBridge7843")
private external fun kniBridge7843(): ULong
@SymbolName("libgtk3_kniBridge7844")
private external fun kniBridge7844(): ULong
@SymbolName("libgtk3_kniBridge7845")
private external fun kniBridge7845(): ULong
@SymbolName("libgtk3_kniBridge7846")
private external fun kniBridge7846(): ULong
@SymbolName("libgtk3_kniBridge7847")
private external fun kniBridge7847(): ULong
@SymbolName("libgtk3_kniBridge7848")
private external fun kniBridge7848(): ULong
@SymbolName("libgtk3_kniBridge7849")
private external fun kniBridge7849(): ULong
@SymbolName("libgtk3_kniBridge7850")
private external fun kniBridge7850(): ULong
@SymbolName("libgtk3_kniBridge7851")
private external fun kniBridge7851(): ULong
@SymbolName("libgtk3_kniBridge7852")
private external fun kniBridge7852(): ULong
@SymbolName("libgtk3_kniBridge7853")
private external fun kniBridge7853(): ULong
@SymbolName("libgtk3_kniBridge7854")
private external fun kniBridge7854(): ULong
@SymbolName("libgtk3_kniBridge7855")
private external fun kniBridge7855(): ULong
@SymbolName("libgtk3_kniBridge7856")
private external fun kniBridge7856(): ULong
@SymbolName("libgtk3_kniBridge7857")
private external fun kniBridge7857(): ULong
@SymbolName("libgtk3_kniBridge7858")
private external fun kniBridge7858(): ULong
@SymbolName("libgtk3_kniBridge7859")
private external fun kniBridge7859(): ULong
@SymbolName("libgtk3_kniBridge7860")
private external fun kniBridge7860(): ULong
@SymbolName("libgtk3_kniBridge7861")
private external fun kniBridge7861(): ULong
@SymbolName("libgtk3_kniBridge7862")
private external fun kniBridge7862(): ULong
@SymbolName("libgtk3_kniBridge7863")
private external fun kniBridge7863(): ULong
@SymbolName("libgtk3_kniBridge7864")
private external fun kniBridge7864(): ULong
@SymbolName("libgtk3_kniBridge7865")
private external fun kniBridge7865(): ULong
@SymbolName("libgtk3_kniBridge7866")
private external fun kniBridge7866(): ULong
@SymbolName("libgtk3_kniBridge7867")
private external fun kniBridge7867(): ULong
@SymbolName("libgtk3_kniBridge7868")
private external fun kniBridge7868(): ULong
@SymbolName("libgtk3_kniBridge7869")
private external fun kniBridge7869(): ULong
@SymbolName("libgtk3_kniBridge7870")
private external fun kniBridge7870(): ULong
@SymbolName("libgtk3_kniBridge7871")
private external fun kniBridge7871(): ULong
@SymbolName("libgtk3_kniBridge7872")
private external fun kniBridge7872(): ULong
@SymbolName("libgtk3_kniBridge7873")
private external fun kniBridge7873(): ULong
@SymbolName("libgtk3_kniBridge7874")
private external fun kniBridge7874(): ULong
@SymbolName("libgtk3_kniBridge7875")
private external fun kniBridge7875(): ULong
@SymbolName("libgtk3_kniBridge7876")
private external fun kniBridge7876(): ULong
@SymbolName("libgtk3_kniBridge7877")
private external fun kniBridge7877(): ULong
@SymbolName("libgtk3_kniBridge7878")
private external fun kniBridge7878(): ULong
@SymbolName("libgtk3_kniBridge7879")
private external fun kniBridge7879(): ULong
@SymbolName("libgtk3_kniBridge7880")
private external fun kniBridge7880(): ULong
@SymbolName("libgtk3_kniBridge7881")
private external fun kniBridge7881(): ULong
@SymbolName("libgtk3_kniBridge7882")
private external fun kniBridge7882(): ULong
@SymbolName("libgtk3_kniBridge7883")
private external fun kniBridge7883(): ULong
@SymbolName("libgtk3_kniBridge7884")
private external fun kniBridge7884(): ULong
@SymbolName("libgtk3_kniBridge7885")
private external fun kniBridge7885(): ULong
@SymbolName("libgtk3_kniBridge7886")
private external fun kniBridge7886(): ULong
@SymbolName("libgtk3_kniBridge7887")
private external fun kniBridge7887(): ULong
@SymbolName("libgtk3_kniBridge7888")
private external fun kniBridge7888(): ULong
@SymbolName("libgtk3_kniBridge7889")
private external fun kniBridge7889(): ULong
@SymbolName("libgtk3_kniBridge7890")
private external fun kniBridge7890(): ULong
@SymbolName("libgtk3_kniBridge7891")
private external fun kniBridge7891(): ULong
@SymbolName("libgtk3_kniBridge7892")
private external fun kniBridge7892(): UInt
@SymbolName("libgtk3_kniBridge7893")
private external fun kniBridge7893(): ULong
@SymbolName("libgtk3_kniBridge7894")
private external fun kniBridge7894(): ULong
@SymbolName("libgtk3_kniBridge7895")
private external fun kniBridge7895(): ULong
@SymbolName("libgtk3_kniBridge7896")
private external fun kniBridge7896(): ULong
@SymbolName("libgtk3_kniBridge7897")
private external fun kniBridge7897(): ULong
@SymbolName("libgtk3_kniBridge7898")
private external fun kniBridge7898(): ULong
@SymbolName("libgtk3_kniBridge7899")
private external fun kniBridge7899(): ULong
@SymbolName("libgtk3_kniBridge7900")
private external fun kniBridge7900(): ULong
@SymbolName("libgtk3_kniBridge7901")
private external fun kniBridge7901(): ULong
@SymbolName("libgtk3_kniBridge7902")
private external fun kniBridge7902(): ULong
@SymbolName("libgtk3_kniBridge7903")
private external fun kniBridge7903(): ULong
@SymbolName("libgtk3_kniBridge7904")
private external fun kniBridge7904(): ULong
@SymbolName("libgtk3_kniBridge7905")
private external fun kniBridge7905(): ULong
@SymbolName("libgtk3_kniBridge7906")
private external fun kniBridge7906(): ULong
@SymbolName("libgtk3_kniBridge7907")
private external fun kniBridge7907(): ULong
@SymbolName("libgtk3_kniBridge7908")
private external fun kniBridge7908(): ULong
@SymbolName("libgtk3_kniBridge7909")
private external fun kniBridge7909(): ULong
@SymbolName("libgtk3_kniBridge7910")
private external fun kniBridge7910(): ULong
@SymbolName("libgtk3_kniBridge7911")
private external fun kniBridge7911(): ULong
@SymbolName("libgtk3_kniBridge7912")
private external fun kniBridge7912(): ULong
@SymbolName("libgtk3_kniBridge7913")
private external fun kniBridge7913(): ULong
@SymbolName("libgtk3_kniBridge7914")
private external fun kniBridge7914(): ULong
@SymbolName("libgtk3_kniBridge7915")
private external fun kniBridge7915(): ULong
@SymbolName("libgtk3_kniBridge7916")
private external fun kniBridge7916(): ULong
@SymbolName("libgtk3_kniBridge7917")
private external fun kniBridge7917(): ULong
@SymbolName("libgtk3_kniBridge7918")
private external fun kniBridge7918(): UInt
@SymbolName("libgtk3_kniBridge7919")
private external fun kniBridge7919(): ULong
@SymbolName("libgtk3_kniBridge7920")
private external fun kniBridge7920(): ULong
@SymbolName("libgtk3_kniBridge7921")
private external fun kniBridge7921(): ULong
@SymbolName("libgtk3_kniBridge7922")
private external fun kniBridge7922(): ULong
@SymbolName("libgtk3_kniBridge7923")
private external fun kniBridge7923(): ULong
@SymbolName("libgtk3_kniBridge7924")
private external fun kniBridge7924(): ULong
@SymbolName("libgtk3_kniBridge7925")
private external fun kniBridge7925(): ULong
@SymbolName("libgtk3_kniBridge7926")
private external fun kniBridge7926(): ULong
@SymbolName("libgtk3_kniBridge7927")
private external fun kniBridge7927(): ULong
@SymbolName("libgtk3_kniBridge7928")
private external fun kniBridge7928(): ULong
@SymbolName("libgtk3_kniBridge7929")
private external fun kniBridge7929(): ULong
@SymbolName("libgtk3_kniBridge7930")
private external fun kniBridge7930(): ULong
@SymbolName("libgtk3_kniBridge7931")
private external fun kniBridge7931(): ULong
@SymbolName("libgtk3_kniBridge7932")
private external fun kniBridge7932(): ULong
@SymbolName("libgtk3_kniBridge7933")
private external fun kniBridge7933(): ULong
@SymbolName("libgtk3_kniBridge7934")
private external fun kniBridge7934(): ULong
@SymbolName("libgtk3_kniBridge7935")
private external fun kniBridge7935(): ULong
@SymbolName("libgtk3_kniBridge7936")
private external fun kniBridge7936(): ULong
@SymbolName("libgtk3_kniBridge7937")
private external fun kniBridge7937(): ULong
@SymbolName("libgtk3_kniBridge7938")
private external fun kniBridge7938(): ULong
@SymbolName("libgtk3_kniBridge7939")
private external fun kniBridge7939(): ULong
@SymbolName("libgtk3_kniBridge7940")
private external fun kniBridge7940(): ULong
@SymbolName("libgtk3_kniBridge7941")
private external fun kniBridge7941(): ULong
@SymbolName("libgtk3_kniBridge7942")
private external fun kniBridge7942(): ULong
@SymbolName("libgtk3_kniBridge7943")
private external fun kniBridge7943(): ULong
@SymbolName("libgtk3_kniBridge7944")
private external fun kniBridge7944(): ULong
@SymbolName("libgtk3_kniBridge7945")
private external fun kniBridge7945(): ULong
@SymbolName("libgtk3_kniBridge7946")
private external fun kniBridge7946(): ULong
@SymbolName("libgtk3_kniBridge7947")
private external fun kniBridge7947(): ULong
@SymbolName("libgtk3_kniBridge7948")
private external fun kniBridge7948(): ULong
@SymbolName("libgtk3_kniBridge7949")
private external fun kniBridge7949(): ULong
@SymbolName("libgtk3_kniBridge7950")
private external fun kniBridge7950(): ULong
@SymbolName("libgtk3_kniBridge7951")
private external fun kniBridge7951(): ULong
@SymbolName("libgtk3_kniBridge7952")
private external fun kniBridge7952(): ULong
@SymbolName("libgtk3_kniBridge7953")
private external fun kniBridge7953(): ULong
@SymbolName("libgtk3_kniBridge7954")
private external fun kniBridge7954(): ULong
@SymbolName("libgtk3_kniBridge7955")
private external fun kniBridge7955(): ULong
@SymbolName("libgtk3_kniBridge7956")
private external fun kniBridge7956(): ULong
@SymbolName("libgtk3_kniBridge7957")
private external fun kniBridge7957(): ULong
@SymbolName("libgtk3_kniBridge7958")
private external fun kniBridge7958(): ULong
@SymbolName("libgtk3_kniBridge7959")
private external fun kniBridge7959(): ULong
@SymbolName("libgtk3_kniBridge7960")
private external fun kniBridge7960(): ULong
@SymbolName("libgtk3_kniBridge7961")
private external fun kniBridge7961(): ULong
@SymbolName("libgtk3_kniBridge7962")
private external fun kniBridge7962(): ULong
@SymbolName("libgtk3_kniBridge7963")
private external fun kniBridge7963(): ULong
@SymbolName("libgtk3_kniBridge7964")
private external fun kniBridge7964(): ULong
@SymbolName("libgtk3_kniBridge7965")
private external fun kniBridge7965(): ULong
@SymbolName("libgtk3_kniBridge7966")
private external fun kniBridge7966(): ULong
@SymbolName("libgtk3_kniBridge7967")
private external fun kniBridge7967(): ULong
@SymbolName("libgtk3_kniBridge7968")
private external fun kniBridge7968(): ULong
@SymbolName("libgtk3_kniBridge7969")
private external fun kniBridge7969(): ULong
@SymbolName("libgtk3_kniBridge7970")
private external fun kniBridge7970(): ULong
@SymbolName("libgtk3_kniBridge7971")
private external fun kniBridge7971(): ULong
@SymbolName("libgtk3_kniBridge7972")
private external fun kniBridge7972(): ULong
@SymbolName("libgtk3_kniBridge7973")
private external fun kniBridge7973(): ULong
@SymbolName("libgtk3_kniBridge7974")
private external fun kniBridge7974(): ULong
@SymbolName("libgtk3_kniBridge7975")
private external fun kniBridge7975(): ULong
@SymbolName("libgtk3_kniBridge7976")
private external fun kniBridge7976(): ULong
@SymbolName("libgtk3_kniBridge7977")
private external fun kniBridge7977(): ULong
@SymbolName("libgtk3_kniBridge7978")
private external fun kniBridge7978(): ULong
@SymbolName("libgtk3_kniBridge7979")
private external fun kniBridge7979(): ULong
@SymbolName("libgtk3_kniBridge7980")
private external fun kniBridge7980(): ULong
@SymbolName("libgtk3_kniBridge7981")
private external fun kniBridge7981(): ULong
@SymbolName("libgtk3_kniBridge7982")
private external fun kniBridge7982(): ULong
@SymbolName("libgtk3_kniBridge7983")
private external fun kniBridge7983(): ULong
@SymbolName("libgtk3_kniBridge7984")
private external fun kniBridge7984(): ULong
@SymbolName("libgtk3_kniBridge7985")
private external fun kniBridge7985(): ULong
@SymbolName("libgtk3_kniBridge7986")
private external fun kniBridge7986(): ULong
@SymbolName("libgtk3_kniBridge7987")
private external fun kniBridge7987(): ULong
@SymbolName("libgtk3_kniBridge7988")
private external fun kniBridge7988(): ULong
@SymbolName("libgtk3_kniBridge7989")
private external fun kniBridge7989(): ULong
@SymbolName("libgtk3_kniBridge7990")
private external fun kniBridge7990(): ULong
@SymbolName("libgtk3_kniBridge7991")
private external fun kniBridge7991(): ULong
@SymbolName("libgtk3_kniBridge7992")
private external fun kniBridge7992(): ULong
@SymbolName("libgtk3_kniBridge7993")
private external fun kniBridge7993(): ULong
@SymbolName("libgtk3_kniBridge7994")
private external fun kniBridge7994(): ULong
@SymbolName("libgtk3_kniBridge7995")
private external fun kniBridge7995(): ULong
@SymbolName("libgtk3_kniBridge7996")
private external fun kniBridge7996(): ULong
@SymbolName("libgtk3_kniBridge7997")
private external fun kniBridge7997(): ULong
@SymbolName("libgtk3_kniBridge7998")
private external fun kniBridge7998(): ULong
@SymbolName("libgtk3_kniBridge7999")
private external fun kniBridge7999(): ULong
@SymbolName("libgtk3_kniBridge8000")
private external fun kniBridge8000(): ULong
@SymbolName("libgtk3_kniBridge8001")
private external fun kniBridge8001(): ULong
@SymbolName("libgtk3_kniBridge8002")
private external fun kniBridge8002(): ULong
@SymbolName("libgtk3_kniBridge8003")
private external fun kniBridge8003(): ULong
@SymbolName("libgtk3_kniBridge8004")
private external fun kniBridge8004(): ULong
@SymbolName("libgtk3_kniBridge8005")
private external fun kniBridge8005(): ULong
@SymbolName("libgtk3_kniBridge8006")
private external fun kniBridge8006(): ULong
@SymbolName("libgtk3_kniBridge8007")
private external fun kniBridge8007(): ULong
@SymbolName("libgtk3_kniBridge8008")
private external fun kniBridge8008(): ULong
@SymbolName("libgtk3_kniBridge8009")
private external fun kniBridge8009(): ULong
@SymbolName("libgtk3_kniBridge8010")
private external fun kniBridge8010(): ULong
@SymbolName("libgtk3_kniBridge8011")
private external fun kniBridge8011(): ULong
@SymbolName("libgtk3_kniBridge8012")
private external fun kniBridge8012(): ULong
@SymbolName("libgtk3_kniBridge8013")
private external fun kniBridge8013(): ULong
@SymbolName("libgtk3_kniBridge8014")
private external fun kniBridge8014(): ULong
@SymbolName("libgtk3_kniBridge8015")
private external fun kniBridge8015(): ULong
@SymbolName("libgtk3_kniBridge8016")
private external fun kniBridge8016(): ULong
@SymbolName("libgtk3_kniBridge8017")
private external fun kniBridge8017(): ULong
@SymbolName("libgtk3_kniBridge8018")
private external fun kniBridge8018(): ULong
@SymbolName("libgtk3_kniBridge8019")
private external fun kniBridge8019(): ULong
@SymbolName("libgtk3_kniBridge8020")
private external fun kniBridge8020(): ULong
@SymbolName("libgtk3_kniBridge8021")
private external fun kniBridge8021(): ULong
@SymbolName("libgtk3_kniBridge8022")
private external fun kniBridge8022(): ULong
@SymbolName("libgtk3_kniBridge8023")
private external fun kniBridge8023(): ULong
@SymbolName("libgtk3_kniBridge8024")
private external fun kniBridge8024(): ULong
@SymbolName("libgtk3_kniBridge8025")
private external fun kniBridge8025(): ULong
@SymbolName("libgtk3_kniBridge8026")
private external fun kniBridge8026(): ULong
@SymbolName("libgtk3_kniBridge8027")
private external fun kniBridge8027(): ULong
@SymbolName("libgtk3_kniBridge8028")
private external fun kniBridge8028(): UInt
@SymbolName("libgtk3_kniBridge8029")
private external fun kniBridge8029(): ULong
@SymbolName("libgtk3_kniBridge8030")
private external fun kniBridge8030(): UInt
@SymbolName("libgtk3_kniBridge8031")
private external fun kniBridge8031(): ULong
@SymbolName("libgtk3_kniBridge8032")
private external fun kniBridge8032(): ULong
@SymbolName("libgtk3_kniBridge8033")
private external fun kniBridge8033(): ULong
@SymbolName("libgtk3_kniBridge8034")
private external fun kniBridge8034(): ULong
@SymbolName("libgtk3_kniBridge8035")
private external fun kniBridge8035(): ULong
@SymbolName("libgtk3_kniBridge8036")
private external fun kniBridge8036(): ULong
@SymbolName("libgtk3_kniBridge8037")
private external fun kniBridge8037(): ULong
@SymbolName("libgtk3_kniBridge8038")
private external fun kniBridge8038(): ULong
@SymbolName("libgtk3_kniBridge8039")
private external fun kniBridge8039(): ULong
@SymbolName("libgtk3_kniBridge8040")
private external fun kniBridge8040(): ULong
@SymbolName("libgtk3_kniBridge8041")
private external fun kniBridge8041(): ULong
@SymbolName("libgtk3_kniBridge8042")
private external fun kniBridge8042(): ULong
@SymbolName("libgtk3_kniBridge8043")
private external fun kniBridge8043(): ULong
@SymbolName("libgtk3_kniBridge8044")
private external fun kniBridge8044(): ULong
@SymbolName("libgtk3_kniBridge8045")
private external fun kniBridge8045(): ULong
@SymbolName("libgtk3_kniBridge8046")
private external fun kniBridge8046(): ULong
@SymbolName("libgtk3_kniBridge8047")
private external fun kniBridge8047(): ULong
@SymbolName("libgtk3_kniBridge8048")
private external fun kniBridge8048(): ULong
@SymbolName("libgtk3_kniBridge8049")
private external fun kniBridge8049(): ULong
@SymbolName("libgtk3_kniBridge8050")
private external fun kniBridge8050(): ULong
@SymbolName("libgtk3_kniBridge8051")
private external fun kniBridge8051(): ULong
@SymbolName("libgtk3_kniBridge8052")
private external fun kniBridge8052(): ULong
@SymbolName("libgtk3_kniBridge8053")
private external fun kniBridge8053(): ULong
@SymbolName("libgtk3_kniBridge8054")
private external fun kniBridge8054(): ULong
@SymbolName("libgtk3_kniBridge8055")
private external fun kniBridge8055(): ULong
@SymbolName("libgtk3_kniBridge8056")
private external fun kniBridge8056(): ULong
@SymbolName("libgtk3_kniBridge8057")
private external fun kniBridge8057(): ULong
@SymbolName("libgtk3_kniBridge8058")
private external fun kniBridge8058(): ULong
@SymbolName("libgtk3_kniBridge8059")
private external fun kniBridge8059(): ULong
@SymbolName("libgtk3_kniBridge8060")
private external fun kniBridge8060(): ULong
@SymbolName("libgtk3_kniBridge8061")
private external fun kniBridge8061(): UInt
@SymbolName("libgtk3_kniBridge8062")
private external fun kniBridge8062(): ULong
@SymbolName("libgtk3_kniBridge8063")
private external fun kniBridge8063(): ULong
@SymbolName("libgtk3_kniBridge8064")
private external fun kniBridge8064(): ULong
@SymbolName("libgtk3_kniBridge8065")
private external fun kniBridge8065(): ULong
@SymbolName("libgtk3_kniBridge8066")
private external fun kniBridge8066(): ULong
@SymbolName("libgtk3_kniBridge8067")
private external fun kniBridge8067(): ULong
@SymbolName("libgtk3_kniBridge8068")
private external fun kniBridge8068(): ULong
@SymbolName("libgtk3_kniBridge8069")
private external fun kniBridge8069(): ULong
@SymbolName("libgtk3_kniBridge8070")
private external fun kniBridge8070(): ULong
@SymbolName("libgtk3_kniBridge8071")
private external fun kniBridge8071(): ULong
@SymbolName("libgtk3_kniBridge8072")
private external fun kniBridge8072(): ULong
@SymbolName("libgtk3_kniBridge8073")
private external fun kniBridge8073(): ULong
@SymbolName("libgtk3_kniBridge8074")
private external fun kniBridge8074(): ULong
@SymbolName("libgtk3_kniBridge8075")
private external fun kniBridge8075(): ULong
@SymbolName("libgtk3_kniBridge8076")
private external fun kniBridge8076(): ULong
@SymbolName("libgtk3_kniBridge8077")
private external fun kniBridge8077(): ULong
@SymbolName("libgtk3_kniBridge8078")
private external fun kniBridge8078(): ULong
@SymbolName("libgtk3_kniBridge8079")
private external fun kniBridge8079(): ULong
@SymbolName("libgtk3_kniBridge8080")
private external fun kniBridge8080(): ULong
@SymbolName("libgtk3_kniBridge8081")
private external fun kniBridge8081(): ULong
@SymbolName("libgtk3_kniBridge8082")
private external fun kniBridge8082(): ULong
@SymbolName("libgtk3_kniBridge8083")
private external fun kniBridge8083(): ULong
@SymbolName("libgtk3_kniBridge8084")
private external fun kniBridge8084(): ULong
@SymbolName("libgtk3_kniBridge8085")
private external fun kniBridge8085(): ULong
@SymbolName("libgtk3_kniBridge8086")
private external fun kniBridge8086(): ULong
@SymbolName("libgtk3_kniBridge8087")
private external fun kniBridge8087(): ULong
@SymbolName("libgtk3_kniBridge8088")
private external fun kniBridge8088(): ULong
@SymbolName("libgtk3_kniBridge8089")
private external fun kniBridge8089(): ULong
@SymbolName("libgtk3_kniBridge8090")
private external fun kniBridge8090(): ULong
@SymbolName("libgtk3_kniBridge8091")
private external fun kniBridge8091(): ULong
@SymbolName("libgtk3_kniBridge8092")
private external fun kniBridge8092(): ULong
@SymbolName("libgtk3_kniBridge8093")
private external fun kniBridge8093(): ULong
@SymbolName("libgtk3_kniBridge8094")
private external fun kniBridge8094(): ULong
@SymbolName("libgtk3_kniBridge8095")
private external fun kniBridge8095(): ULong
@SymbolName("libgtk3_kniBridge8096")
private external fun kniBridge8096(): ULong
@SymbolName("libgtk3_kniBridge8097")
private external fun kniBridge8097(): ULong
@SymbolName("libgtk3_kniBridge8098")
private external fun kniBridge8098(): ULong
@SymbolName("libgtk3_kniBridge8099")
private external fun kniBridge8099(): ULong
@SymbolName("libgtk3_kniBridge8100")
private external fun kniBridge8100(): ULong
@SymbolName("libgtk3_kniBridge8101")
private external fun kniBridge8101(): ULong
@SymbolName("libgtk3_kniBridge8102")
private external fun kniBridge8102(): ULong
@SymbolName("libgtk3_kniBridge8103")
private external fun kniBridge8103(): ULong
@SymbolName("libgtk3_kniBridge8104")
private external fun kniBridge8104(): ULong
@SymbolName("libgtk3_kniBridge8105")
private external fun kniBridge8105(): ULong
@SymbolName("libgtk3_kniBridge8106")
private external fun kniBridge8106(): ULong
@SymbolName("libgtk3_kniBridge8107")
private external fun kniBridge8107(): ULong
@SymbolName("libgtk3_kniBridge8108")
private external fun kniBridge8108(): ULong
@SymbolName("libgtk3_kniBridge8109")
private external fun kniBridge8109(): ULong
@SymbolName("libgtk3_kniBridge8110")
private external fun kniBridge8110(): ULong
@SymbolName("libgtk3_kniBridge8111")
private external fun kniBridge8111(): ULong
@SymbolName("libgtk3_kniBridge8112")
private external fun kniBridge8112(): ULong
@SymbolName("libgtk3_kniBridge8113")
private external fun kniBridge8113(): ULong
@SymbolName("libgtk3_kniBridge8114")
private external fun kniBridge8114(): ULong
@SymbolName("libgtk3_kniBridge8115")
private external fun kniBridge8115(): ULong
@SymbolName("libgtk3_kniBridge8116")
private external fun kniBridge8116(): ULong
@SymbolName("libgtk3_kniBridge8117")
private external fun kniBridge8117(): ULong
@SymbolName("libgtk3_kniBridge8118")
private external fun kniBridge8118(): ULong
@SymbolName("libgtk3_kniBridge8119")
private external fun kniBridge8119(): ULong
@SymbolName("libgtk3_kniBridge8120")
private external fun kniBridge8120(): ULong
@SymbolName("libgtk3_kniBridge8121")
private external fun kniBridge8121(): ULong
@SymbolName("libgtk3_kniBridge8122")
private external fun kniBridge8122(): ULong
@SymbolName("libgtk3_kniBridge8123")
private external fun kniBridge8123(): ULong
@SymbolName("libgtk3_kniBridge8124")
private external fun kniBridge8124(): ULong
@SymbolName("libgtk3_kniBridge8125")
private external fun kniBridge8125(): ULong
@SymbolName("libgtk3_kniBridge8126")
private external fun kniBridge8126(): ULong
@SymbolName("libgtk3_kniBridge8127")
private external fun kniBridge8127(): ULong
@SymbolName("libgtk3_kniBridge8128")
private external fun kniBridge8128(): ULong
@SymbolName("libgtk3_kniBridge8129")
private external fun kniBridge8129(): ULong
@SymbolName("libgtk3_kniBridge8130")
private external fun kniBridge8130(): ULong
@SymbolName("libgtk3_kniBridge8131")
private external fun kniBridge8131(): ULong
@SymbolName("libgtk3_kniBridge8132")
private external fun kniBridge8132(): ULong
@SymbolName("libgtk3_kniBridge8133")
private external fun kniBridge8133(): ULong
@SymbolName("libgtk3_kniBridge8134")
private external fun kniBridge8134(): ULong
@SymbolName("libgtk3_kniBridge8135")
private external fun kniBridge8135(): ULong
@SymbolName("libgtk3_kniBridge8136")
private external fun kniBridge8136(): ULong
@SymbolName("libgtk3_kniBridge8137")
private external fun kniBridge8137(): ULong
@SymbolName("libgtk3_kniBridge8138")
private external fun kniBridge8138(): ULong
@SymbolName("libgtk3_kniBridge8139")
private external fun kniBridge8139(): ULong
@SymbolName("libgtk3_kniBridge8140")
private external fun kniBridge8140(): ULong
@SymbolName("libgtk3_kniBridge8141")
private external fun kniBridge8141(): ULong
@SymbolName("libgtk3_kniBridge8142")
private external fun kniBridge8142(): ULong
@SymbolName("libgtk3_kniBridge8143")
private external fun kniBridge8143(): ULong
@SymbolName("libgtk3_kniBridge8144")
private external fun kniBridge8144(): ULong
@SymbolName("libgtk3_kniBridge8145")
private external fun kniBridge8145(): ULong
@SymbolName("libgtk3_kniBridge8146")
private external fun kniBridge8146(): ULong
@SymbolName("libgtk3_kniBridge8147")
private external fun kniBridge8147(): UInt
@SymbolName("libgtk3_kniBridge8148")
private external fun kniBridge8148(): ULong
@SymbolName("libgtk3_kniBridge8149")
private external fun kniBridge8149(): ULong
@SymbolName("libgtk3_kniBridge8150")
private external fun kniBridge8150(): ULong
@SymbolName("libgtk3_kniBridge8151")
private external fun kniBridge8151(): ULong
@SymbolName("libgtk3_kniBridge8152")
private external fun kniBridge8152(): ULong
@SymbolName("libgtk3_kniBridge8153")
private external fun kniBridge8153(): ULong
@SymbolName("libgtk3_kniBridge8154")
private external fun kniBridge8154(): ULong
@SymbolName("libgtk3_kniBridge8155")
private external fun kniBridge8155(): ULong
@SymbolName("libgtk3_kniBridge8156")
private external fun kniBridge8156(): ULong
@SymbolName("libgtk3_kniBridge8157")
private external fun kniBridge8157(): ULong
@SymbolName("libgtk3_kniBridge8158")
private external fun kniBridge8158(): ULong
@SymbolName("libgtk3_kniBridge8159")
private external fun kniBridge8159(): ULong
@SymbolName("libgtk3_kniBridge8160")
private external fun kniBridge8160(): ULong
@SymbolName("libgtk3_kniBridge8161")
private external fun kniBridge8161(): ULong
@SymbolName("libgtk3_kniBridge8162")
private external fun kniBridge8162(): ULong
@SymbolName("libgtk3_kniBridge8163")
private external fun kniBridge8163(): ULong
@SymbolName("libgtk3_kniBridge8164")
private external fun kniBridge8164(): ULong
@SymbolName("libgtk3_kniBridge8165")
private external fun kniBridge8165(): ULong
@SymbolName("libgtk3_kniBridge8166")
private external fun kniBridge8166(): ULong
@SymbolName("libgtk3_kniBridge8167")
private external fun kniBridge8167(): ULong
@SymbolName("libgtk3_kniBridge8168")
private external fun kniBridge8168(): ULong
@SymbolName("libgtk3_kniBridge8169")
private external fun kniBridge8169(): ULong
@SymbolName("libgtk3_kniBridge8170")
private external fun kniBridge8170(): ULong
@SymbolName("libgtk3_kniBridge8171")
private external fun kniBridge8171(): ULong
@SymbolName("libgtk3_kniBridge8172")
private external fun kniBridge8172(): ULong
@SymbolName("libgtk3_kniBridge8173")
private external fun kniBridge8173(): ULong
@SymbolName("libgtk3_kniBridge8174")
private external fun kniBridge8174(): ULong
@SymbolName("libgtk3_kniBridge8175")
private external fun kniBridge8175(): UInt
@SymbolName("libgtk3_kniBridge8176")
private external fun kniBridge8176(): ULong
@SymbolName("libgtk3_kniBridge8177")
private external fun kniBridge8177(): ULong
@SymbolName("libgtk3_kniBridge8178")
private external fun kniBridge8178(): ULong
@SymbolName("libgtk3_kniBridge8179")
private external fun kniBridge8179(): ULong
@SymbolName("libgtk3_kniBridge8180")
private external fun kniBridge8180(): ULong
@SymbolName("libgtk3_kniBridge8181")
private external fun kniBridge8181(): ULong
@SymbolName("libgtk3_kniBridge8182")
private external fun kniBridge8182(): ULong
@SymbolName("libgtk3_kniBridge8183")
private external fun kniBridge8183(): ULong
@SymbolName("libgtk3_kniBridge8184")
private external fun kniBridge8184(): ULong
@SymbolName("libgtk3_kniBridge8185")
private external fun kniBridge8185(): ULong
@SymbolName("libgtk3_kniBridge8186")
private external fun kniBridge8186(): UInt
@SymbolName("libgtk3_kniBridge8187")
private external fun kniBridge8187(): ULong
@SymbolName("libgtk3_kniBridge8188")
private external fun kniBridge8188(): ULong
@SymbolName("libgtk3_kniBridge8189")
private external fun kniBridge8189(): ULong
@SymbolName("libgtk3_kniBridge8190")
private external fun kniBridge8190(): ULong
@SymbolName("libgtk3_kniBridge8191")
private external fun kniBridge8191(): ULong
@SymbolName("libgtk3_kniBridge8192")
private external fun kniBridge8192(): ULong
@SymbolName("libgtk3_kniBridge8193")
private external fun kniBridge8193(): ULong
@SymbolName("libgtk3_kniBridge8194")
private external fun kniBridge8194(): ULong
@SymbolName("libgtk3_kniBridge8195")
private external fun kniBridge8195(): ULong
@SymbolName("libgtk3_kniBridge8196")
private external fun kniBridge8196(): ULong
@SymbolName("libgtk3_kniBridge8197")
private external fun kniBridge8197(): ULong
@SymbolName("libgtk3_kniBridge8198")
private external fun kniBridge8198(): ULong
@SymbolName("libgtk3_kniBridge8199")
private external fun kniBridge8199(): ULong
@SymbolName("libgtk3_kniBridge8200")
private external fun kniBridge8200(): ULong
@SymbolName("libgtk3_kniBridge8201")
private external fun kniBridge8201(): ULong
@SymbolName("libgtk3_kniBridge8202")
private external fun kniBridge8202(): ULong
@SymbolName("libgtk3_kniBridge8203")
private external fun kniBridge8203(): ULong
@SymbolName("libgtk3_kniBridge8204")
private external fun kniBridge8204(): ULong
@SymbolName("libgtk3_kniBridge8205")
private external fun kniBridge8205(): ULong
@SymbolName("libgtk3_kniBridge8206")
private external fun kniBridge8206(): ULong
@SymbolName("libgtk3_kniBridge8207")
private external fun kniBridge8207(): ULong
@SymbolName("libgtk3_kniBridge8208")
private external fun kniBridge8208(): ULong
@SymbolName("libgtk3_kniBridge8209")
private external fun kniBridge8209(): ULong
@SymbolName("libgtk3_kniBridge8210")
private external fun kniBridge8210(): ULong
@SymbolName("libgtk3_kniBridge8211")
private external fun kniBridge8211(): ULong
@SymbolName("libgtk3_kniBridge8212")
private external fun kniBridge8212(): ULong
@SymbolName("libgtk3_kniBridge8213")
private external fun kniBridge8213(): ULong
@SymbolName("libgtk3_kniBridge8214")
private external fun kniBridge8214(): ULong
@SymbolName("libgtk3_kniBridge8215")
private external fun kniBridge8215(): UInt
@SymbolName("libgtk3_kniBridge8216")
private external fun kniBridge8216(): ULong
@SymbolName("libgtk3_kniBridge8217")
private external fun kniBridge8217(): ULong
@SymbolName("libgtk3_kniBridge8218")
private external fun kniBridge8218(): ULong
@SymbolName("libgtk3_kniBridge8219")
private external fun kniBridge8219(): ULong
@SymbolName("libgtk3_kniBridge8220")
private external fun kniBridge8220(): ULong
@SymbolName("libgtk3_kniBridge8221")
private external fun kniBridge8221(): ULong
@SymbolName("libgtk3_kniBridge8222")
private external fun kniBridge8222(): ULong
@SymbolName("libgtk3_kniBridge8223")
private external fun kniBridge8223(): ULong
@SymbolName("libgtk3_kniBridge8224")
private external fun kniBridge8224(): ULong
@SymbolName("libgtk3_kniBridge8225")
private external fun kniBridge8225(): ULong
@SymbolName("libgtk3_kniBridge8226")
private external fun kniBridge8226(): ULong
@SymbolName("libgtk3_kniBridge8227")
private external fun kniBridge8227(): ULong
@SymbolName("libgtk3_kniBridge8228")
private external fun kniBridge8228(): UInt
@SymbolName("libgtk3_kniBridge8229")
private external fun kniBridge8229(): UInt
@SymbolName("libgtk3_kniBridge8230")
private external fun kniBridge8230(): UInt
@SymbolName("libgtk3_kniBridge8231")
private external fun kniBridge8231(): UInt
@SymbolName("libgtk3_kniBridge8232")
private external fun kniBridge8232(): UInt
@SymbolName("libgtk3_kniBridge8233")
private external fun kniBridge8233(): ULong
@SymbolName("libgtk3_kniBridge8234")
private external fun kniBridge8234(): ULong
@SymbolName("libgtk3_kniBridge8235")
private external fun kniBridge8235(): ULong
@SymbolName("libgtk3_kniBridge8236")
private external fun kniBridge8236(): ULong
@SymbolName("libgtk3_kniBridge8237")
private external fun kniBridge8237(): ULong
@SymbolName("libgtk3_kniBridge8238")
private external fun kniBridge8238(): ULong
@SymbolName("libgtk3_kniBridge8239")
private external fun kniBridge8239(): ULong
@SymbolName("libgtk3_kniBridge8240")
private external fun kniBridge8240(): ULong
@SymbolName("libgtk3_kniBridge8241")
private external fun kniBridge8241(): ULong
@SymbolName("libgtk3_kniBridge8242")
private external fun kniBridge8242(): ULong
@SymbolName("libgtk3_kniBridge8243")
private external fun kniBridge8243(): ULong
@SymbolName("libgtk3_kniBridge8244")
private external fun kniBridge8244(): ULong
@SymbolName("libgtk3_kniBridge8245")
private external fun kniBridge8245(): ULong
@SymbolName("libgtk3_kniBridge8246")
private external fun kniBridge8246(): ULong
@SymbolName("libgtk3_kniBridge8247")
private external fun kniBridge8247(): ULong
@SymbolName("libgtk3_kniBridge8248")
private external fun kniBridge8248(): ULong
@SymbolName("libgtk3_kniBridge8249")
private external fun kniBridge8249(): ULong
@SymbolName("libgtk3_kniBridge8250")
private external fun kniBridge8250(): ULong
@SymbolName("libgtk3_kniBridge8251")
private external fun kniBridge8251(): ULong
@SymbolName("libgtk3_kniBridge8252")
private external fun kniBridge8252(): ULong
@SymbolName("libgtk3_kniBridge8253")
private external fun kniBridge8253(): ULong
@SymbolName("libgtk3_kniBridge8254")
private external fun kniBridge8254(): ULong
@SymbolName("libgtk3_kniBridge8255")
private external fun kniBridge8255(): ULong
@SymbolName("libgtk3_kniBridge8256")
private external fun kniBridge8256(): ULong
@SymbolName("libgtk3_kniBridge8257")
private external fun kniBridge8257(): UInt
@SymbolName("libgtk3_kniBridge8258")
private external fun kniBridge8258(): ULong
@SymbolName("libgtk3_kniBridge8259")
private external fun kniBridge8259(): ULong
@SymbolName("libgtk3_kniBridge8260")
private external fun kniBridge8260(): ULong
@SymbolName("libgtk3_kniBridge8261")
private external fun kniBridge8261(): ULong
@SymbolName("libgtk3_kniBridge8262")
private external fun kniBridge8262(): ULong
@SymbolName("libgtk3_kniBridge8263")
private external fun kniBridge8263(): ULong
@SymbolName("libgtk3_kniBridge8264")
private external fun kniBridge8264(): ULong
@SymbolName("libgtk3_kniBridge8265")
private external fun kniBridge8265(): ULong
@SymbolName("libgtk3_kniBridge8266")
private external fun kniBridge8266(): UInt
@SymbolName("libgtk3_kniBridge8267")
private external fun kniBridge8267(): ULong
@SymbolName("libgtk3_kniBridge8268")
private external fun kniBridge8268(): ULong
@SymbolName("libgtk3_kniBridge8269")
private external fun kniBridge8269(): UInt
@SymbolName("libgtk3_kniBridge8270")
private external fun kniBridge8270(): ULong
@SymbolName("libgtk3_kniBridge8271")
private external fun kniBridge8271(): ULong
@SymbolName("libgtk3_kniBridge8272")
private external fun kniBridge8272(): ULong
@SymbolName("libgtk3_kniBridge8273")
private external fun kniBridge8273(): ULong
@SymbolName("libgtk3_kniBridge8274")
private external fun kniBridge8274(): ULong
@SymbolName("libgtk3_kniBridge8275")
private external fun kniBridge8275(): ULong
@SymbolName("libgtk3_kniBridge8276")
private external fun kniBridge8276(): ULong
@SymbolName("libgtk3_kniBridge8277")
private external fun kniBridge8277(): ULong
@SymbolName("libgtk3_kniBridge8278")
private external fun kniBridge8278(): ULong
@SymbolName("libgtk3_kniBridge8279")
private external fun kniBridge8279(): ULong
@SymbolName("libgtk3_kniBridge8280")
private external fun kniBridge8280(): ULong
@SymbolName("libgtk3_kniBridge8281")
private external fun kniBridge8281(): ULong
@SymbolName("libgtk3_kniBridge8282")
private external fun kniBridge8282(): ULong
@SymbolName("libgtk3_kniBridge8283")
private external fun kniBridge8283(): ULong
@SymbolName("libgtk3_kniBridge8284")
private external fun kniBridge8284(): ULong
@SymbolName("libgtk3_kniBridge8285")
private external fun kniBridge8285(): ULong
@SymbolName("libgtk3_kniBridge8286")
private external fun kniBridge8286(): ULong
@SymbolName("libgtk3_kniBridge8287")
private external fun kniBridge8287(): ULong
@SymbolName("libgtk3_kniBridge8288")
private external fun kniBridge8288(): ULong
@SymbolName("libgtk3_kniBridge8289")
private external fun kniBridge8289(): ULong
@SymbolName("libgtk3_kniBridge8290")
private external fun kniBridge8290(): ULong
@SymbolName("libgtk3_kniBridge8291")
private external fun kniBridge8291(): ULong
@SymbolName("libgtk3_kniBridge8292")
private external fun kniBridge8292(): ULong
@SymbolName("libgtk3_kniBridge8293")
private external fun kniBridge8293(): ULong
@SymbolName("libgtk3_kniBridge8294")
private external fun kniBridge8294(): ULong
@SymbolName("libgtk3_kniBridge8295")
private external fun kniBridge8295(): ULong
@SymbolName("libgtk3_kniBridge8296")
private external fun kniBridge8296(): ULong
@SymbolName("libgtk3_kniBridge8297")
private external fun kniBridge8297(): ULong
@SymbolName("libgtk3_kniBridge8298")
private external fun kniBridge8298(): ULong
@SymbolName("libgtk3_kniBridge8299")
private external fun kniBridge8299(): ULong
@SymbolName("libgtk3_kniBridge8300")
private external fun kniBridge8300(): ULong
@SymbolName("libgtk3_kniBridge8301")
private external fun kniBridge8301(): ULong
@SymbolName("libgtk3_kniBridge8302")
private external fun kniBridge8302(): ULong
@SymbolName("libgtk3_kniBridge8303")
private external fun kniBridge8303(): ULong
@SymbolName("libgtk3_kniBridge8304")
private external fun kniBridge8304(): ULong
@SymbolName("libgtk3_kniBridge8305")
private external fun kniBridge8305(): ULong
@SymbolName("libgtk3_kniBridge8306")
private external fun kniBridge8306(): ULong
@SymbolName("libgtk3_kniBridge8307")
private external fun kniBridge8307(): ULong
@SymbolName("libgtk3_kniBridge8308")
private external fun kniBridge8308(): ULong
@SymbolName("libgtk3_kniBridge8309")
private external fun kniBridge8309(): ULong
@SymbolName("libgtk3_kniBridge8310")
private external fun kniBridge8310(): ULong
@SymbolName("libgtk3_kniBridge8311")
private external fun kniBridge8311(): ULong
@SymbolName("libgtk3_kniBridge8312")
private external fun kniBridge8312(): ULong
@SymbolName("libgtk3_kniBridge8313")
private external fun kniBridge8313(): ULong
@SymbolName("libgtk3_kniBridge8314")
private external fun kniBridge8314(): ULong
@SymbolName("libgtk3_kniBridge8315")
private external fun kniBridge8315(): ULong
@SymbolName("libgtk3_kniBridge8316")
private external fun kniBridge8316(): ULong
@SymbolName("libgtk3_kniBridge8317")
private external fun kniBridge8317(): ULong
@SymbolName("libgtk3_kniBridge8318")
private external fun kniBridge8318(): ULong
@SymbolName("libgtk3_kniBridge8319")
private external fun kniBridge8319(): ULong
@SymbolName("libgtk3_kniBridge8320")
private external fun kniBridge8320(): ULong
@SymbolName("libgtk3_kniBridge8321")
private external fun kniBridge8321(): ULong
@SymbolName("libgtk3_kniBridge8322")
private external fun kniBridge8322(): ULong
@SymbolName("libgtk3_kniBridge8323")
private external fun kniBridge8323(): ULong
@SymbolName("libgtk3_kniBridge8324")
private external fun kniBridge8324(): ULong
@SymbolName("libgtk3_kniBridge8325")
private external fun kniBridge8325(): ULong
@SymbolName("libgtk3_kniBridge8326")
private external fun kniBridge8326(): ULong
@SymbolName("libgtk3_kniBridge8327")
private external fun kniBridge8327(): ULong
@SymbolName("libgtk3_kniBridge8328")
private external fun kniBridge8328(): ULong
@SymbolName("libgtk3_kniBridge8329")
private external fun kniBridge8329(): ULong
@SymbolName("libgtk3_kniBridge8330")
private external fun kniBridge8330(): ULong
@SymbolName("libgtk3_kniBridge8331")
private external fun kniBridge8331(): ULong
@SymbolName("libgtk3_kniBridge8332")
private external fun kniBridge8332(): ULong
@SymbolName("libgtk3_kniBridge8333")
private external fun kniBridge8333(): ULong
@SymbolName("libgtk3_kniBridge8334")
private external fun kniBridge8334(): ULong
@SymbolName("libgtk3_kniBridge8335")
private external fun kniBridge8335(): ULong
@SymbolName("libgtk3_kniBridge8336")
private external fun kniBridge8336(): ULong
@SymbolName("libgtk3_kniBridge8337")
private external fun kniBridge8337(): ULong
@SymbolName("libgtk3_kniBridge8338")
private external fun kniBridge8338(): ULong
@SymbolName("libgtk3_kniBridge8339")
private external fun kniBridge8339(): ULong
@SymbolName("libgtk3_kniBridge8340")
private external fun kniBridge8340(): ULong
@SymbolName("libgtk3_kniBridge8341")
private external fun kniBridge8341(): ULong
@SymbolName("libgtk3_kniBridge8342")
private external fun kniBridge8342(): ULong
@SymbolName("libgtk3_kniBridge8343")
private external fun kniBridge8343(): ULong
@SymbolName("libgtk3_kniBridge8344")
private external fun kniBridge8344(): ULong
@SymbolName("libgtk3_kniBridge8345")
private external fun kniBridge8345(): ULong
@SymbolName("libgtk3_kniBridge8346")
private external fun kniBridge8346(): ULong
@SymbolName("libgtk3_kniBridge8347")
private external fun kniBridge8347(): ULong
@SymbolName("libgtk3_kniBridge8348")
private external fun kniBridge8348(): ULong
@SymbolName("libgtk3_kniBridge8349")
private external fun kniBridge8349(): ULong
@SymbolName("libgtk3_kniBridge8350")
private external fun kniBridge8350(): ULong
@SymbolName("libgtk3_kniBridge8351")
private external fun kniBridge8351(): ULong
@SymbolName("libgtk3_kniBridge8352")
private external fun kniBridge8352(): ULong
@SymbolName("libgtk3_kniBridge8353")
private external fun kniBridge8353(): ULong
@SymbolName("libgtk3_kniBridge8354")
private external fun kniBridge8354(): ULong
@SymbolName("libgtk3_kniBridge8355")
private external fun kniBridge8355(): ULong
@SymbolName("libgtk3_kniBridge8356")
private external fun kniBridge8356(): ULong
@SymbolName("libgtk3_kniBridge8357")
private external fun kniBridge8357(): ULong
@SymbolName("libgtk3_kniBridge8358")
private external fun kniBridge8358(): ULong
@SymbolName("libgtk3_kniBridge8359")
private external fun kniBridge8359(): ULong
@SymbolName("libgtk3_kniBridge8360")
private external fun kniBridge8360(): ULong
@SymbolName("libgtk3_kniBridge8361")
private external fun kniBridge8361(): ULong
@SymbolName("libgtk3_kniBridge8362")
private external fun kniBridge8362(): ULong
@SymbolName("libgtk3_kniBridge8363")
private external fun kniBridge8363(): ULong
@SymbolName("libgtk3_kniBridge8364")
private external fun kniBridge8364(): ULong
@SymbolName("libgtk3_kniBridge8365")
private external fun kniBridge8365(): ULong
@SymbolName("libgtk3_kniBridge8366")
private external fun kniBridge8366(): ULong
@SymbolName("libgtk3_kniBridge8367")
private external fun kniBridge8367(): ULong
@SymbolName("libgtk3_kniBridge8368")
private external fun kniBridge8368(): ULong
@SymbolName("libgtk3_kniBridge8369")
private external fun kniBridge8369(): ULong
@SymbolName("libgtk3_kniBridge8370")
private external fun kniBridge8370(): ULong
@SymbolName("libgtk3_kniBridge8371")
private external fun kniBridge8371(): ULong
@SymbolName("libgtk3_kniBridge8372")
private external fun kniBridge8372(): ULong
@SymbolName("libgtk3_kniBridge8373")
private external fun kniBridge8373(): ULong
@SymbolName("libgtk3_kniBridge8374")
private external fun kniBridge8374(): ULong
@SymbolName("libgtk3_kniBridge8375")
private external fun kniBridge8375(): ULong
@SymbolName("libgtk3_kniBridge8376")
private external fun kniBridge8376(): ULong
@SymbolName("libgtk3_kniBridge8377")
private external fun kniBridge8377(): ULong
@SymbolName("libgtk3_kniBridge8378")
private external fun kniBridge8378(): ULong
@SymbolName("libgtk3_kniBridge8379")
private external fun kniBridge8379(): ULong
@SymbolName("libgtk3_kniBridge8380")
private external fun kniBridge8380(): ULong
@SymbolName("libgtk3_kniBridge8381")
private external fun kniBridge8381(): ULong
@SymbolName("libgtk3_kniBridge8382")
private external fun kniBridge8382(): ULong
@SymbolName("libgtk3_kniBridge8383")
private external fun kniBridge8383(): ULong
@SymbolName("libgtk3_kniBridge8384")
private external fun kniBridge8384(): ULong
@SymbolName("libgtk3_kniBridge8385")
private external fun kniBridge8385(): ULong
@SymbolName("libgtk3_kniBridge8386")
private external fun kniBridge8386(): ULong
@SymbolName("libgtk3_kniBridge8387")
private external fun kniBridge8387(): ULong
@SymbolName("libgtk3_kniBridge8388")
private external fun kniBridge8388(): ULong
@SymbolName("libgtk3_kniBridge8389")
private external fun kniBridge8389(): ULong
@SymbolName("libgtk3_kniBridge8390")
private external fun kniBridge8390(): ULong
@SymbolName("libgtk3_kniBridge8391")
private external fun kniBridge8391(): ULong
@SymbolName("libgtk3_kniBridge8392")
private external fun kniBridge8392(): ULong
@SymbolName("libgtk3_kniBridge8393")
private external fun kniBridge8393(): ULong
@SymbolName("libgtk3_kniBridge8394")
private external fun kniBridge8394(): ULong
@SymbolName("libgtk3_kniBridge8395")
private external fun kniBridge8395(): ULong
@SymbolName("libgtk3_kniBridge8396")
private external fun kniBridge8396(): ULong
@SymbolName("libgtk3_kniBridge8397")
private external fun kniBridge8397(): ULong
@SymbolName("libgtk3_kniBridge8398")
private external fun kniBridge8398(): ULong
@SymbolName("libgtk3_kniBridge8399")
private external fun kniBridge8399(): ULong
@SymbolName("libgtk3_kniBridge8400")
private external fun kniBridge8400(): ULong
@SymbolName("libgtk3_kniBridge8401")
private external fun kniBridge8401(): ULong
@SymbolName("libgtk3_kniBridge8402")
private external fun kniBridge8402(): ULong
@SymbolName("libgtk3_kniBridge8403")
private external fun kniBridge8403(): ULong
@SymbolName("libgtk3_kniBridge8404")
private external fun kniBridge8404(): ULong
@SymbolName("libgtk3_kniBridge8405")
private external fun kniBridge8405(): ULong
@SymbolName("libgtk3_kniBridge8406")
private external fun kniBridge8406(): ULong
@SymbolName("libgtk3_kniBridge8407")
private external fun kniBridge8407(): ULong
@SymbolName("libgtk3_kniBridge8408")
private external fun kniBridge8408(): ULong
@SymbolName("libgtk3_kniBridge8409")
private external fun kniBridge8409(): ULong
@SymbolName("libgtk3_kniBridge8410")
private external fun kniBridge8410(): ULong
@SymbolName("libgtk3_kniBridge8411")
private external fun kniBridge8411(): ULong
@SymbolName("libgtk3_kniBridge8412")
private external fun kniBridge8412(): ULong
@SymbolName("libgtk3_kniBridge8413")
private external fun kniBridge8413(): ULong
@SymbolName("libgtk3_kniBridge8414")
private external fun kniBridge8414(): ULong
@SymbolName("libgtk3_kniBridge8415")
private external fun kniBridge8415(): ULong
@SymbolName("libgtk3_kniBridge8416")
private external fun kniBridge8416(): ULong
@SymbolName("libgtk3_kniBridge8417")
private external fun kniBridge8417(): ULong
@SymbolName("libgtk3_kniBridge8418")
private external fun kniBridge8418(): ULong
@SymbolName("libgtk3_kniBridge8419")
private external fun kniBridge8419(): ULong
@SymbolName("libgtk3_kniBridge8420")
private external fun kniBridge8420(): ULong
@SymbolName("libgtk3_kniBridge8421")
private external fun kniBridge8421(): ULong
@SymbolName("libgtk3_kniBridge8422")
private external fun kniBridge8422(): ULong
@SymbolName("libgtk3_kniBridge8423")
private external fun kniBridge8423(): ULong
@SymbolName("libgtk3_kniBridge8424")
private external fun kniBridge8424(): ULong
@SymbolName("libgtk3_kniBridge8425")
private external fun kniBridge8425(): ULong
@SymbolName("libgtk3_kniBridge8426")
private external fun kniBridge8426(): ULong
@SymbolName("libgtk3_kniBridge8427")
private external fun kniBridge8427(): ULong
@SymbolName("libgtk3_kniBridge8428")
private external fun kniBridge8428(): ULong
@SymbolName("libgtk3_kniBridge8429")
private external fun kniBridge8429(): ULong
@SymbolName("libgtk3_kniBridge8430")
private external fun kniBridge8430(): ULong
@SymbolName("libgtk3_kniBridge8431")
private external fun kniBridge8431(): ULong
@SymbolName("libgtk3_kniBridge8432")
private external fun kniBridge8432(): ULong
@SymbolName("libgtk3_kniBridge8433")
private external fun kniBridge8433(): ULong
